/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessDenied;
import org.openapitools.client.model.BatchTooLarge;
import org.openapitools.client.model.CNAMEAlreadyExists;
import org.openapitools.client.model.CloudFrontOriginAccessIdentityAlreadyExists;
import org.openapitools.client.model.CloudFrontOriginAccessIdentityInUse;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentity20161125Request;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.CreateDistribution20161125Request;
import org.openapitools.client.model.CreateDistributionResult;
import org.openapitools.client.model.CreateDistributionWithTags20161125Request;
import org.openapitools.client.model.CreateDistributionWithTagsResult;
import org.openapitools.client.model.CreateInvalidation20161125Request;
import org.openapitools.client.model.CreateInvalidationResult;
import org.openapitools.client.model.CreateStreamingDistribution20161125Request;
import org.openapitools.client.model.CreateStreamingDistributionResult;
import org.openapitools.client.model.CreateStreamingDistributionWithTags20161125Request;
import org.openapitools.client.model.CreateStreamingDistributionWithTagsResult;
import org.openapitools.client.model.DistributionAlreadyExists;
import org.openapitools.client.model.DistributionNotDisabled;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityConfigResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.GetDistributionConfigResult;
import org.openapitools.client.model.GetDistributionResult;
import org.openapitools.client.model.GetInvalidationResult;
import org.openapitools.client.model.GetStreamingDistributionConfigResult;
import org.openapitools.client.model.GetStreamingDistributionResult;
import org.openapitools.client.model.IllegalUpdate;
import org.openapitools.client.model.InconsistentQuantities;
import org.openapitools.client.model.InvalidArgument;
import org.openapitools.client.model.InvalidDefaultRootObject;
import org.openapitools.client.model.InvalidErrorCode;
import org.openapitools.client.model.InvalidForwardCookies;
import org.openapitools.client.model.InvalidGeoRestrictionParameter;
import org.openapitools.client.model.InvalidHeadersForS3Origin;
import org.openapitools.client.model.InvalidIfMatchVersion;
import org.openapitools.client.model.InvalidLambdaFunctionAssociation;
import org.openapitools.client.model.InvalidLocationCode;
import org.openapitools.client.model.InvalidMinimumProtocolVersion;
import org.openapitools.client.model.InvalidOrigin;
import org.openapitools.client.model.InvalidOriginAccessIdentity;
import org.openapitools.client.model.InvalidProtocolSettings;
import org.openapitools.client.model.InvalidQueryStringParameters;
import org.openapitools.client.model.InvalidRelativePath;
import org.openapitools.client.model.InvalidRequiredProtocol;
import org.openapitools.client.model.InvalidResponseCode;
import org.openapitools.client.model.InvalidTTLOrder;
import org.openapitools.client.model.InvalidTagging;
import org.openapitools.client.model.InvalidViewerCertificate;
import org.openapitools.client.model.InvalidWebACLId;
import org.openapitools.client.model.ListCloudFrontOriginAccessIdentitiesResult;
import org.openapitools.client.model.ListDistributionsByWebACLIdResult;
import org.openapitools.client.model.ListDistributionsResult;
import org.openapitools.client.model.ListInvalidationsResult;
import org.openapitools.client.model.ListStreamingDistributionsResult;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.MissingBody;
import org.openapitools.client.model.NoSuchCloudFrontOriginAccessIdentity;
import org.openapitools.client.model.NoSuchDistribution;
import org.openapitools.client.model.NoSuchInvalidation;
import org.openapitools.client.model.NoSuchOrigin;
import org.openapitools.client.model.NoSuchResource;
import org.openapitools.client.model.NoSuchStreamingDistribution;
import org.openapitools.client.model.PreconditionFailed;
import org.openapitools.client.model.StreamingDistributionAlreadyExists;
import org.openapitools.client.model.StreamingDistributionNotDisabled;
import org.openapitools.client.model.TagResource20161125Request;
import org.openapitools.client.model.TooManyCacheBehaviors;
import org.openapitools.client.model.TooManyCertificates;
import org.openapitools.client.model.TooManyCloudFrontOriginAccessIdentities;
import org.openapitools.client.model.TooManyCookieNamesInWhiteList;
import org.openapitools.client.model.TooManyDistributionCNAMEs;
import org.openapitools.client.model.TooManyDistributions;
import org.openapitools.client.model.TooManyDistributionsWithLambdaAssociations;
import org.openapitools.client.model.TooManyHeadersInForwardedValues;
import org.openapitools.client.model.TooManyInvalidationsInProgress;
import org.openapitools.client.model.TooManyLambdaFunctionAssociations;
import org.openapitools.client.model.TooManyOriginCustomHeaders;
import org.openapitools.client.model.TooManyOrigins;
import org.openapitools.client.model.TooManyQueryStringParameters;
import org.openapitools.client.model.TooManyStreamingDistributionCNAMEs;
import org.openapitools.client.model.TooManyStreamingDistributions;
import org.openapitools.client.model.TooManyTrustedSigners;
import org.openapitools.client.model.TrustedSignerDoesNotExist;
import org.openapitools.client.model.UntagResource20161125Request;
import org.openapitools.client.model.UpdateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.UpdateDistributionResult;
import org.openapitools.client.model.UpdateStreamingDistributionResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCloudFrontOriginAccessIdentity20161125
     * @param createCloudFrontOriginAccessIdentity20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudFrontOriginAccessIdentity20161125Call(CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCloudFrontOriginAccessIdentity20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/origin-access-identity/cloudfront";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCloudFrontOriginAccessIdentity20161125Request' is set
        if (createCloudFrontOriginAccessIdentity20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createCloudFrontOriginAccessIdentity20161125Request' when calling createCloudFrontOriginAccessIdentity20161125(Async)");
        }

        return createCloudFrontOriginAccessIdentity20161125Call(createCloudFrontOriginAccessIdentity20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateCloudFrontOriginAccessIdentityResult createCloudFrontOriginAccessIdentity20161125(CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCloudFrontOriginAccessIdentityResult> localVarResp = createCloudFrontOriginAccessIdentity20161125WithHttpInfo(createCloudFrontOriginAccessIdentity20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCloudFrontOriginAccessIdentityResult> createCloudFrontOriginAccessIdentity20161125WithHttpInfo(CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(createCloudFrontOriginAccessIdentity20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudFrontOriginAccessIdentity20161125Async(CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(createCloudFrontOriginAccessIdentity20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDistribution20161125
     * @param createDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistribution20161125Call(CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistribution20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDistribution20161125ValidateBeforeCall(CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDistribution20161125Request' is set
        if (createDistribution20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createDistribution20161125Request' when calling createDistribution20161125(Async)");
        }

        return createDistribution20161125Call(createDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new web distribution. Send a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;/&lt;i&gt;CloudFront API version&lt;/i&gt;/distribution&lt;/code&gt;/&lt;code&gt;distribution ID&lt;/code&gt; resource.
     * @param createDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public CreateDistributionResult createDistribution20161125(CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDistributionResult> localVarResp = createDistribution20161125WithHttpInfo(createDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new web distribution. Send a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;/&lt;i&gt;CloudFront API version&lt;/i&gt;/distribution&lt;/code&gt;/&lt;code&gt;distribution ID&lt;/code&gt; resource.
     * @param createDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDistributionResult> createDistribution20161125WithHttpInfo(CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDistribution20161125ValidateBeforeCall(createDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new web distribution. Send a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;/&lt;i&gt;CloudFront API version&lt;/i&gt;/distribution&lt;/code&gt;/&lt;code&gt;distribution ID&lt;/code&gt; resource.
     * @param createDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistribution20161125Async(CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDistribution20161125ValidateBeforeCall(createDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDistributionWithTags20161125
     * @param withTags  (required)
     * @param createDistributionWithTags20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistributionWithTags20161125Call(Boolean withTags, CreateDistributionWithTags20161125Request createDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistributionWithTags20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution#WithTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WithTags", withTags));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDistributionWithTags20161125ValidateBeforeCall(Boolean withTags, CreateDistributionWithTags20161125Request createDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'withTags' is set
        if (withTags == null) {
            throw new ApiException("Missing the required parameter 'withTags' when calling createDistributionWithTags20161125(Async)");
        }

        // verify the required parameter 'createDistributionWithTags20161125Request' is set
        if (createDistributionWithTags20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createDistributionWithTags20161125Request' when calling createDistributionWithTags20161125(Async)");
        }

        return createDistributionWithTags20161125Call(withTags, createDistributionWithTags20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new distribution with tags.
     * @param withTags  (required)
     * @param createDistributionWithTags20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDistributionWithTagsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public CreateDistributionWithTagsResult createDistributionWithTags20161125(Boolean withTags, CreateDistributionWithTags20161125Request createDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDistributionWithTagsResult> localVarResp = createDistributionWithTags20161125WithHttpInfo(withTags, createDistributionWithTags20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new distribution with tags.
     * @param withTags  (required)
     * @param createDistributionWithTags20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDistributionWithTagsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDistributionWithTagsResult> createDistributionWithTags20161125WithHttpInfo(Boolean withTags, CreateDistributionWithTags20161125Request createDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDistributionWithTags20161125ValidateBeforeCall(withTags, createDistributionWithTags20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDistributionWithTagsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new distribution with tags.
     * @param withTags  (required)
     * @param createDistributionWithTags20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistributionWithTags20161125Async(Boolean withTags, CreateDistributionWithTags20161125Request createDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDistributionWithTagsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDistributionWithTags20161125ValidateBeforeCall(withTags, createDistributionWithTags20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDistributionWithTagsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInvalidation20161125
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvalidation20161125Call(String distributionId, CreateInvalidation20161125Request createInvalidation20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInvalidation20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution/{DistributionId}/invalidation"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvalidation20161125ValidateBeforeCall(String distributionId, CreateInvalidation20161125Request createInvalidation20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling createInvalidation20161125(Async)");
        }

        // verify the required parameter 'createInvalidation20161125Request' is set
        if (createInvalidation20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createInvalidation20161125Request' when calling createInvalidation20161125(Async)");
        }

        return createInvalidation20161125Call(distributionId, createInvalidation20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new invalidation. 
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateInvalidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateInvalidationResult createInvalidation20161125(String distributionId, CreateInvalidation20161125Request createInvalidation20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateInvalidationResult> localVarResp = createInvalidation20161125WithHttpInfo(distributionId, createInvalidation20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new invalidation. 
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateInvalidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateInvalidationResult> createInvalidation20161125WithHttpInfo(String distributionId, CreateInvalidation20161125Request createInvalidation20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createInvalidation20161125ValidateBeforeCall(distributionId, createInvalidation20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateInvalidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new invalidation. 
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvalidation20161125Async(String distributionId, CreateInvalidation20161125Request createInvalidation20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateInvalidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvalidation20161125ValidateBeforeCall(distributionId, createInvalidation20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateInvalidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamingDistribution20161125
     * @param createStreamingDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistribution20161125Call(CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistribution20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/streaming-distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamingDistribution20161125ValidateBeforeCall(CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createStreamingDistribution20161125Request' is set
        if (createStreamingDistribution20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistribution20161125Request' when calling createStreamingDistribution20161125(Async)");
        }

        return createStreamingDistribution20161125Call(createStreamingDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new RMTP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. &lt;/p&gt; &lt;p&gt;To create a new web distribution, submit a &lt;code&gt;POST&lt;/code&gt; request to the &lt;i&gt;CloudFront API version&lt;/i&gt;/distribution resource. The request body must include a document with a &lt;i&gt;StreamingDistributionConfig&lt;/i&gt; element. The response echoes the &lt;code&gt;StreamingDistributionConfig&lt;/code&gt; element and returns other information about the RTMP distribution.&lt;/p&gt; &lt;p&gt;To get the status of your request, use the &lt;i&gt;GET StreamingDistribution&lt;/i&gt; API action. When the value of &lt;code&gt;Enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;, your distribution is ready. A distribution usually deploys in less than 15 minutes.&lt;/p&gt; &lt;p&gt;For more information about web distributions, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\&quot;&gt;Working with RTMP Distributions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values specified.&lt;/p&gt; &lt;/important&gt;
     * @param createStreamingDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamingDistributionResult createStreamingDistribution20161125(CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStreamingDistributionResult> localVarResp = createStreamingDistribution20161125WithHttpInfo(createStreamingDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new RMTP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. &lt;/p&gt; &lt;p&gt;To create a new web distribution, submit a &lt;code&gt;POST&lt;/code&gt; request to the &lt;i&gt;CloudFront API version&lt;/i&gt;/distribution resource. The request body must include a document with a &lt;i&gt;StreamingDistributionConfig&lt;/i&gt; element. The response echoes the &lt;code&gt;StreamingDistributionConfig&lt;/code&gt; element and returns other information about the RTMP distribution.&lt;/p&gt; &lt;p&gt;To get the status of your request, use the &lt;i&gt;GET StreamingDistribution&lt;/i&gt; API action. When the value of &lt;code&gt;Enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;, your distribution is ready. A distribution usually deploys in less than 15 minutes.&lt;/p&gt; &lt;p&gt;For more information about web distributions, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\&quot;&gt;Working with RTMP Distributions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values specified.&lt;/p&gt; &lt;/important&gt;
     * @param createStreamingDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamingDistributionResult> createStreamingDistribution20161125WithHttpInfo(CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStreamingDistribution20161125ValidateBeforeCall(createStreamingDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new RMTP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. &lt;/p&gt; &lt;p&gt;To create a new web distribution, submit a &lt;code&gt;POST&lt;/code&gt; request to the &lt;i&gt;CloudFront API version&lt;/i&gt;/distribution resource. The request body must include a document with a &lt;i&gt;StreamingDistributionConfig&lt;/i&gt; element. The response echoes the &lt;code&gt;StreamingDistributionConfig&lt;/code&gt; element and returns other information about the RTMP distribution.&lt;/p&gt; &lt;p&gt;To get the status of your request, use the &lt;i&gt;GET StreamingDistribution&lt;/i&gt; API action. When the value of &lt;code&gt;Enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;, your distribution is ready. A distribution usually deploys in less than 15 minutes.&lt;/p&gt; &lt;p&gt;For more information about web distributions, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\&quot;&gt;Working with RTMP Distributions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values specified.&lt;/p&gt; &lt;/important&gt;
     * @param createStreamingDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistribution20161125Async(CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamingDistribution20161125ValidateBeforeCall(createStreamingDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamingDistributionWithTags20161125
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistributionWithTags20161125Call(Boolean withTags, CreateStreamingDistributionWithTags20161125Request createStreamingDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistributionWithTags20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/streaming-distribution#WithTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WithTags", withTags));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamingDistributionWithTags20161125ValidateBeforeCall(Boolean withTags, CreateStreamingDistributionWithTags20161125Request createStreamingDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'withTags' is set
        if (withTags == null) {
            throw new ApiException("Missing the required parameter 'withTags' when calling createStreamingDistributionWithTags20161125(Async)");
        }

        // verify the required parameter 'createStreamingDistributionWithTags20161125Request' is set
        if (createStreamingDistributionWithTags20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistributionWithTags20161125Request' when calling createStreamingDistributionWithTags20161125(Async)");
        }

        return createStreamingDistributionWithTags20161125Call(withTags, createStreamingDistributionWithTags20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new streaming distribution with tags.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStreamingDistributionWithTagsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamingDistributionWithTagsResult createStreamingDistributionWithTags20161125(Boolean withTags, CreateStreamingDistributionWithTags20161125Request createStreamingDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStreamingDistributionWithTagsResult> localVarResp = createStreamingDistributionWithTags20161125WithHttpInfo(withTags, createStreamingDistributionWithTags20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new streaming distribution with tags.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStreamingDistributionWithTagsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamingDistributionWithTagsResult> createStreamingDistributionWithTags20161125WithHttpInfo(Boolean withTags, CreateStreamingDistributionWithTags20161125Request createStreamingDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStreamingDistributionWithTags20161125ValidateBeforeCall(withTags, createStreamingDistributionWithTags20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionWithTagsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new streaming distribution with tags.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistributionWithTags20161125Async(Boolean withTags, CreateStreamingDistributionWithTags20161125Request createStreamingDistributionWithTags20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStreamingDistributionWithTagsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamingDistributionWithTags20161125ValidateBeforeCall(withTags, createStreamingDistributionWithTags20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionWithTagsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCloudFrontOriginAccessIdentity20161125
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudFrontOriginAccessIdentity20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/origin-access-identity/cloudfront/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCloudFrontOriginAccessIdentity20161125(Async)");
        }

        return deleteCloudFrontOriginAccessIdentity20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Delete an origin access identity. 
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCloudFrontOriginAccessIdentity20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteCloudFrontOriginAccessIdentity20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Delete an origin access identity. 
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCloudFrontOriginAccessIdentity20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an origin access identity. 
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudFrontOriginAccessIdentity20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDistribution20161125
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDistribution20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDistribution20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDistribution20161125(Async)");
        }

        return deleteDistribution20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Delete a distribution. 
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDistribution20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteDistribution20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Delete a distribution. 
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDistribution20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteDistribution20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a distribution. 
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDistribution20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDistribution20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStreamingDistribution20161125
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamingDistribution20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/streaming-distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStreamingDistribution20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStreamingDistribution20161125(Async)");
        }

        return deleteStreamingDistribution20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStreamingDistribution20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteStreamingDistribution20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStreamingDistribution20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteStreamingDistribution20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamingDistribution20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStreamingDistribution20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudFrontOriginAccessIdentity20161125
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentity20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/origin-access-identity/cloudfront/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentity20161125(Async)");
        }

        return getCloudFrontOriginAccessIdentity20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about an origin access identity. 
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetCloudFrontOriginAccessIdentityResult getCloudFrontOriginAccessIdentity20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCloudFrontOriginAccessIdentityResult> localVarResp = getCloudFrontOriginAccessIdentity20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about an origin access identity. 
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCloudFrontOriginAccessIdentityResult> getCloudFrontOriginAccessIdentity20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about an origin access identity. 
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentity20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudFrontOriginAccessIdentityConfig20161125
     * @param id The identity&#39;s ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentityConfig20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/origin-access-identity/cloudfront/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudFrontOriginAccessIdentityConfig20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentityConfig20161125(Async)");
        }

        return getCloudFrontOriginAccessIdentityConfig20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about an origin access identity. 
     * @param id The identity&#39;s ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCloudFrontOriginAccessIdentityConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCloudFrontOriginAccessIdentityConfigResult> localVarResp = getCloudFrontOriginAccessIdentityConfig20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about an origin access identity. 
     * @param id The identity&#39;s ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCloudFrontOriginAccessIdentityConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCloudFrontOriginAccessIdentityConfigResult> getCloudFrontOriginAccessIdentityConfig20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentityConfig20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about an origin access identity. 
     * @param id The identity&#39;s ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentityConfig20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCloudFrontOriginAccessIdentityConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentityConfig20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDistribution20161125
     * @param id The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistribution20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistribution20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDistribution20161125(Async)");
        }

        return getDistribution20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about a distribution. 
     * @param id The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetDistributionResult getDistribution20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDistributionResult> localVarResp = getDistribution20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about a distribution. 
     * @param id The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDistributionResult> getDistribution20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDistribution20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about a distribution. 
     * @param id The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistribution20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistribution20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDistributionConfig20161125
     * @param id The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistributionConfig20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistributionConfig20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDistributionConfig20161125(Async)");
        }

        return getDistributionConfig20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about a distribution. 
     * @param id The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDistributionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetDistributionConfigResult getDistributionConfig20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDistributionConfigResult> localVarResp = getDistributionConfig20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about a distribution. 
     * @param id The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDistributionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDistributionConfigResult> getDistributionConfig20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDistributionConfig20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDistributionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about a distribution. 
     * @param id The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistributionConfig20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDistributionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistributionConfig20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDistributionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvalidation20161125
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvalidation20161125Call(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution/{DistributionId}/invalidation/{Id}"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()))
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvalidation20161125ValidateBeforeCall(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling getInvalidation20161125(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInvalidation20161125(Async)");
        }

        return getInvalidation20161125Call(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about an invalidation. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetInvalidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetInvalidationResult getInvalidation20161125(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetInvalidationResult> localVarResp = getInvalidation20161125WithHttpInfo(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about an invalidation. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetInvalidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInvalidationResult> getInvalidation20161125WithHttpInfo(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getInvalidation20161125ValidateBeforeCall(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetInvalidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about an invalidation. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvalidation20161125Async(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetInvalidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvalidation20161125ValidateBeforeCall(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetInvalidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamingDistribution20161125
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistribution20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/streaming-distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamingDistribution20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStreamingDistribution20161125(Async)");
        }

        return getStreamingDistribution20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetStreamingDistributionResult getStreamingDistribution20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetStreamingDistributionResult> localVarResp = getStreamingDistribution20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStreamingDistributionResult> getStreamingDistribution20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getStreamingDistribution20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistribution20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamingDistribution20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamingDistributionConfig20161125
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistributionConfig20161125Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/streaming-distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamingDistributionConfig20161125ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStreamingDistributionConfig20161125(Async)");
        }

        return getStreamingDistributionConfig20161125Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about a streaming distribution. 
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetStreamingDistributionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetStreamingDistributionConfigResult getStreamingDistributionConfig20161125(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetStreamingDistributionConfigResult> localVarResp = getStreamingDistributionConfig20161125WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about a streaming distribution. 
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetStreamingDistributionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStreamingDistributionConfigResult> getStreamingDistributionConfig20161125WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getStreamingDistributionConfig20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about a streaming distribution. 
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistributionConfig20161125Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetStreamingDistributionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamingDistributionConfig20161125ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCloudFrontOriginAccessIdentities20161125
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCloudFrontOriginAccessIdentities20161125Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/origin-access-identity/cloudfront";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCloudFrontOriginAccessIdentities20161125ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listCloudFrontOriginAccessIdentities20161125Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body.  (optional)
     * @return ListCloudFrontOriginAccessIdentitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListCloudFrontOriginAccessIdentitiesResult listCloudFrontOriginAccessIdentities20161125(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListCloudFrontOriginAccessIdentitiesResult> localVarResp = listCloudFrontOriginAccessIdentities20161125WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body.  (optional)
     * @return ApiResponse&lt;ListCloudFrontOriginAccessIdentitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCloudFrontOriginAccessIdentitiesResult> listCloudFrontOriginAccessIdentities20161125WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listCloudFrontOriginAccessIdentities20161125ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListCloudFrontOriginAccessIdentitiesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCloudFrontOriginAccessIdentities20161125Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListCloudFrontOriginAccessIdentitiesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCloudFrontOriginAccessIdentities20161125ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListCloudFrontOriginAccessIdentitiesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributions20161125
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributions20161125Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributions20161125ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listDistributions20161125Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @return ListDistributionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsResult listDistributions20161125(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsResult> localVarResp = listDistributions20161125WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @return ApiResponse&lt;ListDistributionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsResult> listDistributions20161125WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributions20161125ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributions20161125Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributions20161125ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributionsByWebACLId20161125
     * @param webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.)  (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByWebACLId20161125Call(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/distributionsByWebACLId/{WebACLId}"
            .replace("{" + "WebACLId" + "}", localVarApiClient.escapeString(webACLId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributionsByWebACLId20161125ValidateBeforeCall(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webACLId' is set
        if (webACLId == null) {
            throw new ApiException("Missing the required parameter 'webACLId' when calling listDistributionsByWebACLId20161125(Async)");
        }

        return listDistributionsByWebACLId20161125Call(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     * @param webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.)  (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @return ListDistributionsByWebACLIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsByWebACLIdResult listDistributionsByWebACLId20161125(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsByWebACLIdResult> localVarResp = listDistributionsByWebACLId20161125WithHttpInfo(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     * @param webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.)  (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @return ApiResponse&lt;ListDistributionsByWebACLIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsByWebACLIdResult> listDistributionsByWebACLId20161125WithHttpInfo(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributionsByWebACLId20161125ValidateBeforeCall(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsByWebACLIdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     * @param webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.)  (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByWebACLId20161125Async(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsByWebACLIdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributionsByWebACLId20161125ValidateBeforeCall(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsByWebACLIdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvalidations20161125
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page.  (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvalidations20161125Call(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution/{DistributionId}/invalidation"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvalidations20161125ValidateBeforeCall(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling listInvalidations20161125(Async)");
        }

        return listInvalidations20161125Call(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * Lists invalidation batches. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page.  (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @return ListInvalidationsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ListInvalidationsResult listInvalidations20161125(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListInvalidationsResult> localVarResp = listInvalidations20161125WithHttpInfo(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists invalidation batches. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page.  (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @return ApiResponse&lt;ListInvalidationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListInvalidationsResult> listInvalidations20161125WithHttpInfo(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listInvalidations20161125ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListInvalidationsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists invalidation batches. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page.  (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvalidations20161125Async(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListInvalidationsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvalidations20161125ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListInvalidationsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStreamingDistributions20161125
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamingDistributions20161125Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/streaming-distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStreamingDistributions20161125ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listStreamingDistributions20161125Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List streaming distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @return ListStreamingDistributionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListStreamingDistributionsResult listStreamingDistributions20161125(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListStreamingDistributionsResult> localVarResp = listStreamingDistributions20161125WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List streaming distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @return ApiResponse&lt;ListStreamingDistributionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStreamingDistributionsResult> listStreamingDistributions20161125WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listStreamingDistributions20161125ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListStreamingDistributionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List streaming distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamingDistributions20161125Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListStreamingDistributionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStreamingDistributions20161125ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListStreamingDistributionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource20161125
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResource20161125Call(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2016-11-25/tagging#Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResource20161125ValidateBeforeCall(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling listTagsForResource20161125(Async)");
        }

        return listTagsForResource20161125Call(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * List tags for a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResult listTagsForResource20161125(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResult> localVarResp = listTagsForResource20161125WithHttpInfo(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * List tags for a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResult> listTagsForResource20161125WithHttpInfo(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResource20161125ValidateBeforeCall(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List tags for a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResource20161125Async(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResource20161125ValidateBeforeCall(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource20161125
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResource20161125Call(String resource, String operation, TagResource20161125Request tagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResource20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/tagging#Operation=Tag&Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResource20161125ValidateBeforeCall(String resource, String operation, TagResource20161125Request tagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling tagResource20161125(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling tagResource20161125(Async)");
        }

        // verify the required parameter 'tagResource20161125Request' is set
        if (tagResource20161125Request == null) {
            throw new ApiException("Missing the required parameter 'tagResource20161125Request' when calling tagResource20161125(Async)");
        }

        return tagResource20161125Call(resource, operation, tagResource20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Add tags to a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public void tagResource20161125(String resource, String operation, TagResource20161125Request tagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagResource20161125WithHttpInfo(resource, operation, tagResource20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Add tags to a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagResource20161125WithHttpInfo(String resource, String operation, TagResource20161125Request tagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResource20161125ValidateBeforeCall(resource, operation, tagResource20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add tags to a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResource20161125Async(String resource, String operation, TagResource20161125Request tagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResource20161125ValidateBeforeCall(resource, operation, tagResource20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource20161125
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResource20161125Call(String resource, String operation, UntagResource20161125Request untagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResource20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/tagging#Operation=Untag&Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResource20161125ValidateBeforeCall(String resource, String operation, UntagResource20161125Request untagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling untagResource20161125(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling untagResource20161125(Async)");
        }

        // verify the required parameter 'untagResource20161125Request' is set
        if (untagResource20161125Request == null) {
            throw new ApiException("Missing the required parameter 'untagResource20161125Request' when calling untagResource20161125(Async)");
        }

        return untagResource20161125Call(resource, operation, untagResource20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Remove tags from a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public void untagResource20161125(String resource, String operation, UntagResource20161125Request untagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagResource20161125WithHttpInfo(resource, operation, untagResource20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Remove tags from a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagResource20161125WithHttpInfo(String resource, String operation, UntagResource20161125Request untagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResource20161125ValidateBeforeCall(resource, operation, untagResource20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove tags from a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResource20161125Async(String resource, String operation, UntagResource20161125Request untagResource20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResource20161125ValidateBeforeCall(resource, operation, untagResource20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCloudFrontOriginAccessIdentity20161125
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudFrontOriginAccessIdentity20161125Call(String id, CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCloudFrontOriginAccessIdentity20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/origin-access-identity/cloudfront/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(String id, CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCloudFrontOriginAccessIdentity20161125(Async)");
        }

        // verify the required parameter 'createCloudFrontOriginAccessIdentity20161125Request' is set
        if (createCloudFrontOriginAccessIdentity20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createCloudFrontOriginAccessIdentity20161125Request' when calling updateCloudFrontOriginAccessIdentity20161125(Async)");
        }

        return updateCloudFrontOriginAccessIdentity20161125Call(id, createCloudFrontOriginAccessIdentity20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update an origin access identity. 
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCloudFrontOriginAccessIdentityResult updateCloudFrontOriginAccessIdentity20161125(String id, CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateCloudFrontOriginAccessIdentityResult> localVarResp = updateCloudFrontOriginAccessIdentity20161125WithHttpInfo(id, createCloudFrontOriginAccessIdentity20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an origin access identity. 
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCloudFrontOriginAccessIdentityResult> updateCloudFrontOriginAccessIdentity20161125WithHttpInfo(String id, CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(id, createCloudFrontOriginAccessIdentity20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an origin access identity. 
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudFrontOriginAccessIdentity20161125Async(String id, CreateCloudFrontOriginAccessIdentity20161125Request createCloudFrontOriginAccessIdentity20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCloudFrontOriginAccessIdentity20161125ValidateBeforeCall(id, createCloudFrontOriginAccessIdentity20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDistribution20161125
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDistribution20161125Call(String id, CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistribution20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDistribution20161125ValidateBeforeCall(String id, CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDistribution20161125(Async)");
        }

        // verify the required parameter 'createDistribution20161125Request' is set
        if (createDistribution20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createDistribution20161125Request' when calling updateDistribution20161125(Async)");
        }

        return updateDistribution20161125Call(id, createDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update a distribution. 
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDistributionResult updateDistribution20161125(String id, CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateDistributionResult> localVarResp = updateDistribution20161125WithHttpInfo(id, createDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a distribution. 
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDistributionResult> updateDistribution20161125WithHttpInfo(String id, CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateDistribution20161125ValidateBeforeCall(id, createDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a distribution. 
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDistribution20161125Async(String id, CreateDistribution20161125Request createDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDistribution20161125ValidateBeforeCall(id, createDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStreamingDistribution20161125
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamingDistribution20161125Call(String id, CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistribution20161125Request;

        // create path and map variables
        String localVarPath = "/2016-11-25/streaming-distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStreamingDistribution20161125ValidateBeforeCall(String id, CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateStreamingDistribution20161125(Async)");
        }

        // verify the required parameter 'createStreamingDistribution20161125Request' is set
        if (createStreamingDistribution20161125Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistribution20161125Request' when calling updateStreamingDistribution20161125(Async)");
        }

        return updateStreamingDistribution20161125Call(id, createStreamingDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update a streaming distribution. 
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStreamingDistributionResult updateStreamingDistribution20161125(String id, CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateStreamingDistributionResult> localVarResp = updateStreamingDistribution20161125WithHttpInfo(id, createStreamingDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a streaming distribution. 
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStreamingDistributionResult> updateStreamingDistribution20161125WithHttpInfo(String id, CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateStreamingDistribution20161125ValidateBeforeCall(id, createStreamingDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a streaming distribution. 
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20161125Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamingDistribution20161125Async(String id, CreateStreamingDistribution20161125Request createStreamingDistribution20161125Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStreamingDistribution20161125ValidateBeforeCall(id, createStreamingDistribution20161125Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
