/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PriceClass;
import org.openapitools.client.model.StreamingDistributionSummaryAliases;
import org.openapitools.client.model.StreamingDistributionSummaryS3Origin;
import org.openapitools.client.model.StreamingDistributionSummaryTrustedSigners;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  A summary of the information for an Amazon CloudFront streaming distribution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:55.977307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingDistributionSummary {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_A_R_N = "ARN";
  @SerializedName(SERIALIZED_NAME_A_R_N)
  private String ARN;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_S3_ORIGIN = "S3Origin";
  @SerializedName(SERIALIZED_NAME_S3_ORIGIN)
  private StreamingDistributionSummaryS3Origin s3Origin;

  public static final String SERIALIZED_NAME_ALIASES = "Aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private StreamingDistributionSummaryAliases aliases;

  public static final String SERIALIZED_NAME_TRUSTED_SIGNERS = "TrustedSigners";
  @SerializedName(SERIALIZED_NAME_TRUSTED_SIGNERS)
  private StreamingDistributionSummaryTrustedSigners trustedSigners;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_PRICE_CLASS = "PriceClass";
  @SerializedName(SERIALIZED_NAME_PRICE_CLASS)
  private PriceClass priceClass;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public StreamingDistributionSummary() {
  }

  public StreamingDistributionSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StreamingDistributionSummary ARN(String ARN) {
    this.ARN = ARN;
    return this;
  }

  /**
   * Get ARN
   * @return ARN
   */
  @javax.annotation.Nonnull
  public String getARN() {
    return ARN;
  }

  public void setARN(String ARN) {
    this.ARN = ARN;
  }


  public StreamingDistributionSummary status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public StreamingDistributionSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public StreamingDistributionSummary domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public StreamingDistributionSummary s3Origin(StreamingDistributionSummaryS3Origin s3Origin) {
    this.s3Origin = s3Origin;
    return this;
  }

  /**
   * Get s3Origin
   * @return s3Origin
   */
  @javax.annotation.Nonnull
  public StreamingDistributionSummaryS3Origin getS3Origin() {
    return s3Origin;
  }

  public void setS3Origin(StreamingDistributionSummaryS3Origin s3Origin) {
    this.s3Origin = s3Origin;
  }


  public StreamingDistributionSummary aliases(StreamingDistributionSummaryAliases aliases) {
    this.aliases = aliases;
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nonnull
  public StreamingDistributionSummaryAliases getAliases() {
    return aliases;
  }

  public void setAliases(StreamingDistributionSummaryAliases aliases) {
    this.aliases = aliases;
  }


  public StreamingDistributionSummary trustedSigners(StreamingDistributionSummaryTrustedSigners trustedSigners) {
    this.trustedSigners = trustedSigners;
    return this;
  }

  /**
   * Get trustedSigners
   * @return trustedSigners
   */
  @javax.annotation.Nonnull
  public StreamingDistributionSummaryTrustedSigners getTrustedSigners() {
    return trustedSigners;
  }

  public void setTrustedSigners(StreamingDistributionSummaryTrustedSigners trustedSigners) {
    this.trustedSigners = trustedSigners;
  }


  public StreamingDistributionSummary comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public StreamingDistributionSummary priceClass(PriceClass priceClass) {
    this.priceClass = priceClass;
    return this;
  }

  /**
   * Get priceClass
   * @return priceClass
   */
  @javax.annotation.Nonnull
  public PriceClass getPriceClass() {
    return priceClass;
  }

  public void setPriceClass(PriceClass priceClass) {
    this.priceClass = priceClass;
  }


  public StreamingDistributionSummary enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingDistributionSummary streamingDistributionSummary = (StreamingDistributionSummary) o;
    return Objects.equals(this.id, streamingDistributionSummary.id) &&
        Objects.equals(this.ARN, streamingDistributionSummary.ARN) &&
        Objects.equals(this.status, streamingDistributionSummary.status) &&
        Objects.equals(this.lastModifiedTime, streamingDistributionSummary.lastModifiedTime) &&
        Objects.equals(this.domainName, streamingDistributionSummary.domainName) &&
        Objects.equals(this.s3Origin, streamingDistributionSummary.s3Origin) &&
        Objects.equals(this.aliases, streamingDistributionSummary.aliases) &&
        Objects.equals(this.trustedSigners, streamingDistributionSummary.trustedSigners) &&
        Objects.equals(this.comment, streamingDistributionSummary.comment) &&
        Objects.equals(this.priceClass, streamingDistributionSummary.priceClass) &&
        Objects.equals(this.enabled, streamingDistributionSummary.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ARN, status, lastModifiedTime, domainName, s3Origin, aliases, trustedSigners, comment, priceClass, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingDistributionSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ARN: ").append(toIndentedString(ARN)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    s3Origin: ").append(toIndentedString(s3Origin)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    trustedSigners: ").append(toIndentedString(trustedSigners)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    priceClass: ").append(toIndentedString(priceClass)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("ARN");
    openapiFields.add("Status");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("DomainName");
    openapiFields.add("S3Origin");
    openapiFields.add("Aliases");
    openapiFields.add("TrustedSigners");
    openapiFields.add("Comment");
    openapiFields.add("PriceClass");
    openapiFields.add("Enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("ARN");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("LastModifiedTime");
    openapiRequiredFields.add("DomainName");
    openapiRequiredFields.add("S3Origin");
    openapiRequiredFields.add("Aliases");
    openapiRequiredFields.add("TrustedSigners");
    openapiRequiredFields.add("Comment");
    openapiRequiredFields.add("PriceClass");
    openapiRequiredFields.add("Enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingDistributionSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingDistributionSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingDistributionSummary is not found in the empty JSON string", StreamingDistributionSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingDistributionSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingDistributionSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamingDistributionSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `ARN`
      String.validateJsonElement(jsonObj.get("ARN"));
      // validate the required field `Status`
      String.validateJsonElement(jsonObj.get("Status"));
      // validate the required field `LastModifiedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the required field `S3Origin`
      StreamingDistributionSummaryS3Origin.validateJsonElement(jsonObj.get("S3Origin"));
      // validate the required field `Aliases`
      StreamingDistributionSummaryAliases.validateJsonElement(jsonObj.get("Aliases"));
      // validate the required field `TrustedSigners`
      StreamingDistributionSummaryTrustedSigners.validateJsonElement(jsonObj.get("TrustedSigners"));
      // validate the required field `Comment`
      String.validateJsonElement(jsonObj.get("Comment"));
      // validate the required field `PriceClass`
      PriceClass.validateJsonElement(jsonObj.get("PriceClass"));
      // validate the required field `Enabled`
      Boolean.validateJsonElement(jsonObj.get("Enabled"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingDistributionSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingDistributionSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingDistributionSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingDistributionSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingDistributionSummary>() {
           @Override
           public void write(JsonWriter out, StreamingDistributionSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingDistributionSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingDistributionSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingDistributionSummary
   * @throws IOException if the JSON string is invalid with respect to StreamingDistributionSummary
   */
  public static StreamingDistributionSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingDistributionSummary.class);
  }

  /**
   * Convert an instance of StreamingDistributionSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

