/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateInvalidation20161125RequestInvalidationBatchPaths;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An invalidation batch.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:55.977307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateInvalidation20161125RequestInvalidationBatch {
  public static final String SERIALIZED_NAME_PATHS = "Paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private CreateInvalidation20161125RequestInvalidationBatchPaths paths;

  public static final String SERIALIZED_NAME_CALLER_REFERENCE = "CallerReference";
  @SerializedName(SERIALIZED_NAME_CALLER_REFERENCE)
  private String callerReference;

  public CreateInvalidation20161125RequestInvalidationBatch() {
  }

  public CreateInvalidation20161125RequestInvalidationBatch paths(CreateInvalidation20161125RequestInvalidationBatchPaths paths) {
    this.paths = paths;
    return this;
  }

  /**
   * Get paths
   * @return paths
   */
  @javax.annotation.Nullable
  public CreateInvalidation20161125RequestInvalidationBatchPaths getPaths() {
    return paths;
  }

  public void setPaths(CreateInvalidation20161125RequestInvalidationBatchPaths paths) {
    this.paths = paths;
  }


  public CreateInvalidation20161125RequestInvalidationBatch callerReference(String callerReference) {
    this.callerReference = callerReference;
    return this;
  }

  /**
   * Get callerReference
   * @return callerReference
   */
  @javax.annotation.Nullable
  public String getCallerReference() {
    return callerReference;
  }

  public void setCallerReference(String callerReference) {
    this.callerReference = callerReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInvalidation20161125RequestInvalidationBatch createInvalidation20161125RequestInvalidationBatch = (CreateInvalidation20161125RequestInvalidationBatch) o;
    return Objects.equals(this.paths, createInvalidation20161125RequestInvalidationBatch.paths) &&
        Objects.equals(this.callerReference, createInvalidation20161125RequestInvalidationBatch.callerReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paths, callerReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInvalidation20161125RequestInvalidationBatch {\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    callerReference: ").append(toIndentedString(callerReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Paths");
    openapiFields.add("CallerReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInvalidation20161125RequestInvalidationBatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateInvalidation20161125RequestInvalidationBatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInvalidation20161125RequestInvalidationBatch is not found in the empty JSON string", CreateInvalidation20161125RequestInvalidationBatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInvalidation20161125RequestInvalidationBatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInvalidation20161125RequestInvalidationBatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Paths`
      if (jsonObj.get("Paths") != null && !jsonObj.get("Paths").isJsonNull()) {
        CreateInvalidation20161125RequestInvalidationBatchPaths.validateJsonElement(jsonObj.get("Paths"));
      }
      // validate the optional field `CallerReference`
      if (jsonObj.get("CallerReference") != null && !jsonObj.get("CallerReference").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CallerReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInvalidation20161125RequestInvalidationBatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInvalidation20161125RequestInvalidationBatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInvalidation20161125RequestInvalidationBatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInvalidation20161125RequestInvalidationBatch.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInvalidation20161125RequestInvalidationBatch>() {
           @Override
           public void write(JsonWriter out, CreateInvalidation20161125RequestInvalidationBatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInvalidation20161125RequestInvalidationBatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInvalidation20161125RequestInvalidationBatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInvalidation20161125RequestInvalidationBatch
   * @throws IOException if the JSON string is invalid with respect to CreateInvalidation20161125RequestInvalidationBatch
   */
  public static CreateInvalidation20161125RequestInvalidationBatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInvalidation20161125RequestInvalidationBatch.class);
  }

  /**
   * Convert an instance of CreateInvalidation20161125RequestInvalidationBatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

