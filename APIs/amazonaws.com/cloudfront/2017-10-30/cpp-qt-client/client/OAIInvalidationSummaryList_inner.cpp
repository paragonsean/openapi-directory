/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2017-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvalidationSummaryList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvalidationSummaryList_inner::OAIInvalidationSummaryList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvalidationSummaryList_inner::OAIInvalidationSummaryList_inner() {
    this->initializeModel();
}

OAIInvalidationSummaryList_inner::~OAIInvalidationSummaryList_inner() {}

void OAIInvalidationSummaryList_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIInvalidationSummaryList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvalidationSummaryList_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIInvalidationSummaryList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvalidationSummaryList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIInvalidationSummaryList_inner::getId() const {
    return m_id;
}
void OAIInvalidationSummaryList_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInvalidationSummaryList_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInvalidationSummaryList_inner::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIInvalidationSummaryList_inner::getCreateTime() const {
    return m_create_time;
}
void OAIInvalidationSummaryList_inner::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInvalidationSummaryList_inner::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInvalidationSummaryList_inner::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIInvalidationSummaryList_inner::getStatus() const {
    return m_status;
}
void OAIInvalidationSummaryList_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInvalidationSummaryList_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInvalidationSummaryList_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIInvalidationSummaryList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvalidationSummaryList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_create_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
