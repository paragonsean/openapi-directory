/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2017-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessDenied.h"
#include "OAIBatchTooLarge.h"
#include "OAICNAMEAlreadyExists.h"
#include "OAICannotChangeImmutablePublicKeyFields.h"
#include "OAICloudFrontOriginAccessIdentityAlreadyExists.h"
#include "OAICloudFrontOriginAccessIdentityInUse.h"
#include "OAICreateCloudFrontOriginAccessIdentity2017_10_30_request.h"
#include "OAICreateCloudFrontOriginAccessIdentityResult.h"
#include "OAICreateDistribution2017_10_30_request.h"
#include "OAICreateDistributionResult.h"
#include "OAICreateDistributionWithTags2017_10_30_request.h"
#include "OAICreateDistributionWithTagsResult.h"
#include "OAICreateFieldLevelEncryptionConfig2017_10_30_request.h"
#include "OAICreateFieldLevelEncryptionConfigResult.h"
#include "OAICreateFieldLevelEncryptionProfile2017_10_30_request.h"
#include "OAICreateFieldLevelEncryptionProfileResult.h"
#include "OAICreateInvalidation2017_10_30_request.h"
#include "OAICreateInvalidationResult.h"
#include "OAICreatePublicKey2017_10_30_request.h"
#include "OAICreatePublicKeyResult.h"
#include "OAICreateStreamingDistribution2017_10_30_request.h"
#include "OAICreateStreamingDistributionResult.h"
#include "OAICreateStreamingDistributionWithTags2017_10_30_request.h"
#include "OAICreateStreamingDistributionWithTagsResult.h"
#include "OAIDistributionAlreadyExists.h"
#include "OAIDistributionNotDisabled.h"
#include "OAIFieldLevelEncryptionConfigAlreadyExists.h"
#include "OAIFieldLevelEncryptionConfigInUse.h"
#include "OAIFieldLevelEncryptionProfileAlreadyExists.h"
#include "OAIFieldLevelEncryptionProfileInUse.h"
#include "OAIFieldLevelEncryptionProfileSizeExceeded.h"
#include "OAIGetCloudFrontOriginAccessIdentityConfigResult.h"
#include "OAIGetCloudFrontOriginAccessIdentityResult.h"
#include "OAIGetDistributionConfigResult.h"
#include "OAIGetDistributionResult.h"
#include "OAIGetFieldLevelEncryptionConfigResult.h"
#include "OAIGetFieldLevelEncryptionProfileConfigResult.h"
#include "OAIGetFieldLevelEncryptionProfileResult.h"
#include "OAIGetFieldLevelEncryptionResult.h"
#include "OAIGetInvalidationResult.h"
#include "OAIGetPublicKeyConfigResult.h"
#include "OAIGetPublicKeyResult.h"
#include "OAIGetStreamingDistributionConfigResult.h"
#include "OAIGetStreamingDistributionResult.h"
#include "OAIIllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior.h"
#include "OAIIllegalUpdate.h"
#include "OAIInconsistentQuantities.h"
#include "OAIInvalidArgument.h"
#include "OAIInvalidDefaultRootObject.h"
#include "OAIInvalidErrorCode.h"
#include "OAIInvalidForwardCookies.h"
#include "OAIInvalidGeoRestrictionParameter.h"
#include "OAIInvalidHeadersForS3Origin.h"
#include "OAIInvalidIfMatchVersion.h"
#include "OAIInvalidLambdaFunctionAssociation.h"
#include "OAIInvalidLocationCode.h"
#include "OAIInvalidMinimumProtocolVersion.h"
#include "OAIInvalidOrigin.h"
#include "OAIInvalidOriginAccessIdentity.h"
#include "OAIInvalidOriginKeepaliveTimeout.h"
#include "OAIInvalidOriginReadTimeout.h"
#include "OAIInvalidProtocolSettings.h"
#include "OAIInvalidQueryStringParameters.h"
#include "OAIInvalidRelativePath.h"
#include "OAIInvalidRequiredProtocol.h"
#include "OAIInvalidResponseCode.h"
#include "OAIInvalidTTLOrder.h"
#include "OAIInvalidTagging.h"
#include "OAIInvalidViewerCertificate.h"
#include "OAIInvalidWebACLId.h"
#include "OAIListCloudFrontOriginAccessIdentitiesResult.h"
#include "OAIListDistributionsByWebACLIdResult.h"
#include "OAIListDistributionsResult.h"
#include "OAIListFieldLevelEncryptionConfigsResult.h"
#include "OAIListFieldLevelEncryptionProfilesResult.h"
#include "OAIListInvalidationsResult.h"
#include "OAIListPublicKeysResult.h"
#include "OAIListStreamingDistributionsResult.h"
#include "OAIListTagsForResourceResult.h"
#include "OAIMissingBody.h"
#include "OAINoSuchCloudFrontOriginAccessIdentity.h"
#include "OAINoSuchDistribution.h"
#include "OAINoSuchFieldLevelEncryptionConfig.h"
#include "OAINoSuchFieldLevelEncryptionProfile.h"
#include "OAINoSuchInvalidation.h"
#include "OAINoSuchOrigin.h"
#include "OAINoSuchPublicKey.h"
#include "OAINoSuchResource.h"
#include "OAINoSuchStreamingDistribution.h"
#include "OAIPreconditionFailed.h"
#include "OAIPublicKeyAlreadyExists.h"
#include "OAIPublicKeyInUse.h"
#include "OAIQueryArgProfileEmpty.h"
#include "OAIStreamingDistributionAlreadyExists.h"
#include "OAIStreamingDistributionNotDisabled.h"
#include "OAITagResource2017_10_30_request.h"
#include "OAITooManyCacheBehaviors.h"
#include "OAITooManyCertificates.h"
#include "OAITooManyCloudFrontOriginAccessIdentities.h"
#include "OAITooManyCookieNamesInWhiteList.h"
#include "OAITooManyDistributionCNAMEs.h"
#include "OAITooManyDistributions.h"
#include "OAITooManyDistributionsAssociatedToFieldLevelEncryptionConfig.h"
#include "OAITooManyDistributionsWithLambdaAssociations.h"
#include "OAITooManyFieldLevelEncryptionConfigs.h"
#include "OAITooManyFieldLevelEncryptionContentTypeProfiles.h"
#include "OAITooManyFieldLevelEncryptionEncryptionEntities.h"
#include "OAITooManyFieldLevelEncryptionFieldPatterns.h"
#include "OAITooManyFieldLevelEncryptionProfiles.h"
#include "OAITooManyFieldLevelEncryptionQueryArgProfiles.h"
#include "OAITooManyHeadersInForwardedValues.h"
#include "OAITooManyInvalidationsInProgress.h"
#include "OAITooManyLambdaFunctionAssociations.h"
#include "OAITooManyOriginCustomHeaders.h"
#include "OAITooManyOrigins.h"
#include "OAITooManyPublicKeys.h"
#include "OAITooManyQueryStringParameters.h"
#include "OAITooManyStreamingDistributionCNAMEs.h"
#include "OAITooManyStreamingDistributions.h"
#include "OAITooManyTrustedSigners.h"
#include "OAITrustedSignerDoesNotExist.h"
#include "OAIUntagResource2017_10_30_request.h"
#include "OAIUpdateCloudFrontOriginAccessIdentityResult.h"
#include "OAIUpdateDistributionResult.h"
#include "OAIUpdateFieldLevelEncryptionConfigResult.h"
#include "OAIUpdateFieldLevelEncryptionProfileResult.h"
#include "OAIUpdatePublicKeyResult.h"
#include "OAIUpdateStreamingDistributionResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_cloud_front_origin_access_identity2017_10_30_request OAICreateCloudFrontOriginAccessIdentity2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCloudFrontOriginAccessIdentity20171030(const OAICreateCloudFrontOriginAccessIdentity2017_10_30_request &oai_create_cloud_front_origin_access_identity2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_distribution2017_10_30_request OAICreateDistribution2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistribution20171030(const OAICreateDistribution2017_10_30_request &oai_create_distribution2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_distribution_with_tags2017_10_30_request OAICreateDistributionWithTags2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistributionWithTags20171030(const bool &with_tags, const OAICreateDistributionWithTags2017_10_30_request &oai_create_distribution_with_tags2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_field_level_encryption_config2017_10_30_request OAICreateFieldLevelEncryptionConfig2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFieldLevelEncryptionConfig20171030(const OAICreateFieldLevelEncryptionConfig2017_10_30_request &oai_create_field_level_encryption_config2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_field_level_encryption_profile2017_10_30_request OAICreateFieldLevelEncryptionProfile2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFieldLevelEncryptionProfile20171030(const OAICreateFieldLevelEncryptionProfile2017_10_30_request &oai_create_field_level_encryption_profile2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  oai_create_invalidation2017_10_30_request OAICreateInvalidation2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createInvalidation20171030(const QString &distribution_id, const OAICreateInvalidation2017_10_30_request &oai_create_invalidation2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_public_key2017_10_30_request OAICreatePublicKey2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPublicKey20171030(const OAICreatePublicKey2017_10_30_request &oai_create_public_key2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_streaming_distribution2017_10_30_request OAICreateStreamingDistribution2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistribution20171030(const OAICreateStreamingDistribution2017_10_30_request &oai_create_streaming_distribution2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_streaming_distribution_with_tags2017_10_30_request OAICreateStreamingDistributionWithTags2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistributionWithTags20171030(const bool &with_tags, const OAICreateStreamingDistributionWithTags2017_10_30_request &oai_create_streaming_distribution_with_tags2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteCloudFrontOriginAccessIdentity20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteDistribution20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteFieldLevelEncryptionConfig20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteFieldLevelEncryptionProfile20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deletePublicKey20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteStreamingDistribution20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentity20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentityConfig20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistribution20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistributionConfig20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryption20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionConfig20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionProfile20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionProfileConfig20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInvalidation20171030(const QString &distribution_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPublicKey20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPublicKeyConfig20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistribution20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistributionConfig20171030(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listCloudFrontOriginAccessIdentities20171030(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributions20171030(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_aclid QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributionsByWebACLId20171030(const QString &web_aclid, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listFieldLevelEncryptionConfigs20171030(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listFieldLevelEncryptionProfiles20171030(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listInvalidations20171030(const QString &distribution_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listPublicKeys20171030(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listStreamingDistributions20171030(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource20171030(const QString &resource, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_tag_resource2017_10_30_request OAITagResource2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource20171030(const QString &resource, const QString &operation, const OAITagResource2017_10_30_request &oai_tag_resource2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_untag_resource2017_10_30_request OAIUntagResource2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource20171030(const QString &resource, const QString &operation, const OAIUntagResource2017_10_30_request &oai_untag_resource2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_cloud_front_origin_access_identity2017_10_30_request OAICreateCloudFrontOriginAccessIdentity2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateCloudFrontOriginAccessIdentity20171030(const QString &id, const OAICreateCloudFrontOriginAccessIdentity2017_10_30_request &oai_create_cloud_front_origin_access_identity2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_distribution2017_10_30_request OAICreateDistribution2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateDistribution20171030(const QString &id, const OAICreateDistribution2017_10_30_request &oai_create_distribution2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_field_level_encryption_config2017_10_30_request OAICreateFieldLevelEncryptionConfig2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateFieldLevelEncryptionConfig20171030(const QString &id, const OAICreateFieldLevelEncryptionConfig2017_10_30_request &oai_create_field_level_encryption_config2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_field_level_encryption_profile2017_10_30_request OAICreateFieldLevelEncryptionProfile2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateFieldLevelEncryptionProfile20171030(const QString &id, const OAICreateFieldLevelEncryptionProfile2017_10_30_request &oai_create_field_level_encryption_profile2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_public_key2017_10_30_request OAICreatePublicKey2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updatePublicKey20171030(const QString &id, const OAICreatePublicKey2017_10_30_request &oai_create_public_key2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_streaming_distribution2017_10_30_request OAICreateStreamingDistribution2017_10_30_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateStreamingDistribution20171030(const QString &id, const OAICreateStreamingDistribution2017_10_30_request &oai_create_streaming_distribution2017_10_30_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCloudFrontOriginAccessIdentity20171030Callback(OAIHttpRequestWorker *worker);
    void createDistribution20171030Callback(OAIHttpRequestWorker *worker);
    void createDistributionWithTags20171030Callback(OAIHttpRequestWorker *worker);
    void createFieldLevelEncryptionConfig20171030Callback(OAIHttpRequestWorker *worker);
    void createFieldLevelEncryptionProfile20171030Callback(OAIHttpRequestWorker *worker);
    void createInvalidation20171030Callback(OAIHttpRequestWorker *worker);
    void createPublicKey20171030Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistribution20171030Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistributionWithTags20171030Callback(OAIHttpRequestWorker *worker);
    void deleteCloudFrontOriginAccessIdentity20171030Callback(OAIHttpRequestWorker *worker);
    void deleteDistribution20171030Callback(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionConfig20171030Callback(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionProfile20171030Callback(OAIHttpRequestWorker *worker);
    void deletePublicKey20171030Callback(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20171030Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20171030Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentityConfig20171030Callback(OAIHttpRequestWorker *worker);
    void getDistribution20171030Callback(OAIHttpRequestWorker *worker);
    void getDistributionConfig20171030Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryption20171030Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionConfig20171030Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionProfile20171030Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionProfileConfig20171030Callback(OAIHttpRequestWorker *worker);
    void getInvalidation20171030Callback(OAIHttpRequestWorker *worker);
    void getPublicKey20171030Callback(OAIHttpRequestWorker *worker);
    void getPublicKeyConfig20171030Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistribution20171030Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistributionConfig20171030Callback(OAIHttpRequestWorker *worker);
    void listCloudFrontOriginAccessIdentities20171030Callback(OAIHttpRequestWorker *worker);
    void listDistributions20171030Callback(OAIHttpRequestWorker *worker);
    void listDistributionsByWebACLId20171030Callback(OAIHttpRequestWorker *worker);
    void listFieldLevelEncryptionConfigs20171030Callback(OAIHttpRequestWorker *worker);
    void listFieldLevelEncryptionProfiles20171030Callback(OAIHttpRequestWorker *worker);
    void listInvalidations20171030Callback(OAIHttpRequestWorker *worker);
    void listPublicKeys20171030Callback(OAIHttpRequestWorker *worker);
    void listStreamingDistributions20171030Callback(OAIHttpRequestWorker *worker);
    void listTagsForResource20171030Callback(OAIHttpRequestWorker *worker);
    void tagResource20171030Callback(OAIHttpRequestWorker *worker);
    void untagResource20171030Callback(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20171030Callback(OAIHttpRequestWorker *worker);
    void updateDistribution20171030Callback(OAIHttpRequestWorker *worker);
    void updateFieldLevelEncryptionConfig20171030Callback(OAIHttpRequestWorker *worker);
    void updateFieldLevelEncryptionProfile20171030Callback(OAIHttpRequestWorker *worker);
    void updatePublicKey20171030Callback(OAIHttpRequestWorker *worker);
    void updateStreamingDistribution20171030Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCloudFrontOriginAccessIdentity20171030Signal(OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20171030Signal(OAICreateDistributionResult summary);
    void createDistributionWithTags20171030Signal(OAICreateDistributionWithTagsResult summary);
    void createFieldLevelEncryptionConfig20171030Signal(OAICreateFieldLevelEncryptionConfigResult summary);
    void createFieldLevelEncryptionProfile20171030Signal(OAICreateFieldLevelEncryptionProfileResult summary);
    void createInvalidation20171030Signal(OAICreateInvalidationResult summary);
    void createPublicKey20171030Signal(OAICreatePublicKeyResult summary);
    void createStreamingDistribution20171030Signal(OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20171030Signal(OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20171030Signal();
    void deleteDistribution20171030Signal();
    void deleteFieldLevelEncryptionConfig20171030Signal();
    void deleteFieldLevelEncryptionProfile20171030Signal();
    void deletePublicKey20171030Signal();
    void deleteStreamingDistribution20171030Signal();
    void getCloudFrontOriginAccessIdentity20171030Signal(OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20171030Signal(OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20171030Signal(OAIGetDistributionResult summary);
    void getDistributionConfig20171030Signal(OAIGetDistributionConfigResult summary);
    void getFieldLevelEncryption20171030Signal(OAIGetFieldLevelEncryptionResult summary);
    void getFieldLevelEncryptionConfig20171030Signal(OAIGetFieldLevelEncryptionConfigResult summary);
    void getFieldLevelEncryptionProfile20171030Signal(OAIGetFieldLevelEncryptionProfileResult summary);
    void getFieldLevelEncryptionProfileConfig20171030Signal(OAIGetFieldLevelEncryptionProfileConfigResult summary);
    void getInvalidation20171030Signal(OAIGetInvalidationResult summary);
    void getPublicKey20171030Signal(OAIGetPublicKeyResult summary);
    void getPublicKeyConfig20171030Signal(OAIGetPublicKeyConfigResult summary);
    void getStreamingDistribution20171030Signal(OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20171030Signal(OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20171030Signal(OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20171030Signal(OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20171030Signal(OAIListDistributionsByWebACLIdResult summary);
    void listFieldLevelEncryptionConfigs20171030Signal(OAIListFieldLevelEncryptionConfigsResult summary);
    void listFieldLevelEncryptionProfiles20171030Signal(OAIListFieldLevelEncryptionProfilesResult summary);
    void listInvalidations20171030Signal(OAIListInvalidationsResult summary);
    void listPublicKeys20171030Signal(OAIListPublicKeysResult summary);
    void listStreamingDistributions20171030Signal(OAIListStreamingDistributionsResult summary);
    void listTagsForResource20171030Signal(OAIListTagsForResourceResult summary);
    void tagResource20171030Signal();
    void untagResource20171030Signal();
    void updateCloudFrontOriginAccessIdentity20171030Signal(OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20171030Signal(OAIUpdateDistributionResult summary);
    void updateFieldLevelEncryptionConfig20171030Signal(OAIUpdateFieldLevelEncryptionConfigResult summary);
    void updateFieldLevelEncryptionProfile20171030Signal(OAIUpdateFieldLevelEncryptionProfileResult summary);
    void updatePublicKey20171030Signal(OAIUpdatePublicKeyResult summary);
    void updateStreamingDistribution20171030Signal(OAIUpdateStreamingDistributionResult summary);


    void createCloudFrontOriginAccessIdentity20171030SignalFull(OAIHttpRequestWorker *worker, OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20171030SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionResult summary);
    void createDistributionWithTags20171030SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionWithTagsResult summary);
    void createFieldLevelEncryptionConfig20171030SignalFull(OAIHttpRequestWorker *worker, OAICreateFieldLevelEncryptionConfigResult summary);
    void createFieldLevelEncryptionProfile20171030SignalFull(OAIHttpRequestWorker *worker, OAICreateFieldLevelEncryptionProfileResult summary);
    void createInvalidation20171030SignalFull(OAIHttpRequestWorker *worker, OAICreateInvalidationResult summary);
    void createPublicKey20171030SignalFull(OAIHttpRequestWorker *worker, OAICreatePublicKeyResult summary);
    void createStreamingDistribution20171030SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20171030SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20171030SignalFull(OAIHttpRequestWorker *worker);
    void deleteDistribution20171030SignalFull(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionConfig20171030SignalFull(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionProfile20171030SignalFull(OAIHttpRequestWorker *worker);
    void deletePublicKey20171030SignalFull(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20171030SignalFull(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionResult summary);
    void getDistributionConfig20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionConfigResult summary);
    void getFieldLevelEncryption20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionResult summary);
    void getFieldLevelEncryptionConfig20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionConfigResult summary);
    void getFieldLevelEncryptionProfile20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionProfileResult summary);
    void getFieldLevelEncryptionProfileConfig20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionProfileConfigResult summary);
    void getInvalidation20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetInvalidationResult summary);
    void getPublicKey20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetPublicKeyResult summary);
    void getPublicKeyConfig20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetPublicKeyConfigResult summary);
    void getStreamingDistribution20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20171030SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20171030SignalFull(OAIHttpRequestWorker *worker, OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20171030SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20171030SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsByWebACLIdResult summary);
    void listFieldLevelEncryptionConfigs20171030SignalFull(OAIHttpRequestWorker *worker, OAIListFieldLevelEncryptionConfigsResult summary);
    void listFieldLevelEncryptionProfiles20171030SignalFull(OAIHttpRequestWorker *worker, OAIListFieldLevelEncryptionProfilesResult summary);
    void listInvalidations20171030SignalFull(OAIHttpRequestWorker *worker, OAIListInvalidationsResult summary);
    void listPublicKeys20171030SignalFull(OAIHttpRequestWorker *worker, OAIListPublicKeysResult summary);
    void listStreamingDistributions20171030SignalFull(OAIHttpRequestWorker *worker, OAIListStreamingDistributionsResult summary);
    void listTagsForResource20171030SignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResult summary);
    void tagResource20171030SignalFull(OAIHttpRequestWorker *worker);
    void untagResource20171030SignalFull(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20171030SignalFull(OAIHttpRequestWorker *worker, OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20171030SignalFull(OAIHttpRequestWorker *worker, OAIUpdateDistributionResult summary);
    void updateFieldLevelEncryptionConfig20171030SignalFull(OAIHttpRequestWorker *worker, OAIUpdateFieldLevelEncryptionConfigResult summary);
    void updateFieldLevelEncryptionProfile20171030SignalFull(OAIHttpRequestWorker *worker, OAIUpdateFieldLevelEncryptionProfileResult summary);
    void updatePublicKey20171030SignalFull(OAIHttpRequestWorker *worker, OAIUpdatePublicKeyResult summary);
    void updateStreamingDistribution20171030SignalFull(OAIHttpRequestWorker *worker, OAIUpdateStreamingDistributionResult summary);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20171030SignalError() instead")
    void createCloudFrontOriginAccessIdentity20171030SignalE(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20171030SignalError(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20171030SignalError() instead")
    void createDistribution20171030SignalE(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20171030SignalError(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20171030SignalError() instead")
    void createDistributionWithTags20171030SignalE(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20171030SignalError(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionConfig20171030SignalError() instead")
    void createFieldLevelEncryptionConfig20171030SignalE(OAICreateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionConfig20171030SignalError(OAICreateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionProfile20171030SignalError() instead")
    void createFieldLevelEncryptionProfile20171030SignalE(OAICreateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionProfile20171030SignalError(OAICreateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20171030SignalError() instead")
    void createInvalidation20171030SignalE(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20171030SignalError(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPublicKey20171030SignalError() instead")
    void createPublicKey20171030SignalE(OAICreatePublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPublicKey20171030SignalError(OAICreatePublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20171030SignalError() instead")
    void createStreamingDistribution20171030SignalE(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20171030SignalError(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20171030SignalError() instead")
    void createStreamingDistributionWithTags20171030SignalE(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20171030SignalError(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20171030SignalError() instead")
    void deleteCloudFrontOriginAccessIdentity20171030SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20171030SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20171030SignalError() instead")
    void deleteDistribution20171030SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20171030SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionConfig20171030SignalError() instead")
    void deleteFieldLevelEncryptionConfig20171030SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionConfig20171030SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionProfile20171030SignalError() instead")
    void deleteFieldLevelEncryptionProfile20171030SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionProfile20171030SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePublicKey20171030SignalError() instead")
    void deletePublicKey20171030SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicKey20171030SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20171030SignalError() instead")
    void deleteStreamingDistribution20171030SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20171030SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20171030SignalError() instead")
    void getCloudFrontOriginAccessIdentity20171030SignalE(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20171030SignalError(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20171030SignalError() instead")
    void getCloudFrontOriginAccessIdentityConfig20171030SignalE(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20171030SignalError(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20171030SignalError() instead")
    void getDistribution20171030SignalE(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20171030SignalError(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20171030SignalError() instead")
    void getDistributionConfig20171030SignalE(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20171030SignalError(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryption20171030SignalError() instead")
    void getFieldLevelEncryption20171030SignalE(OAIGetFieldLevelEncryptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryption20171030SignalError(OAIGetFieldLevelEncryptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionConfig20171030SignalError() instead")
    void getFieldLevelEncryptionConfig20171030SignalE(OAIGetFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionConfig20171030SignalError(OAIGetFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfile20171030SignalError() instead")
    void getFieldLevelEncryptionProfile20171030SignalE(OAIGetFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfile20171030SignalError(OAIGetFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfileConfig20171030SignalError() instead")
    void getFieldLevelEncryptionProfileConfig20171030SignalE(OAIGetFieldLevelEncryptionProfileConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfileConfig20171030SignalError(OAIGetFieldLevelEncryptionProfileConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20171030SignalError() instead")
    void getInvalidation20171030SignalE(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20171030SignalError(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKey20171030SignalError() instead")
    void getPublicKey20171030SignalE(OAIGetPublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKey20171030SignalError(OAIGetPublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeyConfig20171030SignalError() instead")
    void getPublicKeyConfig20171030SignalE(OAIGetPublicKeyConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeyConfig20171030SignalError(OAIGetPublicKeyConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20171030SignalError() instead")
    void getStreamingDistribution20171030SignalE(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20171030SignalError(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20171030SignalError() instead")
    void getStreamingDistributionConfig20171030SignalE(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20171030SignalError(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20171030SignalError() instead")
    void listCloudFrontOriginAccessIdentities20171030SignalE(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20171030SignalError(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20171030SignalError() instead")
    void listDistributions20171030SignalE(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20171030SignalError(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20171030SignalError() instead")
    void listDistributionsByWebACLId20171030SignalE(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20171030SignalError(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionConfigs20171030SignalError() instead")
    void listFieldLevelEncryptionConfigs20171030SignalE(OAIListFieldLevelEncryptionConfigsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionConfigs20171030SignalError(OAIListFieldLevelEncryptionConfigsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionProfiles20171030SignalError() instead")
    void listFieldLevelEncryptionProfiles20171030SignalE(OAIListFieldLevelEncryptionProfilesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionProfiles20171030SignalError(OAIListFieldLevelEncryptionProfilesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20171030SignalError() instead")
    void listInvalidations20171030SignalE(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20171030SignalError(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPublicKeys20171030SignalError() instead")
    void listPublicKeys20171030SignalE(OAIListPublicKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPublicKeys20171030SignalError(OAIListPublicKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20171030SignalError() instead")
    void listStreamingDistributions20171030SignalE(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20171030SignalError(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20171030SignalError() instead")
    void listTagsForResource20171030SignalE(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20171030SignalError(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20171030SignalError() instead")
    void tagResource20171030SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20171030SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20171030SignalError() instead")
    void untagResource20171030SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20171030SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20171030SignalError() instead")
    void updateCloudFrontOriginAccessIdentity20171030SignalE(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20171030SignalError(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20171030SignalError() instead")
    void updateDistribution20171030SignalE(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20171030SignalError(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionConfig20171030SignalError() instead")
    void updateFieldLevelEncryptionConfig20171030SignalE(OAIUpdateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionConfig20171030SignalError(OAIUpdateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionProfile20171030SignalError() instead")
    void updateFieldLevelEncryptionProfile20171030SignalE(OAIUpdateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionProfile20171030SignalError(OAIUpdateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublicKey20171030SignalError() instead")
    void updatePublicKey20171030SignalE(OAIUpdatePublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublicKey20171030SignalError(OAIUpdatePublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20171030SignalError() instead")
    void updateStreamingDistribution20171030SignalE(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20171030SignalError(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20171030SignalErrorFull() instead")
    void createCloudFrontOriginAccessIdentity20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20171030SignalErrorFull() instead")
    void createDistribution20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20171030SignalErrorFull() instead")
    void createDistributionWithTags20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionConfig20171030SignalErrorFull() instead")
    void createFieldLevelEncryptionConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionProfile20171030SignalErrorFull() instead")
    void createFieldLevelEncryptionProfile20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionProfile20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20171030SignalErrorFull() instead")
    void createInvalidation20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPublicKey20171030SignalErrorFull() instead")
    void createPublicKey20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPublicKey20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20171030SignalErrorFull() instead")
    void createStreamingDistribution20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20171030SignalErrorFull() instead")
    void createStreamingDistributionWithTags20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20171030SignalErrorFull() instead")
    void deleteCloudFrontOriginAccessIdentity20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20171030SignalErrorFull() instead")
    void deleteDistribution20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionConfig20171030SignalErrorFull() instead")
    void deleteFieldLevelEncryptionConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionProfile20171030SignalErrorFull() instead")
    void deleteFieldLevelEncryptionProfile20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionProfile20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePublicKey20171030SignalErrorFull() instead")
    void deletePublicKey20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicKey20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20171030SignalErrorFull() instead")
    void deleteStreamingDistribution20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20171030SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentity20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20171030SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentityConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20171030SignalErrorFull() instead")
    void getDistribution20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20171030SignalErrorFull() instead")
    void getDistributionConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryption20171030SignalErrorFull() instead")
    void getFieldLevelEncryption20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryption20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionConfig20171030SignalErrorFull() instead")
    void getFieldLevelEncryptionConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfile20171030SignalErrorFull() instead")
    void getFieldLevelEncryptionProfile20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfile20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfileConfig20171030SignalErrorFull() instead")
    void getFieldLevelEncryptionProfileConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfileConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20171030SignalErrorFull() instead")
    void getInvalidation20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKey20171030SignalErrorFull() instead")
    void getPublicKey20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKey20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeyConfig20171030SignalErrorFull() instead")
    void getPublicKeyConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeyConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20171030SignalErrorFull() instead")
    void getStreamingDistribution20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20171030SignalErrorFull() instead")
    void getStreamingDistributionConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20171030SignalErrorFull() instead")
    void listCloudFrontOriginAccessIdentities20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20171030SignalErrorFull() instead")
    void listDistributions20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20171030SignalErrorFull() instead")
    void listDistributionsByWebACLId20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionConfigs20171030SignalErrorFull() instead")
    void listFieldLevelEncryptionConfigs20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionConfigs20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionProfiles20171030SignalErrorFull() instead")
    void listFieldLevelEncryptionProfiles20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionProfiles20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20171030SignalErrorFull() instead")
    void listInvalidations20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPublicKeys20171030SignalErrorFull() instead")
    void listPublicKeys20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPublicKeys20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20171030SignalErrorFull() instead")
    void listStreamingDistributions20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20171030SignalErrorFull() instead")
    void listTagsForResource20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20171030SignalErrorFull() instead")
    void tagResource20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20171030SignalErrorFull() instead")
    void untagResource20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20171030SignalErrorFull() instead")
    void updateCloudFrontOriginAccessIdentity20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20171030SignalErrorFull() instead")
    void updateDistribution20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionConfig20171030SignalErrorFull() instead")
    void updateFieldLevelEncryptionConfig20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionConfig20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionProfile20171030SignalErrorFull() instead")
    void updateFieldLevelEncryptionProfile20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionProfile20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublicKey20171030SignalErrorFull() instead")
    void updatePublicKey20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublicKey20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20171030SignalErrorFull() instead")
    void updateStreamingDistribution20171030SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20171030SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
