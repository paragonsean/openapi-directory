/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2017-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicKeySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicKeySummary::OAIPublicKeySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicKeySummary::OAIPublicKeySummary() {
    this->initializeModel();
}

OAIPublicKeySummary::~OAIPublicKeySummary() {}

void OAIPublicKeySummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_encoded_key_isSet = false;
    m_encoded_key_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;
}

void OAIPublicKeySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicKeySummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_encoded_key_isValid = ::OpenAPI::fromJsonValue(m_encoded_key, json[QString("EncodedKey")]);
    m_encoded_key_isSet = !json[QString("EncodedKey")].isNull() && m_encoded_key_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;
}

QString OAIPublicKeySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicKeySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_encoded_key_isSet) {
        obj.insert(QString("EncodedKey"), ::OpenAPI::toJsonValue(m_encoded_key));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    return obj;
}

QString OAIPublicKeySummary::getId() const {
    return m_id;
}
void OAIPublicKeySummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublicKeySummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublicKeySummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPublicKeySummary::getName() const {
    return m_name;
}
void OAIPublicKeySummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublicKeySummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublicKeySummary::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIPublicKeySummary::getCreatedTime() const {
    return m_created_time;
}
void OAIPublicKeySummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIPublicKeySummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIPublicKeySummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIPublicKeySummary::getEncodedKey() const {
    return m_encoded_key;
}
void OAIPublicKeySummary::setEncodedKey(const QString &encoded_key) {
    m_encoded_key = encoded_key;
    m_encoded_key_isSet = true;
}

bool OAIPublicKeySummary::is_encoded_key_Set() const{
    return m_encoded_key_isSet;
}

bool OAIPublicKeySummary::is_encoded_key_Valid() const{
    return m_encoded_key_isValid;
}

QString OAIPublicKeySummary::getComment() const {
    return m_comment;
}
void OAIPublicKeySummary::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIPublicKeySummary::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIPublicKeySummary::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIPublicKeySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicKeySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_created_time_isValid && m_encoded_key_isValid && true;
}

} // namespace OpenAPI
