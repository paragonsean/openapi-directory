# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_distribution_with_tags20171030_request_distribution_config_with_tags_tags import CreateDistributionWithTags20171030RequestDistributionConfigWithTagsTags
from openapi_server.models.create_streaming_distribution_with_tags20171030_request_streaming_distribution_config_with_tags_streaming_distribution_config import CreateStreamingDistributionWithTags20171030RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig
from openapi_server import util


class CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, streaming_distribution_config: CreateStreamingDistributionWithTags20171030RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig=None, tags: CreateDistributionWithTags20171030RequestDistributionConfigWithTagsTags=None):
        """CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags - a model defined in OpenAPI

        :param streaming_distribution_config: The streaming_distribution_config of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.
        :param tags: The tags of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.
        """
        self.openapi_types = {
            'streaming_distribution_config': CreateStreamingDistributionWithTags20171030RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig,
            'tags': CreateDistributionWithTags20171030RequestDistributionConfigWithTagsTags
        }

        self.attribute_map = {
            'streaming_distribution_config': 'StreamingDistributionConfig',
            'tags': 'Tags'
        }

        self._streaming_distribution_config = streaming_distribution_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStreamingDistributionWithTagsRequest_StreamingDistributionConfigWithTags of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def streaming_distribution_config(self):
        """Gets the streaming_distribution_config of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.


        :return: The streaming_distribution_config of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.
        :rtype: CreateStreamingDistributionWithTags20171030RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig
        """
        return self._streaming_distribution_config

    @streaming_distribution_config.setter
    def streaming_distribution_config(self, streaming_distribution_config):
        """Sets the streaming_distribution_config of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.


        :param streaming_distribution_config: The streaming_distribution_config of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.
        :type streaming_distribution_config: CreateStreamingDistributionWithTags20171030RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig
        """
        if streaming_distribution_config is None:
            raise ValueError("Invalid value for `streaming_distribution_config`, must not be `None`")

        self._streaming_distribution_config = streaming_distribution_config

    @property
    def tags(self):
        """Gets the tags of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.


        :return: The tags of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.
        :rtype: CreateDistributionWithTags20171030RequestDistributionConfigWithTagsTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.


        :param tags: The tags of this CreateStreamingDistributionWithTagsRequestStreamingDistributionConfigWithTags.
        :type tags: CreateDistributionWithTags20171030RequestDistributionConfigWithTagsTags
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
