# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distribution_active_trusted_signers import DistributionActiveTrustedSigners
from openapi_server.models.distribution_distribution_config import DistributionDistributionConfig
from openapi_server import util


class CreateDistributionWithTagsResultDistribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, status: str=None, last_modified_time: datetime=None, in_progress_invalidation_batches: int=None, domain_name: str=None, active_trusted_signers: DistributionActiveTrustedSigners=None, distribution_config: DistributionDistributionConfig=None):
        """CreateDistributionWithTagsResultDistribution - a model defined in OpenAPI

        :param id: The id of this CreateDistributionWithTagsResultDistribution.
        :param arn: The arn of this CreateDistributionWithTagsResultDistribution.
        :param status: The status of this CreateDistributionWithTagsResultDistribution.
        :param last_modified_time: The last_modified_time of this CreateDistributionWithTagsResultDistribution.
        :param in_progress_invalidation_batches: The in_progress_invalidation_batches of this CreateDistributionWithTagsResultDistribution.
        :param domain_name: The domain_name of this CreateDistributionWithTagsResultDistribution.
        :param active_trusted_signers: The active_trusted_signers of this CreateDistributionWithTagsResultDistribution.
        :param distribution_config: The distribution_config of this CreateDistributionWithTagsResultDistribution.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'status': str,
            'last_modified_time': datetime,
            'in_progress_invalidation_batches': int,
            'domain_name': str,
            'active_trusted_signers': DistributionActiveTrustedSigners,
            'distribution_config': DistributionDistributionConfig
        }

        self.attribute_map = {
            'id': 'Id',
            'arn': 'ARN',
            'status': 'Status',
            'last_modified_time': 'LastModifiedTime',
            'in_progress_invalidation_batches': 'InProgressInvalidationBatches',
            'domain_name': 'DomainName',
            'active_trusted_signers': 'ActiveTrustedSigners',
            'distribution_config': 'DistributionConfig'
        }

        self._id = id
        self._arn = arn
        self._status = status
        self._last_modified_time = last_modified_time
        self._in_progress_invalidation_batches = in_progress_invalidation_batches
        self._domain_name = domain_name
        self._active_trusted_signers = active_trusted_signers
        self._distribution_config = distribution_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDistributionWithTagsResultDistribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDistributionWithTagsResult_Distribution of this CreateDistributionWithTagsResultDistribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateDistributionWithTagsResultDistribution.


        :return: The id of this CreateDistributionWithTagsResultDistribution.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateDistributionWithTagsResultDistribution.


        :param id: The id of this CreateDistributionWithTagsResultDistribution.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this CreateDistributionWithTagsResultDistribution.


        :return: The arn of this CreateDistributionWithTagsResultDistribution.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateDistributionWithTagsResultDistribution.


        :param arn: The arn of this CreateDistributionWithTagsResultDistribution.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def status(self):
        """Gets the status of this CreateDistributionWithTagsResultDistribution.


        :return: The status of this CreateDistributionWithTagsResultDistribution.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateDistributionWithTagsResultDistribution.


        :param status: The status of this CreateDistributionWithTagsResultDistribution.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this CreateDistributionWithTagsResultDistribution.


        :return: The last_modified_time of this CreateDistributionWithTagsResultDistribution.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this CreateDistributionWithTagsResultDistribution.


        :param last_modified_time: The last_modified_time of this CreateDistributionWithTagsResultDistribution.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def in_progress_invalidation_batches(self):
        """Gets the in_progress_invalidation_batches of this CreateDistributionWithTagsResultDistribution.


        :return: The in_progress_invalidation_batches of this CreateDistributionWithTagsResultDistribution.
        :rtype: int
        """
        return self._in_progress_invalidation_batches

    @in_progress_invalidation_batches.setter
    def in_progress_invalidation_batches(self, in_progress_invalidation_batches):
        """Sets the in_progress_invalidation_batches of this CreateDistributionWithTagsResultDistribution.


        :param in_progress_invalidation_batches: The in_progress_invalidation_batches of this CreateDistributionWithTagsResultDistribution.
        :type in_progress_invalidation_batches: int
        """
        if in_progress_invalidation_batches is None:
            raise ValueError("Invalid value for `in_progress_invalidation_batches`, must not be `None`")

        self._in_progress_invalidation_batches = in_progress_invalidation_batches

    @property
    def domain_name(self):
        """Gets the domain_name of this CreateDistributionWithTagsResultDistribution.


        :return: The domain_name of this CreateDistributionWithTagsResultDistribution.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CreateDistributionWithTagsResultDistribution.


        :param domain_name: The domain_name of this CreateDistributionWithTagsResultDistribution.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def active_trusted_signers(self):
        """Gets the active_trusted_signers of this CreateDistributionWithTagsResultDistribution.


        :return: The active_trusted_signers of this CreateDistributionWithTagsResultDistribution.
        :rtype: DistributionActiveTrustedSigners
        """
        return self._active_trusted_signers

    @active_trusted_signers.setter
    def active_trusted_signers(self, active_trusted_signers):
        """Sets the active_trusted_signers of this CreateDistributionWithTagsResultDistribution.


        :param active_trusted_signers: The active_trusted_signers of this CreateDistributionWithTagsResultDistribution.
        :type active_trusted_signers: DistributionActiveTrustedSigners
        """
        if active_trusted_signers is None:
            raise ValueError("Invalid value for `active_trusted_signers`, must not be `None`")

        self._active_trusted_signers = active_trusted_signers

    @property
    def distribution_config(self):
        """Gets the distribution_config of this CreateDistributionWithTagsResultDistribution.


        :return: The distribution_config of this CreateDistributionWithTagsResultDistribution.
        :rtype: DistributionDistributionConfig
        """
        return self._distribution_config

    @distribution_config.setter
    def distribution_config(self, distribution_config):
        """Sets the distribution_config of this CreateDistributionWithTagsResultDistribution.


        :param distribution_config: The distribution_config of this CreateDistributionWithTagsResultDistribution.
        :type distribution_config: DistributionDistributionConfig
        """
        if distribution_config is None:
            raise ValueError("Invalid value for `distribution_config`, must not be `None`")

        self._distribution_config = distribution_config
