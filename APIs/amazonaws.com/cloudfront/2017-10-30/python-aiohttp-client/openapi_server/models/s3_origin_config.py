# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3OriginConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, origin_access_identity: str=None):
        """S3OriginConfig - a model defined in OpenAPI

        :param origin_access_identity: The origin_access_identity of this S3OriginConfig.
        """
        self.openapi_types = {
            'origin_access_identity': str
        }

        self.attribute_map = {
            'origin_access_identity': 'OriginAccessIdentity'
        }

        self._origin_access_identity = origin_access_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3OriginConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3OriginConfig of this S3OriginConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin_access_identity(self):
        """Gets the origin_access_identity of this S3OriginConfig.


        :return: The origin_access_identity of this S3OriginConfig.
        :rtype: str
        """
        return self._origin_access_identity

    @origin_access_identity.setter
    def origin_access_identity(self, origin_access_identity):
        """Sets the origin_access_identity of this S3OriginConfig.


        :param origin_access_identity: The origin_access_identity of this S3OriginConfig.
        :type origin_access_identity: str
        """
        if origin_access_identity is None:
            raise ValueError("Invalid value for `origin_access_identity`, must not be `None`")

        self._origin_access_identity = origin_access_identity
