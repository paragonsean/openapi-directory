/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2017-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateStreamingDistribution20171030RequestStreamingDistributionConfigAliases;
import org.openapitools.client.model.CreateStreamingDistribution20171030RequestStreamingDistributionConfigLogging;
import org.openapitools.client.model.CreateStreamingDistribution20171030RequestStreamingDistributionConfigS3Origin;
import org.openapitools.client.model.CreateStreamingDistribution20171030RequestStreamingDistributionConfigTrustedSigners;
import org.openapitools.client.model.PriceClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The RTMP distribution&#39;s configuration information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:33.762910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateStreamingDistribution20171030RequestStreamingDistributionConfig {
  public static final String SERIALIZED_NAME_CALLER_REFERENCE = "CallerReference";
  @SerializedName(SERIALIZED_NAME_CALLER_REFERENCE)
  private String callerReference;

  public static final String SERIALIZED_NAME_S3_ORIGIN = "S3Origin";
  @SerializedName(SERIALIZED_NAME_S3_ORIGIN)
  private CreateStreamingDistribution20171030RequestStreamingDistributionConfigS3Origin s3Origin;

  public static final String SERIALIZED_NAME_ALIASES = "Aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private CreateStreamingDistribution20171030RequestStreamingDistributionConfigAliases aliases;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_LOGGING = "Logging";
  @SerializedName(SERIALIZED_NAME_LOGGING)
  private CreateStreamingDistribution20171030RequestStreamingDistributionConfigLogging logging;

  public static final String SERIALIZED_NAME_TRUSTED_SIGNERS = "TrustedSigners";
  @SerializedName(SERIALIZED_NAME_TRUSTED_SIGNERS)
  private CreateStreamingDistribution20171030RequestStreamingDistributionConfigTrustedSigners trustedSigners;

  public static final String SERIALIZED_NAME_PRICE_CLASS = "PriceClass";
  @SerializedName(SERIALIZED_NAME_PRICE_CLASS)
  private PriceClass priceClass;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig() {
  }

  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig callerReference(String callerReference) {
    this.callerReference = callerReference;
    return this;
  }

  /**
   * Get callerReference
   * @return callerReference
   */
  @javax.annotation.Nullable
  public String getCallerReference() {
    return callerReference;
  }

  public void setCallerReference(String callerReference) {
    this.callerReference = callerReference;
  }


  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig s3Origin(CreateStreamingDistribution20171030RequestStreamingDistributionConfigS3Origin s3Origin) {
    this.s3Origin = s3Origin;
    return this;
  }

  /**
   * Get s3Origin
   * @return s3Origin
   */
  @javax.annotation.Nullable
  public CreateStreamingDistribution20171030RequestStreamingDistributionConfigS3Origin getS3Origin() {
    return s3Origin;
  }

  public void setS3Origin(CreateStreamingDistribution20171030RequestStreamingDistributionConfigS3Origin s3Origin) {
    this.s3Origin = s3Origin;
  }


  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig aliases(CreateStreamingDistribution20171030RequestStreamingDistributionConfigAliases aliases) {
    this.aliases = aliases;
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nullable
  public CreateStreamingDistribution20171030RequestStreamingDistributionConfigAliases getAliases() {
    return aliases;
  }

  public void setAliases(CreateStreamingDistribution20171030RequestStreamingDistributionConfigAliases aliases) {
    this.aliases = aliases;
  }


  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig logging(CreateStreamingDistribution20171030RequestStreamingDistributionConfigLogging logging) {
    this.logging = logging;
    return this;
  }

  /**
   * Get logging
   * @return logging
   */
  @javax.annotation.Nullable
  public CreateStreamingDistribution20171030RequestStreamingDistributionConfigLogging getLogging() {
    return logging;
  }

  public void setLogging(CreateStreamingDistribution20171030RequestStreamingDistributionConfigLogging logging) {
    this.logging = logging;
  }


  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig trustedSigners(CreateStreamingDistribution20171030RequestStreamingDistributionConfigTrustedSigners trustedSigners) {
    this.trustedSigners = trustedSigners;
    return this;
  }

  /**
   * Get trustedSigners
   * @return trustedSigners
   */
  @javax.annotation.Nullable
  public CreateStreamingDistribution20171030RequestStreamingDistributionConfigTrustedSigners getTrustedSigners() {
    return trustedSigners;
  }

  public void setTrustedSigners(CreateStreamingDistribution20171030RequestStreamingDistributionConfigTrustedSigners trustedSigners) {
    this.trustedSigners = trustedSigners;
  }


  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig priceClass(PriceClass priceClass) {
    this.priceClass = priceClass;
    return this;
  }

  /**
   * Get priceClass
   * @return priceClass
   */
  @javax.annotation.Nullable
  public PriceClass getPriceClass() {
    return priceClass;
  }

  public void setPriceClass(PriceClass priceClass) {
    this.priceClass = priceClass;
  }


  public CreateStreamingDistribution20171030RequestStreamingDistributionConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStreamingDistribution20171030RequestStreamingDistributionConfig createStreamingDistribution20171030RequestStreamingDistributionConfig = (CreateStreamingDistribution20171030RequestStreamingDistributionConfig) o;
    return Objects.equals(this.callerReference, createStreamingDistribution20171030RequestStreamingDistributionConfig.callerReference) &&
        Objects.equals(this.s3Origin, createStreamingDistribution20171030RequestStreamingDistributionConfig.s3Origin) &&
        Objects.equals(this.aliases, createStreamingDistribution20171030RequestStreamingDistributionConfig.aliases) &&
        Objects.equals(this.comment, createStreamingDistribution20171030RequestStreamingDistributionConfig.comment) &&
        Objects.equals(this.logging, createStreamingDistribution20171030RequestStreamingDistributionConfig.logging) &&
        Objects.equals(this.trustedSigners, createStreamingDistribution20171030RequestStreamingDistributionConfig.trustedSigners) &&
        Objects.equals(this.priceClass, createStreamingDistribution20171030RequestStreamingDistributionConfig.priceClass) &&
        Objects.equals(this.enabled, createStreamingDistribution20171030RequestStreamingDistributionConfig.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callerReference, s3Origin, aliases, comment, logging, trustedSigners, priceClass, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStreamingDistribution20171030RequestStreamingDistributionConfig {\n");
    sb.append("    callerReference: ").append(toIndentedString(callerReference)).append("\n");
    sb.append("    s3Origin: ").append(toIndentedString(s3Origin)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    logging: ").append(toIndentedString(logging)).append("\n");
    sb.append("    trustedSigners: ").append(toIndentedString(trustedSigners)).append("\n");
    sb.append("    priceClass: ").append(toIndentedString(priceClass)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CallerReference");
    openapiFields.add("S3Origin");
    openapiFields.add("Aliases");
    openapiFields.add("Comment");
    openapiFields.add("Logging");
    openapiFields.add("TrustedSigners");
    openapiFields.add("PriceClass");
    openapiFields.add("Enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateStreamingDistribution20171030RequestStreamingDistributionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateStreamingDistribution20171030RequestStreamingDistributionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateStreamingDistribution20171030RequestStreamingDistributionConfig is not found in the empty JSON string", CreateStreamingDistribution20171030RequestStreamingDistributionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateStreamingDistribution20171030RequestStreamingDistributionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateStreamingDistribution20171030RequestStreamingDistributionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CallerReference`
      if (jsonObj.get("CallerReference") != null && !jsonObj.get("CallerReference").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CallerReference"));
      }
      // validate the optional field `S3Origin`
      if (jsonObj.get("S3Origin") != null && !jsonObj.get("S3Origin").isJsonNull()) {
        CreateStreamingDistribution20171030RequestStreamingDistributionConfigS3Origin.validateJsonElement(jsonObj.get("S3Origin"));
      }
      // validate the optional field `Aliases`
      if (jsonObj.get("Aliases") != null && !jsonObj.get("Aliases").isJsonNull()) {
        CreateStreamingDistribution20171030RequestStreamingDistributionConfigAliases.validateJsonElement(jsonObj.get("Aliases"));
      }
      // validate the optional field `Comment`
      if (jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Comment"));
      }
      // validate the optional field `Logging`
      if (jsonObj.get("Logging") != null && !jsonObj.get("Logging").isJsonNull()) {
        CreateStreamingDistribution20171030RequestStreamingDistributionConfigLogging.validateJsonElement(jsonObj.get("Logging"));
      }
      // validate the optional field `TrustedSigners`
      if (jsonObj.get("TrustedSigners") != null && !jsonObj.get("TrustedSigners").isJsonNull()) {
        CreateStreamingDistribution20171030RequestStreamingDistributionConfigTrustedSigners.validateJsonElement(jsonObj.get("TrustedSigners"));
      }
      // validate the optional field `PriceClass`
      if (jsonObj.get("PriceClass") != null && !jsonObj.get("PriceClass").isJsonNull()) {
        PriceClass.validateJsonElement(jsonObj.get("PriceClass"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateStreamingDistribution20171030RequestStreamingDistributionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateStreamingDistribution20171030RequestStreamingDistributionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateStreamingDistribution20171030RequestStreamingDistributionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateStreamingDistribution20171030RequestStreamingDistributionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateStreamingDistribution20171030RequestStreamingDistributionConfig>() {
           @Override
           public void write(JsonWriter out, CreateStreamingDistribution20171030RequestStreamingDistributionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateStreamingDistribution20171030RequestStreamingDistributionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateStreamingDistribution20171030RequestStreamingDistributionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateStreamingDistribution20171030RequestStreamingDistributionConfig
   * @throws IOException if the JSON string is invalid with respect to CreateStreamingDistribution20171030RequestStreamingDistributionConfig
   */
  public static CreateStreamingDistribution20171030RequestStreamingDistributionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateStreamingDistribution20171030RequestStreamingDistributionConfig.class);
  }

  /**
   * Convert an instance of CreateStreamingDistribution20171030RequestStreamingDistributionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

