/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SessionStickinessConfig model module.
 * @module model/SessionStickinessConfig
 * @version 2020-05-31
 */
class SessionStickinessConfig {
    /**
     * Constructs a new <code>SessionStickinessConfig</code>.
     * Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user&#39;s requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.
     * @alias module:model/SessionStickinessConfig
     * @param idleTTL {Number} 
     * @param maximumTTL {Number} 
     */
    constructor(idleTTL, maximumTTL) { 
        
        SessionStickinessConfig.initialize(this, idleTTL, maximumTTL);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, idleTTL, maximumTTL) { 
        obj['IdleTTL'] = idleTTL;
        obj['MaximumTTL'] = maximumTTL;
    }

    /**
     * Constructs a <code>SessionStickinessConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SessionStickinessConfig} obj Optional instance to populate.
     * @return {module:model/SessionStickinessConfig} The populated <code>SessionStickinessConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SessionStickinessConfig();

            if (data.hasOwnProperty('IdleTTL')) {
                obj['IdleTTL'] = ApiClient.convertToType(data['IdleTTL'], 'Number');
            }
            if (data.hasOwnProperty('MaximumTTL')) {
                obj['MaximumTTL'] = ApiClient.convertToType(data['MaximumTTL'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SessionStickinessConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SessionStickinessConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SessionStickinessConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `IdleTTL`
        if (data['IdleTTL']) { // data not null
          Number.validateJSON(data['IdleTTL']);
        }
        // validate the optional field `MaximumTTL`
        if (data['MaximumTTL']) { // data not null
          Number.validateJSON(data['MaximumTTL']);
        }

        return true;
    }


}

SessionStickinessConfig.RequiredProperties = ["IdleTTL", "MaximumTTL"];

/**
 * @member {Number} IdleTTL
 */
SessionStickinessConfig.prototype['IdleTTL'] = undefined;

/**
 * @member {Number} MaximumTTL
 */
SessionStickinessConfig.prototype['MaximumTTL'] = undefined;






export default SessionStickinessConfig;

