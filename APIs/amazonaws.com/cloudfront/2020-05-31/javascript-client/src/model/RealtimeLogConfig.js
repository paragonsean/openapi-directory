/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RealtimeLogConfig model module.
 * @module model/RealtimeLogConfig
 * @version 2020-05-31
 */
class RealtimeLogConfig {
    /**
     * Constructs a new <code>RealtimeLogConfig</code>.
     * A real-time log configuration.
     * @alias module:model/RealtimeLogConfig
     * @param ARN {String} 
     * @param name {String} 
     * @param samplingRate {Number} 
     * @param endPoints {Array} 
     * @param fields {Array} 
     */
    constructor(ARN, name, samplingRate, endPoints, fields) { 
        
        RealtimeLogConfig.initialize(this, ARN, name, samplingRate, endPoints, fields);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ARN, name, samplingRate, endPoints, fields) { 
        obj['ARN'] = ARN;
        obj['Name'] = name;
        obj['SamplingRate'] = samplingRate;
        obj['EndPoints'] = endPoints;
        obj['Fields'] = fields;
    }

    /**
     * Constructs a <code>RealtimeLogConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RealtimeLogConfig} obj Optional instance to populate.
     * @return {module:model/RealtimeLogConfig} The populated <code>RealtimeLogConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RealtimeLogConfig();

            if (data.hasOwnProperty('ARN')) {
                obj['ARN'] = ApiClient.convertToType(data['ARN'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('SamplingRate')) {
                obj['SamplingRate'] = ApiClient.convertToType(data['SamplingRate'], 'Number');
            }
            if (data.hasOwnProperty('EndPoints')) {
                obj['EndPoints'] = ApiClient.convertToType(data['EndPoints'], Array);
            }
            if (data.hasOwnProperty('Fields')) {
                obj['Fields'] = ApiClient.convertToType(data['Fields'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RealtimeLogConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RealtimeLogConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RealtimeLogConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ARN`
        if (data['ARN']) { // data not null
          String.validateJSON(data['ARN']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `SamplingRate`
        if (data['SamplingRate']) { // data not null
          Number.validateJSON(data['SamplingRate']);
        }
        // validate the optional field `EndPoints`
        if (data['EndPoints']) { // data not null
          Array.validateJSON(data['EndPoints']);
        }
        // validate the optional field `Fields`
        if (data['Fields']) { // data not null
          Array.validateJSON(data['Fields']);
        }

        return true;
    }


}

RealtimeLogConfig.RequiredProperties = ["ARN", "Name", "SamplingRate", "EndPoints", "Fields"];

/**
 * @member {String} ARN
 */
RealtimeLogConfig.prototype['ARN'] = undefined;

/**
 * @member {String} Name
 */
RealtimeLogConfig.prototype['Name'] = undefined;

/**
 * @member {Number} SamplingRate
 */
RealtimeLogConfig.prototype['SamplingRate'] = undefined;

/**
 * @member {Array} EndPoints
 */
RealtimeLogConfig.prototype['EndPoints'] = undefined;

/**
 * @member {Array} Fields
 */
RealtimeLogConfig.prototype['Fields'] = undefined;






export default RealtimeLogConfig;

