/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FunctionStage from './FunctionStage';

/**
 * The TestFunctionRequest model module.
 * @module model/TestFunctionRequest
 * @version 2020-05-31
 */
class TestFunctionRequest {
    /**
     * Constructs a new <code>TestFunctionRequest</code>.
     * @alias module:model/TestFunctionRequest
     * @param eventObject {String} 
     */
    constructor(eventObject) { 
        
        TestFunctionRequest.initialize(this, eventObject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventObject) { 
        obj['EventObject'] = eventObject;
    }

    /**
     * Constructs a <code>TestFunctionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestFunctionRequest} obj Optional instance to populate.
     * @return {module:model/TestFunctionRequest} The populated <code>TestFunctionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestFunctionRequest();

            if (data.hasOwnProperty('Stage')) {
                obj['Stage'] = ApiClient.convertToType(data['Stage'], FunctionStage);
            }
            if (data.hasOwnProperty('EventObject')) {
                obj['EventObject'] = ApiClient.convertToType(data['EventObject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestFunctionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestFunctionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestFunctionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Stage`
        if (data['Stage']) { // data not null
          FunctionStage.validateJSON(data['Stage']);
        }
        // validate the optional field `EventObject`
        if (data['EventObject']) { // data not null
          String.validateJSON(data['EventObject']);
        }

        return true;
    }


}

TestFunctionRequest.RequiredProperties = ["EventObject"];

/**
 * @member {module:model/FunctionStage} Stage
 */
TestFunctionRequest.prototype['Stage'] = undefined;

/**
 * @member {String} EventObject
 */
TestFunctionRequest.prototype['EventObject'] = undefined;






export default TestFunctionRequest;

