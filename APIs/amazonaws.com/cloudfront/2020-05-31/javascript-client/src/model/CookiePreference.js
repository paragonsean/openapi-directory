/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CookiePreferenceWhitelistedNames from './CookiePreferenceWhitelistedNames';
import ItemSelection from './ItemSelection';

/**
 * The CookiePreference model module.
 * @module model/CookiePreference
 * @version 2020-05-31
 */
class CookiePreference {
    /**
     * Constructs a new <code>CookiePreference</code>.
     * &lt;p&gt;This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.&lt;/p&gt; &lt;p&gt;If you want to include cookies in the cache key, use &lt;code&gt;CookiesConfig&lt;/code&gt; in a cache policy. See &lt;code&gt;CachePolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you want to send cookies to the origin but not include them in the cache key, use &lt;code&gt;CookiesConfig&lt;/code&gt; in an origin request policy. See &lt;code&gt;OriginRequestPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html\&quot;&gt;Caching Content Based on Cookies&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/CookiePreference
     * @param forward {module:model/ItemSelection} 
     */
    constructor(forward) { 
        
        CookiePreference.initialize(this, forward);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, forward) { 
        obj['Forward'] = forward;
    }

    /**
     * Constructs a <code>CookiePreference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CookiePreference} obj Optional instance to populate.
     * @return {module:model/CookiePreference} The populated <code>CookiePreference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CookiePreference();

            if (data.hasOwnProperty('Forward')) {
                obj['Forward'] = ApiClient.convertToType(data['Forward'], ItemSelection);
            }
            if (data.hasOwnProperty('WhitelistedNames')) {
                obj['WhitelistedNames'] = CookiePreferenceWhitelistedNames.constructFromObject(data['WhitelistedNames']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CookiePreference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CookiePreference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CookiePreference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Forward`
        if (data['Forward']) { // data not null
          ItemSelection.validateJSON(data['Forward']);
        }
        // validate the optional field `WhitelistedNames`
        if (data['WhitelistedNames']) { // data not null
          CookiePreferenceWhitelistedNames.validateJSON(data['WhitelistedNames']);
        }

        return true;
    }


}

CookiePreference.RequiredProperties = ["Forward"];

/**
 * @member {module:model/ItemSelection} Forward
 */
CookiePreference.prototype['Forward'] = undefined;

/**
 * @member {module:model/CookiePreferenceWhitelistedNames} WhitelistedNames
 */
CookiePreference.prototype['WhitelistedNames'] = undefined;






export default CookiePreference;

