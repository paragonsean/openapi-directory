/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CopyDistribution20200531Request from '../model/CopyDistribution20200531Request';
import CopyDistributionResult from '../model/CopyDistributionResult';
import CreateCachePolicy20200531Request from '../model/CreateCachePolicy20200531Request';
import CreateCachePolicyResult from '../model/CreateCachePolicyResult';
import CreateCloudFrontOriginAccessIdentity20200531Request from '../model/CreateCloudFrontOriginAccessIdentity20200531Request';
import CreateCloudFrontOriginAccessIdentityResult from '../model/CreateCloudFrontOriginAccessIdentityResult';
import CreateContinuousDeploymentPolicy20200531Request from '../model/CreateContinuousDeploymentPolicy20200531Request';
import CreateContinuousDeploymentPolicyResult from '../model/CreateContinuousDeploymentPolicyResult';
import CreateDistribution20200531Request from '../model/CreateDistribution20200531Request';
import CreateDistributionResult from '../model/CreateDistributionResult';
import CreateDistributionWithTags20200531Request from '../model/CreateDistributionWithTags20200531Request';
import CreateDistributionWithTagsResult from '../model/CreateDistributionWithTagsResult';
import CreateFieldLevelEncryptionConfig20200531Request from '../model/CreateFieldLevelEncryptionConfig20200531Request';
import CreateFieldLevelEncryptionConfigResult from '../model/CreateFieldLevelEncryptionConfigResult';
import CreateFieldLevelEncryptionProfile20200531Request from '../model/CreateFieldLevelEncryptionProfile20200531Request';
import CreateFieldLevelEncryptionProfileResult from '../model/CreateFieldLevelEncryptionProfileResult';
import CreateFunction20200531Request from '../model/CreateFunction20200531Request';
import CreateFunctionResult from '../model/CreateFunctionResult';
import CreateInvalidation20200531Request from '../model/CreateInvalidation20200531Request';
import CreateInvalidationResult from '../model/CreateInvalidationResult';
import CreateKeyGroup20200531Request from '../model/CreateKeyGroup20200531Request';
import CreateKeyGroupResult from '../model/CreateKeyGroupResult';
import CreateMonitoringSubscription20200531Request from '../model/CreateMonitoringSubscription20200531Request';
import CreateMonitoringSubscriptionResult from '../model/CreateMonitoringSubscriptionResult';
import CreateOriginAccessControl20200531Request from '../model/CreateOriginAccessControl20200531Request';
import CreateOriginAccessControlResult from '../model/CreateOriginAccessControlResult';
import CreateOriginRequestPolicy20200531Request from '../model/CreateOriginRequestPolicy20200531Request';
import CreateOriginRequestPolicyResult from '../model/CreateOriginRequestPolicyResult';
import CreatePublicKey20200531Request from '../model/CreatePublicKey20200531Request';
import CreatePublicKeyResult from '../model/CreatePublicKeyResult';
import CreateRealtimeLogConfig20200531Request from '../model/CreateRealtimeLogConfig20200531Request';
import CreateRealtimeLogConfigResult from '../model/CreateRealtimeLogConfigResult';
import CreateResponseHeadersPolicy20200531Request from '../model/CreateResponseHeadersPolicy20200531Request';
import CreateResponseHeadersPolicyResult from '../model/CreateResponseHeadersPolicyResult';
import CreateStreamingDistribution20200531Request from '../model/CreateStreamingDistribution20200531Request';
import CreateStreamingDistributionResult from '../model/CreateStreamingDistributionResult';
import CreateStreamingDistributionWithTags20200531Request from '../model/CreateStreamingDistributionWithTags20200531Request';
import CreateStreamingDistributionWithTagsResult from '../model/CreateStreamingDistributionWithTagsResult';
import DeleteRealtimeLogConfig20200531Request from '../model/DeleteRealtimeLogConfig20200531Request';
import DescribeFunctionResult from '../model/DescribeFunctionResult';
import GetCachePolicyConfigResult from '../model/GetCachePolicyConfigResult';
import GetCachePolicyResult from '../model/GetCachePolicyResult';
import GetCloudFrontOriginAccessIdentityConfigResult from '../model/GetCloudFrontOriginAccessIdentityConfigResult';
import GetCloudFrontOriginAccessIdentityResult from '../model/GetCloudFrontOriginAccessIdentityResult';
import GetContinuousDeploymentPolicyConfigResult from '../model/GetContinuousDeploymentPolicyConfigResult';
import GetContinuousDeploymentPolicyResult from '../model/GetContinuousDeploymentPolicyResult';
import GetDistributionConfigResult from '../model/GetDistributionConfigResult';
import GetDistributionResult from '../model/GetDistributionResult';
import GetFieldLevelEncryptionConfigResult from '../model/GetFieldLevelEncryptionConfigResult';
import GetFieldLevelEncryptionProfileConfigResult from '../model/GetFieldLevelEncryptionProfileConfigResult';
import GetFieldLevelEncryptionProfileResult from '../model/GetFieldLevelEncryptionProfileResult';
import GetFieldLevelEncryptionResult from '../model/GetFieldLevelEncryptionResult';
import GetFunctionResult from '../model/GetFunctionResult';
import GetInvalidationResult from '../model/GetInvalidationResult';
import GetKeyGroupConfigResult from '../model/GetKeyGroupConfigResult';
import GetKeyGroupResult from '../model/GetKeyGroupResult';
import GetMonitoringSubscriptionResult from '../model/GetMonitoringSubscriptionResult';
import GetOriginAccessControlConfigResult from '../model/GetOriginAccessControlConfigResult';
import GetOriginAccessControlResult from '../model/GetOriginAccessControlResult';
import GetOriginRequestPolicyConfigResult from '../model/GetOriginRequestPolicyConfigResult';
import GetOriginRequestPolicyResult from '../model/GetOriginRequestPolicyResult';
import GetPublicKeyConfigResult from '../model/GetPublicKeyConfigResult';
import GetPublicKeyResult from '../model/GetPublicKeyResult';
import GetRealtimeLogConfig20200531Request from '../model/GetRealtimeLogConfig20200531Request';
import GetRealtimeLogConfigResult from '../model/GetRealtimeLogConfigResult';
import GetResponseHeadersPolicyConfigResult from '../model/GetResponseHeadersPolicyConfigResult';
import GetResponseHeadersPolicyResult from '../model/GetResponseHeadersPolicyResult';
import GetStreamingDistributionConfigResult from '../model/GetStreamingDistributionConfigResult';
import GetStreamingDistributionResult from '../model/GetStreamingDistributionResult';
import ListCachePoliciesResult from '../model/ListCachePoliciesResult';
import ListCloudFrontOriginAccessIdentitiesResult from '../model/ListCloudFrontOriginAccessIdentitiesResult';
import ListConflictingAliasesResult from '../model/ListConflictingAliasesResult';
import ListContinuousDeploymentPoliciesResult from '../model/ListContinuousDeploymentPoliciesResult';
import ListDistributionsByCachePolicyIdResult from '../model/ListDistributionsByCachePolicyIdResult';
import ListDistributionsByKeyGroupResult from '../model/ListDistributionsByKeyGroupResult';
import ListDistributionsByOriginRequestPolicyIdResult from '../model/ListDistributionsByOriginRequestPolicyIdResult';
import ListDistributionsByRealtimeLogConfig20200531Request from '../model/ListDistributionsByRealtimeLogConfig20200531Request';
import ListDistributionsByRealtimeLogConfigResult from '../model/ListDistributionsByRealtimeLogConfigResult';
import ListDistributionsByResponseHeadersPolicyIdResult from '../model/ListDistributionsByResponseHeadersPolicyIdResult';
import ListDistributionsByWebACLIdResult from '../model/ListDistributionsByWebACLIdResult';
import ListDistributionsResult from '../model/ListDistributionsResult';
import ListFieldLevelEncryptionConfigsResult from '../model/ListFieldLevelEncryptionConfigsResult';
import ListFieldLevelEncryptionProfilesResult from '../model/ListFieldLevelEncryptionProfilesResult';
import ListFunctionsResult from '../model/ListFunctionsResult';
import ListInvalidationsResult from '../model/ListInvalidationsResult';
import ListKeyGroupsResult from '../model/ListKeyGroupsResult';
import ListOriginAccessControlsResult from '../model/ListOriginAccessControlsResult';
import ListOriginRequestPoliciesResult from '../model/ListOriginRequestPoliciesResult';
import ListPublicKeysResult from '../model/ListPublicKeysResult';
import ListRealtimeLogConfigsResult from '../model/ListRealtimeLogConfigsResult';
import ListResponseHeadersPoliciesResult from '../model/ListResponseHeadersPoliciesResult';
import ListStreamingDistributionsResult from '../model/ListStreamingDistributionsResult';
import ListTagsForResourceResult from '../model/ListTagsForResourceResult';
import PublishFunctionResult from '../model/PublishFunctionResult';
import TagResource20200531Request from '../model/TagResource20200531Request';
import TestFunction20200531Request from '../model/TestFunction20200531Request';
import TestFunctionResult from '../model/TestFunctionResult';
import UntagResource20200531Request from '../model/UntagResource20200531Request';
import UpdateCachePolicyResult from '../model/UpdateCachePolicyResult';
import UpdateCloudFrontOriginAccessIdentityResult from '../model/UpdateCloudFrontOriginAccessIdentityResult';
import UpdateContinuousDeploymentPolicyResult from '../model/UpdateContinuousDeploymentPolicyResult';
import UpdateDistributionResult from '../model/UpdateDistributionResult';
import UpdateDistributionWithStagingConfigResult from '../model/UpdateDistributionWithStagingConfigResult';
import UpdateFieldLevelEncryptionConfigResult from '../model/UpdateFieldLevelEncryptionConfigResult';
import UpdateFieldLevelEncryptionProfileResult from '../model/UpdateFieldLevelEncryptionProfileResult';
import UpdateFunction20200531Request from '../model/UpdateFunction20200531Request';
import UpdateFunctionResult from '../model/UpdateFunctionResult';
import UpdateKeyGroupResult from '../model/UpdateKeyGroupResult';
import UpdateOriginAccessControlResult from '../model/UpdateOriginAccessControlResult';
import UpdateOriginRequestPolicyResult from '../model/UpdateOriginRequestPolicyResult';
import UpdatePublicKeyResult from '../model/UpdatePublicKeyResult';
import UpdateRealtimeLogConfig20200531Request from '../model/UpdateRealtimeLogConfig20200531Request';
import UpdateRealtimeLogConfigResult from '../model/UpdateRealtimeLogConfigResult';
import UpdateResponseHeadersPolicyResult from '../model/UpdateResponseHeadersPolicyResult';
import UpdateStreamingDistributionResult from '../model/UpdateStreamingDistributionResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-05-31
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateAlias20200531 operation.
     * @callback module:api/DefaultApi~associateAlias20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront distribution.</p> <p>With this operation you can move an alias that's already in use on a CloudFront distribution to a different distribution in one step. This prevents the downtime that could occur if you first remove the alias from one distribution and then separately add the alias to another distribution.</p> <p>To use this operation to associate an alias with a distribution, you provide the alias and the ID of the target distribution for the alias. For more information, including how to set up the target distribution, prerequisites that you must complete, and other restrictions, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\">Moving an alternate domain name to a different distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {String} targetDistributionId The ID of the distribution that you're associating the alias with.
     * @param {String} alias The alias (also known as a CNAME) to add to the target distribution.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateAlias20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    associateAlias20200531(targetDistributionId, alias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'targetDistributionId' is set
      if (targetDistributionId === undefined || targetDistributionId === null) {
        throw new Error("Missing the required parameter 'targetDistributionId' when calling associateAlias20200531");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling associateAlias20200531");
      }

      let pathParams = {
        'TargetDistributionId': targetDistributionId
      };
      let queryParams = {
        'Alias': alias
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{TargetDistributionId}/associate-alias#Alias', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyDistribution20200531 operation.
     * @callback module:api/DefaultApi~copyDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a staging distribution using the configuration of the provided primary distribution. A staging distribution is a copy of an existing distribution (called the primary distribution) that you can use in a continuous deployment workflow.</p> <p>After you create a staging distribution, you can use <code>UpdateDistribution</code> to modify the staging distribution's configuration. Then you can use <code>CreateContinuousDeploymentPolicy</code> to incrementally move traffic to the staging distribution.</p> <p>This API operation requires the following IAM permissions:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\">GetDistribution</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\">CreateDistribution</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CopyDistribution.html\">CopyDistribution</a> </p> </li> </ul>
     * @param {String} primaryDistributionId The identifier of the primary distribution whose configuration you are copying. To get a distribution ID, use <code>ListDistributions</code>.
     * @param {module:model/CopyDistribution20200531Request} copyDistribution20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [staging] The type of distribution that your primary distribution will be copied to. The only valid value is <code>True</code>, indicating that you are copying to a staging distribution.
     * @param {String} [ifMatch] The version identifier of the primary distribution whose configuration you are copying. This is the <code>ETag</code> value returned in the response to <code>GetDistribution</code> and <code>GetDistributionConfig</code>.
     * @param {module:api/DefaultApi~copyDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyDistributionResult}
     */
    copyDistribution20200531(primaryDistributionId, copyDistribution20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = copyDistribution20200531Request;
      // verify the required parameter 'primaryDistributionId' is set
      if (primaryDistributionId === undefined || primaryDistributionId === null) {
        throw new Error("Missing the required parameter 'primaryDistributionId' when calling copyDistribution20200531");
      }
      // verify the required parameter 'copyDistribution20200531Request' is set
      if (copyDistribution20200531Request === undefined || copyDistribution20200531Request === null) {
        throw new Error("Missing the required parameter 'copyDistribution20200531Request' when calling copyDistribution20200531");
      }

      let pathParams = {
        'PrimaryDistributionId': primaryDistributionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Staging': opts['staging'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CopyDistributionResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{PrimaryDistributionId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCachePolicy20200531 operation.
     * @callback module:api/DefaultApi~createCachePolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCachePolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a cache policy.</p> <p>After you create a cache policy, you can attach it to one or more cache behaviors. When it's attached to a cache behavior, the cache policy determines the following:</p> <ul> <li> <p>The values that CloudFront includes in the <i>cache key</i>. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.</p> </li> <li> <p>The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.</p> </li> </ul> <p>The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find an object in its cache that matches the request's cache key. If you want to send values to the origin but <i>not</i> include them in the cache key, use <code>OriginRequestPolicy</code>.</p> <p>For more information about cache policies, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html\">Controlling the cache key</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {module:model/CreateCachePolicy20200531Request} createCachePolicy20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCachePolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCachePolicyResult}
     */
    createCachePolicy20200531(createCachePolicy20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createCachePolicy20200531Request;
      // verify the required parameter 'createCachePolicy20200531Request' is set
      if (createCachePolicy20200531Request === undefined || createCachePolicy20200531Request === null) {
        throw new Error("Missing the required parameter 'createCachePolicy20200531Request' when calling createCachePolicy20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateCachePolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/cache-policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCloudFrontOriginAccessIdentity20200531 operation.
     * @callback module:api/DefaultApi~createCloudFrontOriginAccessIdentity20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCloudFrontOriginAccessIdentityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new origin access identity. If you're using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\">Serving Private Content through CloudFront</a> in the <i>Amazon CloudFront Developer Guide</i>.
     * @param {module:model/CreateCloudFrontOriginAccessIdentity20200531Request} createCloudFrontOriginAccessIdentity20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCloudFrontOriginAccessIdentity20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCloudFrontOriginAccessIdentityResult}
     */
    createCloudFrontOriginAccessIdentity20200531(createCloudFrontOriginAccessIdentity20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createCloudFrontOriginAccessIdentity20200531Request;
      // verify the required parameter 'createCloudFrontOriginAccessIdentity20200531Request' is set
      if (createCloudFrontOriginAccessIdentity20200531Request === undefined || createCloudFrontOriginAccessIdentity20200531Request === null) {
        throw new Error("Missing the required parameter 'createCloudFrontOriginAccessIdentity20200531Request' when calling createCloudFrontOriginAccessIdentity20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateCloudFrontOriginAccessIdentityResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-identity/cloudfront', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContinuousDeploymentPolicy20200531 operation.
     * @callback module:api/DefaultApi~createContinuousDeploymentPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateContinuousDeploymentPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a continuous deployment policy that distributes traffic for a custom domain name to two different CloudFront distributions.</p> <p>To use a continuous deployment policy, first use <code>CopyDistribution</code> to create a staging distribution, then use <code>UpdateDistribution</code> to modify the staging distribution's configuration.</p> <p>After you create and update a staging distribution, you can use a continuous deployment policy to incrementally move traffic to the staging distribution. This workflow enables you to test changes to a distribution's configuration before moving all of your domain's production traffic to the new configuration.</p>
     * @param {module:model/CreateContinuousDeploymentPolicy20200531Request} createContinuousDeploymentPolicy20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContinuousDeploymentPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateContinuousDeploymentPolicyResult}
     */
    createContinuousDeploymentPolicy20200531(createContinuousDeploymentPolicy20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createContinuousDeploymentPolicy20200531Request;
      // verify the required parameter 'createContinuousDeploymentPolicy20200531Request' is set
      if (createContinuousDeploymentPolicy20200531Request === undefined || createContinuousDeploymentPolicy20200531Request === null) {
        throw new Error("Missing the required parameter 'createContinuousDeploymentPolicy20200531Request' when calling createContinuousDeploymentPolicy20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateContinuousDeploymentPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/continuous-deployment-policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDistribution20200531 operation.
     * @callback module:api/DefaultApi~createDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a CloudFront distribution.
     * @param {module:model/CreateDistribution20200531Request} createDistribution20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDistributionResult}
     */
    createDistribution20200531(createDistribution20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createDistribution20200531Request;
      // verify the required parameter 'createDistribution20200531Request' is set
      if (createDistribution20200531Request === undefined || createDistribution20200531Request === null) {
        throw new Error("Missing the required parameter 'createDistribution20200531Request' when calling createDistribution20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDistributionResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDistributionWithTags20200531 operation.
     * @callback module:api/DefaultApi~createDistributionWithTags20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDistributionWithTagsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create a new distribution with tags. This API operation requires the following IAM permissions:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\">CreateDistribution</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_TagResource.html\">TagResource</a> </p> </li> </ul>
     * @param {Boolean} withTags 
     * @param {module:model/CreateDistributionWithTags20200531Request} createDistributionWithTags20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDistributionWithTags20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDistributionWithTagsResult}
     */
    createDistributionWithTags20200531(withTags, createDistributionWithTags20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createDistributionWithTags20200531Request;
      // verify the required parameter 'withTags' is set
      if (withTags === undefined || withTags === null) {
        throw new Error("Missing the required parameter 'withTags' when calling createDistributionWithTags20200531");
      }
      // verify the required parameter 'createDistributionWithTags20200531Request' is set
      if (createDistributionWithTags20200531Request === undefined || createDistributionWithTags20200531Request === null) {
        throw new Error("Missing the required parameter 'createDistributionWithTags20200531Request' when calling createDistributionWithTags20200531");
      }

      let pathParams = {
      };
      let queryParams = {
        'WithTags': withTags
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDistributionWithTagsResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution#WithTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFieldLevelEncryptionConfig20200531 operation.
     * @callback module:api/DefaultApi~createFieldLevelEncryptionConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFieldLevelEncryptionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new field-level encryption configuration.
     * @param {module:model/CreateFieldLevelEncryptionConfig20200531Request} createFieldLevelEncryptionConfig20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFieldLevelEncryptionConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFieldLevelEncryptionConfigResult}
     */
    createFieldLevelEncryptionConfig20200531(createFieldLevelEncryptionConfig20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createFieldLevelEncryptionConfig20200531Request;
      // verify the required parameter 'createFieldLevelEncryptionConfig20200531Request' is set
      if (createFieldLevelEncryptionConfig20200531Request === undefined || createFieldLevelEncryptionConfig20200531Request === null) {
        throw new Error("Missing the required parameter 'createFieldLevelEncryptionConfig20200531Request' when calling createFieldLevelEncryptionConfig20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateFieldLevelEncryptionConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFieldLevelEncryptionProfile20200531 operation.
     * @callback module:api/DefaultApi~createFieldLevelEncryptionProfile20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFieldLevelEncryptionProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a field-level encryption profile.
     * @param {module:model/CreateFieldLevelEncryptionProfile20200531Request} createFieldLevelEncryptionProfile20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFieldLevelEncryptionProfile20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFieldLevelEncryptionProfileResult}
     */
    createFieldLevelEncryptionProfile20200531(createFieldLevelEncryptionProfile20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createFieldLevelEncryptionProfile20200531Request;
      // verify the required parameter 'createFieldLevelEncryptionProfile20200531Request' is set
      if (createFieldLevelEncryptionProfile20200531Request === undefined || createFieldLevelEncryptionProfile20200531Request === null) {
        throw new Error("Missing the required parameter 'createFieldLevelEncryptionProfile20200531Request' when calling createFieldLevelEncryptionProfile20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateFieldLevelEncryptionProfileResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption-profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFunction20200531 operation.
     * @callback module:api/DefaultApi~createFunction20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFunctionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a CloudFront function.</p> <p>To create a function, you provide the function code and some configuration information about the function. The response contains an Amazon Resource Name (ARN) that uniquely identifies the function.</p> <p>When you create a function, it's in the <code>DEVELOPMENT</code> stage. In this stage, you can test the function with <code>TestFunction</code>, and update it with <code>UpdateFunction</code>.</p> <p>When you're ready to use your function with a CloudFront distribution, use <code>PublishFunction</code> to copy the function from the <code>DEVELOPMENT</code> stage to <code>LIVE</code>. When it's live, you can attach the function to a distribution's cache behavior, using the function's ARN.</p>
     * @param {module:model/CreateFunction20200531Request} createFunction20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFunction20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFunctionResult}
     */
    createFunction20200531(createFunction20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createFunction20200531Request;
      // verify the required parameter 'createFunction20200531Request' is set
      if (createFunction20200531Request === undefined || createFunction20200531Request === null) {
        throw new Error("Missing the required parameter 'createFunction20200531Request' when calling createFunction20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateFunctionResult;
      return this.apiClient.callApi(
        '/2020-05-31/function', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvalidation20200531 operation.
     * @callback module:api/DefaultApi~createInvalidation20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInvalidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new invalidation.
     * @param {String} distributionId The distribution's id.
     * @param {module:model/CreateInvalidation20200531Request} createInvalidation20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInvalidation20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInvalidationResult}
     */
    createInvalidation20200531(distributionId, createInvalidation20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createInvalidation20200531Request;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling createInvalidation20200531");
      }
      // verify the required parameter 'createInvalidation20200531Request' is set
      if (createInvalidation20200531Request === undefined || createInvalidation20200531Request === null) {
        throw new Error("Missing the required parameter 'createInvalidation20200531Request' when calling createInvalidation20200531");
      }

      let pathParams = {
        'DistributionId': distributionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateInvalidationResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{DistributionId}/invalidation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createKeyGroup20200531 operation.
     * @callback module:api/DefaultApi~createKeyGroup20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateKeyGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a key group that you can use with <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\">CloudFront signed URLs and signed cookies</a>.</p> <p>To create a key group, you must specify at least one public key for the key group. After you create a key group, you can reference it from one or more cache behaviors. When you reference a key group in a cache behavior, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\">Serving private content</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {module:model/CreateKeyGroup20200531Request} createKeyGroup20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createKeyGroup20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateKeyGroupResult}
     */
    createKeyGroup20200531(createKeyGroup20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createKeyGroup20200531Request;
      // verify the required parameter 'createKeyGroup20200531Request' is set
      if (createKeyGroup20200531Request === undefined || createKeyGroup20200531Request === null) {
        throw new Error("Missing the required parameter 'createKeyGroup20200531Request' when calling createKeyGroup20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateKeyGroupResult;
      return this.apiClient.callApi(
        '/2020-05-31/key-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMonitoringSubscription20200531 operation.
     * @callback module:api/DefaultApi~createMonitoringSubscription20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMonitoringSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Enables additional CloudWatch metrics for the specified CloudFront distribution. The additional metrics incur an additional cost.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional\">Viewing additional CloudFront distribution metrics</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {String} distributionId The ID of the distribution that you are enabling metrics for.
     * @param {module:model/CreateMonitoringSubscription20200531Request} createMonitoringSubscription20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMonitoringSubscription20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMonitoringSubscriptionResult}
     */
    createMonitoringSubscription20200531(distributionId, createMonitoringSubscription20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createMonitoringSubscription20200531Request;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling createMonitoringSubscription20200531");
      }
      // verify the required parameter 'createMonitoringSubscription20200531Request' is set
      if (createMonitoringSubscription20200531Request === undefined || createMonitoringSubscription20200531Request === null) {
        throw new Error("Missing the required parameter 'createMonitoringSubscription20200531Request' when calling createMonitoringSubscription20200531");
      }

      let pathParams = {
        'DistributionId': distributionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateMonitoringSubscriptionResult;
      return this.apiClient.callApi(
        '/2020-05-31/distributions/{DistributionId}/monitoring-subscription/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOriginAccessControl20200531 operation.
     * @callback module:api/DefaultApi~createOriginAccessControl20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOriginAccessControlResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new origin access control in CloudFront. After you create an origin access control, you can add it to an origin in a CloudFront distribution so that CloudFront sends authenticated (signed) requests to the origin.</p> <p>This makes it possible to block public access to the origin, allowing viewers (users) to access the origin's content only through CloudFront.</p> <p>For more information about using a CloudFront origin access control, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-origin.html\">Restricting access to an Amazon Web Services origin</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {module:model/CreateOriginAccessControl20200531Request} createOriginAccessControl20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createOriginAccessControl20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOriginAccessControlResult}
     */
    createOriginAccessControl20200531(createOriginAccessControl20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createOriginAccessControl20200531Request;
      // verify the required parameter 'createOriginAccessControl20200531Request' is set
      if (createOriginAccessControl20200531Request === undefined || createOriginAccessControl20200531Request === null) {
        throw new Error("Missing the required parameter 'createOriginAccessControl20200531Request' when calling createOriginAccessControl20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateOriginAccessControlResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOriginRequestPolicy20200531 operation.
     * @callback module:api/DefaultApi~createOriginRequestPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOriginRequestPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an origin request policy.</p> <p>After you create an origin request policy, you can attach it to one or more cache behaviors. When it's attached to a cache behavior, the origin request policy determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:</p> <ul> <li> <p>The request body and the URL path (without the domain name) from the viewer request.</p> </li> <li> <p>The headers that CloudFront automatically includes in every origin request, including <code>Host</code>, <code>User-Agent</code>, and <code>X-Amz-Cf-Id</code>.</p> </li> <li> <p>All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.</p> </li> </ul> <p>CloudFront sends a request when it can't find a valid object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use <code>CachePolicy</code>.</p> <p>For more information about origin request policies, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html\">Controlling origin requests</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {module:model/CreateOriginRequestPolicy20200531Request} createOriginRequestPolicy20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createOriginRequestPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOriginRequestPolicyResult}
     */
    createOriginRequestPolicy20200531(createOriginRequestPolicy20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createOriginRequestPolicy20200531Request;
      // verify the required parameter 'createOriginRequestPolicy20200531Request' is set
      if (createOriginRequestPolicy20200531Request === undefined || createOriginRequestPolicy20200531Request === null) {
        throw new Error("Missing the required parameter 'createOriginRequestPolicy20200531Request' when calling createOriginRequestPolicy20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateOriginRequestPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-request-policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPublicKey20200531 operation.
     * @callback module:api/DefaultApi~createPublicKey20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePublicKeyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a public key to CloudFront that you can use with <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\">signed URLs and signed cookies</a>, or with <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html\">field-level encryption</a>.
     * @param {module:model/CreatePublicKey20200531Request} createPublicKey20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPublicKey20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePublicKeyResult}
     */
    createPublicKey20200531(createPublicKey20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createPublicKey20200531Request;
      // verify the required parameter 'createPublicKey20200531Request' is set
      if (createPublicKey20200531Request === undefined || createPublicKey20200531Request === null) {
        throw new Error("Missing the required parameter 'createPublicKey20200531Request' when calling createPublicKey20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreatePublicKeyResult;
      return this.apiClient.callApi(
        '/2020-05-31/public-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRealtimeLogConfig20200531 operation.
     * @callback module:api/DefaultApi~createRealtimeLogConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRealtimeLogConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a real-time log configuration.</p> <p>After you create a real-time log configuration, you can attach it to one or more cache behaviors to send real-time log data to the specified Amazon Kinesis data stream.</p> <p>For more information about real-time log configurations, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html\">Real-time logs</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {module:model/CreateRealtimeLogConfig20200531Request} createRealtimeLogConfig20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRealtimeLogConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRealtimeLogConfigResult}
     */
    createRealtimeLogConfig20200531(createRealtimeLogConfig20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createRealtimeLogConfig20200531Request;
      // verify the required parameter 'createRealtimeLogConfig20200531Request' is set
      if (createRealtimeLogConfig20200531Request === undefined || createRealtimeLogConfig20200531Request === null) {
        throw new Error("Missing the required parameter 'createRealtimeLogConfig20200531Request' when calling createRealtimeLogConfig20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateRealtimeLogConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/realtime-log-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResponseHeadersPolicy20200531 operation.
     * @callback module:api/DefaultApi~createResponseHeadersPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResponseHeadersPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a response headers policy.</p> <p>A response headers policy contains information about a set of HTTP headers. To create a response headers policy, you provide some metadata about the policy and a set of configurations that specify the headers.</p> <p>After you create a response headers policy, you can use its ID to attach it to one or more cache behaviors in a CloudFront distribution. When it's attached to a cache behavior, the response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to requests that match the cache behavior. CloudFront adds or removes response headers according to the configuration of the response headers policy.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/modifying-response-headers.html\">Adding or removing HTTP headers in CloudFront responses</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {module:model/CreateResponseHeadersPolicy20200531Request} createResponseHeadersPolicy20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createResponseHeadersPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResponseHeadersPolicyResult}
     */
    createResponseHeadersPolicy20200531(createResponseHeadersPolicy20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createResponseHeadersPolicy20200531Request;
      // verify the required parameter 'createResponseHeadersPolicy20200531Request' is set
      if (createResponseHeadersPolicy20200531Request === undefined || createResponseHeadersPolicy20200531Request === null) {
        throw new Error("Missing the required parameter 'createResponseHeadersPolicy20200531Request' when calling createResponseHeadersPolicy20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateResponseHeadersPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/response-headers-policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamingDistribution20200531 operation.
     * @callback module:api/DefaultApi~createStreamingDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamingDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=7356\">read the announcement</a> on the Amazon CloudFront discussion forum.
     * @param {module:model/CreateStreamingDistribution20200531Request} createStreamingDistribution20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStreamingDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamingDistributionResult}
     */
    createStreamingDistribution20200531(createStreamingDistribution20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingDistribution20200531Request;
      // verify the required parameter 'createStreamingDistribution20200531Request' is set
      if (createStreamingDistribution20200531Request === undefined || createStreamingDistribution20200531Request === null) {
        throw new Error("Missing the required parameter 'createStreamingDistribution20200531Request' when calling createStreamingDistribution20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateStreamingDistributionResult;
      return this.apiClient.callApi(
        '/2020-05-31/streaming-distribution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamingDistributionWithTags20200531 operation.
     * @callback module:api/DefaultApi~createStreamingDistributionWithTags20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamingDistributionWithTagsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=7356\">read the announcement</a> on the Amazon CloudFront discussion forum.
     * @param {Boolean} withTags 
     * @param {module:model/CreateStreamingDistributionWithTags20200531Request} createStreamingDistributionWithTags20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStreamingDistributionWithTags20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamingDistributionWithTagsResult}
     */
    createStreamingDistributionWithTags20200531(withTags, createStreamingDistributionWithTags20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingDistributionWithTags20200531Request;
      // verify the required parameter 'withTags' is set
      if (withTags === undefined || withTags === null) {
        throw new Error("Missing the required parameter 'withTags' when calling createStreamingDistributionWithTags20200531");
      }
      // verify the required parameter 'createStreamingDistributionWithTags20200531Request' is set
      if (createStreamingDistributionWithTags20200531Request === undefined || createStreamingDistributionWithTags20200531Request === null) {
        throw new Error("Missing the required parameter 'createStreamingDistributionWithTags20200531Request' when calling createStreamingDistributionWithTags20200531");
      }

      let pathParams = {
      };
      let queryParams = {
        'WithTags': withTags
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateStreamingDistributionWithTagsResult;
      return this.apiClient.callApi(
        '/2020-05-31/streaming-distribution#WithTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCachePolicy20200531 operation.
     * @callback module:api/DefaultApi~deleteCachePolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a cache policy.</p> <p>You cannot delete a cache policy if it's attached to a cache behavior. First update your distributions to remove the cache policy from all cache behaviors, then delete the cache policy.</p> <p>To delete a cache policy, you must provide the policy's identifier and version. To get these values, you can use <code>ListCachePolicies</code> or <code>GetCachePolicy</code>.</p>
     * @param {String} id The unique identifier for the cache policy that you are deleting. To get the identifier, you can use <code>ListCachePolicies</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The version of the cache policy that you are deleting. The version is the cache policy's <code>ETag</code> value, which you can get using <code>ListCachePolicies</code>, <code>GetCachePolicy</code>, or <code>GetCachePolicyConfig</code>.
     * @param {module:api/DefaultApi~deleteCachePolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCachePolicy20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCachePolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/cache-policy/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCloudFrontOriginAccessIdentity20200531 operation.
     * @callback module:api/DefaultApi~deleteCloudFrontOriginAccessIdentity20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an origin access identity.
     * @param {String} id The origin access identity's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header you received from a previous <code>GET</code> or <code>PUT</code> request. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~deleteCloudFrontOriginAccessIdentity20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCloudFrontOriginAccessIdentity20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCloudFrontOriginAccessIdentity20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-identity/cloudfront/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContinuousDeploymentPolicy20200531 operation.
     * @callback module:api/DefaultApi~deleteContinuousDeploymentPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a continuous deployment policy.</p> <p>You cannot delete a continuous deployment policy that's attached to a primary distribution. First update your distribution to remove the continuous deployment policy, then you can delete the policy.</p>
     * @param {String} id The identifier of the continuous deployment policy that you are deleting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The current version (<code>ETag</code> value) of the continuous deployment policy that you are deleting.
     * @param {module:api/DefaultApi~deleteContinuousDeploymentPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContinuousDeploymentPolicy20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteContinuousDeploymentPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/continuous-deployment-policy/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDistribution20200531 operation.
     * @callback module:api/DefaultApi~deleteDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a distribution.
     * @param {String} id The distribution ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when you disabled the distribution. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~deleteDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDistribution20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDistribution20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldLevelEncryptionConfig20200531 operation.
     * @callback module:api/DefaultApi~deleteFieldLevelEncryptionConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a field-level encryption configuration.
     * @param {String} id The ID of the configuration you want to delete from CloudFront.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the configuration identity to delete. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~deleteFieldLevelEncryptionConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFieldLevelEncryptionConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFieldLevelEncryptionConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldLevelEncryptionProfile20200531 operation.
     * @callback module:api/DefaultApi~deleteFieldLevelEncryptionProfile20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a field-level encryption profile.
     * @param {String} id Request the ID of the profile you want to delete from CloudFront.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the profile to delete. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~deleteFieldLevelEncryptionProfile20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFieldLevelEncryptionProfile20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFieldLevelEncryptionProfile20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption-profile/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFunction20200531 operation.
     * @callback module:api/DefaultApi~deleteFunction20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a CloudFront function.</p> <p>You cannot delete a function if it's associated with a cache behavior. First, update your distributions to remove the function association from all cache behaviors, then delete the function.</p> <p>To delete a function, you must provide the function's name and version (<code>ETag</code> value). To get these values, you can use <code>ListFunctions</code> and <code>DescribeFunction</code>.</p>
     * @param {String} name The name of the function that you are deleting.
     * @param {String} ifMatch The current version (<code>ETag</code> value) of the function that you are deleting, which you can get using <code>DescribeFunction</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFunction20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFunction20200531(name, ifMatch, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteFunction20200531");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling deleteFunction20200531");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/function/{Name}#If-Match', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKeyGroup20200531 operation.
     * @callback module:api/DefaultApi~deleteKeyGroup20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a key group.</p> <p>You cannot delete a key group that is referenced in a cache behavior. First update your distributions to remove the key group from all cache behaviors, then delete the key group.</p> <p>To delete a key group, you must provide the key group's identifier and version. To get these values, use <code>ListKeyGroups</code> followed by <code>GetKeyGroup</code> or <code>GetKeyGroupConfig</code>.</p>
     * @param {String} id The identifier of the key group that you are deleting. To get the identifier, use <code>ListKeyGroups</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The version of the key group that you are deleting. The version is the key group's <code>ETag</code> value. To get the <code>ETag</code>, use <code>GetKeyGroup</code> or <code>GetKeyGroupConfig</code>.
     * @param {module:api/DefaultApi~deleteKeyGroup20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteKeyGroup20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteKeyGroup20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/key-group/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMonitoringSubscription20200531 operation.
     * @callback module:api/DefaultApi~deleteMonitoringSubscription20200531Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables additional CloudWatch metrics for the specified CloudFront distribution.
     * @param {String} distributionId The ID of the distribution that you are disabling metrics for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMonitoringSubscription20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMonitoringSubscription20200531(distributionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling deleteMonitoringSubscription20200531");
      }

      let pathParams = {
        'DistributionId': distributionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2020-05-31/distributions/{DistributionId}/monitoring-subscription/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOriginAccessControl20200531 operation.
     * @callback module:api/DefaultApi~deleteOriginAccessControl20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a CloudFront origin access control.</p> <p>You cannot delete an origin access control if it's in use. First, update all distributions to remove the origin access control from all origins, then delete the origin access control.</p>
     * @param {String} id The unique identifier of the origin access control that you are deleting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The current version (<code>ETag</code> value) of the origin access control that you are deleting.
     * @param {module:api/DefaultApi~deleteOriginAccessControl20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOriginAccessControl20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOriginAccessControl20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-control/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOriginRequestPolicy20200531 operation.
     * @callback module:api/DefaultApi~deleteOriginRequestPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an origin request policy.</p> <p>You cannot delete an origin request policy if it's attached to any cache behaviors. First update your distributions to remove the origin request policy from all cache behaviors, then delete the origin request policy.</p> <p>To delete an origin request policy, you must provide the policy's identifier and version. To get the identifier, you can use <code>ListOriginRequestPolicies</code> or <code>GetOriginRequestPolicy</code>.</p>
     * @param {String} id The unique identifier for the origin request policy that you are deleting. To get the identifier, you can use <code>ListOriginRequestPolicies</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The version of the origin request policy that you are deleting. The version is the origin request policy's <code>ETag</code> value, which you can get using <code>ListOriginRequestPolicies</code>, <code>GetOriginRequestPolicy</code>, or <code>GetOriginRequestPolicyConfig</code>.
     * @param {module:api/DefaultApi~deleteOriginRequestPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOriginRequestPolicy20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOriginRequestPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/origin-request-policy/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePublicKey20200531 operation.
     * @callback module:api/DefaultApi~deletePublicKey20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a public key you previously added to CloudFront.
     * @param {String} id The ID of the public key you want to remove from CloudFront.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the public key identity to delete. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~deletePublicKey20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePublicKey20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePublicKey20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/public-key/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRealtimeLogConfig20200531 operation.
     * @callback module:api/DefaultApi~deleteRealtimeLogConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a real-time log configuration.</p> <p>You cannot delete a real-time log configuration if it's attached to a cache behavior. First update your distributions to remove the real-time log configuration from all cache behaviors, then delete the real-time log configuration.</p> <p>To delete a real-time log configuration, you can provide the configuration's name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to delete.</p>
     * @param {module:model/DeleteRealtimeLogConfig20200531Request} deleteRealtimeLogConfig20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRealtimeLogConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRealtimeLogConfig20200531(deleteRealtimeLogConfig20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = deleteRealtimeLogConfig20200531Request;
      // verify the required parameter 'deleteRealtimeLogConfig20200531Request' is set
      if (deleteRealtimeLogConfig20200531Request === undefined || deleteRealtimeLogConfig20200531Request === null) {
        throw new Error("Missing the required parameter 'deleteRealtimeLogConfig20200531Request' when calling deleteRealtimeLogConfig20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/delete-realtime-log-config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResponseHeadersPolicy20200531 operation.
     * @callback module:api/DefaultApi~deleteResponseHeadersPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a response headers policy.</p> <p>You cannot delete a response headers policy if it's attached to a cache behavior. First update your distributions to remove the response headers policy from all cache behaviors, then delete the response headers policy.</p> <p>To delete a response headers policy, you must provide the policy's identifier and version. To get these values, you can use <code>ListResponseHeadersPolicies</code> or <code>GetResponseHeadersPolicy</code>.</p>
     * @param {String} id <p>The identifier for the response headers policy that you are deleting.</p> <p>To get the identifier, you can use <code>ListResponseHeadersPolicies</code>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] <p>The version of the response headers policy that you are deleting.</p> <p>The version is the response headers policy's <code>ETag</code> value, which you can get using <code>ListResponseHeadersPolicies</code>, <code>GetResponseHeadersPolicy</code>, or <code>GetResponseHeadersPolicyConfig</code>.</p>
     * @param {module:api/DefaultApi~deleteResponseHeadersPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteResponseHeadersPolicy20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteResponseHeadersPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/response-headers-policy/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStreamingDistribution20200531 operation.
     * @callback module:api/DefaultApi~deleteStreamingDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.</p> <p> <b>To delete an RTMP distribution using the CloudFront API</b>:</p> <ol> <li> <p>Disable the RTMP distribution.</p> </li> <li> <p>Submit a <code>GET Streaming Distribution Config</code> request to get the current configuration and the <code>Etag</code> header for the distribution. </p> </li> <li> <p>Update the XML document that was returned in the response to your <code>GET Streaming Distribution Config</code> request to change the value of <code>Enabled</code> to <code>false</code>.</p> </li> <li> <p>Submit a <code>PUT Streaming Distribution Config</code> request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP <code>If-Match</code> header to the value of the <code>ETag</code> header that CloudFront returned when you submitted the <code>GET Streaming Distribution Config</code> request in Step 2.</p> </li> <li> <p>Review the response to the <code>PUT Streaming Distribution Config</code> request to confirm that the distribution was successfully disabled.</p> </li> <li> <p>Submit a <code>GET Streaming Distribution Config</code> request to confirm that your changes have propagated. When propagation is complete, the value of <code>Status</code> is <code>Deployed</code>.</p> </li> <li> <p>Submit a <code>DELETE Streaming Distribution</code> request. Set the value of the HTTP <code>If-Match</code> header to the value of the <code>ETag</code> header that CloudFront returned when you submitted the <code>GET Streaming Distribution Config</code> request in Step 2.</p> </li> <li> <p>Review the response to your <code>DELETE Streaming Distribution</code> request to confirm that the distribution was successfully deleted.</p> </li> </ol> <p>For information about deleting a distribution using the CloudFront console, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\">Deleting a Distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {String} id The distribution ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when you disabled the streaming distribution. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~deleteStreamingDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStreamingDistribution20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStreamingDistribution20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/streaming-distribution/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFunction20200531 operation.
     * @callback module:api/DefaultApi~describeFunction20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFunctionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets configuration information and metadata about a CloudFront function, but not the function's code. To get a function's code, use <code>GetFunction</code>.</p> <p>To get configuration information and metadata about a function, you must provide the function's name and stage. To get these values, you can use <code>ListFunctions</code>.</p>
     * @param {String} name The name of the function that you are getting information about.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [stage] The function's stage, either <code>DEVELOPMENT</code> or <code>LIVE</code>.
     * @param {module:api/DefaultApi~describeFunction20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFunctionResult}
     */
    describeFunction20200531(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling describeFunction20200531");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
        'Stage': opts['stage']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeFunctionResult;
      return this.apiClient.callApi(
        '/2020-05-31/function/{Name}/describe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCachePolicy20200531 operation.
     * @callback module:api/DefaultApi~getCachePolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCachePolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a cache policy, including the following metadata:</p> <ul> <li> <p>The policy's identifier.</p> </li> <li> <p>The date and time when the policy was last modified.</p> </li> </ul> <p>To get a cache policy, you must provide the policy's identifier. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the cache policy is not attached to a cache behavior, you can get the identifier using <code>ListCachePolicies</code>.</p>
     * @param {String} id The unique identifier for the cache policy. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the cache policy is not attached to a cache behavior, you can get the identifier using <code>ListCachePolicies</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCachePolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCachePolicyResult}
     */
    getCachePolicy20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCachePolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetCachePolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/cache-policy/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCachePolicyConfig20200531 operation.
     * @callback module:api/DefaultApi~getCachePolicyConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCachePolicyConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a cache policy configuration.</p> <p>To get a cache policy configuration, you must provide the policy's identifier. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the cache policy is not attached to a cache behavior, you can get the identifier using <code>ListCachePolicies</code>.</p>
     * @param {String} id The unique identifier for the cache policy. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the cache policy is not attached to a cache behavior, you can get the identifier using <code>ListCachePolicies</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCachePolicyConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCachePolicyConfigResult}
     */
    getCachePolicyConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCachePolicyConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetCachePolicyConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/cache-policy/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudFrontOriginAccessIdentity20200531 operation.
     * @callback module:api/DefaultApi~getCloudFrontOriginAccessIdentity20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudFrontOriginAccessIdentityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information about an origin access identity.
     * @param {String} id The identity's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCloudFrontOriginAccessIdentity20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudFrontOriginAccessIdentityResult}
     */
    getCloudFrontOriginAccessIdentity20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentity20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetCloudFrontOriginAccessIdentityResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-identity/cloudfront/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudFrontOriginAccessIdentityConfig20200531 operation.
     * @callback module:api/DefaultApi~getCloudFrontOriginAccessIdentityConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudFrontOriginAccessIdentityConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the configuration information about an origin access identity.
     * @param {String} id The identity's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCloudFrontOriginAccessIdentityConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudFrontOriginAccessIdentityConfigResult}
     */
    getCloudFrontOriginAccessIdentityConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentityConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetCloudFrontOriginAccessIdentityConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-identity/cloudfront/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousDeploymentPolicy20200531 operation.
     * @callback module:api/DefaultApi~getContinuousDeploymentPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContinuousDeploymentPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a continuous deployment policy, including metadata (the policy's identifier and the date and time when the policy was last modified).
     * @param {String} id The identifier of the continuous deployment policy that you are getting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContinuousDeploymentPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContinuousDeploymentPolicyResult}
     */
    getContinuousDeploymentPolicy20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContinuousDeploymentPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetContinuousDeploymentPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/continuous-deployment-policy/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousDeploymentPolicyConfig20200531 operation.
     * @callback module:api/DefaultApi~getContinuousDeploymentPolicyConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContinuousDeploymentPolicyConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets configuration information about a continuous deployment policy.
     * @param {String} id The identifier of the continuous deployment policy whose configuration you are getting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContinuousDeploymentPolicyConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContinuousDeploymentPolicyConfigResult}
     */
    getContinuousDeploymentPolicyConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContinuousDeploymentPolicyConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetContinuousDeploymentPolicyConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/continuous-deployment-policy/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistribution20200531 operation.
     * @callback module:api/DefaultApi~getDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information about a distribution.
     * @param {String} id The distribution's ID. If the ID is empty, an empty distribution configuration is returned.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDistributionResult}
     */
    getDistribution20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistribution20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetDistributionResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistributionConfig20200531 operation.
     * @callback module:api/DefaultApi~getDistributionConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDistributionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the configuration information about a distribution.
     * @param {String} id The distribution's ID. If the ID is empty, an empty distribution configuration is returned.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDistributionConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDistributionConfigResult}
     */
    getDistributionConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistributionConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetDistributionConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldLevelEncryption20200531 operation.
     * @callback module:api/DefaultApi~getFieldLevelEncryption20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFieldLevelEncryptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the field-level encryption configuration information.
     * @param {String} id Request the ID for the field-level encryption configuration information.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFieldLevelEncryption20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFieldLevelEncryptionResult}
     */
    getFieldLevelEncryption20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFieldLevelEncryption20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetFieldLevelEncryptionResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldLevelEncryptionConfig20200531 operation.
     * @callback module:api/DefaultApi~getFieldLevelEncryptionConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFieldLevelEncryptionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the field-level encryption configuration information.
     * @param {String} id Request the ID for the field-level encryption configuration information.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFieldLevelEncryptionConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFieldLevelEncryptionConfigResult}
     */
    getFieldLevelEncryptionConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFieldLevelEncryptionConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetFieldLevelEncryptionConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldLevelEncryptionProfile20200531 operation.
     * @callback module:api/DefaultApi~getFieldLevelEncryptionProfile20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFieldLevelEncryptionProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the field-level encryption profile information.
     * @param {String} id Get the ID for the field-level encryption profile information.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFieldLevelEncryptionProfile20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFieldLevelEncryptionProfileResult}
     */
    getFieldLevelEncryptionProfile20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFieldLevelEncryptionProfile20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetFieldLevelEncryptionProfileResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption-profile/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldLevelEncryptionProfileConfig20200531 operation.
     * @callback module:api/DefaultApi~getFieldLevelEncryptionProfileConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFieldLevelEncryptionProfileConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the field-level encryption profile configuration information.
     * @param {String} id Get the ID for the field-level encryption profile configuration information.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFieldLevelEncryptionProfileConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFieldLevelEncryptionProfileConfigResult}
     */
    getFieldLevelEncryptionProfileConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFieldLevelEncryptionProfileConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetFieldLevelEncryptionProfileConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption-profile/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFunction20200531 operation.
     * @callback module:api/DefaultApi~getFunction20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFunctionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the code of a CloudFront function. To get configuration information and metadata about a function, use <code>DescribeFunction</code>.</p> <p>To get a function's code, you must provide the function's name and stage. To get these values, you can use <code>ListFunctions</code>.</p>
     * @param {String} name The name of the function whose code you are getting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [stage] The function's stage, either <code>DEVELOPMENT</code> or <code>LIVE</code>.
     * @param {module:api/DefaultApi~getFunction20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFunctionResult}
     */
    getFunction20200531(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getFunction20200531");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
        'Stage': opts['stage']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetFunctionResult;
      return this.apiClient.callApi(
        '/2020-05-31/function/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvalidation20200531 operation.
     * @callback module:api/DefaultApi~getInvalidation20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInvalidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information about an invalidation.
     * @param {String} distributionId The distribution's ID.
     * @param {String} id The identifier for the invalidation request, for example, <code>IDFDVBD632BHDS5</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInvalidation20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInvalidationResult}
     */
    getInvalidation20200531(distributionId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling getInvalidation20200531");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvalidation20200531");
      }

      let pathParams = {
        'DistributionId': distributionId,
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetInvalidationResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{DistributionId}/invalidation/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeyGroup20200531 operation.
     * @callback module:api/DefaultApi~getKeyGroup20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetKeyGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a key group, including the date and time when the key group was last modified.</p> <p>To get a key group, you must provide the key group's identifier. If the key group is referenced in a distribution's cache behavior, you can get the key group's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the key group is not referenced in a cache behavior, you can get the identifier using <code>ListKeyGroups</code>.</p>
     * @param {String} id The identifier of the key group that you are getting. To get the identifier, use <code>ListKeyGroups</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getKeyGroup20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetKeyGroupResult}
     */
    getKeyGroup20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKeyGroup20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetKeyGroupResult;
      return this.apiClient.callApi(
        '/2020-05-31/key-group/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeyGroupConfig20200531 operation.
     * @callback module:api/DefaultApi~getKeyGroupConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetKeyGroupConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a key group configuration.</p> <p>To get a key group configuration, you must provide the key group's identifier. If the key group is referenced in a distribution's cache behavior, you can get the key group's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the key group is not referenced in a cache behavior, you can get the identifier using <code>ListKeyGroups</code>.</p>
     * @param {String} id The identifier of the key group whose configuration you are getting. To get the identifier, use <code>ListKeyGroups</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getKeyGroupConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetKeyGroupConfigResult}
     */
    getKeyGroupConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKeyGroupConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetKeyGroupConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/key-group/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMonitoringSubscription20200531 operation.
     * @callback module:api/DefaultApi~getMonitoringSubscription20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMonitoringSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about whether additional CloudWatch metrics are enabled for the specified CloudFront distribution.
     * @param {String} distributionId The ID of the distribution that you are getting metrics information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMonitoringSubscription20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMonitoringSubscriptionResult}
     */
    getMonitoringSubscription20200531(distributionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling getMonitoringSubscription20200531");
      }

      let pathParams = {
        'DistributionId': distributionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetMonitoringSubscriptionResult;
      return this.apiClient.callApi(
        '/2020-05-31/distributions/{DistributionId}/monitoring-subscription/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOriginAccessControl20200531 operation.
     * @callback module:api/DefaultApi~getOriginAccessControl20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOriginAccessControlResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a CloudFront origin access control, including its unique identifier.
     * @param {String} id The unique identifier of the origin access control.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOriginAccessControl20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOriginAccessControlResult}
     */
    getOriginAccessControl20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOriginAccessControl20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetOriginAccessControlResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-control/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOriginAccessControlConfig20200531 operation.
     * @callback module:api/DefaultApi~getOriginAccessControlConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOriginAccessControlConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a CloudFront origin access control configuration.
     * @param {String} id The unique identifier of the origin access control.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOriginAccessControlConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOriginAccessControlConfigResult}
     */
    getOriginAccessControlConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOriginAccessControlConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetOriginAccessControlConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-control/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOriginRequestPolicy20200531 operation.
     * @callback module:api/DefaultApi~getOriginRequestPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOriginRequestPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets an origin request policy, including the following metadata:</p> <ul> <li> <p>The policy's identifier.</p> </li> <li> <p>The date and time when the policy was last modified.</p> </li> </ul> <p>To get an origin request policy, you must provide the policy's identifier. If the origin request policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the origin request policy is not attached to a cache behavior, you can get the identifier using <code>ListOriginRequestPolicies</code>.</p>
     * @param {String} id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the origin request policy is not attached to a cache behavior, you can get the identifier using <code>ListOriginRequestPolicies</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOriginRequestPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOriginRequestPolicyResult}
     */
    getOriginRequestPolicy20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOriginRequestPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetOriginRequestPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-request-policy/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOriginRequestPolicyConfig20200531 operation.
     * @callback module:api/DefaultApi~getOriginRequestPolicyConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOriginRequestPolicyConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets an origin request policy configuration.</p> <p>To get an origin request policy configuration, you must provide the policy's identifier. If the origin request policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the origin request policy is not attached to a cache behavior, you can get the identifier using <code>ListOriginRequestPolicies</code>.</p>
     * @param {String} id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the origin request policy is not attached to a cache behavior, you can get the identifier using <code>ListOriginRequestPolicies</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOriginRequestPolicyConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOriginRequestPolicyConfigResult}
     */
    getOriginRequestPolicyConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOriginRequestPolicyConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetOriginRequestPolicyConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-request-policy/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicKey20200531 operation.
     * @callback module:api/DefaultApi~getPublicKey20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicKeyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a public key.
     * @param {String} id The identifier of the public key you are getting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPublicKey20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicKeyResult}
     */
    getPublicKey20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicKey20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetPublicKeyResult;
      return this.apiClient.callApi(
        '/2020-05-31/public-key/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicKeyConfig20200531 operation.
     * @callback module:api/DefaultApi~getPublicKeyConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicKeyConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a public key configuration.
     * @param {String} id The identifier of the public key whose configuration you are getting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPublicKeyConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicKeyConfigResult}
     */
    getPublicKeyConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicKeyConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetPublicKeyConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/public-key/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRealtimeLogConfig20200531 operation.
     * @callback module:api/DefaultApi~getRealtimeLogConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRealtimeLogConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a real-time log configuration.</p> <p>To get a real-time log configuration, you can provide the configuration's name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to get.</p>
     * @param {module:model/GetRealtimeLogConfig20200531Request} getRealtimeLogConfig20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRealtimeLogConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRealtimeLogConfigResult}
     */
    getRealtimeLogConfig20200531(getRealtimeLogConfig20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = getRealtimeLogConfig20200531Request;
      // verify the required parameter 'getRealtimeLogConfig20200531Request' is set
      if (getRealtimeLogConfig20200531Request === undefined || getRealtimeLogConfig20200531Request === null) {
        throw new Error("Missing the required parameter 'getRealtimeLogConfig20200531Request' when calling getRealtimeLogConfig20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = GetRealtimeLogConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/get-realtime-log-config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResponseHeadersPolicy20200531 operation.
     * @callback module:api/DefaultApi~getResponseHeadersPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResponseHeadersPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a response headers policy, including metadata (the policy's identifier and the date and time when the policy was last modified).</p> <p>To get a response headers policy, you must provide the policy's identifier. If the response headers policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the response headers policy is not attached to a cache behavior, you can get the identifier using <code>ListResponseHeadersPolicies</code>.</p>
     * @param {String} id <p>The identifier for the response headers policy.</p> <p>If the response headers policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the response headers policy is not attached to a cache behavior, you can get the identifier using <code>ListResponseHeadersPolicies</code>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResponseHeadersPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResponseHeadersPolicyResult}
     */
    getResponseHeadersPolicy20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResponseHeadersPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetResponseHeadersPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/response-headers-policy/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResponseHeadersPolicyConfig20200531 operation.
     * @callback module:api/DefaultApi~getResponseHeadersPolicyConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResponseHeadersPolicyConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a response headers policy configuration.</p> <p>To get a response headers policy configuration, you must provide the policy's identifier. If the response headers policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the response headers policy is not attached to a cache behavior, you can get the identifier using <code>ListResponseHeadersPolicies</code>.</p>
     * @param {String} id <p>The identifier for the response headers policy.</p> <p>If the response headers policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the response headers policy is not attached to a cache behavior, you can get the identifier using <code>ListResponseHeadersPolicies</code>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResponseHeadersPolicyConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResponseHeadersPolicyConfigResult}
     */
    getResponseHeadersPolicyConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResponseHeadersPolicyConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetResponseHeadersPolicyConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/response-headers-policy/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingDistribution20200531 operation.
     * @callback module:api/DefaultApi~getStreamingDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStreamingDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param {String} id The streaming distribution's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStreamingDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStreamingDistributionResult}
     */
    getStreamingDistribution20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStreamingDistribution20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetStreamingDistributionResult;
      return this.apiClient.callApi(
        '/2020-05-31/streaming-distribution/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingDistributionConfig20200531 operation.
     * @callback module:api/DefaultApi~getStreamingDistributionConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStreamingDistributionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the configuration information about a streaming distribution.
     * @param {String} id The streaming distribution's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStreamingDistributionConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStreamingDistributionConfigResult}
     */
    getStreamingDistributionConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStreamingDistributionConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetStreamingDistributionConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/streaming-distribution/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCachePolicies20200531 operation.
     * @callback module:api/DefaultApi~listCachePolicies20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCachePoliciesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of cache policies.</p> <p>You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [type] <p>A filter to return only the specified kinds of cache policies. Valid values are:</p> <ul> <li> <p> <code>managed</code> – Returns only the managed policies created by Amazon Web Services.</p> </li> <li> <p> <code>custom</code> – Returns only the custom policies created in your Amazon Web Services account.</p> </li> </ul>
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of cache policies. The response includes cache policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of cache policies that you want in the response.
     * @param {module:api/DefaultApi~listCachePolicies20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCachePoliciesResult}
     */
    listCachePolicies20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Type': opts['type'],
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListCachePoliciesResult;
      return this.apiClient.callApi(
        '/2020-05-31/cache-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCloudFrontOriginAccessIdentities20200531 operation.
     * @callback module:api/DefaultApi~listCloudFrontOriginAccessIdentities20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCloudFrontOriginAccessIdentitiesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists origin access identities.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last identity on that page).
     * @param {String} [maxItems] The maximum number of origin access identities you want in the response body.
     * @param {module:api/DefaultApi~listCloudFrontOriginAccessIdentities20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCloudFrontOriginAccessIdentitiesResult}
     */
    listCloudFrontOriginAccessIdentities20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListCloudFrontOriginAccessIdentitiesResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-identity/cloudfront', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConflictingAliases20200531 operation.
     * @callback module:api/DefaultApi~listConflictingAliases20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConflictingAliasesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of aliases (also called CNAMEs or alternate domain names) that conflict or overlap with the provided alias, and the associated CloudFront distributions and Amazon Web Services accounts for each conflicting alias. In the returned list, the distribution and account IDs are partially hidden, which allows you to identify the distributions and accounts that you own, but helps to protect the information of ones that you don't own.</p> <p>Use this operation to find aliases that are in use in CloudFront that conflict or overlap with the provided alias. For example, if you provide <code>www.example.com</code> as input, the returned list can include <code>www.example.com</code> and the overlapping wildcard alternate domain name (<code>*.example.com</code>), if they exist. If you provide <code>*.example.com</code> as input, the returned list can include <code>*.example.com</code> and any alternate domain names covered by that wildcard (for example, <code>www.example.com</code>, <code>test.example.com</code>, <code>dev.example.com</code>, and so on), if they exist.</p> <p>To list conflicting aliases, you provide the alias to search and the ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. For more information, including how to set up the distribution and certificate, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\">Moving an alternate domain name to a different distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {String} distributionId The ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias.
     * @param {String} alias The alias (also called a CNAME) to search for conflicting aliases.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in the list of conflicting aliases. The response includes conflicting aliases in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {Number} [maxItems] The maximum number of conflicting aliases that you want in the response.
     * @param {module:api/DefaultApi~listConflictingAliases20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConflictingAliasesResult}
     */
    listConflictingAliases20200531(distributionId, alias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling listConflictingAliases20200531");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling listConflictingAliases20200531");
      }

      let pathParams = {
      };
      let queryParams = {
        'DistributionId': distributionId,
        'Alias': alias,
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListConflictingAliasesResult;
      return this.apiClient.callApi(
        '/2020-05-31/conflicting-alias#DistributionId&Alias', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContinuousDeploymentPolicies20200531 operation.
     * @callback module:api/DefaultApi~listContinuousDeploymentPolicies20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContinuousDeploymentPoliciesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of the continuous deployment policies in your Amazon Web Services account.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of continuous deployment policies. The response includes policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of continuous deployment policies that you want returned in the response.
     * @param {module:api/DefaultApi~listContinuousDeploymentPolicies20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContinuousDeploymentPoliciesResult}
     */
    listContinuousDeploymentPolicies20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListContinuousDeploymentPoliciesResult;
      return this.apiClient.callApi(
        '/2020-05-31/continuous-deployment-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributions20200531 operation.
     * @callback module:api/DefaultApi~listDistributions20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List CloudFront distributions.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last distribution on that page).
     * @param {String} [maxItems] The maximum number of distributions you want in the response body.
     * @param {module:api/DefaultApi~listDistributions20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsResult}
     */
    listDistributions20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributionsByCachePolicyId20200531 operation.
     * @callback module:api/DefaultApi~listDistributionsByCachePolicyId20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsByCachePolicyIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of distribution IDs for distributions that have a cache behavior that's associated with the specified cache policy.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {String} cachePolicyId The ID of the cache policy whose associated distribution IDs you want to list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of distribution IDs that you want in the response.
     * @param {module:api/DefaultApi~listDistributionsByCachePolicyId20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsByCachePolicyIdResult}
     */
    listDistributionsByCachePolicyId20200531(cachePolicyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cachePolicyId' is set
      if (cachePolicyId === undefined || cachePolicyId === null) {
        throw new Error("Missing the required parameter 'cachePolicyId' when calling listDistributionsByCachePolicyId20200531");
      }

      let pathParams = {
        'CachePolicyId': cachePolicyId
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsByCachePolicyIdResult;
      return this.apiClient.callApi(
        '/2020-05-31/distributionsByCachePolicyId/{CachePolicyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributionsByKeyGroup20200531 operation.
     * @callback module:api/DefaultApi~listDistributionsByKeyGroup20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsByKeyGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of distribution IDs for distributions that have a cache behavior that references the specified key group.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {String} keyGroupId The ID of the key group whose associated distribution IDs you are listing.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of distribution IDs that you want in the response.
     * @param {module:api/DefaultApi~listDistributionsByKeyGroup20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsByKeyGroupResult}
     */
    listDistributionsByKeyGroup20200531(keyGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyGroupId' is set
      if (keyGroupId === undefined || keyGroupId === null) {
        throw new Error("Missing the required parameter 'keyGroupId' when calling listDistributionsByKeyGroup20200531");
      }

      let pathParams = {
        'KeyGroupId': keyGroupId
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsByKeyGroupResult;
      return this.apiClient.callApi(
        '/2020-05-31/distributionsByKeyGroupId/{KeyGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributionsByOriginRequestPolicyId20200531 operation.
     * @callback module:api/DefaultApi~listDistributionsByOriginRequestPolicyId20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsByOriginRequestPolicyIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of distribution IDs for distributions that have a cache behavior that's associated with the specified origin request policy.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {String} originRequestPolicyId The ID of the origin request policy whose associated distribution IDs you want to list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of distribution IDs that you want in the response.
     * @param {module:api/DefaultApi~listDistributionsByOriginRequestPolicyId20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsByOriginRequestPolicyIdResult}
     */
    listDistributionsByOriginRequestPolicyId20200531(originRequestPolicyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'originRequestPolicyId' is set
      if (originRequestPolicyId === undefined || originRequestPolicyId === null) {
        throw new Error("Missing the required parameter 'originRequestPolicyId' when calling listDistributionsByOriginRequestPolicyId20200531");
      }

      let pathParams = {
        'OriginRequestPolicyId': originRequestPolicyId
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsByOriginRequestPolicyIdResult;
      return this.apiClient.callApi(
        '/2020-05-31/distributionsByOriginRequestPolicyId/{OriginRequestPolicyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributionsByRealtimeLogConfig20200531 operation.
     * @callback module:api/DefaultApi~listDistributionsByRealtimeLogConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsByRealtimeLogConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of distributions that have a cache behavior that's associated with the specified real-time log configuration.</p> <p>You can specify the real-time log configuration by its name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to list distributions for.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {module:model/ListDistributionsByRealtimeLogConfig20200531Request} listDistributionsByRealtimeLogConfig20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listDistributionsByRealtimeLogConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsByRealtimeLogConfigResult}
     */
    listDistributionsByRealtimeLogConfig20200531(listDistributionsByRealtimeLogConfig20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = listDistributionsByRealtimeLogConfig20200531Request;
      // verify the required parameter 'listDistributionsByRealtimeLogConfig20200531Request' is set
      if (listDistributionsByRealtimeLogConfig20200531Request === undefined || listDistributionsByRealtimeLogConfig20200531Request === null) {
        throw new Error("Missing the required parameter 'listDistributionsByRealtimeLogConfig20200531Request' when calling listDistributionsByRealtimeLogConfig20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsByRealtimeLogConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/distributionsByRealtimeLogConfig/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributionsByResponseHeadersPolicyId20200531 operation.
     * @callback module:api/DefaultApi~listDistributionsByResponseHeadersPolicyId20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsByResponseHeadersPolicyIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of distribution IDs for distributions that have a cache behavior that's associated with the specified response headers policy.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {String} responseHeadersPolicyId The ID of the response headers policy whose associated distribution IDs you want to list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of distribution IDs that you want to get in the response.
     * @param {module:api/DefaultApi~listDistributionsByResponseHeadersPolicyId20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsByResponseHeadersPolicyIdResult}
     */
    listDistributionsByResponseHeadersPolicyId20200531(responseHeadersPolicyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'responseHeadersPolicyId' is set
      if (responseHeadersPolicyId === undefined || responseHeadersPolicyId === null) {
        throw new Error("Missing the required parameter 'responseHeadersPolicyId' when calling listDistributionsByResponseHeadersPolicyId20200531");
      }

      let pathParams = {
        'ResponseHeadersPolicyId': responseHeadersPolicyId
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsByResponseHeadersPolicyIdResult;
      return this.apiClient.callApi(
        '/2020-05-31/distributionsByResponseHeadersPolicyId/{ResponseHeadersPolicyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributionsByWebACLId20200531 operation.
     * @callback module:api/DefaultApi~listDistributionsByWebACLId20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsByWebACLIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the distributions that are associated with a specified WAF web ACL.
     * @param {String} webACLId The ID of the WAF web ACL that you want to list the associated distributions. If you specify \"null\" for the ID, the request returns a list of the distributions that aren't associated with a web ACL.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use <code>Marker</code> and <code>MaxItems</code> to control pagination of results. If you have more than <code>MaxItems</code> distributions that satisfy the request, the response includes a <code>NextMarker</code> element. To get the next page of results, submit another request. For the value of <code>Marker</code>, specify the value of <code>NextMarker</code> from the last response. (For the first request, omit <code>Marker</code>.)
     * @param {String} [maxItems] The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100.
     * @param {module:api/DefaultApi~listDistributionsByWebACLId20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsByWebACLIdResult}
     */
    listDistributionsByWebACLId20200531(webACLId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webACLId' is set
      if (webACLId === undefined || webACLId === null) {
        throw new Error("Missing the required parameter 'webACLId' when calling listDistributionsByWebACLId20200531");
      }

      let pathParams = {
        'WebACLId': webACLId
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsByWebACLIdResult;
      return this.apiClient.callApi(
        '/2020-05-31/distributionsByWebACLId/{WebACLId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFieldLevelEncryptionConfigs20200531 operation.
     * @callback module:api/DefaultApi~listFieldLevelEncryptionConfigs20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFieldLevelEncryptionConfigsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last configuration on that page).
     * @param {String} [maxItems] The maximum number of field-level encryption configurations you want in the response body.
     * @param {module:api/DefaultApi~listFieldLevelEncryptionConfigs20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFieldLevelEncryptionConfigsResult}
     */
    listFieldLevelEncryptionConfigs20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListFieldLevelEncryptionConfigsResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFieldLevelEncryptionProfiles20200531 operation.
     * @callback module:api/DefaultApi~listFieldLevelEncryptionProfiles20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFieldLevelEncryptionProfilesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last profile on that page).
     * @param {String} [maxItems] The maximum number of field-level encryption profiles you want in the response body. 
     * @param {module:api/DefaultApi~listFieldLevelEncryptionProfiles20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFieldLevelEncryptionProfilesResult}
     */
    listFieldLevelEncryptionProfiles20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListFieldLevelEncryptionProfilesResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption-profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFunctions20200531 operation.
     * @callback module:api/DefaultApi~listFunctions20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFunctionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of all CloudFront functions in your Amazon Web Services account.</p> <p>You can optionally apply a filter to return only the functions that are in the specified stage, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of functions that you want in the response.
     * @param {module:model/String} [stage] An optional filter to return only the functions that are in the specified stage, either <code>DEVELOPMENT</code> or <code>LIVE</code>.
     * @param {module:api/DefaultApi~listFunctions20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFunctionsResult}
     */
    listFunctions20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems'],
        'Stage': opts['stage']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListFunctionsResult;
      return this.apiClient.callApi(
        '/2020-05-31/function', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInvalidations20200531 operation.
     * @callback module:api/DefaultApi~listInvalidations20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInvalidationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists invalidation batches.
     * @param {String} distributionId The distribution's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response. This value is the same as the ID of the last invalidation batch on that page.
     * @param {String} [maxItems] The maximum number of invalidation batches that you want in the response body.
     * @param {module:api/DefaultApi~listInvalidations20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInvalidationsResult}
     */
    listInvalidations20200531(distributionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling listInvalidations20200531");
      }

      let pathParams = {
        'DistributionId': distributionId
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListInvalidationsResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{DistributionId}/invalidation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listKeyGroups20200531 operation.
     * @callback module:api/DefaultApi~listKeyGroups20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListKeyGroupsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of key groups.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of key groups. The response includes key groups in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of key groups that you want in the response.
     * @param {module:api/DefaultApi~listKeyGroups20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListKeyGroupsResult}
     */
    listKeyGroups20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListKeyGroupsResult;
      return this.apiClient.callApi(
        '/2020-05-31/key-group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOriginAccessControls20200531 operation.
     * @callback module:api/DefaultApi~listOriginAccessControls20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOriginAccessControlsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the list of CloudFront origin access controls in this Amazon Web Services account.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send another request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the next request.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of origin access controls. The response includes the items in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of origin access controls that you want in the response.
     * @param {module:api/DefaultApi~listOriginAccessControls20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOriginAccessControlsResult}
     */
    listOriginAccessControls20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListOriginAccessControlsResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-control', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOriginRequestPolicies20200531 operation.
     * @callback module:api/DefaultApi~listOriginRequestPolicies20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOriginRequestPoliciesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of origin request policies.</p> <p>You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [type] <p>A filter to return only the specified kinds of origin request policies. Valid values are:</p> <ul> <li> <p> <code>managed</code> – Returns only the managed policies created by Amazon Web Services.</p> </li> <li> <p> <code>custom</code> – Returns only the custom policies created in your Amazon Web Services account.</p> </li> </ul>
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of origin request policies that you want in the response.
     * @param {module:api/DefaultApi~listOriginRequestPolicies20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOriginRequestPoliciesResult}
     */
    listOriginRequestPolicies20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Type': opts['type'],
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListOriginRequestPoliciesResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-request-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPublicKeys20200531 operation.
     * @callback module:api/DefaultApi~listPublicKeys20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPublicKeysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all public keys that have been added to CloudFront for this account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last public key on that page).
     * @param {String} [maxItems] The maximum number of public keys you want in the response body.
     * @param {module:api/DefaultApi~listPublicKeys20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPublicKeysResult}
     */
    listPublicKeys20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListPublicKeysResult;
      return this.apiClient.callApi(
        '/2020-05-31/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRealtimeLogConfigs20200531 operation.
     * @callback module:api/DefaultApi~listRealtimeLogConfigs20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRealtimeLogConfigsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of real-time log configurations.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxItems] The maximum number of real-time log configurations that you want in the response.
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of real-time log configurations. The response includes real-time log configurations in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {module:api/DefaultApi~listRealtimeLogConfigs20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRealtimeLogConfigsResult}
     */
    listRealtimeLogConfigs20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxItems': opts['maxItems'],
        'Marker': opts['marker']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListRealtimeLogConfigsResult;
      return this.apiClient.callApi(
        '/2020-05-31/realtime-log-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResponseHeadersPolicies20200531 operation.
     * @callback module:api/DefaultApi~listResponseHeadersPolicies20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseHeadersPoliciesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of response headers policies.</p> <p>You can optionally apply a filter to get only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.</p> <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [type] <p>A filter to get only the specified kind of response headers policies. Valid values are:</p> <ul> <li> <p> <code>managed</code> – Gets only the managed policies created by Amazon Web Services.</p> </li> <li> <p> <code>custom</code> – Gets only the custom policies created in your Amazon Web Services account.</p> </li> </ul>
     * @param {String} [marker] Use this field when paginating results to indicate where to begin in your list of response headers policies. The response includes response headers policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.
     * @param {String} [maxItems] The maximum number of response headers policies that you want to get in the response.
     * @param {module:api/DefaultApi~listResponseHeadersPolicies20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseHeadersPoliciesResult}
     */
    listResponseHeadersPolicies20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Type': opts['type'],
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListResponseHeadersPoliciesResult;
      return this.apiClient.callApi(
        '/2020-05-31/response-headers-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStreamingDistributions20200531 operation.
     * @callback module:api/DefaultApi~listStreamingDistributions20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStreamingDistributionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List streaming distributions.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] The value that you provided for the <code>Marker</code> request parameter.
     * @param {String} [maxItems] The value that you provided for the <code>MaxItems</code> request parameter.
     * @param {module:api/DefaultApi~listStreamingDistributions20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStreamingDistributionsResult}
     */
    listStreamingDistributions20200531(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListStreamingDistributionsResult;
      return this.apiClient.callApi(
        '/2020-05-31/streaming-distribution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource20200531 operation.
     * @callback module:api/DefaultApi~listTagsForResource20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags for a CloudFront resource.
     * @param {String} resource An ARN of a CloudFront resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResource20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResult}
     */
    listTagsForResource20200531(resource, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling listTagsForResource20200531");
      }

      let pathParams = {
      };
      let queryParams = {
        'Resource': resource
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListTagsForResourceResult;
      return this.apiClient.callApi(
        '/2020-05-31/tagging#Resource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishFunction20200531 operation.
     * @callback module:api/DefaultApi~publishFunction20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PublishFunctionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Publishes a CloudFront function by copying the function code from the <code>DEVELOPMENT</code> stage to <code>LIVE</code>. This automatically updates all cache behaviors that are using this function to use the newly published copy in the <code>LIVE</code> stage.</p> <p>When a function is published to the <code>LIVE</code> stage, you can attach the function to a distribution's cache behavior, using the function's Amazon Resource Name (ARN).</p> <p>To publish a function, you must provide the function's name and version (<code>ETag</code> value). To get these values, you can use <code>ListFunctions</code> and <code>DescribeFunction</code>.</p>
     * @param {String} name The name of the function that you are publishing.
     * @param {String} ifMatch The current version (<code>ETag</code> value) of the function that you are publishing, which you can get using <code>DescribeFunction</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~publishFunction20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublishFunctionResult}
     */
    publishFunction20200531(name, ifMatch, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling publishFunction20200531");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling publishFunction20200531");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = PublishFunctionResult;
      return this.apiClient.callApi(
        '/2020-05-31/function/{Name}/publish#If-Match', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource20200531 operation.
     * @callback module:api/DefaultApi~tagResource20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to a CloudFront resource.
     * @param {String} resource An ARN of a CloudFront resource.
     * @param {module:model/String} operation 
     * @param {module:model/TagResource20200531Request} tagResource20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResource20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource20200531(resource, operation, tagResource20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = tagResource20200531Request;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling tagResource20200531");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling tagResource20200531");
      }
      // verify the required parameter 'tagResource20200531Request' is set
      if (tagResource20200531Request === undefined || tagResource20200531Request === null) {
        throw new Error("Missing the required parameter 'tagResource20200531Request' when calling tagResource20200531");
      }

      let pathParams = {
      };
      let queryParams = {
        'Resource': resource,
        'Operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/tagging#Operation=Tag&Resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testFunction20200531 operation.
     * @callback module:api/DefaultApi~testFunction20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TestFunctionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Tests a CloudFront function.</p> <p>To test a function, you provide an <i>event object</i> that represents an HTTP request or response that your CloudFront distribution could receive in production. CloudFront runs the function, passing it the event object that you provided, and returns the function's result (the modified event object) in the response. The response also contains function logs and error messages, if any exist. For more information about testing functions, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function\">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <p>To test a function, you provide the function's name and version (<code>ETag</code> value) along with the event object. To get the function's name and version, you can use <code>ListFunctions</code> and <code>DescribeFunction</code>.</p>
     * @param {String} name The name of the function that you are testing.
     * @param {String} ifMatch The current version (<code>ETag</code> value) of the function that you are testing, which you can get using <code>DescribeFunction</code>.
     * @param {module:model/TestFunction20200531Request} testFunction20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~testFunction20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestFunctionResult}
     */
    testFunction20200531(name, ifMatch, testFunction20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = testFunction20200531Request;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling testFunction20200531");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling testFunction20200531");
      }
      // verify the required parameter 'testFunction20200531Request' is set
      if (testFunction20200531Request === undefined || testFunction20200531Request === null) {
        throw new Error("Missing the required parameter 'testFunction20200531Request' when calling testFunction20200531");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = TestFunctionResult;
      return this.apiClient.callApi(
        '/2020-05-31/function/{Name}/test#If-Match', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource20200531 operation.
     * @callback module:api/DefaultApi~untagResource20200531Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove tags from a CloudFront resource.
     * @param {String} resource An ARN of a CloudFront resource.
     * @param {module:model/String} operation 
     * @param {module:model/UntagResource20200531Request} untagResource20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResource20200531Callback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource20200531(resource, operation, untagResource20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = untagResource20200531Request;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling untagResource20200531");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling untagResource20200531");
      }
      // verify the required parameter 'untagResource20200531Request' is set
      if (untagResource20200531Request === undefined || untagResource20200531Request === null) {
        throw new Error("Missing the required parameter 'untagResource20200531Request' when calling untagResource20200531");
      }

      let pathParams = {
      };
      let queryParams = {
        'Resource': resource,
        'Operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2020-05-31/tagging#Operation=Untag&Resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCachePolicy20200531 operation.
     * @callback module:api/DefaultApi~updateCachePolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCachePolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a cache policy configuration.</p> <p>When you update a cache policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a cache policy configuration:</p> <ol> <li> <p>Use <code>GetCachePolicyConfig</code> to get the current configuration.</p> </li> <li> <p>Locally modify the fields in the cache policy configuration that you want to update.</p> </li> <li> <p>Call <code>UpdateCachePolicy</code> by providing the entire cache policy configuration, including the fields that you modified and those that you didn't.</p> </li> </ol>
     * @param {String} id The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior's <code>CachePolicyId</code> field in the response to <code>GetDistributionConfig</code>.
     * @param {module:model/CreateCachePolicy20200531Request} createCachePolicy20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The version of the cache policy that you are updating. The version is returned in the cache policy's <code>ETag</code> field in the response to <code>GetCachePolicyConfig</code>.
     * @param {module:api/DefaultApi~updateCachePolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCachePolicyResult}
     */
    updateCachePolicy20200531(id, createCachePolicy20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createCachePolicy20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCachePolicy20200531");
      }
      // verify the required parameter 'createCachePolicy20200531Request' is set
      if (createCachePolicy20200531Request === undefined || createCachePolicy20200531Request === null) {
        throw new Error("Missing the required parameter 'createCachePolicy20200531Request' when calling updateCachePolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateCachePolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/cache-policy/{Id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCloudFrontOriginAccessIdentity20200531 operation.
     * @callback module:api/DefaultApi~updateCloudFrontOriginAccessIdentity20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCloudFrontOriginAccessIdentityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an origin access identity.
     * @param {String} id The identity's id.
     * @param {module:model/CreateCloudFrontOriginAccessIdentity20200531Request} createCloudFrontOriginAccessIdentity20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the identity's configuration. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updateCloudFrontOriginAccessIdentity20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCloudFrontOriginAccessIdentityResult}
     */
    updateCloudFrontOriginAccessIdentity20200531(id, createCloudFrontOriginAccessIdentity20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createCloudFrontOriginAccessIdentity20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloudFrontOriginAccessIdentity20200531");
      }
      // verify the required parameter 'createCloudFrontOriginAccessIdentity20200531Request' is set
      if (createCloudFrontOriginAccessIdentity20200531Request === undefined || createCloudFrontOriginAccessIdentity20200531Request === null) {
        throw new Error("Missing the required parameter 'createCloudFrontOriginAccessIdentity20200531Request' when calling updateCloudFrontOriginAccessIdentity20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateCloudFrontOriginAccessIdentityResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-identity/cloudfront/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContinuousDeploymentPolicy20200531 operation.
     * @callback module:api/DefaultApi~updateContinuousDeploymentPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateContinuousDeploymentPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a continuous deployment policy. You can update a continuous deployment policy to enable or disable it, to change the percentage of traffic that it sends to the staging distribution, or to change the staging distribution that it sends traffic to.</p> <p>When you update a continuous deployment policy configuration, all the fields are updated with the values that are provided in the request. You cannot update some fields independent of others. To update a continuous deployment policy configuration:</p> <ol> <li> <p>Use <code>GetContinuousDeploymentPolicyConfig</code> to get the current configuration.</p> </li> <li> <p>Locally modify the fields in the continuous deployment policy configuration that you want to update.</p> </li> <li> <p>Use <code>UpdateContinuousDeploymentPolicy</code>, providing the entire continuous deployment policy configuration, including the fields that you modified and those that you didn't.</p> </li> </ol>
     * @param {String} id The identifier of the continuous deployment policy that you are updating.
     * @param {module:model/CreateContinuousDeploymentPolicy20200531Request} createContinuousDeploymentPolicy20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The current version (<code>ETag</code> value) of the continuous deployment policy that you are updating.
     * @param {module:api/DefaultApi~updateContinuousDeploymentPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateContinuousDeploymentPolicyResult}
     */
    updateContinuousDeploymentPolicy20200531(id, createContinuousDeploymentPolicy20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createContinuousDeploymentPolicy20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateContinuousDeploymentPolicy20200531");
      }
      // verify the required parameter 'createContinuousDeploymentPolicy20200531Request' is set
      if (createContinuousDeploymentPolicy20200531Request === undefined || createContinuousDeploymentPolicy20200531Request === null) {
        throw new Error("Missing the required parameter 'createContinuousDeploymentPolicy20200531Request' when calling updateContinuousDeploymentPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateContinuousDeploymentPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/continuous-deployment-policy/{Id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDistribution20200531 operation.
     * @callback module:api/DefaultApi~updateDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the configuration for a CloudFront distribution.</p> <p>The update process includes getting the current distribution configuration, updating it to make your changes, and then submitting an <code>UpdateDistribution</code> request to make the updates.</p> <p> <b>To update a web distribution using the CloudFront API</b> </p> <ol> <li> <p>Use <code>GetDistributionConfig</code> to get the current configuration, including the version identifier (<code>ETag</code>).</p> </li> <li> <p>Update the distribution configuration that was returned in the response. Note the following important requirements and restrictions:</p> <ul> <li> <p>You must rename the <code>ETag</code> field to <code>IfMatch</code>, leaving the value unchanged. (Set the value of <code>IfMatch</code> to the value of <code>ETag</code>, then remove the <code>ETag</code> field.)</p> </li> <li> <p>You can't change the value of <code>CallerReference</code>.</p> </li> </ul> </li> <li> <p>Submit an <code>UpdateDistribution</code> request, providing the distribution configuration. The new configuration replaces the existing configuration. The values that you specify in an <code>UpdateDistribution</code> request are not merged into your existing configuration. Make sure to include all fields: the ones that you modified and also the ones that you didn't.</p> </li> </ol>
     * @param {String} id The distribution's id.
     * @param {module:model/CreateDistribution20200531Request} createDistribution20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the distribution's configuration. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updateDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDistributionResult}
     */
    updateDistribution20200531(id, createDistribution20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createDistribution20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDistribution20200531");
      }
      // verify the required parameter 'createDistribution20200531Request' is set
      if (createDistribution20200531Request === undefined || createDistribution20200531Request === null) {
        throw new Error("Missing the required parameter 'createDistribution20200531Request' when calling updateDistribution20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateDistributionResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDistributionWithStagingConfig20200531 operation.
     * @callback module:api/DefaultApi~updateDistributionWithStagingConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDistributionWithStagingConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Copies the staging distribution's configuration to its corresponding primary distribution. The primary distribution retains its <code>Aliases</code> (also known as alternate domain names or CNAMEs) and <code>ContinuousDeploymentPolicyId</code> value, but otherwise its configuration is overwritten to match the staging distribution.</p> <p>You can use this operation in a continuous deployment workflow after you have tested configuration changes on the staging distribution. After using a continuous deployment policy to move a portion of your domain name's traffic to the staging distribution and verifying that it works as intended, you can use this operation to copy the staging distribution's configuration to the primary distribution. This action will disable the continuous deployment policy and move your domain's traffic back to the primary distribution.</p> <p>This API operation requires the following IAM permissions:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\">GetDistribution</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html\">UpdateDistribution</a> </p> </li> </ul>
     * @param {String} id The identifier of the primary distribution to which you are copying a staging distribution's configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [stagingDistributionId] The identifier of the staging distribution whose configuration you are copying to the primary distribution.
     * @param {String} [ifMatch] <p>The current versions (<code>ETag</code> values) of both primary and staging distributions. Provide these in the following format:</p> <p> <code>&lt;primary ETag&gt;, &lt;staging ETag&gt;</code> </p>
     * @param {module:api/DefaultApi~updateDistributionWithStagingConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDistributionWithStagingConfigResult}
     */
    updateDistributionWithStagingConfig20200531(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDistributionWithStagingConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
        'StagingDistributionId': opts['stagingDistributionId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateDistributionWithStagingConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/distribution/{Id}/promote-staging-config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldLevelEncryptionConfig20200531 operation.
     * @callback module:api/DefaultApi~updateFieldLevelEncryptionConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFieldLevelEncryptionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a field-level encryption configuration.
     * @param {String} id The ID of the configuration you want to update.
     * @param {module:model/CreateFieldLevelEncryptionConfig20200531Request} createFieldLevelEncryptionConfig20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the configuration identity to update. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updateFieldLevelEncryptionConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFieldLevelEncryptionConfigResult}
     */
    updateFieldLevelEncryptionConfig20200531(id, createFieldLevelEncryptionConfig20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createFieldLevelEncryptionConfig20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFieldLevelEncryptionConfig20200531");
      }
      // verify the required parameter 'createFieldLevelEncryptionConfig20200531Request' is set
      if (createFieldLevelEncryptionConfig20200531Request === undefined || createFieldLevelEncryptionConfig20200531Request === null) {
        throw new Error("Missing the required parameter 'createFieldLevelEncryptionConfig20200531Request' when calling updateFieldLevelEncryptionConfig20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateFieldLevelEncryptionConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldLevelEncryptionProfile20200531 operation.
     * @callback module:api/DefaultApi~updateFieldLevelEncryptionProfile20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFieldLevelEncryptionProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a field-level encryption profile.
     * @param {String} id The ID of the field-level encryption profile request.
     * @param {module:model/CreateFieldLevelEncryptionProfile20200531Request} createFieldLevelEncryptionProfile20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the profile identity to update. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updateFieldLevelEncryptionProfile20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFieldLevelEncryptionProfileResult}
     */
    updateFieldLevelEncryptionProfile20200531(id, createFieldLevelEncryptionProfile20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createFieldLevelEncryptionProfile20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFieldLevelEncryptionProfile20200531");
      }
      // verify the required parameter 'createFieldLevelEncryptionProfile20200531Request' is set
      if (createFieldLevelEncryptionProfile20200531Request === undefined || createFieldLevelEncryptionProfile20200531Request === null) {
        throw new Error("Missing the required parameter 'createFieldLevelEncryptionProfile20200531Request' when calling updateFieldLevelEncryptionProfile20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateFieldLevelEncryptionProfileResult;
      return this.apiClient.callApi(
        '/2020-05-31/field-level-encryption-profile/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFunction20200531 operation.
     * @callback module:api/DefaultApi~updateFunction20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFunctionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a CloudFront function.</p> <p>You can update a function's code or the comment that describes the function. You cannot update a function's name.</p> <p>To update a function, you provide the function's name and version (<code>ETag</code> value) along with the updated function code. To get the name and version, you can use <code>ListFunctions</code> and <code>DescribeFunction</code>.</p>
     * @param {String} name The name of the function that you are updating.
     * @param {String} ifMatch The current version (<code>ETag</code> value) of the function that you are updating, which you can get using <code>DescribeFunction</code>.
     * @param {module:model/UpdateFunction20200531Request} updateFunction20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFunction20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFunctionResult}
     */
    updateFunction20200531(name, ifMatch, updateFunction20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = updateFunction20200531Request;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateFunction20200531");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateFunction20200531");
      }
      // verify the required parameter 'updateFunction20200531Request' is set
      if (updateFunction20200531Request === undefined || updateFunction20200531Request === null) {
        throw new Error("Missing the required parameter 'updateFunction20200531Request' when calling updateFunction20200531");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateFunctionResult;
      return this.apiClient.callApi(
        '/2020-05-31/function/{Name}#If-Match', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKeyGroup20200531 operation.
     * @callback module:api/DefaultApi~updateKeyGroup20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateKeyGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a key group.</p> <p>When you update a key group, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a key group:</p> <ol> <li> <p>Get the current key group with <code>GetKeyGroup</code> or <code>GetKeyGroupConfig</code>.</p> </li> <li> <p>Locally modify the fields in the key group that you want to update. For example, add or remove public key IDs.</p> </li> <li> <p>Call <code>UpdateKeyGroup</code> with the entire key group object, including the fields that you modified and those that you didn't.</p> </li> </ol>
     * @param {String} id The identifier of the key group that you are updating.
     * @param {module:model/CreateKeyGroup20200531Request} createKeyGroup20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The version of the key group that you are updating. The version is the key group's <code>ETag</code> value.
     * @param {module:api/DefaultApi~updateKeyGroup20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateKeyGroupResult}
     */
    updateKeyGroup20200531(id, createKeyGroup20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createKeyGroup20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateKeyGroup20200531");
      }
      // verify the required parameter 'createKeyGroup20200531Request' is set
      if (createKeyGroup20200531Request === undefined || createKeyGroup20200531Request === null) {
        throw new Error("Missing the required parameter 'createKeyGroup20200531Request' when calling updateKeyGroup20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateKeyGroupResult;
      return this.apiClient.callApi(
        '/2020-05-31/key-group/{Id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOriginAccessControl20200531 operation.
     * @callback module:api/DefaultApi~updateOriginAccessControl20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateOriginAccessControlResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a CloudFront origin access control.
     * @param {String} id The unique identifier of the origin access control that you are updating.
     * @param {module:model/CreateOriginAccessControl20200531Request} createOriginAccessControl20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The current version (<code>ETag</code> value) of the origin access control that you are updating.
     * @param {module:api/DefaultApi~updateOriginAccessControl20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateOriginAccessControlResult}
     */
    updateOriginAccessControl20200531(id, createOriginAccessControl20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createOriginAccessControl20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOriginAccessControl20200531");
      }
      // verify the required parameter 'createOriginAccessControl20200531Request' is set
      if (createOriginAccessControl20200531Request === undefined || createOriginAccessControl20200531Request === null) {
        throw new Error("Missing the required parameter 'createOriginAccessControl20200531Request' when calling updateOriginAccessControl20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateOriginAccessControlResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-access-control/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOriginRequestPolicy20200531 operation.
     * @callback module:api/DefaultApi~updateOriginRequestPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateOriginRequestPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an origin request policy configuration.</p> <p>When you update an origin request policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update an origin request policy configuration:</p> <ol> <li> <p>Use <code>GetOriginRequestPolicyConfig</code> to get the current configuration.</p> </li> <li> <p>Locally modify the fields in the origin request policy configuration that you want to update.</p> </li> <li> <p>Call <code>UpdateOriginRequestPolicy</code> by providing the entire origin request policy configuration, including the fields that you modified and those that you didn't.</p> </li> </ol>
     * @param {String} id The unique identifier for the origin request policy that you are updating. The identifier is returned in a cache behavior's <code>OriginRequestPolicyId</code> field in the response to <code>GetDistributionConfig</code>.
     * @param {module:model/CreateOriginRequestPolicy20200531Request} createOriginRequestPolicy20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The version of the origin request policy that you are updating. The version is returned in the origin request policy's <code>ETag</code> field in the response to <code>GetOriginRequestPolicyConfig</code>.
     * @param {module:api/DefaultApi~updateOriginRequestPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateOriginRequestPolicyResult}
     */
    updateOriginRequestPolicy20200531(id, createOriginRequestPolicy20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createOriginRequestPolicy20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOriginRequestPolicy20200531");
      }
      // verify the required parameter 'createOriginRequestPolicy20200531Request' is set
      if (createOriginRequestPolicy20200531Request === undefined || createOriginRequestPolicy20200531Request === null) {
        throw new Error("Missing the required parameter 'createOriginRequestPolicy20200531Request' when calling updateOriginRequestPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateOriginRequestPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/origin-request-policy/{Id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePublicKey20200531 operation.
     * @callback module:api/DefaultApi~updatePublicKey20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePublicKeyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update public key information. Note that the only value you can change is the comment.
     * @param {String} id The identifier of the public key that you are updating.
     * @param {module:model/CreatePublicKey20200531Request} createPublicKey20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the public key to update. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updatePublicKey20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePublicKeyResult}
     */
    updatePublicKey20200531(id, createPublicKey20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createPublicKey20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePublicKey20200531");
      }
      // verify the required parameter 'createPublicKey20200531Request' is set
      if (createPublicKey20200531Request === undefined || createPublicKey20200531Request === null) {
        throw new Error("Missing the required parameter 'createPublicKey20200531Request' when calling updatePublicKey20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdatePublicKeyResult;
      return this.apiClient.callApi(
        '/2020-05-31/public-key/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRealtimeLogConfig20200531 operation.
     * @callback module:api/DefaultApi~updateRealtimeLogConfig20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRealtimeLogConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a real-time log configuration.</p> <p>When you update a real-time log configuration, all the parameters are updated with the values provided in the request. You cannot update some parameters independent of others. To update a real-time log configuration:</p> <ol> <li> <p>Call <code>GetRealtimeLogConfig</code> to get the current real-time log configuration.</p> </li> <li> <p>Locally modify the parameters in the real-time log configuration that you want to update.</p> </li> <li> <p>Call this API (<code>UpdateRealtimeLogConfig</code>) by providing the entire real-time log configuration, including the parameters that you modified and those that you didn't.</p> </li> </ol> <p>You cannot update a real-time log configuration's <code>Name</code> or <code>ARN</code>.</p>
     * @param {module:model/UpdateRealtimeLogConfig20200531Request} updateRealtimeLogConfig20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRealtimeLogConfig20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRealtimeLogConfigResult}
     */
    updateRealtimeLogConfig20200531(updateRealtimeLogConfig20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = updateRealtimeLogConfig20200531Request;
      // verify the required parameter 'updateRealtimeLogConfig20200531Request' is set
      if (updateRealtimeLogConfig20200531Request === undefined || updateRealtimeLogConfig20200531Request === null) {
        throw new Error("Missing the required parameter 'updateRealtimeLogConfig20200531Request' when calling updateRealtimeLogConfig20200531");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateRealtimeLogConfigResult;
      return this.apiClient.callApi(
        '/2020-05-31/realtime-log-config/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResponseHeadersPolicy20200531 operation.
     * @callback module:api/DefaultApi~updateResponseHeadersPolicy20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResponseHeadersPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a response headers policy.</p> <p>When you update a response headers policy, the entire policy is replaced. You cannot update some policy fields independent of others. To update a response headers policy configuration:</p> <ol> <li> <p>Use <code>GetResponseHeadersPolicyConfig</code> to get the current policy's configuration.</p> </li> <li> <p>Modify the fields in the response headers policy configuration that you want to update.</p> </li> <li> <p>Call <code>UpdateResponseHeadersPolicy</code>, providing the entire response headers policy configuration, including the fields that you modified and those that you didn't.</p> </li> </ol>
     * @param {String} id The identifier for the response headers policy that you are updating.
     * @param {module:model/CreateResponseHeadersPolicy20200531Request} createResponseHeadersPolicy20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] <p>The version of the response headers policy that you are updating.</p> <p>The version is returned in the cache policy's <code>ETag</code> field in the response to <code>GetResponseHeadersPolicyConfig</code>.</p>
     * @param {module:api/DefaultApi~updateResponseHeadersPolicy20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResponseHeadersPolicyResult}
     */
    updateResponseHeadersPolicy20200531(id, createResponseHeadersPolicy20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createResponseHeadersPolicy20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateResponseHeadersPolicy20200531");
      }
      // verify the required parameter 'createResponseHeadersPolicy20200531Request' is set
      if (createResponseHeadersPolicy20200531Request === undefined || createResponseHeadersPolicy20200531Request === null) {
        throw new Error("Missing the required parameter 'createResponseHeadersPolicy20200531Request' when calling updateResponseHeadersPolicy20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateResponseHeadersPolicyResult;
      return this.apiClient.callApi(
        '/2020-05-31/response-headers-policy/{Id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStreamingDistribution20200531 operation.
     * @callback module:api/DefaultApi~updateStreamingDistribution20200531Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStreamingDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a streaming distribution.
     * @param {String} id The streaming distribution's id.
     * @param {module:model/CreateStreamingDistribution20200531Request} createStreamingDistribution20200531Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the streaming distribution's configuration. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updateStreamingDistribution20200531Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStreamingDistributionResult}
     */
    updateStreamingDistribution20200531(id, createStreamingDistribution20200531Request, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingDistribution20200531Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStreamingDistribution20200531");
      }
      // verify the required parameter 'createStreamingDistribution20200531Request' is set
      if (createStreamingDistribution20200531Request === undefined || createStreamingDistribution20200531Request === null) {
        throw new Error("Missing the required parameter 'createStreamingDistribution20200531Request' when calling updateStreamingDistribution20200531");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateStreamingDistributionResult;
      return this.apiClient.callApi(
        '/2020-05-31/streaming-distribution/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
