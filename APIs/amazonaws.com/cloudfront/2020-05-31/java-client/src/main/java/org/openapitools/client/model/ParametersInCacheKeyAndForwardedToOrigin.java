/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ParametersInCacheKeyAndForwardedToOriginCookiesConfig;
import org.openapitools.client.model.ParametersInCacheKeyAndForwardedToOriginHeadersConfig;
import org.openapitools.client.model.ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;This object determines the values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.&lt;/p&gt; &lt;p&gt;The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can&#39;t find an object in its cache that matches the request&#39;s cache key. If you want to send values to the origin but &lt;i&gt;not&lt;/i&gt; include them in the cache key, use &lt;code&gt;OriginRequestPolicy&lt;/code&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParametersInCacheKeyAndForwardedToOrigin {
  public static final String SERIALIZED_NAME_ENABLE_ACCEPT_ENCODING_GZIP = "EnableAcceptEncodingGzip";
  @SerializedName(SERIALIZED_NAME_ENABLE_ACCEPT_ENCODING_GZIP)
  private Boolean enableAcceptEncodingGzip;

  public static final String SERIALIZED_NAME_ENABLE_ACCEPT_ENCODING_BROTLI = "EnableAcceptEncodingBrotli";
  @SerializedName(SERIALIZED_NAME_ENABLE_ACCEPT_ENCODING_BROTLI)
  private Boolean enableAcceptEncodingBrotli;

  public static final String SERIALIZED_NAME_HEADERS_CONFIG = "HeadersConfig";
  @SerializedName(SERIALIZED_NAME_HEADERS_CONFIG)
  private ParametersInCacheKeyAndForwardedToOriginHeadersConfig headersConfig;

  public static final String SERIALIZED_NAME_COOKIES_CONFIG = "CookiesConfig";
  @SerializedName(SERIALIZED_NAME_COOKIES_CONFIG)
  private ParametersInCacheKeyAndForwardedToOriginCookiesConfig cookiesConfig;

  public static final String SERIALIZED_NAME_QUERY_STRINGS_CONFIG = "QueryStringsConfig";
  @SerializedName(SERIALIZED_NAME_QUERY_STRINGS_CONFIG)
  private ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig queryStringsConfig;

  public ParametersInCacheKeyAndForwardedToOrigin() {
  }

  public ParametersInCacheKeyAndForwardedToOrigin enableAcceptEncodingGzip(Boolean enableAcceptEncodingGzip) {
    this.enableAcceptEncodingGzip = enableAcceptEncodingGzip;
    return this;
  }

  /**
   * Get enableAcceptEncodingGzip
   * @return enableAcceptEncodingGzip
   */
  @javax.annotation.Nonnull
  public Boolean getEnableAcceptEncodingGzip() {
    return enableAcceptEncodingGzip;
  }

  public void setEnableAcceptEncodingGzip(Boolean enableAcceptEncodingGzip) {
    this.enableAcceptEncodingGzip = enableAcceptEncodingGzip;
  }


  public ParametersInCacheKeyAndForwardedToOrigin enableAcceptEncodingBrotli(Boolean enableAcceptEncodingBrotli) {
    this.enableAcceptEncodingBrotli = enableAcceptEncodingBrotli;
    return this;
  }

  /**
   * Get enableAcceptEncodingBrotli
   * @return enableAcceptEncodingBrotli
   */
  @javax.annotation.Nullable
  public Boolean getEnableAcceptEncodingBrotli() {
    return enableAcceptEncodingBrotli;
  }

  public void setEnableAcceptEncodingBrotli(Boolean enableAcceptEncodingBrotli) {
    this.enableAcceptEncodingBrotli = enableAcceptEncodingBrotli;
  }


  public ParametersInCacheKeyAndForwardedToOrigin headersConfig(ParametersInCacheKeyAndForwardedToOriginHeadersConfig headersConfig) {
    this.headersConfig = headersConfig;
    return this;
  }

  /**
   * Get headersConfig
   * @return headersConfig
   */
  @javax.annotation.Nonnull
  public ParametersInCacheKeyAndForwardedToOriginHeadersConfig getHeadersConfig() {
    return headersConfig;
  }

  public void setHeadersConfig(ParametersInCacheKeyAndForwardedToOriginHeadersConfig headersConfig) {
    this.headersConfig = headersConfig;
  }


  public ParametersInCacheKeyAndForwardedToOrigin cookiesConfig(ParametersInCacheKeyAndForwardedToOriginCookiesConfig cookiesConfig) {
    this.cookiesConfig = cookiesConfig;
    return this;
  }

  /**
   * Get cookiesConfig
   * @return cookiesConfig
   */
  @javax.annotation.Nonnull
  public ParametersInCacheKeyAndForwardedToOriginCookiesConfig getCookiesConfig() {
    return cookiesConfig;
  }

  public void setCookiesConfig(ParametersInCacheKeyAndForwardedToOriginCookiesConfig cookiesConfig) {
    this.cookiesConfig = cookiesConfig;
  }


  public ParametersInCacheKeyAndForwardedToOrigin queryStringsConfig(ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig queryStringsConfig) {
    this.queryStringsConfig = queryStringsConfig;
    return this;
  }

  /**
   * Get queryStringsConfig
   * @return queryStringsConfig
   */
  @javax.annotation.Nonnull
  public ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig getQueryStringsConfig() {
    return queryStringsConfig;
  }

  public void setQueryStringsConfig(ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig queryStringsConfig) {
    this.queryStringsConfig = queryStringsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParametersInCacheKeyAndForwardedToOrigin parametersInCacheKeyAndForwardedToOrigin = (ParametersInCacheKeyAndForwardedToOrigin) o;
    return Objects.equals(this.enableAcceptEncodingGzip, parametersInCacheKeyAndForwardedToOrigin.enableAcceptEncodingGzip) &&
        Objects.equals(this.enableAcceptEncodingBrotli, parametersInCacheKeyAndForwardedToOrigin.enableAcceptEncodingBrotli) &&
        Objects.equals(this.headersConfig, parametersInCacheKeyAndForwardedToOrigin.headersConfig) &&
        Objects.equals(this.cookiesConfig, parametersInCacheKeyAndForwardedToOrigin.cookiesConfig) &&
        Objects.equals(this.queryStringsConfig, parametersInCacheKeyAndForwardedToOrigin.queryStringsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableAcceptEncodingGzip, enableAcceptEncodingBrotli, headersConfig, cookiesConfig, queryStringsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParametersInCacheKeyAndForwardedToOrigin {\n");
    sb.append("    enableAcceptEncodingGzip: ").append(toIndentedString(enableAcceptEncodingGzip)).append("\n");
    sb.append("    enableAcceptEncodingBrotli: ").append(toIndentedString(enableAcceptEncodingBrotli)).append("\n");
    sb.append("    headersConfig: ").append(toIndentedString(headersConfig)).append("\n");
    sb.append("    cookiesConfig: ").append(toIndentedString(cookiesConfig)).append("\n");
    sb.append("    queryStringsConfig: ").append(toIndentedString(queryStringsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EnableAcceptEncodingGzip");
    openapiFields.add("EnableAcceptEncodingBrotli");
    openapiFields.add("HeadersConfig");
    openapiFields.add("CookiesConfig");
    openapiFields.add("QueryStringsConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EnableAcceptEncodingGzip");
    openapiRequiredFields.add("HeadersConfig");
    openapiRequiredFields.add("CookiesConfig");
    openapiRequiredFields.add("QueryStringsConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParametersInCacheKeyAndForwardedToOrigin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParametersInCacheKeyAndForwardedToOrigin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParametersInCacheKeyAndForwardedToOrigin is not found in the empty JSON string", ParametersInCacheKeyAndForwardedToOrigin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParametersInCacheKeyAndForwardedToOrigin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParametersInCacheKeyAndForwardedToOrigin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParametersInCacheKeyAndForwardedToOrigin.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EnableAcceptEncodingGzip`
      Boolean.validateJsonElement(jsonObj.get("EnableAcceptEncodingGzip"));
      // validate the optional field `EnableAcceptEncodingBrotli`
      if (jsonObj.get("EnableAcceptEncodingBrotli") != null && !jsonObj.get("EnableAcceptEncodingBrotli").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableAcceptEncodingBrotli"));
      }
      // validate the required field `HeadersConfig`
      ParametersInCacheKeyAndForwardedToOriginHeadersConfig.validateJsonElement(jsonObj.get("HeadersConfig"));
      // validate the required field `CookiesConfig`
      ParametersInCacheKeyAndForwardedToOriginCookiesConfig.validateJsonElement(jsonObj.get("CookiesConfig"));
      // validate the required field `QueryStringsConfig`
      ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig.validateJsonElement(jsonObj.get("QueryStringsConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParametersInCacheKeyAndForwardedToOrigin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParametersInCacheKeyAndForwardedToOrigin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParametersInCacheKeyAndForwardedToOrigin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParametersInCacheKeyAndForwardedToOrigin.class));

       return (TypeAdapter<T>) new TypeAdapter<ParametersInCacheKeyAndForwardedToOrigin>() {
           @Override
           public void write(JsonWriter out, ParametersInCacheKeyAndForwardedToOrigin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParametersInCacheKeyAndForwardedToOrigin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParametersInCacheKeyAndForwardedToOrigin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParametersInCacheKeyAndForwardedToOrigin
   * @throws IOException if the JSON string is invalid with respect to ParametersInCacheKeyAndForwardedToOrigin
   */
  public static ParametersInCacheKeyAndForwardedToOrigin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParametersInCacheKeyAndForwardedToOrigin.class);
  }

  /**
   * Convert an instance of ParametersInCacheKeyAndForwardedToOrigin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

