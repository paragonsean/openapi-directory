/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigCookiesConfig;
import org.openapitools.client.model.CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigHeadersConfig;
import org.openapitools.client.model.CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigQueryStringsConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;An origin request policy configuration.&lt;/p&gt; &lt;p&gt;This configuration determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The request body and the URL path (without the domain name) from the viewer request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The headers that CloudFront automatically includes in every origin request, including &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;User-Agent&lt;/code&gt;, and &lt;code&gt;X-Amz-Cf-Id&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CloudFront sends a request when it can&#39;t find an object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use &lt;code&gt;CachePolicy&lt;/code&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OriginRequestPolicyConfig {
  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_HEADERS_CONFIG = "HeadersConfig";
  @SerializedName(SERIALIZED_NAME_HEADERS_CONFIG)
  private CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigHeadersConfig headersConfig;

  public static final String SERIALIZED_NAME_COOKIES_CONFIG = "CookiesConfig";
  @SerializedName(SERIALIZED_NAME_COOKIES_CONFIG)
  private CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigCookiesConfig cookiesConfig;

  public static final String SERIALIZED_NAME_QUERY_STRINGS_CONFIG = "QueryStringsConfig";
  @SerializedName(SERIALIZED_NAME_QUERY_STRINGS_CONFIG)
  private CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigQueryStringsConfig queryStringsConfig;

  public OriginRequestPolicyConfig() {
  }

  public OriginRequestPolicyConfig comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public OriginRequestPolicyConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OriginRequestPolicyConfig headersConfig(CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigHeadersConfig headersConfig) {
    this.headersConfig = headersConfig;
    return this;
  }

  /**
   * Get headersConfig
   * @return headersConfig
   */
  @javax.annotation.Nonnull
  public CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigHeadersConfig getHeadersConfig() {
    return headersConfig;
  }

  public void setHeadersConfig(CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigHeadersConfig headersConfig) {
    this.headersConfig = headersConfig;
  }


  public OriginRequestPolicyConfig cookiesConfig(CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigCookiesConfig cookiesConfig) {
    this.cookiesConfig = cookiesConfig;
    return this;
  }

  /**
   * Get cookiesConfig
   * @return cookiesConfig
   */
  @javax.annotation.Nonnull
  public CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigCookiesConfig getCookiesConfig() {
    return cookiesConfig;
  }

  public void setCookiesConfig(CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigCookiesConfig cookiesConfig) {
    this.cookiesConfig = cookiesConfig;
  }


  public OriginRequestPolicyConfig queryStringsConfig(CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigQueryStringsConfig queryStringsConfig) {
    this.queryStringsConfig = queryStringsConfig;
    return this;
  }

  /**
   * Get queryStringsConfig
   * @return queryStringsConfig
   */
  @javax.annotation.Nonnull
  public CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigQueryStringsConfig getQueryStringsConfig() {
    return queryStringsConfig;
  }

  public void setQueryStringsConfig(CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigQueryStringsConfig queryStringsConfig) {
    this.queryStringsConfig = queryStringsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginRequestPolicyConfig originRequestPolicyConfig = (OriginRequestPolicyConfig) o;
    return Objects.equals(this.comment, originRequestPolicyConfig.comment) &&
        Objects.equals(this.name, originRequestPolicyConfig.name) &&
        Objects.equals(this.headersConfig, originRequestPolicyConfig.headersConfig) &&
        Objects.equals(this.cookiesConfig, originRequestPolicyConfig.cookiesConfig) &&
        Objects.equals(this.queryStringsConfig, originRequestPolicyConfig.queryStringsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, name, headersConfig, cookiesConfig, queryStringsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginRequestPolicyConfig {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    headersConfig: ").append(toIndentedString(headersConfig)).append("\n");
    sb.append("    cookiesConfig: ").append(toIndentedString(cookiesConfig)).append("\n");
    sb.append("    queryStringsConfig: ").append(toIndentedString(queryStringsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Comment");
    openapiFields.add("Name");
    openapiFields.add("HeadersConfig");
    openapiFields.add("CookiesConfig");
    openapiFields.add("QueryStringsConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("HeadersConfig");
    openapiRequiredFields.add("CookiesConfig");
    openapiRequiredFields.add("QueryStringsConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OriginRequestPolicyConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OriginRequestPolicyConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OriginRequestPolicyConfig is not found in the empty JSON string", OriginRequestPolicyConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OriginRequestPolicyConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OriginRequestPolicyConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OriginRequestPolicyConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Comment`
      if (jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Comment"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `HeadersConfig`
      CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigHeadersConfig.validateJsonElement(jsonObj.get("HeadersConfig"));
      // validate the required field `CookiesConfig`
      CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigCookiesConfig.validateJsonElement(jsonObj.get("CookiesConfig"));
      // validate the required field `QueryStringsConfig`
      CreateOriginRequestPolicy20200531RequestOriginRequestPolicyConfigQueryStringsConfig.validateJsonElement(jsonObj.get("QueryStringsConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OriginRequestPolicyConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OriginRequestPolicyConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OriginRequestPolicyConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OriginRequestPolicyConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<OriginRequestPolicyConfig>() {
           @Override
           public void write(JsonWriter out, OriginRequestPolicyConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OriginRequestPolicyConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OriginRequestPolicyConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OriginRequestPolicyConfig
   * @throws IOException if the JSON string is invalid with respect to OriginRequestPolicyConfig
   */
  public static OriginRequestPolicyConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OriginRequestPolicyConfig.class);
  }

  /**
   * Convert an instance of OriginRequestPolicyConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

