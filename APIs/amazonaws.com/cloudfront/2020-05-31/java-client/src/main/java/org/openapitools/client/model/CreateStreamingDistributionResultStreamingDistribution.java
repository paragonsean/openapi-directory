/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StreamingDistributionActiveTrustedSigners;
import org.openapitools.client.model.StreamingDistributionStreamingDistributionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateStreamingDistributionResultStreamingDistribution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateStreamingDistributionResultStreamingDistribution {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_A_R_N = "ARN";
  @SerializedName(SERIALIZED_NAME_A_R_N)
  private String ARN;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_ACTIVE_TRUSTED_SIGNERS = "ActiveTrustedSigners";
  @SerializedName(SERIALIZED_NAME_ACTIVE_TRUSTED_SIGNERS)
  private StreamingDistributionActiveTrustedSigners activeTrustedSigners;

  public static final String SERIALIZED_NAME_STREAMING_DISTRIBUTION_CONFIG = "StreamingDistributionConfig";
  @SerializedName(SERIALIZED_NAME_STREAMING_DISTRIBUTION_CONFIG)
  private StreamingDistributionStreamingDistributionConfig streamingDistributionConfig;

  public CreateStreamingDistributionResultStreamingDistribution() {
  }

  public CreateStreamingDistributionResultStreamingDistribution id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateStreamingDistributionResultStreamingDistribution ARN(String ARN) {
    this.ARN = ARN;
    return this;
  }

  /**
   * Get ARN
   * @return ARN
   */
  @javax.annotation.Nonnull
  public String getARN() {
    return ARN;
  }

  public void setARN(String ARN) {
    this.ARN = ARN;
  }


  public CreateStreamingDistributionResultStreamingDistribution status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public CreateStreamingDistributionResultStreamingDistribution lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public CreateStreamingDistributionResultStreamingDistribution domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public CreateStreamingDistributionResultStreamingDistribution activeTrustedSigners(StreamingDistributionActiveTrustedSigners activeTrustedSigners) {
    this.activeTrustedSigners = activeTrustedSigners;
    return this;
  }

  /**
   * Get activeTrustedSigners
   * @return activeTrustedSigners
   */
  @javax.annotation.Nonnull
  public StreamingDistributionActiveTrustedSigners getActiveTrustedSigners() {
    return activeTrustedSigners;
  }

  public void setActiveTrustedSigners(StreamingDistributionActiveTrustedSigners activeTrustedSigners) {
    this.activeTrustedSigners = activeTrustedSigners;
  }


  public CreateStreamingDistributionResultStreamingDistribution streamingDistributionConfig(StreamingDistributionStreamingDistributionConfig streamingDistributionConfig) {
    this.streamingDistributionConfig = streamingDistributionConfig;
    return this;
  }

  /**
   * Get streamingDistributionConfig
   * @return streamingDistributionConfig
   */
  @javax.annotation.Nonnull
  public StreamingDistributionStreamingDistributionConfig getStreamingDistributionConfig() {
    return streamingDistributionConfig;
  }

  public void setStreamingDistributionConfig(StreamingDistributionStreamingDistributionConfig streamingDistributionConfig) {
    this.streamingDistributionConfig = streamingDistributionConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStreamingDistributionResultStreamingDistribution createStreamingDistributionResultStreamingDistribution = (CreateStreamingDistributionResultStreamingDistribution) o;
    return Objects.equals(this.id, createStreamingDistributionResultStreamingDistribution.id) &&
        Objects.equals(this.ARN, createStreamingDistributionResultStreamingDistribution.ARN) &&
        Objects.equals(this.status, createStreamingDistributionResultStreamingDistribution.status) &&
        Objects.equals(this.lastModifiedTime, createStreamingDistributionResultStreamingDistribution.lastModifiedTime) &&
        Objects.equals(this.domainName, createStreamingDistributionResultStreamingDistribution.domainName) &&
        Objects.equals(this.activeTrustedSigners, createStreamingDistributionResultStreamingDistribution.activeTrustedSigners) &&
        Objects.equals(this.streamingDistributionConfig, createStreamingDistributionResultStreamingDistribution.streamingDistributionConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ARN, status, lastModifiedTime, domainName, activeTrustedSigners, streamingDistributionConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStreamingDistributionResultStreamingDistribution {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ARN: ").append(toIndentedString(ARN)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    activeTrustedSigners: ").append(toIndentedString(activeTrustedSigners)).append("\n");
    sb.append("    streamingDistributionConfig: ").append(toIndentedString(streamingDistributionConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("ARN");
    openapiFields.add("Status");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("DomainName");
    openapiFields.add("ActiveTrustedSigners");
    openapiFields.add("StreamingDistributionConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("ARN");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("DomainName");
    openapiRequiredFields.add("ActiveTrustedSigners");
    openapiRequiredFields.add("StreamingDistributionConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateStreamingDistributionResultStreamingDistribution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateStreamingDistributionResultStreamingDistribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateStreamingDistributionResultStreamingDistribution is not found in the empty JSON string", CreateStreamingDistributionResultStreamingDistribution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateStreamingDistributionResultStreamingDistribution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateStreamingDistributionResultStreamingDistribution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateStreamingDistributionResultStreamingDistribution.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `ARN`
      String.validateJsonElement(jsonObj.get("ARN"));
      // validate the required field `Status`
      String.validateJsonElement(jsonObj.get("Status"));
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the required field `ActiveTrustedSigners`
      StreamingDistributionActiveTrustedSigners.validateJsonElement(jsonObj.get("ActiveTrustedSigners"));
      // validate the required field `StreamingDistributionConfig`
      StreamingDistributionStreamingDistributionConfig.validateJsonElement(jsonObj.get("StreamingDistributionConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateStreamingDistributionResultStreamingDistribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateStreamingDistributionResultStreamingDistribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateStreamingDistributionResultStreamingDistribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateStreamingDistributionResultStreamingDistribution.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateStreamingDistributionResultStreamingDistribution>() {
           @Override
           public void write(JsonWriter out, CreateStreamingDistributionResultStreamingDistribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateStreamingDistributionResultStreamingDistribution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateStreamingDistributionResultStreamingDistribution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateStreamingDistributionResultStreamingDistribution
   * @throws IOException if the JSON string is invalid with respect to CreateStreamingDistributionResultStreamingDistribution
   */
  public static CreateStreamingDistributionResultStreamingDistribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateStreamingDistributionResultStreamingDistribution.class);
  }

  /**
   * Convert an instance of CreateStreamingDistributionResultStreamingDistribution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

