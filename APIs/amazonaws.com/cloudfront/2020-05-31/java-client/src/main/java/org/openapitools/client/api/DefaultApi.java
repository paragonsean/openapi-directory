/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CopyDistribution20200531Request;
import org.openapitools.client.model.CopyDistributionResult;
import org.openapitools.client.model.CreateCachePolicy20200531Request;
import org.openapitools.client.model.CreateCachePolicyResult;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentity20200531Request;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.CreateContinuousDeploymentPolicy20200531Request;
import org.openapitools.client.model.CreateContinuousDeploymentPolicyResult;
import org.openapitools.client.model.CreateDistribution20200531Request;
import org.openapitools.client.model.CreateDistributionResult;
import org.openapitools.client.model.CreateDistributionWithTags20200531Request;
import org.openapitools.client.model.CreateDistributionWithTagsResult;
import org.openapitools.client.model.CreateFieldLevelEncryptionConfig20200531Request;
import org.openapitools.client.model.CreateFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.CreateFieldLevelEncryptionProfile20200531Request;
import org.openapitools.client.model.CreateFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.CreateFunction20200531Request;
import org.openapitools.client.model.CreateFunctionResult;
import org.openapitools.client.model.CreateInvalidation20200531Request;
import org.openapitools.client.model.CreateInvalidationResult;
import org.openapitools.client.model.CreateKeyGroup20200531Request;
import org.openapitools.client.model.CreateKeyGroupResult;
import org.openapitools.client.model.CreateMonitoringSubscription20200531Request;
import org.openapitools.client.model.CreateMonitoringSubscriptionResult;
import org.openapitools.client.model.CreateOriginAccessControl20200531Request;
import org.openapitools.client.model.CreateOriginAccessControlResult;
import org.openapitools.client.model.CreateOriginRequestPolicy20200531Request;
import org.openapitools.client.model.CreateOriginRequestPolicyResult;
import org.openapitools.client.model.CreatePublicKey20200531Request;
import org.openapitools.client.model.CreatePublicKeyResult;
import org.openapitools.client.model.CreateRealtimeLogConfig20200531Request;
import org.openapitools.client.model.CreateRealtimeLogConfigResult;
import org.openapitools.client.model.CreateResponseHeadersPolicy20200531Request;
import org.openapitools.client.model.CreateResponseHeadersPolicyResult;
import org.openapitools.client.model.CreateStreamingDistribution20200531Request;
import org.openapitools.client.model.CreateStreamingDistributionResult;
import org.openapitools.client.model.CreateStreamingDistributionWithTags20200531Request;
import org.openapitools.client.model.CreateStreamingDistributionWithTagsResult;
import org.openapitools.client.model.DeleteRealtimeLogConfig20200531Request;
import org.openapitools.client.model.DescribeFunctionResult;
import org.openapitools.client.model.GetCachePolicyConfigResult;
import org.openapitools.client.model.GetCachePolicyResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityConfigResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.GetContinuousDeploymentPolicyConfigResult;
import org.openapitools.client.model.GetContinuousDeploymentPolicyResult;
import org.openapitools.client.model.GetDistributionConfigResult;
import org.openapitools.client.model.GetDistributionResult;
import org.openapitools.client.model.GetFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.GetFieldLevelEncryptionProfileConfigResult;
import org.openapitools.client.model.GetFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.GetFieldLevelEncryptionResult;
import org.openapitools.client.model.GetFunctionResult;
import org.openapitools.client.model.GetInvalidationResult;
import org.openapitools.client.model.GetKeyGroupConfigResult;
import org.openapitools.client.model.GetKeyGroupResult;
import org.openapitools.client.model.GetMonitoringSubscriptionResult;
import org.openapitools.client.model.GetOriginAccessControlConfigResult;
import org.openapitools.client.model.GetOriginAccessControlResult;
import org.openapitools.client.model.GetOriginRequestPolicyConfigResult;
import org.openapitools.client.model.GetOriginRequestPolicyResult;
import org.openapitools.client.model.GetPublicKeyConfigResult;
import org.openapitools.client.model.GetPublicKeyResult;
import org.openapitools.client.model.GetRealtimeLogConfig20200531Request;
import org.openapitools.client.model.GetRealtimeLogConfigResult;
import org.openapitools.client.model.GetResponseHeadersPolicyConfigResult;
import org.openapitools.client.model.GetResponseHeadersPolicyResult;
import org.openapitools.client.model.GetStreamingDistributionConfigResult;
import org.openapitools.client.model.GetStreamingDistributionResult;
import org.openapitools.client.model.ListCachePoliciesResult;
import org.openapitools.client.model.ListCloudFrontOriginAccessIdentitiesResult;
import org.openapitools.client.model.ListConflictingAliasesResult;
import org.openapitools.client.model.ListContinuousDeploymentPoliciesResult;
import org.openapitools.client.model.ListDistributionsByCachePolicyIdResult;
import org.openapitools.client.model.ListDistributionsByKeyGroupResult;
import org.openapitools.client.model.ListDistributionsByOriginRequestPolicyIdResult;
import org.openapitools.client.model.ListDistributionsByRealtimeLogConfig20200531Request;
import org.openapitools.client.model.ListDistributionsByRealtimeLogConfigResult;
import org.openapitools.client.model.ListDistributionsByResponseHeadersPolicyIdResult;
import org.openapitools.client.model.ListDistributionsByWebACLIdResult;
import org.openapitools.client.model.ListDistributionsResult;
import org.openapitools.client.model.ListFieldLevelEncryptionConfigsResult;
import org.openapitools.client.model.ListFieldLevelEncryptionProfilesResult;
import org.openapitools.client.model.ListFunctionsResult;
import org.openapitools.client.model.ListInvalidationsResult;
import org.openapitools.client.model.ListKeyGroupsResult;
import org.openapitools.client.model.ListOriginAccessControlsResult;
import org.openapitools.client.model.ListOriginRequestPoliciesResult;
import org.openapitools.client.model.ListPublicKeysResult;
import org.openapitools.client.model.ListRealtimeLogConfigsResult;
import org.openapitools.client.model.ListResponseHeadersPoliciesResult;
import org.openapitools.client.model.ListStreamingDistributionsResult;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.PublishFunctionResult;
import org.openapitools.client.model.TagResource20200531Request;
import org.openapitools.client.model.TestFunction20200531Request;
import org.openapitools.client.model.TestFunctionResult;
import org.openapitools.client.model.UntagResource20200531Request;
import org.openapitools.client.model.UpdateCachePolicyResult;
import org.openapitools.client.model.UpdateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.UpdateContinuousDeploymentPolicyResult;
import org.openapitools.client.model.UpdateDistributionResult;
import org.openapitools.client.model.UpdateDistributionWithStagingConfigResult;
import org.openapitools.client.model.UpdateFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.UpdateFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.UpdateFunction20200531Request;
import org.openapitools.client.model.UpdateFunctionResult;
import org.openapitools.client.model.UpdateKeyGroupResult;
import org.openapitools.client.model.UpdateOriginAccessControlResult;
import org.openapitools.client.model.UpdateOriginRequestPolicyResult;
import org.openapitools.client.model.UpdatePublicKeyResult;
import org.openapitools.client.model.UpdateRealtimeLogConfig20200531Request;
import org.openapitools.client.model.UpdateRealtimeLogConfigResult;
import org.openapitools.client.model.UpdateResponseHeadersPolicyResult;
import org.openapitools.client.model.UpdateStreamingDistributionResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for associateAlias20200531
     * @param targetDistributionId The ID of the distribution that you&#39;re associating the alias with. (required)
     * @param alias The alias (also known as a CNAME) to add to the target distribution. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateAlias20200531Call(String targetDistributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{TargetDistributionId}/associate-alias#Alias"
            .replace("{" + "TargetDistributionId" + "}", localVarApiClient.escapeString(targetDistributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Alias", alias));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateAlias20200531ValidateBeforeCall(String targetDistributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetDistributionId' is set
        if (targetDistributionId == null) {
            throw new ApiException("Missing the required parameter 'targetDistributionId' when calling associateAlias20200531(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling associateAlias20200531(Async)");
        }

        return associateAlias20200531Call(targetDistributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront distribution.&lt;/p&gt; &lt;p&gt;With this operation you can move an alias that&#39;s already in use on a CloudFront distribution to a different distribution in one step. This prevents the downtime that could occur if you first remove the alias from one distribution and then separately add the alias to another distribution.&lt;/p&gt; &lt;p&gt;To use this operation to associate an alias with a distribution, you provide the alias and the ID of the target distribution for the alias. For more information, including how to set up the target distribution, prerequisites that you must complete, and other restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\&quot;&gt;Moving an alternate domain name to a different distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param targetDistributionId The ID of the distribution that you&#39;re associating the alias with. (required)
     * @param alias The alias (also known as a CNAME) to add to the target distribution. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public void associateAlias20200531(String targetDistributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        associateAlias20200531WithHttpInfo(targetDistributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront distribution.&lt;/p&gt; &lt;p&gt;With this operation you can move an alias that&#39;s already in use on a CloudFront distribution to a different distribution in one step. This prevents the downtime that could occur if you first remove the alias from one distribution and then separately add the alias to another distribution.&lt;/p&gt; &lt;p&gt;To use this operation to associate an alias with a distribution, you provide the alias and the ID of the target distribution for the alias. For more information, including how to set up the target distribution, prerequisites that you must complete, and other restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\&quot;&gt;Moving an alternate domain name to a different distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param targetDistributionId The ID of the distribution that you&#39;re associating the alias with. (required)
     * @param alias The alias (also known as a CNAME) to add to the target distribution. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> associateAlias20200531WithHttpInfo(String targetDistributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateAlias20200531ValidateBeforeCall(targetDistributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront distribution.&lt;/p&gt; &lt;p&gt;With this operation you can move an alias that&#39;s already in use on a CloudFront distribution to a different distribution in one step. This prevents the downtime that could occur if you first remove the alias from one distribution and then separately add the alias to another distribution.&lt;/p&gt; &lt;p&gt;To use this operation to associate an alias with a distribution, you provide the alias and the ID of the target distribution for the alias. For more information, including how to set up the target distribution, prerequisites that you must complete, and other restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\&quot;&gt;Moving an alternate domain name to a different distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param targetDistributionId The ID of the distribution that you&#39;re associating the alias with. (required)
     * @param alias The alias (also known as a CNAME) to add to the target distribution. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateAlias20200531Async(String targetDistributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateAlias20200531ValidateBeforeCall(targetDistributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyDistribution20200531
     * @param primaryDistributionId The identifier of the primary distribution whose configuration you are copying. To get a distribution ID, use &lt;code&gt;ListDistributions&lt;/code&gt;. (required)
     * @param copyDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param staging The type of distribution that your primary distribution will be copied to. The only valid value is &lt;code&gt;True&lt;/code&gt;, indicating that you are copying to a staging distribution. (optional)
     * @param ifMatch The version identifier of the primary distribution whose configuration you are copying. This is the &lt;code&gt;ETag&lt;/code&gt; value returned in the response to &lt;code&gt;GetDistribution&lt;/code&gt; and &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyDistribution20200531Call(String primaryDistributionId, CopyDistribution20200531Request copyDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean staging, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyDistribution20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{PrimaryDistributionId}/copy"
            .replace("{" + "PrimaryDistributionId" + "}", localVarApiClient.escapeString(primaryDistributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (staging != null) {
            localVarHeaderParams.put("Staging", localVarApiClient.parameterToString(staging));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyDistribution20200531ValidateBeforeCall(String primaryDistributionId, CopyDistribution20200531Request copyDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean staging, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'primaryDistributionId' is set
        if (primaryDistributionId == null) {
            throw new ApiException("Missing the required parameter 'primaryDistributionId' when calling copyDistribution20200531(Async)");
        }

        // verify the required parameter 'copyDistribution20200531Request' is set
        if (copyDistribution20200531Request == null) {
            throw new ApiException("Missing the required parameter 'copyDistribution20200531Request' when calling copyDistribution20200531(Async)");
        }

        return copyDistribution20200531Call(primaryDistributionId, copyDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staging, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a staging distribution using the configuration of the provided primary distribution. A staging distribution is a copy of an existing distribution (called the primary distribution) that you can use in a continuous deployment workflow.&lt;/p&gt; &lt;p&gt;After you create a staging distribution, you can use &lt;code&gt;UpdateDistribution&lt;/code&gt; to modify the staging distribution&#39;s configuration. Then you can use &lt;code&gt;CreateContinuousDeploymentPolicy&lt;/code&gt; to incrementally move traffic to the staging distribution.&lt;/p&gt; &lt;p&gt;This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\&quot;&gt;CreateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CopyDistribution.html\&quot;&gt;CopyDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param primaryDistributionId The identifier of the primary distribution whose configuration you are copying. To get a distribution ID, use &lt;code&gt;ListDistributions&lt;/code&gt;. (required)
     * @param copyDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param staging The type of distribution that your primary distribution will be copied to. The only valid value is &lt;code&gt;True&lt;/code&gt;, indicating that you are copying to a staging distribution. (optional)
     * @param ifMatch The version identifier of the primary distribution whose configuration you are copying. This is the &lt;code&gt;ETag&lt;/code&gt; value returned in the response to &lt;code&gt;GetDistribution&lt;/code&gt; and &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (optional)
     * @return CopyDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
     </table>
     */
    public CopyDistributionResult copyDistribution20200531(String primaryDistributionId, CopyDistribution20200531Request copyDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean staging, String ifMatch) throws ApiException {
        ApiResponse<CopyDistributionResult> localVarResp = copyDistribution20200531WithHttpInfo(primaryDistributionId, copyDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staging, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a staging distribution using the configuration of the provided primary distribution. A staging distribution is a copy of an existing distribution (called the primary distribution) that you can use in a continuous deployment workflow.&lt;/p&gt; &lt;p&gt;After you create a staging distribution, you can use &lt;code&gt;UpdateDistribution&lt;/code&gt; to modify the staging distribution&#39;s configuration. Then you can use &lt;code&gt;CreateContinuousDeploymentPolicy&lt;/code&gt; to incrementally move traffic to the staging distribution.&lt;/p&gt; &lt;p&gt;This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\&quot;&gt;CreateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CopyDistribution.html\&quot;&gt;CopyDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param primaryDistributionId The identifier of the primary distribution whose configuration you are copying. To get a distribution ID, use &lt;code&gt;ListDistributions&lt;/code&gt;. (required)
     * @param copyDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param staging The type of distribution that your primary distribution will be copied to. The only valid value is &lt;code&gt;True&lt;/code&gt;, indicating that you are copying to a staging distribution. (optional)
     * @param ifMatch The version identifier of the primary distribution whose configuration you are copying. This is the &lt;code&gt;ETag&lt;/code&gt; value returned in the response to &lt;code&gt;GetDistribution&lt;/code&gt; and &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;CopyDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDistributionResult> copyDistribution20200531WithHttpInfo(String primaryDistributionId, CopyDistribution20200531Request copyDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean staging, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = copyDistribution20200531ValidateBeforeCall(primaryDistributionId, copyDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staging, ifMatch, null);
        Type localVarReturnType = new TypeToken<CopyDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a staging distribution using the configuration of the provided primary distribution. A staging distribution is a copy of an existing distribution (called the primary distribution) that you can use in a continuous deployment workflow.&lt;/p&gt; &lt;p&gt;After you create a staging distribution, you can use &lt;code&gt;UpdateDistribution&lt;/code&gt; to modify the staging distribution&#39;s configuration. Then you can use &lt;code&gt;CreateContinuousDeploymentPolicy&lt;/code&gt; to incrementally move traffic to the staging distribution.&lt;/p&gt; &lt;p&gt;This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\&quot;&gt;CreateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CopyDistribution.html\&quot;&gt;CopyDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param primaryDistributionId The identifier of the primary distribution whose configuration you are copying. To get a distribution ID, use &lt;code&gt;ListDistributions&lt;/code&gt;. (required)
     * @param copyDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param staging The type of distribution that your primary distribution will be copied to. The only valid value is &lt;code&gt;True&lt;/code&gt;, indicating that you are copying to a staging distribution. (optional)
     * @param ifMatch The version identifier of the primary distribution whose configuration you are copying. This is the &lt;code&gt;ETag&lt;/code&gt; value returned in the response to &lt;code&gt;GetDistribution&lt;/code&gt; and &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyDistribution20200531Async(String primaryDistributionId, CopyDistribution20200531Request copyDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean staging, String ifMatch, final ApiCallback<CopyDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyDistribution20200531ValidateBeforeCall(primaryDistributionId, copyDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staging, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<CopyDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCachePolicy20200531
     * @param createCachePolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CachePolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyCachePolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyHeadersInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyCookiesInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyQueryStringsInCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCachePolicy20200531Call(CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCachePolicy20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/cache-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCachePolicy20200531ValidateBeforeCall(CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCachePolicy20200531Request' is set
        if (createCachePolicy20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createCachePolicy20200531Request' when calling createCachePolicy20200531(Async)");
        }

        return createCachePolicy20200531Call(createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a cache policy.&lt;/p&gt; &lt;p&gt;After you create a cache policy, you can attach it to one or more cache behaviors. When it&#39;s attached to a cache behavior, the cache policy determines the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The values that CloudFront includes in the &lt;i&gt;cache key&lt;/i&gt;. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can&#39;t find an object in its cache that matches the request&#39;s cache key. If you want to send values to the origin but &lt;i&gt;not&lt;/i&gt; include them in the cache key, use &lt;code&gt;OriginRequestPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about cache policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html\&quot;&gt;Controlling the cache key&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createCachePolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCachePolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CachePolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyCachePolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyHeadersInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyCookiesInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyQueryStringsInCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public CreateCachePolicyResult createCachePolicy20200531(CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCachePolicyResult> localVarResp = createCachePolicy20200531WithHttpInfo(createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a cache policy.&lt;/p&gt; &lt;p&gt;After you create a cache policy, you can attach it to one or more cache behaviors. When it&#39;s attached to a cache behavior, the cache policy determines the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The values that CloudFront includes in the &lt;i&gt;cache key&lt;/i&gt;. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can&#39;t find an object in its cache that matches the request&#39;s cache key. If you want to send values to the origin but &lt;i&gt;not&lt;/i&gt; include them in the cache key, use &lt;code&gt;OriginRequestPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about cache policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html\&quot;&gt;Controlling the cache key&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createCachePolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCachePolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CachePolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyCachePolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyHeadersInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyCookiesInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyQueryStringsInCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCachePolicyResult> createCachePolicy20200531WithHttpInfo(CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCachePolicy20200531ValidateBeforeCall(createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCachePolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a cache policy.&lt;/p&gt; &lt;p&gt;After you create a cache policy, you can attach it to one or more cache behaviors. When it&#39;s attached to a cache behavior, the cache policy determines the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The values that CloudFront includes in the &lt;i&gt;cache key&lt;/i&gt;. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can&#39;t find an object in its cache that matches the request&#39;s cache key. If you want to send values to the origin but &lt;i&gt;not&lt;/i&gt; include them in the cache key, use &lt;code&gt;OriginRequestPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about cache policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html\&quot;&gt;Controlling the cache key&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createCachePolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CachePolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyCachePolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyHeadersInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyCookiesInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyQueryStringsInCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCachePolicy20200531Async(CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCachePolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCachePolicy20200531ValidateBeforeCall(createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCachePolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCloudFrontOriginAccessIdentity20200531
     * @param createCloudFrontOriginAccessIdentity20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudFrontOriginAccessIdentity20200531Call(CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCloudFrontOriginAccessIdentity20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-identity/cloudfront";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCloudFrontOriginAccessIdentity20200531Request' is set
        if (createCloudFrontOriginAccessIdentity20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createCloudFrontOriginAccessIdentity20200531Request' when calling createCloudFrontOriginAccessIdentity20200531(Async)");
        }

        return createCloudFrontOriginAccessIdentity20200531Call(createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateCloudFrontOriginAccessIdentityResult createCloudFrontOriginAccessIdentity20200531(CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCloudFrontOriginAccessIdentityResult> localVarResp = createCloudFrontOriginAccessIdentity20200531WithHttpInfo(createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCloudFrontOriginAccessIdentityResult> createCloudFrontOriginAccessIdentity20200531WithHttpInfo(CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudFrontOriginAccessIdentity20200531Async(CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContinuousDeploymentPolicy20200531
     * @param createContinuousDeploymentPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ContinuousDeploymentPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyContinuousDeploymentPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContinuousDeploymentPolicy20200531Call(CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContinuousDeploymentPolicy20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/continuous-deployment-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContinuousDeploymentPolicy20200531ValidateBeforeCall(CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createContinuousDeploymentPolicy20200531Request' is set
        if (createContinuousDeploymentPolicy20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createContinuousDeploymentPolicy20200531Request' when calling createContinuousDeploymentPolicy20200531(Async)");
        }

        return createContinuousDeploymentPolicy20200531Call(createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a continuous deployment policy that distributes traffic for a custom domain name to two different CloudFront distributions.&lt;/p&gt; &lt;p&gt;To use a continuous deployment policy, first use &lt;code&gt;CopyDistribution&lt;/code&gt; to create a staging distribution, then use &lt;code&gt;UpdateDistribution&lt;/code&gt; to modify the staging distribution&#39;s configuration.&lt;/p&gt; &lt;p&gt;After you create and update a staging distribution, you can use a continuous deployment policy to incrementally move traffic to the staging distribution. This workflow enables you to test changes to a distribution&#39;s configuration before moving all of your domain&#39;s production traffic to the new configuration.&lt;/p&gt;
     * @param createContinuousDeploymentPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateContinuousDeploymentPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ContinuousDeploymentPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyContinuousDeploymentPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
     </table>
     */
    public CreateContinuousDeploymentPolicyResult createContinuousDeploymentPolicy20200531(CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateContinuousDeploymentPolicyResult> localVarResp = createContinuousDeploymentPolicy20200531WithHttpInfo(createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a continuous deployment policy that distributes traffic for a custom domain name to two different CloudFront distributions.&lt;/p&gt; &lt;p&gt;To use a continuous deployment policy, first use &lt;code&gt;CopyDistribution&lt;/code&gt; to create a staging distribution, then use &lt;code&gt;UpdateDistribution&lt;/code&gt; to modify the staging distribution&#39;s configuration.&lt;/p&gt; &lt;p&gt;After you create and update a staging distribution, you can use a continuous deployment policy to incrementally move traffic to the staging distribution. This workflow enables you to test changes to a distribution&#39;s configuration before moving all of your domain&#39;s production traffic to the new configuration.&lt;/p&gt;
     * @param createContinuousDeploymentPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateContinuousDeploymentPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ContinuousDeploymentPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyContinuousDeploymentPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateContinuousDeploymentPolicyResult> createContinuousDeploymentPolicy20200531WithHttpInfo(CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createContinuousDeploymentPolicy20200531ValidateBeforeCall(createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateContinuousDeploymentPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a continuous deployment policy that distributes traffic for a custom domain name to two different CloudFront distributions.&lt;/p&gt; &lt;p&gt;To use a continuous deployment policy, first use &lt;code&gt;CopyDistribution&lt;/code&gt; to create a staging distribution, then use &lt;code&gt;UpdateDistribution&lt;/code&gt; to modify the staging distribution&#39;s configuration.&lt;/p&gt; &lt;p&gt;After you create and update a staging distribution, you can use a continuous deployment policy to incrementally move traffic to the staging distribution. This workflow enables you to test changes to a distribution&#39;s configuration before moving all of your domain&#39;s production traffic to the new configuration.&lt;/p&gt;
     * @param createContinuousDeploymentPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ContinuousDeploymentPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyContinuousDeploymentPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContinuousDeploymentPolicy20200531Async(CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateContinuousDeploymentPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContinuousDeploymentPolicy20200531ValidateBeforeCall(createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateContinuousDeploymentPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDistribution20200531
     * @param createDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistribution20200531Call(CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistribution20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDistribution20200531ValidateBeforeCall(CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDistribution20200531Request' is set
        if (createDistribution20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createDistribution20200531Request' when calling createDistribution20200531(Async)");
        }

        return createDistribution20200531Call(createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a CloudFront distribution.
     * @param createDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public CreateDistributionResult createDistribution20200531(CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDistributionResult> localVarResp = createDistribution20200531WithHttpInfo(createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a CloudFront distribution.
     * @param createDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDistributionResult> createDistribution20200531WithHttpInfo(CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDistribution20200531ValidateBeforeCall(createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a CloudFront distribution.
     * @param createDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistribution20200531Async(CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDistribution20200531ValidateBeforeCall(createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDistributionWithTags20200531
     * @param withTags  (required)
     * @param createDistributionWithTags20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 545 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistributionWithTags20200531Call(Boolean withTags, CreateDistributionWithTags20200531Request createDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistributionWithTags20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution#WithTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WithTags", withTags));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDistributionWithTags20200531ValidateBeforeCall(Boolean withTags, CreateDistributionWithTags20200531Request createDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'withTags' is set
        if (withTags == null) {
            throw new ApiException("Missing the required parameter 'withTags' when calling createDistributionWithTags20200531(Async)");
        }

        // verify the required parameter 'createDistributionWithTags20200531Request' is set
        if (createDistributionWithTags20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createDistributionWithTags20200531Request' when calling createDistributionWithTags20200531(Async)");
        }

        return createDistributionWithTags20200531Call(withTags, createDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Create a new distribution with tags. This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\&quot;&gt;CreateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param withTags  (required)
     * @param createDistributionWithTags20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDistributionWithTagsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 545 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public CreateDistributionWithTagsResult createDistributionWithTags20200531(Boolean withTags, CreateDistributionWithTags20200531Request createDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDistributionWithTagsResult> localVarResp = createDistributionWithTags20200531WithHttpInfo(withTags, createDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Create a new distribution with tags. This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\&quot;&gt;CreateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param withTags  (required)
     * @param createDistributionWithTags20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDistributionWithTagsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 545 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDistributionWithTagsResult> createDistributionWithTags20200531WithHttpInfo(Boolean withTags, CreateDistributionWithTags20200531Request createDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDistributionWithTags20200531ValidateBeforeCall(withTags, createDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDistributionWithTagsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Create a new distribution with tags. This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\&quot;&gt;CreateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param withTags  (required)
     * @param createDistributionWithTags20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 545 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistributionWithTags20200531Async(Boolean withTags, CreateDistributionWithTags20200531Request createDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDistributionWithTagsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDistributionWithTags20200531ValidateBeforeCall(withTags, createDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDistributionWithTagsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFieldLevelEncryptionConfig20200531
     * @param createFieldLevelEncryptionConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyFieldLevelEncryptionConfigs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldLevelEncryptionConfig20200531Call(CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFieldLevelEncryptionConfig20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldLevelEncryptionConfig20200531ValidateBeforeCall(CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFieldLevelEncryptionConfig20200531Request' is set
        if (createFieldLevelEncryptionConfig20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createFieldLevelEncryptionConfig20200531Request' when calling createFieldLevelEncryptionConfig20200531(Async)");
        }

        return createFieldLevelEncryptionConfig20200531Call(createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new field-level encryption configuration.
     * @param createFieldLevelEncryptionConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFieldLevelEncryptionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyFieldLevelEncryptionConfigs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public CreateFieldLevelEncryptionConfigResult createFieldLevelEncryptionConfig20200531(CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFieldLevelEncryptionConfigResult> localVarResp = createFieldLevelEncryptionConfig20200531WithHttpInfo(createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new field-level encryption configuration.
     * @param createFieldLevelEncryptionConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFieldLevelEncryptionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyFieldLevelEncryptionConfigs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFieldLevelEncryptionConfigResult> createFieldLevelEncryptionConfig20200531WithHttpInfo(CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFieldLevelEncryptionConfig20200531ValidateBeforeCall(createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFieldLevelEncryptionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new field-level encryption configuration.
     * @param createFieldLevelEncryptionConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyFieldLevelEncryptionConfigs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldLevelEncryptionConfig20200531Async(CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFieldLevelEncryptionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldLevelEncryptionConfig20200531ValidateBeforeCall(createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFieldLevelEncryptionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFieldLevelEncryptionProfile20200531
     * @param createFieldLevelEncryptionProfile20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldLevelEncryptionProfile20200531Call(CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFieldLevelEncryptionProfile20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldLevelEncryptionProfile20200531ValidateBeforeCall(CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFieldLevelEncryptionProfile20200531Request' is set
        if (createFieldLevelEncryptionProfile20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createFieldLevelEncryptionProfile20200531Request' when calling createFieldLevelEncryptionProfile20200531(Async)");
        }

        return createFieldLevelEncryptionProfile20200531Call(createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a field-level encryption profile.
     * @param createFieldLevelEncryptionProfile20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFieldLevelEncryptionProfileResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public CreateFieldLevelEncryptionProfileResult createFieldLevelEncryptionProfile20200531(CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFieldLevelEncryptionProfileResult> localVarResp = createFieldLevelEncryptionProfile20200531WithHttpInfo(createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a field-level encryption profile.
     * @param createFieldLevelEncryptionProfile20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFieldLevelEncryptionProfileResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFieldLevelEncryptionProfileResult> createFieldLevelEncryptionProfile20200531WithHttpInfo(CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFieldLevelEncryptionProfile20200531ValidateBeforeCall(createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFieldLevelEncryptionProfileResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a field-level encryption profile.
     * @param createFieldLevelEncryptionProfile20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldLevelEncryptionProfile20200531Async(CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFieldLevelEncryptionProfileResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldLevelEncryptionProfile20200531ValidateBeforeCall(createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFieldLevelEncryptionProfileResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFunction20200531
     * @param createFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyFunctions </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FunctionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FunctionSizeLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFunction20200531Call(CreateFunction20200531Request createFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFunction20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/function";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFunction20200531ValidateBeforeCall(CreateFunction20200531Request createFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFunction20200531Request' is set
        if (createFunction20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createFunction20200531Request' when calling createFunction20200531(Async)");
        }

        return createFunction20200531Call(createFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a CloudFront function.&lt;/p&gt; &lt;p&gt;To create a function, you provide the function code and some configuration information about the function. The response contains an Amazon Resource Name (ARN) that uniquely identifies the function.&lt;/p&gt; &lt;p&gt;When you create a function, it&#39;s in the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage. In this stage, you can test the function with &lt;code&gt;TestFunction&lt;/code&gt;, and update it with &lt;code&gt;UpdateFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you&#39;re ready to use your function with a CloudFront distribution, use &lt;code&gt;PublishFunction&lt;/code&gt; to copy the function from the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage to &lt;code&gt;LIVE&lt;/code&gt;. When it&#39;s live, you can attach the function to a distribution&#39;s cache behavior, using the function&#39;s ARN.&lt;/p&gt;
     * @param createFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFunctionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyFunctions </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FunctionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FunctionSizeLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public CreateFunctionResult createFunction20200531(CreateFunction20200531Request createFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFunctionResult> localVarResp = createFunction20200531WithHttpInfo(createFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a CloudFront function.&lt;/p&gt; &lt;p&gt;To create a function, you provide the function code and some configuration information about the function. The response contains an Amazon Resource Name (ARN) that uniquely identifies the function.&lt;/p&gt; &lt;p&gt;When you create a function, it&#39;s in the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage. In this stage, you can test the function with &lt;code&gt;TestFunction&lt;/code&gt;, and update it with &lt;code&gt;UpdateFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you&#39;re ready to use your function with a CloudFront distribution, use &lt;code&gt;PublishFunction&lt;/code&gt; to copy the function from the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage to &lt;code&gt;LIVE&lt;/code&gt;. When it&#39;s live, you can attach the function to a distribution&#39;s cache behavior, using the function&#39;s ARN.&lt;/p&gt;
     * @param createFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFunctionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyFunctions </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FunctionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FunctionSizeLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFunctionResult> createFunction20200531WithHttpInfo(CreateFunction20200531Request createFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFunction20200531ValidateBeforeCall(createFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFunctionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a CloudFront function.&lt;/p&gt; &lt;p&gt;To create a function, you provide the function code and some configuration information about the function. The response contains an Amazon Resource Name (ARN) that uniquely identifies the function.&lt;/p&gt; &lt;p&gt;When you create a function, it&#39;s in the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage. In this stage, you can test the function with &lt;code&gt;TestFunction&lt;/code&gt;, and update it with &lt;code&gt;UpdateFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you&#39;re ready to use your function with a CloudFront distribution, use &lt;code&gt;PublishFunction&lt;/code&gt; to copy the function from the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage to &lt;code&gt;LIVE&lt;/code&gt;. When it&#39;s live, you can attach the function to a distribution&#39;s cache behavior, using the function&#39;s ARN.&lt;/p&gt;
     * @param createFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyFunctions </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FunctionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FunctionSizeLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFunction20200531Async(CreateFunction20200531Request createFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFunctionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFunction20200531ValidateBeforeCall(createFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFunctionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInvalidation20200531
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvalidation20200531Call(String distributionId, CreateInvalidation20200531Request createInvalidation20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInvalidation20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{DistributionId}/invalidation"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvalidation20200531ValidateBeforeCall(String distributionId, CreateInvalidation20200531Request createInvalidation20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling createInvalidation20200531(Async)");
        }

        // verify the required parameter 'createInvalidation20200531Request' is set
        if (createInvalidation20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createInvalidation20200531Request' when calling createInvalidation20200531(Async)");
        }

        return createInvalidation20200531Call(distributionId, createInvalidation20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new invalidation.
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateInvalidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateInvalidationResult createInvalidation20200531(String distributionId, CreateInvalidation20200531Request createInvalidation20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateInvalidationResult> localVarResp = createInvalidation20200531WithHttpInfo(distributionId, createInvalidation20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new invalidation.
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateInvalidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateInvalidationResult> createInvalidation20200531WithHttpInfo(String distributionId, CreateInvalidation20200531Request createInvalidation20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createInvalidation20200531ValidateBeforeCall(distributionId, createInvalidation20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateInvalidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new invalidation.
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvalidation20200531Async(String distributionId, CreateInvalidation20200531Request createInvalidation20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateInvalidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvalidation20200531ValidateBeforeCall(distributionId, createInvalidation20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateInvalidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createKeyGroup20200531
     * @param createKeyGroup20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> KeyGroupAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyKeyGroups </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPublicKeysInKeyGroup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyGroup20200531Call(CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createKeyGroup20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/key-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKeyGroup20200531ValidateBeforeCall(CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createKeyGroup20200531Request' is set
        if (createKeyGroup20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createKeyGroup20200531Request' when calling createKeyGroup20200531(Async)");
        }

        return createKeyGroup20200531Call(createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a key group that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;CloudFront signed URLs and signed cookies&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a key group, you must specify at least one public key for the key group. After you create a key group, you can reference it from one or more cache behaviors. When you reference a key group in a cache behavior, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving private content&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createKeyGroup20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateKeyGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> KeyGroupAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyKeyGroups </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPublicKeysInKeyGroup </td><td>  -  </td></tr>
     </table>
     */
    public CreateKeyGroupResult createKeyGroup20200531(CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateKeyGroupResult> localVarResp = createKeyGroup20200531WithHttpInfo(createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a key group that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;CloudFront signed URLs and signed cookies&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a key group, you must specify at least one public key for the key group. After you create a key group, you can reference it from one or more cache behaviors. When you reference a key group in a cache behavior, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving private content&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createKeyGroup20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateKeyGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> KeyGroupAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyKeyGroups </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPublicKeysInKeyGroup </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateKeyGroupResult> createKeyGroup20200531WithHttpInfo(CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createKeyGroup20200531ValidateBeforeCall(createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateKeyGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a key group that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;CloudFront signed URLs and signed cookies&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a key group, you must specify at least one public key for the key group. After you create a key group, you can reference it from one or more cache behaviors. When you reference a key group in a cache behavior, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving private content&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createKeyGroup20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> KeyGroupAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyKeyGroups </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPublicKeysInKeyGroup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyGroup20200531Async(CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateKeyGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKeyGroup20200531ValidateBeforeCall(createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateKeyGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMonitoringSubscription20200531
     * @param distributionId The ID of the distribution that you are enabling metrics for. (required)
     * @param createMonitoringSubscription20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MonitoringSubscriptionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMonitoringSubscription20200531Call(String distributionId, CreateMonitoringSubscription20200531Request createMonitoringSubscription20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMonitoringSubscription20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributions/{DistributionId}/monitoring-subscription/"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMonitoringSubscription20200531ValidateBeforeCall(String distributionId, CreateMonitoringSubscription20200531Request createMonitoringSubscription20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling createMonitoringSubscription20200531(Async)");
        }

        // verify the required parameter 'createMonitoringSubscription20200531Request' is set
        if (createMonitoringSubscription20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createMonitoringSubscription20200531Request' when calling createMonitoringSubscription20200531(Async)");
        }

        return createMonitoringSubscription20200531Call(distributionId, createMonitoringSubscription20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables additional CloudWatch metrics for the specified CloudFront distribution. The additional metrics incur an additional cost.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional\&quot;&gt;Viewing additional CloudFront distribution metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param distributionId The ID of the distribution that you are enabling metrics for. (required)
     * @param createMonitoringSubscription20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateMonitoringSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MonitoringSubscriptionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public CreateMonitoringSubscriptionResult createMonitoringSubscription20200531(String distributionId, CreateMonitoringSubscription20200531Request createMonitoringSubscription20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateMonitoringSubscriptionResult> localVarResp = createMonitoringSubscription20200531WithHttpInfo(distributionId, createMonitoringSubscription20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Enables additional CloudWatch metrics for the specified CloudFront distribution. The additional metrics incur an additional cost.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional\&quot;&gt;Viewing additional CloudFront distribution metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param distributionId The ID of the distribution that you are enabling metrics for. (required)
     * @param createMonitoringSubscription20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateMonitoringSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MonitoringSubscriptionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMonitoringSubscriptionResult> createMonitoringSubscription20200531WithHttpInfo(String distributionId, CreateMonitoringSubscription20200531Request createMonitoringSubscription20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createMonitoringSubscription20200531ValidateBeforeCall(distributionId, createMonitoringSubscription20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateMonitoringSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables additional CloudWatch metrics for the specified CloudFront distribution. The additional metrics incur an additional cost.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional\&quot;&gt;Viewing additional CloudFront distribution metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param distributionId The ID of the distribution that you are enabling metrics for. (required)
     * @param createMonitoringSubscription20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MonitoringSubscriptionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMonitoringSubscription20200531Async(String distributionId, CreateMonitoringSubscription20200531Request createMonitoringSubscription20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateMonitoringSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMonitoringSubscription20200531ValidateBeforeCall(distributionId, createMonitoringSubscription20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateMonitoringSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOriginAccessControl20200531
     * @param createOriginAccessControl20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OriginAccessControlAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyOriginAccessControls </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOriginAccessControl20200531Call(CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOriginAccessControl20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-control";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOriginAccessControl20200531ValidateBeforeCall(CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOriginAccessControl20200531Request' is set
        if (createOriginAccessControl20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createOriginAccessControl20200531Request' when calling createOriginAccessControl20200531(Async)");
        }

        return createOriginAccessControl20200531Call(createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new origin access control in CloudFront. After you create an origin access control, you can add it to an origin in a CloudFront distribution so that CloudFront sends authenticated (signed) requests to the origin.&lt;/p&gt; &lt;p&gt;This makes it possible to block public access to the origin, allowing viewers (users) to access the origin&#39;s content only through CloudFront.&lt;/p&gt; &lt;p&gt;For more information about using a CloudFront origin access control, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-origin.html\&quot;&gt;Restricting access to an Amazon Web Services origin&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createOriginAccessControl20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateOriginAccessControlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OriginAccessControlAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyOriginAccessControls </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public CreateOriginAccessControlResult createOriginAccessControl20200531(CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateOriginAccessControlResult> localVarResp = createOriginAccessControl20200531WithHttpInfo(createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new origin access control in CloudFront. After you create an origin access control, you can add it to an origin in a CloudFront distribution so that CloudFront sends authenticated (signed) requests to the origin.&lt;/p&gt; &lt;p&gt;This makes it possible to block public access to the origin, allowing viewers (users) to access the origin&#39;s content only through CloudFront.&lt;/p&gt; &lt;p&gt;For more information about using a CloudFront origin access control, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-origin.html\&quot;&gt;Restricting access to an Amazon Web Services origin&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createOriginAccessControl20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateOriginAccessControlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OriginAccessControlAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyOriginAccessControls </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOriginAccessControlResult> createOriginAccessControl20200531WithHttpInfo(CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createOriginAccessControl20200531ValidateBeforeCall(createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateOriginAccessControlResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new origin access control in CloudFront. After you create an origin access control, you can add it to an origin in a CloudFront distribution so that CloudFront sends authenticated (signed) requests to the origin.&lt;/p&gt; &lt;p&gt;This makes it possible to block public access to the origin, allowing viewers (users) to access the origin&#39;s content only through CloudFront.&lt;/p&gt; &lt;p&gt;For more information about using a CloudFront origin access control, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-origin.html\&quot;&gt;Restricting access to an Amazon Web Services origin&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createOriginAccessControl20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OriginAccessControlAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyOriginAccessControls </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOriginAccessControl20200531Async(CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateOriginAccessControlResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOriginAccessControl20200531ValidateBeforeCall(createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateOriginAccessControlResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOriginRequestPolicy20200531
     * @param createOriginRequestPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OriginRequestPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyOriginRequestPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyHeadersInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyCookiesInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyQueryStringsInOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOriginRequestPolicy20200531Call(CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOriginRequestPolicy20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-request-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOriginRequestPolicy20200531ValidateBeforeCall(CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOriginRequestPolicy20200531Request' is set
        if (createOriginRequestPolicy20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createOriginRequestPolicy20200531Request' when calling createOriginRequestPolicy20200531(Async)");
        }

        return createOriginRequestPolicy20200531Call(createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an origin request policy.&lt;/p&gt; &lt;p&gt;After you create an origin request policy, you can attach it to one or more cache behaviors. When it&#39;s attached to a cache behavior, the origin request policy determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The request body and the URL path (without the domain name) from the viewer request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The headers that CloudFront automatically includes in every origin request, including &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;User-Agent&lt;/code&gt;, and &lt;code&gt;X-Amz-Cf-Id&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CloudFront sends a request when it can&#39;t find a valid object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use &lt;code&gt;CachePolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about origin request policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html\&quot;&gt;Controlling origin requests&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createOriginRequestPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateOriginRequestPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OriginRequestPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyOriginRequestPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyHeadersInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyCookiesInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyQueryStringsInOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public CreateOriginRequestPolicyResult createOriginRequestPolicy20200531(CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateOriginRequestPolicyResult> localVarResp = createOriginRequestPolicy20200531WithHttpInfo(createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an origin request policy.&lt;/p&gt; &lt;p&gt;After you create an origin request policy, you can attach it to one or more cache behaviors. When it&#39;s attached to a cache behavior, the origin request policy determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The request body and the URL path (without the domain name) from the viewer request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The headers that CloudFront automatically includes in every origin request, including &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;User-Agent&lt;/code&gt;, and &lt;code&gt;X-Amz-Cf-Id&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CloudFront sends a request when it can&#39;t find a valid object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use &lt;code&gt;CachePolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about origin request policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html\&quot;&gt;Controlling origin requests&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createOriginRequestPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateOriginRequestPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OriginRequestPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyOriginRequestPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyHeadersInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyCookiesInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyQueryStringsInOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOriginRequestPolicyResult> createOriginRequestPolicy20200531WithHttpInfo(CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createOriginRequestPolicy20200531ValidateBeforeCall(createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateOriginRequestPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an origin request policy.&lt;/p&gt; &lt;p&gt;After you create an origin request policy, you can attach it to one or more cache behaviors. When it&#39;s attached to a cache behavior, the origin request policy determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The request body and the URL path (without the domain name) from the viewer request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The headers that CloudFront automatically includes in every origin request, including &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;User-Agent&lt;/code&gt;, and &lt;code&gt;X-Amz-Cf-Id&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CloudFront sends a request when it can&#39;t find a valid object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use &lt;code&gt;CachePolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about origin request policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html\&quot;&gt;Controlling origin requests&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createOriginRequestPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OriginRequestPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyOriginRequestPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyHeadersInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyCookiesInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyQueryStringsInOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOriginRequestPolicy20200531Async(CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateOriginRequestPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOriginRequestPolicy20200531ValidateBeforeCall(createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateOriginRequestPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPublicKey20200531
     * @param createPublicKey20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PublicKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPublicKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPublicKey20200531Call(CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPublicKey20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/public-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPublicKey20200531ValidateBeforeCall(CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPublicKey20200531Request' is set
        if (createPublicKey20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createPublicKey20200531Request' when calling createPublicKey20200531(Async)");
        }

        return createPublicKey20200531Call(createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Uploads a public key to CloudFront that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;signed URLs and signed cookies&lt;/a&gt;, or with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html\&quot;&gt;field-level encryption&lt;/a&gt;.
     * @param createPublicKey20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreatePublicKeyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PublicKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPublicKeys </td><td>  -  </td></tr>
     </table>
     */
    public CreatePublicKeyResult createPublicKey20200531(CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreatePublicKeyResult> localVarResp = createPublicKey20200531WithHttpInfo(createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Uploads a public key to CloudFront that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;signed URLs and signed cookies&lt;/a&gt;, or with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html\&quot;&gt;field-level encryption&lt;/a&gt;.
     * @param createPublicKey20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreatePublicKeyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PublicKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPublicKeys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePublicKeyResult> createPublicKey20200531WithHttpInfo(CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createPublicKey20200531ValidateBeforeCall(createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreatePublicKeyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Uploads a public key to CloudFront that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;signed URLs and signed cookies&lt;/a&gt;, or with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html\&quot;&gt;field-level encryption&lt;/a&gt;.
     * @param createPublicKey20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PublicKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPublicKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPublicKey20200531Async(CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreatePublicKeyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPublicKey20200531ValidateBeforeCall(createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreatePublicKeyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRealtimeLogConfig20200531
     * @param createRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RealtimeLogConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRealtimeLogConfigs </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRealtimeLogConfig20200531Call(CreateRealtimeLogConfig20200531Request createRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRealtimeLogConfig20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/realtime-log-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRealtimeLogConfig20200531ValidateBeforeCall(CreateRealtimeLogConfig20200531Request createRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createRealtimeLogConfig20200531Request' is set
        if (createRealtimeLogConfig20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createRealtimeLogConfig20200531Request' when calling createRealtimeLogConfig20200531(Async)");
        }

        return createRealtimeLogConfig20200531Call(createRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a real-time log configuration.&lt;/p&gt; &lt;p&gt;After you create a real-time log configuration, you can attach it to one or more cache behaviors to send real-time log data to the specified Amazon Kinesis data stream.&lt;/p&gt; &lt;p&gt;For more information about real-time log configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html\&quot;&gt;Real-time logs&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRealtimeLogConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RealtimeLogConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRealtimeLogConfigs </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public CreateRealtimeLogConfigResult createRealtimeLogConfig20200531(CreateRealtimeLogConfig20200531Request createRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRealtimeLogConfigResult> localVarResp = createRealtimeLogConfig20200531WithHttpInfo(createRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a real-time log configuration.&lt;/p&gt; &lt;p&gt;After you create a real-time log configuration, you can attach it to one or more cache behaviors to send real-time log data to the specified Amazon Kinesis data stream.&lt;/p&gt; &lt;p&gt;For more information about real-time log configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html\&quot;&gt;Real-time logs&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRealtimeLogConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RealtimeLogConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRealtimeLogConfigs </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRealtimeLogConfigResult> createRealtimeLogConfig20200531WithHttpInfo(CreateRealtimeLogConfig20200531Request createRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRealtimeLogConfig20200531ValidateBeforeCall(createRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRealtimeLogConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a real-time log configuration.&lt;/p&gt; &lt;p&gt;After you create a real-time log configuration, you can attach it to one or more cache behaviors to send real-time log data to the specified Amazon Kinesis data stream.&lt;/p&gt; &lt;p&gt;For more information about real-time log configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html\&quot;&gt;Real-time logs&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RealtimeLogConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRealtimeLogConfigs </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRealtimeLogConfig20200531Async(CreateRealtimeLogConfig20200531Request createRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRealtimeLogConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRealtimeLogConfig20200531ValidateBeforeCall(createRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRealtimeLogConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createResponseHeadersPolicy20200531
     * @param createResponseHeadersPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResponseHeadersPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyResponseHeadersPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyCustomHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooLongCSPInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRemoveHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResponseHeadersPolicy20200531Call(CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createResponseHeadersPolicy20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/response-headers-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResponseHeadersPolicy20200531ValidateBeforeCall(CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createResponseHeadersPolicy20200531Request' is set
        if (createResponseHeadersPolicy20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createResponseHeadersPolicy20200531Request' when calling createResponseHeadersPolicy20200531(Async)");
        }

        return createResponseHeadersPolicy20200531Call(createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a response headers policy.&lt;/p&gt; &lt;p&gt;A response headers policy contains information about a set of HTTP headers. To create a response headers policy, you provide some metadata about the policy and a set of configurations that specify the headers.&lt;/p&gt; &lt;p&gt;After you create a response headers policy, you can use its ID to attach it to one or more cache behaviors in a CloudFront distribution. When it&#39;s attached to a cache behavior, the response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to requests that match the cache behavior. CloudFront adds or removes response headers according to the configuration of the response headers policy.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/modifying-response-headers.html\&quot;&gt;Adding or removing HTTP headers in CloudFront responses&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createResponseHeadersPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateResponseHeadersPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResponseHeadersPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyResponseHeadersPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyCustomHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooLongCSPInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRemoveHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public CreateResponseHeadersPolicyResult createResponseHeadersPolicy20200531(CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateResponseHeadersPolicyResult> localVarResp = createResponseHeadersPolicy20200531WithHttpInfo(createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a response headers policy.&lt;/p&gt; &lt;p&gt;A response headers policy contains information about a set of HTTP headers. To create a response headers policy, you provide some metadata about the policy and a set of configurations that specify the headers.&lt;/p&gt; &lt;p&gt;After you create a response headers policy, you can use its ID to attach it to one or more cache behaviors in a CloudFront distribution. When it&#39;s attached to a cache behavior, the response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to requests that match the cache behavior. CloudFront adds or removes response headers according to the configuration of the response headers policy.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/modifying-response-headers.html\&quot;&gt;Adding or removing HTTP headers in CloudFront responses&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createResponseHeadersPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateResponseHeadersPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResponseHeadersPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyResponseHeadersPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyCustomHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooLongCSPInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRemoveHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateResponseHeadersPolicyResult> createResponseHeadersPolicy20200531WithHttpInfo(CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createResponseHeadersPolicy20200531ValidateBeforeCall(createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateResponseHeadersPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a response headers policy.&lt;/p&gt; &lt;p&gt;A response headers policy contains information about a set of HTTP headers. To create a response headers policy, you provide some metadata about the policy and a set of configurations that specify the headers.&lt;/p&gt; &lt;p&gt;After you create a response headers policy, you can use its ID to attach it to one or more cache behaviors in a CloudFront distribution. When it&#39;s attached to a cache behavior, the response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to requests that match the cache behavior. CloudFront adds or removes response headers according to the configuration of the response headers policy.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/modifying-response-headers.html\&quot;&gt;Adding or removing HTTP headers in CloudFront responses&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param createResponseHeadersPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResponseHeadersPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyResponseHeadersPolicies </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyCustomHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooLongCSPInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRemoveHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResponseHeadersPolicy20200531Async(CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateResponseHeadersPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResponseHeadersPolicy20200531ValidateBeforeCall(createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateResponseHeadersPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamingDistribution20200531
     * @param createStreamingDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistribution20200531Call(CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistribution20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/streaming-distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamingDistribution20200531ValidateBeforeCall(CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createStreamingDistribution20200531Request' is set
        if (createStreamingDistribution20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistribution20200531Request' when calling createStreamingDistribution20200531(Async)");
        }

        return createStreamingDistribution20200531Call(createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, &lt;a href&#x3D;\&quot;http://forums.aws.amazon.com/ann.jspa?annID&#x3D;7356\&quot;&gt;read the announcement&lt;/a&gt; on the Amazon CloudFront discussion forum.
     * @param createStreamingDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamingDistributionResult createStreamingDistribution20200531(CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStreamingDistributionResult> localVarResp = createStreamingDistribution20200531WithHttpInfo(createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, &lt;a href&#x3D;\&quot;http://forums.aws.amazon.com/ann.jspa?annID&#x3D;7356\&quot;&gt;read the announcement&lt;/a&gt; on the Amazon CloudFront discussion forum.
     * @param createStreamingDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamingDistributionResult> createStreamingDistribution20200531WithHttpInfo(CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStreamingDistribution20200531ValidateBeforeCall(createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, &lt;a href&#x3D;\&quot;http://forums.aws.amazon.com/ann.jspa?annID&#x3D;7356\&quot;&gt;read the announcement&lt;/a&gt; on the Amazon CloudFront discussion forum.
     * @param createStreamingDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistribution20200531Async(CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamingDistribution20200531ValidateBeforeCall(createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamingDistributionWithTags20200531
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistributionWithTags20200531Call(Boolean withTags, CreateStreamingDistributionWithTags20200531Request createStreamingDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistributionWithTags20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/streaming-distribution#WithTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WithTags", withTags));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamingDistributionWithTags20200531ValidateBeforeCall(Boolean withTags, CreateStreamingDistributionWithTags20200531Request createStreamingDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'withTags' is set
        if (withTags == null) {
            throw new ApiException("Missing the required parameter 'withTags' when calling createStreamingDistributionWithTags20200531(Async)");
        }

        // verify the required parameter 'createStreamingDistributionWithTags20200531Request' is set
        if (createStreamingDistributionWithTags20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistributionWithTags20200531Request' when calling createStreamingDistributionWithTags20200531(Async)");
        }

        return createStreamingDistributionWithTags20200531Call(withTags, createStreamingDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, &lt;a href&#x3D;\&quot;http://forums.aws.amazon.com/ann.jspa?annID&#x3D;7356\&quot;&gt;read the announcement&lt;/a&gt; on the Amazon CloudFront discussion forum.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStreamingDistributionWithTagsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamingDistributionWithTagsResult createStreamingDistributionWithTags20200531(Boolean withTags, CreateStreamingDistributionWithTags20200531Request createStreamingDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStreamingDistributionWithTagsResult> localVarResp = createStreamingDistributionWithTags20200531WithHttpInfo(withTags, createStreamingDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, &lt;a href&#x3D;\&quot;http://forums.aws.amazon.com/ann.jspa?annID&#x3D;7356\&quot;&gt;read the announcement&lt;/a&gt; on the Amazon CloudFront discussion forum.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStreamingDistributionWithTagsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamingDistributionWithTagsResult> createStreamingDistributionWithTags20200531WithHttpInfo(Boolean withTags, CreateStreamingDistributionWithTags20200531Request createStreamingDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStreamingDistributionWithTags20200531ValidateBeforeCall(withTags, createStreamingDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionWithTagsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, &lt;a href&#x3D;\&quot;http://forums.aws.amazon.com/ann.jspa?annID&#x3D;7356\&quot;&gt;read the announcement&lt;/a&gt; on the Amazon CloudFront discussion forum.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistributionWithTags20200531Async(Boolean withTags, CreateStreamingDistributionWithTags20200531Request createStreamingDistributionWithTags20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStreamingDistributionWithTagsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamingDistributionWithTags20200531ValidateBeforeCall(withTags, createStreamingDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionWithTagsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCachePolicy20200531
     * @param id The unique identifier for the cache policy that you are deleting. To get the identifier, you can use &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the cache policy that you are deleting. The version is the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListCachePolicies&lt;/code&gt;, &lt;code&gt;GetCachePolicy&lt;/code&gt;, or &lt;code&gt;GetCachePolicyConfig&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CachePolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCachePolicy20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/cache-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCachePolicy20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCachePolicy20200531(Async)");
        }

        return deleteCachePolicy20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a cache policy.&lt;/p&gt; &lt;p&gt;You cannot delete a cache policy if it&#39;s attached to a cache behavior. First update your distributions to remove the cache policy from all cache behaviors, then delete the cache policy.&lt;/p&gt; &lt;p&gt;To delete a cache policy, you must provide the policy&#39;s identifier and version. To get these values, you can use &lt;code&gt;ListCachePolicies&lt;/code&gt; or &lt;code&gt;GetCachePolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy that you are deleting. To get the identifier, you can use &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the cache policy that you are deleting. The version is the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListCachePolicies&lt;/code&gt;, &lt;code&gt;GetCachePolicy&lt;/code&gt;, or &lt;code&gt;GetCachePolicyConfig&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CachePolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCachePolicy20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteCachePolicy20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Deletes a cache policy.&lt;/p&gt; &lt;p&gt;You cannot delete a cache policy if it&#39;s attached to a cache behavior. First update your distributions to remove the cache policy from all cache behaviors, then delete the cache policy.&lt;/p&gt; &lt;p&gt;To delete a cache policy, you must provide the policy&#39;s identifier and version. To get these values, you can use &lt;code&gt;ListCachePolicies&lt;/code&gt; or &lt;code&gt;GetCachePolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy that you are deleting. To get the identifier, you can use &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the cache policy that you are deleting. The version is the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListCachePolicies&lt;/code&gt;, &lt;code&gt;GetCachePolicy&lt;/code&gt;, or &lt;code&gt;GetCachePolicyConfig&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CachePolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCachePolicy20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteCachePolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a cache policy.&lt;/p&gt; &lt;p&gt;You cannot delete a cache policy if it&#39;s attached to a cache behavior. First update your distributions to remove the cache policy from all cache behaviors, then delete the cache policy.&lt;/p&gt; &lt;p&gt;To delete a cache policy, you must provide the policy&#39;s identifier and version. To get these values, you can use &lt;code&gt;ListCachePolicies&lt;/code&gt; or &lt;code&gt;GetCachePolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy that you are deleting. To get the identifier, you can use &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the cache policy that you are deleting. The version is the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListCachePolicies&lt;/code&gt;, &lt;code&gt;GetCachePolicy&lt;/code&gt;, or &lt;code&gt;GetCachePolicyConfig&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CachePolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCachePolicy20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCachePolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCloudFrontOriginAccessIdentity20200531
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudFrontOriginAccessIdentity20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-identity/cloudfront/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCloudFrontOriginAccessIdentity20200531(Async)");
        }

        return deleteCloudFrontOriginAccessIdentity20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Delete an origin access identity.
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCloudFrontOriginAccessIdentity20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteCloudFrontOriginAccessIdentity20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Delete an origin access identity.
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCloudFrontOriginAccessIdentity20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an origin access identity.
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudFrontOriginAccessIdentity20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteContinuousDeploymentPolicy20200531
     * @param id The identifier of the continuous deployment policy that you are deleting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the continuous deployment policy that you are deleting. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContinuousDeploymentPolicy20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/continuous-deployment-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContinuousDeploymentPolicy20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteContinuousDeploymentPolicy20200531(Async)");
        }

        return deleteContinuousDeploymentPolicy20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a continuous deployment policy.&lt;/p&gt; &lt;p&gt;You cannot delete a continuous deployment policy that&#39;s attached to a primary distribution. First update your distribution to remove the continuous deployment policy, then you can delete the policy.&lt;/p&gt;
     * @param id The identifier of the continuous deployment policy that you are deleting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the continuous deployment policy that you are deleting. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public void deleteContinuousDeploymentPolicy20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteContinuousDeploymentPolicy20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Deletes a continuous deployment policy.&lt;/p&gt; &lt;p&gt;You cannot delete a continuous deployment policy that&#39;s attached to a primary distribution. First update your distribution to remove the continuous deployment policy, then you can delete the policy.&lt;/p&gt;
     * @param id The identifier of the continuous deployment policy that you are deleting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the continuous deployment policy that you are deleting. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteContinuousDeploymentPolicy20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteContinuousDeploymentPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a continuous deployment policy.&lt;/p&gt; &lt;p&gt;You cannot delete a continuous deployment policy that&#39;s attached to a primary distribution. First update your distribution to remove the continuous deployment policy, then you can delete the policy.&lt;/p&gt;
     * @param id The identifier of the continuous deployment policy that you are deleting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the continuous deployment policy that you are deleting. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContinuousDeploymentPolicy20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContinuousDeploymentPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDistribution20200531
     * @param id The distribution ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDistribution20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDistribution20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDistribution20200531(Async)");
        }

        return deleteDistribution20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Delete a distribution.
     * @param id The distribution ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDistribution20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteDistribution20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Delete a distribution.
     * @param id The distribution ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDistribution20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteDistribution20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a distribution.
     * @param id The distribution ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDistribution20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDistribution20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFieldLevelEncryptionConfig20200531
     * @param id The ID of the configuration you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionConfigInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldLevelEncryptionConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldLevelEncryptionConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFieldLevelEncryptionConfig20200531(Async)");
        }

        return deleteFieldLevelEncryptionConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Remove a field-level encryption configuration.
     * @param id The ID of the configuration you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionConfigInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFieldLevelEncryptionConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteFieldLevelEncryptionConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Remove a field-level encryption configuration.
     * @param id The ID of the configuration you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionConfigInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFieldLevelEncryptionConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldLevelEncryptionConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a field-level encryption configuration.
     * @param id The ID of the configuration you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionConfigInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldLevelEncryptionConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldLevelEncryptionConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFieldLevelEncryptionProfile20200531
     * @param id Request the ID of the profile you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldLevelEncryptionProfile20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption-profile/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldLevelEncryptionProfile20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFieldLevelEncryptionProfile20200531(Async)");
        }

        return deleteFieldLevelEncryptionProfile20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Remove a field-level encryption profile.
     * @param id Request the ID of the profile you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFieldLevelEncryptionProfile20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteFieldLevelEncryptionProfile20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Remove a field-level encryption profile.
     * @param id Request the ID of the profile you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFieldLevelEncryptionProfile20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldLevelEncryptionProfile20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a field-level encryption profile.
     * @param id Request the ID of the profile you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldLevelEncryptionProfile20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldLevelEncryptionProfile20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFunction20200531
     * @param name The name of the function that you are deleting. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are deleting, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FunctionInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFunction20200531Call(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/function/{Name}#If-Match"
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFunction20200531ValidateBeforeCall(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteFunction20200531(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling deleteFunction20200531(Async)");
        }

        return deleteFunction20200531Call(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a CloudFront function.&lt;/p&gt; &lt;p&gt;You cannot delete a function if it&#39;s associated with a cache behavior. First, update your distributions to remove the function association from all cache behaviors, then delete the function.&lt;/p&gt; &lt;p&gt;To delete a function, you must provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value). To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are deleting. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are deleting, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FunctionInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFunction20200531(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteFunction20200531WithHttpInfo(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a CloudFront function.&lt;/p&gt; &lt;p&gt;You cannot delete a function if it&#39;s associated with a cache behavior. First, update your distributions to remove the function association from all cache behaviors, then delete the function.&lt;/p&gt; &lt;p&gt;To delete a function, you must provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value). To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are deleting. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are deleting, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FunctionInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFunction20200531WithHttpInfo(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteFunction20200531ValidateBeforeCall(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a CloudFront function.&lt;/p&gt; &lt;p&gt;You cannot delete a function if it&#39;s associated with a cache behavior. First, update your distributions to remove the function association from all cache behaviors, then delete the function.&lt;/p&gt; &lt;p&gt;To delete a function, you must provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value). To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are deleting. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are deleting, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FunctionInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFunction20200531Async(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFunction20200531ValidateBeforeCall(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteKeyGroup20200531
     * @param id The identifier of the key group that you are deleting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the key group that you are deleting. The version is the key group&#39;s &lt;code&gt;ETag&lt;/code&gt; value. To get the &lt;code&gt;ETag&lt;/code&gt;, use &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyGroup20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/key-group/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeyGroup20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteKeyGroup20200531(Async)");
        }

        return deleteKeyGroup20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a key group.&lt;/p&gt; &lt;p&gt;You cannot delete a key group that is referenced in a cache behavior. First update your distributions to remove the key group from all cache behaviors, then delete the key group.&lt;/p&gt; &lt;p&gt;To delete a key group, you must provide the key group&#39;s identifier and version. To get these values, use &lt;code&gt;ListKeyGroups&lt;/code&gt; followed by &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group that you are deleting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the key group that you are deleting. The version is the key group&#39;s &lt;code&gt;ETag&lt;/code&gt; value. To get the &lt;code&gt;ETag&lt;/code&gt;, use &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteKeyGroup20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteKeyGroup20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Deletes a key group.&lt;/p&gt; &lt;p&gt;You cannot delete a key group that is referenced in a cache behavior. First update your distributions to remove the key group from all cache behaviors, then delete the key group.&lt;/p&gt; &lt;p&gt;To delete a key group, you must provide the key group&#39;s identifier and version. To get these values, use &lt;code&gt;ListKeyGroups&lt;/code&gt; followed by &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group that you are deleting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the key group that you are deleting. The version is the key group&#39;s &lt;code&gt;ETag&lt;/code&gt; value. To get the &lt;code&gt;ETag&lt;/code&gt;, use &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteKeyGroup20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteKeyGroup20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a key group.&lt;/p&gt; &lt;p&gt;You cannot delete a key group that is referenced in a cache behavior. First update your distributions to remove the key group from all cache behaviors, then delete the key group.&lt;/p&gt; &lt;p&gt;To delete a key group, you must provide the key group&#39;s identifier and version. To get these values, use &lt;code&gt;ListKeyGroups&lt;/code&gt; followed by &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group that you are deleting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the key group that you are deleting. The version is the key group&#39;s &lt;code&gt;ETag&lt;/code&gt; value. To get the &lt;code&gt;ETag&lt;/code&gt;, use &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyGroup20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeyGroup20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMonitoringSubscription20200531
     * @param distributionId The ID of the distribution that you are disabling metrics for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchMonitoringSubscription </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMonitoringSubscription20200531Call(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributions/{DistributionId}/monitoring-subscription/"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMonitoringSubscription20200531ValidateBeforeCall(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling deleteMonitoringSubscription20200531(Async)");
        }

        return deleteMonitoringSubscription20200531Call(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disables additional CloudWatch metrics for the specified CloudFront distribution.
     * @param distributionId The ID of the distribution that you are disabling metrics for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchMonitoringSubscription </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteMonitoringSubscription20200531(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteMonitoringSubscription20200531WithHttpInfo(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Disables additional CloudWatch metrics for the specified CloudFront distribution.
     * @param distributionId The ID of the distribution that you are disabling metrics for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchMonitoringSubscription </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteMonitoringSubscription20200531WithHttpInfo(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteMonitoringSubscription20200531ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disables additional CloudWatch metrics for the specified CloudFront distribution.
     * @param distributionId The ID of the distribution that you are disabling metrics for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchMonitoringSubscription </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMonitoringSubscription20200531Async(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMonitoringSubscription20200531ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOriginAccessControl20200531
     * @param id The unique identifier of the origin access control that you are deleting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the origin access control that you are deleting. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OriginAccessControlInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOriginAccessControl20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-control/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOriginAccessControl20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOriginAccessControl20200531(Async)");
        }

        return deleteOriginAccessControl20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a CloudFront origin access control.&lt;/p&gt; &lt;p&gt;You cannot delete an origin access control if it&#39;s in use. First, update all distributions to remove the origin access control from all origins, then delete the origin access control.&lt;/p&gt;
     * @param id The unique identifier of the origin access control that you are deleting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the origin access control that you are deleting. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OriginAccessControlInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOriginAccessControl20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteOriginAccessControl20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Deletes a CloudFront origin access control.&lt;/p&gt; &lt;p&gt;You cannot delete an origin access control if it&#39;s in use. First, update all distributions to remove the origin access control from all origins, then delete the origin access control.&lt;/p&gt;
     * @param id The unique identifier of the origin access control that you are deleting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the origin access control that you are deleting. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OriginAccessControlInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOriginAccessControl20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteOriginAccessControl20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a CloudFront origin access control.&lt;/p&gt; &lt;p&gt;You cannot delete an origin access control if it&#39;s in use. First, update all distributions to remove the origin access control from all origins, then delete the origin access control.&lt;/p&gt;
     * @param id The unique identifier of the origin access control that you are deleting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the origin access control that you are deleting. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OriginAccessControlInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOriginAccessControl20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOriginAccessControl20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOriginRequestPolicy20200531
     * @param id The unique identifier for the origin request policy that you are deleting. To get the identifier, you can use &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the origin request policy that you are deleting. The version is the origin request policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;, &lt;code&gt;GetOriginRequestPolicy&lt;/code&gt;, or &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OriginRequestPolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOriginRequestPolicy20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-request-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOriginRequestPolicy20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOriginRequestPolicy20200531(Async)");
        }

        return deleteOriginRequestPolicy20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an origin request policy.&lt;/p&gt; &lt;p&gt;You cannot delete an origin request policy if it&#39;s attached to any cache behaviors. First update your distributions to remove the origin request policy from all cache behaviors, then delete the origin request policy.&lt;/p&gt; &lt;p&gt;To delete an origin request policy, you must provide the policy&#39;s identifier and version. To get the identifier, you can use &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt; or &lt;code&gt;GetOriginRequestPolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy that you are deleting. To get the identifier, you can use &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the origin request policy that you are deleting. The version is the origin request policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;, &lt;code&gt;GetOriginRequestPolicy&lt;/code&gt;, or &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OriginRequestPolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOriginRequestPolicy20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteOriginRequestPolicy20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Deletes an origin request policy.&lt;/p&gt; &lt;p&gt;You cannot delete an origin request policy if it&#39;s attached to any cache behaviors. First update your distributions to remove the origin request policy from all cache behaviors, then delete the origin request policy.&lt;/p&gt; &lt;p&gt;To delete an origin request policy, you must provide the policy&#39;s identifier and version. To get the identifier, you can use &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt; or &lt;code&gt;GetOriginRequestPolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy that you are deleting. To get the identifier, you can use &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the origin request policy that you are deleting. The version is the origin request policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;, &lt;code&gt;GetOriginRequestPolicy&lt;/code&gt;, or &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OriginRequestPolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOriginRequestPolicy20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteOriginRequestPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an origin request policy.&lt;/p&gt; &lt;p&gt;You cannot delete an origin request policy if it&#39;s attached to any cache behaviors. First update your distributions to remove the origin request policy from all cache behaviors, then delete the origin request policy.&lt;/p&gt; &lt;p&gt;To delete an origin request policy, you must provide the policy&#39;s identifier and version. To get the identifier, you can use &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt; or &lt;code&gt;GetOriginRequestPolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy that you are deleting. To get the identifier, you can use &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the origin request policy that you are deleting. The version is the origin request policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;, &lt;code&gt;GetOriginRequestPolicy&lt;/code&gt;, or &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OriginRequestPolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOriginRequestPolicy20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOriginRequestPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePublicKey20200531
     * @param id The ID of the public key you want to remove from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PublicKeyInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePublicKey20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/public-key/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePublicKey20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePublicKey20200531(Async)");
        }

        return deletePublicKey20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Remove a public key you previously added to CloudFront.
     * @param id The ID of the public key you want to remove from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PublicKeyInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public void deletePublicKey20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deletePublicKey20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Remove a public key you previously added to CloudFront.
     * @param id The ID of the public key you want to remove from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PublicKeyInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePublicKey20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deletePublicKey20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a public key you previously added to CloudFront.
     * @param id The ID of the public key you want to remove from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PublicKeyInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePublicKey20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePublicKey20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRealtimeLogConfig20200531
     * @param deleteRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RealtimeLogConfigInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRealtimeLogConfig20200531Call(DeleteRealtimeLogConfig20200531Request deleteRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRealtimeLogConfig20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/delete-realtime-log-config/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRealtimeLogConfig20200531ValidateBeforeCall(DeleteRealtimeLogConfig20200531Request deleteRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteRealtimeLogConfig20200531Request' is set
        if (deleteRealtimeLogConfig20200531Request == null) {
            throw new ApiException("Missing the required parameter 'deleteRealtimeLogConfig20200531Request' when calling deleteRealtimeLogConfig20200531(Async)");
        }

        return deleteRealtimeLogConfig20200531Call(deleteRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a real-time log configuration.&lt;/p&gt; &lt;p&gt;You cannot delete a real-time log configuration if it&#39;s attached to a cache behavior. First update your distributions to remove the real-time log configuration from all cache behaviors, then delete the real-time log configuration.&lt;/p&gt; &lt;p&gt;To delete a real-time log configuration, you can provide the configuration&#39;s name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to delete.&lt;/p&gt;
     * @param deleteRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RealtimeLogConfigInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRealtimeLogConfig20200531(DeleteRealtimeLogConfig20200531Request deleteRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteRealtimeLogConfig20200531WithHttpInfo(deleteRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a real-time log configuration.&lt;/p&gt; &lt;p&gt;You cannot delete a real-time log configuration if it&#39;s attached to a cache behavior. First update your distributions to remove the real-time log configuration from all cache behaviors, then delete the real-time log configuration.&lt;/p&gt; &lt;p&gt;To delete a real-time log configuration, you can provide the configuration&#39;s name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to delete.&lt;/p&gt;
     * @param deleteRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RealtimeLogConfigInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRealtimeLogConfig20200531WithHttpInfo(DeleteRealtimeLogConfig20200531Request deleteRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRealtimeLogConfig20200531ValidateBeforeCall(deleteRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a real-time log configuration.&lt;/p&gt; &lt;p&gt;You cannot delete a real-time log configuration if it&#39;s attached to a cache behavior. First update your distributions to remove the real-time log configuration from all cache behaviors, then delete the real-time log configuration.&lt;/p&gt; &lt;p&gt;To delete a real-time log configuration, you can provide the configuration&#39;s name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to delete.&lt;/p&gt;
     * @param deleteRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RealtimeLogConfigInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRealtimeLogConfig20200531Async(DeleteRealtimeLogConfig20200531Request deleteRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRealtimeLogConfig20200531ValidateBeforeCall(deleteRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResponseHeadersPolicy20200531
     * @param id &lt;p&gt;The identifier for the response headers policy that you are deleting.&lt;/p&gt; &lt;p&gt;To get the identifier, you can use &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch &lt;p&gt;The version of the response headers policy that you are deleting.&lt;/p&gt; &lt;p&gt;The version is the response headers policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;, &lt;code&gt;GetResponseHeadersPolicy&lt;/code&gt;, or &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResponseHeadersPolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResponseHeadersPolicy20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/response-headers-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResponseHeadersPolicy20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteResponseHeadersPolicy20200531(Async)");
        }

        return deleteResponseHeadersPolicy20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a response headers policy.&lt;/p&gt; &lt;p&gt;You cannot delete a response headers policy if it&#39;s attached to a cache behavior. First update your distributions to remove the response headers policy from all cache behaviors, then delete the response headers policy.&lt;/p&gt; &lt;p&gt;To delete a response headers policy, you must provide the policy&#39;s identifier and version. To get these values, you can use &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt; or &lt;code&gt;GetResponseHeadersPolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy that you are deleting.&lt;/p&gt; &lt;p&gt;To get the identifier, you can use &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch &lt;p&gt;The version of the response headers policy that you are deleting.&lt;/p&gt; &lt;p&gt;The version is the response headers policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;, &lt;code&gt;GetResponseHeadersPolicy&lt;/code&gt;, or &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt;.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResponseHeadersPolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteResponseHeadersPolicy20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteResponseHeadersPolicy20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Deletes a response headers policy.&lt;/p&gt; &lt;p&gt;You cannot delete a response headers policy if it&#39;s attached to a cache behavior. First update your distributions to remove the response headers policy from all cache behaviors, then delete the response headers policy.&lt;/p&gt; &lt;p&gt;To delete a response headers policy, you must provide the policy&#39;s identifier and version. To get these values, you can use &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt; or &lt;code&gt;GetResponseHeadersPolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy that you are deleting.&lt;/p&gt; &lt;p&gt;To get the identifier, you can use &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch &lt;p&gt;The version of the response headers policy that you are deleting.&lt;/p&gt; &lt;p&gt;The version is the response headers policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;, &lt;code&gt;GetResponseHeadersPolicy&lt;/code&gt;, or &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResponseHeadersPolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteResponseHeadersPolicy20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteResponseHeadersPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a response headers policy.&lt;/p&gt; &lt;p&gt;You cannot delete a response headers policy if it&#39;s attached to a cache behavior. First update your distributions to remove the response headers policy from all cache behaviors, then delete the response headers policy.&lt;/p&gt; &lt;p&gt;To delete a response headers policy, you must provide the policy&#39;s identifier and version. To get these values, you can use &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt; or &lt;code&gt;GetResponseHeadersPolicy&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy that you are deleting.&lt;/p&gt; &lt;p&gt;To get the identifier, you can use &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch &lt;p&gt;The version of the response headers policy that you are deleting.&lt;/p&gt; &lt;p&gt;The version is the response headers policy&#39;s &lt;code&gt;ETag&lt;/code&gt; value, which you can get using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;, &lt;code&gt;GetResponseHeadersPolicy&lt;/code&gt;, or &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalDelete </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResponseHeadersPolicyInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResponseHeadersPolicy20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResponseHeadersPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStreamingDistribution20200531
     * @param id The distribution ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamingDistribution20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/streaming-distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStreamingDistribution20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStreamingDistribution20200531(Async)");
        }

        return deleteStreamingDistribution20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStreamingDistribution20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteStreamingDistribution20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStreamingDistribution20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteStreamingDistribution20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamingDistribution20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStreamingDistribution20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFunction20200531
     * @param name The name of the function that you are getting information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stage The function&#39;s stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFunction20200531Call(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/function/{Name}/describe"
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Stage", stage));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFunction20200531ValidateBeforeCall(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling describeFunction20200531(Async)");
        }

        return describeFunction20200531Call(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets configuration information and metadata about a CloudFront function, but not the function&#39;s code. To get a function&#39;s code, use &lt;code&gt;GetFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To get configuration information and metadata about a function, you must provide the function&#39;s name and stage. To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are getting information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stage The function&#39;s stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @return DescribeFunctionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFunctionResult describeFunction20200531(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage) throws ApiException {
        ApiResponse<DescribeFunctionResult> localVarResp = describeFunction20200531WithHttpInfo(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets configuration information and metadata about a CloudFront function, but not the function&#39;s code. To get a function&#39;s code, use &lt;code&gt;GetFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To get configuration information and metadata about a function, you must provide the function&#39;s name and stage. To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are getting information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stage The function&#39;s stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeFunctionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFunctionResult> describeFunction20200531WithHttpInfo(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage) throws ApiException {
        okhttp3.Call localVarCall = describeFunction20200531ValidateBeforeCall(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage, null);
        Type localVarReturnType = new TypeToken<DescribeFunctionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets configuration information and metadata about a CloudFront function, but not the function&#39;s code. To get a function&#39;s code, use &lt;code&gt;GetFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To get configuration information and metadata about a function, you must provide the function&#39;s name and stage. To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are getting information about. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stage The function&#39;s stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFunction20200531Async(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage, final ApiCallback<DescribeFunctionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFunction20200531ValidateBeforeCall(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage, _callback);
        Type localVarReturnType = new TypeToken<DescribeFunctionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCachePolicy20200531
     * @param id The unique identifier for the cache policy. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCachePolicy20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/cache-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCachePolicy20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCachePolicy20200531(Async)");
        }

        return getCachePolicy20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a cache policy, including the following metadata:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The policy&#39;s identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The date and time when the policy was last modified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get a cache policy, you must provide the policy&#39;s identifier. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCachePolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public GetCachePolicyResult getCachePolicy20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCachePolicyResult> localVarResp = getCachePolicy20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a cache policy, including the following metadata:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The policy&#39;s identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The date and time when the policy was last modified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get a cache policy, you must provide the policy&#39;s identifier. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCachePolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCachePolicyResult> getCachePolicy20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCachePolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCachePolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a cache policy, including the following metadata:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The policy&#39;s identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The date and time when the policy was last modified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get a cache policy, you must provide the policy&#39;s identifier. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCachePolicy20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCachePolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCachePolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCachePolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCachePolicyConfig20200531
     * @param id The unique identifier for the cache policy. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCachePolicyConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/cache-policy/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCachePolicyConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCachePolicyConfig20200531(Async)");
        }

        return getCachePolicyConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a cache policy configuration.&lt;/p&gt; &lt;p&gt;To get a cache policy configuration, you must provide the policy&#39;s identifier. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCachePolicyConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public GetCachePolicyConfigResult getCachePolicyConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCachePolicyConfigResult> localVarResp = getCachePolicyConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a cache policy configuration.&lt;/p&gt; &lt;p&gt;To get a cache policy configuration, you must provide the policy&#39;s identifier. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCachePolicyConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCachePolicyConfigResult> getCachePolicyConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCachePolicyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCachePolicyConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a cache policy configuration.&lt;/p&gt; &lt;p&gt;To get a cache policy configuration, you must provide the policy&#39;s identifier. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the cache policy. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCachePolicyConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCachePolicyConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCachePolicyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCachePolicyConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudFrontOriginAccessIdentity20200531
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentity20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-identity/cloudfront/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentity20200531(Async)");
        }

        return getCloudFrontOriginAccessIdentity20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about an origin access identity.
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetCloudFrontOriginAccessIdentityResult getCloudFrontOriginAccessIdentity20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCloudFrontOriginAccessIdentityResult> localVarResp = getCloudFrontOriginAccessIdentity20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about an origin access identity.
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCloudFrontOriginAccessIdentityResult> getCloudFrontOriginAccessIdentity20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about an origin access identity.
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentity20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudFrontOriginAccessIdentityConfig20200531
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentityConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-identity/cloudfront/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudFrontOriginAccessIdentityConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentityConfig20200531(Async)");
        }

        return getCloudFrontOriginAccessIdentityConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about an origin access identity.
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCloudFrontOriginAccessIdentityConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCloudFrontOriginAccessIdentityConfigResult> localVarResp = getCloudFrontOriginAccessIdentityConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about an origin access identity.
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCloudFrontOriginAccessIdentityConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCloudFrontOriginAccessIdentityConfigResult> getCloudFrontOriginAccessIdentityConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentityConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about an origin access identity.
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentityConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCloudFrontOriginAccessIdentityConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentityConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousDeploymentPolicy20200531
     * @param id The identifier of the continuous deployment policy that you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousDeploymentPolicy20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/continuous-deployment-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousDeploymentPolicy20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContinuousDeploymentPolicy20200531(Async)");
        }

        return getContinuousDeploymentPolicy20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets a continuous deployment policy, including metadata (the policy&#39;s identifier and the date and time when the policy was last modified).
     * @param id The identifier of the continuous deployment policy that you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetContinuousDeploymentPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public GetContinuousDeploymentPolicyResult getContinuousDeploymentPolicy20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetContinuousDeploymentPolicyResult> localVarResp = getContinuousDeploymentPolicy20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a continuous deployment policy, including metadata (the policy&#39;s identifier and the date and time when the policy was last modified).
     * @param id The identifier of the continuous deployment policy that you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetContinuousDeploymentPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetContinuousDeploymentPolicyResult> getContinuousDeploymentPolicy20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getContinuousDeploymentPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetContinuousDeploymentPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a continuous deployment policy, including metadata (the policy&#39;s identifier and the date and time when the policy was last modified).
     * @param id The identifier of the continuous deployment policy that you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousDeploymentPolicy20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetContinuousDeploymentPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousDeploymentPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetContinuousDeploymentPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousDeploymentPolicyConfig20200531
     * @param id The identifier of the continuous deployment policy whose configuration you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousDeploymentPolicyConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/continuous-deployment-policy/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousDeploymentPolicyConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContinuousDeploymentPolicyConfig20200531(Async)");
        }

        return getContinuousDeploymentPolicyConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets configuration information about a continuous deployment policy.
     * @param id The identifier of the continuous deployment policy whose configuration you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetContinuousDeploymentPolicyConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public GetContinuousDeploymentPolicyConfigResult getContinuousDeploymentPolicyConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetContinuousDeploymentPolicyConfigResult> localVarResp = getContinuousDeploymentPolicyConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets configuration information about a continuous deployment policy.
     * @param id The identifier of the continuous deployment policy whose configuration you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetContinuousDeploymentPolicyConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetContinuousDeploymentPolicyConfigResult> getContinuousDeploymentPolicyConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getContinuousDeploymentPolicyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetContinuousDeploymentPolicyConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets configuration information about a continuous deployment policy.
     * @param id The identifier of the continuous deployment policy whose configuration you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousDeploymentPolicyConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetContinuousDeploymentPolicyConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousDeploymentPolicyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetContinuousDeploymentPolicyConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDistribution20200531
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistribution20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistribution20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDistribution20200531(Async)");
        }

        return getDistribution20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetDistributionResult getDistribution20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDistributionResult> localVarResp = getDistribution20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDistributionResult> getDistribution20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDistribution20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistribution20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistribution20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDistributionConfig20200531
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistributionConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistributionConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDistributionConfig20200531(Async)");
        }

        return getDistributionConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDistributionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetDistributionConfigResult getDistributionConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDistributionConfigResult> localVarResp = getDistributionConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDistributionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDistributionConfigResult> getDistributionConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDistributionConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDistributionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistributionConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDistributionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistributionConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDistributionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldLevelEncryption20200531
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryption20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldLevelEncryption20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldLevelEncryption20200531(Async)");
        }

        return getFieldLevelEncryption20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFieldLevelEncryptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldLevelEncryptionResult getFieldLevelEncryption20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFieldLevelEncryptionResult> localVarResp = getFieldLevelEncryption20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFieldLevelEncryptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldLevelEncryptionResult> getFieldLevelEncryption20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFieldLevelEncryption20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryption20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFieldLevelEncryptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldLevelEncryption20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldLevelEncryptionConfig20200531
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldLevelEncryptionConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldLevelEncryptionConfig20200531(Async)");
        }

        return getFieldLevelEncryptionConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFieldLevelEncryptionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldLevelEncryptionConfigResult getFieldLevelEncryptionConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFieldLevelEncryptionConfigResult> localVarResp = getFieldLevelEncryptionConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFieldLevelEncryptionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldLevelEncryptionConfigResult> getFieldLevelEncryptionConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFieldLevelEncryptionConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFieldLevelEncryptionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldLevelEncryptionConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldLevelEncryptionProfile20200531
     * @param id Get the ID for the field-level encryption profile information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionProfile20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption-profile/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldLevelEncryptionProfile20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldLevelEncryptionProfile20200531(Async)");
        }

        return getFieldLevelEncryptionProfile20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the field-level encryption profile information.
     * @param id Get the ID for the field-level encryption profile information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFieldLevelEncryptionProfileResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldLevelEncryptionProfileResult getFieldLevelEncryptionProfile20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFieldLevelEncryptionProfileResult> localVarResp = getFieldLevelEncryptionProfile20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the field-level encryption profile information.
     * @param id Get the ID for the field-level encryption profile information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFieldLevelEncryptionProfileResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldLevelEncryptionProfileResult> getFieldLevelEncryptionProfile20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFieldLevelEncryptionProfile20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionProfileResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the field-level encryption profile information.
     * @param id Get the ID for the field-level encryption profile information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionProfile20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFieldLevelEncryptionProfileResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldLevelEncryptionProfile20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionProfileResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldLevelEncryptionProfileConfig20200531
     * @param id Get the ID for the field-level encryption profile configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionProfileConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption-profile/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldLevelEncryptionProfileConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldLevelEncryptionProfileConfig20200531(Async)");
        }

        return getFieldLevelEncryptionProfileConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the field-level encryption profile configuration information.
     * @param id Get the ID for the field-level encryption profile configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFieldLevelEncryptionProfileConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldLevelEncryptionProfileConfigResult getFieldLevelEncryptionProfileConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFieldLevelEncryptionProfileConfigResult> localVarResp = getFieldLevelEncryptionProfileConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the field-level encryption profile configuration information.
     * @param id Get the ID for the field-level encryption profile configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFieldLevelEncryptionProfileConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldLevelEncryptionProfileConfigResult> getFieldLevelEncryptionProfileConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFieldLevelEncryptionProfileConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionProfileConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the field-level encryption profile configuration information.
     * @param id Get the ID for the field-level encryption profile configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionProfileConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFieldLevelEncryptionProfileConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldLevelEncryptionProfileConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionProfileConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFunction20200531
     * @param name The name of the function whose code you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stage The function&#39;s stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunction20200531Call(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/function/{Name}"
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Stage", stage));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunction20200531ValidateBeforeCall(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFunction20200531(Async)");
        }

        return getFunction20200531Call(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the code of a CloudFront function. To get configuration information and metadata about a function, use &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To get a function&#39;s code, you must provide the function&#39;s name and stage. To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function whose code you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stage The function&#39;s stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @return GetFunctionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public GetFunctionResult getFunction20200531(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage) throws ApiException {
        ApiResponse<GetFunctionResult> localVarResp = getFunction20200531WithHttpInfo(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the code of a CloudFront function. To get configuration information and metadata about a function, use &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To get a function&#39;s code, you must provide the function&#39;s name and stage. To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function whose code you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stage The function&#39;s stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;GetFunctionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFunctionResult> getFunction20200531WithHttpInfo(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage) throws ApiException {
        okhttp3.Call localVarCall = getFunction20200531ValidateBeforeCall(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage, null);
        Type localVarReturnType = new TypeToken<GetFunctionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the code of a CloudFront function. To get configuration information and metadata about a function, use &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To get a function&#39;s code, you must provide the function&#39;s name and stage. To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function whose code you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stage The function&#39;s stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunction20200531Async(String name, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stage, final ApiCallback<GetFunctionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFunction20200531ValidateBeforeCall(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage, _callback);
        Type localVarReturnType = new TypeToken<GetFunctionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvalidation20200531
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvalidation20200531Call(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{DistributionId}/invalidation/{Id}"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()))
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvalidation20200531ValidateBeforeCall(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling getInvalidation20200531(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInvalidation20200531(Async)");
        }

        return getInvalidation20200531Call(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about an invalidation.
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetInvalidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetInvalidationResult getInvalidation20200531(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetInvalidationResult> localVarResp = getInvalidation20200531WithHttpInfo(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about an invalidation.
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetInvalidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInvalidationResult> getInvalidation20200531WithHttpInfo(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getInvalidation20200531ValidateBeforeCall(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetInvalidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about an invalidation.
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvalidation20200531Async(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetInvalidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvalidation20200531ValidateBeforeCall(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetInvalidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKeyGroup20200531
     * @param id The identifier of the key group that you are getting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyGroup20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/key-group/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyGroup20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getKeyGroup20200531(Async)");
        }

        return getKeyGroup20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a key group, including the date and time when the key group was last modified.&lt;/p&gt; &lt;p&gt;To get a key group, you must provide the key group&#39;s identifier. If the key group is referenced in a distribution&#39;s cache behavior, you can get the key group&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the key group is not referenced in a cache behavior, you can get the identifier using &lt;code&gt;ListKeyGroups&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group that you are getting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetKeyGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public GetKeyGroupResult getKeyGroup20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetKeyGroupResult> localVarResp = getKeyGroup20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a key group, including the date and time when the key group was last modified.&lt;/p&gt; &lt;p&gt;To get a key group, you must provide the key group&#39;s identifier. If the key group is referenced in a distribution&#39;s cache behavior, you can get the key group&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the key group is not referenced in a cache behavior, you can get the identifier using &lt;code&gt;ListKeyGroups&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group that you are getting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetKeyGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetKeyGroupResult> getKeyGroup20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getKeyGroup20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetKeyGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a key group, including the date and time when the key group was last modified.&lt;/p&gt; &lt;p&gt;To get a key group, you must provide the key group&#39;s identifier. If the key group is referenced in a distribution&#39;s cache behavior, you can get the key group&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the key group is not referenced in a cache behavior, you can get the identifier using &lt;code&gt;ListKeyGroups&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group that you are getting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyGroup20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetKeyGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyGroup20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetKeyGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKeyGroupConfig20200531
     * @param id The identifier of the key group whose configuration you are getting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyGroupConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/key-group/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyGroupConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getKeyGroupConfig20200531(Async)");
        }

        return getKeyGroupConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a key group configuration.&lt;/p&gt; &lt;p&gt;To get a key group configuration, you must provide the key group&#39;s identifier. If the key group is referenced in a distribution&#39;s cache behavior, you can get the key group&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the key group is not referenced in a cache behavior, you can get the identifier using &lt;code&gt;ListKeyGroups&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group whose configuration you are getting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetKeyGroupConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public GetKeyGroupConfigResult getKeyGroupConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetKeyGroupConfigResult> localVarResp = getKeyGroupConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a key group configuration.&lt;/p&gt; &lt;p&gt;To get a key group configuration, you must provide the key group&#39;s identifier. If the key group is referenced in a distribution&#39;s cache behavior, you can get the key group&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the key group is not referenced in a cache behavior, you can get the identifier using &lt;code&gt;ListKeyGroups&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group whose configuration you are getting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetKeyGroupConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetKeyGroupConfigResult> getKeyGroupConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getKeyGroupConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetKeyGroupConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a key group configuration.&lt;/p&gt; &lt;p&gt;To get a key group configuration, you must provide the key group&#39;s identifier. If the key group is referenced in a distribution&#39;s cache behavior, you can get the key group&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the key group is not referenced in a cache behavior, you can get the identifier using &lt;code&gt;ListKeyGroups&lt;/code&gt;.&lt;/p&gt;
     * @param id The identifier of the key group whose configuration you are getting. To get the identifier, use &lt;code&gt;ListKeyGroups&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyGroupConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetKeyGroupConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyGroupConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetKeyGroupConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMonitoringSubscription20200531
     * @param distributionId The ID of the distribution that you are getting metrics information for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchMonitoringSubscription </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMonitoringSubscription20200531Call(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributions/{DistributionId}/monitoring-subscription/"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonitoringSubscription20200531ValidateBeforeCall(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling getMonitoringSubscription20200531(Async)");
        }

        return getMonitoringSubscription20200531Call(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about whether additional CloudWatch metrics are enabled for the specified CloudFront distribution.
     * @param distributionId The ID of the distribution that you are getting metrics information for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMonitoringSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchMonitoringSubscription </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public GetMonitoringSubscriptionResult getMonitoringSubscription20200531(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMonitoringSubscriptionResult> localVarResp = getMonitoringSubscription20200531WithHttpInfo(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about whether additional CloudWatch metrics are enabled for the specified CloudFront distribution.
     * @param distributionId The ID of the distribution that you are getting metrics information for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMonitoringSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchMonitoringSubscription </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMonitoringSubscriptionResult> getMonitoringSubscription20200531WithHttpInfo(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getMonitoringSubscription20200531ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMonitoringSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about whether additional CloudWatch metrics are enabled for the specified CloudFront distribution.
     * @param distributionId The ID of the distribution that you are getting metrics information for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchMonitoringSubscription </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMonitoringSubscription20200531Async(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMonitoringSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonitoringSubscription20200531ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMonitoringSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOriginAccessControl20200531
     * @param id The unique identifier of the origin access control. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOriginAccessControl20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-control/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOriginAccessControl20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOriginAccessControl20200531(Async)");
        }

        return getOriginAccessControl20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets a CloudFront origin access control, including its unique identifier.
     * @param id The unique identifier of the origin access control. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetOriginAccessControlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetOriginAccessControlResult getOriginAccessControl20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetOriginAccessControlResult> localVarResp = getOriginAccessControl20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a CloudFront origin access control, including its unique identifier.
     * @param id The unique identifier of the origin access control. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetOriginAccessControlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOriginAccessControlResult> getOriginAccessControl20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getOriginAccessControl20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetOriginAccessControlResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a CloudFront origin access control, including its unique identifier.
     * @param id The unique identifier of the origin access control. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOriginAccessControl20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetOriginAccessControlResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOriginAccessControl20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetOriginAccessControlResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOriginAccessControlConfig20200531
     * @param id The unique identifier of the origin access control. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOriginAccessControlConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-control/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOriginAccessControlConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOriginAccessControlConfig20200531(Async)");
        }

        return getOriginAccessControlConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets a CloudFront origin access control configuration.
     * @param id The unique identifier of the origin access control. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetOriginAccessControlConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetOriginAccessControlConfigResult getOriginAccessControlConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetOriginAccessControlConfigResult> localVarResp = getOriginAccessControlConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a CloudFront origin access control configuration.
     * @param id The unique identifier of the origin access control. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetOriginAccessControlConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOriginAccessControlConfigResult> getOriginAccessControlConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getOriginAccessControlConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetOriginAccessControlConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a CloudFront origin access control configuration.
     * @param id The unique identifier of the origin access control. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOriginAccessControlConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetOriginAccessControlConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOriginAccessControlConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetOriginAccessControlConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOriginRequestPolicy20200531
     * @param id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOriginRequestPolicy20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-request-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOriginRequestPolicy20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOriginRequestPolicy20200531(Async)");
        }

        return getOriginRequestPolicy20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets an origin request policy, including the following metadata:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The policy&#39;s identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The date and time when the policy was last modified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get an origin request policy, you must provide the policy&#39;s identifier. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetOriginRequestPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public GetOriginRequestPolicyResult getOriginRequestPolicy20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetOriginRequestPolicyResult> localVarResp = getOriginRequestPolicy20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets an origin request policy, including the following metadata:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The policy&#39;s identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The date and time when the policy was last modified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get an origin request policy, you must provide the policy&#39;s identifier. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetOriginRequestPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOriginRequestPolicyResult> getOriginRequestPolicy20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getOriginRequestPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetOriginRequestPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets an origin request policy, including the following metadata:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The policy&#39;s identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The date and time when the policy was last modified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get an origin request policy, you must provide the policy&#39;s identifier. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOriginRequestPolicy20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetOriginRequestPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOriginRequestPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetOriginRequestPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOriginRequestPolicyConfig20200531
     * @param id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOriginRequestPolicyConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-request-policy/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOriginRequestPolicyConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOriginRequestPolicyConfig20200531(Async)");
        }

        return getOriginRequestPolicyConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets an origin request policy configuration.&lt;/p&gt; &lt;p&gt;To get an origin request policy configuration, you must provide the policy&#39;s identifier. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetOriginRequestPolicyConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public GetOriginRequestPolicyConfigResult getOriginRequestPolicyConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetOriginRequestPolicyConfigResult> localVarResp = getOriginRequestPolicyConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets an origin request policy configuration.&lt;/p&gt; &lt;p&gt;To get an origin request policy configuration, you must provide the policy&#39;s identifier. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetOriginRequestPolicyConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOriginRequestPolicyConfigResult> getOriginRequestPolicyConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getOriginRequestPolicyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetOriginRequestPolicyConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets an origin request policy configuration.&lt;/p&gt; &lt;p&gt;To get an origin request policy configuration, you must provide the policy&#39;s identifier. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id The unique identifier for the origin request policy. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOriginRequestPolicyConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetOriginRequestPolicyConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOriginRequestPolicyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetOriginRequestPolicyConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicKey20200531
     * @param id The identifier of the public key you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicKey20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/public-key/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicKey20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicKey20200531(Async)");
        }

        return getPublicKey20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets a public key.
     * @param id The identifier of the public key you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPublicKeyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicKeyResult getPublicKey20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPublicKeyResult> localVarResp = getPublicKey20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a public key.
     * @param id The identifier of the public key you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPublicKeyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPublicKeyResult> getPublicKey20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPublicKey20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPublicKeyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a public key.
     * @param id The identifier of the public key you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicKey20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPublicKeyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicKey20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPublicKeyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicKeyConfig20200531
     * @param id The identifier of the public key whose configuration you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicKeyConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/public-key/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicKeyConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicKeyConfig20200531(Async)");
        }

        return getPublicKeyConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets a public key configuration.
     * @param id The identifier of the public key whose configuration you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPublicKeyConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicKeyConfigResult getPublicKeyConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPublicKeyConfigResult> localVarResp = getPublicKeyConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a public key configuration.
     * @param id The identifier of the public key whose configuration you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPublicKeyConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPublicKeyConfigResult> getPublicKeyConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPublicKeyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPublicKeyConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a public key configuration.
     * @param id The identifier of the public key whose configuration you are getting. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicKeyConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPublicKeyConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicKeyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPublicKeyConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRealtimeLogConfig20200531
     * @param getRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRealtimeLogConfig20200531Call(GetRealtimeLogConfig20200531Request getRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRealtimeLogConfig20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/get-realtime-log-config/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealtimeLogConfig20200531ValidateBeforeCall(GetRealtimeLogConfig20200531Request getRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getRealtimeLogConfig20200531Request' is set
        if (getRealtimeLogConfig20200531Request == null) {
            throw new ApiException("Missing the required parameter 'getRealtimeLogConfig20200531Request' when calling getRealtimeLogConfig20200531(Async)");
        }

        return getRealtimeLogConfig20200531Call(getRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a real-time log configuration.&lt;/p&gt; &lt;p&gt;To get a real-time log configuration, you can provide the configuration&#39;s name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to get.&lt;/p&gt;
     * @param getRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRealtimeLogConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetRealtimeLogConfigResult getRealtimeLogConfig20200531(GetRealtimeLogConfig20200531Request getRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRealtimeLogConfigResult> localVarResp = getRealtimeLogConfig20200531WithHttpInfo(getRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a real-time log configuration.&lt;/p&gt; &lt;p&gt;To get a real-time log configuration, you can provide the configuration&#39;s name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to get.&lt;/p&gt;
     * @param getRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRealtimeLogConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRealtimeLogConfigResult> getRealtimeLogConfig20200531WithHttpInfo(GetRealtimeLogConfig20200531Request getRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRealtimeLogConfig20200531ValidateBeforeCall(getRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRealtimeLogConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a real-time log configuration.&lt;/p&gt; &lt;p&gt;To get a real-time log configuration, you can provide the configuration&#39;s name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to get.&lt;/p&gt;
     * @param getRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRealtimeLogConfig20200531Async(GetRealtimeLogConfig20200531Request getRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRealtimeLogConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealtimeLogConfig20200531ValidateBeforeCall(getRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRealtimeLogConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResponseHeadersPolicy20200531
     * @param id &lt;p&gt;The identifier for the response headers policy.&lt;/p&gt; &lt;p&gt;If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResponseHeadersPolicy20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/response-headers-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResponseHeadersPolicy20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResponseHeadersPolicy20200531(Async)");
        }

        return getResponseHeadersPolicy20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a response headers policy, including metadata (the policy&#39;s identifier and the date and time when the policy was last modified).&lt;/p&gt; &lt;p&gt;To get a response headers policy, you must provide the policy&#39;s identifier. If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy.&lt;/p&gt; &lt;p&gt;If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetResponseHeadersPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public GetResponseHeadersPolicyResult getResponseHeadersPolicy20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetResponseHeadersPolicyResult> localVarResp = getResponseHeadersPolicy20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a response headers policy, including metadata (the policy&#39;s identifier and the date and time when the policy was last modified).&lt;/p&gt; &lt;p&gt;To get a response headers policy, you must provide the policy&#39;s identifier. If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy.&lt;/p&gt; &lt;p&gt;If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetResponseHeadersPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetResponseHeadersPolicyResult> getResponseHeadersPolicy20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getResponseHeadersPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetResponseHeadersPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a response headers policy, including metadata (the policy&#39;s identifier and the date and time when the policy was last modified).&lt;/p&gt; &lt;p&gt;To get a response headers policy, you must provide the policy&#39;s identifier. If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy.&lt;/p&gt; &lt;p&gt;If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResponseHeadersPolicy20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetResponseHeadersPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResponseHeadersPolicy20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetResponseHeadersPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResponseHeadersPolicyConfig20200531
     * @param id &lt;p&gt;The identifier for the response headers policy.&lt;/p&gt; &lt;p&gt;If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResponseHeadersPolicyConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/response-headers-policy/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResponseHeadersPolicyConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResponseHeadersPolicyConfig20200531(Async)");
        }

        return getResponseHeadersPolicyConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a response headers policy configuration.&lt;/p&gt; &lt;p&gt;To get a response headers policy configuration, you must provide the policy&#39;s identifier. If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy.&lt;/p&gt; &lt;p&gt;If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetResponseHeadersPolicyConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public GetResponseHeadersPolicyConfigResult getResponseHeadersPolicyConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetResponseHeadersPolicyConfigResult> localVarResp = getResponseHeadersPolicyConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a response headers policy configuration.&lt;/p&gt; &lt;p&gt;To get a response headers policy configuration, you must provide the policy&#39;s identifier. If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy.&lt;/p&gt; &lt;p&gt;If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetResponseHeadersPolicyConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetResponseHeadersPolicyConfigResult> getResponseHeadersPolicyConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getResponseHeadersPolicyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetResponseHeadersPolicyConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a response headers policy configuration.&lt;/p&gt; &lt;p&gt;To get a response headers policy configuration, you must provide the policy&#39;s identifier. If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;The identifier for the response headers policy.&lt;/p&gt; &lt;p&gt;If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResponseHeadersPolicyConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetResponseHeadersPolicyConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResponseHeadersPolicyConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetResponseHeadersPolicyConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamingDistribution20200531
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistribution20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/streaming-distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamingDistribution20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStreamingDistribution20200531(Async)");
        }

        return getStreamingDistribution20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetStreamingDistributionResult getStreamingDistribution20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetStreamingDistributionResult> localVarResp = getStreamingDistribution20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStreamingDistributionResult> getStreamingDistribution20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getStreamingDistribution20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistribution20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamingDistribution20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamingDistributionConfig20200531
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistributionConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/streaming-distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamingDistributionConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStreamingDistributionConfig20200531(Async)");
        }

        return getStreamingDistributionConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about a streaming distribution.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetStreamingDistributionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetStreamingDistributionConfigResult getStreamingDistributionConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetStreamingDistributionConfigResult> localVarResp = getStreamingDistributionConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about a streaming distribution.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetStreamingDistributionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStreamingDistributionConfigResult> getStreamingDistributionConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getStreamingDistributionConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about a streaming distribution.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistributionConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetStreamingDistributionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamingDistributionConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCachePolicies20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to return only the specified kinds of cache policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Returns only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Returns only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of cache policies. The response includes cache policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of cache policies that you want in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCachePolicies20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/cache-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCachePolicies20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listCachePolicies20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of cache policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to return only the specified kinds of cache policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Returns only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Returns only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of cache policies. The response includes cache policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of cache policies that you want in the response. (optional)
     * @return ListCachePoliciesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListCachePoliciesResult listCachePolicies20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems) throws ApiException {
        ApiResponse<ListCachePoliciesResult> localVarResp = listCachePolicies20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of cache policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to return only the specified kinds of cache policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Returns only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Returns only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of cache policies. The response includes cache policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of cache policies that you want in the response. (optional)
     * @return ApiResponse&lt;ListCachePoliciesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCachePoliciesResult> listCachePolicies20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listCachePolicies20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListCachePoliciesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of cache policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to return only the specified kinds of cache policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Returns only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Returns only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of cache policies. The response includes cache policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of cache policies that you want in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCachePolicies20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback<ListCachePoliciesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCachePolicies20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListCachePoliciesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCloudFrontOriginAccessIdentities20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCloudFrontOriginAccessIdentities20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-identity/cloudfront";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCloudFrontOriginAccessIdentities20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listCloudFrontOriginAccessIdentities20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body. (optional)
     * @return ListCloudFrontOriginAccessIdentitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListCloudFrontOriginAccessIdentitiesResult listCloudFrontOriginAccessIdentities20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListCloudFrontOriginAccessIdentitiesResult> localVarResp = listCloudFrontOriginAccessIdentities20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body. (optional)
     * @return ApiResponse&lt;ListCloudFrontOriginAccessIdentitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCloudFrontOriginAccessIdentitiesResult> listCloudFrontOriginAccessIdentities20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listCloudFrontOriginAccessIdentities20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListCloudFrontOriginAccessIdentitiesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCloudFrontOriginAccessIdentities20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListCloudFrontOriginAccessIdentitiesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCloudFrontOriginAccessIdentities20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListCloudFrontOriginAccessIdentitiesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConflictingAliases20200531
     * @param distributionId The ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. (required)
     * @param alias The alias (also called a CNAME) to search for conflicting aliases. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in the list of conflicting aliases. The response includes conflicting aliases in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of conflicting aliases that you want in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConflictingAliases20200531Call(String distributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/conflicting-alias#DistributionId&Alias";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (distributionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DistributionId", distributionId));
        }

        if (alias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Alias", alias));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConflictingAliases20200531ValidateBeforeCall(String distributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling listConflictingAliases20200531(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling listConflictingAliases20200531(Async)");
        }

        return listConflictingAliases20200531Call(distributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of aliases (also called CNAMEs or alternate domain names) that conflict or overlap with the provided alias, and the associated CloudFront distributions and Amazon Web Services accounts for each conflicting alias. In the returned list, the distribution and account IDs are partially hidden, which allows you to identify the distributions and accounts that you own, but helps to protect the information of ones that you don&#39;t own.&lt;/p&gt; &lt;p&gt;Use this operation to find aliases that are in use in CloudFront that conflict or overlap with the provided alias. For example, if you provide &lt;code&gt;www.example.com&lt;/code&gt; as input, the returned list can include &lt;code&gt;www.example.com&lt;/code&gt; and the overlapping wildcard alternate domain name (&lt;code&gt;*.example.com&lt;/code&gt;), if they exist. If you provide &lt;code&gt;*.example.com&lt;/code&gt; as input, the returned list can include &lt;code&gt;*.example.com&lt;/code&gt; and any alternate domain names covered by that wildcard (for example, &lt;code&gt;www.example.com&lt;/code&gt;, &lt;code&gt;test.example.com&lt;/code&gt;, &lt;code&gt;dev.example.com&lt;/code&gt;, and so on), if they exist.&lt;/p&gt; &lt;p&gt;To list conflicting aliases, you provide the alias to search and the ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. For more information, including how to set up the distribution and certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\&quot;&gt;Moving an alternate domain name to a different distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param distributionId The ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. (required)
     * @param alias The alias (also called a CNAME) to search for conflicting aliases. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in the list of conflicting aliases. The response includes conflicting aliases in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of conflicting aliases that you want in the response. (optional)
     * @return ListConflictingAliasesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
     </table>
     */
    public ListConflictingAliasesResult listConflictingAliases20200531(String distributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer maxItems) throws ApiException {
        ApiResponse<ListConflictingAliasesResult> localVarResp = listConflictingAliases20200531WithHttpInfo(distributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of aliases (also called CNAMEs or alternate domain names) that conflict or overlap with the provided alias, and the associated CloudFront distributions and Amazon Web Services accounts for each conflicting alias. In the returned list, the distribution and account IDs are partially hidden, which allows you to identify the distributions and accounts that you own, but helps to protect the information of ones that you don&#39;t own.&lt;/p&gt; &lt;p&gt;Use this operation to find aliases that are in use in CloudFront that conflict or overlap with the provided alias. For example, if you provide &lt;code&gt;www.example.com&lt;/code&gt; as input, the returned list can include &lt;code&gt;www.example.com&lt;/code&gt; and the overlapping wildcard alternate domain name (&lt;code&gt;*.example.com&lt;/code&gt;), if they exist. If you provide &lt;code&gt;*.example.com&lt;/code&gt; as input, the returned list can include &lt;code&gt;*.example.com&lt;/code&gt; and any alternate domain names covered by that wildcard (for example, &lt;code&gt;www.example.com&lt;/code&gt;, &lt;code&gt;test.example.com&lt;/code&gt;, &lt;code&gt;dev.example.com&lt;/code&gt;, and so on), if they exist.&lt;/p&gt; &lt;p&gt;To list conflicting aliases, you provide the alias to search and the ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. For more information, including how to set up the distribution and certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\&quot;&gt;Moving an alternate domain name to a different distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param distributionId The ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. (required)
     * @param alias The alias (also called a CNAME) to search for conflicting aliases. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in the list of conflicting aliases. The response includes conflicting aliases in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of conflicting aliases that you want in the response. (optional)
     * @return ApiResponse&lt;ListConflictingAliasesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListConflictingAliasesResult> listConflictingAliases20200531WithHttpInfo(String distributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer maxItems) throws ApiException {
        okhttp3.Call localVarCall = listConflictingAliases20200531ValidateBeforeCall(distributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListConflictingAliasesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of aliases (also called CNAMEs or alternate domain names) that conflict or overlap with the provided alias, and the associated CloudFront distributions and Amazon Web Services accounts for each conflicting alias. In the returned list, the distribution and account IDs are partially hidden, which allows you to identify the distributions and accounts that you own, but helps to protect the information of ones that you don&#39;t own.&lt;/p&gt; &lt;p&gt;Use this operation to find aliases that are in use in CloudFront that conflict or overlap with the provided alias. For example, if you provide &lt;code&gt;www.example.com&lt;/code&gt; as input, the returned list can include &lt;code&gt;www.example.com&lt;/code&gt; and the overlapping wildcard alternate domain name (&lt;code&gt;*.example.com&lt;/code&gt;), if they exist. If you provide &lt;code&gt;*.example.com&lt;/code&gt; as input, the returned list can include &lt;code&gt;*.example.com&lt;/code&gt; and any alternate domain names covered by that wildcard (for example, &lt;code&gt;www.example.com&lt;/code&gt;, &lt;code&gt;test.example.com&lt;/code&gt;, &lt;code&gt;dev.example.com&lt;/code&gt;, and so on), if they exist.&lt;/p&gt; &lt;p&gt;To list conflicting aliases, you provide the alias to search and the ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. For more information, including how to set up the distribution and certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\&quot;&gt;Moving an alternate domain name to a different distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param distributionId The ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. (required)
     * @param alias The alias (also called a CNAME) to search for conflicting aliases. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in the list of conflicting aliases. The response includes conflicting aliases in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of conflicting aliases that you want in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConflictingAliases20200531Async(String distributionId, String alias, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer maxItems, final ApiCallback<ListConflictingAliasesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConflictingAliases20200531ValidateBeforeCall(distributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListConflictingAliasesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listContinuousDeploymentPolicies20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of continuous deployment policies. The response includes policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of continuous deployment policies that you want returned in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listContinuousDeploymentPolicies20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/continuous-deployment-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listContinuousDeploymentPolicies20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listContinuousDeploymentPolicies20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of the continuous deployment policies in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of continuous deployment policies. The response includes policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of continuous deployment policies that you want returned in the response. (optional)
     * @return ListContinuousDeploymentPoliciesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ListContinuousDeploymentPoliciesResult listContinuousDeploymentPolicies20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListContinuousDeploymentPoliciesResult> localVarResp = listContinuousDeploymentPolicies20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of the continuous deployment policies in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of continuous deployment policies. The response includes policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of continuous deployment policies that you want returned in the response. (optional)
     * @return ApiResponse&lt;ListContinuousDeploymentPoliciesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListContinuousDeploymentPoliciesResult> listContinuousDeploymentPolicies20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listContinuousDeploymentPolicies20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListContinuousDeploymentPoliciesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of the continuous deployment policies in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of continuous deployment policies. The response includes policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of continuous deployment policies that you want returned in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listContinuousDeploymentPolicies20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListContinuousDeploymentPoliciesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listContinuousDeploymentPolicies20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListContinuousDeploymentPoliciesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributions20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributions20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributions20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listDistributions20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List CloudFront distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @return ListDistributionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsResult listDistributions20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsResult> localVarResp = listDistributions20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List CloudFront distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @return ApiResponse&lt;ListDistributionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsResult> listDistributions20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributions20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List CloudFront distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributions20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributions20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributionsByCachePolicyId20200531
     * @param cachePolicyId The ID of the cache policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByCachePolicyId20200531Call(String cachePolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributionsByCachePolicyId/{CachePolicyId}"
            .replace("{" + "CachePolicyId" + "}", localVarApiClient.escapeString(cachePolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributionsByCachePolicyId20200531ValidateBeforeCall(String cachePolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cachePolicyId' is set
        if (cachePolicyId == null) {
            throw new ApiException("Missing the required parameter 'cachePolicyId' when calling listDistributionsByCachePolicyId20200531(Async)");
        }

        return listDistributionsByCachePolicyId20200531Call(cachePolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified cache policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param cachePolicyId The ID of the cache policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @return ListDistributionsByCachePolicyIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsByCachePolicyIdResult listDistributionsByCachePolicyId20200531(String cachePolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsByCachePolicyIdResult> localVarResp = listDistributionsByCachePolicyId20200531WithHttpInfo(cachePolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified cache policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param cachePolicyId The ID of the cache policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @return ApiResponse&lt;ListDistributionsByCachePolicyIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsByCachePolicyIdResult> listDistributionsByCachePolicyId20200531WithHttpInfo(String cachePolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributionsByCachePolicyId20200531ValidateBeforeCall(cachePolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsByCachePolicyIdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified cache policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param cachePolicyId The ID of the cache policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByCachePolicyId20200531Async(String cachePolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsByCachePolicyIdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributionsByCachePolicyId20200531ValidateBeforeCall(cachePolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsByCachePolicyIdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributionsByKeyGroup20200531
     * @param keyGroupId The ID of the key group whose associated distribution IDs you are listing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByKeyGroup20200531Call(String keyGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributionsByKeyGroupId/{KeyGroupId}"
            .replace("{" + "KeyGroupId" + "}", localVarApiClient.escapeString(keyGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributionsByKeyGroup20200531ValidateBeforeCall(String keyGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyGroupId' is set
        if (keyGroupId == null) {
            throw new ApiException("Missing the required parameter 'keyGroupId' when calling listDistributionsByKeyGroup20200531(Async)");
        }

        return listDistributionsByKeyGroup20200531Call(keyGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that references the specified key group.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param keyGroupId The ID of the key group whose associated distribution IDs you are listing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @return ListDistributionsByKeyGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsByKeyGroupResult listDistributionsByKeyGroup20200531(String keyGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsByKeyGroupResult> localVarResp = listDistributionsByKeyGroup20200531WithHttpInfo(keyGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that references the specified key group.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param keyGroupId The ID of the key group whose associated distribution IDs you are listing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @return ApiResponse&lt;ListDistributionsByKeyGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsByKeyGroupResult> listDistributionsByKeyGroup20200531WithHttpInfo(String keyGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributionsByKeyGroup20200531ValidateBeforeCall(keyGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsByKeyGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that references the specified key group.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param keyGroupId The ID of the key group whose associated distribution IDs you are listing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByKeyGroup20200531Async(String keyGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsByKeyGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributionsByKeyGroup20200531ValidateBeforeCall(keyGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsByKeyGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributionsByOriginRequestPolicyId20200531
     * @param originRequestPolicyId The ID of the origin request policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByOriginRequestPolicyId20200531Call(String originRequestPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributionsByOriginRequestPolicyId/{OriginRequestPolicyId}"
            .replace("{" + "OriginRequestPolicyId" + "}", localVarApiClient.escapeString(originRequestPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributionsByOriginRequestPolicyId20200531ValidateBeforeCall(String originRequestPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originRequestPolicyId' is set
        if (originRequestPolicyId == null) {
            throw new ApiException("Missing the required parameter 'originRequestPolicyId' when calling listDistributionsByOriginRequestPolicyId20200531(Async)");
        }

        return listDistributionsByOriginRequestPolicyId20200531Call(originRequestPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified origin request policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param originRequestPolicyId The ID of the origin request policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @return ListDistributionsByOriginRequestPolicyIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsByOriginRequestPolicyIdResult listDistributionsByOriginRequestPolicyId20200531(String originRequestPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsByOriginRequestPolicyIdResult> localVarResp = listDistributionsByOriginRequestPolicyId20200531WithHttpInfo(originRequestPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified origin request policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param originRequestPolicyId The ID of the origin request policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @return ApiResponse&lt;ListDistributionsByOriginRequestPolicyIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsByOriginRequestPolicyIdResult> listDistributionsByOriginRequestPolicyId20200531WithHttpInfo(String originRequestPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributionsByOriginRequestPolicyId20200531ValidateBeforeCall(originRequestPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsByOriginRequestPolicyIdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified origin request policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param originRequestPolicyId The ID of the origin request policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByOriginRequestPolicyId20200531Async(String originRequestPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsByOriginRequestPolicyIdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributionsByOriginRequestPolicyId20200531ValidateBeforeCall(originRequestPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsByOriginRequestPolicyIdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributionsByRealtimeLogConfig20200531
     * @param listDistributionsByRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByRealtimeLogConfig20200531Call(ListDistributionsByRealtimeLogConfig20200531Request listDistributionsByRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDistributionsByRealtimeLogConfig20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributionsByRealtimeLogConfig/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributionsByRealtimeLogConfig20200531ValidateBeforeCall(ListDistributionsByRealtimeLogConfig20200531Request listDistributionsByRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listDistributionsByRealtimeLogConfig20200531Request' is set
        if (listDistributionsByRealtimeLogConfig20200531Request == null) {
            throw new ApiException("Missing the required parameter 'listDistributionsByRealtimeLogConfig20200531Request' when calling listDistributionsByRealtimeLogConfig20200531(Async)");
        }

        return listDistributionsByRealtimeLogConfig20200531Call(listDistributionsByRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of distributions that have a cache behavior that&#39;s associated with the specified real-time log configuration.&lt;/p&gt; &lt;p&gt;You can specify the real-time log configuration by its name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to list distributions for.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param listDistributionsByRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListDistributionsByRealtimeLogConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsByRealtimeLogConfigResult listDistributionsByRealtimeLogConfig20200531(ListDistributionsByRealtimeLogConfig20200531Request listDistributionsByRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListDistributionsByRealtimeLogConfigResult> localVarResp = listDistributionsByRealtimeLogConfig20200531WithHttpInfo(listDistributionsByRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of distributions that have a cache behavior that&#39;s associated with the specified real-time log configuration.&lt;/p&gt; &lt;p&gt;You can specify the real-time log configuration by its name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to list distributions for.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param listDistributionsByRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListDistributionsByRealtimeLogConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsByRealtimeLogConfigResult> listDistributionsByRealtimeLogConfig20200531WithHttpInfo(ListDistributionsByRealtimeLogConfig20200531Request listDistributionsByRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listDistributionsByRealtimeLogConfig20200531ValidateBeforeCall(listDistributionsByRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListDistributionsByRealtimeLogConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of distributions that have a cache behavior that&#39;s associated with the specified real-time log configuration.&lt;/p&gt; &lt;p&gt;You can specify the real-time log configuration by its name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to list distributions for.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param listDistributionsByRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByRealtimeLogConfig20200531Async(ListDistributionsByRealtimeLogConfig20200531Request listDistributionsByRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListDistributionsByRealtimeLogConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributionsByRealtimeLogConfig20200531ValidateBeforeCall(listDistributionsByRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsByRealtimeLogConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributionsByResponseHeadersPolicyId20200531
     * @param responseHeadersPolicyId The ID of the response headers policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want to get in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByResponseHeadersPolicyId20200531Call(String responseHeadersPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributionsByResponseHeadersPolicyId/{ResponseHeadersPolicyId}"
            .replace("{" + "ResponseHeadersPolicyId" + "}", localVarApiClient.escapeString(responseHeadersPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributionsByResponseHeadersPolicyId20200531ValidateBeforeCall(String responseHeadersPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'responseHeadersPolicyId' is set
        if (responseHeadersPolicyId == null) {
            throw new ApiException("Missing the required parameter 'responseHeadersPolicyId' when calling listDistributionsByResponseHeadersPolicyId20200531(Async)");
        }

        return listDistributionsByResponseHeadersPolicyId20200531Call(responseHeadersPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified response headers policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param responseHeadersPolicyId The ID of the response headers policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want to get in the response. (optional)
     * @return ListDistributionsByResponseHeadersPolicyIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsByResponseHeadersPolicyIdResult listDistributionsByResponseHeadersPolicyId20200531(String responseHeadersPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsByResponseHeadersPolicyIdResult> localVarResp = listDistributionsByResponseHeadersPolicyId20200531WithHttpInfo(responseHeadersPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified response headers policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param responseHeadersPolicyId The ID of the response headers policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want to get in the response. (optional)
     * @return ApiResponse&lt;ListDistributionsByResponseHeadersPolicyIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsByResponseHeadersPolicyIdResult> listDistributionsByResponseHeadersPolicyId20200531WithHttpInfo(String responseHeadersPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributionsByResponseHeadersPolicyId20200531ValidateBeforeCall(responseHeadersPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsByResponseHeadersPolicyIdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified response headers policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param responseHeadersPolicyId The ID of the response headers policy whose associated distribution IDs you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of distribution IDs that you want to get in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByResponseHeadersPolicyId20200531Async(String responseHeadersPolicyId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsByResponseHeadersPolicyIdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributionsByResponseHeadersPolicyId20200531ValidateBeforeCall(responseHeadersPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsByResponseHeadersPolicyIdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributionsByWebACLId20200531
     * @param webACLId The ID of the WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.) (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByWebACLId20200531Call(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distributionsByWebACLId/{WebACLId}"
            .replace("{" + "WebACLId" + "}", localVarApiClient.escapeString(webACLId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributionsByWebACLId20200531ValidateBeforeCall(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webACLId' is set
        if (webACLId == null) {
            throw new ApiException("Missing the required parameter 'webACLId' when calling listDistributionsByWebACLId20200531(Async)");
        }

        return listDistributionsByWebACLId20200531Call(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List the distributions that are associated with a specified WAF web ACL.
     * @param webACLId The ID of the WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.) (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @return ListDistributionsByWebACLIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsByWebACLIdResult listDistributionsByWebACLId20200531(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsByWebACLIdResult> localVarResp = listDistributionsByWebACLId20200531WithHttpInfo(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List the distributions that are associated with a specified WAF web ACL.
     * @param webACLId The ID of the WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.) (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @return ApiResponse&lt;ListDistributionsByWebACLIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsByWebACLIdResult> listDistributionsByWebACLId20200531WithHttpInfo(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributionsByWebACLId20200531ValidateBeforeCall(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsByWebACLIdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the distributions that are associated with a specified WAF web ACL.
     * @param webACLId The ID of the WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.) (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByWebACLId20200531Async(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsByWebACLIdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributionsByWebACLId20200531ValidateBeforeCall(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsByWebACLIdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFieldLevelEncryptionConfigs20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last configuration on that page). (optional)
     * @param maxItems The maximum number of field-level encryption configurations you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFieldLevelEncryptionConfigs20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFieldLevelEncryptionConfigs20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listFieldLevelEncryptionConfigs20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last configuration on that page). (optional)
     * @param maxItems The maximum number of field-level encryption configurations you want in the response body. (optional)
     * @return ListFieldLevelEncryptionConfigsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListFieldLevelEncryptionConfigsResult listFieldLevelEncryptionConfigs20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListFieldLevelEncryptionConfigsResult> localVarResp = listFieldLevelEncryptionConfigs20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last configuration on that page). (optional)
     * @param maxItems The maximum number of field-level encryption configurations you want in the response body. (optional)
     * @return ApiResponse&lt;ListFieldLevelEncryptionConfigsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFieldLevelEncryptionConfigsResult> listFieldLevelEncryptionConfigs20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listFieldLevelEncryptionConfigs20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListFieldLevelEncryptionConfigsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last configuration on that page). (optional)
     * @param maxItems The maximum number of field-level encryption configurations you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFieldLevelEncryptionConfigs20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListFieldLevelEncryptionConfigsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFieldLevelEncryptionConfigs20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListFieldLevelEncryptionConfigsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFieldLevelEncryptionProfiles20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last profile on that page). (optional)
     * @param maxItems The maximum number of field-level encryption profiles you want in the response body.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFieldLevelEncryptionProfiles20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFieldLevelEncryptionProfiles20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listFieldLevelEncryptionProfiles20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last profile on that page). (optional)
     * @param maxItems The maximum number of field-level encryption profiles you want in the response body.  (optional)
     * @return ListFieldLevelEncryptionProfilesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListFieldLevelEncryptionProfilesResult listFieldLevelEncryptionProfiles20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListFieldLevelEncryptionProfilesResult> localVarResp = listFieldLevelEncryptionProfiles20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last profile on that page). (optional)
     * @param maxItems The maximum number of field-level encryption profiles you want in the response body.  (optional)
     * @return ApiResponse&lt;ListFieldLevelEncryptionProfilesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFieldLevelEncryptionProfilesResult> listFieldLevelEncryptionProfiles20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listFieldLevelEncryptionProfiles20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListFieldLevelEncryptionProfilesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last profile on that page). (optional)
     * @param maxItems The maximum number of field-level encryption profiles you want in the response body.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFieldLevelEncryptionProfiles20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListFieldLevelEncryptionProfilesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFieldLevelEncryptionProfiles20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListFieldLevelEncryptionProfilesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFunctions20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of functions that you want in the response. (optional)
     * @param stage An optional filter to return only the functions that are in the specified stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFunctions20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, String stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/function";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Stage", stage));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFunctions20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, String stage, final ApiCallback _callback) throws ApiException {
        return listFunctions20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, stage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of all CloudFront functions in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the functions that are in the specified stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of functions that you want in the response. (optional)
     * @param stage An optional filter to return only the functions that are in the specified stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @return ListFunctionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ListFunctionsResult listFunctions20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, String stage) throws ApiException {
        ApiResponse<ListFunctionsResult> localVarResp = listFunctions20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, stage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of all CloudFront functions in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the functions that are in the specified stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of functions that you want in the response. (optional)
     * @param stage An optional filter to return only the functions that are in the specified stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ListFunctionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFunctionsResult> listFunctions20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, String stage) throws ApiException {
        okhttp3.Call localVarCall = listFunctions20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, stage, null);
        Type localVarReturnType = new TypeToken<ListFunctionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of all CloudFront functions in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the functions that are in the specified stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of functions that you want in the response. (optional)
     * @param stage An optional filter to return only the functions that are in the specified stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFunctions20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, String stage, final ApiCallback<ListFunctionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFunctions20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, stage, _callback);
        Type localVarReturnType = new TypeToken<ListFunctionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvalidations20200531
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page. (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvalidations20200531Call(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{DistributionId}/invalidation"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvalidations20200531ValidateBeforeCall(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling listInvalidations20200531(Async)");
        }

        return listInvalidations20200531Call(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * Lists invalidation batches.
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page. (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @return ListInvalidationsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ListInvalidationsResult listInvalidations20200531(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListInvalidationsResult> localVarResp = listInvalidations20200531WithHttpInfo(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists invalidation batches.
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page. (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @return ApiResponse&lt;ListInvalidationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListInvalidationsResult> listInvalidations20200531WithHttpInfo(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listInvalidations20200531ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListInvalidationsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists invalidation batches.
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page. (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvalidations20200531Async(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListInvalidationsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvalidations20200531ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListInvalidationsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listKeyGroups20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of key groups. The response includes key groups in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of key groups that you want in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listKeyGroups20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/key-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listKeyGroups20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listKeyGroups20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of key groups.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of key groups. The response includes key groups in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of key groups that you want in the response. (optional)
     * @return ListKeyGroupsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListKeyGroupsResult listKeyGroups20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListKeyGroupsResult> localVarResp = listKeyGroups20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of key groups.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of key groups. The response includes key groups in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of key groups that you want in the response. (optional)
     * @return ApiResponse&lt;ListKeyGroupsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListKeyGroupsResult> listKeyGroups20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listKeyGroups20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListKeyGroupsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of key groups.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of key groups. The response includes key groups in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of key groups that you want in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listKeyGroups20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListKeyGroupsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listKeyGroups20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListKeyGroupsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOriginAccessControls20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of origin access controls. The response includes the items in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of origin access controls that you want in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOriginAccessControls20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-control";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOriginAccessControls20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listOriginAccessControls20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the list of CloudFront origin access controls in this Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send another request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the next request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of origin access controls. The response includes the items in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of origin access controls that you want in the response. (optional)
     * @return ListOriginAccessControlsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListOriginAccessControlsResult listOriginAccessControls20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListOriginAccessControlsResult> localVarResp = listOriginAccessControls20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the list of CloudFront origin access controls in this Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send another request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the next request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of origin access controls. The response includes the items in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of origin access controls that you want in the response. (optional)
     * @return ApiResponse&lt;ListOriginAccessControlsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOriginAccessControlsResult> listOriginAccessControls20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listOriginAccessControls20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListOriginAccessControlsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the list of CloudFront origin access controls in this Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send another request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the next request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of origin access controls. The response includes the items in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of origin access controls that you want in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOriginAccessControls20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListOriginAccessControlsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOriginAccessControls20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListOriginAccessControlsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOriginRequestPolicies20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to return only the specified kinds of origin request policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Returns only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Returns only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of origin request policies that you want in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOriginRequestPolicies20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-request-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOriginRequestPolicies20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listOriginRequestPolicies20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of origin request policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to return only the specified kinds of origin request policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Returns only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Returns only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of origin request policies that you want in the response. (optional)
     * @return ListOriginRequestPoliciesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListOriginRequestPoliciesResult listOriginRequestPolicies20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems) throws ApiException {
        ApiResponse<ListOriginRequestPoliciesResult> localVarResp = listOriginRequestPolicies20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of origin request policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to return only the specified kinds of origin request policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Returns only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Returns only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of origin request policies that you want in the response. (optional)
     * @return ApiResponse&lt;ListOriginRequestPoliciesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOriginRequestPoliciesResult> listOriginRequestPolicies20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listOriginRequestPolicies20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListOriginRequestPoliciesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of origin request policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to return only the specified kinds of origin request policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Returns only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Returns only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of origin request policies that you want in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOriginRequestPolicies20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback<ListOriginRequestPoliciesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOriginRequestPolicies20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListOriginRequestPoliciesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPublicKeys20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last public key on that page). (optional)
     * @param maxItems The maximum number of public keys you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublicKeys20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/public-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublicKeys20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listPublicKeys20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List all public keys that have been added to CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last public key on that page). (optional)
     * @param maxItems The maximum number of public keys you want in the response body. (optional)
     * @return ListPublicKeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListPublicKeysResult listPublicKeys20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListPublicKeysResult> localVarResp = listPublicKeys20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List all public keys that have been added to CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last public key on that page). (optional)
     * @param maxItems The maximum number of public keys you want in the response body. (optional)
     * @return ApiResponse&lt;ListPublicKeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPublicKeysResult> listPublicKeys20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listPublicKeys20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListPublicKeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all public keys that have been added to CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last public key on that page). (optional)
     * @param maxItems The maximum number of public keys you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublicKeys20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListPublicKeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublicKeys20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListPublicKeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRealtimeLogConfigs20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems The maximum number of real-time log configurations that you want in the response. (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of real-time log configurations. The response includes real-time log configurations in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRealtimeLogConfigs20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/realtime-log-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRealtimeLogConfigs20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        return listRealtimeLogConfigs20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of real-time log configurations.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems The maximum number of real-time log configurations that you want in the response. (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of real-time log configurations. The response includes real-time log configurations in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @return ListRealtimeLogConfigsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
     </table>
     */
    public ListRealtimeLogConfigsResult listRealtimeLogConfigs20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        ApiResponse<ListRealtimeLogConfigsResult> localVarResp = listRealtimeLogConfigs20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of real-time log configurations.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems The maximum number of real-time log configurations that you want in the response. (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of real-time log configurations. The response includes real-time log configurations in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @return ApiResponse&lt;ListRealtimeLogConfigsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRealtimeLogConfigsResult> listRealtimeLogConfigs20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        okhttp3.Call localVarCall = listRealtimeLogConfigs20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, null);
        Type localVarReturnType = new TypeToken<ListRealtimeLogConfigsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of real-time log configurations.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems The maximum number of real-time log configurations that you want in the response. (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of real-time log configurations. The response includes real-time log configurations in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRealtimeLogConfigs20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback<ListRealtimeLogConfigsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRealtimeLogConfigs20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);
        Type localVarReturnType = new TypeToken<ListRealtimeLogConfigsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listResponseHeadersPolicies20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to get only the specified kind of response headers policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Gets only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Gets only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of response headers policies. The response includes response headers policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of response headers policies that you want to get in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResponseHeadersPolicies20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/response-headers-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResponseHeadersPolicies20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listResponseHeadersPolicies20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a list of response headers policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to get only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to get only the specified kind of response headers policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Gets only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Gets only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of response headers policies. The response includes response headers policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of response headers policies that you want to get in the response. (optional)
     * @return ListResponseHeadersPoliciesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseHeadersPoliciesResult listResponseHeadersPolicies20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems) throws ApiException {
        ApiResponse<ListResponseHeadersPoliciesResult> localVarResp = listResponseHeadersPolicies20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a list of response headers policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to get only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to get only the specified kind of response headers policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Gets only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Gets only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of response headers policies. The response includes response headers policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of response headers policies that you want to get in the response. (optional)
     * @return ApiResponse&lt;ListResponseHeadersPoliciesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseHeadersPoliciesResult> listResponseHeadersPolicies20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listResponseHeadersPolicies20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListResponseHeadersPoliciesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a list of response headers policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to get only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;A filter to get only the specified kind of response headers policies. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;managed&lt;/code&gt; – Gets only the managed policies created by Amazon Web Services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;custom&lt;/code&gt; – Gets only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker Use this field when paginating results to indicate where to begin in your list of response headers policies. The response includes response headers policies in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. (optional)
     * @param maxItems The maximum number of response headers policies that you want to get in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResponseHeadersPolicies20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String marker, String maxItems, final ApiCallback<ListResponseHeadersPoliciesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResponseHeadersPolicies20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListResponseHeadersPoliciesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStreamingDistributions20200531
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamingDistributions20200531Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/streaming-distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStreamingDistributions20200531ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listStreamingDistributions20200531Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List streaming distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @return ListStreamingDistributionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListStreamingDistributionsResult listStreamingDistributions20200531(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListStreamingDistributionsResult> localVarResp = listStreamingDistributions20200531WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List streaming distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @return ApiResponse&lt;ListStreamingDistributionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStreamingDistributionsResult> listStreamingDistributions20200531WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listStreamingDistributions20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListStreamingDistributionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List streaming distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamingDistributions20200531Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListStreamingDistributionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStreamingDistributions20200531ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListStreamingDistributionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource20200531
     * @param resource An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResource20200531Call(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/tagging#Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResource20200531ValidateBeforeCall(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling listTagsForResource20200531(Async)");
        }

        return listTagsForResource20200531Call(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * List tags for a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResult listTagsForResource20200531(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResult> localVarResp = listTagsForResource20200531WithHttpInfo(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * List tags for a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResult> listTagsForResource20200531WithHttpInfo(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResource20200531ValidateBeforeCall(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List tags for a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResource20200531Async(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResource20200531ValidateBeforeCall(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishFunction20200531
     * @param name The name of the function that you are publishing. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are publishing, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishFunction20200531Call(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/function/{Name}/publish#If-Match"
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishFunction20200531ValidateBeforeCall(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling publishFunction20200531(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling publishFunction20200531(Async)");
        }

        return publishFunction20200531Call(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Publishes a CloudFront function by copying the function code from the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage to &lt;code&gt;LIVE&lt;/code&gt;. This automatically updates all cache behaviors that are using this function to use the newly published copy in the &lt;code&gt;LIVE&lt;/code&gt; stage.&lt;/p&gt; &lt;p&gt;When a function is published to the &lt;code&gt;LIVE&lt;/code&gt; stage, you can attach the function to a distribution&#39;s cache behavior, using the function&#39;s Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;To publish a function, you must provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value). To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are publishing. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are publishing, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PublishFunctionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public PublishFunctionResult publishFunction20200531(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PublishFunctionResult> localVarResp = publishFunction20200531WithHttpInfo(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Publishes a CloudFront function by copying the function code from the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage to &lt;code&gt;LIVE&lt;/code&gt;. This automatically updates all cache behaviors that are using this function to use the newly published copy in the &lt;code&gt;LIVE&lt;/code&gt; stage.&lt;/p&gt; &lt;p&gt;When a function is published to the &lt;code&gt;LIVE&lt;/code&gt; stage, you can attach the function to a distribution&#39;s cache behavior, using the function&#39;s Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;To publish a function, you must provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value). To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are publishing. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are publishing, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PublishFunctionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishFunctionResult> publishFunction20200531WithHttpInfo(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = publishFunction20200531ValidateBeforeCall(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PublishFunctionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Publishes a CloudFront function by copying the function code from the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage to &lt;code&gt;LIVE&lt;/code&gt;. This automatically updates all cache behaviors that are using this function to use the newly published copy in the &lt;code&gt;LIVE&lt;/code&gt; stage.&lt;/p&gt; &lt;p&gt;When a function is published to the &lt;code&gt;LIVE&lt;/code&gt; stage, you can attach the function to a distribution&#39;s cache behavior, using the function&#39;s Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;To publish a function, you must provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value). To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are publishing. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are publishing, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishFunction20200531Async(String name, String ifMatch, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PublishFunctionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishFunction20200531ValidateBeforeCall(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PublishFunctionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource20200531
     * @param resource An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResource20200531Call(String resource, String operation, TagResource20200531Request tagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResource20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/tagging#Operation=Tag&Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResource20200531ValidateBeforeCall(String resource, String operation, TagResource20200531Request tagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling tagResource20200531(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling tagResource20200531(Async)");
        }

        // verify the required parameter 'tagResource20200531Request' is set
        if (tagResource20200531Request == null) {
            throw new ApiException("Missing the required parameter 'tagResource20200531Request' when calling tagResource20200531(Async)");
        }

        return tagResource20200531Call(resource, operation, tagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Add tags to a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public void tagResource20200531(String resource, String operation, TagResource20200531Request tagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagResource20200531WithHttpInfo(resource, operation, tagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Add tags to a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagResource20200531WithHttpInfo(String resource, String operation, TagResource20200531Request tagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResource20200531ValidateBeforeCall(resource, operation, tagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add tags to a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResource20200531Async(String resource, String operation, TagResource20200531Request tagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResource20200531ValidateBeforeCall(resource, operation, tagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testFunction20200531
     * @param name The name of the function that you are testing. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are testing, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param testFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TestFunctionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testFunction20200531Call(String name, String ifMatch, TestFunction20200531Request testFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testFunction20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/function/{Name}/test#If-Match"
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testFunction20200531ValidateBeforeCall(String name, String ifMatch, TestFunction20200531Request testFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling testFunction20200531(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling testFunction20200531(Async)");
        }

        // verify the required parameter 'testFunction20200531Request' is set
        if (testFunction20200531Request == null) {
            throw new ApiException("Missing the required parameter 'testFunction20200531Request' when calling testFunction20200531(Async)");
        }

        return testFunction20200531Call(name, ifMatch, testFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Tests a CloudFront function.&lt;/p&gt; &lt;p&gt;To test a function, you provide an &lt;i&gt;event object&lt;/i&gt; that represents an HTTP request or response that your CloudFront distribution could receive in production. CloudFront runs the function, passing it the event object that you provided, and returns the function&#39;s result (the modified event object) in the response. The response also contains function logs and error messages, if any exist. For more information about testing functions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function\&quot;&gt;Testing functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To test a function, you provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value) along with the event object. To get the function&#39;s name and version, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are testing. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are testing, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param testFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TestFunctionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TestFunctionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public TestFunctionResult testFunction20200531(String name, String ifMatch, TestFunction20200531Request testFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TestFunctionResult> localVarResp = testFunction20200531WithHttpInfo(name, ifMatch, testFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Tests a CloudFront function.&lt;/p&gt; &lt;p&gt;To test a function, you provide an &lt;i&gt;event object&lt;/i&gt; that represents an HTTP request or response that your CloudFront distribution could receive in production. CloudFront runs the function, passing it the event object that you provided, and returns the function&#39;s result (the modified event object) in the response. The response also contains function logs and error messages, if any exist. For more information about testing functions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function\&quot;&gt;Testing functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To test a function, you provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value) along with the event object. To get the function&#39;s name and version, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are testing. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are testing, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param testFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TestFunctionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TestFunctionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestFunctionResult> testFunction20200531WithHttpInfo(String name, String ifMatch, TestFunction20200531Request testFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = testFunction20200531ValidateBeforeCall(name, ifMatch, testFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TestFunctionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Tests a CloudFront function.&lt;/p&gt; &lt;p&gt;To test a function, you provide an &lt;i&gt;event object&lt;/i&gt; that represents an HTTP request or response that your CloudFront distribution could receive in production. CloudFront runs the function, passing it the event object that you provided, and returns the function&#39;s result (the modified event object) in the response. The response also contains function logs and error messages, if any exist. For more information about testing functions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function\&quot;&gt;Testing functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To test a function, you provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value) along with the event object. To get the function&#39;s name and version, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are testing. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are testing, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param testFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TestFunctionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testFunction20200531Async(String name, String ifMatch, TestFunction20200531Request testFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TestFunctionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testFunction20200531ValidateBeforeCall(name, ifMatch, testFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TestFunctionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource20200531
     * @param resource An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResource20200531Call(String resource, String operation, UntagResource20200531Request untagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResource20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/tagging#Operation=Untag&Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResource20200531ValidateBeforeCall(String resource, String operation, UntagResource20200531Request untagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling untagResource20200531(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling untagResource20200531(Async)");
        }

        // verify the required parameter 'untagResource20200531Request' is set
        if (untagResource20200531Request == null) {
            throw new ApiException("Missing the required parameter 'untagResource20200531Request' when calling untagResource20200531(Async)");
        }

        return untagResource20200531Call(resource, operation, untagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Remove tags from a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public void untagResource20200531(String resource, String operation, UntagResource20200531Request untagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagResource20200531WithHttpInfo(resource, operation, untagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Remove tags from a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagResource20200531WithHttpInfo(String resource, String operation, UntagResource20200531Request untagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResource20200531ValidateBeforeCall(resource, operation, untagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove tags from a CloudFront resource.
     * @param resource An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResource20200531Async(String resource, String operation, UntagResource20200531Request untagResource20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResource20200531ValidateBeforeCall(resource, operation, untagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCachePolicy20200531
     * @param id The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior&#39;s &lt;code&gt;CachePolicyId&lt;/code&gt; field in the response to &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (required)
     * @param createCachePolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the cache policy that you are updating. The version is returned in the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetCachePolicyConfig&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CachePolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyHeadersInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyCookiesInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyQueryStringsInCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCachePolicy20200531Call(String id, CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCachePolicy20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/cache-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCachePolicy20200531ValidateBeforeCall(String id, CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCachePolicy20200531(Async)");
        }

        // verify the required parameter 'createCachePolicy20200531Request' is set
        if (createCachePolicy20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createCachePolicy20200531Request' when calling updateCachePolicy20200531(Async)");
        }

        return updateCachePolicy20200531Call(id, createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a cache policy configuration.&lt;/p&gt; &lt;p&gt;When you update a cache policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a cache policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetCachePolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the cache policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateCachePolicy&lt;/code&gt; by providing the entire cache policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior&#39;s &lt;code&gt;CachePolicyId&lt;/code&gt; field in the response to &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (required)
     * @param createCachePolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the cache policy that you are updating. The version is returned in the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetCachePolicyConfig&lt;/code&gt;. (optional)
     * @return UpdateCachePolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CachePolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyHeadersInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyCookiesInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyQueryStringsInCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCachePolicyResult updateCachePolicy20200531(String id, CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateCachePolicyResult> localVarResp = updateCachePolicy20200531WithHttpInfo(id, createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a cache policy configuration.&lt;/p&gt; &lt;p&gt;When you update a cache policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a cache policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetCachePolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the cache policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateCachePolicy&lt;/code&gt; by providing the entire cache policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior&#39;s &lt;code&gt;CachePolicyId&lt;/code&gt; field in the response to &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (required)
     * @param createCachePolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the cache policy that you are updating. The version is returned in the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetCachePolicyConfig&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateCachePolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CachePolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyHeadersInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyCookiesInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyQueryStringsInCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCachePolicyResult> updateCachePolicy20200531WithHttpInfo(String id, CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateCachePolicy20200531ValidateBeforeCall(id, createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateCachePolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a cache policy configuration.&lt;/p&gt; &lt;p&gt;When you update a cache policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a cache policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetCachePolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the cache policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateCachePolicy&lt;/code&gt; by providing the entire cache policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior&#39;s &lt;code&gt;CachePolicyId&lt;/code&gt; field in the response to &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (required)
     * @param createCachePolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the cache policy that you are updating. The version is returned in the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetCachePolicyConfig&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CachePolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyHeadersInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyCookiesInCachePolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyQueryStringsInCachePolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCachePolicy20200531Async(String id, CreateCachePolicy20200531Request createCachePolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateCachePolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCachePolicy20200531ValidateBeforeCall(id, createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateCachePolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCloudFrontOriginAccessIdentity20200531
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudFrontOriginAccessIdentity20200531Call(String id, CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCloudFrontOriginAccessIdentity20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-identity/cloudfront/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(String id, CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCloudFrontOriginAccessIdentity20200531(Async)");
        }

        // verify the required parameter 'createCloudFrontOriginAccessIdentity20200531Request' is set
        if (createCloudFrontOriginAccessIdentity20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createCloudFrontOriginAccessIdentity20200531Request' when calling updateCloudFrontOriginAccessIdentity20200531(Async)");
        }

        return updateCloudFrontOriginAccessIdentity20200531Call(id, createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update an origin access identity.
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCloudFrontOriginAccessIdentityResult updateCloudFrontOriginAccessIdentity20200531(String id, CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateCloudFrontOriginAccessIdentityResult> localVarResp = updateCloudFrontOriginAccessIdentity20200531WithHttpInfo(id, createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an origin access identity.
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCloudFrontOriginAccessIdentityResult> updateCloudFrontOriginAccessIdentity20200531WithHttpInfo(String id, CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(id, createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an origin access identity.
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudFrontOriginAccessIdentity20200531Async(String id, CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCloudFrontOriginAccessIdentity20200531ValidateBeforeCall(id, createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContinuousDeploymentPolicy20200531
     * @param id The identifier of the continuous deployment policy that you are updating. (required)
     * @param createContinuousDeploymentPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the continuous deployment policy that you are updating. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContinuousDeploymentPolicy20200531Call(String id, CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContinuousDeploymentPolicy20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/continuous-deployment-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContinuousDeploymentPolicy20200531ValidateBeforeCall(String id, CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContinuousDeploymentPolicy20200531(Async)");
        }

        // verify the required parameter 'createContinuousDeploymentPolicy20200531Request' is set
        if (createContinuousDeploymentPolicy20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createContinuousDeploymentPolicy20200531Request' when calling updateContinuousDeploymentPolicy20200531(Async)");
        }

        return updateContinuousDeploymentPolicy20200531Call(id, createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a continuous deployment policy. You can update a continuous deployment policy to enable or disable it, to change the percentage of traffic that it sends to the staging distribution, or to change the staging distribution that it sends traffic to.&lt;/p&gt; &lt;p&gt;When you update a continuous deployment policy configuration, all the fields are updated with the values that are provided in the request. You cannot update some fields independent of others. To update a continuous deployment policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetContinuousDeploymentPolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the continuous deployment policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;UpdateContinuousDeploymentPolicy&lt;/code&gt;, providing the entire continuous deployment policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier of the continuous deployment policy that you are updating. (required)
     * @param createContinuousDeploymentPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the continuous deployment policy that you are updating. (optional)
     * @return UpdateContinuousDeploymentPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContinuousDeploymentPolicyResult updateContinuousDeploymentPolicy20200531(String id, CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateContinuousDeploymentPolicyResult> localVarResp = updateContinuousDeploymentPolicy20200531WithHttpInfo(id, createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a continuous deployment policy. You can update a continuous deployment policy to enable or disable it, to change the percentage of traffic that it sends to the staging distribution, or to change the staging distribution that it sends traffic to.&lt;/p&gt; &lt;p&gt;When you update a continuous deployment policy configuration, all the fields are updated with the values that are provided in the request. You cannot update some fields independent of others. To update a continuous deployment policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetContinuousDeploymentPolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the continuous deployment policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;UpdateContinuousDeploymentPolicy&lt;/code&gt;, providing the entire continuous deployment policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier of the continuous deployment policy that you are updating. (required)
     * @param createContinuousDeploymentPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the continuous deployment policy that you are updating. (optional)
     * @return ApiResponse&lt;UpdateContinuousDeploymentPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateContinuousDeploymentPolicyResult> updateContinuousDeploymentPolicy20200531WithHttpInfo(String id, CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateContinuousDeploymentPolicy20200531ValidateBeforeCall(id, createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateContinuousDeploymentPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a continuous deployment policy. You can update a continuous deployment policy to enable or disable it, to change the percentage of traffic that it sends to the staging distribution, or to change the staging distribution that it sends traffic to.&lt;/p&gt; &lt;p&gt;When you update a continuous deployment policy configuration, all the fields are updated with the values that are provided in the request. You cannot update some fields independent of others. To update a continuous deployment policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetContinuousDeploymentPolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the continuous deployment policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;UpdateContinuousDeploymentPolicy&lt;/code&gt;, providing the entire continuous deployment policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier of the continuous deployment policy that you are updating. (required)
     * @param createContinuousDeploymentPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the continuous deployment policy that you are updating. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContinuousDeploymentPolicy20200531Async(String id, CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateContinuousDeploymentPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContinuousDeploymentPolicy20200531ValidateBeforeCall(id, createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateContinuousDeploymentPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDistribution20200531
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 545 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDistribution20200531Call(String id, CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistribution20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDistribution20200531ValidateBeforeCall(String id, CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDistribution20200531(Async)");
        }

        // verify the required parameter 'createDistribution20200531Request' is set
        if (createDistribution20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createDistribution20200531Request' when calling updateDistribution20200531(Async)");
        }

        return updateDistribution20200531Call(id, createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the configuration for a CloudFront distribution.&lt;/p&gt; &lt;p&gt;The update process includes getting the current distribution configuration, updating it to make your changes, and then submitting an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to make the updates.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetDistributionConfig&lt;/code&gt; to get the current configuration, including the version identifier (&lt;code&gt;ETag&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the distribution configuration that was returned in the response. Note the following important requirements and restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must rename the &lt;code&gt;ETag&lt;/code&gt; field to &lt;code&gt;IfMatch&lt;/code&gt;, leaving the value unchanged. (Set the value of &lt;code&gt;IfMatch&lt;/code&gt; to the value of &lt;code&gt;ETag&lt;/code&gt;, then remove the &lt;code&gt;ETag&lt;/code&gt; field.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request, providing the distribution configuration. The new configuration replaces the existing configuration. The values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into your existing configuration. Make sure to include all fields: the ones that you modified and also the ones that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 545 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDistributionResult updateDistribution20200531(String id, CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateDistributionResult> localVarResp = updateDistribution20200531WithHttpInfo(id, createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the configuration for a CloudFront distribution.&lt;/p&gt; &lt;p&gt;The update process includes getting the current distribution configuration, updating it to make your changes, and then submitting an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to make the updates.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetDistributionConfig&lt;/code&gt; to get the current configuration, including the version identifier (&lt;code&gt;ETag&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the distribution configuration that was returned in the response. Note the following important requirements and restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must rename the &lt;code&gt;ETag&lt;/code&gt; field to &lt;code&gt;IfMatch&lt;/code&gt;, leaving the value unchanged. (Set the value of &lt;code&gt;IfMatch&lt;/code&gt; to the value of &lt;code&gt;ETag&lt;/code&gt;, then remove the &lt;code&gt;ETag&lt;/code&gt; field.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request, providing the distribution configuration. The new configuration replaces the existing configuration. The values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into your existing configuration. Make sure to include all fields: the ones that you modified and also the ones that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 545 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDistributionResult> updateDistribution20200531WithHttpInfo(String id, CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateDistribution20200531ValidateBeforeCall(id, createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the configuration for a CloudFront distribution.&lt;/p&gt; &lt;p&gt;The update process includes getting the current distribution configuration, updating it to make your changes, and then submitting an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to make the updates.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetDistributionConfig&lt;/code&gt; to get the current configuration, including the version identifier (&lt;code&gt;ETag&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the distribution configuration that was returned in the response. Note the following important requirements and restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must rename the &lt;code&gt;ETag&lt;/code&gt; field to &lt;code&gt;IfMatch&lt;/code&gt;, leaving the value unchanged. (Set the value of &lt;code&gt;IfMatch&lt;/code&gt; to the value of &lt;code&gt;ETag&lt;/code&gt;, then remove the &lt;code&gt;ETag&lt;/code&gt; field.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request, providing the distribution configuration. The new configuration replaces the existing configuration. The values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into your existing configuration. Make sure to include all fields: the ones that you modified and also the ones that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
        <tr><td> 541 </td><td> ContinuousDeploymentPolicyInUse </td><td>  -  </td></tr>
        <tr><td> 542 </td><td> NoSuchContinuousDeploymentPolicy </td><td>  -  </td></tr>
        <tr><td> 543 </td><td> StagingDistributionInUse </td><td>  -  </td></tr>
        <tr><td> 544 </td><td> IllegalOriginAccessConfiguration </td><td>  -  </td></tr>
        <tr><td> 545 </td><td> InvalidDomainNameForOriginAccessControl </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDistribution20200531Async(String id, CreateDistribution20200531Request createDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDistribution20200531ValidateBeforeCall(id, createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDistributionWithStagingConfig20200531
     * @param id The identifier of the primary distribution to which you are copying a staging distribution&#39;s configuration. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stagingDistributionId The identifier of the staging distribution whose configuration you are copying to the primary distribution. (optional)
     * @param ifMatch &lt;p&gt;The current versions (&lt;code&gt;ETag&lt;/code&gt; values) of both primary and staging distributions. Provide these in the following format:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;primary ETag&amp;gt;, &amp;lt;staging ETag&amp;gt;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDistributionWithStagingConfig20200531Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stagingDistributionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-05-31/distribution/{Id}/promote-staging-config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stagingDistributionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StagingDistributionId", stagingDistributionId));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDistributionWithStagingConfig20200531ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stagingDistributionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDistributionWithStagingConfig20200531(Async)");
        }

        return updateDistributionWithStagingConfig20200531Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stagingDistributionId, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Copies the staging distribution&#39;s configuration to its corresponding primary distribution. The primary distribution retains its &lt;code&gt;Aliases&lt;/code&gt; (also known as alternate domain names or CNAMEs) and &lt;code&gt;ContinuousDeploymentPolicyId&lt;/code&gt; value, but otherwise its configuration is overwritten to match the staging distribution.&lt;/p&gt; &lt;p&gt;You can use this operation in a continuous deployment workflow after you have tested configuration changes on the staging distribution. After using a continuous deployment policy to move a portion of your domain name&#39;s traffic to the staging distribution and verifying that it works as intended, you can use this operation to copy the staging distribution&#39;s configuration to the primary distribution. This action will disable the continuous deployment policy and move your domain&#39;s traffic back to the primary distribution.&lt;/p&gt; &lt;p&gt;This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html\&quot;&gt;UpdateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The identifier of the primary distribution to which you are copying a staging distribution&#39;s configuration. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stagingDistributionId The identifier of the staging distribution whose configuration you are copying to the primary distribution. (optional)
     * @param ifMatch &lt;p&gt;The current versions (&lt;code&gt;ETag&lt;/code&gt; values) of both primary and staging distributions. Provide these in the following format:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;primary ETag&amp;gt;, &amp;lt;staging ETag&amp;gt;&lt;/code&gt; &lt;/p&gt; (optional)
     * @return UpdateDistributionWithStagingConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDistributionWithStagingConfigResult updateDistributionWithStagingConfig20200531(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stagingDistributionId, String ifMatch) throws ApiException {
        ApiResponse<UpdateDistributionWithStagingConfigResult> localVarResp = updateDistributionWithStagingConfig20200531WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stagingDistributionId, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Copies the staging distribution&#39;s configuration to its corresponding primary distribution. The primary distribution retains its &lt;code&gt;Aliases&lt;/code&gt; (also known as alternate domain names or CNAMEs) and &lt;code&gt;ContinuousDeploymentPolicyId&lt;/code&gt; value, but otherwise its configuration is overwritten to match the staging distribution.&lt;/p&gt; &lt;p&gt;You can use this operation in a continuous deployment workflow after you have tested configuration changes on the staging distribution. After using a continuous deployment policy to move a portion of your domain name&#39;s traffic to the staging distribution and verifying that it works as intended, you can use this operation to copy the staging distribution&#39;s configuration to the primary distribution. This action will disable the continuous deployment policy and move your domain&#39;s traffic back to the primary distribution.&lt;/p&gt; &lt;p&gt;This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html\&quot;&gt;UpdateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The identifier of the primary distribution to which you are copying a staging distribution&#39;s configuration. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stagingDistributionId The identifier of the staging distribution whose configuration you are copying to the primary distribution. (optional)
     * @param ifMatch &lt;p&gt;The current versions (&lt;code&gt;ETag&lt;/code&gt; values) of both primary and staging distributions. Provide these in the following format:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;primary ETag&amp;gt;, &amp;lt;staging ETag&amp;gt;&lt;/code&gt; &lt;/p&gt; (optional)
     * @return ApiResponse&lt;UpdateDistributionWithStagingConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDistributionWithStagingConfigResult> updateDistributionWithStagingConfig20200531WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stagingDistributionId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateDistributionWithStagingConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stagingDistributionId, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateDistributionWithStagingConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Copies the staging distribution&#39;s configuration to its corresponding primary distribution. The primary distribution retains its &lt;code&gt;Aliases&lt;/code&gt; (also known as alternate domain names or CNAMEs) and &lt;code&gt;ContinuousDeploymentPolicyId&lt;/code&gt; value, but otherwise its configuration is overwritten to match the staging distribution.&lt;/p&gt; &lt;p&gt;You can use this operation in a continuous deployment workflow after you have tested configuration changes on the staging distribution. After using a continuous deployment policy to move a portion of your domain name&#39;s traffic to the staging distribution and verifying that it works as intended, you can use this operation to copy the staging distribution&#39;s configuration to the primary distribution. This action will disable the continuous deployment policy and move your domain&#39;s traffic back to the primary distribution.&lt;/p&gt; &lt;p&gt;This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html\&quot;&gt;UpdateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param id The identifier of the primary distribution to which you are copying a staging distribution&#39;s configuration. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stagingDistributionId The identifier of the staging distribution whose configuration you are copying to the primary distribution. (optional)
     * @param ifMatch &lt;p&gt;The current versions (&lt;code&gt;ETag&lt;/code&gt; values) of both primary and staging distributions. Provide these in the following format:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;primary ETag&amp;gt;, &amp;lt;staging ETag&amp;gt;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyDistributionsWithSingleFunctionARN </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> TooManyDistributionsWithFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> TooManyFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> InvalidFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 525 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 526 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 527 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 528 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 529 </td><td> NoSuchCachePolicy </td><td>  -  </td></tr>
        <tr><td> 530 </td><td> TooManyDistributionsAssociatedToCachePolicy </td><td>  -  </td></tr>
        <tr><td> 531 </td><td> TooManyDistributionsAssociatedToOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 532 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 533 </td><td> TooManyDistributionsAssociatedToResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 534 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 535 </td><td> TooManyDistributionsAssociatedToOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 536 </td><td> TooManyDistributionsAssociatedToKeyGroup </td><td>  -  </td></tr>
        <tr><td> 537 </td><td> TooManyKeyGroupsAssociatedToDistribution </td><td>  -  </td></tr>
        <tr><td> 538 </td><td> TrustedKeyGroupDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 539 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 540 </td><td> RealtimeLogConfigOwnerMismatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDistributionWithStagingConfig20200531Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stagingDistributionId, String ifMatch, final ApiCallback<UpdateDistributionWithStagingConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDistributionWithStagingConfig20200531ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stagingDistributionId, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateDistributionWithStagingConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFieldLevelEncryptionConfig20200531
     * @param id The ID of the configuration you want to update. (required)
     * @param createFieldLevelEncryptionConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldLevelEncryptionConfig20200531Call(String id, CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFieldLevelEncryptionConfig20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldLevelEncryptionConfig20200531ValidateBeforeCall(String id, CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFieldLevelEncryptionConfig20200531(Async)");
        }

        // verify the required parameter 'createFieldLevelEncryptionConfig20200531Request' is set
        if (createFieldLevelEncryptionConfig20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createFieldLevelEncryptionConfig20200531Request' when calling updateFieldLevelEncryptionConfig20200531(Async)");
        }

        return updateFieldLevelEncryptionConfig20200531Call(id, createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update a field-level encryption configuration.
     * @param id The ID of the configuration you want to update. (required)
     * @param createFieldLevelEncryptionConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateFieldLevelEncryptionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldLevelEncryptionConfigResult updateFieldLevelEncryptionConfig20200531(String id, CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateFieldLevelEncryptionConfigResult> localVarResp = updateFieldLevelEncryptionConfig20200531WithHttpInfo(id, createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a field-level encryption configuration.
     * @param id The ID of the configuration you want to update. (required)
     * @param createFieldLevelEncryptionConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateFieldLevelEncryptionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateFieldLevelEncryptionConfigResult> updateFieldLevelEncryptionConfig20200531WithHttpInfo(String id, CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateFieldLevelEncryptionConfig20200531ValidateBeforeCall(id, createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateFieldLevelEncryptionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a field-level encryption configuration.
     * @param id The ID of the configuration you want to update. (required)
     * @param createFieldLevelEncryptionConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldLevelEncryptionConfig20200531Async(String id, CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateFieldLevelEncryptionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldLevelEncryptionConfig20200531ValidateBeforeCall(id, createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateFieldLevelEncryptionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFieldLevelEncryptionProfile20200531
     * @param id The ID of the field-level encryption profile request. (required)
     * @param createFieldLevelEncryptionProfile20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldLevelEncryptionProfile20200531Call(String id, CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFieldLevelEncryptionProfile20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/field-level-encryption-profile/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldLevelEncryptionProfile20200531ValidateBeforeCall(String id, CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFieldLevelEncryptionProfile20200531(Async)");
        }

        // verify the required parameter 'createFieldLevelEncryptionProfile20200531Request' is set
        if (createFieldLevelEncryptionProfile20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createFieldLevelEncryptionProfile20200531Request' when calling updateFieldLevelEncryptionProfile20200531(Async)");
        }

        return updateFieldLevelEncryptionProfile20200531Call(id, createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update a field-level encryption profile.
     * @param id The ID of the field-level encryption profile request. (required)
     * @param createFieldLevelEncryptionProfile20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateFieldLevelEncryptionProfileResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldLevelEncryptionProfileResult updateFieldLevelEncryptionProfile20200531(String id, CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateFieldLevelEncryptionProfileResult> localVarResp = updateFieldLevelEncryptionProfile20200531WithHttpInfo(id, createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a field-level encryption profile.
     * @param id The ID of the field-level encryption profile request. (required)
     * @param createFieldLevelEncryptionProfile20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateFieldLevelEncryptionProfileResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateFieldLevelEncryptionProfileResult> updateFieldLevelEncryptionProfile20200531WithHttpInfo(String id, CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateFieldLevelEncryptionProfile20200531ValidateBeforeCall(id, createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateFieldLevelEncryptionProfileResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a field-level encryption profile.
     * @param id The ID of the field-level encryption profile request. (required)
     * @param createFieldLevelEncryptionProfile20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldLevelEncryptionProfile20200531Async(String id, CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateFieldLevelEncryptionProfileResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldLevelEncryptionProfile20200531ValidateBeforeCall(id, createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateFieldLevelEncryptionProfileResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFunction20200531
     * @param name The name of the function that you are updating. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are updating, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param updateFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FunctionSizeLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFunction20200531Call(String name, String ifMatch, UpdateFunction20200531Request updateFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFunction20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/function/{Name}#If-Match"
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFunction20200531ValidateBeforeCall(String name, String ifMatch, UpdateFunction20200531Request updateFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateFunction20200531(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling updateFunction20200531(Async)");
        }

        // verify the required parameter 'updateFunction20200531Request' is set
        if (updateFunction20200531Request == null) {
            throw new ApiException("Missing the required parameter 'updateFunction20200531Request' when calling updateFunction20200531(Async)");
        }

        return updateFunction20200531Call(name, ifMatch, updateFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a CloudFront function.&lt;/p&gt; &lt;p&gt;You can update a function&#39;s code or the comment that describes the function. You cannot update a function&#39;s name.&lt;/p&gt; &lt;p&gt;To update a function, you provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value) along with the updated function code. To get the name and version, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are updating. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are updating, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param updateFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateFunctionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FunctionSizeLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFunctionResult updateFunction20200531(String name, String ifMatch, UpdateFunction20200531Request updateFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateFunctionResult> localVarResp = updateFunction20200531WithHttpInfo(name, ifMatch, updateFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a CloudFront function.&lt;/p&gt; &lt;p&gt;You can update a function&#39;s code or the comment that describes the function. You cannot update a function&#39;s name.&lt;/p&gt; &lt;p&gt;To update a function, you provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value) along with the updated function code. To get the name and version, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are updating. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are updating, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param updateFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateFunctionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FunctionSizeLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateFunctionResult> updateFunction20200531WithHttpInfo(String name, String ifMatch, UpdateFunction20200531Request updateFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateFunction20200531ValidateBeforeCall(name, ifMatch, updateFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateFunctionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a CloudFront function.&lt;/p&gt; &lt;p&gt;You can update a function&#39;s code or the comment that describes the function. You cannot update a function&#39;s name.&lt;/p&gt; &lt;p&gt;To update a function, you provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value) along with the updated function code. To get the name and version, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     * @param name The name of the function that you are updating. (required)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the function that you are updating, which you can get using &lt;code&gt;DescribeFunction&lt;/code&gt;. (required)
     * @param updateFunction20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFunctionExists </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FunctionSizeLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFunction20200531Async(String name, String ifMatch, UpdateFunction20200531Request updateFunction20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateFunctionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFunction20200531ValidateBeforeCall(name, ifMatch, updateFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateFunctionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateKeyGroup20200531
     * @param id The identifier of the key group that you are updating. (required)
     * @param createKeyGroup20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the key group that you are updating. The version is the key group&#39;s &lt;code&gt;ETag&lt;/code&gt; value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeyGroupAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyPublicKeysInKeyGroup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKeyGroup20200531Call(String id, CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createKeyGroup20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/key-group/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKeyGroup20200531ValidateBeforeCall(String id, CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateKeyGroup20200531(Async)");
        }

        // verify the required parameter 'createKeyGroup20200531Request' is set
        if (createKeyGroup20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createKeyGroup20200531Request' when calling updateKeyGroup20200531(Async)");
        }

        return updateKeyGroup20200531Call(id, createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a key group.&lt;/p&gt; &lt;p&gt;When you update a key group, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a key group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Get the current key group with &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the key group that you want to update. For example, add or remove public key IDs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateKeyGroup&lt;/code&gt; with the entire key group object, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier of the key group that you are updating. (required)
     * @param createKeyGroup20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the key group that you are updating. The version is the key group&#39;s &lt;code&gt;ETag&lt;/code&gt; value. (optional)
     * @return UpdateKeyGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeyGroupAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyPublicKeysInKeyGroup </td><td>  -  </td></tr>
     </table>
     */
    public UpdateKeyGroupResult updateKeyGroup20200531(String id, CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateKeyGroupResult> localVarResp = updateKeyGroup20200531WithHttpInfo(id, createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a key group.&lt;/p&gt; &lt;p&gt;When you update a key group, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a key group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Get the current key group with &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the key group that you want to update. For example, add or remove public key IDs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateKeyGroup&lt;/code&gt; with the entire key group object, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier of the key group that you are updating. (required)
     * @param createKeyGroup20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the key group that you are updating. The version is the key group&#39;s &lt;code&gt;ETag&lt;/code&gt; value. (optional)
     * @return ApiResponse&lt;UpdateKeyGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeyGroupAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyPublicKeysInKeyGroup </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateKeyGroupResult> updateKeyGroup20200531WithHttpInfo(String id, CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateKeyGroup20200531ValidateBeforeCall(id, createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateKeyGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a key group.&lt;/p&gt; &lt;p&gt;When you update a key group, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a key group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Get the current key group with &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the key group that you want to update. For example, add or remove public key IDs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateKeyGroup&lt;/code&gt; with the entire key group object, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier of the key group that you are updating. (required)
     * @param createKeyGroup20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the key group that you are updating. The version is the key group&#39;s &lt;code&gt;ETag&lt;/code&gt; value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchResource </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KeyGroupAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyPublicKeysInKeyGroup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKeyGroup20200531Async(String id, CreateKeyGroup20200531Request createKeyGroup20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateKeyGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKeyGroup20200531ValidateBeforeCall(id, createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateKeyGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOriginAccessControl20200531
     * @param id The unique identifier of the origin access control that you are updating. (required)
     * @param createOriginAccessControl20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the origin access control that you are updating. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OriginAccessControlAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOriginAccessControl20200531Call(String id, CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOriginAccessControl20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-access-control/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOriginAccessControl20200531ValidateBeforeCall(String id, CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOriginAccessControl20200531(Async)");
        }

        // verify the required parameter 'createOriginAccessControl20200531Request' is set
        if (createOriginAccessControl20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createOriginAccessControl20200531Request' when calling updateOriginAccessControl20200531(Async)");
        }

        return updateOriginAccessControl20200531Call(id, createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Updates a CloudFront origin access control.
     * @param id The unique identifier of the origin access control that you are updating. (required)
     * @param createOriginAccessControl20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the origin access control that you are updating. (optional)
     * @return UpdateOriginAccessControlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OriginAccessControlAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOriginAccessControlResult updateOriginAccessControl20200531(String id, CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateOriginAccessControlResult> localVarResp = updateOriginAccessControl20200531WithHttpInfo(id, createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a CloudFront origin access control.
     * @param id The unique identifier of the origin access control that you are updating. (required)
     * @param createOriginAccessControl20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the origin access control that you are updating. (optional)
     * @return ApiResponse&lt;UpdateOriginAccessControlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OriginAccessControlAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateOriginAccessControlResult> updateOriginAccessControl20200531WithHttpInfo(String id, CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateOriginAccessControl20200531ValidateBeforeCall(id, createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateOriginAccessControlResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a CloudFront origin access control.
     * @param id The unique identifier of the origin access control that you are updating. (required)
     * @param createOriginAccessControl20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The current version (&lt;code&gt;ETag&lt;/code&gt; value) of the origin access control that you are updating. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OriginAccessControlAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOriginAccessControl20200531Async(String id, CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateOriginAccessControlResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOriginAccessControl20200531ValidateBeforeCall(id, createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateOriginAccessControlResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOriginRequestPolicy20200531
     * @param id The unique identifier for the origin request policy that you are updating. The identifier is returned in a cache behavior&#39;s &lt;code&gt;OriginRequestPolicyId&lt;/code&gt; field in the response to &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (required)
     * @param createOriginRequestPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the origin request policy that you are updating. The version is returned in the origin request policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OriginRequestPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyHeadersInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyCookiesInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyQueryStringsInOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOriginRequestPolicy20200531Call(String id, CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOriginRequestPolicy20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/origin-request-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOriginRequestPolicy20200531ValidateBeforeCall(String id, CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOriginRequestPolicy20200531(Async)");
        }

        // verify the required parameter 'createOriginRequestPolicy20200531Request' is set
        if (createOriginRequestPolicy20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createOriginRequestPolicy20200531Request' when calling updateOriginRequestPolicy20200531(Async)");
        }

        return updateOriginRequestPolicy20200531Call(id, createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates an origin request policy configuration.&lt;/p&gt; &lt;p&gt;When you update an origin request policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update an origin request policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the origin request policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateOriginRequestPolicy&lt;/code&gt; by providing the entire origin request policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The unique identifier for the origin request policy that you are updating. The identifier is returned in a cache behavior&#39;s &lt;code&gt;OriginRequestPolicyId&lt;/code&gt; field in the response to &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (required)
     * @param createOriginRequestPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the origin request policy that you are updating. The version is returned in the origin request policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt;. (optional)
     * @return UpdateOriginRequestPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OriginRequestPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyHeadersInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyCookiesInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyQueryStringsInOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOriginRequestPolicyResult updateOriginRequestPolicy20200531(String id, CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateOriginRequestPolicyResult> localVarResp = updateOriginRequestPolicy20200531WithHttpInfo(id, createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates an origin request policy configuration.&lt;/p&gt; &lt;p&gt;When you update an origin request policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update an origin request policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the origin request policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateOriginRequestPolicy&lt;/code&gt; by providing the entire origin request policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The unique identifier for the origin request policy that you are updating. The identifier is returned in a cache behavior&#39;s &lt;code&gt;OriginRequestPolicyId&lt;/code&gt; field in the response to &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (required)
     * @param createOriginRequestPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the origin request policy that you are updating. The version is returned in the origin request policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateOriginRequestPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OriginRequestPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyHeadersInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyCookiesInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyQueryStringsInOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateOriginRequestPolicyResult> updateOriginRequestPolicy20200531WithHttpInfo(String id, CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateOriginRequestPolicy20200531ValidateBeforeCall(id, createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateOriginRequestPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates an origin request policy configuration.&lt;/p&gt; &lt;p&gt;When you update an origin request policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update an origin request policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the origin request policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateOriginRequestPolicy&lt;/code&gt; by providing the entire origin request policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The unique identifier for the origin request policy that you are updating. The identifier is returned in a cache behavior&#39;s &lt;code&gt;OriginRequestPolicyId&lt;/code&gt; field in the response to &lt;code&gt;GetDistributionConfig&lt;/code&gt;. (required)
     * @param createOriginRequestPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The version of the origin request policy that you are updating. The version is returned in the origin request policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OriginRequestPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyHeadersInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyCookiesInOriginRequestPolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyQueryStringsInOriginRequestPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOriginRequestPolicy20200531Async(String id, CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateOriginRequestPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOriginRequestPolicy20200531ValidateBeforeCall(id, createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateOriginRequestPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePublicKey20200531
     * @param id The identifier of the public key that you are updating. (required)
     * @param createPublicKey20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CannotChangeImmutablePublicKeyFields </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePublicKey20200531Call(String id, CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPublicKey20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/public-key/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePublicKey20200531ValidateBeforeCall(String id, CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePublicKey20200531(Async)");
        }

        // verify the required parameter 'createPublicKey20200531Request' is set
        if (createPublicKey20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createPublicKey20200531Request' when calling updatePublicKey20200531(Async)");
        }

        return updatePublicKey20200531Call(id, createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update public key information. Note that the only value you can change is the comment.
     * @param id The identifier of the public key that you are updating. (required)
     * @param createPublicKey20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdatePublicKeyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CannotChangeImmutablePublicKeyFields </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePublicKeyResult updatePublicKey20200531(String id, CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdatePublicKeyResult> localVarResp = updatePublicKey20200531WithHttpInfo(id, createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update public key information. Note that the only value you can change is the comment.
     * @param id The identifier of the public key that you are updating. (required)
     * @param createPublicKey20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdatePublicKeyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CannotChangeImmutablePublicKeyFields </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePublicKeyResult> updatePublicKey20200531WithHttpInfo(String id, CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updatePublicKey20200531ValidateBeforeCall(id, createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdatePublicKeyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update public key information. Note that the only value you can change is the comment.
     * @param id The identifier of the public key that you are updating. (required)
     * @param createPublicKey20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CannotChangeImmutablePublicKeyFields </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePublicKey20200531Async(String id, CreatePublicKey20200531Request createPublicKey20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdatePublicKeyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePublicKey20200531ValidateBeforeCall(id, createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdatePublicKeyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRealtimeLogConfig20200531
     * @param updateRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRealtimeLogConfig20200531Call(UpdateRealtimeLogConfig20200531Request updateRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRealtimeLogConfig20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/realtime-log-config/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRealtimeLogConfig20200531ValidateBeforeCall(UpdateRealtimeLogConfig20200531Request updateRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateRealtimeLogConfig20200531Request' is set
        if (updateRealtimeLogConfig20200531Request == null) {
            throw new ApiException("Missing the required parameter 'updateRealtimeLogConfig20200531Request' when calling updateRealtimeLogConfig20200531(Async)");
        }

        return updateRealtimeLogConfig20200531Call(updateRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a real-time log configuration.&lt;/p&gt; &lt;p&gt;When you update a real-time log configuration, all the parameters are updated with the values provided in the request. You cannot update some parameters independent of others. To update a real-time log configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;GetRealtimeLogConfig&lt;/code&gt; to get the current real-time log configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the parameters in the real-time log configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call this API (&lt;code&gt;UpdateRealtimeLogConfig&lt;/code&gt;) by providing the entire real-time log configuration, including the parameters that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You cannot update a real-time log configuration&#39;s &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;ARN&lt;/code&gt;.&lt;/p&gt;
     * @param updateRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateRealtimeLogConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRealtimeLogConfigResult updateRealtimeLogConfig20200531(UpdateRealtimeLogConfig20200531Request updateRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateRealtimeLogConfigResult> localVarResp = updateRealtimeLogConfig20200531WithHttpInfo(updateRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a real-time log configuration.&lt;/p&gt; &lt;p&gt;When you update a real-time log configuration, all the parameters are updated with the values provided in the request. You cannot update some parameters independent of others. To update a real-time log configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;GetRealtimeLogConfig&lt;/code&gt; to get the current real-time log configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the parameters in the real-time log configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call this API (&lt;code&gt;UpdateRealtimeLogConfig&lt;/code&gt;) by providing the entire real-time log configuration, including the parameters that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You cannot update a real-time log configuration&#39;s &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;ARN&lt;/code&gt;.&lt;/p&gt;
     * @param updateRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateRealtimeLogConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRealtimeLogConfigResult> updateRealtimeLogConfig20200531WithHttpInfo(UpdateRealtimeLogConfig20200531Request updateRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRealtimeLogConfig20200531ValidateBeforeCall(updateRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateRealtimeLogConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a real-time log configuration.&lt;/p&gt; &lt;p&gt;When you update a real-time log configuration, all the parameters are updated with the values provided in the request. You cannot update some parameters independent of others. To update a real-time log configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;GetRealtimeLogConfig&lt;/code&gt; to get the current real-time log configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the parameters in the real-time log configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call this API (&lt;code&gt;UpdateRealtimeLogConfig&lt;/code&gt;) by providing the entire real-time log configuration, including the parameters that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You cannot update a real-time log configuration&#39;s &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;ARN&lt;/code&gt;.&lt;/p&gt;
     * @param updateRealtimeLogConfig20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchRealtimeLogConfig </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRealtimeLogConfig20200531Async(UpdateRealtimeLogConfig20200531Request updateRealtimeLogConfig20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateRealtimeLogConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRealtimeLogConfig20200531ValidateBeforeCall(updateRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateRealtimeLogConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResponseHeadersPolicy20200531
     * @param id The identifier for the response headers policy that you are updating. (required)
     * @param createResponseHeadersPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch &lt;p&gt;The version of the response headers policy that you are updating.&lt;/p&gt; &lt;p&gt;The version is returned in the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResponseHeadersPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyCustomHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooLongCSPInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRemoveHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResponseHeadersPolicy20200531Call(String id, CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createResponseHeadersPolicy20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/response-headers-policy/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResponseHeadersPolicy20200531ValidateBeforeCall(String id, CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateResponseHeadersPolicy20200531(Async)");
        }

        // verify the required parameter 'createResponseHeadersPolicy20200531Request' is set
        if (createResponseHeadersPolicy20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createResponseHeadersPolicy20200531Request' when calling updateResponseHeadersPolicy20200531(Async)");
        }

        return updateResponseHeadersPolicy20200531Call(id, createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a response headers policy.&lt;/p&gt; &lt;p&gt;When you update a response headers policy, the entire policy is replaced. You cannot update some policy fields independent of others. To update a response headers policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt; to get the current policy&#39;s configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Modify the fields in the response headers policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateResponseHeadersPolicy&lt;/code&gt;, providing the entire response headers policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier for the response headers policy that you are updating. (required)
     * @param createResponseHeadersPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch &lt;p&gt;The version of the response headers policy that you are updating.&lt;/p&gt; &lt;p&gt;The version is returned in the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return UpdateResponseHeadersPolicyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResponseHeadersPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyCustomHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooLongCSPInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRemoveHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public UpdateResponseHeadersPolicyResult updateResponseHeadersPolicy20200531(String id, CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateResponseHeadersPolicyResult> localVarResp = updateResponseHeadersPolicy20200531WithHttpInfo(id, createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a response headers policy.&lt;/p&gt; &lt;p&gt;When you update a response headers policy, the entire policy is replaced. You cannot update some policy fields independent of others. To update a response headers policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt; to get the current policy&#39;s configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Modify the fields in the response headers policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateResponseHeadersPolicy&lt;/code&gt;, providing the entire response headers policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier for the response headers policy that you are updating. (required)
     * @param createResponseHeadersPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch &lt;p&gt;The version of the response headers policy that you are updating.&lt;/p&gt; &lt;p&gt;The version is returned in the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;UpdateResponseHeadersPolicyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResponseHeadersPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyCustomHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooLongCSPInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRemoveHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateResponseHeadersPolicyResult> updateResponseHeadersPolicy20200531WithHttpInfo(String id, CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateResponseHeadersPolicy20200531ValidateBeforeCall(id, createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateResponseHeadersPolicyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a response headers policy.&lt;/p&gt; &lt;p&gt;When you update a response headers policy, the entire policy is replaced. You cannot update some policy fields independent of others. To update a response headers policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt; to get the current policy&#39;s configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Modify the fields in the response headers policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateResponseHeadersPolicy&lt;/code&gt;, providing the entire response headers policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The identifier for the response headers policy that you are updating. (required)
     * @param createResponseHeadersPolicy20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch &lt;p&gt;The version of the response headers policy that you are updating.&lt;/p&gt; &lt;p&gt;The version is returned in the cache policy&#39;s &lt;code&gt;ETag&lt;/code&gt; field in the response to &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResponseHeadersPolicyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyCustomHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooLongCSPInResponseHeadersPolicy </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRemoveHeadersInResponseHeadersPolicy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResponseHeadersPolicy20200531Async(String id, CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateResponseHeadersPolicyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateResponseHeadersPolicy20200531ValidateBeforeCall(id, createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateResponseHeadersPolicyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStreamingDistribution20200531
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamingDistribution20200531Call(String id, CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistribution20200531Request;

        // create path and map variables
        String localVarPath = "/2020-05-31/streaming-distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStreamingDistribution20200531ValidateBeforeCall(String id, CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateStreamingDistribution20200531(Async)");
        }

        // verify the required parameter 'createStreamingDistribution20200531Request' is set
        if (createStreamingDistribution20200531Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistribution20200531Request' when calling updateStreamingDistribution20200531(Async)");
        }

        return updateStreamingDistribution20200531Call(id, createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update a streaming distribution.
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStreamingDistributionResult updateStreamingDistribution20200531(String id, CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateStreamingDistributionResult> localVarResp = updateStreamingDistribution20200531WithHttpInfo(id, createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a streaming distribution.
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStreamingDistributionResult> updateStreamingDistribution20200531WithHttpInfo(String id, CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateStreamingDistribution20200531ValidateBeforeCall(id, createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a streaming distribution.
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20200531Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidOriginAccessControl </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamingDistribution20200531Async(String id, CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStreamingDistribution20200531ValidateBeforeCall(id, createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
