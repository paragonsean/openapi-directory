/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AllowedMethods;
import org.openapitools.client.model.CacheBehaviorForwardedValues;
import org.openapitools.client.model.CacheBehaviorTrustedSigners;
import org.openapitools.client.model.DefaultCacheBehaviorFunctionAssociations;
import org.openapitools.client.model.DefaultCacheBehaviorLambdaFunctionAssociations;
import org.openapitools.client.model.DefaultCacheBehaviorTrustedKeyGroups;
import org.openapitools.client.model.ViewerProtocolPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A complex type that describes how CloudFront processes requests.&lt;/p&gt; &lt;p&gt;You must create at least as many cache behaviors (including the default cache behavior) as you have origins if you want CloudFront to serve objects from all of the origins. Each cache behavior specifies the one origin from which you want CloudFront to get objects. If you have two origins and only the default cache behavior, the default cache behavior will cause CloudFront to get objects from one of the origins, but the other origin is never used.&lt;/p&gt; &lt;p&gt;For the current quota (formerly known as limit) on the number of cache behaviors that you can add to a distribution, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html\&quot;&gt;Quotas&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t want to specify any cache behaviors, include only an empty &lt;code&gt;CacheBehaviors&lt;/code&gt; element. Don&#39;t include an empty &lt;code&gt;CacheBehavior&lt;/code&gt; element because this is invalid.&lt;/p&gt; &lt;p&gt;To delete all cache behaviors in an existing distribution, update the distribution configuration and include only an empty &lt;code&gt;CacheBehaviors&lt;/code&gt; element.&lt;/p&gt; &lt;p&gt;To add, change, or remove one or more cache behaviors, update the distribution configuration and specify all of the cache behaviors that you want to include in the updated distribution.&lt;/p&gt; &lt;p&gt;For more information about cache behaviors, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior\&quot;&gt;Cache Behavior Settings&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CacheBehavior {
  public static final String SERIALIZED_NAME_PATH_PATTERN = "PathPattern";
  @SerializedName(SERIALIZED_NAME_PATH_PATTERN)
  private String pathPattern;

  public static final String SERIALIZED_NAME_TARGET_ORIGIN_ID = "TargetOriginId";
  @SerializedName(SERIALIZED_NAME_TARGET_ORIGIN_ID)
  private String targetOriginId;

  public static final String SERIALIZED_NAME_TRUSTED_SIGNERS = "TrustedSigners";
  @SerializedName(SERIALIZED_NAME_TRUSTED_SIGNERS)
  private CacheBehaviorTrustedSigners trustedSigners;

  public static final String SERIALIZED_NAME_TRUSTED_KEY_GROUPS = "TrustedKeyGroups";
  @SerializedName(SERIALIZED_NAME_TRUSTED_KEY_GROUPS)
  private DefaultCacheBehaviorTrustedKeyGroups trustedKeyGroups;

  public static final String SERIALIZED_NAME_VIEWER_PROTOCOL_POLICY = "ViewerProtocolPolicy";
  @SerializedName(SERIALIZED_NAME_VIEWER_PROTOCOL_POLICY)
  private ViewerProtocolPolicy viewerProtocolPolicy;

  public static final String SERIALIZED_NAME_ALLOWED_METHODS = "AllowedMethods";
  @SerializedName(SERIALIZED_NAME_ALLOWED_METHODS)
  private AllowedMethods allowedMethods;

  public static final String SERIALIZED_NAME_SMOOTH_STREAMING = "SmoothStreaming";
  @SerializedName(SERIALIZED_NAME_SMOOTH_STREAMING)
  private Boolean smoothStreaming;

  public static final String SERIALIZED_NAME_COMPRESS = "Compress";
  @SerializedName(SERIALIZED_NAME_COMPRESS)
  private Boolean compress;

  public static final String SERIALIZED_NAME_LAMBDA_FUNCTION_ASSOCIATIONS = "LambdaFunctionAssociations";
  @SerializedName(SERIALIZED_NAME_LAMBDA_FUNCTION_ASSOCIATIONS)
  private DefaultCacheBehaviorLambdaFunctionAssociations lambdaFunctionAssociations;

  public static final String SERIALIZED_NAME_FUNCTION_ASSOCIATIONS = "FunctionAssociations";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ASSOCIATIONS)
  private DefaultCacheBehaviorFunctionAssociations functionAssociations;

  public static final String SERIALIZED_NAME_FIELD_LEVEL_ENCRYPTION_ID = "FieldLevelEncryptionId";
  @SerializedName(SERIALIZED_NAME_FIELD_LEVEL_ENCRYPTION_ID)
  private String fieldLevelEncryptionId;

  public static final String SERIALIZED_NAME_REALTIME_LOG_CONFIG_ARN = "RealtimeLogConfigArn";
  @SerializedName(SERIALIZED_NAME_REALTIME_LOG_CONFIG_ARN)
  private String realtimeLogConfigArn;

  public static final String SERIALIZED_NAME_CACHE_POLICY_ID = "CachePolicyId";
  @SerializedName(SERIALIZED_NAME_CACHE_POLICY_ID)
  private String cachePolicyId;

  public static final String SERIALIZED_NAME_ORIGIN_REQUEST_POLICY_ID = "OriginRequestPolicyId";
  @SerializedName(SERIALIZED_NAME_ORIGIN_REQUEST_POLICY_ID)
  private String originRequestPolicyId;

  public static final String SERIALIZED_NAME_RESPONSE_HEADERS_POLICY_ID = "ResponseHeadersPolicyId";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADERS_POLICY_ID)
  private String responseHeadersPolicyId;

  public static final String SERIALIZED_NAME_FORWARDED_VALUES = "ForwardedValues";
  @SerializedName(SERIALIZED_NAME_FORWARDED_VALUES)
  private CacheBehaviorForwardedValues forwardedValues;

  public static final String SERIALIZED_NAME_MIN_T_T_L = "MinTTL";
  @SerializedName(SERIALIZED_NAME_MIN_T_T_L)
  private Integer minTTL;

  public static final String SERIALIZED_NAME_DEFAULT_T_T_L = "DefaultTTL";
  @SerializedName(SERIALIZED_NAME_DEFAULT_T_T_L)
  private Integer defaultTTL;

  public static final String SERIALIZED_NAME_MAX_T_T_L = "MaxTTL";
  @SerializedName(SERIALIZED_NAME_MAX_T_T_L)
  private Integer maxTTL;

  public CacheBehavior() {
  }

  public CacheBehavior pathPattern(String pathPattern) {
    this.pathPattern = pathPattern;
    return this;
  }

  /**
   * Get pathPattern
   * @return pathPattern
   */
  @javax.annotation.Nonnull
  public String getPathPattern() {
    return pathPattern;
  }

  public void setPathPattern(String pathPattern) {
    this.pathPattern = pathPattern;
  }


  public CacheBehavior targetOriginId(String targetOriginId) {
    this.targetOriginId = targetOriginId;
    return this;
  }

  /**
   * Get targetOriginId
   * @return targetOriginId
   */
  @javax.annotation.Nonnull
  public String getTargetOriginId() {
    return targetOriginId;
  }

  public void setTargetOriginId(String targetOriginId) {
    this.targetOriginId = targetOriginId;
  }


  public CacheBehavior trustedSigners(CacheBehaviorTrustedSigners trustedSigners) {
    this.trustedSigners = trustedSigners;
    return this;
  }

  /**
   * Get trustedSigners
   * @return trustedSigners
   */
  @javax.annotation.Nullable
  public CacheBehaviorTrustedSigners getTrustedSigners() {
    return trustedSigners;
  }

  public void setTrustedSigners(CacheBehaviorTrustedSigners trustedSigners) {
    this.trustedSigners = trustedSigners;
  }


  public CacheBehavior trustedKeyGroups(DefaultCacheBehaviorTrustedKeyGroups trustedKeyGroups) {
    this.trustedKeyGroups = trustedKeyGroups;
    return this;
  }

  /**
   * Get trustedKeyGroups
   * @return trustedKeyGroups
   */
  @javax.annotation.Nullable
  public DefaultCacheBehaviorTrustedKeyGroups getTrustedKeyGroups() {
    return trustedKeyGroups;
  }

  public void setTrustedKeyGroups(DefaultCacheBehaviorTrustedKeyGroups trustedKeyGroups) {
    this.trustedKeyGroups = trustedKeyGroups;
  }


  public CacheBehavior viewerProtocolPolicy(ViewerProtocolPolicy viewerProtocolPolicy) {
    this.viewerProtocolPolicy = viewerProtocolPolicy;
    return this;
  }

  /**
   * Get viewerProtocolPolicy
   * @return viewerProtocolPolicy
   */
  @javax.annotation.Nonnull
  public ViewerProtocolPolicy getViewerProtocolPolicy() {
    return viewerProtocolPolicy;
  }

  public void setViewerProtocolPolicy(ViewerProtocolPolicy viewerProtocolPolicy) {
    this.viewerProtocolPolicy = viewerProtocolPolicy;
  }


  public CacheBehavior allowedMethods(AllowedMethods allowedMethods) {
    this.allowedMethods = allowedMethods;
    return this;
  }

  /**
   * Get allowedMethods
   * @return allowedMethods
   */
  @javax.annotation.Nullable
  public AllowedMethods getAllowedMethods() {
    return allowedMethods;
  }

  public void setAllowedMethods(AllowedMethods allowedMethods) {
    this.allowedMethods = allowedMethods;
  }


  public CacheBehavior smoothStreaming(Boolean smoothStreaming) {
    this.smoothStreaming = smoothStreaming;
    return this;
  }

  /**
   * Get smoothStreaming
   * @return smoothStreaming
   */
  @javax.annotation.Nullable
  public Boolean getSmoothStreaming() {
    return smoothStreaming;
  }

  public void setSmoothStreaming(Boolean smoothStreaming) {
    this.smoothStreaming = smoothStreaming;
  }


  public CacheBehavior compress(Boolean compress) {
    this.compress = compress;
    return this;
  }

  /**
   * Get compress
   * @return compress
   */
  @javax.annotation.Nullable
  public Boolean getCompress() {
    return compress;
  }

  public void setCompress(Boolean compress) {
    this.compress = compress;
  }


  public CacheBehavior lambdaFunctionAssociations(DefaultCacheBehaviorLambdaFunctionAssociations lambdaFunctionAssociations) {
    this.lambdaFunctionAssociations = lambdaFunctionAssociations;
    return this;
  }

  /**
   * Get lambdaFunctionAssociations
   * @return lambdaFunctionAssociations
   */
  @javax.annotation.Nullable
  public DefaultCacheBehaviorLambdaFunctionAssociations getLambdaFunctionAssociations() {
    return lambdaFunctionAssociations;
  }

  public void setLambdaFunctionAssociations(DefaultCacheBehaviorLambdaFunctionAssociations lambdaFunctionAssociations) {
    this.lambdaFunctionAssociations = lambdaFunctionAssociations;
  }


  public CacheBehavior functionAssociations(DefaultCacheBehaviorFunctionAssociations functionAssociations) {
    this.functionAssociations = functionAssociations;
    return this;
  }

  /**
   * Get functionAssociations
   * @return functionAssociations
   */
  @javax.annotation.Nullable
  public DefaultCacheBehaviorFunctionAssociations getFunctionAssociations() {
    return functionAssociations;
  }

  public void setFunctionAssociations(DefaultCacheBehaviorFunctionAssociations functionAssociations) {
    this.functionAssociations = functionAssociations;
  }


  public CacheBehavior fieldLevelEncryptionId(String fieldLevelEncryptionId) {
    this.fieldLevelEncryptionId = fieldLevelEncryptionId;
    return this;
  }

  /**
   * Get fieldLevelEncryptionId
   * @return fieldLevelEncryptionId
   */
  @javax.annotation.Nullable
  public String getFieldLevelEncryptionId() {
    return fieldLevelEncryptionId;
  }

  public void setFieldLevelEncryptionId(String fieldLevelEncryptionId) {
    this.fieldLevelEncryptionId = fieldLevelEncryptionId;
  }


  public CacheBehavior realtimeLogConfigArn(String realtimeLogConfigArn) {
    this.realtimeLogConfigArn = realtimeLogConfigArn;
    return this;
  }

  /**
   * Get realtimeLogConfigArn
   * @return realtimeLogConfigArn
   */
  @javax.annotation.Nullable
  public String getRealtimeLogConfigArn() {
    return realtimeLogConfigArn;
  }

  public void setRealtimeLogConfigArn(String realtimeLogConfigArn) {
    this.realtimeLogConfigArn = realtimeLogConfigArn;
  }


  public CacheBehavior cachePolicyId(String cachePolicyId) {
    this.cachePolicyId = cachePolicyId;
    return this;
  }

  /**
   * Get cachePolicyId
   * @return cachePolicyId
   */
  @javax.annotation.Nullable
  public String getCachePolicyId() {
    return cachePolicyId;
  }

  public void setCachePolicyId(String cachePolicyId) {
    this.cachePolicyId = cachePolicyId;
  }


  public CacheBehavior originRequestPolicyId(String originRequestPolicyId) {
    this.originRequestPolicyId = originRequestPolicyId;
    return this;
  }

  /**
   * Get originRequestPolicyId
   * @return originRequestPolicyId
   */
  @javax.annotation.Nullable
  public String getOriginRequestPolicyId() {
    return originRequestPolicyId;
  }

  public void setOriginRequestPolicyId(String originRequestPolicyId) {
    this.originRequestPolicyId = originRequestPolicyId;
  }


  public CacheBehavior responseHeadersPolicyId(String responseHeadersPolicyId) {
    this.responseHeadersPolicyId = responseHeadersPolicyId;
    return this;
  }

  /**
   * Get responseHeadersPolicyId
   * @return responseHeadersPolicyId
   */
  @javax.annotation.Nullable
  public String getResponseHeadersPolicyId() {
    return responseHeadersPolicyId;
  }

  public void setResponseHeadersPolicyId(String responseHeadersPolicyId) {
    this.responseHeadersPolicyId = responseHeadersPolicyId;
  }


  public CacheBehavior forwardedValues(CacheBehaviorForwardedValues forwardedValues) {
    this.forwardedValues = forwardedValues;
    return this;
  }

  /**
   * Get forwardedValues
   * @return forwardedValues
   */
  @javax.annotation.Nullable
  public CacheBehaviorForwardedValues getForwardedValues() {
    return forwardedValues;
  }

  public void setForwardedValues(CacheBehaviorForwardedValues forwardedValues) {
    this.forwardedValues = forwardedValues;
  }


  public CacheBehavior minTTL(Integer minTTL) {
    this.minTTL = minTTL;
    return this;
  }

  /**
   * Get minTTL
   * @return minTTL
   */
  @javax.annotation.Nullable
  public Integer getMinTTL() {
    return minTTL;
  }

  public void setMinTTL(Integer minTTL) {
    this.minTTL = minTTL;
  }


  public CacheBehavior defaultTTL(Integer defaultTTL) {
    this.defaultTTL = defaultTTL;
    return this;
  }

  /**
   * Get defaultTTL
   * @return defaultTTL
   */
  @javax.annotation.Nullable
  public Integer getDefaultTTL() {
    return defaultTTL;
  }

  public void setDefaultTTL(Integer defaultTTL) {
    this.defaultTTL = defaultTTL;
  }


  public CacheBehavior maxTTL(Integer maxTTL) {
    this.maxTTL = maxTTL;
    return this;
  }

  /**
   * Get maxTTL
   * @return maxTTL
   */
  @javax.annotation.Nullable
  public Integer getMaxTTL() {
    return maxTTL;
  }

  public void setMaxTTL(Integer maxTTL) {
    this.maxTTL = maxTTL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheBehavior cacheBehavior = (CacheBehavior) o;
    return Objects.equals(this.pathPattern, cacheBehavior.pathPattern) &&
        Objects.equals(this.targetOriginId, cacheBehavior.targetOriginId) &&
        Objects.equals(this.trustedSigners, cacheBehavior.trustedSigners) &&
        Objects.equals(this.trustedKeyGroups, cacheBehavior.trustedKeyGroups) &&
        Objects.equals(this.viewerProtocolPolicy, cacheBehavior.viewerProtocolPolicy) &&
        Objects.equals(this.allowedMethods, cacheBehavior.allowedMethods) &&
        Objects.equals(this.smoothStreaming, cacheBehavior.smoothStreaming) &&
        Objects.equals(this.compress, cacheBehavior.compress) &&
        Objects.equals(this.lambdaFunctionAssociations, cacheBehavior.lambdaFunctionAssociations) &&
        Objects.equals(this.functionAssociations, cacheBehavior.functionAssociations) &&
        Objects.equals(this.fieldLevelEncryptionId, cacheBehavior.fieldLevelEncryptionId) &&
        Objects.equals(this.realtimeLogConfigArn, cacheBehavior.realtimeLogConfigArn) &&
        Objects.equals(this.cachePolicyId, cacheBehavior.cachePolicyId) &&
        Objects.equals(this.originRequestPolicyId, cacheBehavior.originRequestPolicyId) &&
        Objects.equals(this.responseHeadersPolicyId, cacheBehavior.responseHeadersPolicyId) &&
        Objects.equals(this.forwardedValues, cacheBehavior.forwardedValues) &&
        Objects.equals(this.minTTL, cacheBehavior.minTTL) &&
        Objects.equals(this.defaultTTL, cacheBehavior.defaultTTL) &&
        Objects.equals(this.maxTTL, cacheBehavior.maxTTL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pathPattern, targetOriginId, trustedSigners, trustedKeyGroups, viewerProtocolPolicy, allowedMethods, smoothStreaming, compress, lambdaFunctionAssociations, functionAssociations, fieldLevelEncryptionId, realtimeLogConfigArn, cachePolicyId, originRequestPolicyId, responseHeadersPolicyId, forwardedValues, minTTL, defaultTTL, maxTTL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheBehavior {\n");
    sb.append("    pathPattern: ").append(toIndentedString(pathPattern)).append("\n");
    sb.append("    targetOriginId: ").append(toIndentedString(targetOriginId)).append("\n");
    sb.append("    trustedSigners: ").append(toIndentedString(trustedSigners)).append("\n");
    sb.append("    trustedKeyGroups: ").append(toIndentedString(trustedKeyGroups)).append("\n");
    sb.append("    viewerProtocolPolicy: ").append(toIndentedString(viewerProtocolPolicy)).append("\n");
    sb.append("    allowedMethods: ").append(toIndentedString(allowedMethods)).append("\n");
    sb.append("    smoothStreaming: ").append(toIndentedString(smoothStreaming)).append("\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    lambdaFunctionAssociations: ").append(toIndentedString(lambdaFunctionAssociations)).append("\n");
    sb.append("    functionAssociations: ").append(toIndentedString(functionAssociations)).append("\n");
    sb.append("    fieldLevelEncryptionId: ").append(toIndentedString(fieldLevelEncryptionId)).append("\n");
    sb.append("    realtimeLogConfigArn: ").append(toIndentedString(realtimeLogConfigArn)).append("\n");
    sb.append("    cachePolicyId: ").append(toIndentedString(cachePolicyId)).append("\n");
    sb.append("    originRequestPolicyId: ").append(toIndentedString(originRequestPolicyId)).append("\n");
    sb.append("    responseHeadersPolicyId: ").append(toIndentedString(responseHeadersPolicyId)).append("\n");
    sb.append("    forwardedValues: ").append(toIndentedString(forwardedValues)).append("\n");
    sb.append("    minTTL: ").append(toIndentedString(minTTL)).append("\n");
    sb.append("    defaultTTL: ").append(toIndentedString(defaultTTL)).append("\n");
    sb.append("    maxTTL: ").append(toIndentedString(maxTTL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PathPattern");
    openapiFields.add("TargetOriginId");
    openapiFields.add("TrustedSigners");
    openapiFields.add("TrustedKeyGroups");
    openapiFields.add("ViewerProtocolPolicy");
    openapiFields.add("AllowedMethods");
    openapiFields.add("SmoothStreaming");
    openapiFields.add("Compress");
    openapiFields.add("LambdaFunctionAssociations");
    openapiFields.add("FunctionAssociations");
    openapiFields.add("FieldLevelEncryptionId");
    openapiFields.add("RealtimeLogConfigArn");
    openapiFields.add("CachePolicyId");
    openapiFields.add("OriginRequestPolicyId");
    openapiFields.add("ResponseHeadersPolicyId");
    openapiFields.add("ForwardedValues");
    openapiFields.add("MinTTL");
    openapiFields.add("DefaultTTL");
    openapiFields.add("MaxTTL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PathPattern");
    openapiRequiredFields.add("TargetOriginId");
    openapiRequiredFields.add("ViewerProtocolPolicy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CacheBehavior
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CacheBehavior.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CacheBehavior is not found in the empty JSON string", CacheBehavior.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CacheBehavior.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CacheBehavior` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CacheBehavior.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PathPattern`
      String.validateJsonElement(jsonObj.get("PathPattern"));
      // validate the required field `TargetOriginId`
      String.validateJsonElement(jsonObj.get("TargetOriginId"));
      // validate the optional field `TrustedSigners`
      if (jsonObj.get("TrustedSigners") != null && !jsonObj.get("TrustedSigners").isJsonNull()) {
        CacheBehaviorTrustedSigners.validateJsonElement(jsonObj.get("TrustedSigners"));
      }
      // validate the optional field `TrustedKeyGroups`
      if (jsonObj.get("TrustedKeyGroups") != null && !jsonObj.get("TrustedKeyGroups").isJsonNull()) {
        DefaultCacheBehaviorTrustedKeyGroups.validateJsonElement(jsonObj.get("TrustedKeyGroups"));
      }
      // validate the required field `ViewerProtocolPolicy`
      ViewerProtocolPolicy.validateJsonElement(jsonObj.get("ViewerProtocolPolicy"));
      // validate the optional field `AllowedMethods`
      if (jsonObj.get("AllowedMethods") != null && !jsonObj.get("AllowedMethods").isJsonNull()) {
        AllowedMethods.validateJsonElement(jsonObj.get("AllowedMethods"));
      }
      // validate the optional field `SmoothStreaming`
      if (jsonObj.get("SmoothStreaming") != null && !jsonObj.get("SmoothStreaming").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SmoothStreaming"));
      }
      // validate the optional field `Compress`
      if (jsonObj.get("Compress") != null && !jsonObj.get("Compress").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Compress"));
      }
      // validate the optional field `LambdaFunctionAssociations`
      if (jsonObj.get("LambdaFunctionAssociations") != null && !jsonObj.get("LambdaFunctionAssociations").isJsonNull()) {
        DefaultCacheBehaviorLambdaFunctionAssociations.validateJsonElement(jsonObj.get("LambdaFunctionAssociations"));
      }
      // validate the optional field `FunctionAssociations`
      if (jsonObj.get("FunctionAssociations") != null && !jsonObj.get("FunctionAssociations").isJsonNull()) {
        DefaultCacheBehaviorFunctionAssociations.validateJsonElement(jsonObj.get("FunctionAssociations"));
      }
      // validate the optional field `FieldLevelEncryptionId`
      if (jsonObj.get("FieldLevelEncryptionId") != null && !jsonObj.get("FieldLevelEncryptionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FieldLevelEncryptionId"));
      }
      // validate the optional field `RealtimeLogConfigArn`
      if (jsonObj.get("RealtimeLogConfigArn") != null && !jsonObj.get("RealtimeLogConfigArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RealtimeLogConfigArn"));
      }
      // validate the optional field `CachePolicyId`
      if (jsonObj.get("CachePolicyId") != null && !jsonObj.get("CachePolicyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CachePolicyId"));
      }
      // validate the optional field `OriginRequestPolicyId`
      if (jsonObj.get("OriginRequestPolicyId") != null && !jsonObj.get("OriginRequestPolicyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginRequestPolicyId"));
      }
      // validate the optional field `ResponseHeadersPolicyId`
      if (jsonObj.get("ResponseHeadersPolicyId") != null && !jsonObj.get("ResponseHeadersPolicyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResponseHeadersPolicyId"));
      }
      // validate the optional field `ForwardedValues`
      if (jsonObj.get("ForwardedValues") != null && !jsonObj.get("ForwardedValues").isJsonNull()) {
        CacheBehaviorForwardedValues.validateJsonElement(jsonObj.get("ForwardedValues"));
      }
      // validate the optional field `MinTTL`
      if (jsonObj.get("MinTTL") != null && !jsonObj.get("MinTTL").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinTTL"));
      }
      // validate the optional field `DefaultTTL`
      if (jsonObj.get("DefaultTTL") != null && !jsonObj.get("DefaultTTL").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DefaultTTL"));
      }
      // validate the optional field `MaxTTL`
      if (jsonObj.get("MaxTTL") != null && !jsonObj.get("MaxTTL").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxTTL"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CacheBehavior.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CacheBehavior' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CacheBehavior> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CacheBehavior.class));

       return (TypeAdapter<T>) new TypeAdapter<CacheBehavior>() {
           @Override
           public void write(JsonWriter out, CacheBehavior value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CacheBehavior read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CacheBehavior given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CacheBehavior
   * @throws IOException if the JSON string is invalid with respect to CacheBehavior
   */
  public static CacheBehavior fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CacheBehavior.class);
  }

  /**
   * Convert an instance of CacheBehavior to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

