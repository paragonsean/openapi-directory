/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CachePolicyQueryStringBehavior;
import org.openapitools.client.model.CachePolicyQueryStringsConfigQueryStrings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and in requests that CloudFront sends to the origin.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CachePolicyQueryStringsConfig {
  public static final String SERIALIZED_NAME_QUERY_STRING_BEHAVIOR = "QueryStringBehavior";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING_BEHAVIOR)
  private CachePolicyQueryStringBehavior queryStringBehavior;

  public static final String SERIALIZED_NAME_QUERY_STRINGS = "QueryStrings";
  @SerializedName(SERIALIZED_NAME_QUERY_STRINGS)
  private CachePolicyQueryStringsConfigQueryStrings queryStrings;

  public CachePolicyQueryStringsConfig() {
  }

  public CachePolicyQueryStringsConfig queryStringBehavior(CachePolicyQueryStringBehavior queryStringBehavior) {
    this.queryStringBehavior = queryStringBehavior;
    return this;
  }

  /**
   * Get queryStringBehavior
   * @return queryStringBehavior
   */
  @javax.annotation.Nonnull
  public CachePolicyQueryStringBehavior getQueryStringBehavior() {
    return queryStringBehavior;
  }

  public void setQueryStringBehavior(CachePolicyQueryStringBehavior queryStringBehavior) {
    this.queryStringBehavior = queryStringBehavior;
  }


  public CachePolicyQueryStringsConfig queryStrings(CachePolicyQueryStringsConfigQueryStrings queryStrings) {
    this.queryStrings = queryStrings;
    return this;
  }

  /**
   * Get queryStrings
   * @return queryStrings
   */
  @javax.annotation.Nullable
  public CachePolicyQueryStringsConfigQueryStrings getQueryStrings() {
    return queryStrings;
  }

  public void setQueryStrings(CachePolicyQueryStringsConfigQueryStrings queryStrings) {
    this.queryStrings = queryStrings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CachePolicyQueryStringsConfig cachePolicyQueryStringsConfig = (CachePolicyQueryStringsConfig) o;
    return Objects.equals(this.queryStringBehavior, cachePolicyQueryStringsConfig.queryStringBehavior) &&
        Objects.equals(this.queryStrings, cachePolicyQueryStringsConfig.queryStrings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryStringBehavior, queryStrings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CachePolicyQueryStringsConfig {\n");
    sb.append("    queryStringBehavior: ").append(toIndentedString(queryStringBehavior)).append("\n");
    sb.append("    queryStrings: ").append(toIndentedString(queryStrings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("QueryStringBehavior");
    openapiFields.add("QueryStrings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("QueryStringBehavior");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CachePolicyQueryStringsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CachePolicyQueryStringsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CachePolicyQueryStringsConfig is not found in the empty JSON string", CachePolicyQueryStringsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CachePolicyQueryStringsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CachePolicyQueryStringsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CachePolicyQueryStringsConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `QueryStringBehavior`
      CachePolicyQueryStringBehavior.validateJsonElement(jsonObj.get("QueryStringBehavior"));
      // validate the optional field `QueryStrings`
      if (jsonObj.get("QueryStrings") != null && !jsonObj.get("QueryStrings").isJsonNull()) {
        CachePolicyQueryStringsConfigQueryStrings.validateJsonElement(jsonObj.get("QueryStrings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CachePolicyQueryStringsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CachePolicyQueryStringsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CachePolicyQueryStringsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CachePolicyQueryStringsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CachePolicyQueryStringsConfig>() {
           @Override
           public void write(JsonWriter out, CachePolicyQueryStringsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CachePolicyQueryStringsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CachePolicyQueryStringsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CachePolicyQueryStringsConfig
   * @throws IOException if the JSON string is invalid with respect to CachePolicyQueryStringsConfig
   */
  public static CachePolicyQueryStringsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CachePolicyQueryStringsConfig.class);
  }

  /**
   * Convert an instance of CachePolicyQueryStringsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

