/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListDistributionsByRealtimeLogConfig20200531Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListDistributionsByRealtimeLogConfig20200531Request {
  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  private String marker;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "MaxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  private String maxItems;

  public static final String SERIALIZED_NAME_REALTIME_LOG_CONFIG_NAME = "RealtimeLogConfigName";
  @SerializedName(SERIALIZED_NAME_REALTIME_LOG_CONFIG_NAME)
  private String realtimeLogConfigName;

  public static final String SERIALIZED_NAME_REALTIME_LOG_CONFIG_ARN = "RealtimeLogConfigArn";
  @SerializedName(SERIALIZED_NAME_REALTIME_LOG_CONFIG_ARN)
  private String realtimeLogConfigArn;

  public ListDistributionsByRealtimeLogConfig20200531Request() {
  }

  public ListDistributionsByRealtimeLogConfig20200531Request marker(String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Use this field when paginating results to indicate where to begin in your list of distributions. The response includes distributions in the list that occur after the marker. To get the next page of the list, set this field&#39;s value to the value of &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response.
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(String marker) {
    this.marker = marker;
  }


  public ListDistributionsByRealtimeLogConfig20200531Request maxItems(String maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * The maximum number of distributions that you want in the response.
   * @return maxItems
   */
  @javax.annotation.Nullable
  public String getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(String maxItems) {
    this.maxItems = maxItems;
  }


  public ListDistributionsByRealtimeLogConfig20200531Request realtimeLogConfigName(String realtimeLogConfigName) {
    this.realtimeLogConfigName = realtimeLogConfigName;
    return this;
  }

  /**
   * The name of the real-time log configuration whose associated distributions you want to list.
   * @return realtimeLogConfigName
   */
  @javax.annotation.Nullable
  public String getRealtimeLogConfigName() {
    return realtimeLogConfigName;
  }

  public void setRealtimeLogConfigName(String realtimeLogConfigName) {
    this.realtimeLogConfigName = realtimeLogConfigName;
  }


  public ListDistributionsByRealtimeLogConfig20200531Request realtimeLogConfigArn(String realtimeLogConfigArn) {
    this.realtimeLogConfigArn = realtimeLogConfigArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the real-time log configuration whose associated distributions you want to list.
   * @return realtimeLogConfigArn
   */
  @javax.annotation.Nullable
  public String getRealtimeLogConfigArn() {
    return realtimeLogConfigArn;
  }

  public void setRealtimeLogConfigArn(String realtimeLogConfigArn) {
    this.realtimeLogConfigArn = realtimeLogConfigArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDistributionsByRealtimeLogConfig20200531Request listDistributionsByRealtimeLogConfig20200531Request = (ListDistributionsByRealtimeLogConfig20200531Request) o;
    return Objects.equals(this.marker, listDistributionsByRealtimeLogConfig20200531Request.marker) &&
        Objects.equals(this.maxItems, listDistributionsByRealtimeLogConfig20200531Request.maxItems) &&
        Objects.equals(this.realtimeLogConfigName, listDistributionsByRealtimeLogConfig20200531Request.realtimeLogConfigName) &&
        Objects.equals(this.realtimeLogConfigArn, listDistributionsByRealtimeLogConfig20200531Request.realtimeLogConfigArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marker, maxItems, realtimeLogConfigName, realtimeLogConfigArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDistributionsByRealtimeLogConfig20200531Request {\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    realtimeLogConfigName: ").append(toIndentedString(realtimeLogConfigName)).append("\n");
    sb.append("    realtimeLogConfigArn: ").append(toIndentedString(realtimeLogConfigArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Marker");
    openapiFields.add("MaxItems");
    openapiFields.add("RealtimeLogConfigName");
    openapiFields.add("RealtimeLogConfigArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListDistributionsByRealtimeLogConfig20200531Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDistributionsByRealtimeLogConfig20200531Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDistributionsByRealtimeLogConfig20200531Request is not found in the empty JSON string", ListDistributionsByRealtimeLogConfig20200531Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDistributionsByRealtimeLogConfig20200531Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDistributionsByRealtimeLogConfig20200531Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) && !jsonObj.get("Marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Marker").toString()));
      }
      if ((jsonObj.get("MaxItems") != null && !jsonObj.get("MaxItems").isJsonNull()) && !jsonObj.get("MaxItems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxItems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxItems").toString()));
      }
      if ((jsonObj.get("RealtimeLogConfigName") != null && !jsonObj.get("RealtimeLogConfigName").isJsonNull()) && !jsonObj.get("RealtimeLogConfigName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RealtimeLogConfigName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RealtimeLogConfigName").toString()));
      }
      if ((jsonObj.get("RealtimeLogConfigArn") != null && !jsonObj.get("RealtimeLogConfigArn").isJsonNull()) && !jsonObj.get("RealtimeLogConfigArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RealtimeLogConfigArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RealtimeLogConfigArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDistributionsByRealtimeLogConfig20200531Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDistributionsByRealtimeLogConfig20200531Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDistributionsByRealtimeLogConfig20200531Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDistributionsByRealtimeLogConfig20200531Request.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDistributionsByRealtimeLogConfig20200531Request>() {
           @Override
           public void write(JsonWriter out, ListDistributionsByRealtimeLogConfig20200531Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDistributionsByRealtimeLogConfig20200531Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListDistributionsByRealtimeLogConfig20200531Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListDistributionsByRealtimeLogConfig20200531Request
   * @throws IOException if the JSON string is invalid with respect to ListDistributionsByRealtimeLogConfig20200531Request
   */
  public static ListDistributionsByRealtimeLogConfig20200531Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDistributionsByRealtimeLogConfig20200531Request.class);
  }

  /**
   * Convert an instance of ListDistributionsByRealtimeLogConfig20200531Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

