/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OriginAccessControlOriginTypes;
import org.openapitools.client.model.OriginAccessControlSigningBehaviors;
import org.openapitools.client.model.OriginAccessControlSigningProtocols;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CloudFront origin access control.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OriginAccessControlSummary {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIGNING_PROTOCOL = "SigningProtocol";
  @SerializedName(SERIALIZED_NAME_SIGNING_PROTOCOL)
  private OriginAccessControlSigningProtocols signingProtocol;

  public static final String SERIALIZED_NAME_SIGNING_BEHAVIOR = "SigningBehavior";
  @SerializedName(SERIALIZED_NAME_SIGNING_BEHAVIOR)
  private OriginAccessControlSigningBehaviors signingBehavior;

  public static final String SERIALIZED_NAME_ORIGIN_ACCESS_CONTROL_ORIGIN_TYPE = "OriginAccessControlOriginType";
  @SerializedName(SERIALIZED_NAME_ORIGIN_ACCESS_CONTROL_ORIGIN_TYPE)
  private OriginAccessControlOriginTypes originAccessControlOriginType;

  public OriginAccessControlSummary() {
  }

  public OriginAccessControlSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OriginAccessControlSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OriginAccessControlSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OriginAccessControlSummary signingProtocol(OriginAccessControlSigningProtocols signingProtocol) {
    this.signingProtocol = signingProtocol;
    return this;
  }

  /**
   * Get signingProtocol
   * @return signingProtocol
   */
  @javax.annotation.Nonnull
  public OriginAccessControlSigningProtocols getSigningProtocol() {
    return signingProtocol;
  }

  public void setSigningProtocol(OriginAccessControlSigningProtocols signingProtocol) {
    this.signingProtocol = signingProtocol;
  }


  public OriginAccessControlSummary signingBehavior(OriginAccessControlSigningBehaviors signingBehavior) {
    this.signingBehavior = signingBehavior;
    return this;
  }

  /**
   * Get signingBehavior
   * @return signingBehavior
   */
  @javax.annotation.Nonnull
  public OriginAccessControlSigningBehaviors getSigningBehavior() {
    return signingBehavior;
  }

  public void setSigningBehavior(OriginAccessControlSigningBehaviors signingBehavior) {
    this.signingBehavior = signingBehavior;
  }


  public OriginAccessControlSummary originAccessControlOriginType(OriginAccessControlOriginTypes originAccessControlOriginType) {
    this.originAccessControlOriginType = originAccessControlOriginType;
    return this;
  }

  /**
   * Get originAccessControlOriginType
   * @return originAccessControlOriginType
   */
  @javax.annotation.Nonnull
  public OriginAccessControlOriginTypes getOriginAccessControlOriginType() {
    return originAccessControlOriginType;
  }

  public void setOriginAccessControlOriginType(OriginAccessControlOriginTypes originAccessControlOriginType) {
    this.originAccessControlOriginType = originAccessControlOriginType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginAccessControlSummary originAccessControlSummary = (OriginAccessControlSummary) o;
    return Objects.equals(this.id, originAccessControlSummary.id) &&
        Objects.equals(this.description, originAccessControlSummary.description) &&
        Objects.equals(this.name, originAccessControlSummary.name) &&
        Objects.equals(this.signingProtocol, originAccessControlSummary.signingProtocol) &&
        Objects.equals(this.signingBehavior, originAccessControlSummary.signingBehavior) &&
        Objects.equals(this.originAccessControlOriginType, originAccessControlSummary.originAccessControlOriginType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, name, signingProtocol, signingBehavior, originAccessControlOriginType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginAccessControlSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    signingProtocol: ").append(toIndentedString(signingProtocol)).append("\n");
    sb.append("    signingBehavior: ").append(toIndentedString(signingBehavior)).append("\n");
    sb.append("    originAccessControlOriginType: ").append(toIndentedString(originAccessControlOriginType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Description");
    openapiFields.add("Name");
    openapiFields.add("SigningProtocol");
    openapiFields.add("SigningBehavior");
    openapiFields.add("OriginAccessControlOriginType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("SigningProtocol");
    openapiRequiredFields.add("SigningBehavior");
    openapiRequiredFields.add("OriginAccessControlOriginType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OriginAccessControlSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OriginAccessControlSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OriginAccessControlSummary is not found in the empty JSON string", OriginAccessControlSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OriginAccessControlSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OriginAccessControlSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OriginAccessControlSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `Description`
      String.validateJsonElement(jsonObj.get("Description"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `SigningProtocol`
      OriginAccessControlSigningProtocols.validateJsonElement(jsonObj.get("SigningProtocol"));
      // validate the required field `SigningBehavior`
      OriginAccessControlSigningBehaviors.validateJsonElement(jsonObj.get("SigningBehavior"));
      // validate the required field `OriginAccessControlOriginType`
      OriginAccessControlOriginTypes.validateJsonElement(jsonObj.get("OriginAccessControlOriginType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OriginAccessControlSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OriginAccessControlSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OriginAccessControlSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OriginAccessControlSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<OriginAccessControlSummary>() {
           @Override
           public void write(JsonWriter out, OriginAccessControlSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OriginAccessControlSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OriginAccessControlSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OriginAccessControlSummary
   * @throws IOException if the JSON string is invalid with respect to OriginAccessControlSummary
   */
  public static OriginAccessControlSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OriginAccessControlSummary.class);
  }

  /**
   * Convert an instance of OriginAccessControlSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

