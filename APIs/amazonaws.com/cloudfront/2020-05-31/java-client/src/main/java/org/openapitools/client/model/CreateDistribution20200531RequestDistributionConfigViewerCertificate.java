/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateSource;
import org.openapitools.client.model.MinimumProtocolVersion;
import org.openapitools.client.model.SSLSupportMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDistribution20200531RequestDistributionConfigViewerCertificate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDistribution20200531RequestDistributionConfigViewerCertificate {
  public static final String SERIALIZED_NAME_CLOUD_FRONT_DEFAULT_CERTIFICATE = "CloudFrontDefaultCertificate";
  @SerializedName(SERIALIZED_NAME_CLOUD_FRONT_DEFAULT_CERTIFICATE)
  private Boolean cloudFrontDefaultCertificate;

  public static final String SERIALIZED_NAME_IA_M_CERTIFICATE_ID = "IAMCertificateId";
  @SerializedName(SERIALIZED_NAME_IA_M_CERTIFICATE_ID)
  private String iaMCertificateId;

  public static final String SERIALIZED_NAME_AC_M_CERTIFICATE_ARN = "ACMCertificateArn";
  @SerializedName(SERIALIZED_NAME_AC_M_CERTIFICATE_ARN)
  private String acMCertificateArn;

  public static final String SERIALIZED_NAME_SS_L_SUPPORT_METHOD = "SSLSupportMethod";
  @SerializedName(SERIALIZED_NAME_SS_L_SUPPORT_METHOD)
  private SSLSupportMethod ssLSupportMethod;

  public static final String SERIALIZED_NAME_MINIMUM_PROTOCOL_VERSION = "MinimumProtocolVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PROTOCOL_VERSION)
  private MinimumProtocolVersion minimumProtocolVersion;

  public static final String SERIALIZED_NAME_CERTIFICATE = "Certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_SOURCE = "CertificateSource";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_SOURCE)
  private CertificateSource certificateSource;

  public CreateDistribution20200531RequestDistributionConfigViewerCertificate() {
  }

  public CreateDistribution20200531RequestDistributionConfigViewerCertificate cloudFrontDefaultCertificate(Boolean cloudFrontDefaultCertificate) {
    this.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate;
    return this;
  }

  /**
   * Get cloudFrontDefaultCertificate
   * @return cloudFrontDefaultCertificate
   */
  @javax.annotation.Nullable
  public Boolean getCloudFrontDefaultCertificate() {
    return cloudFrontDefaultCertificate;
  }

  public void setCloudFrontDefaultCertificate(Boolean cloudFrontDefaultCertificate) {
    this.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate;
  }


  public CreateDistribution20200531RequestDistributionConfigViewerCertificate iaMCertificateId(String iaMCertificateId) {
    this.iaMCertificateId = iaMCertificateId;
    return this;
  }

  /**
   * Get iaMCertificateId
   * @return iaMCertificateId
   */
  @javax.annotation.Nullable
  public String getIaMCertificateId() {
    return iaMCertificateId;
  }

  public void setIaMCertificateId(String iaMCertificateId) {
    this.iaMCertificateId = iaMCertificateId;
  }


  public CreateDistribution20200531RequestDistributionConfigViewerCertificate acMCertificateArn(String acMCertificateArn) {
    this.acMCertificateArn = acMCertificateArn;
    return this;
  }

  /**
   * Get acMCertificateArn
   * @return acMCertificateArn
   */
  @javax.annotation.Nullable
  public String getAcMCertificateArn() {
    return acMCertificateArn;
  }

  public void setAcMCertificateArn(String acMCertificateArn) {
    this.acMCertificateArn = acMCertificateArn;
  }


  public CreateDistribution20200531RequestDistributionConfigViewerCertificate ssLSupportMethod(SSLSupportMethod ssLSupportMethod) {
    this.ssLSupportMethod = ssLSupportMethod;
    return this;
  }

  /**
   * Get ssLSupportMethod
   * @return ssLSupportMethod
   */
  @javax.annotation.Nullable
  public SSLSupportMethod getSsLSupportMethod() {
    return ssLSupportMethod;
  }

  public void setSsLSupportMethod(SSLSupportMethod ssLSupportMethod) {
    this.ssLSupportMethod = ssLSupportMethod;
  }


  public CreateDistribution20200531RequestDistributionConfigViewerCertificate minimumProtocolVersion(MinimumProtocolVersion minimumProtocolVersion) {
    this.minimumProtocolVersion = minimumProtocolVersion;
    return this;
  }

  /**
   * Get minimumProtocolVersion
   * @return minimumProtocolVersion
   */
  @javax.annotation.Nullable
  public MinimumProtocolVersion getMinimumProtocolVersion() {
    return minimumProtocolVersion;
  }

  public void setMinimumProtocolVersion(MinimumProtocolVersion minimumProtocolVersion) {
    this.minimumProtocolVersion = minimumProtocolVersion;
  }


  public CreateDistribution20200531RequestDistributionConfigViewerCertificate certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public CreateDistribution20200531RequestDistributionConfigViewerCertificate certificateSource(CertificateSource certificateSource) {
    this.certificateSource = certificateSource;
    return this;
  }

  /**
   * Get certificateSource
   * @return certificateSource
   */
  @javax.annotation.Nullable
  public CertificateSource getCertificateSource() {
    return certificateSource;
  }

  public void setCertificateSource(CertificateSource certificateSource) {
    this.certificateSource = certificateSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDistribution20200531RequestDistributionConfigViewerCertificate createDistribution20200531RequestDistributionConfigViewerCertificate = (CreateDistribution20200531RequestDistributionConfigViewerCertificate) o;
    return Objects.equals(this.cloudFrontDefaultCertificate, createDistribution20200531RequestDistributionConfigViewerCertificate.cloudFrontDefaultCertificate) &&
        Objects.equals(this.iaMCertificateId, createDistribution20200531RequestDistributionConfigViewerCertificate.iaMCertificateId) &&
        Objects.equals(this.acMCertificateArn, createDistribution20200531RequestDistributionConfigViewerCertificate.acMCertificateArn) &&
        Objects.equals(this.ssLSupportMethod, createDistribution20200531RequestDistributionConfigViewerCertificate.ssLSupportMethod) &&
        Objects.equals(this.minimumProtocolVersion, createDistribution20200531RequestDistributionConfigViewerCertificate.minimumProtocolVersion) &&
        Objects.equals(this.certificate, createDistribution20200531RequestDistributionConfigViewerCertificate.certificate) &&
        Objects.equals(this.certificateSource, createDistribution20200531RequestDistributionConfigViewerCertificate.certificateSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudFrontDefaultCertificate, iaMCertificateId, acMCertificateArn, ssLSupportMethod, minimumProtocolVersion, certificate, certificateSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDistribution20200531RequestDistributionConfigViewerCertificate {\n");
    sb.append("    cloudFrontDefaultCertificate: ").append(toIndentedString(cloudFrontDefaultCertificate)).append("\n");
    sb.append("    iaMCertificateId: ").append(toIndentedString(iaMCertificateId)).append("\n");
    sb.append("    acMCertificateArn: ").append(toIndentedString(acMCertificateArn)).append("\n");
    sb.append("    ssLSupportMethod: ").append(toIndentedString(ssLSupportMethod)).append("\n");
    sb.append("    minimumProtocolVersion: ").append(toIndentedString(minimumProtocolVersion)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateSource: ").append(toIndentedString(certificateSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CloudFrontDefaultCertificate");
    openapiFields.add("IAMCertificateId");
    openapiFields.add("ACMCertificateArn");
    openapiFields.add("SSLSupportMethod");
    openapiFields.add("MinimumProtocolVersion");
    openapiFields.add("Certificate");
    openapiFields.add("CertificateSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDistribution20200531RequestDistributionConfigViewerCertificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDistribution20200531RequestDistributionConfigViewerCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDistribution20200531RequestDistributionConfigViewerCertificate is not found in the empty JSON string", CreateDistribution20200531RequestDistributionConfigViewerCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDistribution20200531RequestDistributionConfigViewerCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDistribution20200531RequestDistributionConfigViewerCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CloudFrontDefaultCertificate`
      if (jsonObj.get("CloudFrontDefaultCertificate") != null && !jsonObj.get("CloudFrontDefaultCertificate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CloudFrontDefaultCertificate"));
      }
      // validate the optional field `IAMCertificateId`
      if (jsonObj.get("IAMCertificateId") != null && !jsonObj.get("IAMCertificateId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IAMCertificateId"));
      }
      // validate the optional field `ACMCertificateArn`
      if (jsonObj.get("ACMCertificateArn") != null && !jsonObj.get("ACMCertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ACMCertificateArn"));
      }
      // validate the optional field `SSLSupportMethod`
      if (jsonObj.get("SSLSupportMethod") != null && !jsonObj.get("SSLSupportMethod").isJsonNull()) {
        SSLSupportMethod.validateJsonElement(jsonObj.get("SSLSupportMethod"));
      }
      // validate the optional field `MinimumProtocolVersion`
      if (jsonObj.get("MinimumProtocolVersion") != null && !jsonObj.get("MinimumProtocolVersion").isJsonNull()) {
        MinimumProtocolVersion.validateJsonElement(jsonObj.get("MinimumProtocolVersion"));
      }
      // validate the optional field `Certificate`
      if (jsonObj.get("Certificate") != null && !jsonObj.get("Certificate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Certificate"));
      }
      // validate the optional field `CertificateSource`
      if (jsonObj.get("CertificateSource") != null && !jsonObj.get("CertificateSource").isJsonNull()) {
        CertificateSource.validateJsonElement(jsonObj.get("CertificateSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDistribution20200531RequestDistributionConfigViewerCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDistribution20200531RequestDistributionConfigViewerCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDistribution20200531RequestDistributionConfigViewerCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDistribution20200531RequestDistributionConfigViewerCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDistribution20200531RequestDistributionConfigViewerCertificate>() {
           @Override
           public void write(JsonWriter out, CreateDistribution20200531RequestDistributionConfigViewerCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDistribution20200531RequestDistributionConfigViewerCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDistribution20200531RequestDistributionConfigViewerCertificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDistribution20200531RequestDistributionConfigViewerCertificate
   * @throws IOException if the JSON string is invalid with respect to CreateDistribution20200531RequestDistributionConfigViewerCertificate
   */
  public static CreateDistribution20200531RequestDistributionConfigViewerCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDistribution20200531RequestDistributionConfigViewerCertificate.class);
  }

  /**
   * Convert an instance of CreateDistribution20200531RequestDistributionConfigViewerCertificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

