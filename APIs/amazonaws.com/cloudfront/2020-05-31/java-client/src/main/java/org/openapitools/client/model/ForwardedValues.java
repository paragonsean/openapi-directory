/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ForwardedValuesCookies;
import org.openapitools.client.model.ForwardedValuesHeaders;
import org.openapitools.client.model.ForwardedValuesQueryStringCacheKeys;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.&lt;/p&gt; &lt;p&gt;If you want to include values in the cache key, use a cache policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy\&quot;&gt;Creating cache policies&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy\&quot;&gt;Creating origin request policies&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForwardedValues {
  public static final String SERIALIZED_NAME_QUERY_STRING = "QueryString";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING)
  private Boolean queryString;

  public static final String SERIALIZED_NAME_COOKIES = "Cookies";
  @SerializedName(SERIALIZED_NAME_COOKIES)
  private ForwardedValuesCookies cookies;

  public static final String SERIALIZED_NAME_HEADERS = "Headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private ForwardedValuesHeaders headers;

  public static final String SERIALIZED_NAME_QUERY_STRING_CACHE_KEYS = "QueryStringCacheKeys";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING_CACHE_KEYS)
  private ForwardedValuesQueryStringCacheKeys queryStringCacheKeys;

  public ForwardedValues() {
  }

  public ForwardedValues queryString(Boolean queryString) {
    this.queryString = queryString;
    return this;
  }

  /**
   * Get queryString
   * @return queryString
   */
  @javax.annotation.Nonnull
  public Boolean getQueryString() {
    return queryString;
  }

  public void setQueryString(Boolean queryString) {
    this.queryString = queryString;
  }


  public ForwardedValues cookies(ForwardedValuesCookies cookies) {
    this.cookies = cookies;
    return this;
  }

  /**
   * Get cookies
   * @return cookies
   */
  @javax.annotation.Nonnull
  public ForwardedValuesCookies getCookies() {
    return cookies;
  }

  public void setCookies(ForwardedValuesCookies cookies) {
    this.cookies = cookies;
  }


  public ForwardedValues headers(ForwardedValuesHeaders headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public ForwardedValuesHeaders getHeaders() {
    return headers;
  }

  public void setHeaders(ForwardedValuesHeaders headers) {
    this.headers = headers;
  }


  public ForwardedValues queryStringCacheKeys(ForwardedValuesQueryStringCacheKeys queryStringCacheKeys) {
    this.queryStringCacheKeys = queryStringCacheKeys;
    return this;
  }

  /**
   * Get queryStringCacheKeys
   * @return queryStringCacheKeys
   */
  @javax.annotation.Nullable
  public ForwardedValuesQueryStringCacheKeys getQueryStringCacheKeys() {
    return queryStringCacheKeys;
  }

  public void setQueryStringCacheKeys(ForwardedValuesQueryStringCacheKeys queryStringCacheKeys) {
    this.queryStringCacheKeys = queryStringCacheKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForwardedValues forwardedValues = (ForwardedValues) o;
    return Objects.equals(this.queryString, forwardedValues.queryString) &&
        Objects.equals(this.cookies, forwardedValues.cookies) &&
        Objects.equals(this.headers, forwardedValues.headers) &&
        Objects.equals(this.queryStringCacheKeys, forwardedValues.queryStringCacheKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryString, cookies, headers, queryStringCacheKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForwardedValues {\n");
    sb.append("    queryString: ").append(toIndentedString(queryString)).append("\n");
    sb.append("    cookies: ").append(toIndentedString(cookies)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    queryStringCacheKeys: ").append(toIndentedString(queryStringCacheKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("QueryString");
    openapiFields.add("Cookies");
    openapiFields.add("Headers");
    openapiFields.add("QueryStringCacheKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("QueryString");
    openapiRequiredFields.add("Cookies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForwardedValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForwardedValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForwardedValues is not found in the empty JSON string", ForwardedValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForwardedValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForwardedValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ForwardedValues.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `QueryString`
      Boolean.validateJsonElement(jsonObj.get("QueryString"));
      // validate the required field `Cookies`
      ForwardedValuesCookies.validateJsonElement(jsonObj.get("Cookies"));
      // validate the optional field `Headers`
      if (jsonObj.get("Headers") != null && !jsonObj.get("Headers").isJsonNull()) {
        ForwardedValuesHeaders.validateJsonElement(jsonObj.get("Headers"));
      }
      // validate the optional field `QueryStringCacheKeys`
      if (jsonObj.get("QueryStringCacheKeys") != null && !jsonObj.get("QueryStringCacheKeys").isJsonNull()) {
        ForwardedValuesQueryStringCacheKeys.validateJsonElement(jsonObj.get("QueryStringCacheKeys"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForwardedValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForwardedValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForwardedValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForwardedValues.class));

       return (TypeAdapter<T>) new TypeAdapter<ForwardedValues>() {
           @Override
           public void write(JsonWriter out, ForwardedValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForwardedValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForwardedValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForwardedValues
   * @throws IOException if the JSON string is invalid with respect to ForwardedValues
   */
  public static ForwardedValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForwardedValues.class);
  }

  /**
   * Convert an instance of ForwardedValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

