/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetOriginRequestPolicyConfigResultOriginRequestPolicyConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;An origin request policy.&lt;/p&gt; &lt;p&gt;When it&#39;s attached to a cache behavior, the origin request policy determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The request body and the URL path (without the domain name) from the viewer request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The headers that CloudFront automatically includes in every origin request, including &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;User-Agent&lt;/code&gt;, and &lt;code&gt;X-Amz-Cf-Id&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CloudFront sends a request when it can&#39;t find an object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use &lt;code&gt;CachePolicy&lt;/code&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OriginRequestPolicy {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_ORIGIN_REQUEST_POLICY_CONFIG = "OriginRequestPolicyConfig";
  @SerializedName(SERIALIZED_NAME_ORIGIN_REQUEST_POLICY_CONFIG)
  private GetOriginRequestPolicyConfigResultOriginRequestPolicyConfig originRequestPolicyConfig;

  public OriginRequestPolicy() {
  }

  public OriginRequestPolicy id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OriginRequestPolicy lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public OriginRequestPolicy originRequestPolicyConfig(GetOriginRequestPolicyConfigResultOriginRequestPolicyConfig originRequestPolicyConfig) {
    this.originRequestPolicyConfig = originRequestPolicyConfig;
    return this;
  }

  /**
   * Get originRequestPolicyConfig
   * @return originRequestPolicyConfig
   */
  @javax.annotation.Nonnull
  public GetOriginRequestPolicyConfigResultOriginRequestPolicyConfig getOriginRequestPolicyConfig() {
    return originRequestPolicyConfig;
  }

  public void setOriginRequestPolicyConfig(GetOriginRequestPolicyConfigResultOriginRequestPolicyConfig originRequestPolicyConfig) {
    this.originRequestPolicyConfig = originRequestPolicyConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginRequestPolicy originRequestPolicy = (OriginRequestPolicy) o;
    return Objects.equals(this.id, originRequestPolicy.id) &&
        Objects.equals(this.lastModifiedTime, originRequestPolicy.lastModifiedTime) &&
        Objects.equals(this.originRequestPolicyConfig, originRequestPolicy.originRequestPolicyConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lastModifiedTime, originRequestPolicyConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginRequestPolicy {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    originRequestPolicyConfig: ").append(toIndentedString(originRequestPolicyConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("OriginRequestPolicyConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("LastModifiedTime");
    openapiRequiredFields.add("OriginRequestPolicyConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OriginRequestPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OriginRequestPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OriginRequestPolicy is not found in the empty JSON string", OriginRequestPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OriginRequestPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OriginRequestPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OriginRequestPolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `LastModifiedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      // validate the required field `OriginRequestPolicyConfig`
      GetOriginRequestPolicyConfigResultOriginRequestPolicyConfig.validateJsonElement(jsonObj.get("OriginRequestPolicyConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OriginRequestPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OriginRequestPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OriginRequestPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OriginRequestPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<OriginRequestPolicy>() {
           @Override
           public void write(JsonWriter out, OriginRequestPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OriginRequestPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OriginRequestPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OriginRequestPolicy
   * @throws IOException if the JSON string is invalid with respect to OriginRequestPolicy
   */
  public static OriginRequestPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OriginRequestPolicy.class);
  }

  /**
   * Convert an instance of OriginRequestPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

