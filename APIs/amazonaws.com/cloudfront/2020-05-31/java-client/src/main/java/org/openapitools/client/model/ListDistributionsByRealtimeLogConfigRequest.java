/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListDistributionsByRealtimeLogConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:51.562194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListDistributionsByRealtimeLogConfigRequest {
  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  private String marker;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "MaxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  private String maxItems;

  public static final String SERIALIZED_NAME_REALTIME_LOG_CONFIG_NAME = "RealtimeLogConfigName";
  @SerializedName(SERIALIZED_NAME_REALTIME_LOG_CONFIG_NAME)
  private String realtimeLogConfigName;

  public static final String SERIALIZED_NAME_REALTIME_LOG_CONFIG_ARN = "RealtimeLogConfigArn";
  @SerializedName(SERIALIZED_NAME_REALTIME_LOG_CONFIG_ARN)
  private String realtimeLogConfigArn;

  public ListDistributionsByRealtimeLogConfigRequest() {
  }

  public ListDistributionsByRealtimeLogConfigRequest marker(String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Get marker
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(String marker) {
    this.marker = marker;
  }


  public ListDistributionsByRealtimeLogConfigRequest maxItems(String maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * Get maxItems
   * @return maxItems
   */
  @javax.annotation.Nullable
  public String getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(String maxItems) {
    this.maxItems = maxItems;
  }


  public ListDistributionsByRealtimeLogConfigRequest realtimeLogConfigName(String realtimeLogConfigName) {
    this.realtimeLogConfigName = realtimeLogConfigName;
    return this;
  }

  /**
   * Get realtimeLogConfigName
   * @return realtimeLogConfigName
   */
  @javax.annotation.Nullable
  public String getRealtimeLogConfigName() {
    return realtimeLogConfigName;
  }

  public void setRealtimeLogConfigName(String realtimeLogConfigName) {
    this.realtimeLogConfigName = realtimeLogConfigName;
  }


  public ListDistributionsByRealtimeLogConfigRequest realtimeLogConfigArn(String realtimeLogConfigArn) {
    this.realtimeLogConfigArn = realtimeLogConfigArn;
    return this;
  }

  /**
   * Get realtimeLogConfigArn
   * @return realtimeLogConfigArn
   */
  @javax.annotation.Nullable
  public String getRealtimeLogConfigArn() {
    return realtimeLogConfigArn;
  }

  public void setRealtimeLogConfigArn(String realtimeLogConfigArn) {
    this.realtimeLogConfigArn = realtimeLogConfigArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDistributionsByRealtimeLogConfigRequest listDistributionsByRealtimeLogConfigRequest = (ListDistributionsByRealtimeLogConfigRequest) o;
    return Objects.equals(this.marker, listDistributionsByRealtimeLogConfigRequest.marker) &&
        Objects.equals(this.maxItems, listDistributionsByRealtimeLogConfigRequest.maxItems) &&
        Objects.equals(this.realtimeLogConfigName, listDistributionsByRealtimeLogConfigRequest.realtimeLogConfigName) &&
        Objects.equals(this.realtimeLogConfigArn, listDistributionsByRealtimeLogConfigRequest.realtimeLogConfigArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marker, maxItems, realtimeLogConfigName, realtimeLogConfigArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDistributionsByRealtimeLogConfigRequest {\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    realtimeLogConfigName: ").append(toIndentedString(realtimeLogConfigName)).append("\n");
    sb.append("    realtimeLogConfigArn: ").append(toIndentedString(realtimeLogConfigArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Marker");
    openapiFields.add("MaxItems");
    openapiFields.add("RealtimeLogConfigName");
    openapiFields.add("RealtimeLogConfigArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListDistributionsByRealtimeLogConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDistributionsByRealtimeLogConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDistributionsByRealtimeLogConfigRequest is not found in the empty JSON string", ListDistributionsByRealtimeLogConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDistributionsByRealtimeLogConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDistributionsByRealtimeLogConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Marker`
      if (jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Marker"));
      }
      // validate the optional field `MaxItems`
      if (jsonObj.get("MaxItems") != null && !jsonObj.get("MaxItems").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxItems"));
      }
      // validate the optional field `RealtimeLogConfigName`
      if (jsonObj.get("RealtimeLogConfigName") != null && !jsonObj.get("RealtimeLogConfigName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RealtimeLogConfigName"));
      }
      // validate the optional field `RealtimeLogConfigArn`
      if (jsonObj.get("RealtimeLogConfigArn") != null && !jsonObj.get("RealtimeLogConfigArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RealtimeLogConfigArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDistributionsByRealtimeLogConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDistributionsByRealtimeLogConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDistributionsByRealtimeLogConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDistributionsByRealtimeLogConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDistributionsByRealtimeLogConfigRequest>() {
           @Override
           public void write(JsonWriter out, ListDistributionsByRealtimeLogConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDistributionsByRealtimeLogConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListDistributionsByRealtimeLogConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListDistributionsByRealtimeLogConfigRequest
   * @throws IOException if the JSON string is invalid with respect to ListDistributionsByRealtimeLogConfigRequest
   */
  public static ListDistributionsByRealtimeLogConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDistributionsByRealtimeLogConfigRequest.class);
  }

  /**
   * Convert an instance of ListDistributionsByRealtimeLogConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

