/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CopyDistribution20200531Request;
import org.openapitools.client.model.CopyDistributionResult;
import org.openapitools.client.model.CreateCachePolicy20200531Request;
import org.openapitools.client.model.CreateCachePolicyResult;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentity20200531Request;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.CreateContinuousDeploymentPolicy20200531Request;
import org.openapitools.client.model.CreateContinuousDeploymentPolicyResult;
import org.openapitools.client.model.CreateDistribution20200531Request;
import org.openapitools.client.model.CreateDistributionResult;
import org.openapitools.client.model.CreateDistributionWithTags20200531Request;
import org.openapitools.client.model.CreateDistributionWithTagsResult;
import org.openapitools.client.model.CreateFieldLevelEncryptionConfig20200531Request;
import org.openapitools.client.model.CreateFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.CreateFieldLevelEncryptionProfile20200531Request;
import org.openapitools.client.model.CreateFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.CreateFunction20200531Request;
import org.openapitools.client.model.CreateFunctionResult;
import org.openapitools.client.model.CreateInvalidation20200531Request;
import org.openapitools.client.model.CreateInvalidationResult;
import org.openapitools.client.model.CreateKeyGroup20200531Request;
import org.openapitools.client.model.CreateKeyGroupResult;
import org.openapitools.client.model.CreateMonitoringSubscription20200531Request;
import org.openapitools.client.model.CreateMonitoringSubscriptionResult;
import org.openapitools.client.model.CreateOriginAccessControl20200531Request;
import org.openapitools.client.model.CreateOriginAccessControlResult;
import org.openapitools.client.model.CreateOriginRequestPolicy20200531Request;
import org.openapitools.client.model.CreateOriginRequestPolicyResult;
import org.openapitools.client.model.CreatePublicKey20200531Request;
import org.openapitools.client.model.CreatePublicKeyResult;
import org.openapitools.client.model.CreateRealtimeLogConfig20200531Request;
import org.openapitools.client.model.CreateRealtimeLogConfigResult;
import org.openapitools.client.model.CreateResponseHeadersPolicy20200531Request;
import org.openapitools.client.model.CreateResponseHeadersPolicyResult;
import org.openapitools.client.model.CreateStreamingDistribution20200531Request;
import org.openapitools.client.model.CreateStreamingDistributionResult;
import org.openapitools.client.model.CreateStreamingDistributionWithTags20200531Request;
import org.openapitools.client.model.CreateStreamingDistributionWithTagsResult;
import org.openapitools.client.model.DeleteRealtimeLogConfig20200531Request;
import org.openapitools.client.model.DescribeFunctionResult;
import org.openapitools.client.model.GetCachePolicyConfigResult;
import org.openapitools.client.model.GetCachePolicyResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityConfigResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.GetContinuousDeploymentPolicyConfigResult;
import org.openapitools.client.model.GetContinuousDeploymentPolicyResult;
import org.openapitools.client.model.GetDistributionConfigResult;
import org.openapitools.client.model.GetDistributionResult;
import org.openapitools.client.model.GetFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.GetFieldLevelEncryptionProfileConfigResult;
import org.openapitools.client.model.GetFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.GetFieldLevelEncryptionResult;
import org.openapitools.client.model.GetFunctionResult;
import org.openapitools.client.model.GetInvalidationResult;
import org.openapitools.client.model.GetKeyGroupConfigResult;
import org.openapitools.client.model.GetKeyGroupResult;
import org.openapitools.client.model.GetMonitoringSubscriptionResult;
import org.openapitools.client.model.GetOriginAccessControlConfigResult;
import org.openapitools.client.model.GetOriginAccessControlResult;
import org.openapitools.client.model.GetOriginRequestPolicyConfigResult;
import org.openapitools.client.model.GetOriginRequestPolicyResult;
import org.openapitools.client.model.GetPublicKeyConfigResult;
import org.openapitools.client.model.GetPublicKeyResult;
import org.openapitools.client.model.GetRealtimeLogConfig20200531Request;
import org.openapitools.client.model.GetRealtimeLogConfigResult;
import org.openapitools.client.model.GetResponseHeadersPolicyConfigResult;
import org.openapitools.client.model.GetResponseHeadersPolicyResult;
import org.openapitools.client.model.GetStreamingDistributionConfigResult;
import org.openapitools.client.model.GetStreamingDistributionResult;
import org.openapitools.client.model.ListCachePoliciesResult;
import org.openapitools.client.model.ListCloudFrontOriginAccessIdentitiesResult;
import org.openapitools.client.model.ListConflictingAliasesResult;
import org.openapitools.client.model.ListContinuousDeploymentPoliciesResult;
import org.openapitools.client.model.ListDistributionsByCachePolicyIdResult;
import org.openapitools.client.model.ListDistributionsByKeyGroupResult;
import org.openapitools.client.model.ListDistributionsByOriginRequestPolicyIdResult;
import org.openapitools.client.model.ListDistributionsByRealtimeLogConfig20200531Request;
import org.openapitools.client.model.ListDistributionsByRealtimeLogConfigResult;
import org.openapitools.client.model.ListDistributionsByResponseHeadersPolicyIdResult;
import org.openapitools.client.model.ListDistributionsByWebACLIdResult;
import org.openapitools.client.model.ListDistributionsResult;
import org.openapitools.client.model.ListFieldLevelEncryptionConfigsResult;
import org.openapitools.client.model.ListFieldLevelEncryptionProfilesResult;
import org.openapitools.client.model.ListFunctionsResult;
import org.openapitools.client.model.ListInvalidationsResult;
import org.openapitools.client.model.ListKeyGroupsResult;
import org.openapitools.client.model.ListOriginAccessControlsResult;
import org.openapitools.client.model.ListOriginRequestPoliciesResult;
import org.openapitools.client.model.ListPublicKeysResult;
import org.openapitools.client.model.ListRealtimeLogConfigsResult;
import org.openapitools.client.model.ListResponseHeadersPoliciesResult;
import org.openapitools.client.model.ListStreamingDistributionsResult;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.PublishFunctionResult;
import org.openapitools.client.model.TagResource20200531Request;
import org.openapitools.client.model.TestFunction20200531Request;
import org.openapitools.client.model.TestFunctionResult;
import org.openapitools.client.model.UntagResource20200531Request;
import org.openapitools.client.model.UpdateCachePolicyResult;
import org.openapitools.client.model.UpdateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.UpdateContinuousDeploymentPolicyResult;
import org.openapitools.client.model.UpdateDistributionResult;
import org.openapitools.client.model.UpdateDistributionWithStagingConfigResult;
import org.openapitools.client.model.UpdateFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.UpdateFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.UpdateFunction20200531Request;
import org.openapitools.client.model.UpdateFunctionResult;
import org.openapitools.client.model.UpdateKeyGroupResult;
import org.openapitools.client.model.UpdateOriginAccessControlResult;
import org.openapitools.client.model.UpdateOriginRequestPolicyResult;
import org.openapitools.client.model.UpdatePublicKeyResult;
import org.openapitools.client.model.UpdateRealtimeLogConfig20200531Request;
import org.openapitools.client.model.UpdateRealtimeLogConfigResult;
import org.openapitools.client.model.UpdateResponseHeadersPolicyResult;
import org.openapitools.client.model.UpdateStreamingDistributionResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront distribution.&lt;/p&gt; &lt;p&gt;With this operation you can move an alias that&#39;s already in use on a CloudFront distribution to a different distribution in one step. This prevents the downtime that could occur if you first remove the alias from one distribution and then separately add the alias to another distribution.&lt;/p&gt; &lt;p&gt;To use this operation to associate an alias with a distribution, you provide the alias and the ID of the target distribution for the alias. For more information, including how to set up the target distribution, prerequisites that you must complete, and other restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\&quot;&gt;Moving an alternate domain name to a different distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateAlias20200531Test() throws ApiException {
        String targetDistributionId = null;
        String alias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateAlias20200531(targetDistributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a staging distribution using the configuration of the provided primary distribution. A staging distribution is a copy of an existing distribution (called the primary distribution) that you can use in a continuous deployment workflow.&lt;/p&gt; &lt;p&gt;After you create a staging distribution, you can use &lt;code&gt;UpdateDistribution&lt;/code&gt; to modify the staging distribution&#39;s configuration. Then you can use &lt;code&gt;CreateContinuousDeploymentPolicy&lt;/code&gt; to incrementally move traffic to the staging distribution.&lt;/p&gt; &lt;p&gt;This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\&quot;&gt;CreateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CopyDistribution.html\&quot;&gt;CopyDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyDistribution20200531Test() throws ApiException {
        String primaryDistributionId = null;
        CopyDistribution20200531Request copyDistribution20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean staging = null;
        String ifMatch = null;
        CopyDistributionResult response = api.copyDistribution20200531(primaryDistributionId, copyDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staging, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a cache policy.&lt;/p&gt; &lt;p&gt;After you create a cache policy, you can attach it to one or more cache behaviors. When it&#39;s attached to a cache behavior, the cache policy determines the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The values that CloudFront includes in the &lt;i&gt;cache key&lt;/i&gt;. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can&#39;t find an object in its cache that matches the request&#39;s cache key. If you want to send values to the origin but &lt;i&gt;not&lt;/i&gt; include them in the cache key, use &lt;code&gt;OriginRequestPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about cache policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html\&quot;&gt;Controlling the cache key&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCachePolicy20200531Test() throws ApiException {
        CreateCachePolicy20200531Request createCachePolicy20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCachePolicyResult response = api.createCachePolicy20200531(createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCloudFrontOriginAccessIdentity20200531Test() throws ApiException {
        CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCloudFrontOriginAccessIdentityResult response = api.createCloudFrontOriginAccessIdentity20200531(createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a continuous deployment policy that distributes traffic for a custom domain name to two different CloudFront distributions.&lt;/p&gt; &lt;p&gt;To use a continuous deployment policy, first use &lt;code&gt;CopyDistribution&lt;/code&gt; to create a staging distribution, then use &lt;code&gt;UpdateDistribution&lt;/code&gt; to modify the staging distribution&#39;s configuration.&lt;/p&gt; &lt;p&gt;After you create and update a staging distribution, you can use a continuous deployment policy to incrementally move traffic to the staging distribution. This workflow enables you to test changes to a distribution&#39;s configuration before moving all of your domain&#39;s production traffic to the new configuration.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContinuousDeploymentPolicy20200531Test() throws ApiException {
        CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContinuousDeploymentPolicyResult response = api.createContinuousDeploymentPolicy20200531(createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a CloudFront distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDistribution20200531Test() throws ApiException {
        CreateDistribution20200531Request createDistribution20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDistributionResult response = api.createDistribution20200531(createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create a new distribution with tags. This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\&quot;&gt;CreateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDistributionWithTags20200531Test() throws ApiException {
        Boolean withTags = null;
        CreateDistributionWithTags20200531Request createDistributionWithTags20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDistributionWithTagsResult response = api.createDistributionWithTags20200531(withTags, createDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new field-level encryption configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFieldLevelEncryptionConfig20200531Test() throws ApiException {
        CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFieldLevelEncryptionConfigResult response = api.createFieldLevelEncryptionConfig20200531(createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a field-level encryption profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFieldLevelEncryptionProfile20200531Test() throws ApiException {
        CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFieldLevelEncryptionProfileResult response = api.createFieldLevelEncryptionProfile20200531(createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a CloudFront function.&lt;/p&gt; &lt;p&gt;To create a function, you provide the function code and some configuration information about the function. The response contains an Amazon Resource Name (ARN) that uniquely identifies the function.&lt;/p&gt; &lt;p&gt;When you create a function, it&#39;s in the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage. In this stage, you can test the function with &lt;code&gt;TestFunction&lt;/code&gt;, and update it with &lt;code&gt;UpdateFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you&#39;re ready to use your function with a CloudFront distribution, use &lt;code&gt;PublishFunction&lt;/code&gt; to copy the function from the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage to &lt;code&gt;LIVE&lt;/code&gt;. When it&#39;s live, you can attach the function to a distribution&#39;s cache behavior, using the function&#39;s ARN.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFunction20200531Test() throws ApiException {
        CreateFunction20200531Request createFunction20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFunctionResult response = api.createFunction20200531(createFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new invalidation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvalidation20200531Test() throws ApiException {
        String distributionId = null;
        CreateInvalidation20200531Request createInvalidation20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInvalidationResult response = api.createInvalidation20200531(distributionId, createInvalidation20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a key group that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;CloudFront signed URLs and signed cookies&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a key group, you must specify at least one public key for the key group. After you create a key group, you can reference it from one or more cache behaviors. When you reference a key group in a cache behavior, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving private content&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createKeyGroup20200531Test() throws ApiException {
        CreateKeyGroup20200531Request createKeyGroup20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateKeyGroupResult response = api.createKeyGroup20200531(createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables additional CloudWatch metrics for the specified CloudFront distribution. The additional metrics incur an additional cost.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional\&quot;&gt;Viewing additional CloudFront distribution metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMonitoringSubscription20200531Test() throws ApiException {
        String distributionId = null;
        CreateMonitoringSubscription20200531Request createMonitoringSubscription20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMonitoringSubscriptionResult response = api.createMonitoringSubscription20200531(distributionId, createMonitoringSubscription20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new origin access control in CloudFront. After you create an origin access control, you can add it to an origin in a CloudFront distribution so that CloudFront sends authenticated (signed) requests to the origin.&lt;/p&gt; &lt;p&gt;This makes it possible to block public access to the origin, allowing viewers (users) to access the origin&#39;s content only through CloudFront.&lt;/p&gt; &lt;p&gt;For more information about using a CloudFront origin access control, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-origin.html\&quot;&gt;Restricting access to an Amazon Web Services origin&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOriginAccessControl20200531Test() throws ApiException {
        CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateOriginAccessControlResult response = api.createOriginAccessControl20200531(createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an origin request policy.&lt;/p&gt; &lt;p&gt;After you create an origin request policy, you can attach it to one or more cache behaviors. When it&#39;s attached to a cache behavior, the origin request policy determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The request body and the URL path (without the domain name) from the viewer request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The headers that CloudFront automatically includes in every origin request, including &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;User-Agent&lt;/code&gt;, and &lt;code&gt;X-Amz-Cf-Id&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CloudFront sends a request when it can&#39;t find a valid object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use &lt;code&gt;CachePolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about origin request policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html\&quot;&gt;Controlling origin requests&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOriginRequestPolicy20200531Test() throws ApiException {
        CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateOriginRequestPolicyResult response = api.createOriginRequestPolicy20200531(createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Uploads a public key to CloudFront that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;signed URLs and signed cookies&lt;/a&gt;, or with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html\&quot;&gt;field-level encryption&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPublicKey20200531Test() throws ApiException {
        CreatePublicKey20200531Request createPublicKey20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePublicKeyResult response = api.createPublicKey20200531(createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a real-time log configuration.&lt;/p&gt; &lt;p&gt;After you create a real-time log configuration, you can attach it to one or more cache behaviors to send real-time log data to the specified Amazon Kinesis data stream.&lt;/p&gt; &lt;p&gt;For more information about real-time log configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html\&quot;&gt;Real-time logs&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRealtimeLogConfig20200531Test() throws ApiException {
        CreateRealtimeLogConfig20200531Request createRealtimeLogConfig20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRealtimeLogConfigResult response = api.createRealtimeLogConfig20200531(createRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a response headers policy.&lt;/p&gt; &lt;p&gt;A response headers policy contains information about a set of HTTP headers. To create a response headers policy, you provide some metadata about the policy and a set of configurations that specify the headers.&lt;/p&gt; &lt;p&gt;After you create a response headers policy, you can use its ID to attach it to one or more cache behaviors in a CloudFront distribution. When it&#39;s attached to a cache behavior, the response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to requests that match the cache behavior. CloudFront adds or removes response headers according to the configuration of the response headers policy.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/modifying-response-headers.html\&quot;&gt;Adding or removing HTTP headers in CloudFront responses&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResponseHeadersPolicy20200531Test() throws ApiException {
        CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateResponseHeadersPolicyResult response = api.createResponseHeadersPolicy20200531(createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, &lt;a href&#x3D;\&quot;http://forums.aws.amazon.com/ann.jspa?annID&#x3D;7356\&quot;&gt;read the announcement&lt;/a&gt; on the Amazon CloudFront discussion forum.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingDistribution20200531Test() throws ApiException {
        CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStreamingDistributionResult response = api.createStreamingDistribution20200531(createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP) distributions on December 31, 2020. For more information, &lt;a href&#x3D;\&quot;http://forums.aws.amazon.com/ann.jspa?annID&#x3D;7356\&quot;&gt;read the announcement&lt;/a&gt; on the Amazon CloudFront discussion forum.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingDistributionWithTags20200531Test() throws ApiException {
        Boolean withTags = null;
        CreateStreamingDistributionWithTags20200531Request createStreamingDistributionWithTags20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStreamingDistributionWithTagsResult response = api.createStreamingDistributionWithTags20200531(withTags, createStreamingDistributionWithTags20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a cache policy.&lt;/p&gt; &lt;p&gt;You cannot delete a cache policy if it&#39;s attached to a cache behavior. First update your distributions to remove the cache policy from all cache behaviors, then delete the cache policy.&lt;/p&gt; &lt;p&gt;To delete a cache policy, you must provide the policy&#39;s identifier and version. To get these values, you can use &lt;code&gt;ListCachePolicies&lt;/code&gt; or &lt;code&gt;GetCachePolicy&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCachePolicy20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteCachePolicy20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Delete an origin access identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCloudFrontOriginAccessIdentity20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteCloudFrontOriginAccessIdentity20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a continuous deployment policy.&lt;/p&gt; &lt;p&gt;You cannot delete a continuous deployment policy that&#39;s attached to a primary distribution. First update your distribution to remove the continuous deployment policy, then you can delete the policy.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContinuousDeploymentPolicy20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteContinuousDeploymentPolicy20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Delete a distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDistribution20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteDistribution20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Remove a field-level encryption configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFieldLevelEncryptionConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteFieldLevelEncryptionConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Remove a field-level encryption profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFieldLevelEncryptionProfile20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteFieldLevelEncryptionProfile20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a CloudFront function.&lt;/p&gt; &lt;p&gt;You cannot delete a function if it&#39;s associated with a cache behavior. First, update your distributions to remove the function association from all cache behaviors, then delete the function.&lt;/p&gt; &lt;p&gt;To delete a function, you must provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value). To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFunction20200531Test() throws ApiException {
        String name = null;
        String ifMatch = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteFunction20200531(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a key group.&lt;/p&gt; &lt;p&gt;You cannot delete a key group that is referenced in a cache behavior. First update your distributions to remove the key group from all cache behaviors, then delete the key group.&lt;/p&gt; &lt;p&gt;To delete a key group, you must provide the key group&#39;s identifier and version. To get these values, use &lt;code&gt;ListKeyGroups&lt;/code&gt; followed by &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKeyGroup20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteKeyGroup20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Disables additional CloudWatch metrics for the specified CloudFront distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMonitoringSubscription20200531Test() throws ApiException {
        String distributionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMonitoringSubscription20200531(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a CloudFront origin access control.&lt;/p&gt; &lt;p&gt;You cannot delete an origin access control if it&#39;s in use. First, update all distributions to remove the origin access control from all origins, then delete the origin access control.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOriginAccessControl20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteOriginAccessControl20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an origin request policy.&lt;/p&gt; &lt;p&gt;You cannot delete an origin request policy if it&#39;s attached to any cache behaviors. First update your distributions to remove the origin request policy from all cache behaviors, then delete the origin request policy.&lt;/p&gt; &lt;p&gt;To delete an origin request policy, you must provide the policy&#39;s identifier and version. To get the identifier, you can use &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt; or &lt;code&gt;GetOriginRequestPolicy&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOriginRequestPolicy20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteOriginRequestPolicy20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Remove a public key you previously added to CloudFront.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePublicKey20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deletePublicKey20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a real-time log configuration.&lt;/p&gt; &lt;p&gt;You cannot delete a real-time log configuration if it&#39;s attached to a cache behavior. First update your distributions to remove the real-time log configuration from all cache behaviors, then delete the real-time log configuration.&lt;/p&gt; &lt;p&gt;To delete a real-time log configuration, you can provide the configuration&#39;s name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to delete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRealtimeLogConfig20200531Test() throws ApiException {
        DeleteRealtimeLogConfig20200531Request deleteRealtimeLogConfig20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRealtimeLogConfig20200531(deleteRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a response headers policy.&lt;/p&gt; &lt;p&gt;You cannot delete a response headers policy if it&#39;s attached to a cache behavior. First update your distributions to remove the response headers policy from all cache behaviors, then delete the response headers policy.&lt;/p&gt; &lt;p&gt;To delete a response headers policy, you must provide the policy&#39;s identifier and version. To get these values, you can use &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt; or &lt;code&gt;GetResponseHeadersPolicy&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResponseHeadersPolicy20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteResponseHeadersPolicy20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamingDistribution20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteStreamingDistribution20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets configuration information and metadata about a CloudFront function, but not the function&#39;s code. To get a function&#39;s code, use &lt;code&gt;GetFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To get configuration information and metadata about a function, you must provide the function&#39;s name and stage. To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFunction20200531Test() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String stage = null;
        DescribeFunctionResult response = api.describeFunction20200531(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a cache policy, including the following metadata:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The policy&#39;s identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The date and time when the policy was last modified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get a cache policy, you must provide the policy&#39;s identifier. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCachePolicy20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCachePolicyResult response = api.getCachePolicy20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a cache policy configuration.&lt;/p&gt; &lt;p&gt;To get a cache policy configuration, you must provide the policy&#39;s identifier. If the cache policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the cache policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListCachePolicies&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCachePolicyConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCachePolicyConfigResult response = api.getCachePolicyConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the information about an origin access identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFrontOriginAccessIdentity20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCloudFrontOriginAccessIdentityResult response = api.getCloudFrontOriginAccessIdentity20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about an origin access identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFrontOriginAccessIdentityConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCloudFrontOriginAccessIdentityConfigResult response = api.getCloudFrontOriginAccessIdentityConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a continuous deployment policy, including metadata (the policy&#39;s identifier and the date and time when the policy was last modified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousDeploymentPolicy20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContinuousDeploymentPolicyResult response = api.getContinuousDeploymentPolicy20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets configuration information about a continuous deployment policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousDeploymentPolicyConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContinuousDeploymentPolicyConfigResult response = api.getContinuousDeploymentPolicyConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the information about a distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistribution20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionResult response = api.getDistribution20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about a distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionConfigResult response = api.getDistributionConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the field-level encryption configuration information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldLevelEncryption20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFieldLevelEncryptionResult response = api.getFieldLevelEncryption20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the field-level encryption configuration information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldLevelEncryptionConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFieldLevelEncryptionConfigResult response = api.getFieldLevelEncryptionConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the field-level encryption profile information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldLevelEncryptionProfile20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFieldLevelEncryptionProfileResult response = api.getFieldLevelEncryptionProfile20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the field-level encryption profile configuration information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldLevelEncryptionProfileConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFieldLevelEncryptionProfileConfigResult response = api.getFieldLevelEncryptionProfileConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the code of a CloudFront function. To get configuration information and metadata about a function, use &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To get a function&#39;s code, you must provide the function&#39;s name and stage. To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFunction20200531Test() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String stage = null;
        GetFunctionResult response = api.getFunction20200531(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stage);
        // TODO: test validations
    }

    /**
     * Get the information about an invalidation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvalidation20200531Test() throws ApiException {
        String distributionId = null;
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInvalidationResult response = api.getInvalidation20200531(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a key group, including the date and time when the key group was last modified.&lt;/p&gt; &lt;p&gt;To get a key group, you must provide the key group&#39;s identifier. If the key group is referenced in a distribution&#39;s cache behavior, you can get the key group&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the key group is not referenced in a cache behavior, you can get the identifier using &lt;code&gt;ListKeyGroups&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyGroup20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetKeyGroupResult response = api.getKeyGroup20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a key group configuration.&lt;/p&gt; &lt;p&gt;To get a key group configuration, you must provide the key group&#39;s identifier. If the key group is referenced in a distribution&#39;s cache behavior, you can get the key group&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the key group is not referenced in a cache behavior, you can get the identifier using &lt;code&gt;ListKeyGroups&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyGroupConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetKeyGroupConfigResult response = api.getKeyGroupConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about whether additional CloudWatch metrics are enabled for the specified CloudFront distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMonitoringSubscription20200531Test() throws ApiException {
        String distributionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMonitoringSubscriptionResult response = api.getMonitoringSubscription20200531(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a CloudFront origin access control, including its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOriginAccessControl20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOriginAccessControlResult response = api.getOriginAccessControl20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a CloudFront origin access control configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOriginAccessControlConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOriginAccessControlConfigResult response = api.getOriginAccessControlConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets an origin request policy, including the following metadata:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The policy&#39;s identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The date and time when the policy was last modified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get an origin request policy, you must provide the policy&#39;s identifier. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOriginRequestPolicy20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOriginRequestPolicyResult response = api.getOriginRequestPolicy20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets an origin request policy configuration.&lt;/p&gt; &lt;p&gt;To get an origin request policy configuration, you must provide the policy&#39;s identifier. If the origin request policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the origin request policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListOriginRequestPolicies&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOriginRequestPolicyConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOriginRequestPolicyConfigResult response = api.getOriginRequestPolicyConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a public key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicKey20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPublicKeyResult response = api.getPublicKey20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a public key configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicKeyConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPublicKeyConfigResult response = api.getPublicKeyConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a real-time log configuration.&lt;/p&gt; &lt;p&gt;To get a real-time log configuration, you can provide the configuration&#39;s name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to get.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRealtimeLogConfig20200531Test() throws ApiException {
        GetRealtimeLogConfig20200531Request getRealtimeLogConfig20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRealtimeLogConfigResult response = api.getRealtimeLogConfig20200531(getRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a response headers policy, including metadata (the policy&#39;s identifier and the date and time when the policy was last modified).&lt;/p&gt; &lt;p&gt;To get a response headers policy, you must provide the policy&#39;s identifier. If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResponseHeadersPolicy20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResponseHeadersPolicyResult response = api.getResponseHeadersPolicy20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a response headers policy configuration.&lt;/p&gt; &lt;p&gt;To get a response headers policy configuration, you must provide the policy&#39;s identifier. If the response headers policy is attached to a distribution&#39;s cache behavior, you can get the policy&#39;s identifier using &lt;code&gt;ListDistributions&lt;/code&gt; or &lt;code&gt;GetDistribution&lt;/code&gt;. If the response headers policy is not attached to a cache behavior, you can get the identifier using &lt;code&gt;ListResponseHeadersPolicies&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResponseHeadersPolicyConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResponseHeadersPolicyConfigResult response = api.getResponseHeadersPolicyConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingDistribution20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingDistributionResult response = api.getStreamingDistribution20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about a streaming distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingDistributionConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingDistributionConfigResult response = api.getStreamingDistributionConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of cache policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCachePolicies20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String type = null;
        String marker = null;
        String maxItems = null;
        ListCachePoliciesResult response = api.listCachePolicies20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems);
        // TODO: test validations
    }

    /**
     * Lists origin access identities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCloudFrontOriginAccessIdentities20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListCloudFrontOriginAccessIdentitiesResult response = api.listCloudFrontOriginAccessIdentities20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of aliases (also called CNAMEs or alternate domain names) that conflict or overlap with the provided alias, and the associated CloudFront distributions and Amazon Web Services accounts for each conflicting alias. In the returned list, the distribution and account IDs are partially hidden, which allows you to identify the distributions and accounts that you own, but helps to protect the information of ones that you don&#39;t own.&lt;/p&gt; &lt;p&gt;Use this operation to find aliases that are in use in CloudFront that conflict or overlap with the provided alias. For example, if you provide &lt;code&gt;www.example.com&lt;/code&gt; as input, the returned list can include &lt;code&gt;www.example.com&lt;/code&gt; and the overlapping wildcard alternate domain name (&lt;code&gt;*.example.com&lt;/code&gt;), if they exist. If you provide &lt;code&gt;*.example.com&lt;/code&gt; as input, the returned list can include &lt;code&gt;*.example.com&lt;/code&gt; and any alternate domain names covered by that wildcard (for example, &lt;code&gt;www.example.com&lt;/code&gt;, &lt;code&gt;test.example.com&lt;/code&gt;, &lt;code&gt;dev.example.com&lt;/code&gt;, and so on), if they exist.&lt;/p&gt; &lt;p&gt;To list conflicting aliases, you provide the alias to search and the ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias. For more information, including how to set up the distribution and certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move\&quot;&gt;Moving an alternate domain name to a different distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConflictingAliases20200531Test() throws ApiException {
        String distributionId = null;
        String alias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        Integer maxItems = null;
        ListConflictingAliasesResult response = api.listConflictingAliases20200531(distributionId, alias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of the continuous deployment policies in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContinuousDeploymentPolicies20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListContinuousDeploymentPoliciesResult response = api.listContinuousDeploymentPolicies20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List CloudFront distributions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributions20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsResult response = api.listDistributions20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified cache policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributionsByCachePolicyId20200531Test() throws ApiException {
        String cachePolicyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsByCachePolicyIdResult response = api.listDistributionsByCachePolicyId20200531(cachePolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that references the specified key group.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributionsByKeyGroup20200531Test() throws ApiException {
        String keyGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsByKeyGroupResult response = api.listDistributionsByKeyGroup20200531(keyGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified origin request policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributionsByOriginRequestPolicyId20200531Test() throws ApiException {
        String originRequestPolicyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsByOriginRequestPolicyIdResult response = api.listDistributionsByOriginRequestPolicyId20200531(originRequestPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of distributions that have a cache behavior that&#39;s associated with the specified real-time log configuration.&lt;/p&gt; &lt;p&gt;You can specify the real-time log configuration by its name or its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to identify the real-time log configuration to list distributions for.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributionsByRealtimeLogConfig20200531Test() throws ApiException {
        ListDistributionsByRealtimeLogConfig20200531Request listDistributionsByRealtimeLogConfig20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListDistributionsByRealtimeLogConfigResult response = api.listDistributionsByRealtimeLogConfig20200531(listDistributionsByRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of distribution IDs for distributions that have a cache behavior that&#39;s associated with the specified response headers policy.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributionsByResponseHeadersPolicyId20200531Test() throws ApiException {
        String responseHeadersPolicyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsByResponseHeadersPolicyIdResult response = api.listDistributionsByResponseHeadersPolicyId20200531(responseHeadersPolicyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List the distributions that are associated with a specified WAF web ACL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributionsByWebACLId20200531Test() throws ApiException {
        String webACLId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsByWebACLIdResult response = api.listDistributionsByWebACLId20200531(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFieldLevelEncryptionConfigs20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListFieldLevelEncryptionConfigsResult response = api.listFieldLevelEncryptionConfigs20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFieldLevelEncryptionProfiles20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListFieldLevelEncryptionProfilesResult response = api.listFieldLevelEncryptionProfiles20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of all CloudFront functions in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the functions that are in the specified stage, either &lt;code&gt;DEVELOPMENT&lt;/code&gt; or &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFunctions20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        String stage = null;
        ListFunctionsResult response = api.listFunctions20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, stage);
        // TODO: test validations
    }

    /**
     * Lists invalidation batches.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInvalidations20200531Test() throws ApiException {
        String distributionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListInvalidationsResult response = api.listInvalidations20200531(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of key groups.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listKeyGroups20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListKeyGroupsResult response = api.listKeyGroups20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the list of CloudFront origin access controls in this Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send another request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the next request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOriginAccessControls20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListOriginAccessControlsResult response = api.listOriginAccessControls20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of origin request policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOriginRequestPolicies20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String type = null;
        String marker = null;
        String maxItems = null;
        ListOriginRequestPoliciesResult response = api.listOriginRequestPolicies20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List all public keys that have been added to CloudFront for this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPublicKeys20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListPublicKeysResult response = api.listPublicKeys20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of real-time log configurations.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRealtimeLogConfigs20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxItems = null;
        String marker = null;
        ListRealtimeLogConfigsResult response = api.listRealtimeLogConfigs20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of response headers policies.&lt;/p&gt; &lt;p&gt;You can optionally apply a filter to get only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the &lt;code&gt;NextMarker&lt;/code&gt; value from the current response as the &lt;code&gt;Marker&lt;/code&gt; value in the subsequent request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResponseHeadersPolicies20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String type = null;
        String marker = null;
        String maxItems = null;
        ListResponseHeadersPoliciesResult response = api.listResponseHeadersPolicies20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List streaming distributions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamingDistributions20200531Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListStreamingDistributionsResult response = api.listStreamingDistributions20200531(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List tags for a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResource20200531Test() throws ApiException {
        String resource = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResult response = api.listTagsForResource20200531(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Publishes a CloudFront function by copying the function code from the &lt;code&gt;DEVELOPMENT&lt;/code&gt; stage to &lt;code&gt;LIVE&lt;/code&gt;. This automatically updates all cache behaviors that are using this function to use the newly published copy in the &lt;code&gt;LIVE&lt;/code&gt; stage.&lt;/p&gt; &lt;p&gt;When a function is published to the &lt;code&gt;LIVE&lt;/code&gt; stage, you can attach the function to a distribution&#39;s cache behavior, using the function&#39;s Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;To publish a function, you must provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value). To get these values, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishFunction20200531Test() throws ApiException {
        String name = null;
        String ifMatch = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PublishFunctionResult response = api.publishFunction20200531(name, ifMatch, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add tags to a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResource20200531Test() throws ApiException {
        String resource = null;
        String operation = null;
        TagResource20200531Request tagResource20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource20200531(resource, operation, tagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Tests a CloudFront function.&lt;/p&gt; &lt;p&gt;To test a function, you provide an &lt;i&gt;event object&lt;/i&gt; that represents an HTTP request or response that your CloudFront distribution could receive in production. CloudFront runs the function, passing it the event object that you provided, and returns the function&#39;s result (the modified event object) in the response. The response also contains function logs and error messages, if any exist. For more information about testing functions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function\&quot;&gt;Testing functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To test a function, you provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value) along with the event object. To get the function&#39;s name and version, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testFunction20200531Test() throws ApiException {
        String name = null;
        String ifMatch = null;
        TestFunction20200531Request testFunction20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestFunctionResult response = api.testFunction20200531(name, ifMatch, testFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove tags from a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResource20200531Test() throws ApiException {
        String resource = null;
        String operation = null;
        UntagResource20200531Request untagResource20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource20200531(resource, operation, untagResource20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a cache policy configuration.&lt;/p&gt; &lt;p&gt;When you update a cache policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a cache policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetCachePolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the cache policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateCachePolicy&lt;/code&gt; by providing the entire cache policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCachePolicy20200531Test() throws ApiException {
        String id = null;
        CreateCachePolicy20200531Request createCachePolicy20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateCachePolicyResult response = api.updateCachePolicy20200531(id, createCachePolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update an origin access identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCloudFrontOriginAccessIdentity20200531Test() throws ApiException {
        String id = null;
        CreateCloudFrontOriginAccessIdentity20200531Request createCloudFrontOriginAccessIdentity20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateCloudFrontOriginAccessIdentityResult response = api.updateCloudFrontOriginAccessIdentity20200531(id, createCloudFrontOriginAccessIdentity20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a continuous deployment policy. You can update a continuous deployment policy to enable or disable it, to change the percentage of traffic that it sends to the staging distribution, or to change the staging distribution that it sends traffic to.&lt;/p&gt; &lt;p&gt;When you update a continuous deployment policy configuration, all the fields are updated with the values that are provided in the request. You cannot update some fields independent of others. To update a continuous deployment policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetContinuousDeploymentPolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the continuous deployment policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;UpdateContinuousDeploymentPolicy&lt;/code&gt;, providing the entire continuous deployment policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContinuousDeploymentPolicy20200531Test() throws ApiException {
        String id = null;
        CreateContinuousDeploymentPolicy20200531Request createContinuousDeploymentPolicy20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateContinuousDeploymentPolicyResult response = api.updateContinuousDeploymentPolicy20200531(id, createContinuousDeploymentPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the configuration for a CloudFront distribution.&lt;/p&gt; &lt;p&gt;The update process includes getting the current distribution configuration, updating it to make your changes, and then submitting an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to make the updates.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetDistributionConfig&lt;/code&gt; to get the current configuration, including the version identifier (&lt;code&gt;ETag&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the distribution configuration that was returned in the response. Note the following important requirements and restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must rename the &lt;code&gt;ETag&lt;/code&gt; field to &lt;code&gt;IfMatch&lt;/code&gt;, leaving the value unchanged. (Set the value of &lt;code&gt;IfMatch&lt;/code&gt; to the value of &lt;code&gt;ETag&lt;/code&gt;, then remove the &lt;code&gt;ETag&lt;/code&gt; field.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request, providing the distribution configuration. The new configuration replaces the existing configuration. The values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into your existing configuration. Make sure to include all fields: the ones that you modified and also the ones that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDistribution20200531Test() throws ApiException {
        String id = null;
        CreateDistribution20200531Request createDistribution20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateDistributionResult response = api.updateDistribution20200531(id, createDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies the staging distribution&#39;s configuration to its corresponding primary distribution. The primary distribution retains its &lt;code&gt;Aliases&lt;/code&gt; (also known as alternate domain names or CNAMEs) and &lt;code&gt;ContinuousDeploymentPolicyId&lt;/code&gt; value, but otherwise its configuration is overwritten to match the staging distribution.&lt;/p&gt; &lt;p&gt;You can use this operation in a continuous deployment workflow after you have tested configuration changes on the staging distribution. After using a continuous deployment policy to move a portion of your domain name&#39;s traffic to the staging distribution and verifying that it works as intended, you can use this operation to copy the staging distribution&#39;s configuration to the primary distribution. This action will disable the continuous deployment policy and move your domain&#39;s traffic back to the primary distribution.&lt;/p&gt; &lt;p&gt;This API operation requires the following IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html\&quot;&gt;UpdateDistribution&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDistributionWithStagingConfig20200531Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String stagingDistributionId = null;
        String ifMatch = null;
        UpdateDistributionWithStagingConfigResult response = api.updateDistributionWithStagingConfig20200531(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stagingDistributionId, ifMatch);
        // TODO: test validations
    }

    /**
     * Update a field-level encryption configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFieldLevelEncryptionConfig20200531Test() throws ApiException {
        String id = null;
        CreateFieldLevelEncryptionConfig20200531Request createFieldLevelEncryptionConfig20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateFieldLevelEncryptionConfigResult response = api.updateFieldLevelEncryptionConfig20200531(id, createFieldLevelEncryptionConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update a field-level encryption profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFieldLevelEncryptionProfile20200531Test() throws ApiException {
        String id = null;
        CreateFieldLevelEncryptionProfile20200531Request createFieldLevelEncryptionProfile20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateFieldLevelEncryptionProfileResult response = api.updateFieldLevelEncryptionProfile20200531(id, createFieldLevelEncryptionProfile20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a CloudFront function.&lt;/p&gt; &lt;p&gt;You can update a function&#39;s code or the comment that describes the function. You cannot update a function&#39;s name.&lt;/p&gt; &lt;p&gt;To update a function, you provide the function&#39;s name and version (&lt;code&gt;ETag&lt;/code&gt; value) along with the updated function code. To get the name and version, you can use &lt;code&gt;ListFunctions&lt;/code&gt; and &lt;code&gt;DescribeFunction&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFunction20200531Test() throws ApiException {
        String name = null;
        String ifMatch = null;
        UpdateFunction20200531Request updateFunction20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFunctionResult response = api.updateFunction20200531(name, ifMatch, updateFunction20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a key group.&lt;/p&gt; &lt;p&gt;When you update a key group, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a key group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Get the current key group with &lt;code&gt;GetKeyGroup&lt;/code&gt; or &lt;code&gt;GetKeyGroupConfig&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the key group that you want to update. For example, add or remove public key IDs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateKeyGroup&lt;/code&gt; with the entire key group object, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateKeyGroup20200531Test() throws ApiException {
        String id = null;
        CreateKeyGroup20200531Request createKeyGroup20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateKeyGroupResult response = api.updateKeyGroup20200531(id, createKeyGroup20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Updates a CloudFront origin access control.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOriginAccessControl20200531Test() throws ApiException {
        String id = null;
        CreateOriginAccessControl20200531Request createOriginAccessControl20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateOriginAccessControlResult response = api.updateOriginAccessControl20200531(id, createOriginAccessControl20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an origin request policy configuration.&lt;/p&gt; &lt;p&gt;When you update an origin request policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update an origin request policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetOriginRequestPolicyConfig&lt;/code&gt; to get the current configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the fields in the origin request policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateOriginRequestPolicy&lt;/code&gt; by providing the entire origin request policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOriginRequestPolicy20200531Test() throws ApiException {
        String id = null;
        CreateOriginRequestPolicy20200531Request createOriginRequestPolicy20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateOriginRequestPolicyResult response = api.updateOriginRequestPolicy20200531(id, createOriginRequestPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update public key information. Note that the only value you can change is the comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePublicKey20200531Test() throws ApiException {
        String id = null;
        CreatePublicKey20200531Request createPublicKey20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdatePublicKeyResult response = api.updatePublicKey20200531(id, createPublicKey20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a real-time log configuration.&lt;/p&gt; &lt;p&gt;When you update a real-time log configuration, all the parameters are updated with the values provided in the request. You cannot update some parameters independent of others. To update a real-time log configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;GetRealtimeLogConfig&lt;/code&gt; to get the current real-time log configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Locally modify the parameters in the real-time log configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call this API (&lt;code&gt;UpdateRealtimeLogConfig&lt;/code&gt;) by providing the entire real-time log configuration, including the parameters that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You cannot update a real-time log configuration&#39;s &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;ARN&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRealtimeLogConfig20200531Test() throws ApiException {
        UpdateRealtimeLogConfig20200531Request updateRealtimeLogConfig20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRealtimeLogConfigResult response = api.updateRealtimeLogConfig20200531(updateRealtimeLogConfig20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a response headers policy.&lt;/p&gt; &lt;p&gt;When you update a response headers policy, the entire policy is replaced. You cannot update some policy fields independent of others. To update a response headers policy configuration:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetResponseHeadersPolicyConfig&lt;/code&gt; to get the current policy&#39;s configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Modify the fields in the response headers policy configuration that you want to update.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;UpdateResponseHeadersPolicy&lt;/code&gt;, providing the entire response headers policy configuration, including the fields that you modified and those that you didn&#39;t.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResponseHeadersPolicy20200531Test() throws ApiException {
        String id = null;
        CreateResponseHeadersPolicy20200531Request createResponseHeadersPolicy20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateResponseHeadersPolicyResult response = api.updateResponseHeadersPolicy20200531(id, createResponseHeadersPolicy20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update a streaming distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamingDistribution20200531Test() throws ApiException {
        String id = null;
        CreateStreamingDistribution20200531Request createStreamingDistribution20200531Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateStreamingDistributionResult response = api.updateStreamingDistribution20200531(id, createStreamingDistribution20200531Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

}
