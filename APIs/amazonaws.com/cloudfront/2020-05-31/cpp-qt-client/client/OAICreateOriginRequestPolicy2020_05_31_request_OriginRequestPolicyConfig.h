/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig.h
 *
 * &lt;p&gt;An origin request policy configuration.&lt;/p&gt; &lt;p&gt;This configuration determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The request body and the URL path (without the domain name) from the viewer request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The headers that CloudFront automatically includes in every origin request, including &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;User-Agent&lt;/code&gt;, and &lt;code&gt;X-Amz-Cf-Id&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CloudFront sends a request when it can&#39;t find an object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use &lt;code&gt;CachePolicy&lt;/code&gt;.&lt;/p&gt;
 */

#ifndef OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_H
#define OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_H

#include <QJsonObject>

#include "OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_CookiesConfig.h"
#include "OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_HeadersConfig.h"
#include "OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_QueryStringsConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_HeadersConfig;
class OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_CookiesConfig;
class OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_QueryStringsConfig;

class OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig : public OAIObject {
public:
    OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig();
    OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig(QString json);
    ~OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_HeadersConfig getHeadersConfig() const;
    void setHeadersConfig(const OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_HeadersConfig &headers_config);
    bool is_headers_config_Set() const;
    bool is_headers_config_Valid() const;

    OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_CookiesConfig getCookiesConfig() const;
    void setCookiesConfig(const OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_CookiesConfig &cookies_config);
    bool is_cookies_config_Set() const;
    bool is_cookies_config_Valid() const;

    OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_QueryStringsConfig getQueryStringsConfig() const;
    void setQueryStringsConfig(const OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_QueryStringsConfig &query_strings_config);
    bool is_query_strings_config_Set() const;
    bool is_query_strings_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_HeadersConfig m_headers_config;
    bool m_headers_config_isSet;
    bool m_headers_config_isValid;

    OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_CookiesConfig m_cookies_config;
    bool m_cookies_config_isSet;
    bool m_cookies_config_isValid;

    OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_QueryStringsConfig m_query_strings_config;
    bool m_query_strings_config_isSet;
    bool m_query_strings_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig)

#endif // OAICreateOriginRequestPolicy2020_05_31_request_OriginRequestPolicyConfig_H
