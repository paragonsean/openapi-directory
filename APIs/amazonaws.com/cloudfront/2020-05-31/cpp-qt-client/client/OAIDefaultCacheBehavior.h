/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDefaultCacheBehavior.h
 *
 * A complex type that describes the default cache behavior if you don&#39;t specify a &lt;code&gt;CacheBehavior&lt;/code&gt; element or if request URLs don&#39;t match any of the values of &lt;code&gt;PathPattern&lt;/code&gt; in &lt;code&gt;CacheBehavior&lt;/code&gt; elements. You must create exactly one default cache behavior.
 */

#ifndef OAIDefaultCacheBehavior_H
#define OAIDefaultCacheBehavior_H

#include <QJsonObject>

#include "OAIAllowedMethods.h"
#include "OAIDefaultCacheBehavior_ForwardedValues.h"
#include "OAIDefaultCacheBehavior_FunctionAssociations.h"
#include "OAIDefaultCacheBehavior_LambdaFunctionAssociations.h"
#include "OAIDefaultCacheBehavior_TrustedKeyGroups.h"
#include "OAIDefaultCacheBehavior_TrustedSigners.h"
#include "OAIViewerProtocolPolicy.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDefaultCacheBehavior_TrustedSigners;
class OAIDefaultCacheBehavior_TrustedKeyGroups;
class OAIAllowedMethods;
class OAIDefaultCacheBehavior_LambdaFunctionAssociations;
class OAIDefaultCacheBehavior_FunctionAssociations;
class OAIDefaultCacheBehavior_ForwardedValues;

class OAIDefaultCacheBehavior : public OAIObject {
public:
    OAIDefaultCacheBehavior();
    OAIDefaultCacheBehavior(QString json);
    ~OAIDefaultCacheBehavior() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTargetOriginId() const;
    void setTargetOriginId(const QString &target_origin_id);
    bool is_target_origin_id_Set() const;
    bool is_target_origin_id_Valid() const;

    OAIDefaultCacheBehavior_TrustedSigners getTrustedSigners() const;
    void setTrustedSigners(const OAIDefaultCacheBehavior_TrustedSigners &trusted_signers);
    bool is_trusted_signers_Set() const;
    bool is_trusted_signers_Valid() const;

    OAIDefaultCacheBehavior_TrustedKeyGroups getTrustedKeyGroups() const;
    void setTrustedKeyGroups(const OAIDefaultCacheBehavior_TrustedKeyGroups &trusted_key_groups);
    bool is_trusted_key_groups_Set() const;
    bool is_trusted_key_groups_Valid() const;

    OAIViewerProtocolPolicy getViewerProtocolPolicy() const;
    void setViewerProtocolPolicy(const OAIViewerProtocolPolicy &viewer_protocol_policy);
    bool is_viewer_protocol_policy_Set() const;
    bool is_viewer_protocol_policy_Valid() const;

    OAIAllowedMethods getAllowedMethods() const;
    void setAllowedMethods(const OAIAllowedMethods &allowed_methods);
    bool is_allowed_methods_Set() const;
    bool is_allowed_methods_Valid() const;

    bool getSmoothStreaming() const;
    void setSmoothStreaming(const bool &smooth_streaming);
    bool is_smooth_streaming_Set() const;
    bool is_smooth_streaming_Valid() const;

    bool getCompress() const;
    void setCompress(const bool &compress);
    bool is_compress_Set() const;
    bool is_compress_Valid() const;

    OAIDefaultCacheBehavior_LambdaFunctionAssociations getLambdaFunctionAssociations() const;
    void setLambdaFunctionAssociations(const OAIDefaultCacheBehavior_LambdaFunctionAssociations &lambda_function_associations);
    bool is_lambda_function_associations_Set() const;
    bool is_lambda_function_associations_Valid() const;

    OAIDefaultCacheBehavior_FunctionAssociations getFunctionAssociations() const;
    void setFunctionAssociations(const OAIDefaultCacheBehavior_FunctionAssociations &function_associations);
    bool is_function_associations_Set() const;
    bool is_function_associations_Valid() const;

    QString getFieldLevelEncryptionId() const;
    void setFieldLevelEncryptionId(const QString &field_level_encryption_id);
    bool is_field_level_encryption_id_Set() const;
    bool is_field_level_encryption_id_Valid() const;

    QString getRealtimeLogConfigArn() const;
    void setRealtimeLogConfigArn(const QString &realtime_log_config_arn);
    bool is_realtime_log_config_arn_Set() const;
    bool is_realtime_log_config_arn_Valid() const;

    QString getCachePolicyId() const;
    void setCachePolicyId(const QString &cache_policy_id);
    bool is_cache_policy_id_Set() const;
    bool is_cache_policy_id_Valid() const;

    QString getOriginRequestPolicyId() const;
    void setOriginRequestPolicyId(const QString &origin_request_policy_id);
    bool is_origin_request_policy_id_Set() const;
    bool is_origin_request_policy_id_Valid() const;

    QString getResponseHeadersPolicyId() const;
    void setResponseHeadersPolicyId(const QString &response_headers_policy_id);
    bool is_response_headers_policy_id_Set() const;
    bool is_response_headers_policy_id_Valid() const;

    OAIDefaultCacheBehavior_ForwardedValues getForwardedValues() const;
    void setForwardedValues(const OAIDefaultCacheBehavior_ForwardedValues &forwarded_values);
    bool is_forwarded_values_Set() const;
    bool is_forwarded_values_Valid() const;

    qint32 getMinTtl() const;
    void setMinTtl(const qint32 &min_ttl);
    bool is_min_ttl_Set() const;
    bool is_min_ttl_Valid() const;

    qint32 getDefaultTtl() const;
    void setDefaultTtl(const qint32 &default_ttl);
    bool is_default_ttl_Set() const;
    bool is_default_ttl_Valid() const;

    qint32 getMaxTtl() const;
    void setMaxTtl(const qint32 &max_ttl);
    bool is_max_ttl_Set() const;
    bool is_max_ttl_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_target_origin_id;
    bool m_target_origin_id_isSet;
    bool m_target_origin_id_isValid;

    OAIDefaultCacheBehavior_TrustedSigners m_trusted_signers;
    bool m_trusted_signers_isSet;
    bool m_trusted_signers_isValid;

    OAIDefaultCacheBehavior_TrustedKeyGroups m_trusted_key_groups;
    bool m_trusted_key_groups_isSet;
    bool m_trusted_key_groups_isValid;

    OAIViewerProtocolPolicy m_viewer_protocol_policy;
    bool m_viewer_protocol_policy_isSet;
    bool m_viewer_protocol_policy_isValid;

    OAIAllowedMethods m_allowed_methods;
    bool m_allowed_methods_isSet;
    bool m_allowed_methods_isValid;

    bool m_smooth_streaming;
    bool m_smooth_streaming_isSet;
    bool m_smooth_streaming_isValid;

    bool m_compress;
    bool m_compress_isSet;
    bool m_compress_isValid;

    OAIDefaultCacheBehavior_LambdaFunctionAssociations m_lambda_function_associations;
    bool m_lambda_function_associations_isSet;
    bool m_lambda_function_associations_isValid;

    OAIDefaultCacheBehavior_FunctionAssociations m_function_associations;
    bool m_function_associations_isSet;
    bool m_function_associations_isValid;

    QString m_field_level_encryption_id;
    bool m_field_level_encryption_id_isSet;
    bool m_field_level_encryption_id_isValid;

    QString m_realtime_log_config_arn;
    bool m_realtime_log_config_arn_isSet;
    bool m_realtime_log_config_arn_isValid;

    QString m_cache_policy_id;
    bool m_cache_policy_id_isSet;
    bool m_cache_policy_id_isValid;

    QString m_origin_request_policy_id;
    bool m_origin_request_policy_id_isSet;
    bool m_origin_request_policy_id_isValid;

    QString m_response_headers_policy_id;
    bool m_response_headers_policy_id_isSet;
    bool m_response_headers_policy_id_isValid;

    OAIDefaultCacheBehavior_ForwardedValues m_forwarded_values;
    bool m_forwarded_values_isSet;
    bool m_forwarded_values_isValid;

    qint32 m_min_ttl;
    bool m_min_ttl_isSet;
    bool m_min_ttl_isValid;

    qint32 m_default_ttl;
    bool m_default_ttl_isSet;
    bool m_default_ttl_isValid;

    qint32 m_max_ttl;
    bool m_max_ttl_isSet;
    bool m_max_ttl_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDefaultCacheBehavior)

#endif // OAIDefaultCacheBehavior_H
