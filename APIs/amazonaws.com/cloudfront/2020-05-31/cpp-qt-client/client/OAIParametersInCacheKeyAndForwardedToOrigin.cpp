/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParametersInCacheKeyAndForwardedToOrigin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParametersInCacheKeyAndForwardedToOrigin::OAIParametersInCacheKeyAndForwardedToOrigin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParametersInCacheKeyAndForwardedToOrigin::OAIParametersInCacheKeyAndForwardedToOrigin() {
    this->initializeModel();
}

OAIParametersInCacheKeyAndForwardedToOrigin::~OAIParametersInCacheKeyAndForwardedToOrigin() {}

void OAIParametersInCacheKeyAndForwardedToOrigin::initializeModel() {

    m_enable_accept_encoding_gzip_isSet = false;
    m_enable_accept_encoding_gzip_isValid = false;

    m_enable_accept_encoding_brotli_isSet = false;
    m_enable_accept_encoding_brotli_isValid = false;

    m_headers_config_isSet = false;
    m_headers_config_isValid = false;

    m_cookies_config_isSet = false;
    m_cookies_config_isValid = false;

    m_query_strings_config_isSet = false;
    m_query_strings_config_isValid = false;
}

void OAIParametersInCacheKeyAndForwardedToOrigin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParametersInCacheKeyAndForwardedToOrigin::fromJsonObject(QJsonObject json) {

    m_enable_accept_encoding_gzip_isValid = ::OpenAPI::fromJsonValue(m_enable_accept_encoding_gzip, json[QString("EnableAcceptEncodingGzip")]);
    m_enable_accept_encoding_gzip_isSet = !json[QString("EnableAcceptEncodingGzip")].isNull() && m_enable_accept_encoding_gzip_isValid;

    m_enable_accept_encoding_brotli_isValid = ::OpenAPI::fromJsonValue(m_enable_accept_encoding_brotli, json[QString("EnableAcceptEncodingBrotli")]);
    m_enable_accept_encoding_brotli_isSet = !json[QString("EnableAcceptEncodingBrotli")].isNull() && m_enable_accept_encoding_brotli_isValid;

    m_headers_config_isValid = ::OpenAPI::fromJsonValue(m_headers_config, json[QString("HeadersConfig")]);
    m_headers_config_isSet = !json[QString("HeadersConfig")].isNull() && m_headers_config_isValid;

    m_cookies_config_isValid = ::OpenAPI::fromJsonValue(m_cookies_config, json[QString("CookiesConfig")]);
    m_cookies_config_isSet = !json[QString("CookiesConfig")].isNull() && m_cookies_config_isValid;

    m_query_strings_config_isValid = ::OpenAPI::fromJsonValue(m_query_strings_config, json[QString("QueryStringsConfig")]);
    m_query_strings_config_isSet = !json[QString("QueryStringsConfig")].isNull() && m_query_strings_config_isValid;
}

QString OAIParametersInCacheKeyAndForwardedToOrigin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParametersInCacheKeyAndForwardedToOrigin::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_accept_encoding_gzip_isSet) {
        obj.insert(QString("EnableAcceptEncodingGzip"), ::OpenAPI::toJsonValue(m_enable_accept_encoding_gzip));
    }
    if (m_enable_accept_encoding_brotli_isSet) {
        obj.insert(QString("EnableAcceptEncodingBrotli"), ::OpenAPI::toJsonValue(m_enable_accept_encoding_brotli));
    }
    if (m_headers_config.isSet()) {
        obj.insert(QString("HeadersConfig"), ::OpenAPI::toJsonValue(m_headers_config));
    }
    if (m_cookies_config.isSet()) {
        obj.insert(QString("CookiesConfig"), ::OpenAPI::toJsonValue(m_cookies_config));
    }
    if (m_query_strings_config.isSet()) {
        obj.insert(QString("QueryStringsConfig"), ::OpenAPI::toJsonValue(m_query_strings_config));
    }
    return obj;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::getEnableAcceptEncodingGzip() const {
    return m_enable_accept_encoding_gzip;
}
void OAIParametersInCacheKeyAndForwardedToOrigin::setEnableAcceptEncodingGzip(const bool &enable_accept_encoding_gzip) {
    m_enable_accept_encoding_gzip = enable_accept_encoding_gzip;
    m_enable_accept_encoding_gzip_isSet = true;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_enable_accept_encoding_gzip_Set() const{
    return m_enable_accept_encoding_gzip_isSet;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_enable_accept_encoding_gzip_Valid() const{
    return m_enable_accept_encoding_gzip_isValid;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::getEnableAcceptEncodingBrotli() const {
    return m_enable_accept_encoding_brotli;
}
void OAIParametersInCacheKeyAndForwardedToOrigin::setEnableAcceptEncodingBrotli(const bool &enable_accept_encoding_brotli) {
    m_enable_accept_encoding_brotli = enable_accept_encoding_brotli;
    m_enable_accept_encoding_brotli_isSet = true;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_enable_accept_encoding_brotli_Set() const{
    return m_enable_accept_encoding_brotli_isSet;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_enable_accept_encoding_brotli_Valid() const{
    return m_enable_accept_encoding_brotli_isValid;
}

OAIParametersInCacheKeyAndForwardedToOrigin_HeadersConfig OAIParametersInCacheKeyAndForwardedToOrigin::getHeadersConfig() const {
    return m_headers_config;
}
void OAIParametersInCacheKeyAndForwardedToOrigin::setHeadersConfig(const OAIParametersInCacheKeyAndForwardedToOrigin_HeadersConfig &headers_config) {
    m_headers_config = headers_config;
    m_headers_config_isSet = true;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_headers_config_Set() const{
    return m_headers_config_isSet;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_headers_config_Valid() const{
    return m_headers_config_isValid;
}

OAIParametersInCacheKeyAndForwardedToOrigin_CookiesConfig OAIParametersInCacheKeyAndForwardedToOrigin::getCookiesConfig() const {
    return m_cookies_config;
}
void OAIParametersInCacheKeyAndForwardedToOrigin::setCookiesConfig(const OAIParametersInCacheKeyAndForwardedToOrigin_CookiesConfig &cookies_config) {
    m_cookies_config = cookies_config;
    m_cookies_config_isSet = true;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_cookies_config_Set() const{
    return m_cookies_config_isSet;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_cookies_config_Valid() const{
    return m_cookies_config_isValid;
}

OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig OAIParametersInCacheKeyAndForwardedToOrigin::getQueryStringsConfig() const {
    return m_query_strings_config;
}
void OAIParametersInCacheKeyAndForwardedToOrigin::setQueryStringsConfig(const OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig &query_strings_config) {
    m_query_strings_config = query_strings_config;
    m_query_strings_config_isSet = true;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_query_strings_config_Set() const{
    return m_query_strings_config_isSet;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::is_query_strings_config_Valid() const{
    return m_query_strings_config_isValid;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_accept_encoding_gzip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_accept_encoding_brotli_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookies_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_strings_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enable_accept_encoding_gzip_isValid && m_headers_config_isValid && m_cookies_config_isValid && m_query_strings_config_isValid && true;
}

} // namespace OpenAPI
