/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginAccessControl_OriginAccessControlConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOriginAccessControl_OriginAccessControlConfig::OAIOriginAccessControl_OriginAccessControlConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOriginAccessControl_OriginAccessControlConfig::OAIOriginAccessControl_OriginAccessControlConfig() {
    this->initializeModel();
}

OAIOriginAccessControl_OriginAccessControlConfig::~OAIOriginAccessControl_OriginAccessControlConfig() {}

void OAIOriginAccessControl_OriginAccessControlConfig::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_signing_protocol_isSet = false;
    m_signing_protocol_isValid = false;

    m_signing_behavior_isSet = false;
    m_signing_behavior_isValid = false;

    m_origin_access_control_origin_type_isSet = false;
    m_origin_access_control_origin_type_isValid = false;
}

void OAIOriginAccessControl_OriginAccessControlConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOriginAccessControl_OriginAccessControlConfig::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_signing_protocol_isValid = ::OpenAPI::fromJsonValue(m_signing_protocol, json[QString("SigningProtocol")]);
    m_signing_protocol_isSet = !json[QString("SigningProtocol")].isNull() && m_signing_protocol_isValid;

    m_signing_behavior_isValid = ::OpenAPI::fromJsonValue(m_signing_behavior, json[QString("SigningBehavior")]);
    m_signing_behavior_isSet = !json[QString("SigningBehavior")].isNull() && m_signing_behavior_isValid;

    m_origin_access_control_origin_type_isValid = ::OpenAPI::fromJsonValue(m_origin_access_control_origin_type, json[QString("OriginAccessControlOriginType")]);
    m_origin_access_control_origin_type_isSet = !json[QString("OriginAccessControlOriginType")].isNull() && m_origin_access_control_origin_type_isValid;
}

QString OAIOriginAccessControl_OriginAccessControlConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOriginAccessControl_OriginAccessControlConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_signing_protocol.isSet()) {
        obj.insert(QString("SigningProtocol"), ::OpenAPI::toJsonValue(m_signing_protocol));
    }
    if (m_signing_behavior.isSet()) {
        obj.insert(QString("SigningBehavior"), ::OpenAPI::toJsonValue(m_signing_behavior));
    }
    if (m_origin_access_control_origin_type.isSet()) {
        obj.insert(QString("OriginAccessControlOriginType"), ::OpenAPI::toJsonValue(m_origin_access_control_origin_type));
    }
    return obj;
}

QString OAIOriginAccessControl_OriginAccessControlConfig::getName() const {
    return m_name;
}
void OAIOriginAccessControl_OriginAccessControlConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOriginAccessControl_OriginAccessControlConfig::getDescription() const {
    return m_description;
}
void OAIOriginAccessControl_OriginAccessControlConfig::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_description_Valid() const{
    return m_description_isValid;
}

OAIOriginAccessControlSigningProtocols OAIOriginAccessControl_OriginAccessControlConfig::getSigningProtocol() const {
    return m_signing_protocol;
}
void OAIOriginAccessControl_OriginAccessControlConfig::setSigningProtocol(const OAIOriginAccessControlSigningProtocols &signing_protocol) {
    m_signing_protocol = signing_protocol;
    m_signing_protocol_isSet = true;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_signing_protocol_Set() const{
    return m_signing_protocol_isSet;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_signing_protocol_Valid() const{
    return m_signing_protocol_isValid;
}

OAIOriginAccessControlSigningBehaviors OAIOriginAccessControl_OriginAccessControlConfig::getSigningBehavior() const {
    return m_signing_behavior;
}
void OAIOriginAccessControl_OriginAccessControlConfig::setSigningBehavior(const OAIOriginAccessControlSigningBehaviors &signing_behavior) {
    m_signing_behavior = signing_behavior;
    m_signing_behavior_isSet = true;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_signing_behavior_Set() const{
    return m_signing_behavior_isSet;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_signing_behavior_Valid() const{
    return m_signing_behavior_isValid;
}

OAIOriginAccessControlOriginTypes OAIOriginAccessControl_OriginAccessControlConfig::getOriginAccessControlOriginType() const {
    return m_origin_access_control_origin_type;
}
void OAIOriginAccessControl_OriginAccessControlConfig::setOriginAccessControlOriginType(const OAIOriginAccessControlOriginTypes &origin_access_control_origin_type) {
    m_origin_access_control_origin_type = origin_access_control_origin_type;
    m_origin_access_control_origin_type_isSet = true;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_origin_access_control_origin_type_Set() const{
    return m_origin_access_control_origin_type_isSet;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::is_origin_access_control_origin_type_Valid() const{
    return m_origin_access_control_origin_type_isValid;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_access_control_origin_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOriginAccessControl_OriginAccessControlConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_signing_protocol_isValid && m_signing_behavior_isValid && m_origin_access_control_origin_type_isValid && true;
}

} // namespace OpenAPI
