/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionStickinessConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionStickinessConfig::OAISessionStickinessConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionStickinessConfig::OAISessionStickinessConfig() {
    this->initializeModel();
}

OAISessionStickinessConfig::~OAISessionStickinessConfig() {}

void OAISessionStickinessConfig::initializeModel() {

    m_idle_ttl_isSet = false;
    m_idle_ttl_isValid = false;

    m_maximum_ttl_isSet = false;
    m_maximum_ttl_isValid = false;
}

void OAISessionStickinessConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionStickinessConfig::fromJsonObject(QJsonObject json) {

    m_idle_ttl_isValid = ::OpenAPI::fromJsonValue(m_idle_ttl, json[QString("IdleTTL")]);
    m_idle_ttl_isSet = !json[QString("IdleTTL")].isNull() && m_idle_ttl_isValid;

    m_maximum_ttl_isValid = ::OpenAPI::fromJsonValue(m_maximum_ttl, json[QString("MaximumTTL")]);
    m_maximum_ttl_isSet = !json[QString("MaximumTTL")].isNull() && m_maximum_ttl_isValid;
}

QString OAISessionStickinessConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionStickinessConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_idle_ttl_isSet) {
        obj.insert(QString("IdleTTL"), ::OpenAPI::toJsonValue(m_idle_ttl));
    }
    if (m_maximum_ttl_isSet) {
        obj.insert(QString("MaximumTTL"), ::OpenAPI::toJsonValue(m_maximum_ttl));
    }
    return obj;
}

qint32 OAISessionStickinessConfig::getIdleTtl() const {
    return m_idle_ttl;
}
void OAISessionStickinessConfig::setIdleTtl(const qint32 &idle_ttl) {
    m_idle_ttl = idle_ttl;
    m_idle_ttl_isSet = true;
}

bool OAISessionStickinessConfig::is_idle_ttl_Set() const{
    return m_idle_ttl_isSet;
}

bool OAISessionStickinessConfig::is_idle_ttl_Valid() const{
    return m_idle_ttl_isValid;
}

qint32 OAISessionStickinessConfig::getMaximumTtl() const {
    return m_maximum_ttl;
}
void OAISessionStickinessConfig::setMaximumTtl(const qint32 &maximum_ttl) {
    m_maximum_ttl = maximum_ttl;
    m_maximum_ttl_isSet = true;
}

bool OAISessionStickinessConfig::is_maximum_ttl_Set() const{
    return m_maximum_ttl_isSet;
}

bool OAISessionStickinessConfig::is_maximum_ttl_Valid() const{
    return m_maximum_ttl_isValid;
}

bool OAISessionStickinessConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_idle_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionStickinessConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_idle_ttl_isValid && m_maximum_ttl_isValid && true;
}

} // namespace OpenAPI
