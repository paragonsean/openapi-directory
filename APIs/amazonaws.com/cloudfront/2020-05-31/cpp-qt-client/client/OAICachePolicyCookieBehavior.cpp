/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICachePolicyCookieBehavior.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICachePolicyCookieBehavior::OAICachePolicyCookieBehavior(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICachePolicyCookieBehavior::OAICachePolicyCookieBehavior() {
    this->initializeModel();
}

OAICachePolicyCookieBehavior::~OAICachePolicyCookieBehavior() {}

void OAICachePolicyCookieBehavior::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICachePolicyCookieBehavior::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICachePolicyCookieBehavior::fromJson(QString jsonString) {
    
    if ( jsonString.compare("none", Qt::CaseInsensitive) == 0) {
        m_value = eOAICachePolicyCookieBehavior::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("whitelist", Qt::CaseInsensitive) == 0) {
        m_value = eOAICachePolicyCookieBehavior::WHITELIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("allExcept", Qt::CaseInsensitive) == 0) {
        m_value = eOAICachePolicyCookieBehavior::ALLEXCEPT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("all", Qt::CaseInsensitive) == 0) {
        m_value = eOAICachePolicyCookieBehavior::ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICachePolicyCookieBehavior::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICachePolicyCookieBehavior::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICachePolicyCookieBehavior::NONE:
            val = "none";
            break;
        case eOAICachePolicyCookieBehavior::WHITELIST:
            val = "whitelist";
            break;
        case eOAICachePolicyCookieBehavior::ALLEXCEPT:
            val = "allExcept";
            break;
        case eOAICachePolicyCookieBehavior::ALL:
            val = "all";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICachePolicyCookieBehavior::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICachePolicyCookieBehavior::eOAICachePolicyCookieBehavior OAICachePolicyCookieBehavior::getValue() const {
    return m_value;
}

void OAICachePolicyCookieBehavior::setValue(const OAICachePolicyCookieBehavior::eOAICachePolicyCookieBehavior& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICachePolicyCookieBehavior::isSet() const {
    
    return m_value_isSet;
}

bool OAICachePolicyCookieBehavior::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
