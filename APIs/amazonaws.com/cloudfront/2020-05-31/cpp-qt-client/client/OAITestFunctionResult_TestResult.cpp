/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestFunctionResult_TestResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestFunctionResult_TestResult::OAITestFunctionResult_TestResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestFunctionResult_TestResult::OAITestFunctionResult_TestResult() {
    this->initializeModel();
}

OAITestFunctionResult_TestResult::~OAITestFunctionResult_TestResult() {}

void OAITestFunctionResult_TestResult::initializeModel() {

    m_function_summary_isSet = false;
    m_function_summary_isValid = false;

    m_compute_utilization_isSet = false;
    m_compute_utilization_isValid = false;

    m_function_execution_logs_isSet = false;
    m_function_execution_logs_isValid = false;

    m_function_error_message_isSet = false;
    m_function_error_message_isValid = false;

    m_function_output_isSet = false;
    m_function_output_isValid = false;
}

void OAITestFunctionResult_TestResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestFunctionResult_TestResult::fromJsonObject(QJsonObject json) {

    m_function_summary_isValid = ::OpenAPI::fromJsonValue(m_function_summary, json[QString("FunctionSummary")]);
    m_function_summary_isSet = !json[QString("FunctionSummary")].isNull() && m_function_summary_isValid;

    m_compute_utilization_isValid = ::OpenAPI::fromJsonValue(m_compute_utilization, json[QString("ComputeUtilization")]);
    m_compute_utilization_isSet = !json[QString("ComputeUtilization")].isNull() && m_compute_utilization_isValid;

    m_function_execution_logs_isValid = ::OpenAPI::fromJsonValue(m_function_execution_logs, json[QString("FunctionExecutionLogs")]);
    m_function_execution_logs_isSet = !json[QString("FunctionExecutionLogs")].isNull() && m_function_execution_logs_isValid;

    m_function_error_message_isValid = ::OpenAPI::fromJsonValue(m_function_error_message, json[QString("FunctionErrorMessage")]);
    m_function_error_message_isSet = !json[QString("FunctionErrorMessage")].isNull() && m_function_error_message_isValid;

    m_function_output_isValid = ::OpenAPI::fromJsonValue(m_function_output, json[QString("FunctionOutput")]);
    m_function_output_isSet = !json[QString("FunctionOutput")].isNull() && m_function_output_isValid;
}

QString OAITestFunctionResult_TestResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestFunctionResult_TestResult::asJsonObject() const {
    QJsonObject obj;
    if (m_function_summary.isSet()) {
        obj.insert(QString("FunctionSummary"), ::OpenAPI::toJsonValue(m_function_summary));
    }
    if (m_compute_utilization_isSet) {
        obj.insert(QString("ComputeUtilization"), ::OpenAPI::toJsonValue(m_compute_utilization));
    }
    if (m_function_execution_logs.isSet()) {
        obj.insert(QString("FunctionExecutionLogs"), ::OpenAPI::toJsonValue(m_function_execution_logs));
    }
    if (m_function_error_message_isSet) {
        obj.insert(QString("FunctionErrorMessage"), ::OpenAPI::toJsonValue(m_function_error_message));
    }
    if (m_function_output_isSet) {
        obj.insert(QString("FunctionOutput"), ::OpenAPI::toJsonValue(m_function_output));
    }
    return obj;
}

OAITestResult_FunctionSummary OAITestFunctionResult_TestResult::getFunctionSummary() const {
    return m_function_summary;
}
void OAITestFunctionResult_TestResult::setFunctionSummary(const OAITestResult_FunctionSummary &function_summary) {
    m_function_summary = function_summary;
    m_function_summary_isSet = true;
}

bool OAITestFunctionResult_TestResult::is_function_summary_Set() const{
    return m_function_summary_isSet;
}

bool OAITestFunctionResult_TestResult::is_function_summary_Valid() const{
    return m_function_summary_isValid;
}

QString OAITestFunctionResult_TestResult::getComputeUtilization() const {
    return m_compute_utilization;
}
void OAITestFunctionResult_TestResult::setComputeUtilization(const QString &compute_utilization) {
    m_compute_utilization = compute_utilization;
    m_compute_utilization_isSet = true;
}

bool OAITestFunctionResult_TestResult::is_compute_utilization_Set() const{
    return m_compute_utilization_isSet;
}

bool OAITestFunctionResult_TestResult::is_compute_utilization_Valid() const{
    return m_compute_utilization_isValid;
}

QList OAITestFunctionResult_TestResult::getFunctionExecutionLogs() const {
    return m_function_execution_logs;
}
void OAITestFunctionResult_TestResult::setFunctionExecutionLogs(const QList &function_execution_logs) {
    m_function_execution_logs = function_execution_logs;
    m_function_execution_logs_isSet = true;
}

bool OAITestFunctionResult_TestResult::is_function_execution_logs_Set() const{
    return m_function_execution_logs_isSet;
}

bool OAITestFunctionResult_TestResult::is_function_execution_logs_Valid() const{
    return m_function_execution_logs_isValid;
}

QString OAITestFunctionResult_TestResult::getFunctionErrorMessage() const {
    return m_function_error_message;
}
void OAITestFunctionResult_TestResult::setFunctionErrorMessage(const QString &function_error_message) {
    m_function_error_message = function_error_message;
    m_function_error_message_isSet = true;
}

bool OAITestFunctionResult_TestResult::is_function_error_message_Set() const{
    return m_function_error_message_isSet;
}

bool OAITestFunctionResult_TestResult::is_function_error_message_Valid() const{
    return m_function_error_message_isValid;
}

QString OAITestFunctionResult_TestResult::getFunctionOutput() const {
    return m_function_output;
}
void OAITestFunctionResult_TestResult::setFunctionOutput(const QString &function_output) {
    m_function_output = function_output;
    m_function_output_isSet = true;
}

bool OAITestFunctionResult_TestResult::is_function_output_Set() const{
    return m_function_output_isSet;
}

bool OAITestFunctionResult_TestResult::is_function_output_Valid() const{
    return m_function_output_isValid;
}

bool OAITestFunctionResult_TestResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_execution_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_output_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestFunctionResult_TestResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
