/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig() {
    this->initializeModel();
}

OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::~OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig() {}

void OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::initializeModel() {

    m_query_string_behavior_isSet = false;
    m_query_string_behavior_isValid = false;

    m_query_strings_isSet = false;
    m_query_strings_isValid = false;
}

void OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::fromJsonObject(QJsonObject json) {

    m_query_string_behavior_isValid = ::OpenAPI::fromJsonValue(m_query_string_behavior, json[QString("QueryStringBehavior")]);
    m_query_string_behavior_isSet = !json[QString("QueryStringBehavior")].isNull() && m_query_string_behavior_isValid;

    m_query_strings_isValid = ::OpenAPI::fromJsonValue(m_query_strings, json[QString("QueryStrings")]);
    m_query_strings_isSet = !json[QString("QueryStrings")].isNull() && m_query_strings_isValid;
}

QString OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_query_string_behavior.isSet()) {
        obj.insert(QString("QueryStringBehavior"), ::OpenAPI::toJsonValue(m_query_string_behavior));
    }
    if (m_query_strings.isSet()) {
        obj.insert(QString("QueryStrings"), ::OpenAPI::toJsonValue(m_query_strings));
    }
    return obj;
}

OAICachePolicyQueryStringBehavior OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::getQueryStringBehavior() const {
    return m_query_string_behavior;
}
void OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::setQueryStringBehavior(const OAICachePolicyQueryStringBehavior &query_string_behavior) {
    m_query_string_behavior = query_string_behavior;
    m_query_string_behavior_isSet = true;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::is_query_string_behavior_Set() const{
    return m_query_string_behavior_isSet;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::is_query_string_behavior_Valid() const{
    return m_query_string_behavior_isValid;
}

OAICachePolicyQueryStringsConfig_QueryStrings OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::getQueryStrings() const {
    return m_query_strings;
}
void OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::setQueryStrings(const OAICachePolicyQueryStringsConfig_QueryStrings &query_strings) {
    m_query_strings = query_strings;
    m_query_strings_isSet = true;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::is_query_strings_Set() const{
    return m_query_strings_isSet;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::is_query_strings_Valid() const{
    return m_query_strings_isValid;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_string_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_strings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_string_behavior_isValid && true;
}

} // namespace OpenAPI
