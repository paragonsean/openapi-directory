/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginRequestPolicyList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOriginRequestPolicyList::OAIOriginRequestPolicyList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOriginRequestPolicyList::OAIOriginRequestPolicyList() {
    this->initializeModel();
}

OAIOriginRequestPolicyList::~OAIOriginRequestPolicyList() {}

void OAIOriginRequestPolicyList::initializeModel() {

    m_next_marker_isSet = false;
    m_next_marker_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIOriginRequestPolicyList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOriginRequestPolicyList::fromJsonObject(QJsonObject json) {

    m_next_marker_isValid = ::OpenAPI::fromJsonValue(m_next_marker, json[QString("NextMarker")]);
    m_next_marker_isSet = !json[QString("NextMarker")].isNull() && m_next_marker_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;
}

QString OAIOriginRequestPolicyList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOriginRequestPolicyList::asJsonObject() const {
    QJsonObject obj;
    if (m_next_marker_isSet) {
        obj.insert(QString("NextMarker"), ::OpenAPI::toJsonValue(m_next_marker));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

QString OAIOriginRequestPolicyList::getNextMarker() const {
    return m_next_marker;
}
void OAIOriginRequestPolicyList::setNextMarker(const QString &next_marker) {
    m_next_marker = next_marker;
    m_next_marker_isSet = true;
}

bool OAIOriginRequestPolicyList::is_next_marker_Set() const{
    return m_next_marker_isSet;
}

bool OAIOriginRequestPolicyList::is_next_marker_Valid() const{
    return m_next_marker_isValid;
}

qint32 OAIOriginRequestPolicyList::getMaxItems() const {
    return m_max_items;
}
void OAIOriginRequestPolicyList::setMaxItems(const qint32 &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIOriginRequestPolicyList::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIOriginRequestPolicyList::is_max_items_Valid() const{
    return m_max_items_isValid;
}

qint32 OAIOriginRequestPolicyList::getQuantity() const {
    return m_quantity;
}
void OAIOriginRequestPolicyList::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOriginRequestPolicyList::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOriginRequestPolicyList::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QList OAIOriginRequestPolicyList::getItems() const {
    return m_items;
}
void OAIOriginRequestPolicyList::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOriginRequestPolicyList::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOriginRequestPolicyList::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIOriginRequestPolicyList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOriginRequestPolicyList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_items_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
