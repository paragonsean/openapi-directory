/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCachePolicyResult_CachePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCachePolicyResult_CachePolicy::OAIGetCachePolicyResult_CachePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCachePolicyResult_CachePolicy::OAIGetCachePolicyResult_CachePolicy() {
    this->initializeModel();
}

OAIGetCachePolicyResult_CachePolicy::~OAIGetCachePolicyResult_CachePolicy() {}

void OAIGetCachePolicyResult_CachePolicy::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_cache_policy_config_isSet = false;
    m_cache_policy_config_isValid = false;
}

void OAIGetCachePolicyResult_CachePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCachePolicyResult_CachePolicy::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_cache_policy_config_isValid = ::OpenAPI::fromJsonValue(m_cache_policy_config, json[QString("CachePolicyConfig")]);
    m_cache_policy_config_isSet = !json[QString("CachePolicyConfig")].isNull() && m_cache_policy_config_isValid;
}

QString OAIGetCachePolicyResult_CachePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCachePolicyResult_CachePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_cache_policy_config.isSet()) {
        obj.insert(QString("CachePolicyConfig"), ::OpenAPI::toJsonValue(m_cache_policy_config));
    }
    return obj;
}

QString OAIGetCachePolicyResult_CachePolicy::getId() const {
    return m_id;
}
void OAIGetCachePolicyResult_CachePolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetCachePolicyResult_CachePolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetCachePolicyResult_CachePolicy::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGetCachePolicyResult_CachePolicy::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIGetCachePolicyResult_CachePolicy::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIGetCachePolicyResult_CachePolicy::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIGetCachePolicyResult_CachePolicy::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIGetCachePolicyConfigResult_CachePolicyConfig OAIGetCachePolicyResult_CachePolicy::getCachePolicyConfig() const {
    return m_cache_policy_config;
}
void OAIGetCachePolicyResult_CachePolicy::setCachePolicyConfig(const OAIGetCachePolicyConfigResult_CachePolicyConfig &cache_policy_config) {
    m_cache_policy_config = cache_policy_config;
    m_cache_policy_config_isSet = true;
}

bool OAIGetCachePolicyResult_CachePolicy::is_cache_policy_config_Set() const{
    return m_cache_policy_config_isSet;
}

bool OAIGetCachePolicyResult_CachePolicy::is_cache_policy_config_Valid() const{
    return m_cache_policy_config_isValid;
}

bool OAIGetCachePolicyResult_CachePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_policy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCachePolicyResult_CachePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_last_modified_time_isValid && m_cache_policy_config_isValid && true;
}

} // namespace OpenAPI
