/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFunction2020_05_31_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFunction2020_05_31_request::OAICreateFunction2020_05_31_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFunction2020_05_31_request::OAICreateFunction2020_05_31_request() {
    this->initializeModel();
}

OAICreateFunction2020_05_31_request::~OAICreateFunction2020_05_31_request() {}

void OAICreateFunction2020_05_31_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_function_config_isSet = false;
    m_function_config_isValid = false;

    m_function_code_isSet = false;
    m_function_code_isValid = false;
}

void OAICreateFunction2020_05_31_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFunction2020_05_31_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_function_config_isValid = ::OpenAPI::fromJsonValue(m_function_config, json[QString("FunctionConfig")]);
    m_function_config_isSet = !json[QString("FunctionConfig")].isNull() && m_function_config_isValid;

    m_function_code_isValid = ::OpenAPI::fromJsonValue(m_function_code, json[QString("FunctionCode")]);
    m_function_code_isSet = !json[QString("FunctionCode")].isNull() && m_function_code_isValid;
}

QString OAICreateFunction2020_05_31_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFunction2020_05_31_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_function_config.isSet()) {
        obj.insert(QString("FunctionConfig"), ::OpenAPI::toJsonValue(m_function_config));
    }
    if (m_function_code_isSet) {
        obj.insert(QString("FunctionCode"), ::OpenAPI::toJsonValue(m_function_code));
    }
    return obj;
}

QString OAICreateFunction2020_05_31_request::getName() const {
    return m_name;
}
void OAICreateFunction2020_05_31_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFunction2020_05_31_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFunction2020_05_31_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateFunction2020_05_31_request_FunctionConfig OAICreateFunction2020_05_31_request::getFunctionConfig() const {
    return m_function_config;
}
void OAICreateFunction2020_05_31_request::setFunctionConfig(const OAICreateFunction2020_05_31_request_FunctionConfig &function_config) {
    m_function_config = function_config;
    m_function_config_isSet = true;
}

bool OAICreateFunction2020_05_31_request::is_function_config_Set() const{
    return m_function_config_isSet;
}

bool OAICreateFunction2020_05_31_request::is_function_config_Valid() const{
    return m_function_config_isValid;
}

QString OAICreateFunction2020_05_31_request::getFunctionCode() const {
    return m_function_code;
}
void OAICreateFunction2020_05_31_request::setFunctionCode(const QString &function_code) {
    m_function_code = function_code;
    m_function_code_isSet = true;
}

bool OAICreateFunction2020_05_31_request::is_function_code_Set() const{
    return m_function_code_isSet;
}

bool OAICreateFunction2020_05_31_request::is_function_code_Valid() const{
    return m_function_code_isValid;
}

bool OAICreateFunction2020_05_31_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFunction2020_05_31_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_function_config_isValid && m_function_code_isValid && true;
}

} // namespace OpenAPI
