/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRealtimeLogConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRealtimeLogConfigRequest::OAICreateRealtimeLogConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRealtimeLogConfigRequest::OAICreateRealtimeLogConfigRequest() {
    this->initializeModel();
}

OAICreateRealtimeLogConfigRequest::~OAICreateRealtimeLogConfigRequest() {}

void OAICreateRealtimeLogConfigRequest::initializeModel() {

    m_end_points_isSet = false;
    m_end_points_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sampling_rate_isSet = false;
    m_sampling_rate_isValid = false;
}

void OAICreateRealtimeLogConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRealtimeLogConfigRequest::fromJsonObject(QJsonObject json) {

    m_end_points_isValid = ::OpenAPI::fromJsonValue(m_end_points, json[QString("EndPoints")]);
    m_end_points_isSet = !json[QString("EndPoints")].isNull() && m_end_points_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("Fields")]);
    m_fields_isSet = !json[QString("Fields")].isNull() && m_fields_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_sampling_rate_isValid = ::OpenAPI::fromJsonValue(m_sampling_rate, json[QString("SamplingRate")]);
    m_sampling_rate_isSet = !json[QString("SamplingRate")].isNull() && m_sampling_rate_isValid;
}

QString OAICreateRealtimeLogConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRealtimeLogConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_end_points.isSet()) {
        obj.insert(QString("EndPoints"), ::OpenAPI::toJsonValue(m_end_points));
    }
    if (m_fields.isSet()) {
        obj.insert(QString("Fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sampling_rate_isSet) {
        obj.insert(QString("SamplingRate"), ::OpenAPI::toJsonValue(m_sampling_rate));
    }
    return obj;
}

QList OAICreateRealtimeLogConfigRequest::getEndPoints() const {
    return m_end_points;
}
void OAICreateRealtimeLogConfigRequest::setEndPoints(const QList &end_points) {
    m_end_points = end_points;
    m_end_points_isSet = true;
}

bool OAICreateRealtimeLogConfigRequest::is_end_points_Set() const{
    return m_end_points_isSet;
}

bool OAICreateRealtimeLogConfigRequest::is_end_points_Valid() const{
    return m_end_points_isValid;
}

QList OAICreateRealtimeLogConfigRequest::getFields() const {
    return m_fields;
}
void OAICreateRealtimeLogConfigRequest::setFields(const QList &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAICreateRealtimeLogConfigRequest::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAICreateRealtimeLogConfigRequest::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAICreateRealtimeLogConfigRequest::getName() const {
    return m_name;
}
void OAICreateRealtimeLogConfigRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRealtimeLogConfigRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRealtimeLogConfigRequest::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICreateRealtimeLogConfigRequest::getSamplingRate() const {
    return m_sampling_rate;
}
void OAICreateRealtimeLogConfigRequest::setSamplingRate(const qint32 &sampling_rate) {
    m_sampling_rate = sampling_rate;
    m_sampling_rate_isSet = true;
}

bool OAICreateRealtimeLogConfigRequest::is_sampling_rate_Set() const{
    return m_sampling_rate_isSet;
}

bool OAICreateRealtimeLogConfigRequest::is_sampling_rate_Valid() const{
    return m_sampling_rate_isValid;
}

bool OAICreateRealtimeLogConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_points.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRealtimeLogConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_points_isValid && m_fields_isValid && m_name_isValid && m_sampling_rate_isValid && true;
}

} // namespace OpenAPI
