/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConflictingAliases_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConflictingAliases_inner::OAIConflictingAliases_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConflictingAliases_inner::OAIConflictingAliases_inner() {
    this->initializeModel();
}

OAIConflictingAliases_inner::~OAIConflictingAliases_inner() {}

void OAIConflictingAliases_inner::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_distribution_id_isSet = false;
    m_distribution_id_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;
}

void OAIConflictingAliases_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConflictingAliases_inner::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_distribution_id_isValid = ::OpenAPI::fromJsonValue(m_distribution_id, json[QString("DistributionId")]);
    m_distribution_id_isSet = !json[QString("DistributionId")].isNull() && m_distribution_id_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;
}

QString OAIConflictingAliases_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConflictingAliases_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_distribution_id_isSet) {
        obj.insert(QString("DistributionId"), ::OpenAPI::toJsonValue(m_distribution_id));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    return obj;
}

QString OAIConflictingAliases_inner::getAlias() const {
    return m_alias;
}
void OAIConflictingAliases_inner::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIConflictingAliases_inner::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIConflictingAliases_inner::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIConflictingAliases_inner::getDistributionId() const {
    return m_distribution_id;
}
void OAIConflictingAliases_inner::setDistributionId(const QString &distribution_id) {
    m_distribution_id = distribution_id;
    m_distribution_id_isSet = true;
}

bool OAIConflictingAliases_inner::is_distribution_id_Set() const{
    return m_distribution_id_isSet;
}

bool OAIConflictingAliases_inner::is_distribution_id_Valid() const{
    return m_distribution_id_isValid;
}

QString OAIConflictingAliases_inner::getAccountId() const {
    return m_account_id;
}
void OAIConflictingAliases_inner::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIConflictingAliases_inner::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIConflictingAliases_inner::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIConflictingAliases_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConflictingAliases_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
