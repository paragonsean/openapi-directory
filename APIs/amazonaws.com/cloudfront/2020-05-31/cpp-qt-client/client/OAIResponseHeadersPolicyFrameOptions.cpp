/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseHeadersPolicyFrameOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseHeadersPolicyFrameOptions::OAIResponseHeadersPolicyFrameOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseHeadersPolicyFrameOptions::OAIResponseHeadersPolicyFrameOptions() {
    this->initializeModel();
}

OAIResponseHeadersPolicyFrameOptions::~OAIResponseHeadersPolicyFrameOptions() {}

void OAIResponseHeadersPolicyFrameOptions::initializeModel() {

    m_override_isSet = false;
    m_override_isValid = false;

    m_frame_option_isSet = false;
    m_frame_option_isValid = false;
}

void OAIResponseHeadersPolicyFrameOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseHeadersPolicyFrameOptions::fromJsonObject(QJsonObject json) {

    m_override_isValid = ::OpenAPI::fromJsonValue(m_override, json[QString("Override")]);
    m_override_isSet = !json[QString("Override")].isNull() && m_override_isValid;

    m_frame_option_isValid = ::OpenAPI::fromJsonValue(m_frame_option, json[QString("FrameOption")]);
    m_frame_option_isSet = !json[QString("FrameOption")].isNull() && m_frame_option_isValid;
}

QString OAIResponseHeadersPolicyFrameOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseHeadersPolicyFrameOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_override_isSet) {
        obj.insert(QString("Override"), ::OpenAPI::toJsonValue(m_override));
    }
    if (m_frame_option.isSet()) {
        obj.insert(QString("FrameOption"), ::OpenAPI::toJsonValue(m_frame_option));
    }
    return obj;
}

bool OAIResponseHeadersPolicyFrameOptions::getOverride() const {
    return m_override;
}
void OAIResponseHeadersPolicyFrameOptions::setOverride(const bool &override) {
    m_override = override;
    m_override_isSet = true;
}

bool OAIResponseHeadersPolicyFrameOptions::is_override_Set() const{
    return m_override_isSet;
}

bool OAIResponseHeadersPolicyFrameOptions::is_override_Valid() const{
    return m_override_isValid;
}

OAIFrameOptionsList OAIResponseHeadersPolicyFrameOptions::getFrameOption() const {
    return m_frame_option;
}
void OAIResponseHeadersPolicyFrameOptions::setFrameOption(const OAIFrameOptionsList &frame_option) {
    m_frame_option = frame_option;
    m_frame_option_isSet = true;
}

bool OAIResponseHeadersPolicyFrameOptions::is_frame_option_Set() const{
    return m_frame_option_isSet;
}

bool OAIResponseHeadersPolicyFrameOptions::is_frame_option_Valid() const{
    return m_frame_option_isValid;
}

bool OAIResponseHeadersPolicyFrameOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseHeadersPolicyFrameOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_override_isValid && m_frame_option_isValid && true;
}

} // namespace OpenAPI
