/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionAssociationList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionAssociationList_inner::OAIFunctionAssociationList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionAssociationList_inner::OAIFunctionAssociationList_inner() {
    this->initializeModel();
}

OAIFunctionAssociationList_inner::~OAIFunctionAssociationList_inner() {}

void OAIFunctionAssociationList_inner::initializeModel() {

    m_function_arn_isSet = false;
    m_function_arn_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;
}

void OAIFunctionAssociationList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionAssociationList_inner::fromJsonObject(QJsonObject json) {

    m_function_arn_isValid = ::OpenAPI::fromJsonValue(m_function_arn, json[QString("FunctionARN")]);
    m_function_arn_isSet = !json[QString("FunctionARN")].isNull() && m_function_arn_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("EventType")]);
    m_event_type_isSet = !json[QString("EventType")].isNull() && m_event_type_isValid;
}

QString OAIFunctionAssociationList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionAssociationList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_function_arn_isSet) {
        obj.insert(QString("FunctionARN"), ::OpenAPI::toJsonValue(m_function_arn));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("EventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    return obj;
}

QString OAIFunctionAssociationList_inner::getFunctionArn() const {
    return m_function_arn;
}
void OAIFunctionAssociationList_inner::setFunctionArn(const QString &function_arn) {
    m_function_arn = function_arn;
    m_function_arn_isSet = true;
}

bool OAIFunctionAssociationList_inner::is_function_arn_Set() const{
    return m_function_arn_isSet;
}

bool OAIFunctionAssociationList_inner::is_function_arn_Valid() const{
    return m_function_arn_isValid;
}

OAIEventType OAIFunctionAssociationList_inner::getEventType() const {
    return m_event_type;
}
void OAIFunctionAssociationList_inner::setEventType(const OAIEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIFunctionAssociationList_inner::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIFunctionAssociationList_inner::is_event_type_Valid() const{
    return m_event_type_isValid;
}

bool OAIFunctionAssociationList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionAssociationList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_function_arn_isValid && m_event_type_isValid && true;
}

} // namespace OpenAPI
