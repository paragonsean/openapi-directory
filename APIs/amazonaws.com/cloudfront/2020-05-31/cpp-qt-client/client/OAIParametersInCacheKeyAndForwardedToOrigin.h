/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParametersInCacheKeyAndForwardedToOrigin.h
 *
 * &lt;p&gt;This object determines the values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.&lt;/p&gt; &lt;p&gt;The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can&#39;t find an object in its cache that matches the request&#39;s cache key. If you want to send values to the origin but &lt;i&gt;not&lt;/i&gt; include them in the cache key, use &lt;code&gt;OriginRequestPolicy&lt;/code&gt;.&lt;/p&gt;
 */

#ifndef OAIParametersInCacheKeyAndForwardedToOrigin_H
#define OAIParametersInCacheKeyAndForwardedToOrigin_H

#include <QJsonObject>

#include "OAIParametersInCacheKeyAndForwardedToOrigin_CookiesConfig.h"
#include "OAIParametersInCacheKeyAndForwardedToOrigin_HeadersConfig.h"
#include "OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIParametersInCacheKeyAndForwardedToOrigin_HeadersConfig;
class OAIParametersInCacheKeyAndForwardedToOrigin_CookiesConfig;
class OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig;

class OAIParametersInCacheKeyAndForwardedToOrigin : public OAIObject {
public:
    OAIParametersInCacheKeyAndForwardedToOrigin();
    OAIParametersInCacheKeyAndForwardedToOrigin(QString json);
    ~OAIParametersInCacheKeyAndForwardedToOrigin() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getEnableAcceptEncodingGzip() const;
    void setEnableAcceptEncodingGzip(const bool &enable_accept_encoding_gzip);
    bool is_enable_accept_encoding_gzip_Set() const;
    bool is_enable_accept_encoding_gzip_Valid() const;

    bool getEnableAcceptEncodingBrotli() const;
    void setEnableAcceptEncodingBrotli(const bool &enable_accept_encoding_brotli);
    bool is_enable_accept_encoding_brotli_Set() const;
    bool is_enable_accept_encoding_brotli_Valid() const;

    OAIParametersInCacheKeyAndForwardedToOrigin_HeadersConfig getHeadersConfig() const;
    void setHeadersConfig(const OAIParametersInCacheKeyAndForwardedToOrigin_HeadersConfig &headers_config);
    bool is_headers_config_Set() const;
    bool is_headers_config_Valid() const;

    OAIParametersInCacheKeyAndForwardedToOrigin_CookiesConfig getCookiesConfig() const;
    void setCookiesConfig(const OAIParametersInCacheKeyAndForwardedToOrigin_CookiesConfig &cookies_config);
    bool is_cookies_config_Set() const;
    bool is_cookies_config_Valid() const;

    OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig getQueryStringsConfig() const;
    void setQueryStringsConfig(const OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig &query_strings_config);
    bool is_query_strings_config_Set() const;
    bool is_query_strings_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable_accept_encoding_gzip;
    bool m_enable_accept_encoding_gzip_isSet;
    bool m_enable_accept_encoding_gzip_isValid;

    bool m_enable_accept_encoding_brotli;
    bool m_enable_accept_encoding_brotli_isSet;
    bool m_enable_accept_encoding_brotli_isValid;

    OAIParametersInCacheKeyAndForwardedToOrigin_HeadersConfig m_headers_config;
    bool m_headers_config_isSet;
    bool m_headers_config_isValid;

    OAIParametersInCacheKeyAndForwardedToOrigin_CookiesConfig m_cookies_config;
    bool m_cookies_config_isSet;
    bool m_cookies_config_isValid;

    OAIParametersInCacheKeyAndForwardedToOrigin_QueryStringsConfig m_query_strings_config;
    bool m_query_strings_config_isSet;
    bool m_query_strings_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParametersInCacheKeyAndForwardedToOrigin)

#endif // OAIParametersInCacheKeyAndForwardedToOrigin_H
