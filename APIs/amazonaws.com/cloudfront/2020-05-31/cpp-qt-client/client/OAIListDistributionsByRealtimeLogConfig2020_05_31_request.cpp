/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDistributionsByRealtimeLogConfig2020_05_31_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDistributionsByRealtimeLogConfig2020_05_31_request::OAIListDistributionsByRealtimeLogConfig2020_05_31_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDistributionsByRealtimeLogConfig2020_05_31_request::OAIListDistributionsByRealtimeLogConfig2020_05_31_request() {
    this->initializeModel();
}

OAIListDistributionsByRealtimeLogConfig2020_05_31_request::~OAIListDistributionsByRealtimeLogConfig2020_05_31_request() {}

void OAIListDistributionsByRealtimeLogConfig2020_05_31_request::initializeModel() {

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;

    m_realtime_log_config_name_isSet = false;
    m_realtime_log_config_name_isValid = false;

    m_realtime_log_config_arn_isSet = false;
    m_realtime_log_config_arn_isValid = false;
}

void OAIListDistributionsByRealtimeLogConfig2020_05_31_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDistributionsByRealtimeLogConfig2020_05_31_request::fromJsonObject(QJsonObject json) {

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;

    m_realtime_log_config_name_isValid = ::OpenAPI::fromJsonValue(m_realtime_log_config_name, json[QString("RealtimeLogConfigName")]);
    m_realtime_log_config_name_isSet = !json[QString("RealtimeLogConfigName")].isNull() && m_realtime_log_config_name_isValid;

    m_realtime_log_config_arn_isValid = ::OpenAPI::fromJsonValue(m_realtime_log_config_arn, json[QString("RealtimeLogConfigArn")]);
    m_realtime_log_config_arn_isSet = !json[QString("RealtimeLogConfigArn")].isNull() && m_realtime_log_config_arn_isValid;
}

QString OAIListDistributionsByRealtimeLogConfig2020_05_31_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDistributionsByRealtimeLogConfig2020_05_31_request::asJsonObject() const {
    QJsonObject obj;
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    if (m_realtime_log_config_name_isSet) {
        obj.insert(QString("RealtimeLogConfigName"), ::OpenAPI::toJsonValue(m_realtime_log_config_name));
    }
    if (m_realtime_log_config_arn_isSet) {
        obj.insert(QString("RealtimeLogConfigArn"), ::OpenAPI::toJsonValue(m_realtime_log_config_arn));
    }
    return obj;
}

QString OAIListDistributionsByRealtimeLogConfig2020_05_31_request::getMarker() const {
    return m_marker;
}
void OAIListDistributionsByRealtimeLogConfig2020_05_31_request::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::is_marker_Valid() const{
    return m_marker_isValid;
}

QString OAIListDistributionsByRealtimeLogConfig2020_05_31_request::getMaxItems() const {
    return m_max_items;
}
void OAIListDistributionsByRealtimeLogConfig2020_05_31_request::setMaxItems(const QString &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::is_max_items_Valid() const{
    return m_max_items_isValid;
}

QString OAIListDistributionsByRealtimeLogConfig2020_05_31_request::getRealtimeLogConfigName() const {
    return m_realtime_log_config_name;
}
void OAIListDistributionsByRealtimeLogConfig2020_05_31_request::setRealtimeLogConfigName(const QString &realtime_log_config_name) {
    m_realtime_log_config_name = realtime_log_config_name;
    m_realtime_log_config_name_isSet = true;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::is_realtime_log_config_name_Set() const{
    return m_realtime_log_config_name_isSet;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::is_realtime_log_config_name_Valid() const{
    return m_realtime_log_config_name_isValid;
}

QString OAIListDistributionsByRealtimeLogConfig2020_05_31_request::getRealtimeLogConfigArn() const {
    return m_realtime_log_config_arn;
}
void OAIListDistributionsByRealtimeLogConfig2020_05_31_request::setRealtimeLogConfigArn(const QString &realtime_log_config_arn) {
    m_realtime_log_config_arn = realtime_log_config_arn;
    m_realtime_log_config_arn_isSet = true;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::is_realtime_log_config_arn_Set() const{
    return m_realtime_log_config_arn_isSet;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::is_realtime_log_config_arn_Valid() const{
    return m_realtime_log_config_arn_isValid;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realtime_log_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realtime_log_config_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDistributionsByRealtimeLogConfig2020_05_31_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
