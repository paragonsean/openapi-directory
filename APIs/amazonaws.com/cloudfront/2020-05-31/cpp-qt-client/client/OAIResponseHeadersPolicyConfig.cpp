/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseHeadersPolicyConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseHeadersPolicyConfig::OAIResponseHeadersPolicyConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseHeadersPolicyConfig::OAIResponseHeadersPolicyConfig() {
    this->initializeModel();
}

OAIResponseHeadersPolicyConfig::~OAIResponseHeadersPolicyConfig() {}

void OAIResponseHeadersPolicyConfig::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_cors_config_isSet = false;
    m_cors_config_isValid = false;

    m_security_headers_config_isSet = false;
    m_security_headers_config_isValid = false;

    m_server_timing_headers_config_isSet = false;
    m_server_timing_headers_config_isValid = false;

    m_custom_headers_config_isSet = false;
    m_custom_headers_config_isValid = false;

    m_remove_headers_config_isSet = false;
    m_remove_headers_config_isValid = false;
}

void OAIResponseHeadersPolicyConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseHeadersPolicyConfig::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_cors_config_isValid = ::OpenAPI::fromJsonValue(m_cors_config, json[QString("CorsConfig")]);
    m_cors_config_isSet = !json[QString("CorsConfig")].isNull() && m_cors_config_isValid;

    m_security_headers_config_isValid = ::OpenAPI::fromJsonValue(m_security_headers_config, json[QString("SecurityHeadersConfig")]);
    m_security_headers_config_isSet = !json[QString("SecurityHeadersConfig")].isNull() && m_security_headers_config_isValid;

    m_server_timing_headers_config_isValid = ::OpenAPI::fromJsonValue(m_server_timing_headers_config, json[QString("ServerTimingHeadersConfig")]);
    m_server_timing_headers_config_isSet = !json[QString("ServerTimingHeadersConfig")].isNull() && m_server_timing_headers_config_isValid;

    m_custom_headers_config_isValid = ::OpenAPI::fromJsonValue(m_custom_headers_config, json[QString("CustomHeadersConfig")]);
    m_custom_headers_config_isSet = !json[QString("CustomHeadersConfig")].isNull() && m_custom_headers_config_isValid;

    m_remove_headers_config_isValid = ::OpenAPI::fromJsonValue(m_remove_headers_config, json[QString("RemoveHeadersConfig")]);
    m_remove_headers_config_isSet = !json[QString("RemoveHeadersConfig")].isNull() && m_remove_headers_config_isValid;
}

QString OAIResponseHeadersPolicyConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseHeadersPolicyConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_cors_config.isSet()) {
        obj.insert(QString("CorsConfig"), ::OpenAPI::toJsonValue(m_cors_config));
    }
    if (m_security_headers_config.isSet()) {
        obj.insert(QString("SecurityHeadersConfig"), ::OpenAPI::toJsonValue(m_security_headers_config));
    }
    if (m_server_timing_headers_config.isSet()) {
        obj.insert(QString("ServerTimingHeadersConfig"), ::OpenAPI::toJsonValue(m_server_timing_headers_config));
    }
    if (m_custom_headers_config.isSet()) {
        obj.insert(QString("CustomHeadersConfig"), ::OpenAPI::toJsonValue(m_custom_headers_config));
    }
    if (m_remove_headers_config.isSet()) {
        obj.insert(QString("RemoveHeadersConfig"), ::OpenAPI::toJsonValue(m_remove_headers_config));
    }
    return obj;
}

QString OAIResponseHeadersPolicyConfig::getComment() const {
    return m_comment;
}
void OAIResponseHeadersPolicyConfig::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIResponseHeadersPolicyConfig::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIResponseHeadersPolicyConfig::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIResponseHeadersPolicyConfig::getName() const {
    return m_name;
}
void OAIResponseHeadersPolicyConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResponseHeadersPolicyConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResponseHeadersPolicyConfig::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig OAIResponseHeadersPolicyConfig::getCorsConfig() const {
    return m_cors_config;
}
void OAIResponseHeadersPolicyConfig::setCorsConfig(const OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig &cors_config) {
    m_cors_config = cors_config;
    m_cors_config_isSet = true;
}

bool OAIResponseHeadersPolicyConfig::is_cors_config_Set() const{
    return m_cors_config_isSet;
}

bool OAIResponseHeadersPolicyConfig::is_cors_config_Valid() const{
    return m_cors_config_isValid;
}

OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_SecurityHeadersConfig OAIResponseHeadersPolicyConfig::getSecurityHeadersConfig() const {
    return m_security_headers_config;
}
void OAIResponseHeadersPolicyConfig::setSecurityHeadersConfig(const OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_SecurityHeadersConfig &security_headers_config) {
    m_security_headers_config = security_headers_config;
    m_security_headers_config_isSet = true;
}

bool OAIResponseHeadersPolicyConfig::is_security_headers_config_Set() const{
    return m_security_headers_config_isSet;
}

bool OAIResponseHeadersPolicyConfig::is_security_headers_config_Valid() const{
    return m_security_headers_config_isValid;
}

OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_ServerTimingHeadersConfig OAIResponseHeadersPolicyConfig::getServerTimingHeadersConfig() const {
    return m_server_timing_headers_config;
}
void OAIResponseHeadersPolicyConfig::setServerTimingHeadersConfig(const OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_ServerTimingHeadersConfig &server_timing_headers_config) {
    m_server_timing_headers_config = server_timing_headers_config;
    m_server_timing_headers_config_isSet = true;
}

bool OAIResponseHeadersPolicyConfig::is_server_timing_headers_config_Set() const{
    return m_server_timing_headers_config_isSet;
}

bool OAIResponseHeadersPolicyConfig::is_server_timing_headers_config_Valid() const{
    return m_server_timing_headers_config_isValid;
}

OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CustomHeadersConfig OAIResponseHeadersPolicyConfig::getCustomHeadersConfig() const {
    return m_custom_headers_config;
}
void OAIResponseHeadersPolicyConfig::setCustomHeadersConfig(const OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CustomHeadersConfig &custom_headers_config) {
    m_custom_headers_config = custom_headers_config;
    m_custom_headers_config_isSet = true;
}

bool OAIResponseHeadersPolicyConfig::is_custom_headers_config_Set() const{
    return m_custom_headers_config_isSet;
}

bool OAIResponseHeadersPolicyConfig::is_custom_headers_config_Valid() const{
    return m_custom_headers_config_isValid;
}

OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_RemoveHeadersConfig OAIResponseHeadersPolicyConfig::getRemoveHeadersConfig() const {
    return m_remove_headers_config;
}
void OAIResponseHeadersPolicyConfig::setRemoveHeadersConfig(const OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_RemoveHeadersConfig &remove_headers_config) {
    m_remove_headers_config = remove_headers_config;
    m_remove_headers_config_isSet = true;
}

bool OAIResponseHeadersPolicyConfig::is_remove_headers_config_Set() const{
    return m_remove_headers_config_isSet;
}

bool OAIResponseHeadersPolicyConfig::is_remove_headers_config_Valid() const{
    return m_remove_headers_config_isValid;
}

bool OAIResponseHeadersPolicyConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_headers_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_timing_headers_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_headers_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_headers_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseHeadersPolicyConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
