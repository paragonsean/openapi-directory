/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate.h
 *
 * 
 */

#ifndef OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate_H
#define OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate_H

#include <QJsonObject>

#include "OAICertificateSource.h"
#include "OAIMinimumProtocolVersion.h"
#include "OAISSLSupportMethod.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate : public OAIObject {
public:
    OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate();
    OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate(QString json);
    ~OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getCloudFrontDefaultCertificate() const;
    void setCloudFrontDefaultCertificate(const bool &cloud_front_default_certificate);
    bool is_cloud_front_default_certificate_Set() const;
    bool is_cloud_front_default_certificate_Valid() const;

    QString getIamCertificateId() const;
    void setIamCertificateId(const QString &iam_certificate_id);
    bool is_iam_certificate_id_Set() const;
    bool is_iam_certificate_id_Valid() const;

    QString getAcmCertificateArn() const;
    void setAcmCertificateArn(const QString &acm_certificate_arn);
    bool is_acm_certificate_arn_Set() const;
    bool is_acm_certificate_arn_Valid() const;

    OAISSLSupportMethod getSslSupportMethod() const;
    void setSslSupportMethod(const OAISSLSupportMethod &ssl_support_method);
    bool is_ssl_support_method_Set() const;
    bool is_ssl_support_method_Valid() const;

    OAIMinimumProtocolVersion getMinimumProtocolVersion() const;
    void setMinimumProtocolVersion(const OAIMinimumProtocolVersion &minimum_protocol_version);
    bool is_minimum_protocol_version_Set() const;
    bool is_minimum_protocol_version_Valid() const;

    QString getCertificate() const;
    void setCertificate(const QString &certificate);
    bool is_certificate_Set() const;
    bool is_certificate_Valid() const;

    OAICertificateSource getCertificateSource() const;
    void setCertificateSource(const OAICertificateSource &certificate_source);
    bool is_certificate_source_Set() const;
    bool is_certificate_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_cloud_front_default_certificate;
    bool m_cloud_front_default_certificate_isSet;
    bool m_cloud_front_default_certificate_isValid;

    QString m_iam_certificate_id;
    bool m_iam_certificate_id_isSet;
    bool m_iam_certificate_id_isValid;

    QString m_acm_certificate_arn;
    bool m_acm_certificate_arn_isSet;
    bool m_acm_certificate_arn_isValid;

    OAISSLSupportMethod m_ssl_support_method;
    bool m_ssl_support_method_isSet;
    bool m_ssl_support_method_isValid;

    OAIMinimumProtocolVersion m_minimum_protocol_version;
    bool m_minimum_protocol_version_isSet;
    bool m_minimum_protocol_version_isValid;

    QString m_certificate;
    bool m_certificate_isSet;
    bool m_certificate_isValid;

    OAICertificateSource m_certificate_source;
    bool m_certificate_source_isSet;
    bool m_certificate_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate)

#endif // OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate_H
