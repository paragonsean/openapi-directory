/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldLevelEncryptionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldLevelEncryptionConfig::OAIFieldLevelEncryptionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldLevelEncryptionConfig::OAIFieldLevelEncryptionConfig() {
    this->initializeModel();
}

OAIFieldLevelEncryptionConfig::~OAIFieldLevelEncryptionConfig() {}

void OAIFieldLevelEncryptionConfig::initializeModel() {

    m_caller_reference_isSet = false;
    m_caller_reference_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_query_arg_profile_config_isSet = false;
    m_query_arg_profile_config_isValid = false;

    m_content_type_profile_config_isSet = false;
    m_content_type_profile_config_isValid = false;
}

void OAIFieldLevelEncryptionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldLevelEncryptionConfig::fromJsonObject(QJsonObject json) {

    m_caller_reference_isValid = ::OpenAPI::fromJsonValue(m_caller_reference, json[QString("CallerReference")]);
    m_caller_reference_isSet = !json[QString("CallerReference")].isNull() && m_caller_reference_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_query_arg_profile_config_isValid = ::OpenAPI::fromJsonValue(m_query_arg_profile_config, json[QString("QueryArgProfileConfig")]);
    m_query_arg_profile_config_isSet = !json[QString("QueryArgProfileConfig")].isNull() && m_query_arg_profile_config_isValid;

    m_content_type_profile_config_isValid = ::OpenAPI::fromJsonValue(m_content_type_profile_config, json[QString("ContentTypeProfileConfig")]);
    m_content_type_profile_config_isSet = !json[QString("ContentTypeProfileConfig")].isNull() && m_content_type_profile_config_isValid;
}

QString OAIFieldLevelEncryptionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldLevelEncryptionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_caller_reference_isSet) {
        obj.insert(QString("CallerReference"), ::OpenAPI::toJsonValue(m_caller_reference));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_query_arg_profile_config.isSet()) {
        obj.insert(QString("QueryArgProfileConfig"), ::OpenAPI::toJsonValue(m_query_arg_profile_config));
    }
    if (m_content_type_profile_config.isSet()) {
        obj.insert(QString("ContentTypeProfileConfig"), ::OpenAPI::toJsonValue(m_content_type_profile_config));
    }
    return obj;
}

QString OAIFieldLevelEncryptionConfig::getCallerReference() const {
    return m_caller_reference;
}
void OAIFieldLevelEncryptionConfig::setCallerReference(const QString &caller_reference) {
    m_caller_reference = caller_reference;
    m_caller_reference_isSet = true;
}

bool OAIFieldLevelEncryptionConfig::is_caller_reference_Set() const{
    return m_caller_reference_isSet;
}

bool OAIFieldLevelEncryptionConfig::is_caller_reference_Valid() const{
    return m_caller_reference_isValid;
}

QString OAIFieldLevelEncryptionConfig::getComment() const {
    return m_comment;
}
void OAIFieldLevelEncryptionConfig::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIFieldLevelEncryptionConfig::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIFieldLevelEncryptionConfig::is_comment_Valid() const{
    return m_comment_isValid;
}

OAICreateFieldLevelEncryptionConfig2020_05_31_request_FieldLevelEncryptionConfig_QueryArgProfileConfig OAIFieldLevelEncryptionConfig::getQueryArgProfileConfig() const {
    return m_query_arg_profile_config;
}
void OAIFieldLevelEncryptionConfig::setQueryArgProfileConfig(const OAICreateFieldLevelEncryptionConfig2020_05_31_request_FieldLevelEncryptionConfig_QueryArgProfileConfig &query_arg_profile_config) {
    m_query_arg_profile_config = query_arg_profile_config;
    m_query_arg_profile_config_isSet = true;
}

bool OAIFieldLevelEncryptionConfig::is_query_arg_profile_config_Set() const{
    return m_query_arg_profile_config_isSet;
}

bool OAIFieldLevelEncryptionConfig::is_query_arg_profile_config_Valid() const{
    return m_query_arg_profile_config_isValid;
}

OAICreateFieldLevelEncryptionConfig2020_05_31_request_FieldLevelEncryptionConfig_ContentTypeProfileConfig OAIFieldLevelEncryptionConfig::getContentTypeProfileConfig() const {
    return m_content_type_profile_config;
}
void OAIFieldLevelEncryptionConfig::setContentTypeProfileConfig(const OAICreateFieldLevelEncryptionConfig2020_05_31_request_FieldLevelEncryptionConfig_ContentTypeProfileConfig &content_type_profile_config) {
    m_content_type_profile_config = content_type_profile_config;
    m_content_type_profile_config_isSet = true;
}

bool OAIFieldLevelEncryptionConfig::is_content_type_profile_config_Set() const{
    return m_content_type_profile_config_isSet;
}

bool OAIFieldLevelEncryptionConfig::is_content_type_profile_config_Valid() const{
    return m_content_type_profile_config_isValid;
}

bool OAIFieldLevelEncryptionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caller_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_arg_profile_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_profile_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldLevelEncryptionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_caller_reference_isValid && true;
}

} // namespace OpenAPI
