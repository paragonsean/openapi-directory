/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICachePolicyHeadersConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICachePolicyHeadersConfig::OAICachePolicyHeadersConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICachePolicyHeadersConfig::OAICachePolicyHeadersConfig() {
    this->initializeModel();
}

OAICachePolicyHeadersConfig::~OAICachePolicyHeadersConfig() {}

void OAICachePolicyHeadersConfig::initializeModel() {

    m_header_behavior_isSet = false;
    m_header_behavior_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;
}

void OAICachePolicyHeadersConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICachePolicyHeadersConfig::fromJsonObject(QJsonObject json) {

    m_header_behavior_isValid = ::OpenAPI::fromJsonValue(m_header_behavior, json[QString("HeaderBehavior")]);
    m_header_behavior_isSet = !json[QString("HeaderBehavior")].isNull() && m_header_behavior_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;
}

QString OAICachePolicyHeadersConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICachePolicyHeadersConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_header_behavior.isSet()) {
        obj.insert(QString("HeaderBehavior"), ::OpenAPI::toJsonValue(m_header_behavior));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    return obj;
}

OAICachePolicyHeaderBehavior OAICachePolicyHeadersConfig::getHeaderBehavior() const {
    return m_header_behavior;
}
void OAICachePolicyHeadersConfig::setHeaderBehavior(const OAICachePolicyHeaderBehavior &header_behavior) {
    m_header_behavior = header_behavior;
    m_header_behavior_isSet = true;
}

bool OAICachePolicyHeadersConfig::is_header_behavior_Set() const{
    return m_header_behavior_isSet;
}

bool OAICachePolicyHeadersConfig::is_header_behavior_Valid() const{
    return m_header_behavior_isValid;
}

OAIHeaders OAICachePolicyHeadersConfig::getHeaders() const {
    return m_headers;
}
void OAICachePolicyHeadersConfig::setHeaders(const OAIHeaders &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAICachePolicyHeadersConfig::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAICachePolicyHeadersConfig::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAICachePolicyHeadersConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICachePolicyHeadersConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_header_behavior_isValid && true;
}

} // namespace OpenAPI
