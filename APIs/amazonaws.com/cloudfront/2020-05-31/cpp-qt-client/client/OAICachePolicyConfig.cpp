/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICachePolicyConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICachePolicyConfig::OAICachePolicyConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICachePolicyConfig::OAICachePolicyConfig() {
    this->initializeModel();
}

OAICachePolicyConfig::~OAICachePolicyConfig() {}

void OAICachePolicyConfig::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_default_ttl_isSet = false;
    m_default_ttl_isValid = false;

    m_max_ttl_isSet = false;
    m_max_ttl_isValid = false;

    m_min_ttl_isSet = false;
    m_min_ttl_isValid = false;

    m_parameters_in_cache_key_and_forwarded_to_origin_isSet = false;
    m_parameters_in_cache_key_and_forwarded_to_origin_isValid = false;
}

void OAICachePolicyConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICachePolicyConfig::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_default_ttl_isValid = ::OpenAPI::fromJsonValue(m_default_ttl, json[QString("DefaultTTL")]);
    m_default_ttl_isSet = !json[QString("DefaultTTL")].isNull() && m_default_ttl_isValid;

    m_max_ttl_isValid = ::OpenAPI::fromJsonValue(m_max_ttl, json[QString("MaxTTL")]);
    m_max_ttl_isSet = !json[QString("MaxTTL")].isNull() && m_max_ttl_isValid;

    m_min_ttl_isValid = ::OpenAPI::fromJsonValue(m_min_ttl, json[QString("MinTTL")]);
    m_min_ttl_isSet = !json[QString("MinTTL")].isNull() && m_min_ttl_isValid;

    m_parameters_in_cache_key_and_forwarded_to_origin_isValid = ::OpenAPI::fromJsonValue(m_parameters_in_cache_key_and_forwarded_to_origin, json[QString("ParametersInCacheKeyAndForwardedToOrigin")]);
    m_parameters_in_cache_key_and_forwarded_to_origin_isSet = !json[QString("ParametersInCacheKeyAndForwardedToOrigin")].isNull() && m_parameters_in_cache_key_and_forwarded_to_origin_isValid;
}

QString OAICachePolicyConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICachePolicyConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_default_ttl_isSet) {
        obj.insert(QString("DefaultTTL"), ::OpenAPI::toJsonValue(m_default_ttl));
    }
    if (m_max_ttl_isSet) {
        obj.insert(QString("MaxTTL"), ::OpenAPI::toJsonValue(m_max_ttl));
    }
    if (m_min_ttl_isSet) {
        obj.insert(QString("MinTTL"), ::OpenAPI::toJsonValue(m_min_ttl));
    }
    if (m_parameters_in_cache_key_and_forwarded_to_origin.isSet()) {
        obj.insert(QString("ParametersInCacheKeyAndForwardedToOrigin"), ::OpenAPI::toJsonValue(m_parameters_in_cache_key_and_forwarded_to_origin));
    }
    return obj;
}

QString OAICachePolicyConfig::getComment() const {
    return m_comment;
}
void OAICachePolicyConfig::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAICachePolicyConfig::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAICachePolicyConfig::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAICachePolicyConfig::getName() const {
    return m_name;
}
void OAICachePolicyConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICachePolicyConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAICachePolicyConfig::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICachePolicyConfig::getDefaultTtl() const {
    return m_default_ttl;
}
void OAICachePolicyConfig::setDefaultTtl(const qint32 &default_ttl) {
    m_default_ttl = default_ttl;
    m_default_ttl_isSet = true;
}

bool OAICachePolicyConfig::is_default_ttl_Set() const{
    return m_default_ttl_isSet;
}

bool OAICachePolicyConfig::is_default_ttl_Valid() const{
    return m_default_ttl_isValid;
}

qint32 OAICachePolicyConfig::getMaxTtl() const {
    return m_max_ttl;
}
void OAICachePolicyConfig::setMaxTtl(const qint32 &max_ttl) {
    m_max_ttl = max_ttl;
    m_max_ttl_isSet = true;
}

bool OAICachePolicyConfig::is_max_ttl_Set() const{
    return m_max_ttl_isSet;
}

bool OAICachePolicyConfig::is_max_ttl_Valid() const{
    return m_max_ttl_isValid;
}

qint32 OAICachePolicyConfig::getMinTtl() const {
    return m_min_ttl;
}
void OAICachePolicyConfig::setMinTtl(const qint32 &min_ttl) {
    m_min_ttl = min_ttl;
    m_min_ttl_isSet = true;
}

bool OAICachePolicyConfig::is_min_ttl_Set() const{
    return m_min_ttl_isSet;
}

bool OAICachePolicyConfig::is_min_ttl_Valid() const{
    return m_min_ttl_isValid;
}

OAICreateCachePolicy2020_05_31_request_CachePolicyConfig_ParametersInCacheKeyAndForwardedToOrigin OAICachePolicyConfig::getParametersInCacheKeyAndForwardedToOrigin() const {
    return m_parameters_in_cache_key_and_forwarded_to_origin;
}
void OAICachePolicyConfig::setParametersInCacheKeyAndForwardedToOrigin(const OAICreateCachePolicy2020_05_31_request_CachePolicyConfig_ParametersInCacheKeyAndForwardedToOrigin &parameters_in_cache_key_and_forwarded_to_origin) {
    m_parameters_in_cache_key_and_forwarded_to_origin = parameters_in_cache_key_and_forwarded_to_origin;
    m_parameters_in_cache_key_and_forwarded_to_origin_isSet = true;
}

bool OAICachePolicyConfig::is_parameters_in_cache_key_and_forwarded_to_origin_Set() const{
    return m_parameters_in_cache_key_and_forwarded_to_origin_isSet;
}

bool OAICachePolicyConfig::is_parameters_in_cache_key_and_forwarded_to_origin_Valid() const{
    return m_parameters_in_cache_key_and_forwarded_to_origin_isValid;
}

bool OAICachePolicyConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_in_cache_key_and_forwarded_to_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICachePolicyConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_min_ttl_isValid && true;
}

} // namespace OpenAPI
