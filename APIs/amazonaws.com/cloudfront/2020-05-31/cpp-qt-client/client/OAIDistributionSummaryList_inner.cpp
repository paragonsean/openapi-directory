/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionSummaryList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionSummaryList_inner::OAIDistributionSummaryList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionSummaryList_inner::OAIDistributionSummaryList_inner() {
    this->initializeModel();
}

OAIDistributionSummaryList_inner::~OAIDistributionSummaryList_inner() {}

void OAIDistributionSummaryList_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_origins_isSet = false;
    m_origins_isValid = false;

    m_origin_groups_isSet = false;
    m_origin_groups_isValid = false;

    m_default_cache_behavior_isSet = false;
    m_default_cache_behavior_isValid = false;

    m_cache_behaviors_isSet = false;
    m_cache_behaviors_isValid = false;

    m_custom_error_responses_isSet = false;
    m_custom_error_responses_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_price_class_isSet = false;
    m_price_class_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_viewer_certificate_isSet = false;
    m_viewer_certificate_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_web_aclid_isSet = false;
    m_web_aclid_isValid = false;

    m_http_version_isSet = false;
    m_http_version_isValid = false;

    m_is_ipv6_enabled_isSet = false;
    m_is_ipv6_enabled_isValid = false;

    m_alias_icp_recordals_isSet = false;
    m_alias_icp_recordals_isValid = false;

    m_staging_isSet = false;
    m_staging_isValid = false;
}

void OAIDistributionSummaryList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionSummaryList_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("Aliases")]);
    m_aliases_isSet = !json[QString("Aliases")].isNull() && m_aliases_isValid;

    m_origins_isValid = ::OpenAPI::fromJsonValue(m_origins, json[QString("Origins")]);
    m_origins_isSet = !json[QString("Origins")].isNull() && m_origins_isValid;

    m_origin_groups_isValid = ::OpenAPI::fromJsonValue(m_origin_groups, json[QString("OriginGroups")]);
    m_origin_groups_isSet = !json[QString("OriginGroups")].isNull() && m_origin_groups_isValid;

    m_default_cache_behavior_isValid = ::OpenAPI::fromJsonValue(m_default_cache_behavior, json[QString("DefaultCacheBehavior")]);
    m_default_cache_behavior_isSet = !json[QString("DefaultCacheBehavior")].isNull() && m_default_cache_behavior_isValid;

    m_cache_behaviors_isValid = ::OpenAPI::fromJsonValue(m_cache_behaviors, json[QString("CacheBehaviors")]);
    m_cache_behaviors_isSet = !json[QString("CacheBehaviors")].isNull() && m_cache_behaviors_isValid;

    m_custom_error_responses_isValid = ::OpenAPI::fromJsonValue(m_custom_error_responses, json[QString("CustomErrorResponses")]);
    m_custom_error_responses_isSet = !json[QString("CustomErrorResponses")].isNull() && m_custom_error_responses_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_price_class_isValid = ::OpenAPI::fromJsonValue(m_price_class, json[QString("PriceClass")]);
    m_price_class_isSet = !json[QString("PriceClass")].isNull() && m_price_class_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_viewer_certificate_isValid = ::OpenAPI::fromJsonValue(m_viewer_certificate, json[QString("ViewerCertificate")]);
    m_viewer_certificate_isSet = !json[QString("ViewerCertificate")].isNull() && m_viewer_certificate_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("Restrictions")]);
    m_restrictions_isSet = !json[QString("Restrictions")].isNull() && m_restrictions_isValid;

    m_web_aclid_isValid = ::OpenAPI::fromJsonValue(m_web_aclid, json[QString("WebACLId")]);
    m_web_aclid_isSet = !json[QString("WebACLId")].isNull() && m_web_aclid_isValid;

    m_http_version_isValid = ::OpenAPI::fromJsonValue(m_http_version, json[QString("HttpVersion")]);
    m_http_version_isSet = !json[QString("HttpVersion")].isNull() && m_http_version_isValid;

    m_is_ipv6_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_ipv6_enabled, json[QString("IsIPV6Enabled")]);
    m_is_ipv6_enabled_isSet = !json[QString("IsIPV6Enabled")].isNull() && m_is_ipv6_enabled_isValid;

    m_alias_icp_recordals_isValid = ::OpenAPI::fromJsonValue(m_alias_icp_recordals, json[QString("AliasICPRecordals")]);
    m_alias_icp_recordals_isSet = !json[QString("AliasICPRecordals")].isNull() && m_alias_icp_recordals_isValid;

    m_staging_isValid = ::OpenAPI::fromJsonValue(m_staging, json[QString("Staging")]);
    m_staging_isSet = !json[QString("Staging")].isNull() && m_staging_isValid;
}

QString OAIDistributionSummaryList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionSummaryList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_aliases.isSet()) {
        obj.insert(QString("Aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_origins.isSet()) {
        obj.insert(QString("Origins"), ::OpenAPI::toJsonValue(m_origins));
    }
    if (m_origin_groups.isSet()) {
        obj.insert(QString("OriginGroups"), ::OpenAPI::toJsonValue(m_origin_groups));
    }
    if (m_default_cache_behavior.isSet()) {
        obj.insert(QString("DefaultCacheBehavior"), ::OpenAPI::toJsonValue(m_default_cache_behavior));
    }
    if (m_cache_behaviors.isSet()) {
        obj.insert(QString("CacheBehaviors"), ::OpenAPI::toJsonValue(m_cache_behaviors));
    }
    if (m_custom_error_responses.isSet()) {
        obj.insert(QString("CustomErrorResponses"), ::OpenAPI::toJsonValue(m_custom_error_responses));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_price_class.isSet()) {
        obj.insert(QString("PriceClass"), ::OpenAPI::toJsonValue(m_price_class));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_viewer_certificate.isSet()) {
        obj.insert(QString("ViewerCertificate"), ::OpenAPI::toJsonValue(m_viewer_certificate));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("Restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_web_aclid_isSet) {
        obj.insert(QString("WebACLId"), ::OpenAPI::toJsonValue(m_web_aclid));
    }
    if (m_http_version.isSet()) {
        obj.insert(QString("HttpVersion"), ::OpenAPI::toJsonValue(m_http_version));
    }
    if (m_is_ipv6_enabled_isSet) {
        obj.insert(QString("IsIPV6Enabled"), ::OpenAPI::toJsonValue(m_is_ipv6_enabled));
    }
    if (m_alias_icp_recordals.isSet()) {
        obj.insert(QString("AliasICPRecordals"), ::OpenAPI::toJsonValue(m_alias_icp_recordals));
    }
    if (m_staging_isSet) {
        obj.insert(QString("Staging"), ::OpenAPI::toJsonValue(m_staging));
    }
    return obj;
}

QString OAIDistributionSummaryList_inner::getId() const {
    return m_id;
}
void OAIDistributionSummaryList_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDistributionSummaryList_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDistributionSummaryList_inner::getArn() const {
    return m_arn;
}
void OAIDistributionSummaryList_inner::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDistributionSummaryList_inner::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDistributionSummaryList_inner::getStatus() const {
    return m_status;
}
void OAIDistributionSummaryList_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDistributionSummaryList_inner::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDistributionSummaryList_inner::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDistributionSummaryList_inner::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDistributionSummaryList_inner::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIDistributionSummaryList_inner::getDomainName() const {
    return m_domain_name;
}
void OAIDistributionSummaryList_inner::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDistributionSummaryList_inner::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAICreateDistribution2020_05_31_request_DistributionConfig_Aliases OAIDistributionSummaryList_inner::getAliases() const {
    return m_aliases;
}
void OAIDistributionSummaryList_inner::setAliases(const OAICreateDistribution2020_05_31_request_DistributionConfig_Aliases &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIDistributionSummaryList_inner::is_aliases_Valid() const{
    return m_aliases_isValid;
}

OAICreateDistribution2020_05_31_request_DistributionConfig_Origins OAIDistributionSummaryList_inner::getOrigins() const {
    return m_origins;
}
void OAIDistributionSummaryList_inner::setOrigins(const OAICreateDistribution2020_05_31_request_DistributionConfig_Origins &origins) {
    m_origins = origins;
    m_origins_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_origins_Set() const{
    return m_origins_isSet;
}

bool OAIDistributionSummaryList_inner::is_origins_Valid() const{
    return m_origins_isValid;
}

OAICreateDistribution2020_05_31_request_DistributionConfig_OriginGroups OAIDistributionSummaryList_inner::getOriginGroups() const {
    return m_origin_groups;
}
void OAIDistributionSummaryList_inner::setOriginGroups(const OAICreateDistribution2020_05_31_request_DistributionConfig_OriginGroups &origin_groups) {
    m_origin_groups = origin_groups;
    m_origin_groups_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_origin_groups_Set() const{
    return m_origin_groups_isSet;
}

bool OAIDistributionSummaryList_inner::is_origin_groups_Valid() const{
    return m_origin_groups_isValid;
}

OAICreateDistribution2020_05_31_request_DistributionConfig_DefaultCacheBehavior OAIDistributionSummaryList_inner::getDefaultCacheBehavior() const {
    return m_default_cache_behavior;
}
void OAIDistributionSummaryList_inner::setDefaultCacheBehavior(const OAICreateDistribution2020_05_31_request_DistributionConfig_DefaultCacheBehavior &default_cache_behavior) {
    m_default_cache_behavior = default_cache_behavior;
    m_default_cache_behavior_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_default_cache_behavior_Set() const{
    return m_default_cache_behavior_isSet;
}

bool OAIDistributionSummaryList_inner::is_default_cache_behavior_Valid() const{
    return m_default_cache_behavior_isValid;
}

OAICreateDistribution2020_05_31_request_DistributionConfig_CacheBehaviors OAIDistributionSummaryList_inner::getCacheBehaviors() const {
    return m_cache_behaviors;
}
void OAIDistributionSummaryList_inner::setCacheBehaviors(const OAICreateDistribution2020_05_31_request_DistributionConfig_CacheBehaviors &cache_behaviors) {
    m_cache_behaviors = cache_behaviors;
    m_cache_behaviors_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_cache_behaviors_Set() const{
    return m_cache_behaviors_isSet;
}

bool OAIDistributionSummaryList_inner::is_cache_behaviors_Valid() const{
    return m_cache_behaviors_isValid;
}

OAIDistributionSummary_CustomErrorResponses OAIDistributionSummaryList_inner::getCustomErrorResponses() const {
    return m_custom_error_responses;
}
void OAIDistributionSummaryList_inner::setCustomErrorResponses(const OAIDistributionSummary_CustomErrorResponses &custom_error_responses) {
    m_custom_error_responses = custom_error_responses;
    m_custom_error_responses_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_custom_error_responses_Set() const{
    return m_custom_error_responses_isSet;
}

bool OAIDistributionSummaryList_inner::is_custom_error_responses_Valid() const{
    return m_custom_error_responses_isValid;
}

QString OAIDistributionSummaryList_inner::getComment() const {
    return m_comment;
}
void OAIDistributionSummaryList_inner::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIDistributionSummaryList_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIPriceClass OAIDistributionSummaryList_inner::getPriceClass() const {
    return m_price_class;
}
void OAIDistributionSummaryList_inner::setPriceClass(const OAIPriceClass &price_class) {
    m_price_class = price_class;
    m_price_class_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_price_class_Set() const{
    return m_price_class_isSet;
}

bool OAIDistributionSummaryList_inner::is_price_class_Valid() const{
    return m_price_class_isValid;
}

bool OAIDistributionSummaryList_inner::getEnabled() const {
    return m_enabled;
}
void OAIDistributionSummaryList_inner::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDistributionSummaryList_inner::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate OAIDistributionSummaryList_inner::getViewerCertificate() const {
    return m_viewer_certificate;
}
void OAIDistributionSummaryList_inner::setViewerCertificate(const OAICreateDistribution2020_05_31_request_DistributionConfig_ViewerCertificate &viewer_certificate) {
    m_viewer_certificate = viewer_certificate;
    m_viewer_certificate_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_viewer_certificate_Set() const{
    return m_viewer_certificate_isSet;
}

bool OAIDistributionSummaryList_inner::is_viewer_certificate_Valid() const{
    return m_viewer_certificate_isValid;
}

OAICreateDistribution2020_05_31_request_DistributionConfig_Restrictions OAIDistributionSummaryList_inner::getRestrictions() const {
    return m_restrictions;
}
void OAIDistributionSummaryList_inner::setRestrictions(const OAICreateDistribution2020_05_31_request_DistributionConfig_Restrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIDistributionSummaryList_inner::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QString OAIDistributionSummaryList_inner::getWebAclid() const {
    return m_web_aclid;
}
void OAIDistributionSummaryList_inner::setWebAclid(const QString &web_aclid) {
    m_web_aclid = web_aclid;
    m_web_aclid_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_web_aclid_Set() const{
    return m_web_aclid_isSet;
}

bool OAIDistributionSummaryList_inner::is_web_aclid_Valid() const{
    return m_web_aclid_isValid;
}

OAIHttpVersion OAIDistributionSummaryList_inner::getHttpVersion() const {
    return m_http_version;
}
void OAIDistributionSummaryList_inner::setHttpVersion(const OAIHttpVersion &http_version) {
    m_http_version = http_version;
    m_http_version_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_http_version_Set() const{
    return m_http_version_isSet;
}

bool OAIDistributionSummaryList_inner::is_http_version_Valid() const{
    return m_http_version_isValid;
}

bool OAIDistributionSummaryList_inner::getIsIpv6Enabled() const {
    return m_is_ipv6_enabled;
}
void OAIDistributionSummaryList_inner::setIsIpv6Enabled(const bool &is_ipv6_enabled) {
    m_is_ipv6_enabled = is_ipv6_enabled;
    m_is_ipv6_enabled_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_is_ipv6_enabled_Set() const{
    return m_is_ipv6_enabled_isSet;
}

bool OAIDistributionSummaryList_inner::is_is_ipv6_enabled_Valid() const{
    return m_is_ipv6_enabled_isValid;
}

QList OAIDistributionSummaryList_inner::getAliasIcpRecordals() const {
    return m_alias_icp_recordals;
}
void OAIDistributionSummaryList_inner::setAliasIcpRecordals(const QList &alias_icp_recordals) {
    m_alias_icp_recordals = alias_icp_recordals;
    m_alias_icp_recordals_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_alias_icp_recordals_Set() const{
    return m_alias_icp_recordals_isSet;
}

bool OAIDistributionSummaryList_inner::is_alias_icp_recordals_Valid() const{
    return m_alias_icp_recordals_isValid;
}

bool OAIDistributionSummaryList_inner::getStaging() const {
    return m_staging;
}
void OAIDistributionSummaryList_inner::setStaging(const bool &staging) {
    m_staging = staging;
    m_staging_isSet = true;
}

bool OAIDistributionSummaryList_inner::is_staging_Set() const{
    return m_staging_isSet;
}

bool OAIDistributionSummaryList_inner::is_staging_Valid() const{
    return m_staging_isValid;
}

bool OAIDistributionSummaryList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_cache_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_behaviors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_error_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_aclid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ipv6_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_icp_recordals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionSummaryList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_arn_isValid && m_status_isValid && m_last_modified_time_isValid && m_domain_name_isValid && m_aliases_isValid && m_origins_isValid && m_default_cache_behavior_isValid && m_cache_behaviors_isValid && m_custom_error_responses_isValid && m_comment_isValid && m_price_class_isValid && m_enabled_isValid && m_viewer_certificate_isValid && m_restrictions_isValid && m_web_aclid_isValid && m_http_version_isValid && m_is_ipv6_enabled_isValid && m_staging_isValid && true;
}

} // namespace OpenAPI
