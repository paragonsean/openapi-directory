/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig() {
    this->initializeModel();
}

OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::~OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig() {}

void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::initializeModel() {

    m_access_control_allow_origins_isSet = false;
    m_access_control_allow_origins_isValid = false;

    m_access_control_allow_headers_isSet = false;
    m_access_control_allow_headers_isValid = false;

    m_access_control_allow_methods_isSet = false;
    m_access_control_allow_methods_isValid = false;

    m_access_control_allow_credentials_isSet = false;
    m_access_control_allow_credentials_isValid = false;

    m_access_control_expose_headers_isSet = false;
    m_access_control_expose_headers_isValid = false;

    m_access_control_max_age_sec_isSet = false;
    m_access_control_max_age_sec_isValid = false;

    m_origin_override_isSet = false;
    m_origin_override_isValid = false;
}

void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::fromJsonObject(QJsonObject json) {

    m_access_control_allow_origins_isValid = ::OpenAPI::fromJsonValue(m_access_control_allow_origins, json[QString("AccessControlAllowOrigins")]);
    m_access_control_allow_origins_isSet = !json[QString("AccessControlAllowOrigins")].isNull() && m_access_control_allow_origins_isValid;

    m_access_control_allow_headers_isValid = ::OpenAPI::fromJsonValue(m_access_control_allow_headers, json[QString("AccessControlAllowHeaders")]);
    m_access_control_allow_headers_isSet = !json[QString("AccessControlAllowHeaders")].isNull() && m_access_control_allow_headers_isValid;

    m_access_control_allow_methods_isValid = ::OpenAPI::fromJsonValue(m_access_control_allow_methods, json[QString("AccessControlAllowMethods")]);
    m_access_control_allow_methods_isSet = !json[QString("AccessControlAllowMethods")].isNull() && m_access_control_allow_methods_isValid;

    m_access_control_allow_credentials_isValid = ::OpenAPI::fromJsonValue(m_access_control_allow_credentials, json[QString("AccessControlAllowCredentials")]);
    m_access_control_allow_credentials_isSet = !json[QString("AccessControlAllowCredentials")].isNull() && m_access_control_allow_credentials_isValid;

    m_access_control_expose_headers_isValid = ::OpenAPI::fromJsonValue(m_access_control_expose_headers, json[QString("AccessControlExposeHeaders")]);
    m_access_control_expose_headers_isSet = !json[QString("AccessControlExposeHeaders")].isNull() && m_access_control_expose_headers_isValid;

    m_access_control_max_age_sec_isValid = ::OpenAPI::fromJsonValue(m_access_control_max_age_sec, json[QString("AccessControlMaxAgeSec")]);
    m_access_control_max_age_sec_isSet = !json[QString("AccessControlMaxAgeSec")].isNull() && m_access_control_max_age_sec_isValid;

    m_origin_override_isValid = ::OpenAPI::fromJsonValue(m_origin_override, json[QString("OriginOverride")]);
    m_origin_override_isSet = !json[QString("OriginOverride")].isNull() && m_origin_override_isValid;
}

QString OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_access_control_allow_origins.isSet()) {
        obj.insert(QString("AccessControlAllowOrigins"), ::OpenAPI::toJsonValue(m_access_control_allow_origins));
    }
    if (m_access_control_allow_headers.isSet()) {
        obj.insert(QString("AccessControlAllowHeaders"), ::OpenAPI::toJsonValue(m_access_control_allow_headers));
    }
    if (m_access_control_allow_methods.isSet()) {
        obj.insert(QString("AccessControlAllowMethods"), ::OpenAPI::toJsonValue(m_access_control_allow_methods));
    }
    if (m_access_control_allow_credentials_isSet) {
        obj.insert(QString("AccessControlAllowCredentials"), ::OpenAPI::toJsonValue(m_access_control_allow_credentials));
    }
    if (m_access_control_expose_headers.isSet()) {
        obj.insert(QString("AccessControlExposeHeaders"), ::OpenAPI::toJsonValue(m_access_control_expose_headers));
    }
    if (m_access_control_max_age_sec_isSet) {
        obj.insert(QString("AccessControlMaxAgeSec"), ::OpenAPI::toJsonValue(m_access_control_max_age_sec));
    }
    if (m_origin_override_isSet) {
        obj.insert(QString("OriginOverride"), ::OpenAPI::toJsonValue(m_origin_override));
    }
    return obj;
}

OAIResponseHeadersPolicyCorsConfig_AccessControlAllowOrigins OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::getAccessControlAllowOrigins() const {
    return m_access_control_allow_origins;
}
void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::setAccessControlAllowOrigins(const OAIResponseHeadersPolicyCorsConfig_AccessControlAllowOrigins &access_control_allow_origins) {
    m_access_control_allow_origins = access_control_allow_origins;
    m_access_control_allow_origins_isSet = true;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_allow_origins_Set() const{
    return m_access_control_allow_origins_isSet;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_allow_origins_Valid() const{
    return m_access_control_allow_origins_isValid;
}

OAIResponseHeadersPolicyCorsConfig_AccessControlAllowHeaders OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::getAccessControlAllowHeaders() const {
    return m_access_control_allow_headers;
}
void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::setAccessControlAllowHeaders(const OAIResponseHeadersPolicyCorsConfig_AccessControlAllowHeaders &access_control_allow_headers) {
    m_access_control_allow_headers = access_control_allow_headers;
    m_access_control_allow_headers_isSet = true;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_allow_headers_Set() const{
    return m_access_control_allow_headers_isSet;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_allow_headers_Valid() const{
    return m_access_control_allow_headers_isValid;
}

OAIResponseHeadersPolicyCorsConfig_AccessControlAllowMethods OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::getAccessControlAllowMethods() const {
    return m_access_control_allow_methods;
}
void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::setAccessControlAllowMethods(const OAIResponseHeadersPolicyCorsConfig_AccessControlAllowMethods &access_control_allow_methods) {
    m_access_control_allow_methods = access_control_allow_methods;
    m_access_control_allow_methods_isSet = true;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_allow_methods_Set() const{
    return m_access_control_allow_methods_isSet;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_allow_methods_Valid() const{
    return m_access_control_allow_methods_isValid;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::getAccessControlAllowCredentials() const {
    return m_access_control_allow_credentials;
}
void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::setAccessControlAllowCredentials(const bool &access_control_allow_credentials) {
    m_access_control_allow_credentials = access_control_allow_credentials;
    m_access_control_allow_credentials_isSet = true;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_allow_credentials_Set() const{
    return m_access_control_allow_credentials_isSet;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_allow_credentials_Valid() const{
    return m_access_control_allow_credentials_isValid;
}

OAIResponseHeadersPolicyCorsConfig_AccessControlExposeHeaders OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::getAccessControlExposeHeaders() const {
    return m_access_control_expose_headers;
}
void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::setAccessControlExposeHeaders(const OAIResponseHeadersPolicyCorsConfig_AccessControlExposeHeaders &access_control_expose_headers) {
    m_access_control_expose_headers = access_control_expose_headers;
    m_access_control_expose_headers_isSet = true;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_expose_headers_Set() const{
    return m_access_control_expose_headers_isSet;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_expose_headers_Valid() const{
    return m_access_control_expose_headers_isValid;
}

qint32 OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::getAccessControlMaxAgeSec() const {
    return m_access_control_max_age_sec;
}
void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::setAccessControlMaxAgeSec(const qint32 &access_control_max_age_sec) {
    m_access_control_max_age_sec = access_control_max_age_sec;
    m_access_control_max_age_sec_isSet = true;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_max_age_sec_Set() const{
    return m_access_control_max_age_sec_isSet;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_access_control_max_age_sec_Valid() const{
    return m_access_control_max_age_sec_isValid;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::getOriginOverride() const {
    return m_origin_override;
}
void OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::setOriginOverride(const bool &origin_override) {
    m_origin_override = origin_override;
    m_origin_override_isSet = true;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_origin_override_Set() const{
    return m_origin_override_isSet;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::is_origin_override_Valid() const{
    return m_origin_override_isValid;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_control_allow_origins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_allow_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_allow_methods.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_allow_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_expose_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_max_age_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_override_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_CorsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_control_allow_origins_isValid && m_access_control_allow_headers_isValid && m_access_control_allow_methods_isValid && m_access_control_allow_credentials_isValid && m_origin_override_isValid && true;
}

} // namespace OpenAPI
