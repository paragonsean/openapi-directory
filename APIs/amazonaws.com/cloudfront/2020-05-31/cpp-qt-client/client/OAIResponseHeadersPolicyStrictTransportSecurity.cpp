/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseHeadersPolicyStrictTransportSecurity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseHeadersPolicyStrictTransportSecurity::OAIResponseHeadersPolicyStrictTransportSecurity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseHeadersPolicyStrictTransportSecurity::OAIResponseHeadersPolicyStrictTransportSecurity() {
    this->initializeModel();
}

OAIResponseHeadersPolicyStrictTransportSecurity::~OAIResponseHeadersPolicyStrictTransportSecurity() {}

void OAIResponseHeadersPolicyStrictTransportSecurity::initializeModel() {

    m_override_isSet = false;
    m_override_isValid = false;

    m_include_subdomains_isSet = false;
    m_include_subdomains_isValid = false;

    m_preload_isSet = false;
    m_preload_isValid = false;

    m_access_control_max_age_sec_isSet = false;
    m_access_control_max_age_sec_isValid = false;
}

void OAIResponseHeadersPolicyStrictTransportSecurity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseHeadersPolicyStrictTransportSecurity::fromJsonObject(QJsonObject json) {

    m_override_isValid = ::OpenAPI::fromJsonValue(m_override, json[QString("Override")]);
    m_override_isSet = !json[QString("Override")].isNull() && m_override_isValid;

    m_include_subdomains_isValid = ::OpenAPI::fromJsonValue(m_include_subdomains, json[QString("IncludeSubdomains")]);
    m_include_subdomains_isSet = !json[QString("IncludeSubdomains")].isNull() && m_include_subdomains_isValid;

    m_preload_isValid = ::OpenAPI::fromJsonValue(m_preload, json[QString("Preload")]);
    m_preload_isSet = !json[QString("Preload")].isNull() && m_preload_isValid;

    m_access_control_max_age_sec_isValid = ::OpenAPI::fromJsonValue(m_access_control_max_age_sec, json[QString("AccessControlMaxAgeSec")]);
    m_access_control_max_age_sec_isSet = !json[QString("AccessControlMaxAgeSec")].isNull() && m_access_control_max_age_sec_isValid;
}

QString OAIResponseHeadersPolicyStrictTransportSecurity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseHeadersPolicyStrictTransportSecurity::asJsonObject() const {
    QJsonObject obj;
    if (m_override_isSet) {
        obj.insert(QString("Override"), ::OpenAPI::toJsonValue(m_override));
    }
    if (m_include_subdomains_isSet) {
        obj.insert(QString("IncludeSubdomains"), ::OpenAPI::toJsonValue(m_include_subdomains));
    }
    if (m_preload_isSet) {
        obj.insert(QString("Preload"), ::OpenAPI::toJsonValue(m_preload));
    }
    if (m_access_control_max_age_sec_isSet) {
        obj.insert(QString("AccessControlMaxAgeSec"), ::OpenAPI::toJsonValue(m_access_control_max_age_sec));
    }
    return obj;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::getOverride() const {
    return m_override;
}
void OAIResponseHeadersPolicyStrictTransportSecurity::setOverride(const bool &override) {
    m_override = override;
    m_override_isSet = true;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::is_override_Set() const{
    return m_override_isSet;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::is_override_Valid() const{
    return m_override_isValid;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::getIncludeSubdomains() const {
    return m_include_subdomains;
}
void OAIResponseHeadersPolicyStrictTransportSecurity::setIncludeSubdomains(const bool &include_subdomains) {
    m_include_subdomains = include_subdomains;
    m_include_subdomains_isSet = true;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::is_include_subdomains_Set() const{
    return m_include_subdomains_isSet;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::is_include_subdomains_Valid() const{
    return m_include_subdomains_isValid;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::getPreload() const {
    return m_preload;
}
void OAIResponseHeadersPolicyStrictTransportSecurity::setPreload(const bool &preload) {
    m_preload = preload;
    m_preload_isSet = true;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::is_preload_Set() const{
    return m_preload_isSet;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::is_preload_Valid() const{
    return m_preload_isValid;
}

qint32 OAIResponseHeadersPolicyStrictTransportSecurity::getAccessControlMaxAgeSec() const {
    return m_access_control_max_age_sec;
}
void OAIResponseHeadersPolicyStrictTransportSecurity::setAccessControlMaxAgeSec(const qint32 &access_control_max_age_sec) {
    m_access_control_max_age_sec = access_control_max_age_sec;
    m_access_control_max_age_sec_isSet = true;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::is_access_control_max_age_sec_Set() const{
    return m_access_control_max_age_sec_isSet;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::is_access_control_max_age_sec_Valid() const{
    return m_access_control_max_age_sec_isValid;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_subdomains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_max_age_sec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseHeadersPolicyStrictTransportSecurity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_override_isValid && m_access_control_max_age_sec_isValid && true;
}

} // namespace OpenAPI
