/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseHeadersPolicyXSSProtection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseHeadersPolicyXSSProtection::OAIResponseHeadersPolicyXSSProtection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseHeadersPolicyXSSProtection::OAIResponseHeadersPolicyXSSProtection() {
    this->initializeModel();
}

OAIResponseHeadersPolicyXSSProtection::~OAIResponseHeadersPolicyXSSProtection() {}

void OAIResponseHeadersPolicyXSSProtection::initializeModel() {

    m_override_isSet = false;
    m_override_isValid = false;

    m_protection_isSet = false;
    m_protection_isValid = false;

    m_mode_block_isSet = false;
    m_mode_block_isValid = false;

    m_report_uri_isSet = false;
    m_report_uri_isValid = false;
}

void OAIResponseHeadersPolicyXSSProtection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseHeadersPolicyXSSProtection::fromJsonObject(QJsonObject json) {

    m_override_isValid = ::OpenAPI::fromJsonValue(m_override, json[QString("Override")]);
    m_override_isSet = !json[QString("Override")].isNull() && m_override_isValid;

    m_protection_isValid = ::OpenAPI::fromJsonValue(m_protection, json[QString("Protection")]);
    m_protection_isSet = !json[QString("Protection")].isNull() && m_protection_isValid;

    m_mode_block_isValid = ::OpenAPI::fromJsonValue(m_mode_block, json[QString("ModeBlock")]);
    m_mode_block_isSet = !json[QString("ModeBlock")].isNull() && m_mode_block_isValid;

    m_report_uri_isValid = ::OpenAPI::fromJsonValue(m_report_uri, json[QString("ReportUri")]);
    m_report_uri_isSet = !json[QString("ReportUri")].isNull() && m_report_uri_isValid;
}

QString OAIResponseHeadersPolicyXSSProtection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseHeadersPolicyXSSProtection::asJsonObject() const {
    QJsonObject obj;
    if (m_override_isSet) {
        obj.insert(QString("Override"), ::OpenAPI::toJsonValue(m_override));
    }
    if (m_protection_isSet) {
        obj.insert(QString("Protection"), ::OpenAPI::toJsonValue(m_protection));
    }
    if (m_mode_block_isSet) {
        obj.insert(QString("ModeBlock"), ::OpenAPI::toJsonValue(m_mode_block));
    }
    if (m_report_uri_isSet) {
        obj.insert(QString("ReportUri"), ::OpenAPI::toJsonValue(m_report_uri));
    }
    return obj;
}

bool OAIResponseHeadersPolicyXSSProtection::getOverride() const {
    return m_override;
}
void OAIResponseHeadersPolicyXSSProtection::setOverride(const bool &override) {
    m_override = override;
    m_override_isSet = true;
}

bool OAIResponseHeadersPolicyXSSProtection::is_override_Set() const{
    return m_override_isSet;
}

bool OAIResponseHeadersPolicyXSSProtection::is_override_Valid() const{
    return m_override_isValid;
}

bool OAIResponseHeadersPolicyXSSProtection::getProtection() const {
    return m_protection;
}
void OAIResponseHeadersPolicyXSSProtection::setProtection(const bool &protection) {
    m_protection = protection;
    m_protection_isSet = true;
}

bool OAIResponseHeadersPolicyXSSProtection::is_protection_Set() const{
    return m_protection_isSet;
}

bool OAIResponseHeadersPolicyXSSProtection::is_protection_Valid() const{
    return m_protection_isValid;
}

bool OAIResponseHeadersPolicyXSSProtection::getModeBlock() const {
    return m_mode_block;
}
void OAIResponseHeadersPolicyXSSProtection::setModeBlock(const bool &mode_block) {
    m_mode_block = mode_block;
    m_mode_block_isSet = true;
}

bool OAIResponseHeadersPolicyXSSProtection::is_mode_block_Set() const{
    return m_mode_block_isSet;
}

bool OAIResponseHeadersPolicyXSSProtection::is_mode_block_Valid() const{
    return m_mode_block_isValid;
}

QString OAIResponseHeadersPolicyXSSProtection::getReportUri() const {
    return m_report_uri;
}
void OAIResponseHeadersPolicyXSSProtection::setReportUri(const QString &report_uri) {
    m_report_uri = report_uri;
    m_report_uri_isSet = true;
}

bool OAIResponseHeadersPolicyXSSProtection::is_report_uri_Set() const{
    return m_report_uri_isSet;
}

bool OAIResponseHeadersPolicyXSSProtection::is_report_uri_Valid() const{
    return m_report_uri_isValid;
}

bool OAIResponseHeadersPolicyXSSProtection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseHeadersPolicyXSSProtection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_override_isValid && m_protection_isValid && true;
}

} // namespace OpenAPI
