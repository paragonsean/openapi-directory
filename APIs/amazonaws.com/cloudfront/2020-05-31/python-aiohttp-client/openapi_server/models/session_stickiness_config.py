# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionStickinessConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, idle_ttl: int=None, maximum_ttl: int=None):
        """SessionStickinessConfig - a model defined in OpenAPI

        :param idle_ttl: The idle_ttl of this SessionStickinessConfig.
        :param maximum_ttl: The maximum_ttl of this SessionStickinessConfig.
        """
        self.openapi_types = {
            'idle_ttl': int,
            'maximum_ttl': int
        }

        self.attribute_map = {
            'idle_ttl': 'IdleTTL',
            'maximum_ttl': 'MaximumTTL'
        }

        self._idle_ttl = idle_ttl
        self._maximum_ttl = maximum_ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionStickinessConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionStickinessConfig of this SessionStickinessConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def idle_ttl(self):
        """Gets the idle_ttl of this SessionStickinessConfig.


        :return: The idle_ttl of this SessionStickinessConfig.
        :rtype: int
        """
        return self._idle_ttl

    @idle_ttl.setter
    def idle_ttl(self, idle_ttl):
        """Sets the idle_ttl of this SessionStickinessConfig.


        :param idle_ttl: The idle_ttl of this SessionStickinessConfig.
        :type idle_ttl: int
        """
        if idle_ttl is None:
            raise ValueError("Invalid value for `idle_ttl`, must not be `None`")

        self._idle_ttl = idle_ttl

    @property
    def maximum_ttl(self):
        """Gets the maximum_ttl of this SessionStickinessConfig.


        :return: The maximum_ttl of this SessionStickinessConfig.
        :rtype: int
        """
        return self._maximum_ttl

    @maximum_ttl.setter
    def maximum_ttl(self, maximum_ttl):
        """Sets the maximum_ttl of this SessionStickinessConfig.


        :param maximum_ttl: The maximum_ttl of this SessionStickinessConfig.
        :type maximum_ttl: int
        """
        if maximum_ttl is None:
            raise ValueError("Invalid value for `maximum_ttl`, must not be `None`")

        self._maximum_ttl = maximum_ttl
