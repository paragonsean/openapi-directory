# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cache_policy_type import CachePolicyType
from openapi_server.models.get_cache_policy_result_cache_policy import GetCachePolicyResultCachePolicy
from openapi_server import util


class CachePolicySummaryListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: CachePolicyType=None, cache_policy: GetCachePolicyResultCachePolicy=None):
        """CachePolicySummaryListInner - a model defined in OpenAPI

        :param type: The type of this CachePolicySummaryListInner.
        :param cache_policy: The cache_policy of this CachePolicySummaryListInner.
        """
        self.openapi_types = {
            'type': CachePolicyType,
            'cache_policy': GetCachePolicyResultCachePolicy
        }

        self.attribute_map = {
            'type': 'Type',
            'cache_policy': 'CachePolicy'
        }

        self._type = type
        self._cache_policy = cache_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CachePolicySummaryListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CachePolicySummaryList_inner of this CachePolicySummaryListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this CachePolicySummaryListInner.


        :return: The type of this CachePolicySummaryListInner.
        :rtype: CachePolicyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CachePolicySummaryListInner.


        :param type: The type of this CachePolicySummaryListInner.
        :type type: CachePolicyType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def cache_policy(self):
        """Gets the cache_policy of this CachePolicySummaryListInner.


        :return: The cache_policy of this CachePolicySummaryListInner.
        :rtype: GetCachePolicyResultCachePolicy
        """
        return self._cache_policy

    @cache_policy.setter
    def cache_policy(self, cache_policy):
        """Sets the cache_policy of this CachePolicySummaryListInner.


        :param cache_policy: The cache_policy of this CachePolicySummaryListInner.
        :type cache_policy: GetCachePolicyResultCachePolicy
        """
        if cache_policy is None:
            raise ValueError("Invalid value for `cache_policy`, must not be `None`")

        self._cache_policy = cache_policy
