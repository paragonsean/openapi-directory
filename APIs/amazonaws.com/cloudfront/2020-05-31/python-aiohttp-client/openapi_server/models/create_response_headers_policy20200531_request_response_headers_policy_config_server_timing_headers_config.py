# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, sampling_rate: float=None):
        """CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig - a model defined in OpenAPI

        :param enabled: The enabled of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.
        :param sampling_rate: The sampling_rate of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'sampling_rate': float
        }

        self.attribute_map = {
            'enabled': 'Enabled',
            'sampling_rate': 'SamplingRate'
        }

        self._enabled = enabled
        self._sampling_rate = sampling_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateResponseHeadersPolicy2020_05_31_request_ResponseHeadersPolicyConfig_ServerTimingHeadersConfig of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.


        :return: The enabled of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.


        :param enabled: The enabled of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def sampling_rate(self):
        """Gets the sampling_rate of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.


        :return: The sampling_rate of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.
        :rtype: float
        """
        return self._sampling_rate

    @sampling_rate.setter
    def sampling_rate(self, sampling_rate):
        """Sets the sampling_rate of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.


        :param sampling_rate: The sampling_rate of this CreateResponseHeadersPolicy20200531RequestResponseHeadersPolicyConfigServerTimingHeadersConfig.
        :type sampling_rate: float
        """

        self._sampling_rate = sampling_rate
