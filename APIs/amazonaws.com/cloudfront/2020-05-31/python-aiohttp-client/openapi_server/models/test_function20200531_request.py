# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestFunction20200531Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stage: str=None, event_object: str=None):
        """TestFunction20200531Request - a model defined in OpenAPI

        :param stage: The stage of this TestFunction20200531Request.
        :param event_object: The event_object of this TestFunction20200531Request.
        """
        self.openapi_types = {
            'stage': str,
            'event_object': str
        }

        self.attribute_map = {
            'stage': 'Stage',
            'event_object': 'EventObject'
        }

        self._stage = stage
        self._event_object = event_object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestFunction20200531Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestFunction2020_05_31_request of this TestFunction20200531Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stage(self):
        """Gets the stage of this TestFunction20200531Request.

        The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>.

        :return: The stage of this TestFunction20200531Request.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this TestFunction20200531Request.

        The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>.

        :param stage: The stage of this TestFunction20200531Request.
        :type stage: str
        """
        allowed_values = ["DEVELOPMENT", "LIVE"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def event_object(self):
        """Gets the event_object of this TestFunction20200531Request.

        The event object to test the function with. For more information about the structure of the event object, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function\">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>.

        :return: The event_object of this TestFunction20200531Request.
        :rtype: str
        """
        return self._event_object

    @event_object.setter
    def event_object(self, event_object):
        """Sets the event_object of this TestFunction20200531Request.

        The event object to test the function with. For more information about the structure of the event object, see <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function\">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>.

        :param event_object: The event_object of this TestFunction20200531Request.
        :type event_object: str
        """
        if event_object is None:
            raise ValueError("Invalid value for `event_object`, must not be `None`")
        if event_object is not None and len(event_object) > 40960:
            raise ValueError("Invalid value for `event_object`, length must be less than or equal to `40960`")

        self._event_object = event_object
