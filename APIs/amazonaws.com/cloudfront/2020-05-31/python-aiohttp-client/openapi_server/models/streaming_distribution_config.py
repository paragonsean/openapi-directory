# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_streaming_distribution20200531_request_streaming_distribution_config_aliases import CreateStreamingDistribution20200531RequestStreamingDistributionConfigAliases
from openapi_server.models.create_streaming_distribution20200531_request_streaming_distribution_config_logging import CreateStreamingDistribution20200531RequestStreamingDistributionConfigLogging
from openapi_server.models.create_streaming_distribution20200531_request_streaming_distribution_config_s3_origin import CreateStreamingDistribution20200531RequestStreamingDistributionConfigS3Origin
from openapi_server.models.create_streaming_distribution20200531_request_streaming_distribution_config_trusted_signers import CreateStreamingDistribution20200531RequestStreamingDistributionConfigTrustedSigners
from openapi_server.models.price_class import PriceClass
from openapi_server import util


class StreamingDistributionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller_reference: str=None, s3_origin: CreateStreamingDistribution20200531RequestStreamingDistributionConfigS3Origin=None, aliases: CreateStreamingDistribution20200531RequestStreamingDistributionConfigAliases=None, comment: str=None, logging: CreateStreamingDistribution20200531RequestStreamingDistributionConfigLogging=None, trusted_signers: CreateStreamingDistribution20200531RequestStreamingDistributionConfigTrustedSigners=None, price_class: PriceClass=None, enabled: bool=None):
        """StreamingDistributionConfig - a model defined in OpenAPI

        :param caller_reference: The caller_reference of this StreamingDistributionConfig.
        :param s3_origin: The s3_origin of this StreamingDistributionConfig.
        :param aliases: The aliases of this StreamingDistributionConfig.
        :param comment: The comment of this StreamingDistributionConfig.
        :param logging: The logging of this StreamingDistributionConfig.
        :param trusted_signers: The trusted_signers of this StreamingDistributionConfig.
        :param price_class: The price_class of this StreamingDistributionConfig.
        :param enabled: The enabled of this StreamingDistributionConfig.
        """
        self.openapi_types = {
            'caller_reference': str,
            's3_origin': CreateStreamingDistribution20200531RequestStreamingDistributionConfigS3Origin,
            'aliases': CreateStreamingDistribution20200531RequestStreamingDistributionConfigAliases,
            'comment': str,
            'logging': CreateStreamingDistribution20200531RequestStreamingDistributionConfigLogging,
            'trusted_signers': CreateStreamingDistribution20200531RequestStreamingDistributionConfigTrustedSigners,
            'price_class': PriceClass,
            'enabled': bool
        }

        self.attribute_map = {
            'caller_reference': 'CallerReference',
            's3_origin': 'S3Origin',
            'aliases': 'Aliases',
            'comment': 'Comment',
            'logging': 'Logging',
            'trusted_signers': 'TrustedSigners',
            'price_class': 'PriceClass',
            'enabled': 'Enabled'
        }

        self._caller_reference = caller_reference
        self._s3_origin = s3_origin
        self._aliases = aliases
        self._comment = comment
        self._logging = logging
        self._trusted_signers = trusted_signers
        self._price_class = price_class
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingDistributionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingDistributionConfig of this StreamingDistributionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller_reference(self):
        """Gets the caller_reference of this StreamingDistributionConfig.


        :return: The caller_reference of this StreamingDistributionConfig.
        :rtype: str
        """
        return self._caller_reference

    @caller_reference.setter
    def caller_reference(self, caller_reference):
        """Sets the caller_reference of this StreamingDistributionConfig.


        :param caller_reference: The caller_reference of this StreamingDistributionConfig.
        :type caller_reference: str
        """
        if caller_reference is None:
            raise ValueError("Invalid value for `caller_reference`, must not be `None`")

        self._caller_reference = caller_reference

    @property
    def s3_origin(self):
        """Gets the s3_origin of this StreamingDistributionConfig.


        :return: The s3_origin of this StreamingDistributionConfig.
        :rtype: CreateStreamingDistribution20200531RequestStreamingDistributionConfigS3Origin
        """
        return self._s3_origin

    @s3_origin.setter
    def s3_origin(self, s3_origin):
        """Sets the s3_origin of this StreamingDistributionConfig.


        :param s3_origin: The s3_origin of this StreamingDistributionConfig.
        :type s3_origin: CreateStreamingDistribution20200531RequestStreamingDistributionConfigS3Origin
        """
        if s3_origin is None:
            raise ValueError("Invalid value for `s3_origin`, must not be `None`")

        self._s3_origin = s3_origin

    @property
    def aliases(self):
        """Gets the aliases of this StreamingDistributionConfig.


        :return: The aliases of this StreamingDistributionConfig.
        :rtype: CreateStreamingDistribution20200531RequestStreamingDistributionConfigAliases
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this StreamingDistributionConfig.


        :param aliases: The aliases of this StreamingDistributionConfig.
        :type aliases: CreateStreamingDistribution20200531RequestStreamingDistributionConfigAliases
        """

        self._aliases = aliases

    @property
    def comment(self):
        """Gets the comment of this StreamingDistributionConfig.


        :return: The comment of this StreamingDistributionConfig.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this StreamingDistributionConfig.


        :param comment: The comment of this StreamingDistributionConfig.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def logging(self):
        """Gets the logging of this StreamingDistributionConfig.


        :return: The logging of this StreamingDistributionConfig.
        :rtype: CreateStreamingDistribution20200531RequestStreamingDistributionConfigLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this StreamingDistributionConfig.


        :param logging: The logging of this StreamingDistributionConfig.
        :type logging: CreateStreamingDistribution20200531RequestStreamingDistributionConfigLogging
        """

        self._logging = logging

    @property
    def trusted_signers(self):
        """Gets the trusted_signers of this StreamingDistributionConfig.


        :return: The trusted_signers of this StreamingDistributionConfig.
        :rtype: CreateStreamingDistribution20200531RequestStreamingDistributionConfigTrustedSigners
        """
        return self._trusted_signers

    @trusted_signers.setter
    def trusted_signers(self, trusted_signers):
        """Sets the trusted_signers of this StreamingDistributionConfig.


        :param trusted_signers: The trusted_signers of this StreamingDistributionConfig.
        :type trusted_signers: CreateStreamingDistribution20200531RequestStreamingDistributionConfigTrustedSigners
        """
        if trusted_signers is None:
            raise ValueError("Invalid value for `trusted_signers`, must not be `None`")

        self._trusted_signers = trusted_signers

    @property
    def price_class(self):
        """Gets the price_class of this StreamingDistributionConfig.


        :return: The price_class of this StreamingDistributionConfig.
        :rtype: PriceClass
        """
        return self._price_class

    @price_class.setter
    def price_class(self, price_class):
        """Sets the price_class of this StreamingDistributionConfig.


        :param price_class: The price_class of this StreamingDistributionConfig.
        :type price_class: PriceClass
        """

        self._price_class = price_class

    @property
    def enabled(self):
        """Gets the enabled of this StreamingDistributionConfig.


        :return: The enabled of this StreamingDistributionConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StreamingDistributionConfig.


        :param enabled: The enabled of this StreamingDistributionConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled
