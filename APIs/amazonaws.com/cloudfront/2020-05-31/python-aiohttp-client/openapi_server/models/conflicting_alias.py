# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConflictingAlias(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, distribution_id: str=None, account_id: str=None):
        """ConflictingAlias - a model defined in OpenAPI

        :param alias: The alias of this ConflictingAlias.
        :param distribution_id: The distribution_id of this ConflictingAlias.
        :param account_id: The account_id of this ConflictingAlias.
        """
        self.openapi_types = {
            'alias': str,
            'distribution_id': str,
            'account_id': str
        }

        self.attribute_map = {
            'alias': 'Alias',
            'distribution_id': 'DistributionId',
            'account_id': 'AccountId'
        }

        self._alias = alias
        self._distribution_id = distribution_id
        self._account_id = account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConflictingAlias':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConflictingAlias of this ConflictingAlias.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this ConflictingAlias.


        :return: The alias of this ConflictingAlias.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ConflictingAlias.


        :param alias: The alias of this ConflictingAlias.
        :type alias: str
        """

        self._alias = alias

    @property
    def distribution_id(self):
        """Gets the distribution_id of this ConflictingAlias.


        :return: The distribution_id of this ConflictingAlias.
        :rtype: str
        """
        return self._distribution_id

    @distribution_id.setter
    def distribution_id(self, distribution_id):
        """Sets the distribution_id of this ConflictingAlias.


        :param distribution_id: The distribution_id of this ConflictingAlias.
        :type distribution_id: str
        """

        self._distribution_id = distribution_id

    @property
    def account_id(self):
        """Gets the account_id of this ConflictingAlias.


        :return: The account_id of this ConflictingAlias.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ConflictingAlias.


        :param account_id: The account_id of this ConflictingAlias.
        :type account_id: str
        """

        self._account_id = account_id
