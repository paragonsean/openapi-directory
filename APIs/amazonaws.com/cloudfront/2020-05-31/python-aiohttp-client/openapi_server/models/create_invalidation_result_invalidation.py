# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invalidation_invalidation_batch import InvalidationInvalidationBatch
from openapi_server import util


class CreateInvalidationResultInvalidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: str=None, create_time: datetime=None, invalidation_batch: InvalidationInvalidationBatch=None):
        """CreateInvalidationResultInvalidation - a model defined in OpenAPI

        :param id: The id of this CreateInvalidationResultInvalidation.
        :param status: The status of this CreateInvalidationResultInvalidation.
        :param create_time: The create_time of this CreateInvalidationResultInvalidation.
        :param invalidation_batch: The invalidation_batch of this CreateInvalidationResultInvalidation.
        """
        self.openapi_types = {
            'id': str,
            'status': str,
            'create_time': datetime,
            'invalidation_batch': InvalidationInvalidationBatch
        }

        self.attribute_map = {
            'id': 'Id',
            'status': 'Status',
            'create_time': 'CreateTime',
            'invalidation_batch': 'InvalidationBatch'
        }

        self._id = id
        self._status = status
        self._create_time = create_time
        self._invalidation_batch = invalidation_batch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInvalidationResultInvalidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateInvalidationResult_Invalidation of this CreateInvalidationResultInvalidation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateInvalidationResultInvalidation.


        :return: The id of this CreateInvalidationResultInvalidation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateInvalidationResultInvalidation.


        :param id: The id of this CreateInvalidationResultInvalidation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this CreateInvalidationResultInvalidation.


        :return: The status of this CreateInvalidationResultInvalidation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateInvalidationResultInvalidation.


        :param status: The status of this CreateInvalidationResultInvalidation.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def create_time(self):
        """Gets the create_time of this CreateInvalidationResultInvalidation.


        :return: The create_time of this CreateInvalidationResultInvalidation.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CreateInvalidationResultInvalidation.


        :param create_time: The create_time of this CreateInvalidationResultInvalidation.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def invalidation_batch(self):
        """Gets the invalidation_batch of this CreateInvalidationResultInvalidation.


        :return: The invalidation_batch of this CreateInvalidationResultInvalidation.
        :rtype: InvalidationInvalidationBatch
        """
        return self._invalidation_batch

    @invalidation_batch.setter
    def invalidation_batch(self, invalidation_batch):
        """Sets the invalidation_batch of this CreateInvalidationResultInvalidation.


        :param invalidation_batch: The invalidation_batch of this CreateInvalidationResultInvalidation.
        :type invalidation_batch: InvalidationInvalidationBatch
        """
        if invalidation_batch is None:
            raise ValueError("Invalid value for `invalidation_batch`, must not be `None`")

        self._invalidation_batch = invalidation_batch
