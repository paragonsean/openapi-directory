# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.continuous_deployment_policy_config import ContinuousDeploymentPolicyConfig
from openapi_server import util


class ContinuousDeploymentPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, last_modified_time: datetime=None, continuous_deployment_policy_config: ContinuousDeploymentPolicyConfig=None):
        """ContinuousDeploymentPolicy - a model defined in OpenAPI

        :param id: The id of this ContinuousDeploymentPolicy.
        :param last_modified_time: The last_modified_time of this ContinuousDeploymentPolicy.
        :param continuous_deployment_policy_config: The continuous_deployment_policy_config of this ContinuousDeploymentPolicy.
        """
        self.openapi_types = {
            'id': str,
            'last_modified_time': datetime,
            'continuous_deployment_policy_config': ContinuousDeploymentPolicyConfig
        }

        self.attribute_map = {
            'id': 'Id',
            'last_modified_time': 'LastModifiedTime',
            'continuous_deployment_policy_config': 'ContinuousDeploymentPolicyConfig'
        }

        self._id = id
        self._last_modified_time = last_modified_time
        self._continuous_deployment_policy_config = continuous_deployment_policy_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinuousDeploymentPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinuousDeploymentPolicy of this ContinuousDeploymentPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ContinuousDeploymentPolicy.


        :return: The id of this ContinuousDeploymentPolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContinuousDeploymentPolicy.


        :param id: The id of this ContinuousDeploymentPolicy.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ContinuousDeploymentPolicy.


        :return: The last_modified_time of this ContinuousDeploymentPolicy.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ContinuousDeploymentPolicy.


        :param last_modified_time: The last_modified_time of this ContinuousDeploymentPolicy.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def continuous_deployment_policy_config(self):
        """Gets the continuous_deployment_policy_config of this ContinuousDeploymentPolicy.


        :return: The continuous_deployment_policy_config of this ContinuousDeploymentPolicy.
        :rtype: ContinuousDeploymentPolicyConfig
        """
        return self._continuous_deployment_policy_config

    @continuous_deployment_policy_config.setter
    def continuous_deployment_policy_config(self, continuous_deployment_policy_config):
        """Sets the continuous_deployment_policy_config of this ContinuousDeploymentPolicy.


        :param continuous_deployment_policy_config: The continuous_deployment_policy_config of this ContinuousDeploymentPolicy.
        :type continuous_deployment_policy_config: ContinuousDeploymentPolicyConfig
        """
        if continuous_deployment_policy_config is None:
            raise ValueError("Invalid value for `continuous_deployment_policy_config`, must not be `None`")

        self._continuous_deployment_policy_config = continuous_deployment_policy_config
