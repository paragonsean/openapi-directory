# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndPointKinesisStreamConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, stream_arn: str=None):
        """EndPointKinesisStreamConfig - a model defined in OpenAPI

        :param role_arn: The role_arn of this EndPointKinesisStreamConfig.
        :param stream_arn: The stream_arn of this EndPointKinesisStreamConfig.
        """
        self.openapi_types = {
            'role_arn': str,
            'stream_arn': str
        }

        self.attribute_map = {
            'role_arn': 'RoleARN',
            'stream_arn': 'StreamARN'
        }

        self._role_arn = role_arn
        self._stream_arn = stream_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndPointKinesisStreamConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndPoint_KinesisStreamConfig of this EndPointKinesisStreamConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this EndPointKinesisStreamConfig.


        :return: The role_arn of this EndPointKinesisStreamConfig.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this EndPointKinesisStreamConfig.


        :param role_arn: The role_arn of this EndPointKinesisStreamConfig.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def stream_arn(self):
        """Gets the stream_arn of this EndPointKinesisStreamConfig.


        :return: The stream_arn of this EndPointKinesisStreamConfig.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this EndPointKinesisStreamConfig.


        :param stream_arn: The stream_arn of this EndPointKinesisStreamConfig.
        :type stream_arn: str
        """
        if stream_arn is None:
            raise ValueError("Invalid value for `stream_arn`, must not be `None`")

        self._stream_arn = stream_arn
