# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.continuous_deployment_policy_type import ContinuousDeploymentPolicyType
from openapi_server.models.traffic_config_single_header_config import TrafficConfigSingleHeaderConfig
from openapi_server.models.traffic_config_single_weight_config import TrafficConfigSingleWeightConfig
from openapi_server import util


class TrafficConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, single_weight_config: TrafficConfigSingleWeightConfig=None, single_header_config: TrafficConfigSingleHeaderConfig=None, type: ContinuousDeploymentPolicyType=None):
        """TrafficConfig - a model defined in OpenAPI

        :param single_weight_config: The single_weight_config of this TrafficConfig.
        :param single_header_config: The single_header_config of this TrafficConfig.
        :param type: The type of this TrafficConfig.
        """
        self.openapi_types = {
            'single_weight_config': TrafficConfigSingleWeightConfig,
            'single_header_config': TrafficConfigSingleHeaderConfig,
            'type': ContinuousDeploymentPolicyType
        }

        self.attribute_map = {
            'single_weight_config': 'SingleWeightConfig',
            'single_header_config': 'SingleHeaderConfig',
            'type': 'Type'
        }

        self._single_weight_config = single_weight_config
        self._single_header_config = single_header_config
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficConfig of this TrafficConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def single_weight_config(self):
        """Gets the single_weight_config of this TrafficConfig.


        :return: The single_weight_config of this TrafficConfig.
        :rtype: TrafficConfigSingleWeightConfig
        """
        return self._single_weight_config

    @single_weight_config.setter
    def single_weight_config(self, single_weight_config):
        """Sets the single_weight_config of this TrafficConfig.


        :param single_weight_config: The single_weight_config of this TrafficConfig.
        :type single_weight_config: TrafficConfigSingleWeightConfig
        """

        self._single_weight_config = single_weight_config

    @property
    def single_header_config(self):
        """Gets the single_header_config of this TrafficConfig.


        :return: The single_header_config of this TrafficConfig.
        :rtype: TrafficConfigSingleHeaderConfig
        """
        return self._single_header_config

    @single_header_config.setter
    def single_header_config(self, single_header_config):
        """Sets the single_header_config of this TrafficConfig.


        :param single_header_config: The single_header_config of this TrafficConfig.
        :type single_header_config: TrafficConfigSingleHeaderConfig
        """

        self._single_header_config = single_header_config

    @property
    def type(self):
        """Gets the type of this TrafficConfig.


        :return: The type of this TrafficConfig.
        :rtype: ContinuousDeploymentPolicyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrafficConfig.


        :param type: The type of this TrafficConfig.
        :type type: ContinuousDeploymentPolicyType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
