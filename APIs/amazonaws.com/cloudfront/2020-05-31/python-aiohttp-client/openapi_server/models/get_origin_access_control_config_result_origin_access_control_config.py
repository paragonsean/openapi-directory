# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.origin_access_control_origin_types import OriginAccessControlOriginTypes
from openapi_server.models.origin_access_control_signing_behaviors import OriginAccessControlSigningBehaviors
from openapi_server.models.origin_access_control_signing_protocols import OriginAccessControlSigningProtocols
from openapi_server import util


class GetOriginAccessControlConfigResultOriginAccessControlConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, signing_protocol: OriginAccessControlSigningProtocols=None, signing_behavior: OriginAccessControlSigningBehaviors=None, origin_access_control_origin_type: OriginAccessControlOriginTypes=None):
        """GetOriginAccessControlConfigResultOriginAccessControlConfig - a model defined in OpenAPI

        :param name: The name of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :param description: The description of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :param signing_protocol: The signing_protocol of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :param signing_behavior: The signing_behavior of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :param origin_access_control_origin_type: The origin_access_control_origin_type of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'signing_protocol': OriginAccessControlSigningProtocols,
            'signing_behavior': OriginAccessControlSigningBehaviors,
            'origin_access_control_origin_type': OriginAccessControlOriginTypes
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'signing_protocol': 'SigningProtocol',
            'signing_behavior': 'SigningBehavior',
            'origin_access_control_origin_type': 'OriginAccessControlOriginType'
        }

        self._name = name
        self._description = description
        self._signing_protocol = signing_protocol
        self._signing_behavior = signing_behavior
        self._origin_access_control_origin_type = origin_access_control_origin_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOriginAccessControlConfigResultOriginAccessControlConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetOriginAccessControlConfigResult_OriginAccessControlConfig of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :return: The name of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :param name: The name of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :return: The description of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :param description: The description of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :type description: str
        """

        self._description = description

    @property
    def signing_protocol(self):
        """Gets the signing_protocol of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :return: The signing_protocol of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :rtype: OriginAccessControlSigningProtocols
        """
        return self._signing_protocol

    @signing_protocol.setter
    def signing_protocol(self, signing_protocol):
        """Sets the signing_protocol of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :param signing_protocol: The signing_protocol of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :type signing_protocol: OriginAccessControlSigningProtocols
        """
        if signing_protocol is None:
            raise ValueError("Invalid value for `signing_protocol`, must not be `None`")

        self._signing_protocol = signing_protocol

    @property
    def signing_behavior(self):
        """Gets the signing_behavior of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :return: The signing_behavior of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :rtype: OriginAccessControlSigningBehaviors
        """
        return self._signing_behavior

    @signing_behavior.setter
    def signing_behavior(self, signing_behavior):
        """Sets the signing_behavior of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :param signing_behavior: The signing_behavior of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :type signing_behavior: OriginAccessControlSigningBehaviors
        """
        if signing_behavior is None:
            raise ValueError("Invalid value for `signing_behavior`, must not be `None`")

        self._signing_behavior = signing_behavior

    @property
    def origin_access_control_origin_type(self):
        """Gets the origin_access_control_origin_type of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :return: The origin_access_control_origin_type of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :rtype: OriginAccessControlOriginTypes
        """
        return self._origin_access_control_origin_type

    @origin_access_control_origin_type.setter
    def origin_access_control_origin_type(self, origin_access_control_origin_type):
        """Sets the origin_access_control_origin_type of this GetOriginAccessControlConfigResultOriginAccessControlConfig.


        :param origin_access_control_origin_type: The origin_access_control_origin_type of this GetOriginAccessControlConfigResultOriginAccessControlConfig.
        :type origin_access_control_origin_type: OriginAccessControlOriginTypes
        """
        if origin_access_control_origin_type is None:
            raise ValueError("Invalid value for `origin_access_control_origin_type`, must not be `None`")

        self._origin_access_control_origin_type = origin_access_control_origin_type
