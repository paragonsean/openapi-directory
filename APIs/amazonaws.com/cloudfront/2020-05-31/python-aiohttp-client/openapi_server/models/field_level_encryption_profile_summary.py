# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_field_level_encryption_profile20200531_request_field_level_encryption_profile_config_encryption_entities import CreateFieldLevelEncryptionProfile20200531RequestFieldLevelEncryptionProfileConfigEncryptionEntities
from openapi_server import util


class FieldLevelEncryptionProfileSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, last_modified_time: datetime=None, name: str=None, encryption_entities: CreateFieldLevelEncryptionProfile20200531RequestFieldLevelEncryptionProfileConfigEncryptionEntities=None, comment: str=None):
        """FieldLevelEncryptionProfileSummary - a model defined in OpenAPI

        :param id: The id of this FieldLevelEncryptionProfileSummary.
        :param last_modified_time: The last_modified_time of this FieldLevelEncryptionProfileSummary.
        :param name: The name of this FieldLevelEncryptionProfileSummary.
        :param encryption_entities: The encryption_entities of this FieldLevelEncryptionProfileSummary.
        :param comment: The comment of this FieldLevelEncryptionProfileSummary.
        """
        self.openapi_types = {
            'id': str,
            'last_modified_time': datetime,
            'name': str,
            'encryption_entities': CreateFieldLevelEncryptionProfile20200531RequestFieldLevelEncryptionProfileConfigEncryptionEntities,
            'comment': str
        }

        self.attribute_map = {
            'id': 'Id',
            'last_modified_time': 'LastModifiedTime',
            'name': 'Name',
            'encryption_entities': 'EncryptionEntities',
            'comment': 'Comment'
        }

        self._id = id
        self._last_modified_time = last_modified_time
        self._name = name
        self._encryption_entities = encryption_entities
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldLevelEncryptionProfileSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldLevelEncryptionProfileSummary of this FieldLevelEncryptionProfileSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FieldLevelEncryptionProfileSummary.


        :return: The id of this FieldLevelEncryptionProfileSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldLevelEncryptionProfileSummary.


        :param id: The id of this FieldLevelEncryptionProfileSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this FieldLevelEncryptionProfileSummary.


        :return: The last_modified_time of this FieldLevelEncryptionProfileSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this FieldLevelEncryptionProfileSummary.


        :param last_modified_time: The last_modified_time of this FieldLevelEncryptionProfileSummary.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def name(self):
        """Gets the name of this FieldLevelEncryptionProfileSummary.


        :return: The name of this FieldLevelEncryptionProfileSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldLevelEncryptionProfileSummary.


        :param name: The name of this FieldLevelEncryptionProfileSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def encryption_entities(self):
        """Gets the encryption_entities of this FieldLevelEncryptionProfileSummary.


        :return: The encryption_entities of this FieldLevelEncryptionProfileSummary.
        :rtype: CreateFieldLevelEncryptionProfile20200531RequestFieldLevelEncryptionProfileConfigEncryptionEntities
        """
        return self._encryption_entities

    @encryption_entities.setter
    def encryption_entities(self, encryption_entities):
        """Sets the encryption_entities of this FieldLevelEncryptionProfileSummary.


        :param encryption_entities: The encryption_entities of this FieldLevelEncryptionProfileSummary.
        :type encryption_entities: CreateFieldLevelEncryptionProfile20200531RequestFieldLevelEncryptionProfileConfigEncryptionEntities
        """
        if encryption_entities is None:
            raise ValueError("Invalid value for `encryption_entities`, must not be `None`")

        self._encryption_entities = encryption_entities

    @property
    def comment(self):
        """Gets the comment of this FieldLevelEncryptionProfileSummary.


        :return: The comment of this FieldLevelEncryptionProfileSummary.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this FieldLevelEncryptionProfileSummary.


        :param comment: The comment of this FieldLevelEncryptionProfileSummary.
        :type comment: str
        """

        self._comment = comment
