# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameters_in_cache_key_and_forwarded_to_origin_cookies_config import ParametersInCacheKeyAndForwardedToOriginCookiesConfig
from openapi_server.models.parameters_in_cache_key_and_forwarded_to_origin_headers_config import ParametersInCacheKeyAndForwardedToOriginHeadersConfig
from openapi_server.models.parameters_in_cache_key_and_forwarded_to_origin_query_strings_config import ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig
from openapi_server import util


class CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_accept_encoding_gzip: bool=None, enable_accept_encoding_brotli: bool=None, headers_config: ParametersInCacheKeyAndForwardedToOriginHeadersConfig=None, cookies_config: ParametersInCacheKeyAndForwardedToOriginCookiesConfig=None, query_strings_config: ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig=None):
        """CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin - a model defined in OpenAPI

        :param enable_accept_encoding_gzip: The enable_accept_encoding_gzip of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :param enable_accept_encoding_brotli: The enable_accept_encoding_brotli of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :param headers_config: The headers_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :param cookies_config: The cookies_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :param query_strings_config: The query_strings_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        """
        self.openapi_types = {
            'enable_accept_encoding_gzip': bool,
            'enable_accept_encoding_brotli': bool,
            'headers_config': ParametersInCacheKeyAndForwardedToOriginHeadersConfig,
            'cookies_config': ParametersInCacheKeyAndForwardedToOriginCookiesConfig,
            'query_strings_config': ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig
        }

        self.attribute_map = {
            'enable_accept_encoding_gzip': 'EnableAcceptEncodingGzip',
            'enable_accept_encoding_brotli': 'EnableAcceptEncodingBrotli',
            'headers_config': 'HeadersConfig',
            'cookies_config': 'CookiesConfig',
            'query_strings_config': 'QueryStringsConfig'
        }

        self._enable_accept_encoding_gzip = enable_accept_encoding_gzip
        self._enable_accept_encoding_brotli = enable_accept_encoding_brotli
        self._headers_config = headers_config
        self._cookies_config = cookies_config
        self._query_strings_config = query_strings_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCachePolicy2020_05_31_request_CachePolicyConfig_ParametersInCacheKeyAndForwardedToOrigin of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_accept_encoding_gzip(self):
        """Gets the enable_accept_encoding_gzip of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :return: The enable_accept_encoding_gzip of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :rtype: bool
        """
        return self._enable_accept_encoding_gzip

    @enable_accept_encoding_gzip.setter
    def enable_accept_encoding_gzip(self, enable_accept_encoding_gzip):
        """Sets the enable_accept_encoding_gzip of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :param enable_accept_encoding_gzip: The enable_accept_encoding_gzip of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :type enable_accept_encoding_gzip: bool
        """
        if enable_accept_encoding_gzip is None:
            raise ValueError("Invalid value for `enable_accept_encoding_gzip`, must not be `None`")

        self._enable_accept_encoding_gzip = enable_accept_encoding_gzip

    @property
    def enable_accept_encoding_brotli(self):
        """Gets the enable_accept_encoding_brotli of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :return: The enable_accept_encoding_brotli of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :rtype: bool
        """
        return self._enable_accept_encoding_brotli

    @enable_accept_encoding_brotli.setter
    def enable_accept_encoding_brotli(self, enable_accept_encoding_brotli):
        """Sets the enable_accept_encoding_brotli of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :param enable_accept_encoding_brotli: The enable_accept_encoding_brotli of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :type enable_accept_encoding_brotli: bool
        """

        self._enable_accept_encoding_brotli = enable_accept_encoding_brotli

    @property
    def headers_config(self):
        """Gets the headers_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :return: The headers_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :rtype: ParametersInCacheKeyAndForwardedToOriginHeadersConfig
        """
        return self._headers_config

    @headers_config.setter
    def headers_config(self, headers_config):
        """Sets the headers_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :param headers_config: The headers_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :type headers_config: ParametersInCacheKeyAndForwardedToOriginHeadersConfig
        """
        if headers_config is None:
            raise ValueError("Invalid value for `headers_config`, must not be `None`")

        self._headers_config = headers_config

    @property
    def cookies_config(self):
        """Gets the cookies_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :return: The cookies_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :rtype: ParametersInCacheKeyAndForwardedToOriginCookiesConfig
        """
        return self._cookies_config

    @cookies_config.setter
    def cookies_config(self, cookies_config):
        """Sets the cookies_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :param cookies_config: The cookies_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :type cookies_config: ParametersInCacheKeyAndForwardedToOriginCookiesConfig
        """
        if cookies_config is None:
            raise ValueError("Invalid value for `cookies_config`, must not be `None`")

        self._cookies_config = cookies_config

    @property
    def query_strings_config(self):
        """Gets the query_strings_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :return: The query_strings_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :rtype: ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig
        """
        return self._query_strings_config

    @query_strings_config.setter
    def query_strings_config(self, query_strings_config):
        """Sets the query_strings_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.


        :param query_strings_config: The query_strings_config of this CreateCachePolicy20200531RequestCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin.
        :type query_strings_config: ParametersInCacheKeyAndForwardedToOriginQueryStringsConfig
        """
        if query_strings_config is None:
            raise ValueError("Invalid value for `query_strings_config`, must not be `None`")

        self._query_strings_config = query_strings_config
