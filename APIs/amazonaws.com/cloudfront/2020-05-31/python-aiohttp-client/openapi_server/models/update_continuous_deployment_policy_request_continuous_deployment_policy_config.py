# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_continuous_deployment_policy20200531_request_continuous_deployment_policy_config_staging_distribution_dns_names import CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigStagingDistributionDnsNames
from openapi_server.models.create_continuous_deployment_policy20200531_request_continuous_deployment_policy_config_traffic_config import CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigTrafficConfig
from openapi_server import util


class UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, staging_distribution_dns_names: CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigStagingDistributionDnsNames=None, enabled: bool=None, traffic_config: CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigTrafficConfig=None):
        """UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig - a model defined in OpenAPI

        :param staging_distribution_dns_names: The staging_distribution_dns_names of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        :param enabled: The enabled of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        :param traffic_config: The traffic_config of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        """
        self.openapi_types = {
            'staging_distribution_dns_names': CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigStagingDistributionDnsNames,
            'enabled': bool,
            'traffic_config': CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigTrafficConfig
        }

        self.attribute_map = {
            'staging_distribution_dns_names': 'StagingDistributionDnsNames',
            'enabled': 'Enabled',
            'traffic_config': 'TrafficConfig'
        }

        self._staging_distribution_dns_names = staging_distribution_dns_names
        self._enabled = enabled
        self._traffic_config = traffic_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContinuousDeploymentPolicyRequest_ContinuousDeploymentPolicyConfig of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def staging_distribution_dns_names(self):
        """Gets the staging_distribution_dns_names of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.


        :return: The staging_distribution_dns_names of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        :rtype: CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigStagingDistributionDnsNames
        """
        return self._staging_distribution_dns_names

    @staging_distribution_dns_names.setter
    def staging_distribution_dns_names(self, staging_distribution_dns_names):
        """Sets the staging_distribution_dns_names of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.


        :param staging_distribution_dns_names: The staging_distribution_dns_names of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        :type staging_distribution_dns_names: CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigStagingDistributionDnsNames
        """
        if staging_distribution_dns_names is None:
            raise ValueError("Invalid value for `staging_distribution_dns_names`, must not be `None`")

        self._staging_distribution_dns_names = staging_distribution_dns_names

    @property
    def enabled(self):
        """Gets the enabled of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.


        :return: The enabled of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.


        :param enabled: The enabled of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def traffic_config(self):
        """Gets the traffic_config of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.


        :return: The traffic_config of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        :rtype: CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigTrafficConfig
        """
        return self._traffic_config

    @traffic_config.setter
    def traffic_config(self, traffic_config):
        """Sets the traffic_config of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.


        :param traffic_config: The traffic_config of this UpdateContinuousDeploymentPolicyRequestContinuousDeploymentPolicyConfig.
        :type traffic_config: CreateContinuousDeploymentPolicy20200531RequestContinuousDeploymentPolicyConfigTrafficConfig
        """

        self._traffic_config = traffic_config
