# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.function_stage import FunctionStage
from openapi_server import util


class TestFunctionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stage: FunctionStage=None, event_object: str=None):
        """TestFunctionRequest - a model defined in OpenAPI

        :param stage: The stage of this TestFunctionRequest.
        :param event_object: The event_object of this TestFunctionRequest.
        """
        self.openapi_types = {
            'stage': FunctionStage,
            'event_object': str
        }

        self.attribute_map = {
            'stage': 'Stage',
            'event_object': 'EventObject'
        }

        self._stage = stage
        self._event_object = event_object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestFunctionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestFunctionRequest of this TestFunctionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stage(self):
        """Gets the stage of this TestFunctionRequest.


        :return: The stage of this TestFunctionRequest.
        :rtype: FunctionStage
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this TestFunctionRequest.


        :param stage: The stage of this TestFunctionRequest.
        :type stage: FunctionStage
        """

        self._stage = stage

    @property
    def event_object(self):
        """Gets the event_object of this TestFunctionRequest.


        :return: The event_object of this TestFunctionRequest.
        :rtype: str
        """
        return self._event_object

    @event_object.setter
    def event_object(self, event_object):
        """Sets the event_object of this TestFunctionRequest.


        :param event_object: The event_object of this TestFunctionRequest.
        :type event_object: str
        """
        if event_object is None:
            raise ValueError("Invalid value for `event_object`, must not be `None`")

        self._event_object = event_object
