# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListDistributionsByRealtimeLogConfig20200531Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, marker: str=None, max_items: str=None, realtime_log_config_name: str=None, realtime_log_config_arn: str=None):
        """ListDistributionsByRealtimeLogConfig20200531Request - a model defined in OpenAPI

        :param marker: The marker of this ListDistributionsByRealtimeLogConfig20200531Request.
        :param max_items: The max_items of this ListDistributionsByRealtimeLogConfig20200531Request.
        :param realtime_log_config_name: The realtime_log_config_name of this ListDistributionsByRealtimeLogConfig20200531Request.
        :param realtime_log_config_arn: The realtime_log_config_arn of this ListDistributionsByRealtimeLogConfig20200531Request.
        """
        self.openapi_types = {
            'marker': str,
            'max_items': str,
            'realtime_log_config_name': str,
            'realtime_log_config_arn': str
        }

        self.attribute_map = {
            'marker': 'Marker',
            'max_items': 'MaxItems',
            'realtime_log_config_name': 'RealtimeLogConfigName',
            'realtime_log_config_arn': 'RealtimeLogConfigArn'
        }

        self._marker = marker
        self._max_items = max_items
        self._realtime_log_config_name = realtime_log_config_name
        self._realtime_log_config_arn = realtime_log_config_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDistributionsByRealtimeLogConfig20200531Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDistributionsByRealtimeLogConfig2020_05_31_request of this ListDistributionsByRealtimeLogConfig20200531Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def marker(self):
        """Gets the marker of this ListDistributionsByRealtimeLogConfig20200531Request.

        Use this field when paginating results to indicate where to begin in your list of distributions. The response includes distributions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.

        :return: The marker of this ListDistributionsByRealtimeLogConfig20200531Request.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this ListDistributionsByRealtimeLogConfig20200531Request.

        Use this field when paginating results to indicate where to begin in your list of distributions. The response includes distributions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.

        :param marker: The marker of this ListDistributionsByRealtimeLogConfig20200531Request.
        :type marker: str
        """

        self._marker = marker

    @property
    def max_items(self):
        """Gets the max_items of this ListDistributionsByRealtimeLogConfig20200531Request.

        The maximum number of distributions that you want in the response.

        :return: The max_items of this ListDistributionsByRealtimeLogConfig20200531Request.
        :rtype: str
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this ListDistributionsByRealtimeLogConfig20200531Request.

        The maximum number of distributions that you want in the response.

        :param max_items: The max_items of this ListDistributionsByRealtimeLogConfig20200531Request.
        :type max_items: str
        """

        self._max_items = max_items

    @property
    def realtime_log_config_name(self):
        """Gets the realtime_log_config_name of this ListDistributionsByRealtimeLogConfig20200531Request.

        The name of the real-time log configuration whose associated distributions you want to list.

        :return: The realtime_log_config_name of this ListDistributionsByRealtimeLogConfig20200531Request.
        :rtype: str
        """
        return self._realtime_log_config_name

    @realtime_log_config_name.setter
    def realtime_log_config_name(self, realtime_log_config_name):
        """Sets the realtime_log_config_name of this ListDistributionsByRealtimeLogConfig20200531Request.

        The name of the real-time log configuration whose associated distributions you want to list.

        :param realtime_log_config_name: The realtime_log_config_name of this ListDistributionsByRealtimeLogConfig20200531Request.
        :type realtime_log_config_name: str
        """

        self._realtime_log_config_name = realtime_log_config_name

    @property
    def realtime_log_config_arn(self):
        """Gets the realtime_log_config_arn of this ListDistributionsByRealtimeLogConfig20200531Request.

        The Amazon Resource Name (ARN) of the real-time log configuration whose associated distributions you want to list.

        :return: The realtime_log_config_arn of this ListDistributionsByRealtimeLogConfig20200531Request.
        :rtype: str
        """
        return self._realtime_log_config_arn

    @realtime_log_config_arn.setter
    def realtime_log_config_arn(self, realtime_log_config_arn):
        """Sets the realtime_log_config_arn of this ListDistributionsByRealtimeLogConfig20200531Request.

        The Amazon Resource Name (ARN) of the real-time log configuration whose associated distributions you want to list.

        :param realtime_log_config_arn: The realtime_log_config_arn of this ListDistributionsByRealtimeLogConfig20200531Request.
        :type realtime_log_config_arn: str
        """

        self._realtime_log_config_arn = realtime_log_config_arn
