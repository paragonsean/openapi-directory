# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.function_summary_function_config import FunctionSummaryFunctionConfig
from openapi_server.models.function_summary_function_metadata import FunctionSummaryFunctionMetadata
from openapi_server import util


class CreateFunctionResultFunctionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, status: str=None, function_config: FunctionSummaryFunctionConfig=None, function_metadata: FunctionSummaryFunctionMetadata=None):
        """CreateFunctionResultFunctionSummary - a model defined in OpenAPI

        :param name: The name of this CreateFunctionResultFunctionSummary.
        :param status: The status of this CreateFunctionResultFunctionSummary.
        :param function_config: The function_config of this CreateFunctionResultFunctionSummary.
        :param function_metadata: The function_metadata of this CreateFunctionResultFunctionSummary.
        """
        self.openapi_types = {
            'name': str,
            'status': str,
            'function_config': FunctionSummaryFunctionConfig,
            'function_metadata': FunctionSummaryFunctionMetadata
        }

        self.attribute_map = {
            'name': 'Name',
            'status': 'Status',
            'function_config': 'FunctionConfig',
            'function_metadata': 'FunctionMetadata'
        }

        self._name = name
        self._status = status
        self._function_config = function_config
        self._function_metadata = function_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFunctionResultFunctionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFunctionResult_FunctionSummary of this CreateFunctionResultFunctionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateFunctionResultFunctionSummary.


        :return: The name of this CreateFunctionResultFunctionSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFunctionResultFunctionSummary.


        :param name: The name of this CreateFunctionResultFunctionSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this CreateFunctionResultFunctionSummary.


        :return: The status of this CreateFunctionResultFunctionSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateFunctionResultFunctionSummary.


        :param status: The status of this CreateFunctionResultFunctionSummary.
        :type status: str
        """

        self._status = status

    @property
    def function_config(self):
        """Gets the function_config of this CreateFunctionResultFunctionSummary.


        :return: The function_config of this CreateFunctionResultFunctionSummary.
        :rtype: FunctionSummaryFunctionConfig
        """
        return self._function_config

    @function_config.setter
    def function_config(self, function_config):
        """Sets the function_config of this CreateFunctionResultFunctionSummary.


        :param function_config: The function_config of this CreateFunctionResultFunctionSummary.
        :type function_config: FunctionSummaryFunctionConfig
        """
        if function_config is None:
            raise ValueError("Invalid value for `function_config`, must not be `None`")

        self._function_config = function_config

    @property
    def function_metadata(self):
        """Gets the function_metadata of this CreateFunctionResultFunctionSummary.


        :return: The function_metadata of this CreateFunctionResultFunctionSummary.
        :rtype: FunctionSummaryFunctionMetadata
        """
        return self._function_metadata

    @function_metadata.setter
    def function_metadata(self, function_metadata):
        """Sets the function_metadata of this CreateFunctionResultFunctionSummary.


        :param function_metadata: The function_metadata of this CreateFunctionResultFunctionSummary.
        :type function_metadata: FunctionSummaryFunctionMetadata
        """
        if function_metadata is None:
            raise ValueError("Invalid value for `function_metadata`, must not be `None`")

        self._function_metadata = function_metadata
