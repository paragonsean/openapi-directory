# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateKeyGroupRequestKeyGroupConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, items: List=None, comment: str=None):
        """CreateKeyGroupRequestKeyGroupConfig - a model defined in OpenAPI

        :param name: The name of this CreateKeyGroupRequestKeyGroupConfig.
        :param items: The items of this CreateKeyGroupRequestKeyGroupConfig.
        :param comment: The comment of this CreateKeyGroupRequestKeyGroupConfig.
        """
        self.openapi_types = {
            'name': str,
            'items': List,
            'comment': str
        }

        self.attribute_map = {
            'name': 'Name',
            'items': 'Items',
            'comment': 'Comment'
        }

        self._name = name
        self._items = items
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKeyGroupRequestKeyGroupConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKeyGroupRequest_KeyGroupConfig of this CreateKeyGroupRequestKeyGroupConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateKeyGroupRequestKeyGroupConfig.


        :return: The name of this CreateKeyGroupRequestKeyGroupConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateKeyGroupRequestKeyGroupConfig.


        :param name: The name of this CreateKeyGroupRequestKeyGroupConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def items(self):
        """Gets the items of this CreateKeyGroupRequestKeyGroupConfig.


        :return: The items of this CreateKeyGroupRequestKeyGroupConfig.
        :rtype: List
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CreateKeyGroupRequestKeyGroupConfig.


        :param items: The items of this CreateKeyGroupRequestKeyGroupConfig.
        :type items: List
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def comment(self):
        """Gets the comment of this CreateKeyGroupRequestKeyGroupConfig.


        :return: The comment of this CreateKeyGroupRequestKeyGroupConfig.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreateKeyGroupRequestKeyGroupConfig.


        :param comment: The comment of this CreateKeyGroupRequestKeyGroupConfig.
        :type comment: str
        """

        self._comment = comment
