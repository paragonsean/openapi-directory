# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_cache_policy20200531_request_cache_policy_config import CreateCachePolicy20200531RequestCachePolicyConfig
from openapi_server import util


class CreateCachePolicy20200531Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_policy_config: CreateCachePolicy20200531RequestCachePolicyConfig=None):
        """CreateCachePolicy20200531Request - a model defined in OpenAPI

        :param cache_policy_config: The cache_policy_config of this CreateCachePolicy20200531Request.
        """
        self.openapi_types = {
            'cache_policy_config': CreateCachePolicy20200531RequestCachePolicyConfig
        }

        self.attribute_map = {
            'cache_policy_config': 'CachePolicyConfig'
        }

        self._cache_policy_config = cache_policy_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCachePolicy20200531Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCachePolicy2020_05_31_request of this CreateCachePolicy20200531Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_policy_config(self):
        """Gets the cache_policy_config of this CreateCachePolicy20200531Request.


        :return: The cache_policy_config of this CreateCachePolicy20200531Request.
        :rtype: CreateCachePolicy20200531RequestCachePolicyConfig
        """
        return self._cache_policy_config

    @cache_policy_config.setter
    def cache_policy_config(self, cache_policy_config):
        """Sets the cache_policy_config of this CreateCachePolicy20200531Request.


        :param cache_policy_config: The cache_policy_config of this CreateCachePolicy20200531Request.
        :type cache_policy_config: CreateCachePolicy20200531RequestCachePolicyConfig
        """
        if cache_policy_config is None:
            raise ValueError("Invalid value for `cache_policy_config`, must not be `None`")

        self._cache_policy_config = cache_policy_config
