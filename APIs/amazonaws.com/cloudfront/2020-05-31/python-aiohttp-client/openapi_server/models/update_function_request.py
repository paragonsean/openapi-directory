# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_function_request_function_config import UpdateFunctionRequestFunctionConfig
from openapi_server import util


class UpdateFunctionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, function_config: UpdateFunctionRequestFunctionConfig=None, function_code: str=None):
        """UpdateFunctionRequest - a model defined in OpenAPI

        :param function_config: The function_config of this UpdateFunctionRequest.
        :param function_code: The function_code of this UpdateFunctionRequest.
        """
        self.openapi_types = {
            'function_config': UpdateFunctionRequestFunctionConfig,
            'function_code': str
        }

        self.attribute_map = {
            'function_config': 'FunctionConfig',
            'function_code': 'FunctionCode'
        }

        self._function_config = function_config
        self._function_code = function_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFunctionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFunctionRequest of this UpdateFunctionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def function_config(self):
        """Gets the function_config of this UpdateFunctionRequest.


        :return: The function_config of this UpdateFunctionRequest.
        :rtype: UpdateFunctionRequestFunctionConfig
        """
        return self._function_config

    @function_config.setter
    def function_config(self, function_config):
        """Sets the function_config of this UpdateFunctionRequest.


        :param function_config: The function_config of this UpdateFunctionRequest.
        :type function_config: UpdateFunctionRequestFunctionConfig
        """
        if function_config is None:
            raise ValueError("Invalid value for `function_config`, must not be `None`")

        self._function_config = function_config

    @property
    def function_code(self):
        """Gets the function_code of this UpdateFunctionRequest.


        :return: The function_code of this UpdateFunctionRequest.
        :rtype: str
        """
        return self._function_code

    @function_code.setter
    def function_code(self, function_code):
        """Sets the function_code of this UpdateFunctionRequest.


        :param function_code: The function_code of this UpdateFunctionRequest.
        :type function_code: str
        """
        if function_code is None:
            raise ValueError("Invalid value for `function_code`, must not be `None`")

        self._function_code = function_code
