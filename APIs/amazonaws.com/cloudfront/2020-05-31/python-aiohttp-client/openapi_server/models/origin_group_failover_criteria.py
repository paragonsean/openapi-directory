# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.origin_group_failover_criteria_status_codes import OriginGroupFailoverCriteriaStatusCodes
from openapi_server import util


class OriginGroupFailoverCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_codes: OriginGroupFailoverCriteriaStatusCodes=None):
        """OriginGroupFailoverCriteria - a model defined in OpenAPI

        :param status_codes: The status_codes of this OriginGroupFailoverCriteria.
        """
        self.openapi_types = {
            'status_codes': OriginGroupFailoverCriteriaStatusCodes
        }

        self.attribute_map = {
            'status_codes': 'StatusCodes'
        }

        self._status_codes = status_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginGroupFailoverCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginGroup_FailoverCriteria of this OriginGroupFailoverCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_codes(self):
        """Gets the status_codes of this OriginGroupFailoverCriteria.


        :return: The status_codes of this OriginGroupFailoverCriteria.
        :rtype: OriginGroupFailoverCriteriaStatusCodes
        """
        return self._status_codes

    @status_codes.setter
    def status_codes(self, status_codes):
        """Sets the status_codes of this OriginGroupFailoverCriteria.


        :param status_codes: The status_codes of this OriginGroupFailoverCriteria.
        :type status_codes: OriginGroupFailoverCriteriaStatusCodes
        """
        if status_codes is None:
            raise ValueError("Invalid value for `status_codes`, must not be `None`")

        self._status_codes = status_codes
