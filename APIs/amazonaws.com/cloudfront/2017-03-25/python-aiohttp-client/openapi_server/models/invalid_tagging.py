# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvalidTagging(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None):
        """InvalidTagging - a model defined in OpenAPI

        :param message: The message of this InvalidTagging.
        """
        self.openapi_types = {
            'message': str
        }

        self.attribute_map = {
            'message': 'Message'
        }

        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvalidTagging':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvalidTagging of this InvalidTagging.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this InvalidTagging.


        :return: The message of this InvalidTagging.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InvalidTagging.


        :param message: The message of this InvalidTagging.
        :type message: str
        """

        self._message = message
