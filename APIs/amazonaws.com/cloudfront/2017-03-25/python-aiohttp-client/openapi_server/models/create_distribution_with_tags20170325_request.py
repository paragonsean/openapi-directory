# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_distribution_with_tags20170325_request_distribution_config_with_tags import CreateDistributionWithTags20170325RequestDistributionConfigWithTags
from openapi_server import util


class CreateDistributionWithTags20170325Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distribution_config_with_tags: CreateDistributionWithTags20170325RequestDistributionConfigWithTags=None):
        """CreateDistributionWithTags20170325Request - a model defined in OpenAPI

        :param distribution_config_with_tags: The distribution_config_with_tags of this CreateDistributionWithTags20170325Request.
        """
        self.openapi_types = {
            'distribution_config_with_tags': CreateDistributionWithTags20170325RequestDistributionConfigWithTags
        }

        self.attribute_map = {
            'distribution_config_with_tags': 'DistributionConfigWithTags'
        }

        self._distribution_config_with_tags = distribution_config_with_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDistributionWithTags20170325Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDistributionWithTags2017_03_25_request of this CreateDistributionWithTags20170325Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distribution_config_with_tags(self):
        """Gets the distribution_config_with_tags of this CreateDistributionWithTags20170325Request.


        :return: The distribution_config_with_tags of this CreateDistributionWithTags20170325Request.
        :rtype: CreateDistributionWithTags20170325RequestDistributionConfigWithTags
        """
        return self._distribution_config_with_tags

    @distribution_config_with_tags.setter
    def distribution_config_with_tags(self, distribution_config_with_tags):
        """Sets the distribution_config_with_tags of this CreateDistributionWithTags20170325Request.


        :param distribution_config_with_tags: The distribution_config_with_tags of this CreateDistributionWithTags20170325Request.
        :type distribution_config_with_tags: CreateDistributionWithTags20170325RequestDistributionConfigWithTags
        """
        if distribution_config_with_tags is None:
            raise ValueError("Invalid value for `distribution_config_with_tags`, must not be `None`")

        self._distribution_config_with_tags = distribution_config_with_tags
