/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2017-03-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessDenied.h"
#include "OAIBatchTooLarge.h"
#include "OAICNAMEAlreadyExists.h"
#include "OAICloudFrontOriginAccessIdentityAlreadyExists.h"
#include "OAICloudFrontOriginAccessIdentityInUse.h"
#include "OAICreateCloudFrontOriginAccessIdentity2017_03_25_request.h"
#include "OAICreateCloudFrontOriginAccessIdentityResult.h"
#include "OAICreateDistribution2017_03_25_request.h"
#include "OAICreateDistributionResult.h"
#include "OAICreateDistributionWithTags2017_03_25_request.h"
#include "OAICreateDistributionWithTagsResult.h"
#include "OAICreateInvalidation2017_03_25_request.h"
#include "OAICreateInvalidationResult.h"
#include "OAICreateStreamingDistribution2017_03_25_request.h"
#include "OAICreateStreamingDistributionResult.h"
#include "OAICreateStreamingDistributionWithTags2017_03_25_request.h"
#include "OAICreateStreamingDistributionWithTagsResult.h"
#include "OAIDistributionAlreadyExists.h"
#include "OAIDistributionNotDisabled.h"
#include "OAIGetCloudFrontOriginAccessIdentityConfigResult.h"
#include "OAIGetCloudFrontOriginAccessIdentityResult.h"
#include "OAIGetDistributionConfigResult.h"
#include "OAIGetDistributionResult.h"
#include "OAIGetInvalidationResult.h"
#include "OAIGetStreamingDistributionConfigResult.h"
#include "OAIGetStreamingDistributionResult.h"
#include "OAIIllegalUpdate.h"
#include "OAIInconsistentQuantities.h"
#include "OAIInvalidArgument.h"
#include "OAIInvalidDefaultRootObject.h"
#include "OAIInvalidErrorCode.h"
#include "OAIInvalidForwardCookies.h"
#include "OAIInvalidGeoRestrictionParameter.h"
#include "OAIInvalidHeadersForS3Origin.h"
#include "OAIInvalidIfMatchVersion.h"
#include "OAIInvalidLambdaFunctionAssociation.h"
#include "OAIInvalidLocationCode.h"
#include "OAIInvalidMinimumProtocolVersion.h"
#include "OAIInvalidOrigin.h"
#include "OAIInvalidOriginAccessIdentity.h"
#include "OAIInvalidOriginKeepaliveTimeout.h"
#include "OAIInvalidOriginReadTimeout.h"
#include "OAIInvalidProtocolSettings.h"
#include "OAIInvalidQueryStringParameters.h"
#include "OAIInvalidRelativePath.h"
#include "OAIInvalidRequiredProtocol.h"
#include "OAIInvalidResponseCode.h"
#include "OAIInvalidTTLOrder.h"
#include "OAIInvalidTagging.h"
#include "OAIInvalidViewerCertificate.h"
#include "OAIInvalidWebACLId.h"
#include "OAIListCloudFrontOriginAccessIdentitiesResult.h"
#include "OAIListDistributionsByWebACLIdResult.h"
#include "OAIListDistributionsResult.h"
#include "OAIListInvalidationsResult.h"
#include "OAIListStreamingDistributionsResult.h"
#include "OAIListTagsForResourceResult.h"
#include "OAIMissingBody.h"
#include "OAINoSuchCloudFrontOriginAccessIdentity.h"
#include "OAINoSuchDistribution.h"
#include "OAINoSuchInvalidation.h"
#include "OAINoSuchOrigin.h"
#include "OAINoSuchResource.h"
#include "OAINoSuchStreamingDistribution.h"
#include "OAIPreconditionFailed.h"
#include "OAIResourceInUse.h"
#include "OAIStreamingDistributionAlreadyExists.h"
#include "OAIStreamingDistributionNotDisabled.h"
#include "OAITagResource2017_03_25_request.h"
#include "OAITooManyCacheBehaviors.h"
#include "OAITooManyCertificates.h"
#include "OAITooManyCloudFrontOriginAccessIdentities.h"
#include "OAITooManyCookieNamesInWhiteList.h"
#include "OAITooManyDistributionCNAMEs.h"
#include "OAITooManyDistributions.h"
#include "OAITooManyDistributionsWithLambdaAssociations.h"
#include "OAITooManyHeadersInForwardedValues.h"
#include "OAITooManyInvalidationsInProgress.h"
#include "OAITooManyLambdaFunctionAssociations.h"
#include "OAITooManyOriginCustomHeaders.h"
#include "OAITooManyOrigins.h"
#include "OAITooManyQueryStringParameters.h"
#include "OAITooManyStreamingDistributionCNAMEs.h"
#include "OAITooManyStreamingDistributions.h"
#include "OAITooManyTrustedSigners.h"
#include "OAITrustedSignerDoesNotExist.h"
#include "OAIUntagResource2017_03_25_request.h"
#include "OAIUpdateCloudFrontOriginAccessIdentityResult.h"
#include "OAIUpdateDistributionResult.h"
#include "OAIUpdateStreamingDistributionResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_cloud_front_origin_access_identity2017_03_25_request OAICreateCloudFrontOriginAccessIdentity2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCloudFrontOriginAccessIdentity20170325(const OAICreateCloudFrontOriginAccessIdentity2017_03_25_request &oai_create_cloud_front_origin_access_identity2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_distribution2017_03_25_request OAICreateDistribution2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistribution20170325(const OAICreateDistribution2017_03_25_request &oai_create_distribution2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_distribution_with_tags2017_03_25_request OAICreateDistributionWithTags2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistributionWithTags20170325(const bool &with_tags, const OAICreateDistributionWithTags2017_03_25_request &oai_create_distribution_with_tags2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  oai_create_invalidation2017_03_25_request OAICreateInvalidation2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createInvalidation20170325(const QString &distribution_id, const OAICreateInvalidation2017_03_25_request &oai_create_invalidation2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_streaming_distribution2017_03_25_request OAICreateStreamingDistribution2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistribution20170325(const OAICreateStreamingDistribution2017_03_25_request &oai_create_streaming_distribution2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_streaming_distribution_with_tags2017_03_25_request OAICreateStreamingDistributionWithTags2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistributionWithTags20170325(const bool &with_tags, const OAICreateStreamingDistributionWithTags2017_03_25_request &oai_create_streaming_distribution_with_tags2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteCloudFrontOriginAccessIdentity20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteDistribution20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  role_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteServiceLinkedRole20170325(const QString &role_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteStreamingDistribution20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentity20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentityConfig20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistribution20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistributionConfig20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInvalidation20170325(const QString &distribution_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistribution20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistributionConfig20170325(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listCloudFrontOriginAccessIdentities20170325(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributions20170325(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_aclid QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributionsByWebACLId20170325(const QString &web_aclid, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listInvalidations20170325(const QString &distribution_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listStreamingDistributions20170325(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource20170325(const QString &resource, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_tag_resource2017_03_25_request OAITagResource2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource20170325(const QString &resource, const QString &operation, const OAITagResource2017_03_25_request &oai_tag_resource2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_untag_resource2017_03_25_request OAIUntagResource2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource20170325(const QString &resource, const QString &operation, const OAIUntagResource2017_03_25_request &oai_untag_resource2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_cloud_front_origin_access_identity2017_03_25_request OAICreateCloudFrontOriginAccessIdentity2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateCloudFrontOriginAccessIdentity20170325(const QString &id, const OAICreateCloudFrontOriginAccessIdentity2017_03_25_request &oai_create_cloud_front_origin_access_identity2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_distribution2017_03_25_request OAICreateDistribution2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateDistribution20170325(const QString &id, const OAICreateDistribution2017_03_25_request &oai_create_distribution2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_streaming_distribution2017_03_25_request OAICreateStreamingDistribution2017_03_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateStreamingDistribution20170325(const QString &id, const OAICreateStreamingDistribution2017_03_25_request &oai_create_streaming_distribution2017_03_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCloudFrontOriginAccessIdentity20170325Callback(OAIHttpRequestWorker *worker);
    void createDistribution20170325Callback(OAIHttpRequestWorker *worker);
    void createDistributionWithTags20170325Callback(OAIHttpRequestWorker *worker);
    void createInvalidation20170325Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistribution20170325Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistributionWithTags20170325Callback(OAIHttpRequestWorker *worker);
    void deleteCloudFrontOriginAccessIdentity20170325Callback(OAIHttpRequestWorker *worker);
    void deleteDistribution20170325Callback(OAIHttpRequestWorker *worker);
    void deleteServiceLinkedRole20170325Callback(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20170325Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20170325Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentityConfig20170325Callback(OAIHttpRequestWorker *worker);
    void getDistribution20170325Callback(OAIHttpRequestWorker *worker);
    void getDistributionConfig20170325Callback(OAIHttpRequestWorker *worker);
    void getInvalidation20170325Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistribution20170325Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistributionConfig20170325Callback(OAIHttpRequestWorker *worker);
    void listCloudFrontOriginAccessIdentities20170325Callback(OAIHttpRequestWorker *worker);
    void listDistributions20170325Callback(OAIHttpRequestWorker *worker);
    void listDistributionsByWebACLId20170325Callback(OAIHttpRequestWorker *worker);
    void listInvalidations20170325Callback(OAIHttpRequestWorker *worker);
    void listStreamingDistributions20170325Callback(OAIHttpRequestWorker *worker);
    void listTagsForResource20170325Callback(OAIHttpRequestWorker *worker);
    void tagResource20170325Callback(OAIHttpRequestWorker *worker);
    void untagResource20170325Callback(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20170325Callback(OAIHttpRequestWorker *worker);
    void updateDistribution20170325Callback(OAIHttpRequestWorker *worker);
    void updateStreamingDistribution20170325Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCloudFrontOriginAccessIdentity20170325Signal(OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20170325Signal(OAICreateDistributionResult summary);
    void createDistributionWithTags20170325Signal(OAICreateDistributionWithTagsResult summary);
    void createInvalidation20170325Signal(OAICreateInvalidationResult summary);
    void createStreamingDistribution20170325Signal(OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20170325Signal(OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20170325Signal();
    void deleteDistribution20170325Signal();
    void deleteServiceLinkedRole20170325Signal();
    void deleteStreamingDistribution20170325Signal();
    void getCloudFrontOriginAccessIdentity20170325Signal(OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20170325Signal(OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20170325Signal(OAIGetDistributionResult summary);
    void getDistributionConfig20170325Signal(OAIGetDistributionConfigResult summary);
    void getInvalidation20170325Signal(OAIGetInvalidationResult summary);
    void getStreamingDistribution20170325Signal(OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20170325Signal(OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20170325Signal(OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20170325Signal(OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20170325Signal(OAIListDistributionsByWebACLIdResult summary);
    void listInvalidations20170325Signal(OAIListInvalidationsResult summary);
    void listStreamingDistributions20170325Signal(OAIListStreamingDistributionsResult summary);
    void listTagsForResource20170325Signal(OAIListTagsForResourceResult summary);
    void tagResource20170325Signal();
    void untagResource20170325Signal();
    void updateCloudFrontOriginAccessIdentity20170325Signal(OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20170325Signal(OAIUpdateDistributionResult summary);
    void updateStreamingDistribution20170325Signal(OAIUpdateStreamingDistributionResult summary);


    void createCloudFrontOriginAccessIdentity20170325SignalFull(OAIHttpRequestWorker *worker, OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20170325SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionResult summary);
    void createDistributionWithTags20170325SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionWithTagsResult summary);
    void createInvalidation20170325SignalFull(OAIHttpRequestWorker *worker, OAICreateInvalidationResult summary);
    void createStreamingDistribution20170325SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20170325SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20170325SignalFull(OAIHttpRequestWorker *worker);
    void deleteDistribution20170325SignalFull(OAIHttpRequestWorker *worker);
    void deleteServiceLinkedRole20170325SignalFull(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20170325SignalFull(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20170325SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20170325SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20170325SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionResult summary);
    void getDistributionConfig20170325SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionConfigResult summary);
    void getInvalidation20170325SignalFull(OAIHttpRequestWorker *worker, OAIGetInvalidationResult summary);
    void getStreamingDistribution20170325SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20170325SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20170325SignalFull(OAIHttpRequestWorker *worker, OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20170325SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20170325SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsByWebACLIdResult summary);
    void listInvalidations20170325SignalFull(OAIHttpRequestWorker *worker, OAIListInvalidationsResult summary);
    void listStreamingDistributions20170325SignalFull(OAIHttpRequestWorker *worker, OAIListStreamingDistributionsResult summary);
    void listTagsForResource20170325SignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResult summary);
    void tagResource20170325SignalFull(OAIHttpRequestWorker *worker);
    void untagResource20170325SignalFull(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20170325SignalFull(OAIHttpRequestWorker *worker, OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20170325SignalFull(OAIHttpRequestWorker *worker, OAIUpdateDistributionResult summary);
    void updateStreamingDistribution20170325SignalFull(OAIHttpRequestWorker *worker, OAIUpdateStreamingDistributionResult summary);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20170325SignalError() instead")
    void createCloudFrontOriginAccessIdentity20170325SignalE(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20170325SignalError(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20170325SignalError() instead")
    void createDistribution20170325SignalE(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20170325SignalError(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20170325SignalError() instead")
    void createDistributionWithTags20170325SignalE(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20170325SignalError(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20170325SignalError() instead")
    void createInvalidation20170325SignalE(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20170325SignalError(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20170325SignalError() instead")
    void createStreamingDistribution20170325SignalE(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20170325SignalError(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20170325SignalError() instead")
    void createStreamingDistributionWithTags20170325SignalE(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20170325SignalError(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20170325SignalError() instead")
    void deleteCloudFrontOriginAccessIdentity20170325SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20170325SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20170325SignalError() instead")
    void deleteDistribution20170325SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20170325SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceLinkedRole20170325SignalError() instead")
    void deleteServiceLinkedRole20170325SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceLinkedRole20170325SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20170325SignalError() instead")
    void deleteStreamingDistribution20170325SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20170325SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20170325SignalError() instead")
    void getCloudFrontOriginAccessIdentity20170325SignalE(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20170325SignalError(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20170325SignalError() instead")
    void getCloudFrontOriginAccessIdentityConfig20170325SignalE(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20170325SignalError(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20170325SignalError() instead")
    void getDistribution20170325SignalE(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20170325SignalError(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20170325SignalError() instead")
    void getDistributionConfig20170325SignalE(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20170325SignalError(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20170325SignalError() instead")
    void getInvalidation20170325SignalE(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20170325SignalError(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20170325SignalError() instead")
    void getStreamingDistribution20170325SignalE(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20170325SignalError(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20170325SignalError() instead")
    void getStreamingDistributionConfig20170325SignalE(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20170325SignalError(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20170325SignalError() instead")
    void listCloudFrontOriginAccessIdentities20170325SignalE(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20170325SignalError(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20170325SignalError() instead")
    void listDistributions20170325SignalE(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20170325SignalError(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20170325SignalError() instead")
    void listDistributionsByWebACLId20170325SignalE(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20170325SignalError(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20170325SignalError() instead")
    void listInvalidations20170325SignalE(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20170325SignalError(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20170325SignalError() instead")
    void listStreamingDistributions20170325SignalE(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20170325SignalError(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20170325SignalError() instead")
    void listTagsForResource20170325SignalE(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20170325SignalError(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20170325SignalError() instead")
    void tagResource20170325SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20170325SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20170325SignalError() instead")
    void untagResource20170325SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20170325SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20170325SignalError() instead")
    void updateCloudFrontOriginAccessIdentity20170325SignalE(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20170325SignalError(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20170325SignalError() instead")
    void updateDistribution20170325SignalE(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20170325SignalError(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20170325SignalError() instead")
    void updateStreamingDistribution20170325SignalE(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20170325SignalError(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20170325SignalErrorFull() instead")
    void createCloudFrontOriginAccessIdentity20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20170325SignalErrorFull() instead")
    void createDistribution20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20170325SignalErrorFull() instead")
    void createDistributionWithTags20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20170325SignalErrorFull() instead")
    void createInvalidation20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20170325SignalErrorFull() instead")
    void createStreamingDistribution20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20170325SignalErrorFull() instead")
    void createStreamingDistributionWithTags20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20170325SignalErrorFull() instead")
    void deleteCloudFrontOriginAccessIdentity20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20170325SignalErrorFull() instead")
    void deleteDistribution20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceLinkedRole20170325SignalErrorFull() instead")
    void deleteServiceLinkedRole20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceLinkedRole20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20170325SignalErrorFull() instead")
    void deleteStreamingDistribution20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20170325SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentity20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20170325SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentityConfig20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20170325SignalErrorFull() instead")
    void getDistribution20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20170325SignalErrorFull() instead")
    void getDistributionConfig20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20170325SignalErrorFull() instead")
    void getInvalidation20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20170325SignalErrorFull() instead")
    void getStreamingDistribution20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20170325SignalErrorFull() instead")
    void getStreamingDistributionConfig20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20170325SignalErrorFull() instead")
    void listCloudFrontOriginAccessIdentities20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20170325SignalErrorFull() instead")
    void listDistributions20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20170325SignalErrorFull() instead")
    void listDistributionsByWebACLId20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20170325SignalErrorFull() instead")
    void listInvalidations20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20170325SignalErrorFull() instead")
    void listStreamingDistributions20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20170325SignalErrorFull() instead")
    void listTagsForResource20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20170325SignalErrorFull() instead")
    void tagResource20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20170325SignalErrorFull() instead")
    void untagResource20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20170325SignalErrorFull() instead")
    void updateCloudFrontOriginAccessIdentity20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20170325SignalErrorFull() instead")
    void updateDistribution20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20170325SignalErrorFull() instead")
    void updateStreamingDistribution20170325SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20170325SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
