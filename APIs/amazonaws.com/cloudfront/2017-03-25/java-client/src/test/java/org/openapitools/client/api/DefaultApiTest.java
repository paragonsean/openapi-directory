/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2017-03-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessDenied;
import org.openapitools.client.model.BatchTooLarge;
import org.openapitools.client.model.CNAMEAlreadyExists;
import org.openapitools.client.model.CloudFrontOriginAccessIdentityAlreadyExists;
import org.openapitools.client.model.CloudFrontOriginAccessIdentityInUse;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentity20170325Request;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.CreateDistribution20170325Request;
import org.openapitools.client.model.CreateDistributionResult;
import org.openapitools.client.model.CreateDistributionWithTags20170325Request;
import org.openapitools.client.model.CreateDistributionWithTagsResult;
import org.openapitools.client.model.CreateInvalidation20170325Request;
import org.openapitools.client.model.CreateInvalidationResult;
import org.openapitools.client.model.CreateStreamingDistribution20170325Request;
import org.openapitools.client.model.CreateStreamingDistributionResult;
import org.openapitools.client.model.CreateStreamingDistributionWithTags20170325Request;
import org.openapitools.client.model.CreateStreamingDistributionWithTagsResult;
import org.openapitools.client.model.DistributionAlreadyExists;
import org.openapitools.client.model.DistributionNotDisabled;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityConfigResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.GetDistributionConfigResult;
import org.openapitools.client.model.GetDistributionResult;
import org.openapitools.client.model.GetInvalidationResult;
import org.openapitools.client.model.GetStreamingDistributionConfigResult;
import org.openapitools.client.model.GetStreamingDistributionResult;
import org.openapitools.client.model.IllegalUpdate;
import org.openapitools.client.model.InconsistentQuantities;
import org.openapitools.client.model.InvalidArgument;
import org.openapitools.client.model.InvalidDefaultRootObject;
import org.openapitools.client.model.InvalidErrorCode;
import org.openapitools.client.model.InvalidForwardCookies;
import org.openapitools.client.model.InvalidGeoRestrictionParameter;
import org.openapitools.client.model.InvalidHeadersForS3Origin;
import org.openapitools.client.model.InvalidIfMatchVersion;
import org.openapitools.client.model.InvalidLambdaFunctionAssociation;
import org.openapitools.client.model.InvalidLocationCode;
import org.openapitools.client.model.InvalidMinimumProtocolVersion;
import org.openapitools.client.model.InvalidOrigin;
import org.openapitools.client.model.InvalidOriginAccessIdentity;
import org.openapitools.client.model.InvalidOriginKeepaliveTimeout;
import org.openapitools.client.model.InvalidOriginReadTimeout;
import org.openapitools.client.model.InvalidProtocolSettings;
import org.openapitools.client.model.InvalidQueryStringParameters;
import org.openapitools.client.model.InvalidRelativePath;
import org.openapitools.client.model.InvalidRequiredProtocol;
import org.openapitools.client.model.InvalidResponseCode;
import org.openapitools.client.model.InvalidTTLOrder;
import org.openapitools.client.model.InvalidTagging;
import org.openapitools.client.model.InvalidViewerCertificate;
import org.openapitools.client.model.InvalidWebACLId;
import org.openapitools.client.model.ListCloudFrontOriginAccessIdentitiesResult;
import org.openapitools.client.model.ListDistributionsByWebACLIdResult;
import org.openapitools.client.model.ListDistributionsResult;
import org.openapitools.client.model.ListInvalidationsResult;
import org.openapitools.client.model.ListStreamingDistributionsResult;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.MissingBody;
import org.openapitools.client.model.NoSuchCloudFrontOriginAccessIdentity;
import org.openapitools.client.model.NoSuchDistribution;
import org.openapitools.client.model.NoSuchInvalidation;
import org.openapitools.client.model.NoSuchOrigin;
import org.openapitools.client.model.NoSuchResource;
import org.openapitools.client.model.NoSuchStreamingDistribution;
import org.openapitools.client.model.PreconditionFailed;
import org.openapitools.client.model.ResourceInUse;
import org.openapitools.client.model.StreamingDistributionAlreadyExists;
import org.openapitools.client.model.StreamingDistributionNotDisabled;
import org.openapitools.client.model.TagResource20170325Request;
import org.openapitools.client.model.TooManyCacheBehaviors;
import org.openapitools.client.model.TooManyCertificates;
import org.openapitools.client.model.TooManyCloudFrontOriginAccessIdentities;
import org.openapitools.client.model.TooManyCookieNamesInWhiteList;
import org.openapitools.client.model.TooManyDistributionCNAMEs;
import org.openapitools.client.model.TooManyDistributions;
import org.openapitools.client.model.TooManyDistributionsWithLambdaAssociations;
import org.openapitools.client.model.TooManyHeadersInForwardedValues;
import org.openapitools.client.model.TooManyInvalidationsInProgress;
import org.openapitools.client.model.TooManyLambdaFunctionAssociations;
import org.openapitools.client.model.TooManyOriginCustomHeaders;
import org.openapitools.client.model.TooManyOrigins;
import org.openapitools.client.model.TooManyQueryStringParameters;
import org.openapitools.client.model.TooManyStreamingDistributionCNAMEs;
import org.openapitools.client.model.TooManyStreamingDistributions;
import org.openapitools.client.model.TooManyTrustedSigners;
import org.openapitools.client.model.TrustedSignerDoesNotExist;
import org.openapitools.client.model.UntagResource20170325Request;
import org.openapitools.client.model.UpdateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.UpdateDistributionResult;
import org.openapitools.client.model.UpdateStreamingDistributionResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCloudFrontOriginAccessIdentity20170325Test() throws ApiException {
        CreateCloudFrontOriginAccessIdentity20170325Request createCloudFrontOriginAccessIdentity20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCloudFrontOriginAccessIdentityResult response = api.createCloudFrontOriginAccessIdentity20170325(createCloudFrontOriginAccessIdentity20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new web distribution. Send a &lt;code&gt;POST&lt;/code&gt; request to the &lt;code&gt;/&lt;i&gt;CloudFront API version&lt;/i&gt;/distribution&lt;/code&gt;/&lt;code&gt;distribution ID&lt;/code&gt; resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDistribution20170325Test() throws ApiException {
        CreateDistribution20170325Request createDistribution20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDistributionResult response = api.createDistribution20170325(createDistribution20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new distribution with tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDistributionWithTags20170325Test() throws ApiException {
        Boolean withTags = null;
        CreateDistributionWithTags20170325Request createDistributionWithTags20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDistributionWithTagsResult response = api.createDistributionWithTags20170325(withTags, createDistributionWithTags20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new invalidation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvalidation20170325Test() throws ApiException {
        String distributionId = null;
        CreateInvalidation20170325Request createInvalidation20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInvalidationResult response = api.createInvalidation20170325(distributionId, createInvalidation20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new RMTP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. &lt;/p&gt; &lt;p&gt;To create a new web distribution, submit a &lt;code&gt;POST&lt;/code&gt; request to the &lt;i&gt;CloudFront API version&lt;/i&gt;/distribution resource. The request body must include a document with a &lt;i&gt;StreamingDistributionConfig&lt;/i&gt; element. The response echoes the &lt;code&gt;StreamingDistributionConfig&lt;/code&gt; element and returns other information about the RTMP distribution.&lt;/p&gt; &lt;p&gt;To get the status of your request, use the &lt;i&gt;GET StreamingDistribution&lt;/i&gt; API action. When the value of &lt;code&gt;Enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;, your distribution is ready. A distribution usually deploys in less than 15 minutes.&lt;/p&gt; &lt;p&gt;For more information about web distributions, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\&quot;&gt;Working with RTMP Distributions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values specified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingDistribution20170325Test() throws ApiException {
        CreateStreamingDistribution20170325Request createStreamingDistribution20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStreamingDistributionResult response = api.createStreamingDistribution20170325(createStreamingDistribution20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new streaming distribution with tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingDistributionWithTags20170325Test() throws ApiException {
        Boolean withTags = null;
        CreateStreamingDistributionWithTags20170325Request createStreamingDistributionWithTags20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStreamingDistributionWithTagsResult response = api.createStreamingDistributionWithTags20170325(withTags, createStreamingDistributionWithTags20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an origin access identity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCloudFrontOriginAccessIdentity20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteCloudFrontOriginAccessIdentity20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Delete a distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDistribution20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteDistribution20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceLinkedRole20170325Test() throws ApiException {
        String roleName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteServiceLinkedRole20170325(roleName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamingDistribution20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteStreamingDistribution20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Get the information about an origin access identity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFrontOriginAccessIdentity20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCloudFrontOriginAccessIdentityResult response = api.getCloudFrontOriginAccessIdentity20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about an origin access identity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFrontOriginAccessIdentityConfig20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCloudFrontOriginAccessIdentityConfigResult response = api.getCloudFrontOriginAccessIdentityConfig20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the information about a distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistribution20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionResult response = api.getDistribution20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about a distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionConfig20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionConfigResult response = api.getDistributionConfig20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the information about an invalidation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvalidation20170325Test() throws ApiException {
        String distributionId = null;
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInvalidationResult response = api.getInvalidation20170325(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingDistribution20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingDistributionResult response = api.getStreamingDistribution20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about a streaming distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingDistributionConfig20170325Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingDistributionConfigResult response = api.getStreamingDistributionConfig20170325(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists origin access identities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCloudFrontOriginAccessIdentities20170325Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListCloudFrontOriginAccessIdentitiesResult response = api.listCloudFrontOriginAccessIdentities20170325(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List distributions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributions20170325Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsResult response = api.listDistributions20170325(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributionsByWebACLId20170325Test() throws ApiException {
        String webACLId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsByWebACLIdResult response = api.listDistributionsByWebACLId20170325(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * Lists invalidation batches. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInvalidations20170325Test() throws ApiException {
        String distributionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListInvalidationsResult response = api.listInvalidations20170325(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List streaming distributions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamingDistributions20170325Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListStreamingDistributionsResult response = api.listStreamingDistributions20170325(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List tags for a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResource20170325Test() throws ApiException {
        String resource = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResult response = api.listTagsForResource20170325(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add tags to a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResource20170325Test() throws ApiException {
        String resource = null;
        String operation = null;
        TagResource20170325Request tagResource20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource20170325(resource, operation, tagResource20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove tags from a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResource20170325Test() throws ApiException {
        String resource = null;
        String operation = null;
        UntagResource20170325Request untagResource20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource20170325(resource, operation, untagResource20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update an origin access identity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCloudFrontOriginAccessIdentity20170325Test() throws ApiException {
        String id = null;
        CreateCloudFrontOriginAccessIdentity20170325Request createCloudFrontOriginAccessIdentity20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateCloudFrontOriginAccessIdentityResult response = api.updateCloudFrontOriginAccessIdentity20170325(id, createCloudFrontOriginAccessIdentity20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the configuration for a web distribution. Perform the following steps.&lt;/p&gt; &lt;p&gt;For information about updating a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating-console.html\&quot;&gt;Creating or Updating a Web Distribution Using the CloudFront Console &lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;GetDistributionConfig&lt;/a&gt; request to get the current configuration and an &lt;code&gt;Etag&lt;/code&gt; header for the distribution.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you update the distribution again, you need to get a new &lt;code&gt;Etag&lt;/code&gt; header.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GetDistributionConfig&lt;/code&gt; request to include the desired changes. You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;. If you try to change this value, CloudFront returns an &lt;code&gt;IllegalUpdate&lt;/code&gt; error.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The new configuration replaces the existing configuration; the values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into the existing configuration. When you add, delete, or replace values in an element that allows multiple values (for example, &lt;code&gt;CNAME&lt;/code&gt;), you must specify all of the values that you want to appear in the updated distribution. In addition, you must update the corresponding &lt;code&gt;Quantity&lt;/code&gt; element.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to update the configuration for your distribution:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the request body, include the XML document that you updated in Step 2. The request body must include an XML document with a &lt;code&gt;DistributionConfig&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GetDistributionConfig&lt;/code&gt; request in Step 1.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;UpdateDistribution&lt;/code&gt; request to confirm that the configuration was successfully updated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optional: Submit a &lt;a&gt;GetDistribution&lt;/a&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a distribution. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values you&#39;re actually specifying.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDistribution20170325Test() throws ApiException {
        String id = null;
        CreateDistribution20170325Request createDistribution20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateDistributionResult response = api.updateDistribution20170325(id, createDistribution20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update a streaming distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamingDistribution20170325Test() throws ApiException {
        String id = null;
        CreateStreamingDistribution20170325Request createStreamingDistribution20170325Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateStreamingDistributionResult response = api.updateStreamingDistribution20170325(id, createStreamingDistribution20170325Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

}
