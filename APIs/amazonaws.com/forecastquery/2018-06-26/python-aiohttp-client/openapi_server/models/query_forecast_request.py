# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryForecastRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forecast_arn: str=None, start_date: str=None, end_date: str=None, filters: Dict=None, next_token: str=None):
        """QueryForecastRequest - a model defined in OpenAPI

        :param forecast_arn: The forecast_arn of this QueryForecastRequest.
        :param start_date: The start_date of this QueryForecastRequest.
        :param end_date: The end_date of this QueryForecastRequest.
        :param filters: The filters of this QueryForecastRequest.
        :param next_token: The next_token of this QueryForecastRequest.
        """
        self.openapi_types = {
            'forecast_arn': str,
            'start_date': str,
            'end_date': str,
            'filters': Dict,
            'next_token': str
        }

        self.attribute_map = {
            'forecast_arn': 'ForecastArn',
            'start_date': 'StartDate',
            'end_date': 'EndDate',
            'filters': 'Filters',
            'next_token': 'NextToken'
        }

        self._forecast_arn = forecast_arn
        self._start_date = start_date
        self._end_date = end_date
        self._filters = filters
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryForecastRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryForecastRequest of this QueryForecastRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forecast_arn(self):
        """Gets the forecast_arn of this QueryForecastRequest.


        :return: The forecast_arn of this QueryForecastRequest.
        :rtype: str
        """
        return self._forecast_arn

    @forecast_arn.setter
    def forecast_arn(self, forecast_arn):
        """Sets the forecast_arn of this QueryForecastRequest.


        :param forecast_arn: The forecast_arn of this QueryForecastRequest.
        :type forecast_arn: str
        """
        if forecast_arn is None:
            raise ValueError("Invalid value for `forecast_arn`, must not be `None`")

        self._forecast_arn = forecast_arn

    @property
    def start_date(self):
        """Gets the start_date of this QueryForecastRequest.


        :return: The start_date of this QueryForecastRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this QueryForecastRequest.


        :param start_date: The start_date of this QueryForecastRequest.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this QueryForecastRequest.


        :return: The end_date of this QueryForecastRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this QueryForecastRequest.


        :param end_date: The end_date of this QueryForecastRequest.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def filters(self):
        """Gets the filters of this QueryForecastRequest.


        :return: The filters of this QueryForecastRequest.
        :rtype: Dict
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this QueryForecastRequest.


        :param filters: The filters of this QueryForecastRequest.
        :type filters: Dict
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")

        self._filters = filters

    @property
    def next_token(self):
        """Gets the next_token of this QueryForecastRequest.


        :return: The next_token of this QueryForecastRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this QueryForecastRequest.


        :param next_token: The next_token of this QueryForecastRequest.
        :type next_token: str
        """

        self._next_token = next_token
