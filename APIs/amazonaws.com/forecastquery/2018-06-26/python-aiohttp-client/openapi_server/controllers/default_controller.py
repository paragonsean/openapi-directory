from typing import List, Dict
from aiohttp import web

from openapi_server.models.query_forecast_request import QueryForecastRequest
from openapi_server.models.query_forecast_response import QueryForecastResponse
from openapi_server.models.query_what_if_forecast_request import QueryWhatIfForecastRequest
from openapi_server.models.query_what_if_forecast_response import QueryWhatIfForecastResponse
from openapi_server import util


async def query_forecast(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """query_forecast

    &lt;p&gt;Retrieves a forecast for a single item, filtered by the supplied criteria.&lt;/p&gt; &lt;p&gt;The criteria is a key-value pair. The key is either &lt;code&gt;item_id&lt;/code&gt; (or the equivalent non-timestamp, non-target field) from the &lt;code&gt;TARGET_TIME_SERIES&lt;/code&gt; dataset, or one of the forecast dimensions specified as part of the &lt;code&gt;FeaturizationConfig&lt;/code&gt; object.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;QueryForecast&lt;/code&gt; returns the complete date range for the filtered forecast. You can request a specific date range.&lt;/p&gt; &lt;p&gt;To get the full forecast, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html\&quot;&gt;CreateForecastExportJob&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was used to create the predictor.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = QueryForecastRequest.from_dict(body)
    return web.Response(status=200)


async def query_what_if_forecast(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """query_what_if_forecast

    Retrieves a what-if forecast.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = QueryWhatIfForecastRequest.from_dict(body)
    return web.Response(status=200)
