/**
 * Amazon Forecast Query Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueryForecastRequest from '../model/QueryForecastRequest';
import QueryForecastResponse from '../model/QueryForecastResponse';
import QueryWhatIfForecastRequest from '../model/QueryWhatIfForecastRequest';
import QueryWhatIfForecastResponse from '../model/QueryWhatIfForecastResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-06-26
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryForecast operation.
     * @callback module:api/DefaultApi~queryForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a forecast for a single item, filtered by the supplied criteria.</p> <p>The criteria is a key-value pair. The key is either <code>item_id</code> (or the equivalent non-timestamp, non-target field) from the <code>TARGET_TIME_SERIES</code> dataset, or one of the forecast dimensions specified as part of the <code>FeaturizationConfig</code> object.</p> <p>By default, <code>QueryForecast</code> returns the complete date range for the filtered forecast. You can request a specific date range.</p> <p>To get the full forecast, use the <a href=\"https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html\">CreateForecastExportJob</a> operation.</p> <note> <p>The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was used to create the predictor.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/QueryForecastRequest} queryForecastRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~queryForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryForecastResponse}
     */
    queryForecast(xAmzTarget, queryForecastRequest, opts, callback) {
      opts = opts || {};
      let postBody = queryForecastRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling queryForecast");
      }
      // verify the required parameter 'queryForecastRequest' is set
      if (queryForecastRequest === undefined || queryForecastRequest === null) {
        throw new Error("Missing the required parameter 'queryForecastRequest' when calling queryForecast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryForecastResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecastRuntime.QueryForecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryWhatIfForecast operation.
     * @callback module:api/DefaultApi~queryWhatIfForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryWhatIfForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a what-if forecast.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/QueryWhatIfForecastRequest} queryWhatIfForecastRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~queryWhatIfForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryWhatIfForecastResponse}
     */
    queryWhatIfForecast(xAmzTarget, queryWhatIfForecastRequest, opts, callback) {
      opts = opts || {};
      let postBody = queryWhatIfForecastRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling queryWhatIfForecast");
      }
      // verify the required parameter 'queryWhatIfForecastRequest' is set
      if (queryWhatIfForecastRequest === undefined || queryWhatIfForecastRequest === null) {
        throw new Error("Missing the required parameter 'queryWhatIfForecastRequest' when calling queryWhatIfForecast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryWhatIfForecastResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecastRuntime.QueryWhatIfForecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
