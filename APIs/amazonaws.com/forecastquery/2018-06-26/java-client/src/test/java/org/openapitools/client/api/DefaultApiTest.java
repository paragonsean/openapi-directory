/*
 * Amazon Forecast Query Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.QueryForecastRequest;
import org.openapitools.client.model.QueryForecastResponse;
import org.openapitools.client.model.QueryWhatIfForecastRequest;
import org.openapitools.client.model.QueryWhatIfForecastResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Retrieves a forecast for a single item, filtered by the supplied criteria.&lt;/p&gt; &lt;p&gt;The criteria is a key-value pair. The key is either &lt;code&gt;item_id&lt;/code&gt; (or the equivalent non-timestamp, non-target field) from the &lt;code&gt;TARGET_TIME_SERIES&lt;/code&gt; dataset, or one of the forecast dimensions specified as part of the &lt;code&gt;FeaturizationConfig&lt;/code&gt; object.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;QueryForecast&lt;/code&gt; returns the complete date range for the filtered forecast. You can request a specific date range.&lt;/p&gt; &lt;p&gt;To get the full forecast, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html\&quot;&gt;CreateForecastExportJob&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was used to create the predictor.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryForecastTest() throws ApiException {
        String xAmzTarget = null;
        QueryForecastRequest queryForecastRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        QueryForecastResponse response = api.queryForecast(xAmzTarget, queryForecastRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a what-if forecast.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryWhatIfForecastTest() throws ApiException {
        String xAmzTarget = null;
        QueryWhatIfForecastRequest queryWhatIfForecastRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        QueryWhatIfForecastResponse response = api.queryWhatIfForecast(xAmzTarget, queryWhatIfForecastRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
