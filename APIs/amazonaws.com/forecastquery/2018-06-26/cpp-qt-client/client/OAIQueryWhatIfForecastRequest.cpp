/**
 * Amazon Forecast Query Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryWhatIfForecastRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryWhatIfForecastRequest::OAIQueryWhatIfForecastRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryWhatIfForecastRequest::OAIQueryWhatIfForecastRequest() {
    this->initializeModel();
}

OAIQueryWhatIfForecastRequest::~OAIQueryWhatIfForecastRequest() {}

void OAIQueryWhatIfForecastRequest::initializeModel() {

    m_what_if_forecast_arn_isSet = false;
    m_what_if_forecast_arn_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIQueryWhatIfForecastRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryWhatIfForecastRequest::fromJsonObject(QJsonObject json) {

    m_what_if_forecast_arn_isValid = ::OpenAPI::fromJsonValue(m_what_if_forecast_arn, json[QString("WhatIfForecastArn")]);
    m_what_if_forecast_arn_isSet = !json[QString("WhatIfForecastArn")].isNull() && m_what_if_forecast_arn_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIQueryWhatIfForecastRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryWhatIfForecastRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_what_if_forecast_arn_isSet) {
        obj.insert(QString("WhatIfForecastArn"), ::OpenAPI::toJsonValue(m_what_if_forecast_arn));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIQueryWhatIfForecastRequest::getWhatIfForecastArn() const {
    return m_what_if_forecast_arn;
}
void OAIQueryWhatIfForecastRequest::setWhatIfForecastArn(const QString &what_if_forecast_arn) {
    m_what_if_forecast_arn = what_if_forecast_arn;
    m_what_if_forecast_arn_isSet = true;
}

bool OAIQueryWhatIfForecastRequest::is_what_if_forecast_arn_Set() const{
    return m_what_if_forecast_arn_isSet;
}

bool OAIQueryWhatIfForecastRequest::is_what_if_forecast_arn_Valid() const{
    return m_what_if_forecast_arn_isValid;
}

QString OAIQueryWhatIfForecastRequest::getStartDate() const {
    return m_start_date;
}
void OAIQueryWhatIfForecastRequest::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIQueryWhatIfForecastRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIQueryWhatIfForecastRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIQueryWhatIfForecastRequest::getEndDate() const {
    return m_end_date;
}
void OAIQueryWhatIfForecastRequest::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIQueryWhatIfForecastRequest::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIQueryWhatIfForecastRequest::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QMap OAIQueryWhatIfForecastRequest::getFilters() const {
    return m_filters;
}
void OAIQueryWhatIfForecastRequest::setFilters(const QMap &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIQueryWhatIfForecastRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIQueryWhatIfForecastRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIQueryWhatIfForecastRequest::getNextToken() const {
    return m_next_token;
}
void OAIQueryWhatIfForecastRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIQueryWhatIfForecastRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIQueryWhatIfForecastRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIQueryWhatIfForecastRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_what_if_forecast_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryWhatIfForecastRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_what_if_forecast_arn_isValid && m_filters_isValid && true;
}

} // namespace OpenAPI
