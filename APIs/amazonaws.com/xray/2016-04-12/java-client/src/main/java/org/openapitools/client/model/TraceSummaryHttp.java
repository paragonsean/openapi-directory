/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TraceSummaryHttp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TraceSummaryHttp {
  public static final String SERIALIZED_NAME_HTTP_U_R_L = "HttpURL";
  @SerializedName(SERIALIZED_NAME_HTTP_U_R_L)
  private String httpURL;

  public static final String SERIALIZED_NAME_HTTP_STATUS = "HttpStatus";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS)
  private Integer httpStatus;

  public static final String SERIALIZED_NAME_HTTP_METHOD = "HttpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private String httpMethod;

  public static final String SERIALIZED_NAME_USER_AGENT = "UserAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_CLIENT_IP = "ClientIp";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public TraceSummaryHttp() {
  }

  public TraceSummaryHttp httpURL(String httpURL) {
    this.httpURL = httpURL;
    return this;
  }

  /**
   * Get httpURL
   * @return httpURL
   */
  @javax.annotation.Nullable
  public String getHttpURL() {
    return httpURL;
  }

  public void setHttpURL(String httpURL) {
    this.httpURL = httpURL;
  }


  public TraceSummaryHttp httpStatus(Integer httpStatus) {
    this.httpStatus = httpStatus;
    return this;
  }

  /**
   * Get httpStatus
   * @return httpStatus
   */
  @javax.annotation.Nullable
  public Integer getHttpStatus() {
    return httpStatus;
  }

  public void setHttpStatus(Integer httpStatus) {
    this.httpStatus = httpStatus;
  }


  public TraceSummaryHttp httpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * Get httpMethod
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public String getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }


  public TraceSummaryHttp userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public TraceSummaryHttp clientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  /**
   * Get clientIp
   * @return clientIp
   */
  @javax.annotation.Nullable
  public String getClientIp() {
    return clientIp;
  }

  public void setClientIp(String clientIp) {
    this.clientIp = clientIp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceSummaryHttp traceSummaryHttp = (TraceSummaryHttp) o;
    return Objects.equals(this.httpURL, traceSummaryHttp.httpURL) &&
        Objects.equals(this.httpStatus, traceSummaryHttp.httpStatus) &&
        Objects.equals(this.httpMethod, traceSummaryHttp.httpMethod) &&
        Objects.equals(this.userAgent, traceSummaryHttp.userAgent) &&
        Objects.equals(this.clientIp, traceSummaryHttp.clientIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpURL, httpStatus, httpMethod, userAgent, clientIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceSummaryHttp {\n");
    sb.append("    httpURL: ").append(toIndentedString(httpURL)).append("\n");
    sb.append("    httpStatus: ").append(toIndentedString(httpStatus)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HttpURL");
    openapiFields.add("HttpStatus");
    openapiFields.add("HttpMethod");
    openapiFields.add("UserAgent");
    openapiFields.add("ClientIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TraceSummaryHttp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TraceSummaryHttp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TraceSummaryHttp is not found in the empty JSON string", TraceSummaryHttp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TraceSummaryHttp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TraceSummaryHttp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HttpURL`
      if (jsonObj.get("HttpURL") != null && !jsonObj.get("HttpURL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HttpURL"));
      }
      // validate the optional field `HttpStatus`
      if (jsonObj.get("HttpStatus") != null && !jsonObj.get("HttpStatus").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HttpStatus"));
      }
      // validate the optional field `HttpMethod`
      if (jsonObj.get("HttpMethod") != null && !jsonObj.get("HttpMethod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HttpMethod"));
      }
      // validate the optional field `UserAgent`
      if (jsonObj.get("UserAgent") != null && !jsonObj.get("UserAgent").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserAgent"));
      }
      // validate the optional field `ClientIp`
      if (jsonObj.get("ClientIp") != null && !jsonObj.get("ClientIp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientIp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TraceSummaryHttp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TraceSummaryHttp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TraceSummaryHttp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TraceSummaryHttp.class));

       return (TypeAdapter<T>) new TypeAdapter<TraceSummaryHttp>() {
           @Override
           public void write(JsonWriter out, TraceSummaryHttp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TraceSummaryHttp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TraceSummaryHttp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TraceSummaryHttp
   * @throws IOException if the JSON string is invalid with respect to TraceSummaryHttp
   */
  public static TraceSummaryHttp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TraceSummaryHttp.class);
  }

  /**
   * Convert an instance of TraceSummaryHttp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

