/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetTraceSummariesRequestSamplingStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTraceSummariesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTraceSummariesRequest {
  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  /**
   * A parameter to indicate whether to query trace summaries by TraceId or Event time.
   */
  @JsonAdapter(TimeRangeTypeEnum.Adapter.class)
  public enum TimeRangeTypeEnum {
    TRACE_ID("TraceId"),
    
    EVENT("Event");

    private String value;

    TimeRangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeRangeTypeEnum fromValue(String value) {
      for (TimeRangeTypeEnum b : TimeRangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeRangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeRangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeRangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeRangeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeRangeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_RANGE_TYPE = "TimeRangeType";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE_TYPE)
  private TimeRangeTypeEnum timeRangeType;

  public static final String SERIALIZED_NAME_SAMPLING = "Sampling";
  @SerializedName(SERIALIZED_NAME_SAMPLING)
  private Boolean sampling;

  public static final String SERIALIZED_NAME_SAMPLING_STRATEGY = "SamplingStrategy";
  @SerializedName(SERIALIZED_NAME_SAMPLING_STRATEGY)
  private GetTraceSummariesRequestSamplingStrategy samplingStrategy;

  public static final String SERIALIZED_NAME_FILTER_EXPRESSION = "FilterExpression";
  @SerializedName(SERIALIZED_NAME_FILTER_EXPRESSION)
  private String filterExpression;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public GetTraceSummariesRequest() {
  }

  public GetTraceSummariesRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start of the time frame for which to retrieve traces.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public GetTraceSummariesRequest endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end of the time frame for which to retrieve traces.
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public GetTraceSummariesRequest timeRangeType(TimeRangeTypeEnum timeRangeType) {
    this.timeRangeType = timeRangeType;
    return this;
  }

  /**
   * A parameter to indicate whether to query trace summaries by TraceId or Event time.
   * @return timeRangeType
   */
  @javax.annotation.Nullable
  public TimeRangeTypeEnum getTimeRangeType() {
    return timeRangeType;
  }

  public void setTimeRangeType(TimeRangeTypeEnum timeRangeType) {
    this.timeRangeType = timeRangeType;
  }


  public GetTraceSummariesRequest sampling(Boolean sampling) {
    this.sampling = sampling;
    return this;
  }

  /**
   * Set to &lt;code&gt;true&lt;/code&gt; to get summaries for only a subset of available traces.
   * @return sampling
   */
  @javax.annotation.Nullable
  public Boolean getSampling() {
    return sampling;
  }

  public void setSampling(Boolean sampling) {
    this.sampling = sampling;
  }


  public GetTraceSummariesRequest samplingStrategy(GetTraceSummariesRequestSamplingStrategy samplingStrategy) {
    this.samplingStrategy = samplingStrategy;
    return this;
  }

  /**
   * Get samplingStrategy
   * @return samplingStrategy
   */
  @javax.annotation.Nullable
  public GetTraceSummariesRequestSamplingStrategy getSamplingStrategy() {
    return samplingStrategy;
  }

  public void setSamplingStrategy(GetTraceSummariesRequestSamplingStrategy samplingStrategy) {
    this.samplingStrategy = samplingStrategy;
  }


  public GetTraceSummariesRequest filterExpression(String filterExpression) {
    this.filterExpression = filterExpression;
    return this;
  }

  /**
   * Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.
   * @return filterExpression
   */
  @javax.annotation.Nullable
  public String getFilterExpression() {
    return filterExpression;
  }

  public void setFilterExpression(String filterExpression) {
    this.filterExpression = filterExpression;
  }


  public GetTraceSummariesRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Specify the pagination token returned by a previous request to retrieve the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTraceSummariesRequest getTraceSummariesRequest = (GetTraceSummariesRequest) o;
    return Objects.equals(this.startTime, getTraceSummariesRequest.startTime) &&
        Objects.equals(this.endTime, getTraceSummariesRequest.endTime) &&
        Objects.equals(this.timeRangeType, getTraceSummariesRequest.timeRangeType) &&
        Objects.equals(this.sampling, getTraceSummariesRequest.sampling) &&
        Objects.equals(this.samplingStrategy, getTraceSummariesRequest.samplingStrategy) &&
        Objects.equals(this.filterExpression, getTraceSummariesRequest.filterExpression) &&
        Objects.equals(this.nextToken, getTraceSummariesRequest.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, endTime, timeRangeType, sampling, samplingStrategy, filterExpression, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTraceSummariesRequest {\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    timeRangeType: ").append(toIndentedString(timeRangeType)).append("\n");
    sb.append("    sampling: ").append(toIndentedString(sampling)).append("\n");
    sb.append("    samplingStrategy: ").append(toIndentedString(samplingStrategy)).append("\n");
    sb.append("    filterExpression: ").append(toIndentedString(filterExpression)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("TimeRangeType");
    openapiFields.add("Sampling");
    openapiFields.add("SamplingStrategy");
    openapiFields.add("FilterExpression");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StartTime");
    openapiRequiredFields.add("EndTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTraceSummariesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTraceSummariesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTraceSummariesRequest is not found in the empty JSON string", GetTraceSummariesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTraceSummariesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTraceSummariesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTraceSummariesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("TimeRangeType") != null && !jsonObj.get("TimeRangeType").isJsonNull()) && !jsonObj.get("TimeRangeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeRangeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeRangeType").toString()));
      }
      // validate the optional field `TimeRangeType`
      if (jsonObj.get("TimeRangeType") != null && !jsonObj.get("TimeRangeType").isJsonNull()) {
        TimeRangeTypeEnum.validateJsonElement(jsonObj.get("TimeRangeType"));
      }
      // validate the optional field `SamplingStrategy`
      if (jsonObj.get("SamplingStrategy") != null && !jsonObj.get("SamplingStrategy").isJsonNull()) {
        GetTraceSummariesRequestSamplingStrategy.validateJsonElement(jsonObj.get("SamplingStrategy"));
      }
      if ((jsonObj.get("FilterExpression") != null && !jsonObj.get("FilterExpression").isJsonNull()) && !jsonObj.get("FilterExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FilterExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FilterExpression").toString()));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTraceSummariesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTraceSummariesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTraceSummariesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTraceSummariesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTraceSummariesRequest>() {
           @Override
           public void write(JsonWriter out, GetTraceSummariesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTraceSummariesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTraceSummariesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTraceSummariesRequest
   * @throws IOException if the JSON string is invalid with respect to GetTraceSummariesRequest
   */
  public static GetTraceSummariesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTraceSummariesRequest.class);
  }

  /**
   * Convert an instance of GetTraceSummariesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

