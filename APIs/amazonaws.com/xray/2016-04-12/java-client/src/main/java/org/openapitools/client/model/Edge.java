/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EdgeSummaryStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a connection between two services. An edge can be a synchronous connection, such as typical call between client and service, or an asynchronous link, such as a Lambda function which retrieves an event from an SNS queue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Edge {
  public static final String SERIALIZED_NAME_REFERENCE_ID = "ReferenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private Integer referenceId;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_SUMMARY_STATISTICS = "SummaryStatistics";
  @SerializedName(SERIALIZED_NAME_SUMMARY_STATISTICS)
  private EdgeSummaryStatistics summaryStatistics;

  public static final String SERIALIZED_NAME_RESPONSE_TIME_HISTOGRAM = "ResponseTimeHistogram";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME_HISTOGRAM)
  private List responseTimeHistogram;

  public static final String SERIALIZED_NAME_ALIASES = "Aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private List aliases;

  public static final String SERIALIZED_NAME_EDGE_TYPE = "EdgeType";
  @SerializedName(SERIALIZED_NAME_EDGE_TYPE)
  private String edgeType;

  public static final String SERIALIZED_NAME_RECEIVED_EVENT_AGE_HISTOGRAM = "ReceivedEventAgeHistogram";
  @SerializedName(SERIALIZED_NAME_RECEIVED_EVENT_AGE_HISTOGRAM)
  private List receivedEventAgeHistogram;

  public Edge() {
  }

  public Edge referenceId(Integer referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nullable
  public Integer getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(Integer referenceId) {
    this.referenceId = referenceId;
  }


  public Edge startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Edge endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Edge summaryStatistics(EdgeSummaryStatistics summaryStatistics) {
    this.summaryStatistics = summaryStatistics;
    return this;
  }

  /**
   * Get summaryStatistics
   * @return summaryStatistics
   */
  @javax.annotation.Nullable
  public EdgeSummaryStatistics getSummaryStatistics() {
    return summaryStatistics;
  }

  public void setSummaryStatistics(EdgeSummaryStatistics summaryStatistics) {
    this.summaryStatistics = summaryStatistics;
  }


  public Edge responseTimeHistogram(List responseTimeHistogram) {
    this.responseTimeHistogram = responseTimeHistogram;
    return this;
  }

  /**
   * Get responseTimeHistogram
   * @return responseTimeHistogram
   */
  @javax.annotation.Nullable
  public List getResponseTimeHistogram() {
    return responseTimeHistogram;
  }

  public void setResponseTimeHistogram(List responseTimeHistogram) {
    this.responseTimeHistogram = responseTimeHistogram;
  }


  public Edge aliases(List aliases) {
    this.aliases = aliases;
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nullable
  public List getAliases() {
    return aliases;
  }

  public void setAliases(List aliases) {
    this.aliases = aliases;
  }


  public Edge edgeType(String edgeType) {
    this.edgeType = edgeType;
    return this;
  }

  /**
   * Get edgeType
   * @return edgeType
   */
  @javax.annotation.Nullable
  public String getEdgeType() {
    return edgeType;
  }

  public void setEdgeType(String edgeType) {
    this.edgeType = edgeType;
  }


  public Edge receivedEventAgeHistogram(List receivedEventAgeHistogram) {
    this.receivedEventAgeHistogram = receivedEventAgeHistogram;
    return this;
  }

  /**
   * Get receivedEventAgeHistogram
   * @return receivedEventAgeHistogram
   */
  @javax.annotation.Nullable
  public List getReceivedEventAgeHistogram() {
    return receivedEventAgeHistogram;
  }

  public void setReceivedEventAgeHistogram(List receivedEventAgeHistogram) {
    this.receivedEventAgeHistogram = receivedEventAgeHistogram;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Edge edge = (Edge) o;
    return Objects.equals(this.referenceId, edge.referenceId) &&
        Objects.equals(this.startTime, edge.startTime) &&
        Objects.equals(this.endTime, edge.endTime) &&
        Objects.equals(this.summaryStatistics, edge.summaryStatistics) &&
        Objects.equals(this.responseTimeHistogram, edge.responseTimeHistogram) &&
        Objects.equals(this.aliases, edge.aliases) &&
        Objects.equals(this.edgeType, edge.edgeType) &&
        Objects.equals(this.receivedEventAgeHistogram, edge.receivedEventAgeHistogram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceId, startTime, endTime, summaryStatistics, responseTimeHistogram, aliases, edgeType, receivedEventAgeHistogram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Edge {\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    summaryStatistics: ").append(toIndentedString(summaryStatistics)).append("\n");
    sb.append("    responseTimeHistogram: ").append(toIndentedString(responseTimeHistogram)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    edgeType: ").append(toIndentedString(edgeType)).append("\n");
    sb.append("    receivedEventAgeHistogram: ").append(toIndentedString(receivedEventAgeHistogram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReferenceId");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("SummaryStatistics");
    openapiFields.add("ResponseTimeHistogram");
    openapiFields.add("Aliases");
    openapiFields.add("EdgeType");
    openapiFields.add("ReceivedEventAgeHistogram");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Edge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Edge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Edge is not found in the empty JSON string", Edge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Edge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Edge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReferenceId`
      if (jsonObj.get("ReferenceId") != null && !jsonObj.get("ReferenceId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ReferenceId"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `SummaryStatistics`
      if (jsonObj.get("SummaryStatistics") != null && !jsonObj.get("SummaryStatistics").isJsonNull()) {
        EdgeSummaryStatistics.validateJsonElement(jsonObj.get("SummaryStatistics"));
      }
      // validate the optional field `ResponseTimeHistogram`
      if (jsonObj.get("ResponseTimeHistogram") != null && !jsonObj.get("ResponseTimeHistogram").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResponseTimeHistogram"));
      }
      // validate the optional field `Aliases`
      if (jsonObj.get("Aliases") != null && !jsonObj.get("Aliases").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Aliases"));
      }
      // validate the optional field `EdgeType`
      if (jsonObj.get("EdgeType") != null && !jsonObj.get("EdgeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EdgeType"));
      }
      // validate the optional field `ReceivedEventAgeHistogram`
      if (jsonObj.get("ReceivedEventAgeHistogram") != null && !jsonObj.get("ReceivedEventAgeHistogram").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReceivedEventAgeHistogram"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Edge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Edge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Edge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Edge.class));

       return (TypeAdapter<T>) new TypeAdapter<Edge>() {
           @Override
           public void write(JsonWriter out, Edge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Edge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Edge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Edge
   * @throws IOException if the JSON string is invalid with respect to Edge
   */
  public static Edge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Edge.class);
  }

  /**
   * Convert an instance of Edge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

