/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutEncryptionConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutEncryptionConfigRequest {
  public static final String SERIALIZED_NAME_KEY_ID = "KeyId";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private String keyId;

  /**
   * The type of encryption. Set to &lt;code&gt;KMS&lt;/code&gt; to use your own key for encryption. Set to &lt;code&gt;NONE&lt;/code&gt; for default encryption.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NONE("NONE"),
    
    KMS("KMS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public PutEncryptionConfigRequest() {
  }

  public PutEncryptionConfigRequest keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * &lt;p&gt;An Amazon Web Services KMS key in one of the following formats:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Alias&lt;/b&gt; - The name of the key. For example, &lt;code&gt;alias/MyKey&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Key ID&lt;/b&gt; - The KMS key ID of the key. For example, &lt;code&gt;ae4aa6d49-a4d8-9df9-a475-4ff6d7898456&lt;/code&gt;. Amazon Web Services X-Ray does not support asymmetric KMS keys.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;ARN&lt;/b&gt; - The full Amazon Resource Name of the key ID or alias. For example, &lt;code&gt;arn:aws:kms:us-east-2:123456789012:key/ae4aa6d49-a4d8-9df9-a475-4ff6d7898456&lt;/code&gt;. Use this format to specify a key in a different account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Omit this key if you set &lt;code&gt;Type&lt;/code&gt; to &lt;code&gt;NONE&lt;/code&gt;.&lt;/p&gt;
   * @return keyId
   */
  @javax.annotation.Nullable
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }


  public PutEncryptionConfigRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of encryption. Set to &lt;code&gt;KMS&lt;/code&gt; to use your own key for encryption. Set to &lt;code&gt;NONE&lt;/code&gt; for default encryption.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutEncryptionConfigRequest putEncryptionConfigRequest = (PutEncryptionConfigRequest) o;
    return Objects.equals(this.keyId, putEncryptionConfigRequest.keyId) &&
        Objects.equals(this.type, putEncryptionConfigRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutEncryptionConfigRequest {\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("KeyId");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutEncryptionConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutEncryptionConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutEncryptionConfigRequest is not found in the empty JSON string", PutEncryptionConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutEncryptionConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutEncryptionConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutEncryptionConfigRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("KeyId") != null && !jsonObj.get("KeyId").isJsonNull()) && !jsonObj.get("KeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KeyId").toString()));
      }
      if (!jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the required field `Type`
      TypeEnum.validateJsonElement(jsonObj.get("Type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutEncryptionConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutEncryptionConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutEncryptionConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutEncryptionConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutEncryptionConfigRequest>() {
           @Override
           public void write(JsonWriter out, PutEncryptionConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutEncryptionConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutEncryptionConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutEncryptionConfigRequest
   * @throws IOException if the JSON string is invalid with respect to PutEncryptionConfigRequest
   */
  public static PutEncryptionConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutEncryptionConfigRequest.class);
  }

  /**
   * Convert an instance of PutEncryptionConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

