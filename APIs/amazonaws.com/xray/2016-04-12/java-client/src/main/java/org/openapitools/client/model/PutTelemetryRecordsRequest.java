/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TelemetryRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutTelemetryRecordsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutTelemetryRecordsRequest {
  public static final String SERIALIZED_NAME_TELEMETRY_RECORDS = "TelemetryRecords";
  @SerializedName(SERIALIZED_NAME_TELEMETRY_RECORDS)
  private List<TelemetryRecord> telemetryRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_EC2_INSTANCE_ID = "EC2InstanceId";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_ID)
  private String ec2InstanceId;

  public static final String SERIALIZED_NAME_HOSTNAME = "Hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_RESOURCE_A_R_N = "ResourceARN";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_N)
  private String resourceARN;

  public PutTelemetryRecordsRequest() {
  }

  public PutTelemetryRecordsRequest telemetryRecords(List<TelemetryRecord> telemetryRecords) {
    this.telemetryRecords = telemetryRecords;
    return this;
  }

  public PutTelemetryRecordsRequest addTelemetryRecordsItem(TelemetryRecord telemetryRecordsItem) {
    if (this.telemetryRecords == null) {
      this.telemetryRecords = new ArrayList<>();
    }
    this.telemetryRecords.add(telemetryRecordsItem);
    return this;
  }

  /**
   * &lt;p/&gt;
   * @return telemetryRecords
   */
  @javax.annotation.Nonnull
  public List<TelemetryRecord> getTelemetryRecords() {
    return telemetryRecords;
  }

  public void setTelemetryRecords(List<TelemetryRecord> telemetryRecords) {
    this.telemetryRecords = telemetryRecords;
  }


  public PutTelemetryRecordsRequest ec2InstanceId(String ec2InstanceId) {
    this.ec2InstanceId = ec2InstanceId;
    return this;
  }

  /**
   * &lt;p/&gt;
   * @return ec2InstanceId
   */
  @javax.annotation.Nullable
  public String getEc2InstanceId() {
    return ec2InstanceId;
  }

  public void setEc2InstanceId(String ec2InstanceId) {
    this.ec2InstanceId = ec2InstanceId;
  }


  public PutTelemetryRecordsRequest hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * &lt;p/&gt;
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public PutTelemetryRecordsRequest resourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
    return this;
  }

  /**
   * &lt;p/&gt;
   * @return resourceARN
   */
  @javax.annotation.Nullable
  public String getResourceARN() {
    return resourceARN;
  }

  public void setResourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutTelemetryRecordsRequest putTelemetryRecordsRequest = (PutTelemetryRecordsRequest) o;
    return Objects.equals(this.telemetryRecords, putTelemetryRecordsRequest.telemetryRecords) &&
        Objects.equals(this.ec2InstanceId, putTelemetryRecordsRequest.ec2InstanceId) &&
        Objects.equals(this.hostname, putTelemetryRecordsRequest.hostname) &&
        Objects.equals(this.resourceARN, putTelemetryRecordsRequest.resourceARN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(telemetryRecords, ec2InstanceId, hostname, resourceARN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutTelemetryRecordsRequest {\n");
    sb.append("    telemetryRecords: ").append(toIndentedString(telemetryRecords)).append("\n");
    sb.append("    ec2InstanceId: ").append(toIndentedString(ec2InstanceId)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    resourceARN: ").append(toIndentedString(resourceARN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TelemetryRecords");
    openapiFields.add("EC2InstanceId");
    openapiFields.add("Hostname");
    openapiFields.add("ResourceARN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TelemetryRecords");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutTelemetryRecordsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutTelemetryRecordsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutTelemetryRecordsRequest is not found in the empty JSON string", PutTelemetryRecordsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutTelemetryRecordsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutTelemetryRecordsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutTelemetryRecordsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("TelemetryRecords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TelemetryRecords` to be an array in the JSON string but got `%s`", jsonObj.get("TelemetryRecords").toString()));
      }

      JsonArray jsonArraytelemetryRecords = jsonObj.getAsJsonArray("TelemetryRecords");
      // validate the required field `TelemetryRecords` (array)
      for (int i = 0; i < jsonArraytelemetryRecords.size(); i++) {
        TelemetryRecord.validateJsonElement(jsonArraytelemetryRecords.get(i));
      };
      if ((jsonObj.get("EC2InstanceId") != null && !jsonObj.get("EC2InstanceId").isJsonNull()) && !jsonObj.get("EC2InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EC2InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EC2InstanceId").toString()));
      }
      if ((jsonObj.get("Hostname") != null && !jsonObj.get("Hostname").isJsonNull()) && !jsonObj.get("Hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Hostname").toString()));
      }
      if ((jsonObj.get("ResourceARN") != null && !jsonObj.get("ResourceARN").isJsonNull()) && !jsonObj.get("ResourceARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceARN").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutTelemetryRecordsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutTelemetryRecordsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutTelemetryRecordsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutTelemetryRecordsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutTelemetryRecordsRequest>() {
           @Override
           public void write(JsonWriter out, PutTelemetryRecordsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutTelemetryRecordsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutTelemetryRecordsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutTelemetryRecordsRequest
   * @throws IOException if the JSON string is invalid with respect to PutTelemetryRecordsRequest
   */
  public static PutTelemetryRecordsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutTelemetryRecordsRequest.class);
  }

  /**
   * Convert an instance of PutTelemetryRecordsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

