/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EdgeStatistics;
import org.openapitools.client.model.ServiceStatistics;
import org.openapitools.client.model.TimeSeriesServiceStatisticsServiceForecastStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of TimeSeriesStatistic structures.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesServiceStatistics {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_EDGE_SUMMARY_STATISTICS = "EdgeSummaryStatistics";
  @SerializedName(SERIALIZED_NAME_EDGE_SUMMARY_STATISTICS)
  private EdgeStatistics edgeSummaryStatistics;

  public static final String SERIALIZED_NAME_SERVICE_SUMMARY_STATISTICS = "ServiceSummaryStatistics";
  @SerializedName(SERIALIZED_NAME_SERVICE_SUMMARY_STATISTICS)
  private ServiceStatistics serviceSummaryStatistics;

  public static final String SERIALIZED_NAME_SERVICE_FORECAST_STATISTICS = "ServiceForecastStatistics";
  @SerializedName(SERIALIZED_NAME_SERVICE_FORECAST_STATISTICS)
  private TimeSeriesServiceStatisticsServiceForecastStatistics serviceForecastStatistics;

  public static final String SERIALIZED_NAME_RESPONSE_TIME_HISTOGRAM = "ResponseTimeHistogram";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME_HISTOGRAM)
  private List responseTimeHistogram;

  public TimeSeriesServiceStatistics() {
  }

  public TimeSeriesServiceStatistics timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public TimeSeriesServiceStatistics edgeSummaryStatistics(EdgeStatistics edgeSummaryStatistics) {
    this.edgeSummaryStatistics = edgeSummaryStatistics;
    return this;
  }

  /**
   * Get edgeSummaryStatistics
   * @return edgeSummaryStatistics
   */
  @javax.annotation.Nullable
  public EdgeStatistics getEdgeSummaryStatistics() {
    return edgeSummaryStatistics;
  }

  public void setEdgeSummaryStatistics(EdgeStatistics edgeSummaryStatistics) {
    this.edgeSummaryStatistics = edgeSummaryStatistics;
  }


  public TimeSeriesServiceStatistics serviceSummaryStatistics(ServiceStatistics serviceSummaryStatistics) {
    this.serviceSummaryStatistics = serviceSummaryStatistics;
    return this;
  }

  /**
   * Get serviceSummaryStatistics
   * @return serviceSummaryStatistics
   */
  @javax.annotation.Nullable
  public ServiceStatistics getServiceSummaryStatistics() {
    return serviceSummaryStatistics;
  }

  public void setServiceSummaryStatistics(ServiceStatistics serviceSummaryStatistics) {
    this.serviceSummaryStatistics = serviceSummaryStatistics;
  }


  public TimeSeriesServiceStatistics serviceForecastStatistics(TimeSeriesServiceStatisticsServiceForecastStatistics serviceForecastStatistics) {
    this.serviceForecastStatistics = serviceForecastStatistics;
    return this;
  }

  /**
   * Get serviceForecastStatistics
   * @return serviceForecastStatistics
   */
  @javax.annotation.Nullable
  public TimeSeriesServiceStatisticsServiceForecastStatistics getServiceForecastStatistics() {
    return serviceForecastStatistics;
  }

  public void setServiceForecastStatistics(TimeSeriesServiceStatisticsServiceForecastStatistics serviceForecastStatistics) {
    this.serviceForecastStatistics = serviceForecastStatistics;
  }


  public TimeSeriesServiceStatistics responseTimeHistogram(List responseTimeHistogram) {
    this.responseTimeHistogram = responseTimeHistogram;
    return this;
  }

  /**
   * Get responseTimeHistogram
   * @return responseTimeHistogram
   */
  @javax.annotation.Nullable
  public List getResponseTimeHistogram() {
    return responseTimeHistogram;
  }

  public void setResponseTimeHistogram(List responseTimeHistogram) {
    this.responseTimeHistogram = responseTimeHistogram;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesServiceStatistics timeSeriesServiceStatistics = (TimeSeriesServiceStatistics) o;
    return Objects.equals(this.timestamp, timeSeriesServiceStatistics.timestamp) &&
        Objects.equals(this.edgeSummaryStatistics, timeSeriesServiceStatistics.edgeSummaryStatistics) &&
        Objects.equals(this.serviceSummaryStatistics, timeSeriesServiceStatistics.serviceSummaryStatistics) &&
        Objects.equals(this.serviceForecastStatistics, timeSeriesServiceStatistics.serviceForecastStatistics) &&
        Objects.equals(this.responseTimeHistogram, timeSeriesServiceStatistics.responseTimeHistogram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, edgeSummaryStatistics, serviceSummaryStatistics, serviceForecastStatistics, responseTimeHistogram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesServiceStatistics {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    edgeSummaryStatistics: ").append(toIndentedString(edgeSummaryStatistics)).append("\n");
    sb.append("    serviceSummaryStatistics: ").append(toIndentedString(serviceSummaryStatistics)).append("\n");
    sb.append("    serviceForecastStatistics: ").append(toIndentedString(serviceForecastStatistics)).append("\n");
    sb.append("    responseTimeHistogram: ").append(toIndentedString(responseTimeHistogram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Timestamp");
    openapiFields.add("EdgeSummaryStatistics");
    openapiFields.add("ServiceSummaryStatistics");
    openapiFields.add("ServiceForecastStatistics");
    openapiFields.add("ResponseTimeHistogram");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesServiceStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesServiceStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesServiceStatistics is not found in the empty JSON string", TimeSeriesServiceStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesServiceStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesServiceStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      }
      // validate the optional field `EdgeSummaryStatistics`
      if (jsonObj.get("EdgeSummaryStatistics") != null && !jsonObj.get("EdgeSummaryStatistics").isJsonNull()) {
        EdgeStatistics.validateJsonElement(jsonObj.get("EdgeSummaryStatistics"));
      }
      // validate the optional field `ServiceSummaryStatistics`
      if (jsonObj.get("ServiceSummaryStatistics") != null && !jsonObj.get("ServiceSummaryStatistics").isJsonNull()) {
        ServiceStatistics.validateJsonElement(jsonObj.get("ServiceSummaryStatistics"));
      }
      // validate the optional field `ServiceForecastStatistics`
      if (jsonObj.get("ServiceForecastStatistics") != null && !jsonObj.get("ServiceForecastStatistics").isJsonNull()) {
        TimeSeriesServiceStatisticsServiceForecastStatistics.validateJsonElement(jsonObj.get("ServiceForecastStatistics"));
      }
      // validate the optional field `ResponseTimeHistogram`
      if (jsonObj.get("ResponseTimeHistogram") != null && !jsonObj.get("ResponseTimeHistogram").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResponseTimeHistogram"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesServiceStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesServiceStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesServiceStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesServiceStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesServiceStatistics>() {
           @Override
           public void write(JsonWriter out, TimeSeriesServiceStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesServiceStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesServiceStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesServiceStatistics
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesServiceStatistics
   */
  public static TimeSeriesServiceStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesServiceStatistics.class);
  }

  /**
   * Convert an instance of TimeSeriesServiceStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

