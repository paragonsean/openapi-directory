/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InsightClientRequestImpactStatistics;
import org.openapitools.client.model.InsightRootCauseServiceRequestImpactStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * X-Ray reevaluates insights periodically until they are resolved, and records each intermediate state in an event. You can review incident events in the Impact Timeline on the Inspect page in the X-Ray console.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsightEvent {
  public static final String SERIALIZED_NAME_SUMMARY = "Summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_EVENT_TIME = "EventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private OffsetDateTime eventTime;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_IMPACT_STATISTICS = "ClientRequestImpactStatistics";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_IMPACT_STATISTICS)
  private InsightClientRequestImpactStatistics clientRequestImpactStatistics;

  public static final String SERIALIZED_NAME_ROOT_CAUSE_SERVICE_REQUEST_IMPACT_STATISTICS = "RootCauseServiceRequestImpactStatistics";
  @SerializedName(SERIALIZED_NAME_ROOT_CAUSE_SERVICE_REQUEST_IMPACT_STATISTICS)
  private InsightRootCauseServiceRequestImpactStatistics rootCauseServiceRequestImpactStatistics;

  public static final String SERIALIZED_NAME_TOP_ANOMALOUS_SERVICES = "TopAnomalousServices";
  @SerializedName(SERIALIZED_NAME_TOP_ANOMALOUS_SERVICES)
  private List topAnomalousServices;

  public InsightEvent() {
  }

  public InsightEvent summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public InsightEvent eventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * Get eventTime
   * @return eventTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventTime() {
    return eventTime;
  }

  public void setEventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
  }


  public InsightEvent clientRequestImpactStatistics(InsightClientRequestImpactStatistics clientRequestImpactStatistics) {
    this.clientRequestImpactStatistics = clientRequestImpactStatistics;
    return this;
  }

  /**
   * Get clientRequestImpactStatistics
   * @return clientRequestImpactStatistics
   */
  @javax.annotation.Nullable
  public InsightClientRequestImpactStatistics getClientRequestImpactStatistics() {
    return clientRequestImpactStatistics;
  }

  public void setClientRequestImpactStatistics(InsightClientRequestImpactStatistics clientRequestImpactStatistics) {
    this.clientRequestImpactStatistics = clientRequestImpactStatistics;
  }


  public InsightEvent rootCauseServiceRequestImpactStatistics(InsightRootCauseServiceRequestImpactStatistics rootCauseServiceRequestImpactStatistics) {
    this.rootCauseServiceRequestImpactStatistics = rootCauseServiceRequestImpactStatistics;
    return this;
  }

  /**
   * Get rootCauseServiceRequestImpactStatistics
   * @return rootCauseServiceRequestImpactStatistics
   */
  @javax.annotation.Nullable
  public InsightRootCauseServiceRequestImpactStatistics getRootCauseServiceRequestImpactStatistics() {
    return rootCauseServiceRequestImpactStatistics;
  }

  public void setRootCauseServiceRequestImpactStatistics(InsightRootCauseServiceRequestImpactStatistics rootCauseServiceRequestImpactStatistics) {
    this.rootCauseServiceRequestImpactStatistics = rootCauseServiceRequestImpactStatistics;
  }


  public InsightEvent topAnomalousServices(List topAnomalousServices) {
    this.topAnomalousServices = topAnomalousServices;
    return this;
  }

  /**
   * Get topAnomalousServices
   * @return topAnomalousServices
   */
  @javax.annotation.Nullable
  public List getTopAnomalousServices() {
    return topAnomalousServices;
  }

  public void setTopAnomalousServices(List topAnomalousServices) {
    this.topAnomalousServices = topAnomalousServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsightEvent insightEvent = (InsightEvent) o;
    return Objects.equals(this.summary, insightEvent.summary) &&
        Objects.equals(this.eventTime, insightEvent.eventTime) &&
        Objects.equals(this.clientRequestImpactStatistics, insightEvent.clientRequestImpactStatistics) &&
        Objects.equals(this.rootCauseServiceRequestImpactStatistics, insightEvent.rootCauseServiceRequestImpactStatistics) &&
        Objects.equals(this.topAnomalousServices, insightEvent.topAnomalousServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(summary, eventTime, clientRequestImpactStatistics, rootCauseServiceRequestImpactStatistics, topAnomalousServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsightEvent {\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    clientRequestImpactStatistics: ").append(toIndentedString(clientRequestImpactStatistics)).append("\n");
    sb.append("    rootCauseServiceRequestImpactStatistics: ").append(toIndentedString(rootCauseServiceRequestImpactStatistics)).append("\n");
    sb.append("    topAnomalousServices: ").append(toIndentedString(topAnomalousServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Summary");
    openapiFields.add("EventTime");
    openapiFields.add("ClientRequestImpactStatistics");
    openapiFields.add("RootCauseServiceRequestImpactStatistics");
    openapiFields.add("TopAnomalousServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsightEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsightEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsightEvent is not found in the empty JSON string", InsightEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsightEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsightEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Summary`
      if (jsonObj.get("Summary") != null && !jsonObj.get("Summary").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Summary"));
      }
      // validate the optional field `EventTime`
      if (jsonObj.get("EventTime") != null && !jsonObj.get("EventTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EventTime"));
      }
      // validate the optional field `ClientRequestImpactStatistics`
      if (jsonObj.get("ClientRequestImpactStatistics") != null && !jsonObj.get("ClientRequestImpactStatistics").isJsonNull()) {
        InsightClientRequestImpactStatistics.validateJsonElement(jsonObj.get("ClientRequestImpactStatistics"));
      }
      // validate the optional field `RootCauseServiceRequestImpactStatistics`
      if (jsonObj.get("RootCauseServiceRequestImpactStatistics") != null && !jsonObj.get("RootCauseServiceRequestImpactStatistics").isJsonNull()) {
        InsightRootCauseServiceRequestImpactStatistics.validateJsonElement(jsonObj.get("RootCauseServiceRequestImpactStatistics"));
      }
      // validate the optional field `TopAnomalousServices`
      if (jsonObj.get("TopAnomalousServices") != null && !jsonObj.get("TopAnomalousServices").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TopAnomalousServices"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsightEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsightEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsightEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsightEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<InsightEvent>() {
           @Override
           public void write(JsonWriter out, InsightEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsightEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsightEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsightEvent
   * @throws IOException if the JSON string is invalid with respect to InsightEvent
   */
  public static InsightEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsightEvent.class);
  }

  /**
   * Convert an instance of InsightEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

