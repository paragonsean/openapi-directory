/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSamplingRuleRequestSamplingRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSamplingRuleRequestSamplingRule {
  public static final String SERIALIZED_NAME_RULE_NAME = "RuleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_RULE_A_R_N = "RuleARN";
  @SerializedName(SERIALIZED_NAME_RULE_A_R_N)
  private String ruleARN;

  public static final String SERIALIZED_NAME_RESOURCE_A_R_N = "ResourceARN";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_N)
  private String resourceARN;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_FIXED_RATE = "FixedRate";
  @SerializedName(SERIALIZED_NAME_FIXED_RATE)
  private Double fixedRate;

  public static final String SERIALIZED_NAME_RESERVOIR_SIZE = "ReservoirSize";
  @SerializedName(SERIALIZED_NAME_RESERVOIR_SIZE)
  private Integer reservoirSize;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "ServiceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private String serviceType;

  public static final String SERIALIZED_NAME_HOST = "Host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_HT_T_P_METHOD = "HTTPMethod";
  @SerializedName(SERIALIZED_NAME_HT_T_P_METHOD)
  private String htTPMethod;

  public static final String SERIALIZED_NAME_UR_L_PATH = "URLPath";
  @SerializedName(SERIALIZED_NAME_UR_L_PATH)
  private String urLPath;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map attributes;

  public CreateSamplingRuleRequestSamplingRule() {
  }

  public CreateSamplingRuleRequestSamplingRule ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * Get ruleName
   * @return ruleName
   */
  @javax.annotation.Nullable
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public CreateSamplingRuleRequestSamplingRule ruleARN(String ruleARN) {
    this.ruleARN = ruleARN;
    return this;
  }

  /**
   * Get ruleARN
   * @return ruleARN
   */
  @javax.annotation.Nullable
  public String getRuleARN() {
    return ruleARN;
  }

  public void setRuleARN(String ruleARN) {
    this.ruleARN = ruleARN;
  }


  public CreateSamplingRuleRequestSamplingRule resourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
    return this;
  }

  /**
   * Get resourceARN
   * @return resourceARN
   */
  @javax.annotation.Nonnull
  public String getResourceARN() {
    return resourceARN;
  }

  public void setResourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
  }


  public CreateSamplingRuleRequestSamplingRule priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public CreateSamplingRuleRequestSamplingRule fixedRate(Double fixedRate) {
    this.fixedRate = fixedRate;
    return this;
  }

  /**
   * Get fixedRate
   * @return fixedRate
   */
  @javax.annotation.Nonnull
  public Double getFixedRate() {
    return fixedRate;
  }

  public void setFixedRate(Double fixedRate) {
    this.fixedRate = fixedRate;
  }


  public CreateSamplingRuleRequestSamplingRule reservoirSize(Integer reservoirSize) {
    this.reservoirSize = reservoirSize;
    return this;
  }

  /**
   * Get reservoirSize
   * @return reservoirSize
   */
  @javax.annotation.Nonnull
  public Integer getReservoirSize() {
    return reservoirSize;
  }

  public void setReservoirSize(Integer reservoirSize) {
    this.reservoirSize = reservoirSize;
  }


  public CreateSamplingRuleRequestSamplingRule serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public CreateSamplingRuleRequestSamplingRule serviceType(String serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Get serviceType
   * @return serviceType
   */
  @javax.annotation.Nonnull
  public String getServiceType() {
    return serviceType;
  }

  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }


  public CreateSamplingRuleRequestSamplingRule host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public CreateSamplingRuleRequestSamplingRule htTPMethod(String htTPMethod) {
    this.htTPMethod = htTPMethod;
    return this;
  }

  /**
   * Get htTPMethod
   * @return htTPMethod
   */
  @javax.annotation.Nonnull
  public String getHtTPMethod() {
    return htTPMethod;
  }

  public void setHtTPMethod(String htTPMethod) {
    this.htTPMethod = htTPMethod;
  }


  public CreateSamplingRuleRequestSamplingRule urLPath(String urLPath) {
    this.urLPath = urLPath;
    return this;
  }

  /**
   * Get urLPath
   * @return urLPath
   */
  @javax.annotation.Nonnull
  public String getUrLPath() {
    return urLPath;
  }

  public void setUrLPath(String urLPath) {
    this.urLPath = urLPath;
  }


  public CreateSamplingRuleRequestSamplingRule version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public CreateSamplingRuleRequestSamplingRule attributes(Map attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map getAttributes() {
    return attributes;
  }

  public void setAttributes(Map attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSamplingRuleRequestSamplingRule createSamplingRuleRequestSamplingRule = (CreateSamplingRuleRequestSamplingRule) o;
    return Objects.equals(this.ruleName, createSamplingRuleRequestSamplingRule.ruleName) &&
        Objects.equals(this.ruleARN, createSamplingRuleRequestSamplingRule.ruleARN) &&
        Objects.equals(this.resourceARN, createSamplingRuleRequestSamplingRule.resourceARN) &&
        Objects.equals(this.priority, createSamplingRuleRequestSamplingRule.priority) &&
        Objects.equals(this.fixedRate, createSamplingRuleRequestSamplingRule.fixedRate) &&
        Objects.equals(this.reservoirSize, createSamplingRuleRequestSamplingRule.reservoirSize) &&
        Objects.equals(this.serviceName, createSamplingRuleRequestSamplingRule.serviceName) &&
        Objects.equals(this.serviceType, createSamplingRuleRequestSamplingRule.serviceType) &&
        Objects.equals(this.host, createSamplingRuleRequestSamplingRule.host) &&
        Objects.equals(this.htTPMethod, createSamplingRuleRequestSamplingRule.htTPMethod) &&
        Objects.equals(this.urLPath, createSamplingRuleRequestSamplingRule.urLPath) &&
        Objects.equals(this.version, createSamplingRuleRequestSamplingRule.version) &&
        Objects.equals(this.attributes, createSamplingRuleRequestSamplingRule.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleName, ruleARN, resourceARN, priority, fixedRate, reservoirSize, serviceName, serviceType, host, htTPMethod, urLPath, version, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSamplingRuleRequestSamplingRule {\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    ruleARN: ").append(toIndentedString(ruleARN)).append("\n");
    sb.append("    resourceARN: ").append(toIndentedString(resourceARN)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    fixedRate: ").append(toIndentedString(fixedRate)).append("\n");
    sb.append("    reservoirSize: ").append(toIndentedString(reservoirSize)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    htTPMethod: ").append(toIndentedString(htTPMethod)).append("\n");
    sb.append("    urLPath: ").append(toIndentedString(urLPath)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RuleName");
    openapiFields.add("RuleARN");
    openapiFields.add("ResourceARN");
    openapiFields.add("Priority");
    openapiFields.add("FixedRate");
    openapiFields.add("ReservoirSize");
    openapiFields.add("ServiceName");
    openapiFields.add("ServiceType");
    openapiFields.add("Host");
    openapiFields.add("HTTPMethod");
    openapiFields.add("URLPath");
    openapiFields.add("Version");
    openapiFields.add("Attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ResourceARN");
    openapiRequiredFields.add("Priority");
    openapiRequiredFields.add("FixedRate");
    openapiRequiredFields.add("ReservoirSize");
    openapiRequiredFields.add("ServiceName");
    openapiRequiredFields.add("ServiceType");
    openapiRequiredFields.add("Host");
    openapiRequiredFields.add("HTTPMethod");
    openapiRequiredFields.add("URLPath");
    openapiRequiredFields.add("Version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSamplingRuleRequestSamplingRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSamplingRuleRequestSamplingRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSamplingRuleRequestSamplingRule is not found in the empty JSON string", CreateSamplingRuleRequestSamplingRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSamplingRuleRequestSamplingRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSamplingRuleRequestSamplingRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSamplingRuleRequestSamplingRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RuleName`
      if (jsonObj.get("RuleName") != null && !jsonObj.get("RuleName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RuleName"));
      }
      // validate the optional field `RuleARN`
      if (jsonObj.get("RuleARN") != null && !jsonObj.get("RuleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RuleARN"));
      }
      // validate the required field `ResourceARN`
      String.validateJsonElement(jsonObj.get("ResourceARN"));
      // validate the required field `Priority`
      Integer.validateJsonElement(jsonObj.get("Priority"));
      // validate the required field `FixedRate`
      Double.validateJsonElement(jsonObj.get("FixedRate"));
      // validate the required field `ReservoirSize`
      Integer.validateJsonElement(jsonObj.get("ReservoirSize"));
      // validate the required field `ServiceName`
      String.validateJsonElement(jsonObj.get("ServiceName"));
      // validate the required field `ServiceType`
      String.validateJsonElement(jsonObj.get("ServiceType"));
      // validate the required field `Host`
      String.validateJsonElement(jsonObj.get("Host"));
      // validate the required field `HTTPMethod`
      String.validateJsonElement(jsonObj.get("HTTPMethod"));
      // validate the required field `URLPath`
      String.validateJsonElement(jsonObj.get("URLPath"));
      // validate the required field `Version`
      Integer.validateJsonElement(jsonObj.get("Version"));
      // validate the optional field `Attributes`
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Attributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSamplingRuleRequestSamplingRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSamplingRuleRequestSamplingRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSamplingRuleRequestSamplingRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSamplingRuleRequestSamplingRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSamplingRuleRequestSamplingRule>() {
           @Override
           public void write(JsonWriter out, CreateSamplingRuleRequestSamplingRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSamplingRuleRequestSamplingRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSamplingRuleRequestSamplingRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSamplingRuleRequestSamplingRule
   * @throws IOException if the JSON string is invalid with respect to CreateSamplingRuleRequestSamplingRule
   */
  public static CreateSamplingRuleRequestSamplingRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSamplingRuleRequestSamplingRule.class);
  }

  /**
   * Convert an instance of CreateSamplingRuleRequestSamplingRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

