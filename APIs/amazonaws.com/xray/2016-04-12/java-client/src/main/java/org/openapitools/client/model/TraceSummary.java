/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.TraceSummaryEntryPoint;
import org.openapitools.client.model.TraceSummaryHttp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata generated from the segment documents in a trace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TraceSummary {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_RESPONSE_TIME = "ResponseTime";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME)
  private Double responseTime;

  public static final String SERIALIZED_NAME_HAS_FAULT = "HasFault";
  @SerializedName(SERIALIZED_NAME_HAS_FAULT)
  private Boolean hasFault;

  public static final String SERIALIZED_NAME_HAS_ERROR = "HasError";
  @SerializedName(SERIALIZED_NAME_HAS_ERROR)
  private Boolean hasError;

  public static final String SERIALIZED_NAME_HAS_THROTTLE = "HasThrottle";
  @SerializedName(SERIALIZED_NAME_HAS_THROTTLE)
  private Boolean hasThrottle;

  public static final String SERIALIZED_NAME_IS_PARTIAL = "IsPartial";
  @SerializedName(SERIALIZED_NAME_IS_PARTIAL)
  private Boolean isPartial;

  public static final String SERIALIZED_NAME_HTTP = "Http";
  @SerializedName(SERIALIZED_NAME_HTTP)
  private TraceSummaryHttp http;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "Annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map annotations;

  public static final String SERIALIZED_NAME_USERS = "Users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List users;

  public static final String SERIALIZED_NAME_SERVICE_IDS = "ServiceIds";
  @SerializedName(SERIALIZED_NAME_SERVICE_IDS)
  private List serviceIds;

  public static final String SERIALIZED_NAME_RESOURCE_A_R_NS = "ResourceARNs";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_NS)
  private List resourceARNs;

  public static final String SERIALIZED_NAME_INSTANCE_IDS = "InstanceIds";
  @SerializedName(SERIALIZED_NAME_INSTANCE_IDS)
  private List instanceIds;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONES = "AvailabilityZones";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONES)
  private List availabilityZones;

  public static final String SERIALIZED_NAME_ENTRY_POINT = "EntryPoint";
  @SerializedName(SERIALIZED_NAME_ENTRY_POINT)
  private TraceSummaryEntryPoint entryPoint;

  public static final String SERIALIZED_NAME_FAULT_ROOT_CAUSES = "FaultRootCauses";
  @SerializedName(SERIALIZED_NAME_FAULT_ROOT_CAUSES)
  private List faultRootCauses;

  public static final String SERIALIZED_NAME_ERROR_ROOT_CAUSES = "ErrorRootCauses";
  @SerializedName(SERIALIZED_NAME_ERROR_ROOT_CAUSES)
  private List errorRootCauses;

  public static final String SERIALIZED_NAME_RESPONSE_TIME_ROOT_CAUSES = "ResponseTimeRootCauses";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME_ROOT_CAUSES)
  private List responseTimeRootCauses;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_MATCHED_EVENT_TIME = "MatchedEventTime";
  @SerializedName(SERIALIZED_NAME_MATCHED_EVENT_TIME)
  private OffsetDateTime matchedEventTime;

  public TraceSummary() {
  }

  public TraceSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TraceSummary duration(Double duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Double getDuration() {
    return duration;
  }

  public void setDuration(Double duration) {
    this.duration = duration;
  }


  public TraceSummary responseTime(Double responseTime) {
    this.responseTime = responseTime;
    return this;
  }

  /**
   * Get responseTime
   * @return responseTime
   */
  @javax.annotation.Nullable
  public Double getResponseTime() {
    return responseTime;
  }

  public void setResponseTime(Double responseTime) {
    this.responseTime = responseTime;
  }


  public TraceSummary hasFault(Boolean hasFault) {
    this.hasFault = hasFault;
    return this;
  }

  /**
   * Get hasFault
   * @return hasFault
   */
  @javax.annotation.Nullable
  public Boolean getHasFault() {
    return hasFault;
  }

  public void setHasFault(Boolean hasFault) {
    this.hasFault = hasFault;
  }


  public TraceSummary hasError(Boolean hasError) {
    this.hasError = hasError;
    return this;
  }

  /**
   * Get hasError
   * @return hasError
   */
  @javax.annotation.Nullable
  public Boolean getHasError() {
    return hasError;
  }

  public void setHasError(Boolean hasError) {
    this.hasError = hasError;
  }


  public TraceSummary hasThrottle(Boolean hasThrottle) {
    this.hasThrottle = hasThrottle;
    return this;
  }

  /**
   * Get hasThrottle
   * @return hasThrottle
   */
  @javax.annotation.Nullable
  public Boolean getHasThrottle() {
    return hasThrottle;
  }

  public void setHasThrottle(Boolean hasThrottle) {
    this.hasThrottle = hasThrottle;
  }


  public TraceSummary isPartial(Boolean isPartial) {
    this.isPartial = isPartial;
    return this;
  }

  /**
   * Get isPartial
   * @return isPartial
   */
  @javax.annotation.Nullable
  public Boolean getIsPartial() {
    return isPartial;
  }

  public void setIsPartial(Boolean isPartial) {
    this.isPartial = isPartial;
  }


  public TraceSummary http(TraceSummaryHttp http) {
    this.http = http;
    return this;
  }

  /**
   * Get http
   * @return http
   */
  @javax.annotation.Nullable
  public TraceSummaryHttp getHttp() {
    return http;
  }

  public void setHttp(TraceSummaryHttp http) {
    this.http = http;
  }


  public TraceSummary annotations(Map annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map annotations) {
    this.annotations = annotations;
  }


  public TraceSummary users(List users) {
    this.users = users;
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List getUsers() {
    return users;
  }

  public void setUsers(List users) {
    this.users = users;
  }


  public TraceSummary serviceIds(List serviceIds) {
    this.serviceIds = serviceIds;
    return this;
  }

  /**
   * Get serviceIds
   * @return serviceIds
   */
  @javax.annotation.Nullable
  public List getServiceIds() {
    return serviceIds;
  }

  public void setServiceIds(List serviceIds) {
    this.serviceIds = serviceIds;
  }


  public TraceSummary resourceARNs(List resourceARNs) {
    this.resourceARNs = resourceARNs;
    return this;
  }

  /**
   * Get resourceARNs
   * @return resourceARNs
   */
  @javax.annotation.Nullable
  public List getResourceARNs() {
    return resourceARNs;
  }

  public void setResourceARNs(List resourceARNs) {
    this.resourceARNs = resourceARNs;
  }


  public TraceSummary instanceIds(List instanceIds) {
    this.instanceIds = instanceIds;
    return this;
  }

  /**
   * Get instanceIds
   * @return instanceIds
   */
  @javax.annotation.Nullable
  public List getInstanceIds() {
    return instanceIds;
  }

  public void setInstanceIds(List instanceIds) {
    this.instanceIds = instanceIds;
  }


  public TraceSummary availabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
    return this;
  }

  /**
   * Get availabilityZones
   * @return availabilityZones
   */
  @javax.annotation.Nullable
  public List getAvailabilityZones() {
    return availabilityZones;
  }

  public void setAvailabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
  }


  public TraceSummary entryPoint(TraceSummaryEntryPoint entryPoint) {
    this.entryPoint = entryPoint;
    return this;
  }

  /**
   * Get entryPoint
   * @return entryPoint
   */
  @javax.annotation.Nullable
  public TraceSummaryEntryPoint getEntryPoint() {
    return entryPoint;
  }

  public void setEntryPoint(TraceSummaryEntryPoint entryPoint) {
    this.entryPoint = entryPoint;
  }


  public TraceSummary faultRootCauses(List faultRootCauses) {
    this.faultRootCauses = faultRootCauses;
    return this;
  }

  /**
   * Get faultRootCauses
   * @return faultRootCauses
   */
  @javax.annotation.Nullable
  public List getFaultRootCauses() {
    return faultRootCauses;
  }

  public void setFaultRootCauses(List faultRootCauses) {
    this.faultRootCauses = faultRootCauses;
  }


  public TraceSummary errorRootCauses(List errorRootCauses) {
    this.errorRootCauses = errorRootCauses;
    return this;
  }

  /**
   * Get errorRootCauses
   * @return errorRootCauses
   */
  @javax.annotation.Nullable
  public List getErrorRootCauses() {
    return errorRootCauses;
  }

  public void setErrorRootCauses(List errorRootCauses) {
    this.errorRootCauses = errorRootCauses;
  }


  public TraceSummary responseTimeRootCauses(List responseTimeRootCauses) {
    this.responseTimeRootCauses = responseTimeRootCauses;
    return this;
  }

  /**
   * Get responseTimeRootCauses
   * @return responseTimeRootCauses
   */
  @javax.annotation.Nullable
  public List getResponseTimeRootCauses() {
    return responseTimeRootCauses;
  }

  public void setResponseTimeRootCauses(List responseTimeRootCauses) {
    this.responseTimeRootCauses = responseTimeRootCauses;
  }


  public TraceSummary revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Get revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public TraceSummary matchedEventTime(OffsetDateTime matchedEventTime) {
    this.matchedEventTime = matchedEventTime;
    return this;
  }

  /**
   * Get matchedEventTime
   * @return matchedEventTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMatchedEventTime() {
    return matchedEventTime;
  }

  public void setMatchedEventTime(OffsetDateTime matchedEventTime) {
    this.matchedEventTime = matchedEventTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceSummary traceSummary = (TraceSummary) o;
    return Objects.equals(this.id, traceSummary.id) &&
        Objects.equals(this.duration, traceSummary.duration) &&
        Objects.equals(this.responseTime, traceSummary.responseTime) &&
        Objects.equals(this.hasFault, traceSummary.hasFault) &&
        Objects.equals(this.hasError, traceSummary.hasError) &&
        Objects.equals(this.hasThrottle, traceSummary.hasThrottle) &&
        Objects.equals(this.isPartial, traceSummary.isPartial) &&
        Objects.equals(this.http, traceSummary.http) &&
        Objects.equals(this.annotations, traceSummary.annotations) &&
        Objects.equals(this.users, traceSummary.users) &&
        Objects.equals(this.serviceIds, traceSummary.serviceIds) &&
        Objects.equals(this.resourceARNs, traceSummary.resourceARNs) &&
        Objects.equals(this.instanceIds, traceSummary.instanceIds) &&
        Objects.equals(this.availabilityZones, traceSummary.availabilityZones) &&
        Objects.equals(this.entryPoint, traceSummary.entryPoint) &&
        Objects.equals(this.faultRootCauses, traceSummary.faultRootCauses) &&
        Objects.equals(this.errorRootCauses, traceSummary.errorRootCauses) &&
        Objects.equals(this.responseTimeRootCauses, traceSummary.responseTimeRootCauses) &&
        Objects.equals(this.revision, traceSummary.revision) &&
        Objects.equals(this.matchedEventTime, traceSummary.matchedEventTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, duration, responseTime, hasFault, hasError, hasThrottle, isPartial, http, annotations, users, serviceIds, resourceARNs, instanceIds, availabilityZones, entryPoint, faultRootCauses, errorRootCauses, responseTimeRootCauses, revision, matchedEventTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    responseTime: ").append(toIndentedString(responseTime)).append("\n");
    sb.append("    hasFault: ").append(toIndentedString(hasFault)).append("\n");
    sb.append("    hasError: ").append(toIndentedString(hasError)).append("\n");
    sb.append("    hasThrottle: ").append(toIndentedString(hasThrottle)).append("\n");
    sb.append("    isPartial: ").append(toIndentedString(isPartial)).append("\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    serviceIds: ").append(toIndentedString(serviceIds)).append("\n");
    sb.append("    resourceARNs: ").append(toIndentedString(resourceARNs)).append("\n");
    sb.append("    instanceIds: ").append(toIndentedString(instanceIds)).append("\n");
    sb.append("    availabilityZones: ").append(toIndentedString(availabilityZones)).append("\n");
    sb.append("    entryPoint: ").append(toIndentedString(entryPoint)).append("\n");
    sb.append("    faultRootCauses: ").append(toIndentedString(faultRootCauses)).append("\n");
    sb.append("    errorRootCauses: ").append(toIndentedString(errorRootCauses)).append("\n");
    sb.append("    responseTimeRootCauses: ").append(toIndentedString(responseTimeRootCauses)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    matchedEventTime: ").append(toIndentedString(matchedEventTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Duration");
    openapiFields.add("ResponseTime");
    openapiFields.add("HasFault");
    openapiFields.add("HasError");
    openapiFields.add("HasThrottle");
    openapiFields.add("IsPartial");
    openapiFields.add("Http");
    openapiFields.add("Annotations");
    openapiFields.add("Users");
    openapiFields.add("ServiceIds");
    openapiFields.add("ResourceARNs");
    openapiFields.add("InstanceIds");
    openapiFields.add("AvailabilityZones");
    openapiFields.add("EntryPoint");
    openapiFields.add("FaultRootCauses");
    openapiFields.add("ErrorRootCauses");
    openapiFields.add("ResponseTimeRootCauses");
    openapiFields.add("Revision");
    openapiFields.add("MatchedEventTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TraceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TraceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TraceSummary is not found in the empty JSON string", TraceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TraceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TraceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Duration`
      if (jsonObj.get("Duration") != null && !jsonObj.get("Duration").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Duration"));
      }
      // validate the optional field `ResponseTime`
      if (jsonObj.get("ResponseTime") != null && !jsonObj.get("ResponseTime").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ResponseTime"));
      }
      // validate the optional field `HasFault`
      if (jsonObj.get("HasFault") != null && !jsonObj.get("HasFault").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HasFault"));
      }
      // validate the optional field `HasError`
      if (jsonObj.get("HasError") != null && !jsonObj.get("HasError").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HasError"));
      }
      // validate the optional field `HasThrottle`
      if (jsonObj.get("HasThrottle") != null && !jsonObj.get("HasThrottle").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HasThrottle"));
      }
      // validate the optional field `IsPartial`
      if (jsonObj.get("IsPartial") != null && !jsonObj.get("IsPartial").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsPartial"));
      }
      // validate the optional field `Http`
      if (jsonObj.get("Http") != null && !jsonObj.get("Http").isJsonNull()) {
        TraceSummaryHttp.validateJsonElement(jsonObj.get("Http"));
      }
      // validate the optional field `Annotations`
      if (jsonObj.get("Annotations") != null && !jsonObj.get("Annotations").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Annotations"));
      }
      // validate the optional field `Users`
      if (jsonObj.get("Users") != null && !jsonObj.get("Users").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Users"));
      }
      // validate the optional field `ServiceIds`
      if (jsonObj.get("ServiceIds") != null && !jsonObj.get("ServiceIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ServiceIds"));
      }
      // validate the optional field `ResourceARNs`
      if (jsonObj.get("ResourceARNs") != null && !jsonObj.get("ResourceARNs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceARNs"));
      }
      // validate the optional field `InstanceIds`
      if (jsonObj.get("InstanceIds") != null && !jsonObj.get("InstanceIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InstanceIds"));
      }
      // validate the optional field `AvailabilityZones`
      if (jsonObj.get("AvailabilityZones") != null && !jsonObj.get("AvailabilityZones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AvailabilityZones"));
      }
      // validate the optional field `EntryPoint`
      if (jsonObj.get("EntryPoint") != null && !jsonObj.get("EntryPoint").isJsonNull()) {
        TraceSummaryEntryPoint.validateJsonElement(jsonObj.get("EntryPoint"));
      }
      // validate the optional field `FaultRootCauses`
      if (jsonObj.get("FaultRootCauses") != null && !jsonObj.get("FaultRootCauses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FaultRootCauses"));
      }
      // validate the optional field `ErrorRootCauses`
      if (jsonObj.get("ErrorRootCauses") != null && !jsonObj.get("ErrorRootCauses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ErrorRootCauses"));
      }
      // validate the optional field `ResponseTimeRootCauses`
      if (jsonObj.get("ResponseTimeRootCauses") != null && !jsonObj.get("ResponseTimeRootCauses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResponseTimeRootCauses"));
      }
      // validate the optional field `Revision`
      if (jsonObj.get("Revision") != null && !jsonObj.get("Revision").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Revision"));
      }
      // validate the optional field `MatchedEventTime`
      if (jsonObj.get("MatchedEventTime") != null && !jsonObj.get("MatchedEventTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("MatchedEventTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TraceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TraceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TraceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TraceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TraceSummary>() {
           @Override
           public void write(JsonWriter out, TraceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TraceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TraceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TraceSummary
   * @throws IOException if the JSON string is invalid with respect to TraceSummary
   */
  public static TraceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TraceSummary.class);
  }

  /**
   * Convert an instance of TraceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

