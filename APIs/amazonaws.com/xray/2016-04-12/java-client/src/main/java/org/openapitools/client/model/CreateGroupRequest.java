/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateGroupRequestInsightsConfiguration;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateGroupRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateGroupRequest {
  public static final String SERIALIZED_NAME_GROUP_NAME = "GroupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_FILTER_EXPRESSION = "FilterExpression";
  @SerializedName(SERIALIZED_NAME_FILTER_EXPRESSION)
  private String filterExpression;

  public static final String SERIALIZED_NAME_INSIGHTS_CONFIGURATION = "InsightsConfiguration";
  @SerializedName(SERIALIZED_NAME_INSIGHTS_CONFIGURATION)
  private CreateGroupRequestInsightsConfiguration insightsConfiguration;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public CreateGroupRequest() {
  }

  public CreateGroupRequest groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * The case-sensitive name of the new group. Default is a reserved name and names must be unique.
   * @return groupName
   */
  @javax.annotation.Nonnull
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public CreateGroupRequest filterExpression(String filterExpression) {
    this.filterExpression = filterExpression;
    return this;
  }

  /**
   * The filter expression defining criteria by which to group traces.
   * @return filterExpression
   */
  @javax.annotation.Nullable
  public String getFilterExpression() {
    return filterExpression;
  }

  public void setFilterExpression(String filterExpression) {
    this.filterExpression = filterExpression;
  }


  public CreateGroupRequest insightsConfiguration(CreateGroupRequestInsightsConfiguration insightsConfiguration) {
    this.insightsConfiguration = insightsConfiguration;
    return this;
  }

  /**
   * Get insightsConfiguration
   * @return insightsConfiguration
   */
  @javax.annotation.Nullable
  public CreateGroupRequestInsightsConfiguration getInsightsConfiguration() {
    return insightsConfiguration;
  }

  public void setInsightsConfiguration(CreateGroupRequestInsightsConfiguration insightsConfiguration) {
    this.insightsConfiguration = insightsConfiguration;
  }


  public CreateGroupRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateGroupRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;A map that contains one or more tag keys and tag values to attach to an X-Ray group. For more information about ways to use tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\&quot;&gt;Tagging Amazon Web Services resources&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The following restrictions apply to tags:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Maximum number of user-applied tags per resource: 50&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum tag key length: 128 Unicode characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum tag value length: 256 Unicode characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / &#x3D; + - and @&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tag keys and values are case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Don&#39;t use &lt;code&gt;aws:&lt;/code&gt; as a prefix for keys; it&#39;s reserved for Amazon Web Services use.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateGroupRequest createGroupRequest = (CreateGroupRequest) o;
    return Objects.equals(this.groupName, createGroupRequest.groupName) &&
        Objects.equals(this.filterExpression, createGroupRequest.filterExpression) &&
        Objects.equals(this.insightsConfiguration, createGroupRequest.insightsConfiguration) &&
        Objects.equals(this.tags, createGroupRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupName, filterExpression, insightsConfiguration, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateGroupRequest {\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    filterExpression: ").append(toIndentedString(filterExpression)).append("\n");
    sb.append("    insightsConfiguration: ").append(toIndentedString(insightsConfiguration)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GroupName");
    openapiFields.add("FilterExpression");
    openapiFields.add("InsightsConfiguration");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("GroupName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateGroupRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateGroupRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateGroupRequest is not found in the empty JSON string", CreateGroupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateGroupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateGroupRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateGroupRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("GroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GroupName").toString()));
      }
      if ((jsonObj.get("FilterExpression") != null && !jsonObj.get("FilterExpression").isJsonNull()) && !jsonObj.get("FilterExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FilterExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FilterExpression").toString()));
      }
      // validate the optional field `InsightsConfiguration`
      if (jsonObj.get("InsightsConfiguration") != null && !jsonObj.get("InsightsConfiguration").isJsonNull()) {
        CreateGroupRequestInsightsConfiguration.validateJsonElement(jsonObj.get("InsightsConfiguration"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateGroupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateGroupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateGroupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateGroupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateGroupRequest>() {
           @Override
           public void write(JsonWriter out, CreateGroupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateGroupRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateGroupRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateGroupRequest
   * @throws IOException if the JSON string is invalid with respect to CreateGroupRequest
   */
  public static CreateGroupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateGroupRequest.class);
  }

  /**
   * Convert an instance of CreateGroupRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

