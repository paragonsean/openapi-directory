/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutResourcePolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutResourcePolicyRequest {
  public static final String SERIALIZED_NAME_POLICY_NAME = "PolicyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_POLICY_DOCUMENT = "PolicyDocument";
  @SerializedName(SERIALIZED_NAME_POLICY_DOCUMENT)
  private String policyDocument;

  public static final String SERIALIZED_NAME_POLICY_REVISION_ID = "PolicyRevisionId";
  @SerializedName(SERIALIZED_NAME_POLICY_REVISION_ID)
  private String policyRevisionId;

  public static final String SERIALIZED_NAME_BYPASS_POLICY_LOCKOUT_CHECK = "BypassPolicyLockoutCheck";
  @SerializedName(SERIALIZED_NAME_BYPASS_POLICY_LOCKOUT_CHECK)
  private Boolean bypassPolicyLockoutCheck;

  public PutResourcePolicyRequest() {
  }

  public PutResourcePolicyRequest policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * The name of the resource policy. Must be unique within a specific Amazon Web Services account.
   * @return policyName
   */
  @javax.annotation.Nonnull
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }


  public PutResourcePolicyRequest policyDocument(String policyDocument) {
    this.policyDocument = policyDocument;
    return this;
  }

  /**
   * The resource policy document, which can be up to 5kb in size.
   * @return policyDocument
   */
  @javax.annotation.Nonnull
  public String getPolicyDocument() {
    return policyDocument;
  }

  public void setPolicyDocument(String policyDocument) {
    this.policyDocument = policyDocument;
  }


  public PutResourcePolicyRequest policyRevisionId(String policyRevisionId) {
    this.policyRevisionId = policyRevisionId;
    return this;
  }

  /**
   * &lt;p&gt;Specifies a specific policy revision, to ensure an atomic create operation. By default the resource policy is created if it does not exist, or updated with an incremented revision id. The revision id is unique to each policy in the account.&lt;/p&gt; &lt;p&gt;If the policy revision id does not match the latest revision id, the operation will fail with an &lt;code&gt;InvalidPolicyRevisionIdException&lt;/code&gt; exception. You can also provide a &lt;code&gt;PolicyRevisionId&lt;/code&gt; of 0. In this case, the operation will fail with an &lt;code&gt;InvalidPolicyRevisionIdException&lt;/code&gt; exception if a resource policy with the same name already exists. &lt;/p&gt;
   * @return policyRevisionId
   */
  @javax.annotation.Nullable
  public String getPolicyRevisionId() {
    return policyRevisionId;
  }

  public void setPolicyRevisionId(String policyRevisionId) {
    this.policyRevisionId = policyRevisionId;
  }


  public PutResourcePolicyRequest bypassPolicyLockoutCheck(Boolean bypassPolicyLockoutCheck) {
    this.bypassPolicyLockoutCheck = bypassPolicyLockoutCheck;
    return this;
  }

  /**
   * &lt;p&gt;A flag to indicate whether to bypass the resource policy lockout safety check.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Setting this value to true increases the risk that the policy becomes unmanageable. Do not set this value to true indiscriminately.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent &lt;code&gt;PutResourcePolicy&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;The default value is false.&lt;/p&gt;
   * @return bypassPolicyLockoutCheck
   */
  @javax.annotation.Nullable
  public Boolean getBypassPolicyLockoutCheck() {
    return bypassPolicyLockoutCheck;
  }

  public void setBypassPolicyLockoutCheck(Boolean bypassPolicyLockoutCheck) {
    this.bypassPolicyLockoutCheck = bypassPolicyLockoutCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutResourcePolicyRequest putResourcePolicyRequest = (PutResourcePolicyRequest) o;
    return Objects.equals(this.policyName, putResourcePolicyRequest.policyName) &&
        Objects.equals(this.policyDocument, putResourcePolicyRequest.policyDocument) &&
        Objects.equals(this.policyRevisionId, putResourcePolicyRequest.policyRevisionId) &&
        Objects.equals(this.bypassPolicyLockoutCheck, putResourcePolicyRequest.bypassPolicyLockoutCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyName, policyDocument, policyRevisionId, bypassPolicyLockoutCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutResourcePolicyRequest {\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyDocument: ").append(toIndentedString(policyDocument)).append("\n");
    sb.append("    policyRevisionId: ").append(toIndentedString(policyRevisionId)).append("\n");
    sb.append("    bypassPolicyLockoutCheck: ").append(toIndentedString(bypassPolicyLockoutCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PolicyName");
    openapiFields.add("PolicyDocument");
    openapiFields.add("PolicyRevisionId");
    openapiFields.add("BypassPolicyLockoutCheck");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PolicyName");
    openapiRequiredFields.add("PolicyDocument");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutResourcePolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutResourcePolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutResourcePolicyRequest is not found in the empty JSON string", PutResourcePolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutResourcePolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutResourcePolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutResourcePolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("PolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyName").toString()));
      }
      if (!jsonObj.get("PolicyDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyDocument").toString()));
      }
      if ((jsonObj.get("PolicyRevisionId") != null && !jsonObj.get("PolicyRevisionId").isJsonNull()) && !jsonObj.get("PolicyRevisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyRevisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyRevisionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutResourcePolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutResourcePolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutResourcePolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutResourcePolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutResourcePolicyRequest>() {
           @Override
           public void write(JsonWriter out, PutResourcePolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutResourcePolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutResourcePolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutResourcePolicyRequest
   * @throws IOException if the JSON string is invalid with respect to PutResourcePolicyRequest
   */
  public static PutResourcePolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutResourcePolicyRequest.class);
  }

  /**
   * Convert an instance of PutResourcePolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

