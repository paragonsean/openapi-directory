/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TelemetryRecordBackendConnectionErrors;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TelemetryRecord {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_SEGMENTS_RECEIVED_COUNT = "SegmentsReceivedCount";
  @SerializedName(SERIALIZED_NAME_SEGMENTS_RECEIVED_COUNT)
  private Integer segmentsReceivedCount;

  public static final String SERIALIZED_NAME_SEGMENTS_SENT_COUNT = "SegmentsSentCount";
  @SerializedName(SERIALIZED_NAME_SEGMENTS_SENT_COUNT)
  private Integer segmentsSentCount;

  public static final String SERIALIZED_NAME_SEGMENTS_SPILLOVER_COUNT = "SegmentsSpilloverCount";
  @SerializedName(SERIALIZED_NAME_SEGMENTS_SPILLOVER_COUNT)
  private Integer segmentsSpilloverCount;

  public static final String SERIALIZED_NAME_SEGMENTS_REJECTED_COUNT = "SegmentsRejectedCount";
  @SerializedName(SERIALIZED_NAME_SEGMENTS_REJECTED_COUNT)
  private Integer segmentsRejectedCount;

  public static final String SERIALIZED_NAME_BACKEND_CONNECTION_ERRORS = "BackendConnectionErrors";
  @SerializedName(SERIALIZED_NAME_BACKEND_CONNECTION_ERRORS)
  private TelemetryRecordBackendConnectionErrors backendConnectionErrors;

  public TelemetryRecord() {
  }

  public TelemetryRecord timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public TelemetryRecord segmentsReceivedCount(Integer segmentsReceivedCount) {
    this.segmentsReceivedCount = segmentsReceivedCount;
    return this;
  }

  /**
   * Get segmentsReceivedCount
   * @return segmentsReceivedCount
   */
  @javax.annotation.Nullable
  public Integer getSegmentsReceivedCount() {
    return segmentsReceivedCount;
  }

  public void setSegmentsReceivedCount(Integer segmentsReceivedCount) {
    this.segmentsReceivedCount = segmentsReceivedCount;
  }


  public TelemetryRecord segmentsSentCount(Integer segmentsSentCount) {
    this.segmentsSentCount = segmentsSentCount;
    return this;
  }

  /**
   * Get segmentsSentCount
   * @return segmentsSentCount
   */
  @javax.annotation.Nullable
  public Integer getSegmentsSentCount() {
    return segmentsSentCount;
  }

  public void setSegmentsSentCount(Integer segmentsSentCount) {
    this.segmentsSentCount = segmentsSentCount;
  }


  public TelemetryRecord segmentsSpilloverCount(Integer segmentsSpilloverCount) {
    this.segmentsSpilloverCount = segmentsSpilloverCount;
    return this;
  }

  /**
   * Get segmentsSpilloverCount
   * @return segmentsSpilloverCount
   */
  @javax.annotation.Nullable
  public Integer getSegmentsSpilloverCount() {
    return segmentsSpilloverCount;
  }

  public void setSegmentsSpilloverCount(Integer segmentsSpilloverCount) {
    this.segmentsSpilloverCount = segmentsSpilloverCount;
  }


  public TelemetryRecord segmentsRejectedCount(Integer segmentsRejectedCount) {
    this.segmentsRejectedCount = segmentsRejectedCount;
    return this;
  }

  /**
   * Get segmentsRejectedCount
   * @return segmentsRejectedCount
   */
  @javax.annotation.Nullable
  public Integer getSegmentsRejectedCount() {
    return segmentsRejectedCount;
  }

  public void setSegmentsRejectedCount(Integer segmentsRejectedCount) {
    this.segmentsRejectedCount = segmentsRejectedCount;
  }


  public TelemetryRecord backendConnectionErrors(TelemetryRecordBackendConnectionErrors backendConnectionErrors) {
    this.backendConnectionErrors = backendConnectionErrors;
    return this;
  }

  /**
   * Get backendConnectionErrors
   * @return backendConnectionErrors
   */
  @javax.annotation.Nullable
  public TelemetryRecordBackendConnectionErrors getBackendConnectionErrors() {
    return backendConnectionErrors;
  }

  public void setBackendConnectionErrors(TelemetryRecordBackendConnectionErrors backendConnectionErrors) {
    this.backendConnectionErrors = backendConnectionErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TelemetryRecord telemetryRecord = (TelemetryRecord) o;
    return Objects.equals(this.timestamp, telemetryRecord.timestamp) &&
        Objects.equals(this.segmentsReceivedCount, telemetryRecord.segmentsReceivedCount) &&
        Objects.equals(this.segmentsSentCount, telemetryRecord.segmentsSentCount) &&
        Objects.equals(this.segmentsSpilloverCount, telemetryRecord.segmentsSpilloverCount) &&
        Objects.equals(this.segmentsRejectedCount, telemetryRecord.segmentsRejectedCount) &&
        Objects.equals(this.backendConnectionErrors, telemetryRecord.backendConnectionErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, segmentsReceivedCount, segmentsSentCount, segmentsSpilloverCount, segmentsRejectedCount, backendConnectionErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TelemetryRecord {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    segmentsReceivedCount: ").append(toIndentedString(segmentsReceivedCount)).append("\n");
    sb.append("    segmentsSentCount: ").append(toIndentedString(segmentsSentCount)).append("\n");
    sb.append("    segmentsSpilloverCount: ").append(toIndentedString(segmentsSpilloverCount)).append("\n");
    sb.append("    segmentsRejectedCount: ").append(toIndentedString(segmentsRejectedCount)).append("\n");
    sb.append("    backendConnectionErrors: ").append(toIndentedString(backendConnectionErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Timestamp");
    openapiFields.add("SegmentsReceivedCount");
    openapiFields.add("SegmentsSentCount");
    openapiFields.add("SegmentsSpilloverCount");
    openapiFields.add("SegmentsRejectedCount");
    openapiFields.add("BackendConnectionErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TelemetryRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TelemetryRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TelemetryRecord is not found in the empty JSON string", TelemetryRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TelemetryRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TelemetryRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TelemetryRecord.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Timestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      // validate the optional field `SegmentsReceivedCount`
      if (jsonObj.get("SegmentsReceivedCount") != null && !jsonObj.get("SegmentsReceivedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentsReceivedCount"));
      }
      // validate the optional field `SegmentsSentCount`
      if (jsonObj.get("SegmentsSentCount") != null && !jsonObj.get("SegmentsSentCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentsSentCount"));
      }
      // validate the optional field `SegmentsSpilloverCount`
      if (jsonObj.get("SegmentsSpilloverCount") != null && !jsonObj.get("SegmentsSpilloverCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentsSpilloverCount"));
      }
      // validate the optional field `SegmentsRejectedCount`
      if (jsonObj.get("SegmentsRejectedCount") != null && !jsonObj.get("SegmentsRejectedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentsRejectedCount"));
      }
      // validate the optional field `BackendConnectionErrors`
      if (jsonObj.get("BackendConnectionErrors") != null && !jsonObj.get("BackendConnectionErrors").isJsonNull()) {
        TelemetryRecordBackendConnectionErrors.validateJsonElement(jsonObj.get("BackendConnectionErrors"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TelemetryRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TelemetryRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TelemetryRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TelemetryRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<TelemetryRecord>() {
           @Override
           public void write(JsonWriter out, TelemetryRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TelemetryRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TelemetryRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TelemetryRecord
   * @throws IOException if the JSON string is invalid with respect to TelemetryRecord
   */
  public static TelemetryRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TelemetryRecord.class);
  }

  /**
   * Convert an instance of TelemetryRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

