/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchGetTracesResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchGetTracesResult {
  public static final String SERIALIZED_NAME_TRACES = "Traces";
  @SerializedName(SERIALIZED_NAME_TRACES)
  private List traces;

  public static final String SERIALIZED_NAME_UNPROCESSED_TRACE_IDS = "UnprocessedTraceIds";
  @SerializedName(SERIALIZED_NAME_UNPROCESSED_TRACE_IDS)
  private List unprocessedTraceIds;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public BatchGetTracesResult() {
  }

  public BatchGetTracesResult traces(List traces) {
    this.traces = traces;
    return this;
  }

  /**
   * Get traces
   * @return traces
   */
  @javax.annotation.Nullable
  public List getTraces() {
    return traces;
  }

  public void setTraces(List traces) {
    this.traces = traces;
  }


  public BatchGetTracesResult unprocessedTraceIds(List unprocessedTraceIds) {
    this.unprocessedTraceIds = unprocessedTraceIds;
    return this;
  }

  /**
   * Get unprocessedTraceIds
   * @return unprocessedTraceIds
   */
  @javax.annotation.Nullable
  public List getUnprocessedTraceIds() {
    return unprocessedTraceIds;
  }

  public void setUnprocessedTraceIds(List unprocessedTraceIds) {
    this.unprocessedTraceIds = unprocessedTraceIds;
  }


  public BatchGetTracesResult nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetTracesResult batchGetTracesResult = (BatchGetTracesResult) o;
    return Objects.equals(this.traces, batchGetTracesResult.traces) &&
        Objects.equals(this.unprocessedTraceIds, batchGetTracesResult.unprocessedTraceIds) &&
        Objects.equals(this.nextToken, batchGetTracesResult.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(traces, unprocessedTraceIds, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetTracesResult {\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    unprocessedTraceIds: ").append(toIndentedString(unprocessedTraceIds)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Traces");
    openapiFields.add("UnprocessedTraceIds");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetTracesResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetTracesResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetTracesResult is not found in the empty JSON string", BatchGetTracesResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetTracesResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetTracesResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Traces`
      if (jsonObj.get("Traces") != null && !jsonObj.get("Traces").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Traces"));
      }
      // validate the optional field `UnprocessedTraceIds`
      if (jsonObj.get("UnprocessedTraceIds") != null && !jsonObj.get("UnprocessedTraceIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UnprocessedTraceIds"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetTracesResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetTracesResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetTracesResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetTracesResult.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetTracesResult>() {
           @Override
           public void write(JsonWriter out, BatchGetTracesResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetTracesResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetTracesResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetTracesResult
   * @throws IOException if the JSON string is invalid with respect to BatchGetTracesResult
   */
  public static BatchGetTracesResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetTracesResult.class);
  }

  /**
   * Convert an instance of BatchGetTracesResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

