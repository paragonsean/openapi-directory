/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GroupInsightsConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateGroupResultGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateGroupResultGroup {
  public static final String SERIALIZED_NAME_GROUP_NAME = "GroupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_GROUP_A_R_N = "GroupARN";
  @SerializedName(SERIALIZED_NAME_GROUP_A_R_N)
  private String groupARN;

  public static final String SERIALIZED_NAME_FILTER_EXPRESSION = "FilterExpression";
  @SerializedName(SERIALIZED_NAME_FILTER_EXPRESSION)
  private String filterExpression;

  public static final String SERIALIZED_NAME_INSIGHTS_CONFIGURATION = "InsightsConfiguration";
  @SerializedName(SERIALIZED_NAME_INSIGHTS_CONFIGURATION)
  private GroupInsightsConfiguration insightsConfiguration;

  public CreateGroupResultGroup() {
  }

  public CreateGroupResultGroup groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Get groupName
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public CreateGroupResultGroup groupARN(String groupARN) {
    this.groupARN = groupARN;
    return this;
  }

  /**
   * Get groupARN
   * @return groupARN
   */
  @javax.annotation.Nullable
  public String getGroupARN() {
    return groupARN;
  }

  public void setGroupARN(String groupARN) {
    this.groupARN = groupARN;
  }


  public CreateGroupResultGroup filterExpression(String filterExpression) {
    this.filterExpression = filterExpression;
    return this;
  }

  /**
   * Get filterExpression
   * @return filterExpression
   */
  @javax.annotation.Nullable
  public String getFilterExpression() {
    return filterExpression;
  }

  public void setFilterExpression(String filterExpression) {
    this.filterExpression = filterExpression;
  }


  public CreateGroupResultGroup insightsConfiguration(GroupInsightsConfiguration insightsConfiguration) {
    this.insightsConfiguration = insightsConfiguration;
    return this;
  }

  /**
   * Get insightsConfiguration
   * @return insightsConfiguration
   */
  @javax.annotation.Nullable
  public GroupInsightsConfiguration getInsightsConfiguration() {
    return insightsConfiguration;
  }

  public void setInsightsConfiguration(GroupInsightsConfiguration insightsConfiguration) {
    this.insightsConfiguration = insightsConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateGroupResultGroup createGroupResultGroup = (CreateGroupResultGroup) o;
    return Objects.equals(this.groupName, createGroupResultGroup.groupName) &&
        Objects.equals(this.groupARN, createGroupResultGroup.groupARN) &&
        Objects.equals(this.filterExpression, createGroupResultGroup.filterExpression) &&
        Objects.equals(this.insightsConfiguration, createGroupResultGroup.insightsConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupName, groupARN, filterExpression, insightsConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateGroupResultGroup {\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    groupARN: ").append(toIndentedString(groupARN)).append("\n");
    sb.append("    filterExpression: ").append(toIndentedString(filterExpression)).append("\n");
    sb.append("    insightsConfiguration: ").append(toIndentedString(insightsConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GroupName");
    openapiFields.add("GroupARN");
    openapiFields.add("FilterExpression");
    openapiFields.add("InsightsConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateGroupResultGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateGroupResultGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateGroupResultGroup is not found in the empty JSON string", CreateGroupResultGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateGroupResultGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateGroupResultGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `GroupName`
      if (jsonObj.get("GroupName") != null && !jsonObj.get("GroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GroupName"));
      }
      // validate the optional field `GroupARN`
      if (jsonObj.get("GroupARN") != null && !jsonObj.get("GroupARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GroupARN"));
      }
      // validate the optional field `FilterExpression`
      if (jsonObj.get("FilterExpression") != null && !jsonObj.get("FilterExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FilterExpression"));
      }
      // validate the optional field `InsightsConfiguration`
      if (jsonObj.get("InsightsConfiguration") != null && !jsonObj.get("InsightsConfiguration").isJsonNull()) {
        GroupInsightsConfiguration.validateJsonElement(jsonObj.get("InsightsConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateGroupResultGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateGroupResultGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateGroupResultGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateGroupResultGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateGroupResultGroup>() {
           @Override
           public void write(JsonWriter out, CreateGroupResultGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateGroupResultGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateGroupResultGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateGroupResultGroup
   * @throws IOException if the JSON string is invalid with respect to CreateGroupResultGroup
   */
  public static CreateGroupResultGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateGroupResultGroup.class);
  }

  /**
   * Convert an instance of CreateGroupResultGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

