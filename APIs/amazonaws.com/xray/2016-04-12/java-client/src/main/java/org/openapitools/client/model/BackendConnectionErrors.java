/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackendConnectionErrors {
  public static final String SERIALIZED_NAME_TIMEOUT_COUNT = "TimeoutCount";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_COUNT)
  private Integer timeoutCount;

  public static final String SERIALIZED_NAME_CONNECTION_REFUSED_COUNT = "ConnectionRefusedCount";
  @SerializedName(SERIALIZED_NAME_CONNECTION_REFUSED_COUNT)
  private Integer connectionRefusedCount;

  public static final String SERIALIZED_NAME_HT_T_P_CODE4_X_X_COUNT = "HTTPCode4XXCount";
  @SerializedName(SERIALIZED_NAME_HT_T_P_CODE4_X_X_COUNT)
  private Integer htTPCode4XXCount;

  public static final String SERIALIZED_NAME_HT_T_P_CODE5_X_X_COUNT = "HTTPCode5XXCount";
  @SerializedName(SERIALIZED_NAME_HT_T_P_CODE5_X_X_COUNT)
  private Integer htTPCode5XXCount;

  public static final String SERIALIZED_NAME_UNKNOWN_HOST_COUNT = "UnknownHostCount";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_HOST_COUNT)
  private Integer unknownHostCount;

  public static final String SERIALIZED_NAME_OTHER_COUNT = "OtherCount";
  @SerializedName(SERIALIZED_NAME_OTHER_COUNT)
  private Integer otherCount;

  public BackendConnectionErrors() {
  }

  public BackendConnectionErrors timeoutCount(Integer timeoutCount) {
    this.timeoutCount = timeoutCount;
    return this;
  }

  /**
   * Get timeoutCount
   * @return timeoutCount
   */
  @javax.annotation.Nullable
  public Integer getTimeoutCount() {
    return timeoutCount;
  }

  public void setTimeoutCount(Integer timeoutCount) {
    this.timeoutCount = timeoutCount;
  }


  public BackendConnectionErrors connectionRefusedCount(Integer connectionRefusedCount) {
    this.connectionRefusedCount = connectionRefusedCount;
    return this;
  }

  /**
   * Get connectionRefusedCount
   * @return connectionRefusedCount
   */
  @javax.annotation.Nullable
  public Integer getConnectionRefusedCount() {
    return connectionRefusedCount;
  }

  public void setConnectionRefusedCount(Integer connectionRefusedCount) {
    this.connectionRefusedCount = connectionRefusedCount;
  }


  public BackendConnectionErrors htTPCode4XXCount(Integer htTPCode4XXCount) {
    this.htTPCode4XXCount = htTPCode4XXCount;
    return this;
  }

  /**
   * Get htTPCode4XXCount
   * @return htTPCode4XXCount
   */
  @javax.annotation.Nullable
  public Integer getHtTPCode4XXCount() {
    return htTPCode4XXCount;
  }

  public void setHtTPCode4XXCount(Integer htTPCode4XXCount) {
    this.htTPCode4XXCount = htTPCode4XXCount;
  }


  public BackendConnectionErrors htTPCode5XXCount(Integer htTPCode5XXCount) {
    this.htTPCode5XXCount = htTPCode5XXCount;
    return this;
  }

  /**
   * Get htTPCode5XXCount
   * @return htTPCode5XXCount
   */
  @javax.annotation.Nullable
  public Integer getHtTPCode5XXCount() {
    return htTPCode5XXCount;
  }

  public void setHtTPCode5XXCount(Integer htTPCode5XXCount) {
    this.htTPCode5XXCount = htTPCode5XXCount;
  }


  public BackendConnectionErrors unknownHostCount(Integer unknownHostCount) {
    this.unknownHostCount = unknownHostCount;
    return this;
  }

  /**
   * Get unknownHostCount
   * @return unknownHostCount
   */
  @javax.annotation.Nullable
  public Integer getUnknownHostCount() {
    return unknownHostCount;
  }

  public void setUnknownHostCount(Integer unknownHostCount) {
    this.unknownHostCount = unknownHostCount;
  }


  public BackendConnectionErrors otherCount(Integer otherCount) {
    this.otherCount = otherCount;
    return this;
  }

  /**
   * Get otherCount
   * @return otherCount
   */
  @javax.annotation.Nullable
  public Integer getOtherCount() {
    return otherCount;
  }

  public void setOtherCount(Integer otherCount) {
    this.otherCount = otherCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackendConnectionErrors backendConnectionErrors = (BackendConnectionErrors) o;
    return Objects.equals(this.timeoutCount, backendConnectionErrors.timeoutCount) &&
        Objects.equals(this.connectionRefusedCount, backendConnectionErrors.connectionRefusedCount) &&
        Objects.equals(this.htTPCode4XXCount, backendConnectionErrors.htTPCode4XXCount) &&
        Objects.equals(this.htTPCode5XXCount, backendConnectionErrors.htTPCode5XXCount) &&
        Objects.equals(this.unknownHostCount, backendConnectionErrors.unknownHostCount) &&
        Objects.equals(this.otherCount, backendConnectionErrors.otherCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeoutCount, connectionRefusedCount, htTPCode4XXCount, htTPCode5XXCount, unknownHostCount, otherCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackendConnectionErrors {\n");
    sb.append("    timeoutCount: ").append(toIndentedString(timeoutCount)).append("\n");
    sb.append("    connectionRefusedCount: ").append(toIndentedString(connectionRefusedCount)).append("\n");
    sb.append("    htTPCode4XXCount: ").append(toIndentedString(htTPCode4XXCount)).append("\n");
    sb.append("    htTPCode5XXCount: ").append(toIndentedString(htTPCode5XXCount)).append("\n");
    sb.append("    unknownHostCount: ").append(toIndentedString(unknownHostCount)).append("\n");
    sb.append("    otherCount: ").append(toIndentedString(otherCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TimeoutCount");
    openapiFields.add("ConnectionRefusedCount");
    openapiFields.add("HTTPCode4XXCount");
    openapiFields.add("HTTPCode5XXCount");
    openapiFields.add("UnknownHostCount");
    openapiFields.add("OtherCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackendConnectionErrors
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackendConnectionErrors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackendConnectionErrors is not found in the empty JSON string", BackendConnectionErrors.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackendConnectionErrors.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackendConnectionErrors` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TimeoutCount`
      if (jsonObj.get("TimeoutCount") != null && !jsonObj.get("TimeoutCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimeoutCount"));
      }
      // validate the optional field `ConnectionRefusedCount`
      if (jsonObj.get("ConnectionRefusedCount") != null && !jsonObj.get("ConnectionRefusedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ConnectionRefusedCount"));
      }
      // validate the optional field `HTTPCode4XXCount`
      if (jsonObj.get("HTTPCode4XXCount") != null && !jsonObj.get("HTTPCode4XXCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HTTPCode4XXCount"));
      }
      // validate the optional field `HTTPCode5XXCount`
      if (jsonObj.get("HTTPCode5XXCount") != null && !jsonObj.get("HTTPCode5XXCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HTTPCode5XXCount"));
      }
      // validate the optional field `UnknownHostCount`
      if (jsonObj.get("UnknownHostCount") != null && !jsonObj.get("UnknownHostCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UnknownHostCount"));
      }
      // validate the optional field `OtherCount`
      if (jsonObj.get("OtherCount") != null && !jsonObj.get("OtherCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("OtherCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackendConnectionErrors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackendConnectionErrors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackendConnectionErrors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackendConnectionErrors.class));

       return (TypeAdapter<T>) new TypeAdapter<BackendConnectionErrors>() {
           @Override
           public void write(JsonWriter out, BackendConnectionErrors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackendConnectionErrors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackendConnectionErrors given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackendConnectionErrors
   * @throws IOException if the JSON string is invalid with respect to BackendConnectionErrors
   */
  public static BackendConnectionErrors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackendConnectionErrors.class);
  }

  /**
   * Convert an instance of BackendConnectionErrors to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

