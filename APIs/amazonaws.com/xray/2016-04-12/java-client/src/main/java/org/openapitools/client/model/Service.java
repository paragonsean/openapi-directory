/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServiceSummaryStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an application that processed requests, users that made requests, or downstream services, resources, and applications that an application used.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Service {
  public static final String SERIALIZED_NAME_REFERENCE_ID = "ReferenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private Integer referenceId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMES = "Names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List names;

  public static final String SERIALIZED_NAME_ROOT = "Root";
  @SerializedName(SERIALIZED_NAME_ROOT)
  private Boolean root;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EDGES = "Edges";
  @SerializedName(SERIALIZED_NAME_EDGES)
  private List edges;

  public static final String SERIALIZED_NAME_SUMMARY_STATISTICS = "SummaryStatistics";
  @SerializedName(SERIALIZED_NAME_SUMMARY_STATISTICS)
  private ServiceSummaryStatistics summaryStatistics;

  public static final String SERIALIZED_NAME_DURATION_HISTOGRAM = "DurationHistogram";
  @SerializedName(SERIALIZED_NAME_DURATION_HISTOGRAM)
  private List durationHistogram;

  public static final String SERIALIZED_NAME_RESPONSE_TIME_HISTOGRAM = "ResponseTimeHistogram";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME_HISTOGRAM)
  private List responseTimeHistogram;

  public Service() {
  }

  public Service referenceId(Integer referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nullable
  public Integer getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(Integer referenceId) {
    this.referenceId = referenceId;
  }


  public Service name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Service names(List names) {
    this.names = names;
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List getNames() {
    return names;
  }

  public void setNames(List names) {
    this.names = names;
  }


  public Service root(Boolean root) {
    this.root = root;
    return this;
  }

  /**
   * Get root
   * @return root
   */
  @javax.annotation.Nullable
  public Boolean getRoot() {
    return root;
  }

  public void setRoot(Boolean root) {
    this.root = root;
  }


  public Service accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Service type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Service state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Service startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Service endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Service edges(List edges) {
    this.edges = edges;
    return this;
  }

  /**
   * Get edges
   * @return edges
   */
  @javax.annotation.Nullable
  public List getEdges() {
    return edges;
  }

  public void setEdges(List edges) {
    this.edges = edges;
  }


  public Service summaryStatistics(ServiceSummaryStatistics summaryStatistics) {
    this.summaryStatistics = summaryStatistics;
    return this;
  }

  /**
   * Get summaryStatistics
   * @return summaryStatistics
   */
  @javax.annotation.Nullable
  public ServiceSummaryStatistics getSummaryStatistics() {
    return summaryStatistics;
  }

  public void setSummaryStatistics(ServiceSummaryStatistics summaryStatistics) {
    this.summaryStatistics = summaryStatistics;
  }


  public Service durationHistogram(List durationHistogram) {
    this.durationHistogram = durationHistogram;
    return this;
  }

  /**
   * Get durationHistogram
   * @return durationHistogram
   */
  @javax.annotation.Nullable
  public List getDurationHistogram() {
    return durationHistogram;
  }

  public void setDurationHistogram(List durationHistogram) {
    this.durationHistogram = durationHistogram;
  }


  public Service responseTimeHistogram(List responseTimeHistogram) {
    this.responseTimeHistogram = responseTimeHistogram;
    return this;
  }

  /**
   * Get responseTimeHistogram
   * @return responseTimeHistogram
   */
  @javax.annotation.Nullable
  public List getResponseTimeHistogram() {
    return responseTimeHistogram;
  }

  public void setResponseTimeHistogram(List responseTimeHistogram) {
    this.responseTimeHistogram = responseTimeHistogram;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.referenceId, service.referenceId) &&
        Objects.equals(this.name, service.name) &&
        Objects.equals(this.names, service.names) &&
        Objects.equals(this.root, service.root) &&
        Objects.equals(this.accountId, service.accountId) &&
        Objects.equals(this.type, service.type) &&
        Objects.equals(this.state, service.state) &&
        Objects.equals(this.startTime, service.startTime) &&
        Objects.equals(this.endTime, service.endTime) &&
        Objects.equals(this.edges, service.edges) &&
        Objects.equals(this.summaryStatistics, service.summaryStatistics) &&
        Objects.equals(this.durationHistogram, service.durationHistogram) &&
        Objects.equals(this.responseTimeHistogram, service.responseTimeHistogram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceId, name, names, root, accountId, type, state, startTime, endTime, edges, summaryStatistics, durationHistogram, responseTimeHistogram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    edges: ").append(toIndentedString(edges)).append("\n");
    sb.append("    summaryStatistics: ").append(toIndentedString(summaryStatistics)).append("\n");
    sb.append("    durationHistogram: ").append(toIndentedString(durationHistogram)).append("\n");
    sb.append("    responseTimeHistogram: ").append(toIndentedString(responseTimeHistogram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReferenceId");
    openapiFields.add("Name");
    openapiFields.add("Names");
    openapiFields.add("Root");
    openapiFields.add("AccountId");
    openapiFields.add("Type");
    openapiFields.add("State");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("Edges");
    openapiFields.add("SummaryStatistics");
    openapiFields.add("DurationHistogram");
    openapiFields.add("ResponseTimeHistogram");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Service is not found in the empty JSON string", Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReferenceId`
      if (jsonObj.get("ReferenceId") != null && !jsonObj.get("ReferenceId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ReferenceId"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Names`
      if (jsonObj.get("Names") != null && !jsonObj.get("Names").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Names"));
      }
      // validate the optional field `Root`
      if (jsonObj.get("Root") != null && !jsonObj.get("Root").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Root"));
      }
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `Edges`
      if (jsonObj.get("Edges") != null && !jsonObj.get("Edges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Edges"));
      }
      // validate the optional field `SummaryStatistics`
      if (jsonObj.get("SummaryStatistics") != null && !jsonObj.get("SummaryStatistics").isJsonNull()) {
        ServiceSummaryStatistics.validateJsonElement(jsonObj.get("SummaryStatistics"));
      }
      // validate the optional field `DurationHistogram`
      if (jsonObj.get("DurationHistogram") != null && !jsonObj.get("DurationHistogram").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DurationHistogram"));
      }
      // validate the optional field `ResponseTimeHistogram`
      if (jsonObj.get("ResponseTimeHistogram") != null && !jsonObj.get("ResponseTimeHistogram").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResponseTimeHistogram"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Service.class));

       return (TypeAdapter<T>) new TypeAdapter<Service>() {
           @Override
           public void write(JsonWriter out, Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Service
   * @throws IOException if the JSON string is invalid with respect to Service
   */
  public static Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Service.class);
  }

  /**
   * Convert an instance of Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

