/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of fields identifying the services in a trace summary fault.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FaultRootCauseService {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMES = "Names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List names;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ENTITY_PATH = "EntityPath";
  @SerializedName(SERIALIZED_NAME_ENTITY_PATH)
  private List entityPath;

  public static final String SERIALIZED_NAME_INFERRED = "Inferred";
  @SerializedName(SERIALIZED_NAME_INFERRED)
  private Boolean inferred;

  public FaultRootCauseService() {
  }

  public FaultRootCauseService name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FaultRootCauseService names(List names) {
    this.names = names;
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List getNames() {
    return names;
  }

  public void setNames(List names) {
    this.names = names;
  }


  public FaultRootCauseService type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public FaultRootCauseService accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public FaultRootCauseService entityPath(List entityPath) {
    this.entityPath = entityPath;
    return this;
  }

  /**
   * Get entityPath
   * @return entityPath
   */
  @javax.annotation.Nullable
  public List getEntityPath() {
    return entityPath;
  }

  public void setEntityPath(List entityPath) {
    this.entityPath = entityPath;
  }


  public FaultRootCauseService inferred(Boolean inferred) {
    this.inferred = inferred;
    return this;
  }

  /**
   * Get inferred
   * @return inferred
   */
  @javax.annotation.Nullable
  public Boolean getInferred() {
    return inferred;
  }

  public void setInferred(Boolean inferred) {
    this.inferred = inferred;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaultRootCauseService faultRootCauseService = (FaultRootCauseService) o;
    return Objects.equals(this.name, faultRootCauseService.name) &&
        Objects.equals(this.names, faultRootCauseService.names) &&
        Objects.equals(this.type, faultRootCauseService.type) &&
        Objects.equals(this.accountId, faultRootCauseService.accountId) &&
        Objects.equals(this.entityPath, faultRootCauseService.entityPath) &&
        Objects.equals(this.inferred, faultRootCauseService.inferred);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, names, type, accountId, entityPath, inferred);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaultRootCauseService {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    entityPath: ").append(toIndentedString(entityPath)).append("\n");
    sb.append("    inferred: ").append(toIndentedString(inferred)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Names");
    openapiFields.add("Type");
    openapiFields.add("AccountId");
    openapiFields.add("EntityPath");
    openapiFields.add("Inferred");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaultRootCauseService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FaultRootCauseService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FaultRootCauseService is not found in the empty JSON string", FaultRootCauseService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FaultRootCauseService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FaultRootCauseService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Names`
      if (jsonObj.get("Names") != null && !jsonObj.get("Names").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Names"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
      // validate the optional field `EntityPath`
      if (jsonObj.get("EntityPath") != null && !jsonObj.get("EntityPath").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EntityPath"));
      }
      // validate the optional field `Inferred`
      if (jsonObj.get("Inferred") != null && !jsonObj.get("Inferred").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Inferred"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FaultRootCauseService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FaultRootCauseService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FaultRootCauseService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FaultRootCauseService.class));

       return (TypeAdapter<T>) new TypeAdapter<FaultRootCauseService>() {
           @Override
           public void write(JsonWriter out, FaultRootCauseService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FaultRootCauseService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FaultRootCauseService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaultRootCauseService
   * @throws IOException if the JSON string is invalid with respect to FaultRootCauseService
   */
  public static FaultRootCauseService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaultRootCauseService.class);
  }

  /**
   * Convert an instance of FaultRootCauseService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

