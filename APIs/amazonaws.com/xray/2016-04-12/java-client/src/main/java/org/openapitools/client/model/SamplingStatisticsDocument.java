/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request sampling results for a single rule from a service. Results are for the last 10 seconds unless the service has been assigned a longer reporting interval after a previous call to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingTargets.html\&quot;&gt;GetSamplingTargets&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:52.416359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SamplingStatisticsDocument {
  public static final String SERIALIZED_NAME_RULE_NAME = "RuleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_CLIENT_I_D = "ClientID";
  @SerializedName(SERIALIZED_NAME_CLIENT_I_D)
  private String clientID;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_REQUEST_COUNT = "RequestCount";
  @SerializedName(SERIALIZED_NAME_REQUEST_COUNT)
  private Integer requestCount;

  public static final String SERIALIZED_NAME_SAMPLED_COUNT = "SampledCount";
  @SerializedName(SERIALIZED_NAME_SAMPLED_COUNT)
  private Integer sampledCount;

  public static final String SERIALIZED_NAME_BORROW_COUNT = "BorrowCount";
  @SerializedName(SERIALIZED_NAME_BORROW_COUNT)
  private Integer borrowCount;

  public SamplingStatisticsDocument() {
  }

  public SamplingStatisticsDocument ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * Get ruleName
   * @return ruleName
   */
  @javax.annotation.Nonnull
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public SamplingStatisticsDocument clientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  /**
   * Get clientID
   * @return clientID
   */
  @javax.annotation.Nonnull
  public String getClientID() {
    return clientID;
  }

  public void setClientID(String clientID) {
    this.clientID = clientID;
  }


  public SamplingStatisticsDocument timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public SamplingStatisticsDocument requestCount(Integer requestCount) {
    this.requestCount = requestCount;
    return this;
  }

  /**
   * Get requestCount
   * @return requestCount
   */
  @javax.annotation.Nonnull
  public Integer getRequestCount() {
    return requestCount;
  }

  public void setRequestCount(Integer requestCount) {
    this.requestCount = requestCount;
  }


  public SamplingStatisticsDocument sampledCount(Integer sampledCount) {
    this.sampledCount = sampledCount;
    return this;
  }

  /**
   * Get sampledCount
   * @return sampledCount
   */
  @javax.annotation.Nonnull
  public Integer getSampledCount() {
    return sampledCount;
  }

  public void setSampledCount(Integer sampledCount) {
    this.sampledCount = sampledCount;
  }


  public SamplingStatisticsDocument borrowCount(Integer borrowCount) {
    this.borrowCount = borrowCount;
    return this;
  }

  /**
   * Get borrowCount
   * @return borrowCount
   */
  @javax.annotation.Nullable
  public Integer getBorrowCount() {
    return borrowCount;
  }

  public void setBorrowCount(Integer borrowCount) {
    this.borrowCount = borrowCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SamplingStatisticsDocument samplingStatisticsDocument = (SamplingStatisticsDocument) o;
    return Objects.equals(this.ruleName, samplingStatisticsDocument.ruleName) &&
        Objects.equals(this.clientID, samplingStatisticsDocument.clientID) &&
        Objects.equals(this.timestamp, samplingStatisticsDocument.timestamp) &&
        Objects.equals(this.requestCount, samplingStatisticsDocument.requestCount) &&
        Objects.equals(this.sampledCount, samplingStatisticsDocument.sampledCount) &&
        Objects.equals(this.borrowCount, samplingStatisticsDocument.borrowCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleName, clientID, timestamp, requestCount, sampledCount, borrowCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SamplingStatisticsDocument {\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    clientID: ").append(toIndentedString(clientID)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    requestCount: ").append(toIndentedString(requestCount)).append("\n");
    sb.append("    sampledCount: ").append(toIndentedString(sampledCount)).append("\n");
    sb.append("    borrowCount: ").append(toIndentedString(borrowCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RuleName");
    openapiFields.add("ClientID");
    openapiFields.add("Timestamp");
    openapiFields.add("RequestCount");
    openapiFields.add("SampledCount");
    openapiFields.add("BorrowCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RuleName");
    openapiRequiredFields.add("ClientID");
    openapiRequiredFields.add("Timestamp");
    openapiRequiredFields.add("RequestCount");
    openapiRequiredFields.add("SampledCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SamplingStatisticsDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SamplingStatisticsDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SamplingStatisticsDocument is not found in the empty JSON string", SamplingStatisticsDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SamplingStatisticsDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SamplingStatisticsDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SamplingStatisticsDocument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RuleName`
      String.validateJsonElement(jsonObj.get("RuleName"));
      // validate the required field `ClientID`
      String.validateJsonElement(jsonObj.get("ClientID"));
      // validate the required field `Timestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      // validate the required field `RequestCount`
      Integer.validateJsonElement(jsonObj.get("RequestCount"));
      // validate the required field `SampledCount`
      Integer.validateJsonElement(jsonObj.get("SampledCount"));
      // validate the optional field `BorrowCount`
      if (jsonObj.get("BorrowCount") != null && !jsonObj.get("BorrowCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BorrowCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SamplingStatisticsDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SamplingStatisticsDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SamplingStatisticsDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SamplingStatisticsDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<SamplingStatisticsDocument>() {
           @Override
           public void write(JsonWriter out, SamplingStatisticsDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SamplingStatisticsDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SamplingStatisticsDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SamplingStatisticsDocument
   * @throws IOException if the JSON string is invalid with respect to SamplingStatisticsDocument
   */
  public static SamplingStatisticsDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SamplingStatisticsDocument.class);
  }

  /**
   * Convert an instance of SamplingStatisticsDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

