/*
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchGetTracesRequest;
import org.openapitools.client.model.BatchGetTracesResult;
import org.openapitools.client.model.CreateGroupRequest;
import org.openapitools.client.model.CreateGroupResult;
import org.openapitools.client.model.CreateSamplingRuleRequest;
import org.openapitools.client.model.CreateSamplingRuleResult;
import org.openapitools.client.model.DeleteGroupRequest;
import org.openapitools.client.model.DeleteResourcePolicyRequest;
import org.openapitools.client.model.DeleteSamplingRuleRequest;
import org.openapitools.client.model.DeleteSamplingRuleResult;
import org.openapitools.client.model.GetEncryptionConfigResult;
import org.openapitools.client.model.GetGroupResult;
import org.openapitools.client.model.GetGroupsRequest;
import org.openapitools.client.model.GetGroupsResult;
import org.openapitools.client.model.GetInsightEventsRequest;
import org.openapitools.client.model.GetInsightEventsResult;
import org.openapitools.client.model.GetInsightImpactGraphRequest;
import org.openapitools.client.model.GetInsightImpactGraphResult;
import org.openapitools.client.model.GetInsightRequest;
import org.openapitools.client.model.GetInsightResult;
import org.openapitools.client.model.GetInsightSummariesRequest;
import org.openapitools.client.model.GetInsightSummariesResult;
import org.openapitools.client.model.GetSamplingRulesRequest;
import org.openapitools.client.model.GetSamplingRulesResult;
import org.openapitools.client.model.GetSamplingStatisticSummariesResult;
import org.openapitools.client.model.GetSamplingTargetsRequest;
import org.openapitools.client.model.GetSamplingTargetsResult;
import org.openapitools.client.model.GetServiceGraphRequest;
import org.openapitools.client.model.GetServiceGraphResult;
import org.openapitools.client.model.GetTimeSeriesServiceStatisticsRequest;
import org.openapitools.client.model.GetTimeSeriesServiceStatisticsResult;
import org.openapitools.client.model.GetTraceGraphRequest;
import org.openapitools.client.model.GetTraceGraphResult;
import org.openapitools.client.model.GetTraceSummariesRequest;
import org.openapitools.client.model.GetTraceSummariesResult;
import org.openapitools.client.model.ListResourcePoliciesRequest;
import org.openapitools.client.model.ListResourcePoliciesResult;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutEncryptionConfigRequest;
import org.openapitools.client.model.PutEncryptionConfigResult;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.PutResourcePolicyResult;
import org.openapitools.client.model.PutTelemetryRecordsRequest;
import org.openapitools.client.model.PutTraceSegmentsRequest;
import org.openapitools.client.model.PutTraceSegmentsResult;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateGroupRequest;
import org.openapitools.client.model.UpdateGroupResult;
import org.openapitools.client.model.UpdateSamplingRuleRequest;
import org.openapitools.client.model.UpdateSamplingRuleResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Retrieves a list of traces specified by ID. Each trace is a collection of segment documents that originates from a single request. Use &lt;code&gt;GetTraceSummaries&lt;/code&gt; to get a list of trace IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetTracesTest() throws ApiException {
        BatchGetTracesRequest batchGetTracesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        BatchGetTracesResult response = api.batchGetTraces(batchGetTracesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Creates a group resource with a name and a filter expression. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        CreateGroupRequest createGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGroupResult response = api.createGroup(createGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a rule to control sampling behavior for instrumented applications. Services retrieve rules with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingRules.html\&quot;&gt;GetSamplingRules&lt;/a&gt;, and evaluate each rule in ascending order of &lt;i&gt;priority&lt;/i&gt; for each request. If a rule matches, the service records a trace, borrowing it from the reservoir size. After 10 seconds, the service reports back to X-Ray with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingTargets.html\&quot;&gt;GetSamplingTargets&lt;/a&gt; to get updated versions of each in-use rule. The updated rule contains a trace quota that the service can use instead of borrowing from the reservoir.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSamplingRuleTest() throws ApiException {
        CreateSamplingRuleRequest createSamplingRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSamplingRuleResult response = api.createSamplingRule(createSamplingRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a group resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        DeleteGroupRequest deleteGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteGroup(deleteGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a resource policy from the target Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        DeleteResourcePolicyRequest deleteResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteResourcePolicy(deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a sampling rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSamplingRuleTest() throws ApiException {
        DeleteSamplingRuleRequest deleteSamplingRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSamplingRuleResult response = api.deleteSamplingRule(deleteSamplingRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the current encryption configuration for X-Ray data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEncryptionConfigTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEncryptionConfigResult response = api.getEncryptionConfig(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves group resource details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupTest() throws ApiException {
        DeleteGroupRequest deleteGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGroupResult response = api.getGroup(deleteGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves all active group details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupsTest() throws ApiException {
        GetGroupsRequest getGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetGroupsResult response = api.getGroups(getGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the summary information of an insight. This includes impact to clients and root cause services, the top anomalous services, the category, the state of the insight, and the start and end time of the insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightTest() throws ApiException {
        GetInsightRequest getInsightRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInsightResult response = api.getInsight(getInsightRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * X-Ray reevaluates insights periodically until they&#39;re resolved, and records each intermediate state as an event. You can review an insight&#39;s events in the Impact Timeline on the Inspect page in the X-Ray console.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightEventsTest() throws ApiException {
        GetInsightEventsRequest getInsightEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetInsightEventsResult response = api.getInsightEvents(getInsightEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a service graph structure filtered by the specified insight. The service graph is limited to only structural information. For a complete service graph, use this API with the GetServiceGraph API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightImpactGraphTest() throws ApiException {
        GetInsightImpactGraphRequest getInsightImpactGraphRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInsightImpactGraphResult response = api.getInsightImpactGraph(getInsightImpactGraphRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the summaries of all insights in the specified group matching the provided filter values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightSummariesTest() throws ApiException {
        GetInsightSummariesRequest getInsightSummariesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetInsightSummariesResult response = api.getInsightSummaries(getInsightSummariesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves all sampling rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSamplingRulesTest() throws ApiException {
        GetSamplingRulesRequest getSamplingRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetSamplingRulesResult response = api.getSamplingRules(getSamplingRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves information about recent sampling results for all sampling rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSamplingStatisticSummariesTest() throws ApiException {
        GetSamplingRulesRequest getSamplingRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetSamplingStatisticSummariesResult response = api.getSamplingStatisticSummaries(getSamplingRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Requests a sampling quota for rules that the service is using to sample requests. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSamplingTargetsTest() throws ApiException {
        GetSamplingTargetsRequest getSamplingTargetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSamplingTargetsResult response = api.getSamplingTargets(getSamplingTargetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a document that describes services that process incoming requests, and downstream services that they call as a result. Root services process incoming requests and make calls to downstream services. Root services are applications that use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/index.html\&quot;&gt;Amazon Web Services X-Ray SDK&lt;/a&gt;. Downstream services can be other applications, Amazon Web Services resources, HTTP web APIs, or SQL databases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceGraphTest() throws ApiException {
        GetServiceGraphRequest getServiceGraphRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetServiceGraphResult response = api.getServiceGraph(getServiceGraphRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Get an aggregation of service statistics defined by a specific time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeSeriesServiceStatisticsTest() throws ApiException {
        GetTimeSeriesServiceStatisticsRequest getTimeSeriesServiceStatisticsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetTimeSeriesServiceStatisticsResult response = api.getTimeSeriesServiceStatistics(getTimeSeriesServiceStatisticsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a service graph for one or more specific trace IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTraceGraphTest() throws ApiException {
        GetTraceGraphRequest getTraceGraphRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetTraceGraphResult response = api.getTraceGraph(getTraceGraphRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves IDs and annotations for traces available for a specified time frame using an optional filter. To get the full traces, pass the trace IDs to &lt;code&gt;BatchGetTraces&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A filter expression can target traced requests that hit specific service nodes or edges, have errors, or come from a known user. For example, the following filter expression targets traces that pass through &lt;code&gt;api.example.com&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt;service(\&quot;api.example.com\&quot;)&lt;/code&gt; &lt;/p&gt; &lt;p&gt;This filter expression finds traces that have an annotation named &lt;code&gt;account&lt;/code&gt; with the value &lt;code&gt;12345&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt;annotation.account &#x3D; \&quot;12345\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For a full list of indexed fields and keywords that you can use in filter expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html\&quot;&gt;Using Filter Expressions&lt;/a&gt; in the &lt;i&gt;Amazon Web Services X-Ray Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTraceSummariesTest() throws ApiException {
        GetTraceSummariesRequest getTraceSummariesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetTraceSummariesResult response = api.getTraceSummaries(getTraceSummariesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the list of resource policies in the target Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourcePoliciesTest() throws ApiException {
        ListResourcePoliciesRequest listResourcePoliciesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListResourcePoliciesResult response = api.listResourcePolicies(listResourcePoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of tags that are applied to the specified Amazon Web Services X-Ray group or sampling rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Updates the encryption configuration for X-Ray data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEncryptionConfigTest() throws ApiException {
        PutEncryptionConfigRequest putEncryptionConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutEncryptionConfigResult response = api.putEncryptionConfig(putEncryptionConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Sets the resource policy to grant one or more Amazon Web Services services and accounts permissions to access X-Ray. Each resource policy will be associated with a specific Amazon Web Services account. Each Amazon Web Services account can have a maximum of 5 resource policies, and each policy name must be unique within that account. The maximum size of each resource policy is 5KB. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePolicyTest() throws ApiException {
        PutResourcePolicyRequest putResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutResourcePolicyResult response = api.putResourcePolicy(putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used by the Amazon Web Services X-Ray daemon to upload telemetry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putTelemetryRecordsTest() throws ApiException {
        PutTelemetryRecordsRequest putTelemetryRecordsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putTelemetryRecords(putTelemetryRecordsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Uploads segment documents to Amazon Web Services X-Ray. The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/index.html\&quot;&gt;X-Ray SDK&lt;/a&gt; generates segment documents and sends them to the X-Ray daemon, which uploads them in batches. A segment document can be a completed segment, an in-progress segment, or an array of subsegments.&lt;/p&gt; &lt;p&gt;Segments must include the following fields. For the full segment document schema, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html\&quot;&gt;Amazon Web Services X-Ray Segment Documents&lt;/a&gt; in the &lt;i&gt;Amazon Web Services X-Ray Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Required segment document fields&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;name&lt;/code&gt; - The name of the service that handled the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;id&lt;/code&gt; - A 64-bit identifier for the segment, unique among segments in the same trace, in 16 hexadecimal digits.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;trace_id&lt;/code&gt; - A unique identifier that connects all segments and subsegments originating from a single client request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;start_time&lt;/code&gt; - Time the segment or subsegment was created, in floating point seconds in epoch time, accurate to milliseconds. For example, &lt;code&gt;1480615200.010&lt;/code&gt; or &lt;code&gt;1.480615200010E9&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;end_time&lt;/code&gt; - Time the segment or subsegment was closed. For example, &lt;code&gt;1480615200.090&lt;/code&gt; or &lt;code&gt;1.480615200090E9&lt;/code&gt;. Specify either an &lt;code&gt;end_time&lt;/code&gt; or &lt;code&gt;in_progress&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;in_progress&lt;/code&gt; - Set to &lt;code&gt;true&lt;/code&gt; instead of specifying an &lt;code&gt;end_time&lt;/code&gt; to record that a segment has been started, but is not complete. Send an in-progress segment when your application receives a request that will take a long time to serve, to trace that the request was received. When the response is sent, send the complete segment to overwrite the in-progress segment.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A &lt;code&gt;trace_id&lt;/code&gt; consists of three numbers separated by hyphens. For example, 1-58406520-a006649127e371903a2de979. This includes:&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Trace ID Format&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The version number, for instance, &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The time of the original request, in Unix epoch time, in 8 hexadecimal digits. For example, 10:00AM December 2nd, 2016 PST in epoch time is &lt;code&gt;1480615200&lt;/code&gt; seconds, or &lt;code&gt;58406520&lt;/code&gt; in hexadecimal.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A 96-bit identifier for the trace, globally unique, in 24 hexadecimal digits.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putTraceSegmentsTest() throws ApiException {
        PutTraceSegmentsRequest putTraceSegmentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutTraceSegmentsResult response = api.putTraceSegments(putTraceSegmentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies tags to an existing Amazon Web Services X-Ray group or sampling rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from an Amazon Web Services X-Ray group or sampling rule. You cannot edit or delete system tags (those with an &lt;code&gt;aws:&lt;/code&gt; prefix).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a group resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        UpdateGroupRequest updateGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateGroupResult response = api.updateGroup(updateGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies a sampling rule&#39;s configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSamplingRuleTest() throws ApiException {
        UpdateSamplingRuleRequest updateSamplingRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSamplingRuleResult response = api.updateSamplingRule(updateSamplingRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
