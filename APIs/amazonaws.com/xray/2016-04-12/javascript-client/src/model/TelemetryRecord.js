/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TelemetryRecordBackendConnectionErrors from './TelemetryRecordBackendConnectionErrors';

/**
 * The TelemetryRecord model module.
 * @module model/TelemetryRecord
 * @version 2016-04-12
 */
class TelemetryRecord {
    /**
     * Constructs a new <code>TelemetryRecord</code>.
     * &lt;p/&gt;
     * @alias module:model/TelemetryRecord
     * @param timestamp {Date} 
     */
    constructor(timestamp) { 
        
        TelemetryRecord.initialize(this, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timestamp) { 
        obj['Timestamp'] = timestamp;
    }

    /**
     * Constructs a <code>TelemetryRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TelemetryRecord} obj Optional instance to populate.
     * @return {module:model/TelemetryRecord} The populated <code>TelemetryRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TelemetryRecord();

            if (data.hasOwnProperty('Timestamp')) {
                obj['Timestamp'] = ApiClient.convertToType(data['Timestamp'], 'Date');
            }
            if (data.hasOwnProperty('SegmentsReceivedCount')) {
                obj['SegmentsReceivedCount'] = ApiClient.convertToType(data['SegmentsReceivedCount'], 'Number');
            }
            if (data.hasOwnProperty('SegmentsSentCount')) {
                obj['SegmentsSentCount'] = ApiClient.convertToType(data['SegmentsSentCount'], 'Number');
            }
            if (data.hasOwnProperty('SegmentsSpilloverCount')) {
                obj['SegmentsSpilloverCount'] = ApiClient.convertToType(data['SegmentsSpilloverCount'], 'Number');
            }
            if (data.hasOwnProperty('SegmentsRejectedCount')) {
                obj['SegmentsRejectedCount'] = ApiClient.convertToType(data['SegmentsRejectedCount'], 'Number');
            }
            if (data.hasOwnProperty('BackendConnectionErrors')) {
                obj['BackendConnectionErrors'] = TelemetryRecordBackendConnectionErrors.constructFromObject(data['BackendConnectionErrors']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TelemetryRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TelemetryRecord</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TelemetryRecord.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Timestamp`
        if (data['Timestamp']) { // data not null
          Date.validateJSON(data['Timestamp']);
        }
        // validate the optional field `SegmentsReceivedCount`
        if (data['SegmentsReceivedCount']) { // data not null
          Number.validateJSON(data['SegmentsReceivedCount']);
        }
        // validate the optional field `SegmentsSentCount`
        if (data['SegmentsSentCount']) { // data not null
          Number.validateJSON(data['SegmentsSentCount']);
        }
        // validate the optional field `SegmentsSpilloverCount`
        if (data['SegmentsSpilloverCount']) { // data not null
          Number.validateJSON(data['SegmentsSpilloverCount']);
        }
        // validate the optional field `SegmentsRejectedCount`
        if (data['SegmentsRejectedCount']) { // data not null
          Number.validateJSON(data['SegmentsRejectedCount']);
        }
        // validate the optional field `BackendConnectionErrors`
        if (data['BackendConnectionErrors']) { // data not null
          TelemetryRecordBackendConnectionErrors.validateJSON(data['BackendConnectionErrors']);
        }

        return true;
    }


}

TelemetryRecord.RequiredProperties = ["Timestamp"];

/**
 * @member {Date} Timestamp
 */
TelemetryRecord.prototype['Timestamp'] = undefined;

/**
 * @member {Number} SegmentsReceivedCount
 */
TelemetryRecord.prototype['SegmentsReceivedCount'] = undefined;

/**
 * @member {Number} SegmentsSentCount
 */
TelemetryRecord.prototype['SegmentsSentCount'] = undefined;

/**
 * @member {Number} SegmentsSpilloverCount
 */
TelemetryRecord.prototype['SegmentsSpilloverCount'] = undefined;

/**
 * @member {Number} SegmentsRejectedCount
 */
TelemetryRecord.prototype['SegmentsRejectedCount'] = undefined;

/**
 * @member {module:model/TelemetryRecordBackendConnectionErrors} BackendConnectionErrors
 */
TelemetryRecord.prototype['BackendConnectionErrors'] = undefined;






export default TelemetryRecord;

