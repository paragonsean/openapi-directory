/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Segment model module.
 * @module model/Segment
 * @version 2016-04-12
 */
class Segment {
    /**
     * Constructs a new <code>Segment</code>.
     * &lt;p&gt;A segment from a trace that has been ingested by the X-Ray service. The segment can be compiled from documents uploaded with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/latest/api/API_PutTraceSegments.html\&quot;&gt;PutTraceSegments&lt;/a&gt;, or an &lt;code&gt;inferred&lt;/code&gt; segment for a downstream service, generated from a subsegment sent by the service that called it.&lt;/p&gt; &lt;p&gt;For the full segment document schema, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html\&quot;&gt;Amazon Web Services X-Ray Segment Documents&lt;/a&gt; in the &lt;i&gt;Amazon Web Services X-Ray Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/Segment
     */
    constructor() { 
        
        Segment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Segment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Segment} obj Optional instance to populate.
     * @return {module:model/Segment} The populated <code>Segment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Segment();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Document')) {
                obj['Document'] = ApiClient.convertToType(data['Document'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Segment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Segment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Document`
        if (data['Document']) { // data not null
          String.validateJSON(data['Document']);
        }

        return true;
    }


}



/**
 * @member {String} Id
 */
Segment.prototype['Id'] = undefined;

/**
 * @member {String} Document
 */
Segment.prototype['Document'] = undefined;






export default Segment;

