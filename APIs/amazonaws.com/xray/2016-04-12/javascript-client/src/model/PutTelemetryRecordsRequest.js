/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TelemetryRecord from './TelemetryRecord';

/**
 * The PutTelemetryRecordsRequest model module.
 * @module model/PutTelemetryRecordsRequest
 * @version 2016-04-12
 */
class PutTelemetryRecordsRequest {
    /**
     * Constructs a new <code>PutTelemetryRecordsRequest</code>.
     * @alias module:model/PutTelemetryRecordsRequest
     * @param telemetryRecords {Array.<module:model/TelemetryRecord>} <p/>
     */
    constructor(telemetryRecords) { 
        
        PutTelemetryRecordsRequest.initialize(this, telemetryRecords);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, telemetryRecords) { 
        obj['TelemetryRecords'] = telemetryRecords;
    }

    /**
     * Constructs a <code>PutTelemetryRecordsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutTelemetryRecordsRequest} obj Optional instance to populate.
     * @return {module:model/PutTelemetryRecordsRequest} The populated <code>PutTelemetryRecordsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutTelemetryRecordsRequest();

            if (data.hasOwnProperty('TelemetryRecords')) {
                obj['TelemetryRecords'] = ApiClient.convertToType(data['TelemetryRecords'], [TelemetryRecord]);
            }
            if (data.hasOwnProperty('EC2InstanceId')) {
                obj['EC2InstanceId'] = ApiClient.convertToType(data['EC2InstanceId'], 'String');
            }
            if (data.hasOwnProperty('Hostname')) {
                obj['Hostname'] = ApiClient.convertToType(data['Hostname'], 'String');
            }
            if (data.hasOwnProperty('ResourceARN')) {
                obj['ResourceARN'] = ApiClient.convertToType(data['ResourceARN'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutTelemetryRecordsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutTelemetryRecordsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutTelemetryRecordsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['TelemetryRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TelemetryRecords'])) {
                throw new Error("Expected the field `TelemetryRecords` to be an array in the JSON data but got " + data['TelemetryRecords']);
            }
            // validate the optional field `TelemetryRecords` (array)
            for (const item of data['TelemetryRecords']) {
                TelemetryRecord.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['EC2InstanceId'] && !(typeof data['EC2InstanceId'] === 'string' || data['EC2InstanceId'] instanceof String)) {
            throw new Error("Expected the field `EC2InstanceId` to be a primitive type in the JSON string but got " + data['EC2InstanceId']);
        }
        // ensure the json data is a string
        if (data['Hostname'] && !(typeof data['Hostname'] === 'string' || data['Hostname'] instanceof String)) {
            throw new Error("Expected the field `Hostname` to be a primitive type in the JSON string but got " + data['Hostname']);
        }
        // ensure the json data is a string
        if (data['ResourceARN'] && !(typeof data['ResourceARN'] === 'string' || data['ResourceARN'] instanceof String)) {
            throw new Error("Expected the field `ResourceARN` to be a primitive type in the JSON string but got " + data['ResourceARN']);
        }

        return true;
    }


}

PutTelemetryRecordsRequest.RequiredProperties = ["TelemetryRecords"];

/**
 * <p/>
 * @member {Array.<module:model/TelemetryRecord>} TelemetryRecords
 */
PutTelemetryRecordsRequest.prototype['TelemetryRecords'] = undefined;

/**
 * <p/>
 * @member {String} EC2InstanceId
 */
PutTelemetryRecordsRequest.prototype['EC2InstanceId'] = undefined;

/**
 * <p/>
 * @member {String} Hostname
 */
PutTelemetryRecordsRequest.prototype['Hostname'] = undefined;

/**
 * <p/>
 * @member {String} ResourceARN
 */
PutTelemetryRecordsRequest.prototype['ResourceARN'] = undefined;






export default PutTelemetryRecordsRequest;

