/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Http from './Http';

/**
 * The TraceSummaryHttp model module.
 * @module model/TraceSummaryHttp
 * @version 2016-04-12
 */
class TraceSummaryHttp {
    /**
     * Constructs a new <code>TraceSummaryHttp</code>.
     * @alias module:model/TraceSummaryHttp
     * @implements module:model/Http
     */
    constructor() { 
        Http.initialize(this);
        TraceSummaryHttp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TraceSummaryHttp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TraceSummaryHttp} obj Optional instance to populate.
     * @return {module:model/TraceSummaryHttp} The populated <code>TraceSummaryHttp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TraceSummaryHttp();
            Http.constructFromObject(data, obj);

            if (data.hasOwnProperty('HttpURL')) {
                obj['HttpURL'] = ApiClient.convertToType(data['HttpURL'], 'String');
            }
            if (data.hasOwnProperty('HttpStatus')) {
                obj['HttpStatus'] = ApiClient.convertToType(data['HttpStatus'], 'Number');
            }
            if (data.hasOwnProperty('HttpMethod')) {
                obj['HttpMethod'] = ApiClient.convertToType(data['HttpMethod'], 'String');
            }
            if (data.hasOwnProperty('UserAgent')) {
                obj['UserAgent'] = ApiClient.convertToType(data['UserAgent'], 'String');
            }
            if (data.hasOwnProperty('ClientIp')) {
                obj['ClientIp'] = ApiClient.convertToType(data['ClientIp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TraceSummaryHttp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TraceSummaryHttp</code>.
     */
    static validateJSON(data) {
        // validate the optional field `HttpURL`
        if (data['HttpURL']) { // data not null
          String.validateJSON(data['HttpURL']);
        }
        // validate the optional field `HttpStatus`
        if (data['HttpStatus']) { // data not null
          Number.validateJSON(data['HttpStatus']);
        }
        // validate the optional field `HttpMethod`
        if (data['HttpMethod']) { // data not null
          String.validateJSON(data['HttpMethod']);
        }
        // validate the optional field `UserAgent`
        if (data['UserAgent']) { // data not null
          String.validateJSON(data['UserAgent']);
        }
        // validate the optional field `ClientIp`
        if (data['ClientIp']) { // data not null
          String.validateJSON(data['ClientIp']);
        }

        return true;
    }


}



/**
 * @member {String} HttpURL
 */
TraceSummaryHttp.prototype['HttpURL'] = undefined;

/**
 * @member {Number} HttpStatus
 */
TraceSummaryHttp.prototype['HttpStatus'] = undefined;

/**
 * @member {String} HttpMethod
 */
TraceSummaryHttp.prototype['HttpMethod'] = undefined;

/**
 * @member {String} UserAgent
 */
TraceSummaryHttp.prototype['UserAgent'] = undefined;

/**
 * @member {String} ClientIp
 */
TraceSummaryHttp.prototype['ClientIp'] = undefined;


// Implement Http interface:
/**
 * @member {String} HttpURL
 */
Http.prototype['HttpURL'] = undefined;
/**
 * @member {Number} HttpStatus
 */
Http.prototype['HttpStatus'] = undefined;
/**
 * @member {String} HttpMethod
 */
Http.prototype['HttpMethod'] = undefined;
/**
 * @member {String} UserAgent
 */
Http.prototype['UserAgent'] = undefined;
/**
 * @member {String} ClientIp
 */
Http.prototype['ClientIp'] = undefined;




export default TraceSummaryHttp;

