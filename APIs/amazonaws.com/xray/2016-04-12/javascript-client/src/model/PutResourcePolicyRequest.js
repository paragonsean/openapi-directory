/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutResourcePolicyRequest model module.
 * @module model/PutResourcePolicyRequest
 * @version 2016-04-12
 */
class PutResourcePolicyRequest {
    /**
     * Constructs a new <code>PutResourcePolicyRequest</code>.
     * @alias module:model/PutResourcePolicyRequest
     * @param policyName {String} The name of the resource policy. Must be unique within a specific Amazon Web Services account.
     * @param policyDocument {String} The resource policy document, which can be up to 5kb in size.
     */
    constructor(policyName, policyDocument) { 
        
        PutResourcePolicyRequest.initialize(this, policyName, policyDocument);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, policyName, policyDocument) { 
        obj['PolicyName'] = policyName;
        obj['PolicyDocument'] = policyDocument;
    }

    /**
     * Constructs a <code>PutResourcePolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutResourcePolicyRequest} obj Optional instance to populate.
     * @return {module:model/PutResourcePolicyRequest} The populated <code>PutResourcePolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutResourcePolicyRequest();

            if (data.hasOwnProperty('PolicyName')) {
                obj['PolicyName'] = ApiClient.convertToType(data['PolicyName'], 'String');
            }
            if (data.hasOwnProperty('PolicyDocument')) {
                obj['PolicyDocument'] = ApiClient.convertToType(data['PolicyDocument'], 'String');
            }
            if (data.hasOwnProperty('PolicyRevisionId')) {
                obj['PolicyRevisionId'] = ApiClient.convertToType(data['PolicyRevisionId'], 'String');
            }
            if (data.hasOwnProperty('BypassPolicyLockoutCheck')) {
                obj['BypassPolicyLockoutCheck'] = ApiClient.convertToType(data['BypassPolicyLockoutCheck'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutResourcePolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutResourcePolicyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutResourcePolicyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['PolicyName'] && !(typeof data['PolicyName'] === 'string' || data['PolicyName'] instanceof String)) {
            throw new Error("Expected the field `PolicyName` to be a primitive type in the JSON string but got " + data['PolicyName']);
        }
        // ensure the json data is a string
        if (data['PolicyDocument'] && !(typeof data['PolicyDocument'] === 'string' || data['PolicyDocument'] instanceof String)) {
            throw new Error("Expected the field `PolicyDocument` to be a primitive type in the JSON string but got " + data['PolicyDocument']);
        }
        // ensure the json data is a string
        if (data['PolicyRevisionId'] && !(typeof data['PolicyRevisionId'] === 'string' || data['PolicyRevisionId'] instanceof String)) {
            throw new Error("Expected the field `PolicyRevisionId` to be a primitive type in the JSON string but got " + data['PolicyRevisionId']);
        }

        return true;
    }


}

PutResourcePolicyRequest.RequiredProperties = ["PolicyName", "PolicyDocument"];

/**
 * The name of the resource policy. Must be unique within a specific Amazon Web Services account.
 * @member {String} PolicyName
 */
PutResourcePolicyRequest.prototype['PolicyName'] = undefined;

/**
 * The resource policy document, which can be up to 5kb in size.
 * @member {String} PolicyDocument
 */
PutResourcePolicyRequest.prototype['PolicyDocument'] = undefined;

/**
 * <p>Specifies a specific policy revision, to ensure an atomic create operation. By default the resource policy is created if it does not exist, or updated with an incremented revision id. The revision id is unique to each policy in the account.</p> <p>If the policy revision id does not match the latest revision id, the operation will fail with an <code>InvalidPolicyRevisionIdException</code> exception. You can also provide a <code>PolicyRevisionId</code> of 0. In this case, the operation will fail with an <code>InvalidPolicyRevisionIdException</code> exception if a resource policy with the same name already exists. </p>
 * @member {String} PolicyRevisionId
 */
PutResourcePolicyRequest.prototype['PolicyRevisionId'] = undefined;

/**
 * <p>A flag to indicate whether to bypass the resource policy lockout safety check.</p> <important> <p>Setting this value to true increases the risk that the policy becomes unmanageable. Do not set this value to true indiscriminately.</p> </important> <p>Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent <code>PutResourcePolicy</code> request.</p> <p>The default value is false.</p>
 * @member {Boolean} BypassPolicyLockoutCheck
 */
PutResourcePolicyRequest.prototype['BypassPolicyLockoutCheck'] = undefined;






export default PutResourcePolicyRequest;

