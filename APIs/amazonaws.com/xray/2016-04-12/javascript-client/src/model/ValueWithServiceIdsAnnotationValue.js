/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnnotationValue from './AnnotationValue';

/**
 * The ValueWithServiceIdsAnnotationValue model module.
 * @module model/ValueWithServiceIdsAnnotationValue
 * @version 2016-04-12
 */
class ValueWithServiceIdsAnnotationValue {
    /**
     * Constructs a new <code>ValueWithServiceIdsAnnotationValue</code>.
     * @alias module:model/ValueWithServiceIdsAnnotationValue
     * @implements module:model/AnnotationValue
     */
    constructor() { 
        AnnotationValue.initialize(this);
        ValueWithServiceIdsAnnotationValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValueWithServiceIdsAnnotationValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValueWithServiceIdsAnnotationValue} obj Optional instance to populate.
     * @return {module:model/ValueWithServiceIdsAnnotationValue} The populated <code>ValueWithServiceIdsAnnotationValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValueWithServiceIdsAnnotationValue();
            AnnotationValue.constructFromObject(data, obj);

            if (data.hasOwnProperty('NumberValue')) {
                obj['NumberValue'] = ApiClient.convertToType(data['NumberValue'], 'Number');
            }
            if (data.hasOwnProperty('BooleanValue')) {
                obj['BooleanValue'] = ApiClient.convertToType(data['BooleanValue'], 'Boolean');
            }
            if (data.hasOwnProperty('StringValue')) {
                obj['StringValue'] = ApiClient.convertToType(data['StringValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValueWithServiceIdsAnnotationValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValueWithServiceIdsAnnotationValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `NumberValue`
        if (data['NumberValue']) { // data not null
          Number.validateJSON(data['NumberValue']);
        }
        // validate the optional field `BooleanValue`
        if (data['BooleanValue']) { // data not null
          Boolean.validateJSON(data['BooleanValue']);
        }
        // validate the optional field `StringValue`
        if (data['StringValue']) { // data not null
          String.validateJSON(data['StringValue']);
        }

        return true;
    }


}



/**
 * @member {Number} NumberValue
 */
ValueWithServiceIdsAnnotationValue.prototype['NumberValue'] = undefined;

/**
 * @member {Boolean} BooleanValue
 */
ValueWithServiceIdsAnnotationValue.prototype['BooleanValue'] = undefined;

/**
 * @member {String} StringValue
 */
ValueWithServiceIdsAnnotationValue.prototype['StringValue'] = undefined;


// Implement AnnotationValue interface:
/**
 * @member {Number} NumberValue
 */
AnnotationValue.prototype['NumberValue'] = undefined;
/**
 * @member {Boolean} BooleanValue
 */
AnnotationValue.prototype['BooleanValue'] = undefined;
/**
 * @member {String} StringValue
 */
AnnotationValue.prototype['StringValue'] = undefined;




export default ValueWithServiceIdsAnnotationValue;

