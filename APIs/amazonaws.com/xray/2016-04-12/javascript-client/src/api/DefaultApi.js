/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchGetTracesRequest from '../model/BatchGetTracesRequest';
import BatchGetTracesResult from '../model/BatchGetTracesResult';
import CreateGroupRequest from '../model/CreateGroupRequest';
import CreateGroupResult from '../model/CreateGroupResult';
import CreateSamplingRuleRequest from '../model/CreateSamplingRuleRequest';
import CreateSamplingRuleResult from '../model/CreateSamplingRuleResult';
import DeleteGroupRequest from '../model/DeleteGroupRequest';
import DeleteResourcePolicyRequest from '../model/DeleteResourcePolicyRequest';
import DeleteSamplingRuleRequest from '../model/DeleteSamplingRuleRequest';
import DeleteSamplingRuleResult from '../model/DeleteSamplingRuleResult';
import GetEncryptionConfigResult from '../model/GetEncryptionConfigResult';
import GetGroupResult from '../model/GetGroupResult';
import GetGroupsRequest from '../model/GetGroupsRequest';
import GetGroupsResult from '../model/GetGroupsResult';
import GetInsightEventsRequest from '../model/GetInsightEventsRequest';
import GetInsightEventsResult from '../model/GetInsightEventsResult';
import GetInsightImpactGraphRequest from '../model/GetInsightImpactGraphRequest';
import GetInsightImpactGraphResult from '../model/GetInsightImpactGraphResult';
import GetInsightRequest from '../model/GetInsightRequest';
import GetInsightResult from '../model/GetInsightResult';
import GetInsightSummariesRequest from '../model/GetInsightSummariesRequest';
import GetInsightSummariesResult from '../model/GetInsightSummariesResult';
import GetSamplingRulesRequest from '../model/GetSamplingRulesRequest';
import GetSamplingRulesResult from '../model/GetSamplingRulesResult';
import GetSamplingStatisticSummariesResult from '../model/GetSamplingStatisticSummariesResult';
import GetSamplingTargetsRequest from '../model/GetSamplingTargetsRequest';
import GetSamplingTargetsResult from '../model/GetSamplingTargetsResult';
import GetServiceGraphRequest from '../model/GetServiceGraphRequest';
import GetServiceGraphResult from '../model/GetServiceGraphResult';
import GetTimeSeriesServiceStatisticsRequest from '../model/GetTimeSeriesServiceStatisticsRequest';
import GetTimeSeriesServiceStatisticsResult from '../model/GetTimeSeriesServiceStatisticsResult';
import GetTraceGraphRequest from '../model/GetTraceGraphRequest';
import GetTraceGraphResult from '../model/GetTraceGraphResult';
import GetTraceSummariesRequest from '../model/GetTraceSummariesRequest';
import GetTraceSummariesResult from '../model/GetTraceSummariesResult';
import ListResourcePoliciesRequest from '../model/ListResourcePoliciesRequest';
import ListResourcePoliciesResult from '../model/ListResourcePoliciesResult';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutEncryptionConfigRequest from '../model/PutEncryptionConfigRequest';
import PutEncryptionConfigResult from '../model/PutEncryptionConfigResult';
import PutResourcePolicyRequest from '../model/PutResourcePolicyRequest';
import PutResourcePolicyResult from '../model/PutResourcePolicyResult';
import PutTelemetryRecordsRequest from '../model/PutTelemetryRecordsRequest';
import PutTraceSegmentsRequest from '../model/PutTraceSegmentsRequest';
import PutTraceSegmentsResult from '../model/PutTraceSegmentsResult';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateGroupRequest from '../model/UpdateGroupRequest';
import UpdateGroupResult from '../model/UpdateGroupResult';
import UpdateSamplingRuleRequest from '../model/UpdateSamplingRuleRequest';
import UpdateSamplingRuleResult from '../model/UpdateSamplingRuleResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-04-12
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGetTraces operation.
     * @callback module:api/DefaultApi~batchGetTracesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetTracesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of traces specified by ID. Each trace is a collection of segment documents that originates from a single request. Use <code>GetTraceSummaries</code> to get a list of trace IDs.
     * @param {module:model/BatchGetTracesRequest} batchGetTracesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~batchGetTracesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetTracesResult}
     */
    batchGetTraces(batchGetTracesRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetTracesRequest;
      // verify the required parameter 'batchGetTracesRequest' is set
      if (batchGetTracesRequest === undefined || batchGetTracesRequest === null) {
        throw new Error("Missing the required parameter 'batchGetTracesRequest' when calling batchGetTraces");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetTracesResult;
      return this.apiClient.callApi(
        '/Traces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/DefaultApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a group resource with a name and a filter expression. 
     * @param {module:model/CreateGroupRequest} createGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupResult}
     */
    createGroup(createGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createGroupRequest;
      // verify the required parameter 'createGroupRequest' is set
      if (createGroupRequest === undefined || createGroupRequest === null) {
        throw new Error("Missing the required parameter 'createGroupRequest' when calling createGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGroupResult;
      return this.apiClient.callApi(
        '/CreateGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSamplingRule operation.
     * @callback module:api/DefaultApi~createSamplingRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSamplingRuleResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a rule to control sampling behavior for instrumented applications. Services retrieve rules with <a href=\"https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingRules.html\">GetSamplingRules</a>, and evaluate each rule in ascending order of <i>priority</i> for each request. If a rule matches, the service records a trace, borrowing it from the reservoir size. After 10 seconds, the service reports back to X-Ray with <a href=\"https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingTargets.html\">GetSamplingTargets</a> to get updated versions of each in-use rule. The updated rule contains a trace quota that the service can use instead of borrowing from the reservoir.
     * @param {module:model/CreateSamplingRuleRequest} createSamplingRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSamplingRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSamplingRuleResult}
     */
    createSamplingRule(createSamplingRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSamplingRuleRequest;
      // verify the required parameter 'createSamplingRuleRequest' is set
      if (createSamplingRuleRequest === undefined || createSamplingRuleRequest === null) {
        throw new Error("Missing the required parameter 'createSamplingRuleRequest' when calling createSamplingRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSamplingRuleResult;
      return this.apiClient.callApi(
        '/CreateSamplingRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback module:api/DefaultApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a group resource.
     * @param {module:model/DeleteGroupRequest} deleteGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteGroup(deleteGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteGroupRequest;
      // verify the required parameter 'deleteGroupRequest' is set
      if (deleteGroupRequest === undefined || deleteGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteGroupRequest' when calling deleteGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourcePolicy operation.
     * @callback module:api/DefaultApi~deleteResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a resource policy from the target Amazon Web Services account.
     * @param {module:model/DeleteResourcePolicyRequest} deleteResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteResourcePolicy(deleteResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteResourcePolicyRequest;
      // verify the required parameter 'deleteResourcePolicyRequest' is set
      if (deleteResourcePolicyRequest === undefined || deleteResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteResourcePolicyRequest' when calling deleteResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSamplingRule operation.
     * @callback module:api/DefaultApi~deleteSamplingRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSamplingRuleResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a sampling rule.
     * @param {module:model/DeleteSamplingRuleRequest} deleteSamplingRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSamplingRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSamplingRuleResult}
     */
    deleteSamplingRule(deleteSamplingRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSamplingRuleRequest;
      // verify the required parameter 'deleteSamplingRuleRequest' is set
      if (deleteSamplingRuleRequest === undefined || deleteSamplingRuleRequest === null) {
        throw new Error("Missing the required parameter 'deleteSamplingRuleRequest' when calling deleteSamplingRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteSamplingRuleResult;
      return this.apiClient.callApi(
        '/DeleteSamplingRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEncryptionConfig operation.
     * @callback module:api/DefaultApi~getEncryptionConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEncryptionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the current encryption configuration for X-Ray data.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEncryptionConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEncryptionConfigResult}
     */
    getEncryptionConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEncryptionConfigResult;
      return this.apiClient.callApi(
        '/EncryptionConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:api/DefaultApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves group resource details.
     * @param {module:model/DeleteGroupRequest} deleteGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGroupResult}
     */
    getGroup(deleteGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteGroupRequest;
      // verify the required parameter 'deleteGroupRequest' is set
      if (deleteGroupRequest === undefined || deleteGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteGroupRequest' when calling getGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupResult;
      return this.apiClient.callApi(
        '/GetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroups operation.
     * @callback module:api/DefaultApi~getGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGroupsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all active group details.
     * @param {module:model/GetGroupsRequest} getGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGroupsResult}
     */
    getGroups(getGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getGroupsRequest;
      // verify the required parameter 'getGroupsRequest' is set
      if (getGroupsRequest === undefined || getGroupsRequest === null) {
        throw new Error("Missing the required parameter 'getGroupsRequest' when calling getGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupsResult;
      return this.apiClient.callApi(
        '/Groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsight operation.
     * @callback module:api/DefaultApi~getInsightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInsightResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the summary information of an insight. This includes impact to clients and root cause services, the top anomalous services, the category, the state of the insight, and the start and end time of the insight.
     * @param {module:model/GetInsightRequest} getInsightRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInsightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInsightResult}
     */
    getInsight(getInsightRequest, opts, callback) {
      opts = opts || {};
      let postBody = getInsightRequest;
      // verify the required parameter 'getInsightRequest' is set
      if (getInsightRequest === undefined || getInsightRequest === null) {
        throw new Error("Missing the required parameter 'getInsightRequest' when calling getInsight");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetInsightResult;
      return this.apiClient.callApi(
        '/Insight', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsightEvents operation.
     * @callback module:api/DefaultApi~getInsightEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInsightEventsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * X-Ray reevaluates insights periodically until they're resolved, and records each intermediate state as an event. You can review an insight's events in the Impact Timeline on the Inspect page in the X-Ray console.
     * @param {module:model/GetInsightEventsRequest} getInsightEventsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getInsightEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInsightEventsResult}
     */
    getInsightEvents(getInsightEventsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getInsightEventsRequest;
      // verify the required parameter 'getInsightEventsRequest' is set
      if (getInsightEventsRequest === undefined || getInsightEventsRequest === null) {
        throw new Error("Missing the required parameter 'getInsightEventsRequest' when calling getInsightEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetInsightEventsResult;
      return this.apiClient.callApi(
        '/InsightEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsightImpactGraph operation.
     * @callback module:api/DefaultApi~getInsightImpactGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInsightImpactGraphResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a service graph structure filtered by the specified insight. The service graph is limited to only structural information. For a complete service graph, use this API with the GetServiceGraph API.
     * @param {module:model/GetInsightImpactGraphRequest} getInsightImpactGraphRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInsightImpactGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInsightImpactGraphResult}
     */
    getInsightImpactGraph(getInsightImpactGraphRequest, opts, callback) {
      opts = opts || {};
      let postBody = getInsightImpactGraphRequest;
      // verify the required parameter 'getInsightImpactGraphRequest' is set
      if (getInsightImpactGraphRequest === undefined || getInsightImpactGraphRequest === null) {
        throw new Error("Missing the required parameter 'getInsightImpactGraphRequest' when calling getInsightImpactGraph");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetInsightImpactGraphResult;
      return this.apiClient.callApi(
        '/InsightImpactGraph', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsightSummaries operation.
     * @callback module:api/DefaultApi~getInsightSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInsightSummariesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the summaries of all insights in the specified group matching the provided filter values.
     * @param {module:model/GetInsightSummariesRequest} getInsightSummariesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getInsightSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInsightSummariesResult}
     */
    getInsightSummaries(getInsightSummariesRequest, opts, callback) {
      opts = opts || {};
      let postBody = getInsightSummariesRequest;
      // verify the required parameter 'getInsightSummariesRequest' is set
      if (getInsightSummariesRequest === undefined || getInsightSummariesRequest === null) {
        throw new Error("Missing the required parameter 'getInsightSummariesRequest' when calling getInsightSummaries");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetInsightSummariesResult;
      return this.apiClient.callApi(
        '/InsightSummaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSamplingRules operation.
     * @callback module:api/DefaultApi~getSamplingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSamplingRulesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all sampling rules.
     * @param {module:model/GetSamplingRulesRequest} getSamplingRulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getSamplingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSamplingRulesResult}
     */
    getSamplingRules(getSamplingRulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSamplingRulesRequest;
      // verify the required parameter 'getSamplingRulesRequest' is set
      if (getSamplingRulesRequest === undefined || getSamplingRulesRequest === null) {
        throw new Error("Missing the required parameter 'getSamplingRulesRequest' when calling getSamplingRules");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSamplingRulesResult;
      return this.apiClient.callApi(
        '/GetSamplingRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSamplingStatisticSummaries operation.
     * @callback module:api/DefaultApi~getSamplingStatisticSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSamplingStatisticSummariesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about recent sampling results for all sampling rules.
     * @param {module:model/GetSamplingRulesRequest} getSamplingRulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getSamplingStatisticSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSamplingStatisticSummariesResult}
     */
    getSamplingStatisticSummaries(getSamplingRulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSamplingRulesRequest;
      // verify the required parameter 'getSamplingRulesRequest' is set
      if (getSamplingRulesRequest === undefined || getSamplingRulesRequest === null) {
        throw new Error("Missing the required parameter 'getSamplingRulesRequest' when calling getSamplingStatisticSummaries");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSamplingStatisticSummariesResult;
      return this.apiClient.callApi(
        '/SamplingStatisticSummaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSamplingTargets operation.
     * @callback module:api/DefaultApi~getSamplingTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSamplingTargetsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a sampling quota for rules that the service is using to sample requests. 
     * @param {module:model/GetSamplingTargetsRequest} getSamplingTargetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSamplingTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSamplingTargetsResult}
     */
    getSamplingTargets(getSamplingTargetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSamplingTargetsRequest;
      // verify the required parameter 'getSamplingTargetsRequest' is set
      if (getSamplingTargetsRequest === undefined || getSamplingTargetsRequest === null) {
        throw new Error("Missing the required parameter 'getSamplingTargetsRequest' when calling getSamplingTargets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSamplingTargetsResult;
      return this.apiClient.callApi(
        '/SamplingTargets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceGraph operation.
     * @callback module:api/DefaultApi~getServiceGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceGraphResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a document that describes services that process incoming requests, and downstream services that they call as a result. Root services process incoming requests and make calls to downstream services. Root services are applications that use the <a href=\"https://docs.aws.amazon.com/xray/index.html\">Amazon Web Services X-Ray SDK</a>. Downstream services can be other applications, Amazon Web Services resources, HTTP web APIs, or SQL databases.
     * @param {module:model/GetServiceGraphRequest} getServiceGraphRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getServiceGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceGraphResult}
     */
    getServiceGraph(getServiceGraphRequest, opts, callback) {
      opts = opts || {};
      let postBody = getServiceGraphRequest;
      // verify the required parameter 'getServiceGraphRequest' is set
      if (getServiceGraphRequest === undefined || getServiceGraphRequest === null) {
        throw new Error("Missing the required parameter 'getServiceGraphRequest' when calling getServiceGraph");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetServiceGraphResult;
      return this.apiClient.callApi(
        '/ServiceGraph', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimeSeriesServiceStatistics operation.
     * @callback module:api/DefaultApi~getTimeSeriesServiceStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTimeSeriesServiceStatisticsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an aggregation of service statistics defined by a specific time range.
     * @param {module:model/GetTimeSeriesServiceStatisticsRequest} getTimeSeriesServiceStatisticsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getTimeSeriesServiceStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTimeSeriesServiceStatisticsResult}
     */
    getTimeSeriesServiceStatistics(getTimeSeriesServiceStatisticsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTimeSeriesServiceStatisticsRequest;
      // verify the required parameter 'getTimeSeriesServiceStatisticsRequest' is set
      if (getTimeSeriesServiceStatisticsRequest === undefined || getTimeSeriesServiceStatisticsRequest === null) {
        throw new Error("Missing the required parameter 'getTimeSeriesServiceStatisticsRequest' when calling getTimeSeriesServiceStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTimeSeriesServiceStatisticsResult;
      return this.apiClient.callApi(
        '/TimeSeriesServiceStatistics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTraceGraph operation.
     * @callback module:api/DefaultApi~getTraceGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTraceGraphResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a service graph for one or more specific trace IDs.
     * @param {module:model/GetTraceGraphRequest} getTraceGraphRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getTraceGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTraceGraphResult}
     */
    getTraceGraph(getTraceGraphRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTraceGraphRequest;
      // verify the required parameter 'getTraceGraphRequest' is set
      if (getTraceGraphRequest === undefined || getTraceGraphRequest === null) {
        throw new Error("Missing the required parameter 'getTraceGraphRequest' when calling getTraceGraph");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTraceGraphResult;
      return this.apiClient.callApi(
        '/TraceGraph', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTraceSummaries operation.
     * @callback module:api/DefaultApi~getTraceSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTraceSummariesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves IDs and annotations for traces available for a specified time frame using an optional filter. To get the full traces, pass the trace IDs to <code>BatchGetTraces</code>.</p> <p>A filter expression can target traced requests that hit specific service nodes or edges, have errors, or come from a known user. For example, the following filter expression targets traces that pass through <code>api.example.com</code>:</p> <p> <code>service(\"api.example.com\")</code> </p> <p>This filter expression finds traces that have an annotation named <code>account</code> with the value <code>12345</code>:</p> <p> <code>annotation.account = \"12345\"</code> </p> <p>For a full list of indexed fields and keywords that you can use in filter expressions, see <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html\">Using Filter Expressions</a> in the <i>Amazon Web Services X-Ray Developer Guide</i>.</p>
     * @param {module:model/GetTraceSummariesRequest} getTraceSummariesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getTraceSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTraceSummariesResult}
     */
    getTraceSummaries(getTraceSummariesRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTraceSummariesRequest;
      // verify the required parameter 'getTraceSummariesRequest' is set
      if (getTraceSummariesRequest === undefined || getTraceSummariesRequest === null) {
        throw new Error("Missing the required parameter 'getTraceSummariesRequest' when calling getTraceSummaries");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTraceSummariesResult;
      return this.apiClient.callApi(
        '/TraceSummaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResourcePolicies operation.
     * @callback module:api/DefaultApi~listResourcePoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourcePoliciesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of resource policies in the target Amazon Web Services account.
     * @param {module:model/ListResourcePoliciesRequest} listResourcePoliciesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResourcePoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourcePoliciesResult}
     */
    listResourcePolicies(listResourcePoliciesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResourcePoliciesRequest;
      // verify the required parameter 'listResourcePoliciesRequest' is set
      if (listResourcePoliciesRequest === undefined || listResourcePoliciesRequest === null) {
        throw new Error("Missing the required parameter 'listResourcePoliciesRequest' when calling listResourcePolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResourcePoliciesResult;
      return this.apiClient.callApi(
        '/ListResourcePolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of tags that are applied to the specified Amazon Web Services X-Ray group or sampling rule.
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEncryptionConfig operation.
     * @callback module:api/DefaultApi~putEncryptionConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutEncryptionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the encryption configuration for X-Ray data.
     * @param {module:model/PutEncryptionConfigRequest} putEncryptionConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEncryptionConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutEncryptionConfigResult}
     */
    putEncryptionConfig(putEncryptionConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEncryptionConfigRequest;
      // verify the required parameter 'putEncryptionConfigRequest' is set
      if (putEncryptionConfigRequest === undefined || putEncryptionConfigRequest === null) {
        throw new Error("Missing the required parameter 'putEncryptionConfigRequest' when calling putEncryptionConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutEncryptionConfigResult;
      return this.apiClient.callApi(
        '/PutEncryptionConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResourcePolicy operation.
     * @callback module:api/DefaultApi~putResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutResourcePolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Sets the resource policy to grant one or more Amazon Web Services services and accounts permissions to access X-Ray. Each resource policy will be associated with a specific Amazon Web Services account. Each Amazon Web Services account can have a maximum of 5 resource policies, and each policy name must be unique within that account. The maximum size of each resource policy is 5KB. 
     * @param {module:model/PutResourcePolicyRequest} putResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutResourcePolicyResult}
     */
    putResourcePolicy(putResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResourcePolicyRequest;
      // verify the required parameter 'putResourcePolicyRequest' is set
      if (putResourcePolicyRequest === undefined || putResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'putResourcePolicyRequest' when calling putResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutResourcePolicyResult;
      return this.apiClient.callApi(
        '/PutResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTelemetryRecords operation.
     * @callback module:api/DefaultApi~putTelemetryRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used by the Amazon Web Services X-Ray daemon to upload telemetry.
     * @param {module:model/PutTelemetryRecordsRequest} putTelemetryRecordsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putTelemetryRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putTelemetryRecords(putTelemetryRecordsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putTelemetryRecordsRequest;
      // verify the required parameter 'putTelemetryRecordsRequest' is set
      if (putTelemetryRecordsRequest === undefined || putTelemetryRecordsRequest === null) {
        throw new Error("Missing the required parameter 'putTelemetryRecordsRequest' when calling putTelemetryRecords");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/TelemetryRecords', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTraceSegments operation.
     * @callback module:api/DefaultApi~putTraceSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutTraceSegmentsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Uploads segment documents to Amazon Web Services X-Ray. The <a href=\"https://docs.aws.amazon.com/xray/index.html\">X-Ray SDK</a> generates segment documents and sends them to the X-Ray daemon, which uploads them in batches. A segment document can be a completed segment, an in-progress segment, or an array of subsegments.</p> <p>Segments must include the following fields. For the full segment document schema, see <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html\">Amazon Web Services X-Ray Segment Documents</a> in the <i>Amazon Web Services X-Ray Developer Guide</i>.</p> <p class=\"title\"> <b>Required segment document fields</b> </p> <ul> <li> <p> <code>name</code> - The name of the service that handled the request.</p> </li> <li> <p> <code>id</code> - A 64-bit identifier for the segment, unique among segments in the same trace, in 16 hexadecimal digits.</p> </li> <li> <p> <code>trace_id</code> - A unique identifier that connects all segments and subsegments originating from a single client request.</p> </li> <li> <p> <code>start_time</code> - Time the segment or subsegment was created, in floating point seconds in epoch time, accurate to milliseconds. For example, <code>1480615200.010</code> or <code>1.480615200010E9</code>.</p> </li> <li> <p> <code>end_time</code> - Time the segment or subsegment was closed. For example, <code>1480615200.090</code> or <code>1.480615200090E9</code>. Specify either an <code>end_time</code> or <code>in_progress</code>.</p> </li> <li> <p> <code>in_progress</code> - Set to <code>true</code> instead of specifying an <code>end_time</code> to record that a segment has been started, but is not complete. Send an in-progress segment when your application receives a request that will take a long time to serve, to trace that the request was received. When the response is sent, send the complete segment to overwrite the in-progress segment.</p> </li> </ul> <p>A <code>trace_id</code> consists of three numbers separated by hyphens. For example, 1-58406520-a006649127e371903a2de979. This includes:</p> <p class=\"title\"> <b>Trace ID Format</b> </p> <ul> <li> <p>The version number, for instance, <code>1</code>.</p> </li> <li> <p>The time of the original request, in Unix epoch time, in 8 hexadecimal digits. For example, 10:00AM December 2nd, 2016 PST in epoch time is <code>1480615200</code> seconds, or <code>58406520</code> in hexadecimal.</p> </li> <li> <p>A 96-bit identifier for the trace, globally unique, in 24 hexadecimal digits.</p> </li> </ul>
     * @param {module:model/PutTraceSegmentsRequest} putTraceSegmentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putTraceSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutTraceSegmentsResult}
     */
    putTraceSegments(putTraceSegmentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putTraceSegmentsRequest;
      // verify the required parameter 'putTraceSegmentsRequest' is set
      if (putTraceSegmentsRequest === undefined || putTraceSegmentsRequest === null) {
        throw new Error("Missing the required parameter 'putTraceSegmentsRequest' when calling putTraceSegments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutTraceSegmentsResult;
      return this.apiClient.callApi(
        '/TraceSegments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies tags to an existing Amazon Web Services X-Ray group or sampling rule.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from an Amazon Web Services X-Ray group or sampling rule. You cannot edit or delete system tags (those with an <code>aws:</code> prefix).
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:api/DefaultApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a group resource.
     * @param {module:model/UpdateGroupRequest} updateGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGroupResult}
     */
    updateGroup(updateGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGroupRequest;
      // verify the required parameter 'updateGroupRequest' is set
      if (updateGroupRequest === undefined || updateGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateGroupRequest' when calling updateGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGroupResult;
      return this.apiClient.callApi(
        '/UpdateGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSamplingRule operation.
     * @callback module:api/DefaultApi~updateSamplingRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSamplingRuleResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a sampling rule's configuration.
     * @param {module:model/UpdateSamplingRuleRequest} updateSamplingRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSamplingRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSamplingRuleResult}
     */
    updateSamplingRule(updateSamplingRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSamplingRuleRequest;
      // verify the required parameter 'updateSamplingRuleRequest' is set
      if (updateSamplingRuleRequest === undefined || updateSamplingRuleRequest === null) {
        throw new Error("Missing the required parameter 'updateSamplingRuleRequest' when calling updateSamplingRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSamplingRuleResult;
      return this.apiClient.callApi(
        '/UpdateSamplingRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
