# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_sampling_rule_request_sampling_rule import CreateSamplingRuleRequestSamplingRule
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateSamplingRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sampling_rule: CreateSamplingRuleRequestSamplingRule=None, tags: List[Tag]=None):
        """CreateSamplingRuleRequest - a model defined in OpenAPI

        :param sampling_rule: The sampling_rule of this CreateSamplingRuleRequest.
        :param tags: The tags of this CreateSamplingRuleRequest.
        """
        self.openapi_types = {
            'sampling_rule': CreateSamplingRuleRequestSamplingRule,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'sampling_rule': 'SamplingRule',
            'tags': 'Tags'
        }

        self._sampling_rule = sampling_rule
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSamplingRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSamplingRule_request of this CreateSamplingRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sampling_rule(self):
        """Gets the sampling_rule of this CreateSamplingRuleRequest.


        :return: The sampling_rule of this CreateSamplingRuleRequest.
        :rtype: CreateSamplingRuleRequestSamplingRule
        """
        return self._sampling_rule

    @sampling_rule.setter
    def sampling_rule(self, sampling_rule):
        """Sets the sampling_rule of this CreateSamplingRuleRequest.


        :param sampling_rule: The sampling_rule of this CreateSamplingRuleRequest.
        :type sampling_rule: CreateSamplingRuleRequestSamplingRule
        """
        if sampling_rule is None:
            raise ValueError("Invalid value for `sampling_rule`, must not be `None`")

        self._sampling_rule = sampling_rule

    @property
    def tags(self):
        """Gets the tags of this CreateSamplingRuleRequest.

        <p>A map that contains one or more tag keys and tag values to attach to an X-Ray sampling rule. For more information about ways to use tags, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>The following restrictions apply to tags:</p> <ul> <li> <p>Maximum number of user-applied tags per resource: 50</p> </li> <li> <p>Maximum tag key length: 128 Unicode characters</p> </li> <li> <p>Maximum tag value length: 256 Unicode characters</p> </li> <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li> </ul>

        :return: The tags of this CreateSamplingRuleRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSamplingRuleRequest.

        <p>A map that contains one or more tag keys and tag values to attach to an X-Ray sampling rule. For more information about ways to use tags, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>The following restrictions apply to tags:</p> <ul> <li> <p>Maximum number of user-applied tags per resource: 50</p> </li> <li> <p>Maximum tag key length: 128 Unicode characters</p> </li> <li> <p>Maximum tag value length: 256 Unicode characters</p> </li> <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li> </ul>

        :param tags: The tags of this CreateSamplingRuleRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
