# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Http(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_url: str=None, http_status: int=None, http_method: str=None, user_agent: str=None, client_ip: str=None):
        """Http - a model defined in OpenAPI

        :param http_url: The http_url of this Http.
        :param http_status: The http_status of this Http.
        :param http_method: The http_method of this Http.
        :param user_agent: The user_agent of this Http.
        :param client_ip: The client_ip of this Http.
        """
        self.openapi_types = {
            'http_url': str,
            'http_status': int,
            'http_method': str,
            'user_agent': str,
            'client_ip': str
        }

        self.attribute_map = {
            'http_url': 'HttpURL',
            'http_status': 'HttpStatus',
            'http_method': 'HttpMethod',
            'user_agent': 'UserAgent',
            'client_ip': 'ClientIp'
        }

        self._http_url = http_url
        self._http_status = http_status
        self._http_method = http_method
        self._user_agent = user_agent
        self._client_ip = client_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Http':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Http of this Http.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_url(self):
        """Gets the http_url of this Http.


        :return: The http_url of this Http.
        :rtype: str
        """
        return self._http_url

    @http_url.setter
    def http_url(self, http_url):
        """Sets the http_url of this Http.


        :param http_url: The http_url of this Http.
        :type http_url: str
        """

        self._http_url = http_url

    @property
    def http_status(self):
        """Gets the http_status of this Http.


        :return: The http_status of this Http.
        :rtype: int
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this Http.


        :param http_status: The http_status of this Http.
        :type http_status: int
        """

        self._http_status = http_status

    @property
    def http_method(self):
        """Gets the http_method of this Http.


        :return: The http_method of this Http.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this Http.


        :param http_method: The http_method of this Http.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def user_agent(self):
        """Gets the user_agent of this Http.


        :return: The user_agent of this Http.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this Http.


        :param user_agent: The user_agent of this Http.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def client_ip(self):
        """Gets the client_ip of this Http.


        :return: The client_ip of this Http.
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this Http.


        :param client_ip: The client_ip of this Http.
        :type client_ip: str
        """

        self._client_ip = client_ip
