# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SamplingStatisticSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_name: str=None, timestamp: datetime=None, request_count: int=None, borrow_count: int=None, sampled_count: int=None):
        """SamplingStatisticSummary - a model defined in OpenAPI

        :param rule_name: The rule_name of this SamplingStatisticSummary.
        :param timestamp: The timestamp of this SamplingStatisticSummary.
        :param request_count: The request_count of this SamplingStatisticSummary.
        :param borrow_count: The borrow_count of this SamplingStatisticSummary.
        :param sampled_count: The sampled_count of this SamplingStatisticSummary.
        """
        self.openapi_types = {
            'rule_name': str,
            'timestamp': datetime,
            'request_count': int,
            'borrow_count': int,
            'sampled_count': int
        }

        self.attribute_map = {
            'rule_name': 'RuleName',
            'timestamp': 'Timestamp',
            'request_count': 'RequestCount',
            'borrow_count': 'BorrowCount',
            'sampled_count': 'SampledCount'
        }

        self._rule_name = rule_name
        self._timestamp = timestamp
        self._request_count = request_count
        self._borrow_count = borrow_count
        self._sampled_count = sampled_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SamplingStatisticSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SamplingStatisticSummary of this SamplingStatisticSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_name(self):
        """Gets the rule_name of this SamplingStatisticSummary.


        :return: The rule_name of this SamplingStatisticSummary.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SamplingStatisticSummary.


        :param rule_name: The rule_name of this SamplingStatisticSummary.
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def timestamp(self):
        """Gets the timestamp of this SamplingStatisticSummary.


        :return: The timestamp of this SamplingStatisticSummary.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SamplingStatisticSummary.


        :param timestamp: The timestamp of this SamplingStatisticSummary.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def request_count(self):
        """Gets the request_count of this SamplingStatisticSummary.


        :return: The request_count of this SamplingStatisticSummary.
        :rtype: int
        """
        return self._request_count

    @request_count.setter
    def request_count(self, request_count):
        """Sets the request_count of this SamplingStatisticSummary.


        :param request_count: The request_count of this SamplingStatisticSummary.
        :type request_count: int
        """

        self._request_count = request_count

    @property
    def borrow_count(self):
        """Gets the borrow_count of this SamplingStatisticSummary.


        :return: The borrow_count of this SamplingStatisticSummary.
        :rtype: int
        """
        return self._borrow_count

    @borrow_count.setter
    def borrow_count(self, borrow_count):
        """Sets the borrow_count of this SamplingStatisticSummary.


        :param borrow_count: The borrow_count of this SamplingStatisticSummary.
        :type borrow_count: int
        """

        self._borrow_count = borrow_count

    @property
    def sampled_count(self):
        """Gets the sampled_count of this SamplingStatisticSummary.


        :return: The sampled_count of this SamplingStatisticSummary.
        :rtype: int
        """
        return self._sampled_count

    @sampled_count.setter
    def sampled_count(self, sampled_count):
        """Sets the sampled_count of this SamplingStatisticSummary.


        :param sampled_count: The sampled_count of this SamplingStatisticSummary.
        :type sampled_count: int
        """

        self._sampled_count = sampled_count
