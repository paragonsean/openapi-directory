# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Trace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, duration: float=None, limit_exceeded: bool=None, segments: List=None):
        """Trace - a model defined in OpenAPI

        :param id: The id of this Trace.
        :param duration: The duration of this Trace.
        :param limit_exceeded: The limit_exceeded of this Trace.
        :param segments: The segments of this Trace.
        """
        self.openapi_types = {
            'id': str,
            'duration': float,
            'limit_exceeded': bool,
            'segments': List
        }

        self.attribute_map = {
            'id': 'Id',
            'duration': 'Duration',
            'limit_exceeded': 'LimitExceeded',
            'segments': 'Segments'
        }

        self._id = id
        self._duration = duration
        self._limit_exceeded = limit_exceeded
        self._segments = segments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trace of this Trace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Trace.


        :return: The id of this Trace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Trace.


        :param id: The id of this Trace.
        :type id: str
        """

        self._id = id

    @property
    def duration(self):
        """Gets the duration of this Trace.


        :return: The duration of this Trace.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Trace.


        :param duration: The duration of this Trace.
        :type duration: float
        """

        self._duration = duration

    @property
    def limit_exceeded(self):
        """Gets the limit_exceeded of this Trace.


        :return: The limit_exceeded of this Trace.
        :rtype: bool
        """
        return self._limit_exceeded

    @limit_exceeded.setter
    def limit_exceeded(self, limit_exceeded):
        """Sets the limit_exceeded of this Trace.


        :param limit_exceeded: The limit_exceeded of this Trace.
        :type limit_exceeded: bool
        """

        self._limit_exceeded = limit_exceeded

    @property
    def segments(self):
        """Gets the segments of this Trace.


        :return: The segments of this Trace.
        :rtype: List
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this Trace.


        :param segments: The segments of this Trace.
        :type segments: List
        """

        self._segments = segments
