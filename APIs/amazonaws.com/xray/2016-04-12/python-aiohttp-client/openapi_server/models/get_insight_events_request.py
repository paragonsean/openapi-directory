# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetInsightEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insight_id: str=None, max_results: int=None, next_token: str=None):
        """GetInsightEventsRequest - a model defined in OpenAPI

        :param insight_id: The insight_id of this GetInsightEventsRequest.
        :param max_results: The max_results of this GetInsightEventsRequest.
        :param next_token: The next_token of this GetInsightEventsRequest.
        """
        self.openapi_types = {
            'insight_id': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'insight_id': 'InsightId',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._insight_id = insight_id
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInsightEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetInsightEvents_request of this GetInsightEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insight_id(self):
        """Gets the insight_id of this GetInsightEventsRequest.

        The insight's unique identifier. Use the GetInsightSummaries action to retrieve an InsightId.

        :return: The insight_id of this GetInsightEventsRequest.
        :rtype: str
        """
        return self._insight_id

    @insight_id.setter
    def insight_id(self, insight_id):
        """Sets the insight_id of this GetInsightEventsRequest.

        The insight's unique identifier. Use the GetInsightSummaries action to retrieve an InsightId.

        :param insight_id: The insight_id of this GetInsightEventsRequest.
        :type insight_id: str
        """
        if insight_id is None:
            raise ValueError("Invalid value for `insight_id`, must not be `None`")
        if insight_id is not None and not re.search(r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}', insight_id):
            raise ValueError("Invalid value for `insight_id`, must be a follow pattern or equal to `/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}/`")

        self._insight_id = insight_id

    @property
    def max_results(self):
        """Gets the max_results of this GetInsightEventsRequest.

        Used to retrieve at most the specified value of events.

        :return: The max_results of this GetInsightEventsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetInsightEventsRequest.

        Used to retrieve at most the specified value of events.

        :param max_results: The max_results of this GetInsightEventsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetInsightEventsRequest.

        Specify the pagination token returned by a previous request to retrieve the next page of events. 

        :return: The next_token of this GetInsightEventsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetInsightEventsRequest.

        Specify the pagination token returned by a previous request to retrieve the next page of events. 

        :param next_token: The next_token of this GetInsightEventsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2000`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token
