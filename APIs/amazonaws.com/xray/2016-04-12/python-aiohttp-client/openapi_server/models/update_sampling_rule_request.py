# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_sampling_rule_request_sampling_rule_update import UpdateSamplingRuleRequestSamplingRuleUpdate
from openapi_server import util


class UpdateSamplingRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sampling_rule_update: UpdateSamplingRuleRequestSamplingRuleUpdate=None):
        """UpdateSamplingRuleRequest - a model defined in OpenAPI

        :param sampling_rule_update: The sampling_rule_update of this UpdateSamplingRuleRequest.
        """
        self.openapi_types = {
            'sampling_rule_update': UpdateSamplingRuleRequestSamplingRuleUpdate
        }

        self.attribute_map = {
            'sampling_rule_update': 'SamplingRuleUpdate'
        }

        self._sampling_rule_update = sampling_rule_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSamplingRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSamplingRule_request of this UpdateSamplingRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sampling_rule_update(self):
        """Gets the sampling_rule_update of this UpdateSamplingRuleRequest.


        :return: The sampling_rule_update of this UpdateSamplingRuleRequest.
        :rtype: UpdateSamplingRuleRequestSamplingRuleUpdate
        """
        return self._sampling_rule_update

    @sampling_rule_update.setter
    def sampling_rule_update(self, sampling_rule_update):
        """Sets the sampling_rule_update of this UpdateSamplingRuleRequest.


        :param sampling_rule_update: The sampling_rule_update of this UpdateSamplingRuleRequest.
        :type sampling_rule_update: UpdateSamplingRuleRequestSamplingRuleUpdate
        """
        if sampling_rule_update is None:
            raise ValueError("Invalid value for `sampling_rule_update`, must not be `None`")

        self._sampling_rule_update = sampling_rule_update
