# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetTimeSeriesServiceStatisticsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_time: datetime=None, end_time: datetime=None, group_name: str=None, group_arn: str=None, entity_selector_expression: str=None, period: int=None, forecast_statistics: bool=None, next_token: str=None):
        """GetTimeSeriesServiceStatisticsRequest - a model defined in OpenAPI

        :param start_time: The start_time of this GetTimeSeriesServiceStatisticsRequest.
        :param end_time: The end_time of this GetTimeSeriesServiceStatisticsRequest.
        :param group_name: The group_name of this GetTimeSeriesServiceStatisticsRequest.
        :param group_arn: The group_arn of this GetTimeSeriesServiceStatisticsRequest.
        :param entity_selector_expression: The entity_selector_expression of this GetTimeSeriesServiceStatisticsRequest.
        :param period: The period of this GetTimeSeriesServiceStatisticsRequest.
        :param forecast_statistics: The forecast_statistics of this GetTimeSeriesServiceStatisticsRequest.
        :param next_token: The next_token of this GetTimeSeriesServiceStatisticsRequest.
        """
        self.openapi_types = {
            'start_time': datetime,
            'end_time': datetime,
            'group_name': str,
            'group_arn': str,
            'entity_selector_expression': str,
            'period': int,
            'forecast_statistics': bool,
            'next_token': str
        }

        self.attribute_map = {
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'group_name': 'GroupName',
            'group_arn': 'GroupARN',
            'entity_selector_expression': 'EntitySelectorExpression',
            'period': 'Period',
            'forecast_statistics': 'ForecastStatistics',
            'next_token': 'NextToken'
        }

        self._start_time = start_time
        self._end_time = end_time
        self._group_name = group_name
        self._group_arn = group_arn
        self._entity_selector_expression = entity_selector_expression
        self._period = period
        self._forecast_statistics = forecast_statistics
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTimeSeriesServiceStatisticsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTimeSeriesServiceStatistics_request of this GetTimeSeriesServiceStatisticsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this GetTimeSeriesServiceStatisticsRequest.

        The start of the time frame for which to aggregate statistics.

        :return: The start_time of this GetTimeSeriesServiceStatisticsRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetTimeSeriesServiceStatisticsRequest.

        The start of the time frame for which to aggregate statistics.

        :param start_time: The start_time of this GetTimeSeriesServiceStatisticsRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetTimeSeriesServiceStatisticsRequest.

        The end of the time frame for which to aggregate statistics.

        :return: The end_time of this GetTimeSeriesServiceStatisticsRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetTimeSeriesServiceStatisticsRequest.

        The end of the time frame for which to aggregate statistics.

        :param end_time: The end_time of this GetTimeSeriesServiceStatisticsRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def group_name(self):
        """Gets the group_name of this GetTimeSeriesServiceStatisticsRequest.

        The case-sensitive name of the group for which to pull statistics from.

        :return: The group_name of this GetTimeSeriesServiceStatisticsRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GetTimeSeriesServiceStatisticsRequest.

        The case-sensitive name of the group for which to pull statistics from.

        :param group_name: The group_name of this GetTimeSeriesServiceStatisticsRequest.
        :type group_name: str
        """
        if group_name is not None and len(group_name) > 32:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `32`")
        if group_name is not None and len(group_name) < 1:
            raise ValueError("Invalid value for `group_name`, length must be greater than or equal to `1`")

        self._group_name = group_name

    @property
    def group_arn(self):
        """Gets the group_arn of this GetTimeSeriesServiceStatisticsRequest.

        The Amazon Resource Name (ARN) of the group for which to pull statistics from.

        :return: The group_arn of this GetTimeSeriesServiceStatisticsRequest.
        :rtype: str
        """
        return self._group_arn

    @group_arn.setter
    def group_arn(self, group_arn):
        """Sets the group_arn of this GetTimeSeriesServiceStatisticsRequest.

        The Amazon Resource Name (ARN) of the group for which to pull statistics from.

        :param group_arn: The group_arn of this GetTimeSeriesServiceStatisticsRequest.
        :type group_arn: str
        """
        if group_arn is not None and len(group_arn) > 400:
            raise ValueError("Invalid value for `group_arn`, length must be less than or equal to `400`")
        if group_arn is not None and len(group_arn) < 1:
            raise ValueError("Invalid value for `group_arn`, length must be greater than or equal to `1`")

        self._group_arn = group_arn

    @property
    def entity_selector_expression(self):
        """Gets the entity_selector_expression of this GetTimeSeriesServiceStatisticsRequest.

        A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. 

        :return: The entity_selector_expression of this GetTimeSeriesServiceStatisticsRequest.
        :rtype: str
        """
        return self._entity_selector_expression

    @entity_selector_expression.setter
    def entity_selector_expression(self, entity_selector_expression):
        """Sets the entity_selector_expression of this GetTimeSeriesServiceStatisticsRequest.

        A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. 

        :param entity_selector_expression: The entity_selector_expression of this GetTimeSeriesServiceStatisticsRequest.
        :type entity_selector_expression: str
        """
        if entity_selector_expression is not None and len(entity_selector_expression) > 500:
            raise ValueError("Invalid value for `entity_selector_expression`, length must be less than or equal to `500`")
        if entity_selector_expression is not None and len(entity_selector_expression) < 1:
            raise ValueError("Invalid value for `entity_selector_expression`, length must be greater than or equal to `1`")

        self._entity_selector_expression = entity_selector_expression

    @property
    def period(self):
        """Gets the period of this GetTimeSeriesServiceStatisticsRequest.

        Aggregation period in seconds.

        :return: The period of this GetTimeSeriesServiceStatisticsRequest.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this GetTimeSeriesServiceStatisticsRequest.

        Aggregation period in seconds.

        :param period: The period of this GetTimeSeriesServiceStatisticsRequest.
        :type period: int
        """

        self._period = period

    @property
    def forecast_statistics(self):
        """Gets the forecast_statistics of this GetTimeSeriesServiceStatisticsRequest.

        The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.

        :return: The forecast_statistics of this GetTimeSeriesServiceStatisticsRequest.
        :rtype: bool
        """
        return self._forecast_statistics

    @forecast_statistics.setter
    def forecast_statistics(self, forecast_statistics):
        """Sets the forecast_statistics of this GetTimeSeriesServiceStatisticsRequest.

        The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.

        :param forecast_statistics: The forecast_statistics of this GetTimeSeriesServiceStatisticsRequest.
        :type forecast_statistics: bool
        """

        self._forecast_statistics = forecast_statistics

    @property
    def next_token(self):
        """Gets the next_token of this GetTimeSeriesServiceStatisticsRequest.

        Pagination token.

        :return: The next_token of this GetTimeSeriesServiceStatisticsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetTimeSeriesServiceStatisticsRequest.

        Pagination token.

        :param next_token: The next_token of this GetTimeSeriesServiceStatisticsRequest.
        :type next_token: str
        """

        self._next_token = next_token
