# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_summary_insights_configuration import GroupSummaryInsightsConfiguration
from openapi_server import util


class GroupSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, group_arn: str=None, filter_expression: str=None, insights_configuration: GroupSummaryInsightsConfiguration=None):
        """GroupSummary - a model defined in OpenAPI

        :param group_name: The group_name of this GroupSummary.
        :param group_arn: The group_arn of this GroupSummary.
        :param filter_expression: The filter_expression of this GroupSummary.
        :param insights_configuration: The insights_configuration of this GroupSummary.
        """
        self.openapi_types = {
            'group_name': str,
            'group_arn': str,
            'filter_expression': str,
            'insights_configuration': GroupSummaryInsightsConfiguration
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'group_arn': 'GroupARN',
            'filter_expression': 'FilterExpression',
            'insights_configuration': 'InsightsConfiguration'
        }

        self._group_name = group_name
        self._group_arn = group_arn
        self._filter_expression = filter_expression
        self._insights_configuration = insights_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupSummary of this GroupSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this GroupSummary.


        :return: The group_name of this GroupSummary.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupSummary.


        :param group_name: The group_name of this GroupSummary.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def group_arn(self):
        """Gets the group_arn of this GroupSummary.


        :return: The group_arn of this GroupSummary.
        :rtype: str
        """
        return self._group_arn

    @group_arn.setter
    def group_arn(self, group_arn):
        """Sets the group_arn of this GroupSummary.


        :param group_arn: The group_arn of this GroupSummary.
        :type group_arn: str
        """

        self._group_arn = group_arn

    @property
    def filter_expression(self):
        """Gets the filter_expression of this GroupSummary.


        :return: The filter_expression of this GroupSummary.
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this GroupSummary.


        :param filter_expression: The filter_expression of this GroupSummary.
        :type filter_expression: str
        """

        self._filter_expression = filter_expression

    @property
    def insights_configuration(self):
        """Gets the insights_configuration of this GroupSummary.


        :return: The insights_configuration of this GroupSummary.
        :rtype: GroupSummaryInsightsConfiguration
        """
        return self._insights_configuration

    @insights_configuration.setter
    def insights_configuration(self, insights_configuration):
        """Sets the insights_configuration of this GroupSummary.


        :param insights_configuration: The insights_configuration of this GroupSummary.
        :type insights_configuration: GroupSummaryInsightsConfiguration
        """

        self._insights_configuration = insights_configuration
