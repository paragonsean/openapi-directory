# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.telemetry_record_backend_connection_errors import TelemetryRecordBackendConnectionErrors
from openapi_server import util


class TelemetryRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, segments_received_count: int=None, segments_sent_count: int=None, segments_spillover_count: int=None, segments_rejected_count: int=None, backend_connection_errors: TelemetryRecordBackendConnectionErrors=None):
        """TelemetryRecord - a model defined in OpenAPI

        :param timestamp: The timestamp of this TelemetryRecord.
        :param segments_received_count: The segments_received_count of this TelemetryRecord.
        :param segments_sent_count: The segments_sent_count of this TelemetryRecord.
        :param segments_spillover_count: The segments_spillover_count of this TelemetryRecord.
        :param segments_rejected_count: The segments_rejected_count of this TelemetryRecord.
        :param backend_connection_errors: The backend_connection_errors of this TelemetryRecord.
        """
        self.openapi_types = {
            'timestamp': datetime,
            'segments_received_count': int,
            'segments_sent_count': int,
            'segments_spillover_count': int,
            'segments_rejected_count': int,
            'backend_connection_errors': TelemetryRecordBackendConnectionErrors
        }

        self.attribute_map = {
            'timestamp': 'Timestamp',
            'segments_received_count': 'SegmentsReceivedCount',
            'segments_sent_count': 'SegmentsSentCount',
            'segments_spillover_count': 'SegmentsSpilloverCount',
            'segments_rejected_count': 'SegmentsRejectedCount',
            'backend_connection_errors': 'BackendConnectionErrors'
        }

        self._timestamp = timestamp
        self._segments_received_count = segments_received_count
        self._segments_sent_count = segments_sent_count
        self._segments_spillover_count = segments_spillover_count
        self._segments_rejected_count = segments_rejected_count
        self._backend_connection_errors = backend_connection_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TelemetryRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TelemetryRecord of this TelemetryRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this TelemetryRecord.


        :return: The timestamp of this TelemetryRecord.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TelemetryRecord.


        :param timestamp: The timestamp of this TelemetryRecord.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def segments_received_count(self):
        """Gets the segments_received_count of this TelemetryRecord.


        :return: The segments_received_count of this TelemetryRecord.
        :rtype: int
        """
        return self._segments_received_count

    @segments_received_count.setter
    def segments_received_count(self, segments_received_count):
        """Sets the segments_received_count of this TelemetryRecord.


        :param segments_received_count: The segments_received_count of this TelemetryRecord.
        :type segments_received_count: int
        """

        self._segments_received_count = segments_received_count

    @property
    def segments_sent_count(self):
        """Gets the segments_sent_count of this TelemetryRecord.


        :return: The segments_sent_count of this TelemetryRecord.
        :rtype: int
        """
        return self._segments_sent_count

    @segments_sent_count.setter
    def segments_sent_count(self, segments_sent_count):
        """Sets the segments_sent_count of this TelemetryRecord.


        :param segments_sent_count: The segments_sent_count of this TelemetryRecord.
        :type segments_sent_count: int
        """

        self._segments_sent_count = segments_sent_count

    @property
    def segments_spillover_count(self):
        """Gets the segments_spillover_count of this TelemetryRecord.


        :return: The segments_spillover_count of this TelemetryRecord.
        :rtype: int
        """
        return self._segments_spillover_count

    @segments_spillover_count.setter
    def segments_spillover_count(self, segments_spillover_count):
        """Sets the segments_spillover_count of this TelemetryRecord.


        :param segments_spillover_count: The segments_spillover_count of this TelemetryRecord.
        :type segments_spillover_count: int
        """

        self._segments_spillover_count = segments_spillover_count

    @property
    def segments_rejected_count(self):
        """Gets the segments_rejected_count of this TelemetryRecord.


        :return: The segments_rejected_count of this TelemetryRecord.
        :rtype: int
        """
        return self._segments_rejected_count

    @segments_rejected_count.setter
    def segments_rejected_count(self, segments_rejected_count):
        """Sets the segments_rejected_count of this TelemetryRecord.


        :param segments_rejected_count: The segments_rejected_count of this TelemetryRecord.
        :type segments_rejected_count: int
        """

        self._segments_rejected_count = segments_rejected_count

    @property
    def backend_connection_errors(self):
        """Gets the backend_connection_errors of this TelemetryRecord.


        :return: The backend_connection_errors of this TelemetryRecord.
        :rtype: TelemetryRecordBackendConnectionErrors
        """
        return self._backend_connection_errors

    @backend_connection_errors.setter
    def backend_connection_errors(self, backend_connection_errors):
        """Sets the backend_connection_errors of this TelemetryRecord.


        :param backend_connection_errors: The backend_connection_errors of this TelemetryRecord.
        :type backend_connection_errors: TelemetryRecordBackendConnectionErrors
        """

        self._backend_connection_errors = backend_connection_errors
