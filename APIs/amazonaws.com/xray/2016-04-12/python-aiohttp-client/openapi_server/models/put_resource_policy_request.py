# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutResourcePolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_name: str=None, policy_document: str=None, policy_revision_id: str=None, bypass_policy_lockout_check: bool=None):
        """PutResourcePolicyRequest - a model defined in OpenAPI

        :param policy_name: The policy_name of this PutResourcePolicyRequest.
        :param policy_document: The policy_document of this PutResourcePolicyRequest.
        :param policy_revision_id: The policy_revision_id of this PutResourcePolicyRequest.
        :param bypass_policy_lockout_check: The bypass_policy_lockout_check of this PutResourcePolicyRequest.
        """
        self.openapi_types = {
            'policy_name': str,
            'policy_document': str,
            'policy_revision_id': str,
            'bypass_policy_lockout_check': bool
        }

        self.attribute_map = {
            'policy_name': 'PolicyName',
            'policy_document': 'PolicyDocument',
            'policy_revision_id': 'PolicyRevisionId',
            'bypass_policy_lockout_check': 'BypassPolicyLockoutCheck'
        }

        self._policy_name = policy_name
        self._policy_document = policy_document
        self._policy_revision_id = policy_revision_id
        self._bypass_policy_lockout_check = bypass_policy_lockout_check

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutResourcePolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutResourcePolicy_request of this PutResourcePolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_name(self):
        """Gets the policy_name of this PutResourcePolicyRequest.

        The name of the resource policy. Must be unique within a specific Amazon Web Services account.

        :return: The policy_name of this PutResourcePolicyRequest.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this PutResourcePolicyRequest.

        The name of the resource policy. Must be unique within a specific Amazon Web Services account.

        :param policy_name: The policy_name of this PutResourcePolicyRequest.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")
        if policy_name is not None and len(policy_name) > 128:
            raise ValueError("Invalid value for `policy_name`, length must be less than or equal to `128`")
        if policy_name is not None and len(policy_name) < 1:
            raise ValueError("Invalid value for `policy_name`, length must be greater than or equal to `1`")
        if policy_name is not None and not re.search(r'[\w+=,.@-]+', policy_name):
            raise ValueError("Invalid value for `policy_name`, must be a follow pattern or equal to `/[\w+=,.@-]+/`")

        self._policy_name = policy_name

    @property
    def policy_document(self):
        """Gets the policy_document of this PutResourcePolicyRequest.

        The resource policy document, which can be up to 5kb in size.

        :return: The policy_document of this PutResourcePolicyRequest.
        :rtype: str
        """
        return self._policy_document

    @policy_document.setter
    def policy_document(self, policy_document):
        """Sets the policy_document of this PutResourcePolicyRequest.

        The resource policy document, which can be up to 5kb in size.

        :param policy_document: The policy_document of this PutResourcePolicyRequest.
        :type policy_document: str
        """
        if policy_document is None:
            raise ValueError("Invalid value for `policy_document`, must not be `None`")

        self._policy_document = policy_document

    @property
    def policy_revision_id(self):
        """Gets the policy_revision_id of this PutResourcePolicyRequest.

        <p>Specifies a specific policy revision, to ensure an atomic create operation. By default the resource policy is created if it does not exist, or updated with an incremented revision id. The revision id is unique to each policy in the account.</p> <p>If the policy revision id does not match the latest revision id, the operation will fail with an <code>InvalidPolicyRevisionIdException</code> exception. You can also provide a <code>PolicyRevisionId</code> of 0. In this case, the operation will fail with an <code>InvalidPolicyRevisionIdException</code> exception if a resource policy with the same name already exists. </p>

        :return: The policy_revision_id of this PutResourcePolicyRequest.
        :rtype: str
        """
        return self._policy_revision_id

    @policy_revision_id.setter
    def policy_revision_id(self, policy_revision_id):
        """Sets the policy_revision_id of this PutResourcePolicyRequest.

        <p>Specifies a specific policy revision, to ensure an atomic create operation. By default the resource policy is created if it does not exist, or updated with an incremented revision id. The revision id is unique to each policy in the account.</p> <p>If the policy revision id does not match the latest revision id, the operation will fail with an <code>InvalidPolicyRevisionIdException</code> exception. You can also provide a <code>PolicyRevisionId</code> of 0. In this case, the operation will fail with an <code>InvalidPolicyRevisionIdException</code> exception if a resource policy with the same name already exists. </p>

        :param policy_revision_id: The policy_revision_id of this PutResourcePolicyRequest.
        :type policy_revision_id: str
        """

        self._policy_revision_id = policy_revision_id

    @property
    def bypass_policy_lockout_check(self):
        """Gets the bypass_policy_lockout_check of this PutResourcePolicyRequest.

        <p>A flag to indicate whether to bypass the resource policy lockout safety check.</p> <important> <p>Setting this value to true increases the risk that the policy becomes unmanageable. Do not set this value to true indiscriminately.</p> </important> <p>Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent <code>PutResourcePolicy</code> request.</p> <p>The default value is false.</p>

        :return: The bypass_policy_lockout_check of this PutResourcePolicyRequest.
        :rtype: bool
        """
        return self._bypass_policy_lockout_check

    @bypass_policy_lockout_check.setter
    def bypass_policy_lockout_check(self, bypass_policy_lockout_check):
        """Sets the bypass_policy_lockout_check of this PutResourcePolicyRequest.

        <p>A flag to indicate whether to bypass the resource policy lockout safety check.</p> <important> <p>Setting this value to true increases the risk that the policy becomes unmanageable. Do not set this value to true indiscriminately.</p> </important> <p>Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent <code>PutResourcePolicy</code> request.</p> <p>The default value is false.</p>

        :param bypass_policy_lockout_check: The bypass_policy_lockout_check of this PutResourcePolicyRequest.
        :type bypass_policy_lockout_check: bool
        """

        self._bypass_policy_lockout_check = bypass_policy_lockout_check
