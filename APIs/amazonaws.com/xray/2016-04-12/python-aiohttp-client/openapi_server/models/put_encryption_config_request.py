# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutEncryptionConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_id: str=None, type: str=None):
        """PutEncryptionConfigRequest - a model defined in OpenAPI

        :param key_id: The key_id of this PutEncryptionConfigRequest.
        :param type: The type of this PutEncryptionConfigRequest.
        """
        self.openapi_types = {
            'key_id': str,
            'type': str
        }

        self.attribute_map = {
            'key_id': 'KeyId',
            'type': 'Type'
        }

        self._key_id = key_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutEncryptionConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutEncryptionConfig_request of this PutEncryptionConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self):
        """Gets the key_id of this PutEncryptionConfigRequest.

        <p>An Amazon Web Services KMS key in one of the following formats:</p> <ul> <li> <p> <b>Alias</b> - The name of the key. For example, <code>alias/MyKey</code>.</p> </li> <li> <p> <b>Key ID</b> - The KMS key ID of the key. For example, <code>ae4aa6d49-a4d8-9df9-a475-4ff6d7898456</code>. Amazon Web Services X-Ray does not support asymmetric KMS keys.</p> </li> <li> <p> <b>ARN</b> - The full Amazon Resource Name of the key ID or alias. For example, <code>arn:aws:kms:us-east-2:123456789012:key/ae4aa6d49-a4d8-9df9-a475-4ff6d7898456</code>. Use this format to specify a key in a different account.</p> </li> </ul> <p>Omit this key if you set <code>Type</code> to <code>NONE</code>.</p>

        :return: The key_id of this PutEncryptionConfigRequest.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this PutEncryptionConfigRequest.

        <p>An Amazon Web Services KMS key in one of the following formats:</p> <ul> <li> <p> <b>Alias</b> - The name of the key. For example, <code>alias/MyKey</code>.</p> </li> <li> <p> <b>Key ID</b> - The KMS key ID of the key. For example, <code>ae4aa6d49-a4d8-9df9-a475-4ff6d7898456</code>. Amazon Web Services X-Ray does not support asymmetric KMS keys.</p> </li> <li> <p> <b>ARN</b> - The full Amazon Resource Name of the key ID or alias. For example, <code>arn:aws:kms:us-east-2:123456789012:key/ae4aa6d49-a4d8-9df9-a475-4ff6d7898456</code>. Use this format to specify a key in a different account.</p> </li> </ul> <p>Omit this key if you set <code>Type</code> to <code>NONE</code>.</p>

        :param key_id: The key_id of this PutEncryptionConfigRequest.
        :type key_id: str
        """
        if key_id is not None and len(key_id) > 3000:
            raise ValueError("Invalid value for `key_id`, length must be less than or equal to `3000`")
        if key_id is not None and len(key_id) < 1:
            raise ValueError("Invalid value for `key_id`, length must be greater than or equal to `1`")

        self._key_id = key_id

    @property
    def type(self):
        """Gets the type of this PutEncryptionConfigRequest.

        The type of encryption. Set to <code>KMS</code> to use your own key for encryption. Set to <code>NONE</code> for default encryption.

        :return: The type of this PutEncryptionConfigRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PutEncryptionConfigRequest.

        The type of encryption. Set to <code>KMS</code> to use your own key for encryption. Set to <code>NONE</code> for default encryption.

        :param type: The type of this PutEncryptionConfigRequest.
        :type type: str
        """
        allowed_values = ["NONE", "KMS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
