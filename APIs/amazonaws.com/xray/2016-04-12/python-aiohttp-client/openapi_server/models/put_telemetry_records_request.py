# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.telemetry_record import TelemetryRecord
from openapi_server import util


class PutTelemetryRecordsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, telemetry_records: List[TelemetryRecord]=None, ec2_instance_id: str=None, hostname: str=None, resource_arn: str=None):
        """PutTelemetryRecordsRequest - a model defined in OpenAPI

        :param telemetry_records: The telemetry_records of this PutTelemetryRecordsRequest.
        :param ec2_instance_id: The ec2_instance_id of this PutTelemetryRecordsRequest.
        :param hostname: The hostname of this PutTelemetryRecordsRequest.
        :param resource_arn: The resource_arn of this PutTelemetryRecordsRequest.
        """
        self.openapi_types = {
            'telemetry_records': List[TelemetryRecord],
            'ec2_instance_id': str,
            'hostname': str,
            'resource_arn': str
        }

        self.attribute_map = {
            'telemetry_records': 'TelemetryRecords',
            'ec2_instance_id': 'EC2InstanceId',
            'hostname': 'Hostname',
            'resource_arn': 'ResourceARN'
        }

        self._telemetry_records = telemetry_records
        self._ec2_instance_id = ec2_instance_id
        self._hostname = hostname
        self._resource_arn = resource_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutTelemetryRecordsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutTelemetryRecords_request of this PutTelemetryRecordsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def telemetry_records(self):
        """Gets the telemetry_records of this PutTelemetryRecordsRequest.

        <p/>

        :return: The telemetry_records of this PutTelemetryRecordsRequest.
        :rtype: List[TelemetryRecord]
        """
        return self._telemetry_records

    @telemetry_records.setter
    def telemetry_records(self, telemetry_records):
        """Sets the telemetry_records of this PutTelemetryRecordsRequest.

        <p/>

        :param telemetry_records: The telemetry_records of this PutTelemetryRecordsRequest.
        :type telemetry_records: List[TelemetryRecord]
        """
        if telemetry_records is None:
            raise ValueError("Invalid value for `telemetry_records`, must not be `None`")

        self._telemetry_records = telemetry_records

    @property
    def ec2_instance_id(self):
        """Gets the ec2_instance_id of this PutTelemetryRecordsRequest.

        <p/>

        :return: The ec2_instance_id of this PutTelemetryRecordsRequest.
        :rtype: str
        """
        return self._ec2_instance_id

    @ec2_instance_id.setter
    def ec2_instance_id(self, ec2_instance_id):
        """Sets the ec2_instance_id of this PutTelemetryRecordsRequest.

        <p/>

        :param ec2_instance_id: The ec2_instance_id of this PutTelemetryRecordsRequest.
        :type ec2_instance_id: str
        """
        if ec2_instance_id is not None and len(ec2_instance_id) > 20:
            raise ValueError("Invalid value for `ec2_instance_id`, length must be less than or equal to `20`")

        self._ec2_instance_id = ec2_instance_id

    @property
    def hostname(self):
        """Gets the hostname of this PutTelemetryRecordsRequest.

        <p/>

        :return: The hostname of this PutTelemetryRecordsRequest.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this PutTelemetryRecordsRequest.

        <p/>

        :param hostname: The hostname of this PutTelemetryRecordsRequest.
        :type hostname: str
        """
        if hostname is not None and len(hostname) > 255:
            raise ValueError("Invalid value for `hostname`, length must be less than or equal to `255`")

        self._hostname = hostname

    @property
    def resource_arn(self):
        """Gets the resource_arn of this PutTelemetryRecordsRequest.

        <p/>

        :return: The resource_arn of this PutTelemetryRecordsRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this PutTelemetryRecordsRequest.

        <p/>

        :param resource_arn: The resource_arn of this PutTelemetryRecordsRequest.
        :type resource_arn: str
        """
        if resource_arn is not None and len(resource_arn) > 500:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `500`")

        self._resource_arn = resource_arn
