# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetServiceGraphRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_time: datetime=None, end_time: datetime=None, group_name: str=None, group_arn: str=None, next_token: str=None):
        """GetServiceGraphRequest - a model defined in OpenAPI

        :param start_time: The start_time of this GetServiceGraphRequest.
        :param end_time: The end_time of this GetServiceGraphRequest.
        :param group_name: The group_name of this GetServiceGraphRequest.
        :param group_arn: The group_arn of this GetServiceGraphRequest.
        :param next_token: The next_token of this GetServiceGraphRequest.
        """
        self.openapi_types = {
            'start_time': datetime,
            'end_time': datetime,
            'group_name': str,
            'group_arn': str,
            'next_token': str
        }

        self.attribute_map = {
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'group_name': 'GroupName',
            'group_arn': 'GroupARN',
            'next_token': 'NextToken'
        }

        self._start_time = start_time
        self._end_time = end_time
        self._group_name = group_name
        self._group_arn = group_arn
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetServiceGraphRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetServiceGraph_request of this GetServiceGraphRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this GetServiceGraphRequest.

        The start of the time frame for which to generate a graph.

        :return: The start_time of this GetServiceGraphRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetServiceGraphRequest.

        The start of the time frame for which to generate a graph.

        :param start_time: The start_time of this GetServiceGraphRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetServiceGraphRequest.

        The end of the timeframe for which to generate a graph.

        :return: The end_time of this GetServiceGraphRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetServiceGraphRequest.

        The end of the timeframe for which to generate a graph.

        :param end_time: The end_time of this GetServiceGraphRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def group_name(self):
        """Gets the group_name of this GetServiceGraphRequest.

        The name of a group based on which you want to generate a graph.

        :return: The group_name of this GetServiceGraphRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GetServiceGraphRequest.

        The name of a group based on which you want to generate a graph.

        :param group_name: The group_name of this GetServiceGraphRequest.
        :type group_name: str
        """
        if group_name is not None and len(group_name) > 32:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `32`")
        if group_name is not None and len(group_name) < 1:
            raise ValueError("Invalid value for `group_name`, length must be greater than or equal to `1`")

        self._group_name = group_name

    @property
    def group_arn(self):
        """Gets the group_arn of this GetServiceGraphRequest.

        The Amazon Resource Name (ARN) of a group based on which you want to generate a graph.

        :return: The group_arn of this GetServiceGraphRequest.
        :rtype: str
        """
        return self._group_arn

    @group_arn.setter
    def group_arn(self, group_arn):
        """Sets the group_arn of this GetServiceGraphRequest.

        The Amazon Resource Name (ARN) of a group based on which you want to generate a graph.

        :param group_arn: The group_arn of this GetServiceGraphRequest.
        :type group_arn: str
        """
        if group_arn is not None and len(group_arn) > 400:
            raise ValueError("Invalid value for `group_arn`, length must be less than or equal to `400`")
        if group_arn is not None and len(group_arn) < 1:
            raise ValueError("Invalid value for `group_arn`, length must be greater than or equal to `1`")

        self._group_arn = group_arn

    @property
    def next_token(self):
        """Gets the next_token of this GetServiceGraphRequest.

        Pagination token.

        :return: The next_token of this GetServiceGraphRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetServiceGraphRequest.

        Pagination token.

        :param next_token: The next_token of this GetServiceGraphRequest.
        :type next_token: str
        """

        self._next_token = next_token
