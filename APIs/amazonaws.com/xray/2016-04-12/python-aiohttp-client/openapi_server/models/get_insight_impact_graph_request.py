# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetInsightImpactGraphRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insight_id: str=None, start_time: datetime=None, end_time: datetime=None, next_token: str=None):
        """GetInsightImpactGraphRequest - a model defined in OpenAPI

        :param insight_id: The insight_id of this GetInsightImpactGraphRequest.
        :param start_time: The start_time of this GetInsightImpactGraphRequest.
        :param end_time: The end_time of this GetInsightImpactGraphRequest.
        :param next_token: The next_token of this GetInsightImpactGraphRequest.
        """
        self.openapi_types = {
            'insight_id': str,
            'start_time': datetime,
            'end_time': datetime,
            'next_token': str
        }

        self.attribute_map = {
            'insight_id': 'InsightId',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'next_token': 'NextToken'
        }

        self._insight_id = insight_id
        self._start_time = start_time
        self._end_time = end_time
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInsightImpactGraphRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetInsightImpactGraph_request of this GetInsightImpactGraphRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insight_id(self):
        """Gets the insight_id of this GetInsightImpactGraphRequest.

        The insight's unique identifier. Use the GetInsightSummaries action to retrieve an InsightId.

        :return: The insight_id of this GetInsightImpactGraphRequest.
        :rtype: str
        """
        return self._insight_id

    @insight_id.setter
    def insight_id(self, insight_id):
        """Sets the insight_id of this GetInsightImpactGraphRequest.

        The insight's unique identifier. Use the GetInsightSummaries action to retrieve an InsightId.

        :param insight_id: The insight_id of this GetInsightImpactGraphRequest.
        :type insight_id: str
        """
        if insight_id is None:
            raise ValueError("Invalid value for `insight_id`, must not be `None`")
        if insight_id is not None and not re.search(r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}', insight_id):
            raise ValueError("Invalid value for `insight_id`, must be a follow pattern or equal to `/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}/`")

        self._insight_id = insight_id

    @property
    def start_time(self):
        """Gets the start_time of this GetInsightImpactGraphRequest.

        The estimated start time of the insight, in Unix time seconds. The StartTime is inclusive of the value provided and can't be more than 30 days old.

        :return: The start_time of this GetInsightImpactGraphRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetInsightImpactGraphRequest.

        The estimated start time of the insight, in Unix time seconds. The StartTime is inclusive of the value provided and can't be more than 30 days old.

        :param start_time: The start_time of this GetInsightImpactGraphRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetInsightImpactGraphRequest.

        The estimated end time of the insight, in Unix time seconds. The EndTime is exclusive of the value provided. The time range between the start time and end time can't be more than six hours. 

        :return: The end_time of this GetInsightImpactGraphRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetInsightImpactGraphRequest.

        The estimated end time of the insight, in Unix time seconds. The EndTime is exclusive of the value provided. The time range between the start time and end time can't be more than six hours. 

        :param end_time: The end_time of this GetInsightImpactGraphRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def next_token(self):
        """Gets the next_token of this GetInsightImpactGraphRequest.

        Specify the pagination token returned by a previous request to retrieve the next page of results. 

        :return: The next_token of this GetInsightImpactGraphRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetInsightImpactGraphRequest.

        Specify the pagination token returned by a previous request to retrieve the next page of results. 

        :param next_token: The next_token of this GetInsightImpactGraphRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2000`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token
