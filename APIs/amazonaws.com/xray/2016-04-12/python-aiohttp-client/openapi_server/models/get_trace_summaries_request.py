# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_trace_summaries_request_sampling_strategy import GetTraceSummariesRequestSamplingStrategy
from openapi_server import util


class GetTraceSummariesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_time: datetime=None, end_time: datetime=None, time_range_type: str=None, sampling: bool=None, sampling_strategy: GetTraceSummariesRequestSamplingStrategy=None, filter_expression: str=None, next_token: str=None):
        """GetTraceSummariesRequest - a model defined in OpenAPI

        :param start_time: The start_time of this GetTraceSummariesRequest.
        :param end_time: The end_time of this GetTraceSummariesRequest.
        :param time_range_type: The time_range_type of this GetTraceSummariesRequest.
        :param sampling: The sampling of this GetTraceSummariesRequest.
        :param sampling_strategy: The sampling_strategy of this GetTraceSummariesRequest.
        :param filter_expression: The filter_expression of this GetTraceSummariesRequest.
        :param next_token: The next_token of this GetTraceSummariesRequest.
        """
        self.openapi_types = {
            'start_time': datetime,
            'end_time': datetime,
            'time_range_type': str,
            'sampling': bool,
            'sampling_strategy': GetTraceSummariesRequestSamplingStrategy,
            'filter_expression': str,
            'next_token': str
        }

        self.attribute_map = {
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'time_range_type': 'TimeRangeType',
            'sampling': 'Sampling',
            'sampling_strategy': 'SamplingStrategy',
            'filter_expression': 'FilterExpression',
            'next_token': 'NextToken'
        }

        self._start_time = start_time
        self._end_time = end_time
        self._time_range_type = time_range_type
        self._sampling = sampling
        self._sampling_strategy = sampling_strategy
        self._filter_expression = filter_expression
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTraceSummariesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTraceSummaries_request of this GetTraceSummariesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this GetTraceSummariesRequest.

        The start of the time frame for which to retrieve traces.

        :return: The start_time of this GetTraceSummariesRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetTraceSummariesRequest.

        The start of the time frame for which to retrieve traces.

        :param start_time: The start_time of this GetTraceSummariesRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetTraceSummariesRequest.

        The end of the time frame for which to retrieve traces.

        :return: The end_time of this GetTraceSummariesRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetTraceSummariesRequest.

        The end of the time frame for which to retrieve traces.

        :param end_time: The end_time of this GetTraceSummariesRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def time_range_type(self):
        """Gets the time_range_type of this GetTraceSummariesRequest.

        A parameter to indicate whether to query trace summaries by TraceId or Event time.

        :return: The time_range_type of this GetTraceSummariesRequest.
        :rtype: str
        """
        return self._time_range_type

    @time_range_type.setter
    def time_range_type(self, time_range_type):
        """Sets the time_range_type of this GetTraceSummariesRequest.

        A parameter to indicate whether to query trace summaries by TraceId or Event time.

        :param time_range_type: The time_range_type of this GetTraceSummariesRequest.
        :type time_range_type: str
        """
        allowed_values = ["TraceId", "Event"]  # noqa: E501
        if time_range_type not in allowed_values:
            raise ValueError(
                "Invalid value for `time_range_type` ({0}), must be one of {1}"
                .format(time_range_type, allowed_values)
            )

        self._time_range_type = time_range_type

    @property
    def sampling(self):
        """Gets the sampling of this GetTraceSummariesRequest.

        Set to <code>true</code> to get summaries for only a subset of available traces.

        :return: The sampling of this GetTraceSummariesRequest.
        :rtype: bool
        """
        return self._sampling

    @sampling.setter
    def sampling(self, sampling):
        """Sets the sampling of this GetTraceSummariesRequest.

        Set to <code>true</code> to get summaries for only a subset of available traces.

        :param sampling: The sampling of this GetTraceSummariesRequest.
        :type sampling: bool
        """

        self._sampling = sampling

    @property
    def sampling_strategy(self):
        """Gets the sampling_strategy of this GetTraceSummariesRequest.


        :return: The sampling_strategy of this GetTraceSummariesRequest.
        :rtype: GetTraceSummariesRequestSamplingStrategy
        """
        return self._sampling_strategy

    @sampling_strategy.setter
    def sampling_strategy(self, sampling_strategy):
        """Sets the sampling_strategy of this GetTraceSummariesRequest.


        :param sampling_strategy: The sampling_strategy of this GetTraceSummariesRequest.
        :type sampling_strategy: GetTraceSummariesRequestSamplingStrategy
        """

        self._sampling_strategy = sampling_strategy

    @property
    def filter_expression(self):
        """Gets the filter_expression of this GetTraceSummariesRequest.

        Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.

        :return: The filter_expression of this GetTraceSummariesRequest.
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this GetTraceSummariesRequest.

        Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.

        :param filter_expression: The filter_expression of this GetTraceSummariesRequest.
        :type filter_expression: str
        """

        self._filter_expression = filter_expression

    @property
    def next_token(self):
        """Gets the next_token of this GetTraceSummariesRequest.

        Specify the pagination token returned by a previous request to retrieve the next page of results.

        :return: The next_token of this GetTraceSummariesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetTraceSummariesRequest.

        Specify the pagination token returned by a previous request to retrieve the next page of results.

        :param next_token: The next_token of this GetTraceSummariesRequest.
        :type next_token: str
        """

        self._next_token = next_token
