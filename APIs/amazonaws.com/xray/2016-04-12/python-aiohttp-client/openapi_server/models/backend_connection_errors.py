# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackendConnectionErrors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timeout_count: int=None, connection_refused_count: int=None, http_code4_xx_count: int=None, http_code5_xx_count: int=None, unknown_host_count: int=None, other_count: int=None):
        """BackendConnectionErrors - a model defined in OpenAPI

        :param timeout_count: The timeout_count of this BackendConnectionErrors.
        :param connection_refused_count: The connection_refused_count of this BackendConnectionErrors.
        :param http_code4_xx_count: The http_code4_xx_count of this BackendConnectionErrors.
        :param http_code5_xx_count: The http_code5_xx_count of this BackendConnectionErrors.
        :param unknown_host_count: The unknown_host_count of this BackendConnectionErrors.
        :param other_count: The other_count of this BackendConnectionErrors.
        """
        self.openapi_types = {
            'timeout_count': int,
            'connection_refused_count': int,
            'http_code4_xx_count': int,
            'http_code5_xx_count': int,
            'unknown_host_count': int,
            'other_count': int
        }

        self.attribute_map = {
            'timeout_count': 'TimeoutCount',
            'connection_refused_count': 'ConnectionRefusedCount',
            'http_code4_xx_count': 'HTTPCode4XXCount',
            'http_code5_xx_count': 'HTTPCode5XXCount',
            'unknown_host_count': 'UnknownHostCount',
            'other_count': 'OtherCount'
        }

        self._timeout_count = timeout_count
        self._connection_refused_count = connection_refused_count
        self._http_code4_xx_count = http_code4_xx_count
        self._http_code5_xx_count = http_code5_xx_count
        self._unknown_host_count = unknown_host_count
        self._other_count = other_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendConnectionErrors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackendConnectionErrors of this BackendConnectionErrors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timeout_count(self):
        """Gets the timeout_count of this BackendConnectionErrors.


        :return: The timeout_count of this BackendConnectionErrors.
        :rtype: int
        """
        return self._timeout_count

    @timeout_count.setter
    def timeout_count(self, timeout_count):
        """Sets the timeout_count of this BackendConnectionErrors.


        :param timeout_count: The timeout_count of this BackendConnectionErrors.
        :type timeout_count: int
        """

        self._timeout_count = timeout_count

    @property
    def connection_refused_count(self):
        """Gets the connection_refused_count of this BackendConnectionErrors.


        :return: The connection_refused_count of this BackendConnectionErrors.
        :rtype: int
        """
        return self._connection_refused_count

    @connection_refused_count.setter
    def connection_refused_count(self, connection_refused_count):
        """Sets the connection_refused_count of this BackendConnectionErrors.


        :param connection_refused_count: The connection_refused_count of this BackendConnectionErrors.
        :type connection_refused_count: int
        """

        self._connection_refused_count = connection_refused_count

    @property
    def http_code4_xx_count(self):
        """Gets the http_code4_xx_count of this BackendConnectionErrors.


        :return: The http_code4_xx_count of this BackendConnectionErrors.
        :rtype: int
        """
        return self._http_code4_xx_count

    @http_code4_xx_count.setter
    def http_code4_xx_count(self, http_code4_xx_count):
        """Sets the http_code4_xx_count of this BackendConnectionErrors.


        :param http_code4_xx_count: The http_code4_xx_count of this BackendConnectionErrors.
        :type http_code4_xx_count: int
        """

        self._http_code4_xx_count = http_code4_xx_count

    @property
    def http_code5_xx_count(self):
        """Gets the http_code5_xx_count of this BackendConnectionErrors.


        :return: The http_code5_xx_count of this BackendConnectionErrors.
        :rtype: int
        """
        return self._http_code5_xx_count

    @http_code5_xx_count.setter
    def http_code5_xx_count(self, http_code5_xx_count):
        """Sets the http_code5_xx_count of this BackendConnectionErrors.


        :param http_code5_xx_count: The http_code5_xx_count of this BackendConnectionErrors.
        :type http_code5_xx_count: int
        """

        self._http_code5_xx_count = http_code5_xx_count

    @property
    def unknown_host_count(self):
        """Gets the unknown_host_count of this BackendConnectionErrors.


        :return: The unknown_host_count of this BackendConnectionErrors.
        :rtype: int
        """
        return self._unknown_host_count

    @unknown_host_count.setter
    def unknown_host_count(self, unknown_host_count):
        """Sets the unknown_host_count of this BackendConnectionErrors.


        :param unknown_host_count: The unknown_host_count of this BackendConnectionErrors.
        :type unknown_host_count: int
        """

        self._unknown_host_count = unknown_host_count

    @property
    def other_count(self):
        """Gets the other_count of this BackendConnectionErrors.


        :return: The other_count of this BackendConnectionErrors.
        :rtype: int
        """
        return self._other_count

    @other_count.setter
    def other_count(self, other_count):
        """Sets the other_count of this BackendConnectionErrors.


        :param other_count: The other_count of this BackendConnectionErrors.
        :type other_count: int
        """

        self._other_count = other_count
