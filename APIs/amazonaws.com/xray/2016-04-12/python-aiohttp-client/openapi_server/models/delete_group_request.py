# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, group_arn: str=None):
        """DeleteGroupRequest - a model defined in OpenAPI

        :param group_name: The group_name of this DeleteGroupRequest.
        :param group_arn: The group_arn of this DeleteGroupRequest.
        """
        self.openapi_types = {
            'group_name': str,
            'group_arn': str
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'group_arn': 'GroupARN'
        }

        self._group_name = group_name
        self._group_arn = group_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteGroup_request of this DeleteGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this DeleteGroupRequest.

        The case-sensitive name of the group.

        :return: The group_name of this DeleteGroupRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this DeleteGroupRequest.

        The case-sensitive name of the group.

        :param group_name: The group_name of this DeleteGroupRequest.
        :type group_name: str
        """
        if group_name is not None and len(group_name) > 32:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `32`")
        if group_name is not None and len(group_name) < 1:
            raise ValueError("Invalid value for `group_name`, length must be greater than or equal to `1`")

        self._group_name = group_name

    @property
    def group_arn(self):
        """Gets the group_arn of this DeleteGroupRequest.

        The ARN of the group that was generated on creation.

        :return: The group_arn of this DeleteGroupRequest.
        :rtype: str
        """
        return self._group_arn

    @group_arn.setter
    def group_arn(self, group_arn):
        """Sets the group_arn of this DeleteGroupRequest.

        The ARN of the group that was generated on creation.

        :param group_arn: The group_arn of this DeleteGroupRequest.
        :type group_arn: str
        """
        if group_arn is not None and len(group_arn) > 400:
            raise ValueError("Invalid value for `group_arn`, length must be less than or equal to `400`")
        if group_arn is not None and len(group_arn) < 1:
            raise ValueError("Invalid value for `group_arn`, length must be greater than or equal to `1`")

        self._group_arn = group_arn
