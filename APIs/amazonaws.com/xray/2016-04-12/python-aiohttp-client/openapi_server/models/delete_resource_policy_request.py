# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteResourcePolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_name: str=None, policy_revision_id: str=None):
        """DeleteResourcePolicyRequest - a model defined in OpenAPI

        :param policy_name: The policy_name of this DeleteResourcePolicyRequest.
        :param policy_revision_id: The policy_revision_id of this DeleteResourcePolicyRequest.
        """
        self.openapi_types = {
            'policy_name': str,
            'policy_revision_id': str
        }

        self.attribute_map = {
            'policy_name': 'PolicyName',
            'policy_revision_id': 'PolicyRevisionId'
        }

        self._policy_name = policy_name
        self._policy_revision_id = policy_revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteResourcePolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteResourcePolicy_request of this DeleteResourcePolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_name(self):
        """Gets the policy_name of this DeleteResourcePolicyRequest.

        The name of the resource policy to delete.

        :return: The policy_name of this DeleteResourcePolicyRequest.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this DeleteResourcePolicyRequest.

        The name of the resource policy to delete.

        :param policy_name: The policy_name of this DeleteResourcePolicyRequest.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")
        if policy_name is not None and len(policy_name) > 128:
            raise ValueError("Invalid value for `policy_name`, length must be less than or equal to `128`")
        if policy_name is not None and len(policy_name) < 1:
            raise ValueError("Invalid value for `policy_name`, length must be greater than or equal to `1`")
        if policy_name is not None and not re.search(r'[\w+=,.@-]+', policy_name):
            raise ValueError("Invalid value for `policy_name`, must be a follow pattern or equal to `/[\w+=,.@-]+/`")

        self._policy_name = policy_name

    @property
    def policy_revision_id(self):
        """Gets the policy_revision_id of this DeleteResourcePolicyRequest.

        Specifies a specific policy revision to delete. Provide a <code>PolicyRevisionId</code> to ensure an atomic delete operation. If the provided revision id does not match the latest policy revision id, an <code>InvalidPolicyRevisionIdException</code> exception is returned. 

        :return: The policy_revision_id of this DeleteResourcePolicyRequest.
        :rtype: str
        """
        return self._policy_revision_id

    @policy_revision_id.setter
    def policy_revision_id(self, policy_revision_id):
        """Sets the policy_revision_id of this DeleteResourcePolicyRequest.

        Specifies a specific policy revision to delete. Provide a <code>PolicyRevisionId</code> to ensure an atomic delete operation. If the provided revision id does not match the latest policy revision id, an <code>InvalidPolicyRevisionIdException</code> exception is returned. 

        :param policy_revision_id: The policy_revision_id of this DeleteResourcePolicyRequest.
        :type policy_revision_id: str
        """

        self._policy_revision_id = policy_revision_id
