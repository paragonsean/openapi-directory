# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SamplingRuleUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_name: str=None, rule_arn: str=None, resource_arn: str=None, priority: int=None, fixed_rate: float=None, reservoir_size: int=None, host: str=None, service_name: str=None, service_type: str=None, http_method: str=None, url_path: str=None, attributes: Dict=None):
        """SamplingRuleUpdate - a model defined in OpenAPI

        :param rule_name: The rule_name of this SamplingRuleUpdate.
        :param rule_arn: The rule_arn of this SamplingRuleUpdate.
        :param resource_arn: The resource_arn of this SamplingRuleUpdate.
        :param priority: The priority of this SamplingRuleUpdate.
        :param fixed_rate: The fixed_rate of this SamplingRuleUpdate.
        :param reservoir_size: The reservoir_size of this SamplingRuleUpdate.
        :param host: The host of this SamplingRuleUpdate.
        :param service_name: The service_name of this SamplingRuleUpdate.
        :param service_type: The service_type of this SamplingRuleUpdate.
        :param http_method: The http_method of this SamplingRuleUpdate.
        :param url_path: The url_path of this SamplingRuleUpdate.
        :param attributes: The attributes of this SamplingRuleUpdate.
        """
        self.openapi_types = {
            'rule_name': str,
            'rule_arn': str,
            'resource_arn': str,
            'priority': int,
            'fixed_rate': float,
            'reservoir_size': int,
            'host': str,
            'service_name': str,
            'service_type': str,
            'http_method': str,
            'url_path': str,
            'attributes': Dict
        }

        self.attribute_map = {
            'rule_name': 'RuleName',
            'rule_arn': 'RuleARN',
            'resource_arn': 'ResourceARN',
            'priority': 'Priority',
            'fixed_rate': 'FixedRate',
            'reservoir_size': 'ReservoirSize',
            'host': 'Host',
            'service_name': 'ServiceName',
            'service_type': 'ServiceType',
            'http_method': 'HTTPMethod',
            'url_path': 'URLPath',
            'attributes': 'Attributes'
        }

        self._rule_name = rule_name
        self._rule_arn = rule_arn
        self._resource_arn = resource_arn
        self._priority = priority
        self._fixed_rate = fixed_rate
        self._reservoir_size = reservoir_size
        self._host = host
        self._service_name = service_name
        self._service_type = service_type
        self._http_method = http_method
        self._url_path = url_path
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SamplingRuleUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SamplingRuleUpdate of this SamplingRuleUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_name(self):
        """Gets the rule_name of this SamplingRuleUpdate.


        :return: The rule_name of this SamplingRuleUpdate.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SamplingRuleUpdate.


        :param rule_name: The rule_name of this SamplingRuleUpdate.
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def rule_arn(self):
        """Gets the rule_arn of this SamplingRuleUpdate.


        :return: The rule_arn of this SamplingRuleUpdate.
        :rtype: str
        """
        return self._rule_arn

    @rule_arn.setter
    def rule_arn(self, rule_arn):
        """Sets the rule_arn of this SamplingRuleUpdate.


        :param rule_arn: The rule_arn of this SamplingRuleUpdate.
        :type rule_arn: str
        """

        self._rule_arn = rule_arn

    @property
    def resource_arn(self):
        """Gets the resource_arn of this SamplingRuleUpdate.


        :return: The resource_arn of this SamplingRuleUpdate.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this SamplingRuleUpdate.


        :param resource_arn: The resource_arn of this SamplingRuleUpdate.
        :type resource_arn: str
        """

        self._resource_arn = resource_arn

    @property
    def priority(self):
        """Gets the priority of this SamplingRuleUpdate.


        :return: The priority of this SamplingRuleUpdate.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SamplingRuleUpdate.


        :param priority: The priority of this SamplingRuleUpdate.
        :type priority: int
        """

        self._priority = priority

    @property
    def fixed_rate(self):
        """Gets the fixed_rate of this SamplingRuleUpdate.


        :return: The fixed_rate of this SamplingRuleUpdate.
        :rtype: float
        """
        return self._fixed_rate

    @fixed_rate.setter
    def fixed_rate(self, fixed_rate):
        """Sets the fixed_rate of this SamplingRuleUpdate.


        :param fixed_rate: The fixed_rate of this SamplingRuleUpdate.
        :type fixed_rate: float
        """

        self._fixed_rate = fixed_rate

    @property
    def reservoir_size(self):
        """Gets the reservoir_size of this SamplingRuleUpdate.


        :return: The reservoir_size of this SamplingRuleUpdate.
        :rtype: int
        """
        return self._reservoir_size

    @reservoir_size.setter
    def reservoir_size(self, reservoir_size):
        """Sets the reservoir_size of this SamplingRuleUpdate.


        :param reservoir_size: The reservoir_size of this SamplingRuleUpdate.
        :type reservoir_size: int
        """

        self._reservoir_size = reservoir_size

    @property
    def host(self):
        """Gets the host of this SamplingRuleUpdate.


        :return: The host of this SamplingRuleUpdate.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SamplingRuleUpdate.


        :param host: The host of this SamplingRuleUpdate.
        :type host: str
        """

        self._host = host

    @property
    def service_name(self):
        """Gets the service_name of this SamplingRuleUpdate.


        :return: The service_name of this SamplingRuleUpdate.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this SamplingRuleUpdate.


        :param service_name: The service_name of this SamplingRuleUpdate.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def service_type(self):
        """Gets the service_type of this SamplingRuleUpdate.


        :return: The service_type of this SamplingRuleUpdate.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this SamplingRuleUpdate.


        :param service_type: The service_type of this SamplingRuleUpdate.
        :type service_type: str
        """

        self._service_type = service_type

    @property
    def http_method(self):
        """Gets the http_method of this SamplingRuleUpdate.


        :return: The http_method of this SamplingRuleUpdate.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this SamplingRuleUpdate.


        :param http_method: The http_method of this SamplingRuleUpdate.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def url_path(self):
        """Gets the url_path of this SamplingRuleUpdate.


        :return: The url_path of this SamplingRuleUpdate.
        :rtype: str
        """
        return self._url_path

    @url_path.setter
    def url_path(self, url_path):
        """Sets the url_path of this SamplingRuleUpdate.


        :param url_path: The url_path of this SamplingRuleUpdate.
        :type url_path: str
        """

        self._url_path = url_path

    @property
    def attributes(self):
        """Gets the attributes of this SamplingRuleUpdate.


        :return: The attributes of this SamplingRuleUpdate.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SamplingRuleUpdate.


        :param attributes: The attributes of this SamplingRuleUpdate.
        :type attributes: Dict
        """

        self._attributes = attributes
