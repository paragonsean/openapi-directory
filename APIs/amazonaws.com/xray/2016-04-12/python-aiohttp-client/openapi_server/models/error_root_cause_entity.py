# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorRootCauseEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, exceptions: List=None, remote: bool=None):
        """ErrorRootCauseEntity - a model defined in OpenAPI

        :param name: The name of this ErrorRootCauseEntity.
        :param exceptions: The exceptions of this ErrorRootCauseEntity.
        :param remote: The remote of this ErrorRootCauseEntity.
        """
        self.openapi_types = {
            'name': str,
            'exceptions': List,
            'remote': bool
        }

        self.attribute_map = {
            'name': 'Name',
            'exceptions': 'Exceptions',
            'remote': 'Remote'
        }

        self._name = name
        self._exceptions = exceptions
        self._remote = remote

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorRootCauseEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorRootCauseEntity of this ErrorRootCauseEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ErrorRootCauseEntity.


        :return: The name of this ErrorRootCauseEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ErrorRootCauseEntity.


        :param name: The name of this ErrorRootCauseEntity.
        :type name: str
        """

        self._name = name

    @property
    def exceptions(self):
        """Gets the exceptions of this ErrorRootCauseEntity.


        :return: The exceptions of this ErrorRootCauseEntity.
        :rtype: List
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this ErrorRootCauseEntity.


        :param exceptions: The exceptions of this ErrorRootCauseEntity.
        :type exceptions: List
        """

        self._exceptions = exceptions

    @property
    def remote(self):
        """Gets the remote of this ErrorRootCauseEntity.


        :return: The remote of this ErrorRootCauseEntity.
        :rtype: bool
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this ErrorRootCauseEntity.


        :param remote: The remote of this ErrorRootCauseEntity.
        :type remote: bool
        """

        self._remote = remote
