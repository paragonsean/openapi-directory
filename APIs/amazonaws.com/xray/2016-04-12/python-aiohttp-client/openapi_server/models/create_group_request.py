# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_group_request_insights_configuration import CreateGroupRequestInsightsConfiguration
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, filter_expression: str=None, insights_configuration: CreateGroupRequestInsightsConfiguration=None, tags: List[Tag]=None):
        """CreateGroupRequest - a model defined in OpenAPI

        :param group_name: The group_name of this CreateGroupRequest.
        :param filter_expression: The filter_expression of this CreateGroupRequest.
        :param insights_configuration: The insights_configuration of this CreateGroupRequest.
        :param tags: The tags of this CreateGroupRequest.
        """
        self.openapi_types = {
            'group_name': str,
            'filter_expression': str,
            'insights_configuration': CreateGroupRequestInsightsConfiguration,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'filter_expression': 'FilterExpression',
            'insights_configuration': 'InsightsConfiguration',
            'tags': 'Tags'
        }

        self._group_name = group_name
        self._filter_expression = filter_expression
        self._insights_configuration = insights_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGroup_request of this CreateGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this CreateGroupRequest.

        The case-sensitive name of the new group. Default is a reserved name and names must be unique.

        :return: The group_name of this CreateGroupRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CreateGroupRequest.

        The case-sensitive name of the new group. Default is a reserved name and names must be unique.

        :param group_name: The group_name of this CreateGroupRequest.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")
        if group_name is not None and len(group_name) > 32:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `32`")
        if group_name is not None and len(group_name) < 1:
            raise ValueError("Invalid value for `group_name`, length must be greater than or equal to `1`")

        self._group_name = group_name

    @property
    def filter_expression(self):
        """Gets the filter_expression of this CreateGroupRequest.

        The filter expression defining criteria by which to group traces.

        :return: The filter_expression of this CreateGroupRequest.
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this CreateGroupRequest.

        The filter expression defining criteria by which to group traces.

        :param filter_expression: The filter_expression of this CreateGroupRequest.
        :type filter_expression: str
        """

        self._filter_expression = filter_expression

    @property
    def insights_configuration(self):
        """Gets the insights_configuration of this CreateGroupRequest.


        :return: The insights_configuration of this CreateGroupRequest.
        :rtype: CreateGroupRequestInsightsConfiguration
        """
        return self._insights_configuration

    @insights_configuration.setter
    def insights_configuration(self, insights_configuration):
        """Sets the insights_configuration of this CreateGroupRequest.


        :param insights_configuration: The insights_configuration of this CreateGroupRequest.
        :type insights_configuration: CreateGroupRequestInsightsConfiguration
        """

        self._insights_configuration = insights_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateGroupRequest.

        <p>A map that contains one or more tag keys and tag values to attach to an X-Ray group. For more information about ways to use tags, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>The following restrictions apply to tags:</p> <ul> <li> <p>Maximum number of user-applied tags per resource: 50</p> </li> <li> <p>Maximum tag key length: 128 Unicode characters</p> </li> <li> <p>Maximum tag value length: 256 Unicode characters</p> </li> <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li> </ul>

        :return: The tags of this CreateGroupRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateGroupRequest.

        <p>A map that contains one or more tag keys and tag values to attach to an X-Ray group. For more information about ways to use tags, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>The following restrictions apply to tags:</p> <ul> <li> <p>Maximum number of user-applied tags per resource: 50</p> </li> <li> <p>Maximum tag key length: 128 Unicode characters</p> </li> <li> <p>Maximum tag value length: 256 Unicode characters</p> </li> <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li> </ul>

        :param tags: The tags of this CreateGroupRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
