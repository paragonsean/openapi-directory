/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamplingRuleUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamplingRuleUpdate::OAISamplingRuleUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamplingRuleUpdate::OAISamplingRuleUpdate() {
    this->initializeModel();
}

OAISamplingRuleUpdate::~OAISamplingRuleUpdate() {}

void OAISamplingRuleUpdate::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_rule_arn_isSet = false;
    m_rule_arn_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_fixed_rate_isSet = false;
    m_fixed_rate_isValid = false;

    m_reservoir_size_isSet = false;
    m_reservoir_size_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_url_path_isSet = false;
    m_url_path_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAISamplingRuleUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamplingRuleUpdate::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_rule_arn_isValid = ::OpenAPI::fromJsonValue(m_rule_arn, json[QString("RuleARN")]);
    m_rule_arn_isSet = !json[QString("RuleARN")].isNull() && m_rule_arn_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_fixed_rate_isValid = ::OpenAPI::fromJsonValue(m_fixed_rate, json[QString("FixedRate")]);
    m_fixed_rate_isSet = !json[QString("FixedRate")].isNull() && m_fixed_rate_isValid;

    m_reservoir_size_isValid = ::OpenAPI::fromJsonValue(m_reservoir_size, json[QString("ReservoirSize")]);
    m_reservoir_size_isSet = !json[QString("ReservoirSize")].isNull() && m_reservoir_size_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("Host")]);
    m_host_isSet = !json[QString("Host")].isNull() && m_host_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("ServiceType")]);
    m_service_type_isSet = !json[QString("ServiceType")].isNull() && m_service_type_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("HTTPMethod")]);
    m_http_method_isSet = !json[QString("HTTPMethod")].isNull() && m_http_method_isValid;

    m_url_path_isValid = ::OpenAPI::fromJsonValue(m_url_path, json[QString("URLPath")]);
    m_url_path_isSet = !json[QString("URLPath")].isNull() && m_url_path_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;
}

QString OAISamplingRuleUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamplingRuleUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_rule_arn_isSet) {
        obj.insert(QString("RuleARN"), ::OpenAPI::toJsonValue(m_rule_arn));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_fixed_rate_isSet) {
        obj.insert(QString("FixedRate"), ::OpenAPI::toJsonValue(m_fixed_rate));
    }
    if (m_reservoir_size_isSet) {
        obj.insert(QString("ReservoirSize"), ::OpenAPI::toJsonValue(m_reservoir_size));
    }
    if (m_host_isSet) {
        obj.insert(QString("Host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("ServiceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("HTTPMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_url_path_isSet) {
        obj.insert(QString("URLPath"), ::OpenAPI::toJsonValue(m_url_path));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAISamplingRuleUpdate::getRuleName() const {
    return m_rule_name;
}
void OAISamplingRuleUpdate::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAISamplingRuleUpdate::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAISamplingRuleUpdate::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QString OAISamplingRuleUpdate::getRuleArn() const {
    return m_rule_arn;
}
void OAISamplingRuleUpdate::setRuleArn(const QString &rule_arn) {
    m_rule_arn = rule_arn;
    m_rule_arn_isSet = true;
}

bool OAISamplingRuleUpdate::is_rule_arn_Set() const{
    return m_rule_arn_isSet;
}

bool OAISamplingRuleUpdate::is_rule_arn_Valid() const{
    return m_rule_arn_isValid;
}

QString OAISamplingRuleUpdate::getResourceArn() const {
    return m_resource_arn;
}
void OAISamplingRuleUpdate::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAISamplingRuleUpdate::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAISamplingRuleUpdate::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

qint32 OAISamplingRuleUpdate::getPriority() const {
    return m_priority;
}
void OAISamplingRuleUpdate::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAISamplingRuleUpdate::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAISamplingRuleUpdate::is_priority_Valid() const{
    return m_priority_isValid;
}

double OAISamplingRuleUpdate::getFixedRate() const {
    return m_fixed_rate;
}
void OAISamplingRuleUpdate::setFixedRate(const double &fixed_rate) {
    m_fixed_rate = fixed_rate;
    m_fixed_rate_isSet = true;
}

bool OAISamplingRuleUpdate::is_fixed_rate_Set() const{
    return m_fixed_rate_isSet;
}

bool OAISamplingRuleUpdate::is_fixed_rate_Valid() const{
    return m_fixed_rate_isValid;
}

qint32 OAISamplingRuleUpdate::getReservoirSize() const {
    return m_reservoir_size;
}
void OAISamplingRuleUpdate::setReservoirSize(const qint32 &reservoir_size) {
    m_reservoir_size = reservoir_size;
    m_reservoir_size_isSet = true;
}

bool OAISamplingRuleUpdate::is_reservoir_size_Set() const{
    return m_reservoir_size_isSet;
}

bool OAISamplingRuleUpdate::is_reservoir_size_Valid() const{
    return m_reservoir_size_isValid;
}

QString OAISamplingRuleUpdate::getHost() const {
    return m_host;
}
void OAISamplingRuleUpdate::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAISamplingRuleUpdate::is_host_Set() const{
    return m_host_isSet;
}

bool OAISamplingRuleUpdate::is_host_Valid() const{
    return m_host_isValid;
}

QString OAISamplingRuleUpdate::getServiceName() const {
    return m_service_name;
}
void OAISamplingRuleUpdate::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAISamplingRuleUpdate::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAISamplingRuleUpdate::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAISamplingRuleUpdate::getServiceType() const {
    return m_service_type;
}
void OAISamplingRuleUpdate::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAISamplingRuleUpdate::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAISamplingRuleUpdate::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QString OAISamplingRuleUpdate::getHttpMethod() const {
    return m_http_method;
}
void OAISamplingRuleUpdate::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAISamplingRuleUpdate::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAISamplingRuleUpdate::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QString OAISamplingRuleUpdate::getUrlPath() const {
    return m_url_path;
}
void OAISamplingRuleUpdate::setUrlPath(const QString &url_path) {
    m_url_path = url_path;
    m_url_path_isSet = true;
}

bool OAISamplingRuleUpdate::is_url_path_Set() const{
    return m_url_path_isSet;
}

bool OAISamplingRuleUpdate::is_url_path_Valid() const{
    return m_url_path_isValid;
}

QMap OAISamplingRuleUpdate::getAttributes() const {
    return m_attributes;
}
void OAISamplingRuleUpdate::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISamplingRuleUpdate::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISamplingRuleUpdate::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAISamplingRuleUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservoir_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamplingRuleUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
