/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServiceGraphResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServiceGraphResult::OAIGetServiceGraphResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServiceGraphResult::OAIGetServiceGraphResult() {
    this->initializeModel();
}

OAIGetServiceGraphResult::~OAIGetServiceGraphResult() {}

void OAIGetServiceGraphResult::initializeModel() {

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_contains_old_group_versions_isSet = false;
    m_contains_old_group_versions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetServiceGraphResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServiceGraphResult::fromJsonObject(QJsonObject json) {

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("Services")]);
    m_services_isSet = !json[QString("Services")].isNull() && m_services_isValid;

    m_contains_old_group_versions_isValid = ::OpenAPI::fromJsonValue(m_contains_old_group_versions, json[QString("ContainsOldGroupVersions")]);
    m_contains_old_group_versions_isSet = !json[QString("ContainsOldGroupVersions")].isNull() && m_contains_old_group_versions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetServiceGraphResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServiceGraphResult::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_services.isSet()) {
        obj.insert(QString("Services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_contains_old_group_versions_isSet) {
        obj.insert(QString("ContainsOldGroupVersions"), ::OpenAPI::toJsonValue(m_contains_old_group_versions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QDateTime OAIGetServiceGraphResult::getStartTime() const {
    return m_start_time;
}
void OAIGetServiceGraphResult::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetServiceGraphResult::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetServiceGraphResult::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetServiceGraphResult::getEndTime() const {
    return m_end_time;
}
void OAIGetServiceGraphResult::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetServiceGraphResult::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetServiceGraphResult::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList OAIGetServiceGraphResult::getServices() const {
    return m_services;
}
void OAIGetServiceGraphResult::setServices(const QList &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIGetServiceGraphResult::is_services_Set() const{
    return m_services_isSet;
}

bool OAIGetServiceGraphResult::is_services_Valid() const{
    return m_services_isValid;
}

bool OAIGetServiceGraphResult::getContainsOldGroupVersions() const {
    return m_contains_old_group_versions;
}
void OAIGetServiceGraphResult::setContainsOldGroupVersions(const bool &contains_old_group_versions) {
    m_contains_old_group_versions = contains_old_group_versions;
    m_contains_old_group_versions_isSet = true;
}

bool OAIGetServiceGraphResult::is_contains_old_group_versions_Set() const{
    return m_contains_old_group_versions_isSet;
}

bool OAIGetServiceGraphResult::is_contains_old_group_versions_Valid() const{
    return m_contains_old_group_versions_isValid;
}

QString OAIGetServiceGraphResult::getNextToken() const {
    return m_next_token;
}
void OAIGetServiceGraphResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetServiceGraphResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetServiceGraphResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetServiceGraphResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_old_group_versions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServiceGraphResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
