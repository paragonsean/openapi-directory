/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesServiceStatistics_ServiceForecastStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesServiceStatistics_ServiceForecastStatistics::OAITimeSeriesServiceStatistics_ServiceForecastStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesServiceStatistics_ServiceForecastStatistics::OAITimeSeriesServiceStatistics_ServiceForecastStatistics() {
    this->initializeModel();
}

OAITimeSeriesServiceStatistics_ServiceForecastStatistics::~OAITimeSeriesServiceStatistics_ServiceForecastStatistics() {}

void OAITimeSeriesServiceStatistics_ServiceForecastStatistics::initializeModel() {

    m_fault_count_high_isSet = false;
    m_fault_count_high_isValid = false;

    m_fault_count_low_isSet = false;
    m_fault_count_low_isValid = false;
}

void OAITimeSeriesServiceStatistics_ServiceForecastStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesServiceStatistics_ServiceForecastStatistics::fromJsonObject(QJsonObject json) {

    m_fault_count_high_isValid = ::OpenAPI::fromJsonValue(m_fault_count_high, json[QString("FaultCountHigh")]);
    m_fault_count_high_isSet = !json[QString("FaultCountHigh")].isNull() && m_fault_count_high_isValid;

    m_fault_count_low_isValid = ::OpenAPI::fromJsonValue(m_fault_count_low, json[QString("FaultCountLow")]);
    m_fault_count_low_isSet = !json[QString("FaultCountLow")].isNull() && m_fault_count_low_isValid;
}

QString OAITimeSeriesServiceStatistics_ServiceForecastStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesServiceStatistics_ServiceForecastStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_fault_count_high_isSet) {
        obj.insert(QString("FaultCountHigh"), ::OpenAPI::toJsonValue(m_fault_count_high));
    }
    if (m_fault_count_low_isSet) {
        obj.insert(QString("FaultCountLow"), ::OpenAPI::toJsonValue(m_fault_count_low));
    }
    return obj;
}

qint32 OAITimeSeriesServiceStatistics_ServiceForecastStatistics::getFaultCountHigh() const {
    return m_fault_count_high;
}
void OAITimeSeriesServiceStatistics_ServiceForecastStatistics::setFaultCountHigh(const qint32 &fault_count_high) {
    m_fault_count_high = fault_count_high;
    m_fault_count_high_isSet = true;
}

bool OAITimeSeriesServiceStatistics_ServiceForecastStatistics::is_fault_count_high_Set() const{
    return m_fault_count_high_isSet;
}

bool OAITimeSeriesServiceStatistics_ServiceForecastStatistics::is_fault_count_high_Valid() const{
    return m_fault_count_high_isValid;
}

qint32 OAITimeSeriesServiceStatistics_ServiceForecastStatistics::getFaultCountLow() const {
    return m_fault_count_low;
}
void OAITimeSeriesServiceStatistics_ServiceForecastStatistics::setFaultCountLow(const qint32 &fault_count_low) {
    m_fault_count_low = fault_count_low;
    m_fault_count_low_isSet = true;
}

bool OAITimeSeriesServiceStatistics_ServiceForecastStatistics::is_fault_count_low_Set() const{
    return m_fault_count_low_isSet;
}

bool OAITimeSeriesServiceStatistics_ServiceForecastStatistics::is_fault_count_low_Valid() const{
    return m_fault_count_low_isValid;
}

bool OAITimeSeriesServiceStatistics_ServiceForecastStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fault_count_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_count_low_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesServiceStatistics_ServiceForecastStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
