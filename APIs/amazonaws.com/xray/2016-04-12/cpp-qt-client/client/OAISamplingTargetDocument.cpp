/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamplingTargetDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamplingTargetDocument::OAISamplingTargetDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamplingTargetDocument::OAISamplingTargetDocument() {
    this->initializeModel();
}

OAISamplingTargetDocument::~OAISamplingTargetDocument() {}

void OAISamplingTargetDocument::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_fixed_rate_isSet = false;
    m_fixed_rate_isValid = false;

    m_reservoir_quota_isSet = false;
    m_reservoir_quota_isValid = false;

    m_reservoir_quota_ttl_isSet = false;
    m_reservoir_quota_ttl_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;
}

void OAISamplingTargetDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamplingTargetDocument::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_fixed_rate_isValid = ::OpenAPI::fromJsonValue(m_fixed_rate, json[QString("FixedRate")]);
    m_fixed_rate_isSet = !json[QString("FixedRate")].isNull() && m_fixed_rate_isValid;

    m_reservoir_quota_isValid = ::OpenAPI::fromJsonValue(m_reservoir_quota, json[QString("ReservoirQuota")]);
    m_reservoir_quota_isSet = !json[QString("ReservoirQuota")].isNull() && m_reservoir_quota_isValid;

    m_reservoir_quota_ttl_isValid = ::OpenAPI::fromJsonValue(m_reservoir_quota_ttl, json[QString("ReservoirQuotaTTL")]);
    m_reservoir_quota_ttl_isSet = !json[QString("ReservoirQuotaTTL")].isNull() && m_reservoir_quota_ttl_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("Interval")]);
    m_interval_isSet = !json[QString("Interval")].isNull() && m_interval_isValid;
}

QString OAISamplingTargetDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamplingTargetDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_fixed_rate_isSet) {
        obj.insert(QString("FixedRate"), ::OpenAPI::toJsonValue(m_fixed_rate));
    }
    if (m_reservoir_quota_isSet) {
        obj.insert(QString("ReservoirQuota"), ::OpenAPI::toJsonValue(m_reservoir_quota));
    }
    if (m_reservoir_quota_ttl_isSet) {
        obj.insert(QString("ReservoirQuotaTTL"), ::OpenAPI::toJsonValue(m_reservoir_quota_ttl));
    }
    if (m_interval_isSet) {
        obj.insert(QString("Interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    return obj;
}

QString OAISamplingTargetDocument::getRuleName() const {
    return m_rule_name;
}
void OAISamplingTargetDocument::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAISamplingTargetDocument::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAISamplingTargetDocument::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

double OAISamplingTargetDocument::getFixedRate() const {
    return m_fixed_rate;
}
void OAISamplingTargetDocument::setFixedRate(const double &fixed_rate) {
    m_fixed_rate = fixed_rate;
    m_fixed_rate_isSet = true;
}

bool OAISamplingTargetDocument::is_fixed_rate_Set() const{
    return m_fixed_rate_isSet;
}

bool OAISamplingTargetDocument::is_fixed_rate_Valid() const{
    return m_fixed_rate_isValid;
}

qint32 OAISamplingTargetDocument::getReservoirQuota() const {
    return m_reservoir_quota;
}
void OAISamplingTargetDocument::setReservoirQuota(const qint32 &reservoir_quota) {
    m_reservoir_quota = reservoir_quota;
    m_reservoir_quota_isSet = true;
}

bool OAISamplingTargetDocument::is_reservoir_quota_Set() const{
    return m_reservoir_quota_isSet;
}

bool OAISamplingTargetDocument::is_reservoir_quota_Valid() const{
    return m_reservoir_quota_isValid;
}

QDateTime OAISamplingTargetDocument::getReservoirQuotaTtl() const {
    return m_reservoir_quota_ttl;
}
void OAISamplingTargetDocument::setReservoirQuotaTtl(const QDateTime &reservoir_quota_ttl) {
    m_reservoir_quota_ttl = reservoir_quota_ttl;
    m_reservoir_quota_ttl_isSet = true;
}

bool OAISamplingTargetDocument::is_reservoir_quota_ttl_Set() const{
    return m_reservoir_quota_ttl_isSet;
}

bool OAISamplingTargetDocument::is_reservoir_quota_ttl_Valid() const{
    return m_reservoir_quota_ttl_isValid;
}

qint32 OAISamplingTargetDocument::getInterval() const {
    return m_interval;
}
void OAISamplingTargetDocument::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAISamplingTargetDocument::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAISamplingTargetDocument::is_interval_Valid() const{
    return m_interval_isValid;
}

bool OAISamplingTargetDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservoir_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservoir_quota_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamplingTargetDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
