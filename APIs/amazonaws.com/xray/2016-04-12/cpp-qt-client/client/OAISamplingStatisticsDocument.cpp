/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamplingStatisticsDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamplingStatisticsDocument::OAISamplingStatisticsDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamplingStatisticsDocument::OAISamplingStatisticsDocument() {
    this->initializeModel();
}

OAISamplingStatisticsDocument::~OAISamplingStatisticsDocument() {}

void OAISamplingStatisticsDocument::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_request_count_isSet = false;
    m_request_count_isValid = false;

    m_sampled_count_isSet = false;
    m_sampled_count_isValid = false;

    m_borrow_count_isSet = false;
    m_borrow_count_isValid = false;
}

void OAISamplingStatisticsDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamplingStatisticsDocument::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientID")]);
    m_client_id_isSet = !json[QString("ClientID")].isNull() && m_client_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_request_count_isValid = ::OpenAPI::fromJsonValue(m_request_count, json[QString("RequestCount")]);
    m_request_count_isSet = !json[QString("RequestCount")].isNull() && m_request_count_isValid;

    m_sampled_count_isValid = ::OpenAPI::fromJsonValue(m_sampled_count, json[QString("SampledCount")]);
    m_sampled_count_isSet = !json[QString("SampledCount")].isNull() && m_sampled_count_isValid;

    m_borrow_count_isValid = ::OpenAPI::fromJsonValue(m_borrow_count, json[QString("BorrowCount")]);
    m_borrow_count_isSet = !json[QString("BorrowCount")].isNull() && m_borrow_count_isValid;
}

QString OAISamplingStatisticsDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamplingStatisticsDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientID"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_request_count_isSet) {
        obj.insert(QString("RequestCount"), ::OpenAPI::toJsonValue(m_request_count));
    }
    if (m_sampled_count_isSet) {
        obj.insert(QString("SampledCount"), ::OpenAPI::toJsonValue(m_sampled_count));
    }
    if (m_borrow_count_isSet) {
        obj.insert(QString("BorrowCount"), ::OpenAPI::toJsonValue(m_borrow_count));
    }
    return obj;
}

QString OAISamplingStatisticsDocument::getRuleName() const {
    return m_rule_name;
}
void OAISamplingStatisticsDocument::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAISamplingStatisticsDocument::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAISamplingStatisticsDocument::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QString OAISamplingStatisticsDocument::getClientId() const {
    return m_client_id;
}
void OAISamplingStatisticsDocument::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAISamplingStatisticsDocument::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAISamplingStatisticsDocument::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QDateTime OAISamplingStatisticsDocument::getTimestamp() const {
    return m_timestamp;
}
void OAISamplingStatisticsDocument::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISamplingStatisticsDocument::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISamplingStatisticsDocument::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAISamplingStatisticsDocument::getRequestCount() const {
    return m_request_count;
}
void OAISamplingStatisticsDocument::setRequestCount(const qint32 &request_count) {
    m_request_count = request_count;
    m_request_count_isSet = true;
}

bool OAISamplingStatisticsDocument::is_request_count_Set() const{
    return m_request_count_isSet;
}

bool OAISamplingStatisticsDocument::is_request_count_Valid() const{
    return m_request_count_isValid;
}

qint32 OAISamplingStatisticsDocument::getSampledCount() const {
    return m_sampled_count;
}
void OAISamplingStatisticsDocument::setSampledCount(const qint32 &sampled_count) {
    m_sampled_count = sampled_count;
    m_sampled_count_isSet = true;
}

bool OAISamplingStatisticsDocument::is_sampled_count_Set() const{
    return m_sampled_count_isSet;
}

bool OAISamplingStatisticsDocument::is_sampled_count_Valid() const{
    return m_sampled_count_isValid;
}

qint32 OAISamplingStatisticsDocument::getBorrowCount() const {
    return m_borrow_count;
}
void OAISamplingStatisticsDocument::setBorrowCount(const qint32 &borrow_count) {
    m_borrow_count = borrow_count;
    m_borrow_count_isSet = true;
}

bool OAISamplingStatisticsDocument::is_borrow_count_Set() const{
    return m_borrow_count_isSet;
}

bool OAISamplingStatisticsDocument::is_borrow_count_Valid() const{
    return m_borrow_count_isValid;
}

bool OAISamplingStatisticsDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampled_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_borrow_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamplingStatisticsDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_name_isValid && m_client_id_isValid && m_timestamp_isValid && m_request_count_isValid && m_sampled_count_isValid && true;
}

} // namespace OpenAPI
