/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorRootCause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorRootCause::OAIErrorRootCause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorRootCause::OAIErrorRootCause() {
    this->initializeModel();
}

OAIErrorRootCause::~OAIErrorRootCause() {}

void OAIErrorRootCause::initializeModel() {

    m_services_isSet = false;
    m_services_isValid = false;

    m_client_impacting_isSet = false;
    m_client_impacting_isValid = false;
}

void OAIErrorRootCause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorRootCause::fromJsonObject(QJsonObject json) {

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("Services")]);
    m_services_isSet = !json[QString("Services")].isNull() && m_services_isValid;

    m_client_impacting_isValid = ::OpenAPI::fromJsonValue(m_client_impacting, json[QString("ClientImpacting")]);
    m_client_impacting_isSet = !json[QString("ClientImpacting")].isNull() && m_client_impacting_isValid;
}

QString OAIErrorRootCause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorRootCause::asJsonObject() const {
    QJsonObject obj;
    if (m_services.isSet()) {
        obj.insert(QString("Services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_client_impacting_isSet) {
        obj.insert(QString("ClientImpacting"), ::OpenAPI::toJsonValue(m_client_impacting));
    }
    return obj;
}

QList OAIErrorRootCause::getServices() const {
    return m_services;
}
void OAIErrorRootCause::setServices(const QList &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIErrorRootCause::is_services_Set() const{
    return m_services_isSet;
}

bool OAIErrorRootCause::is_services_Valid() const{
    return m_services_isValid;
}

bool OAIErrorRootCause::getClientImpacting() const {
    return m_client_impacting;
}
void OAIErrorRootCause::setClientImpacting(const bool &client_impacting) {
    m_client_impacting = client_impacting;
    m_client_impacting_isSet = true;
}

bool OAIErrorRootCause::is_client_impacting_Set() const{
    return m_client_impacting_isSet;
}

bool OAIErrorRootCause::is_client_impacting_Valid() const{
    return m_client_impacting_isValid;
}

bool OAIErrorRootCause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_impacting_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorRootCause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
