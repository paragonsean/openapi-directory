/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesServiceStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesServiceStatistics::OAITimeSeriesServiceStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesServiceStatistics::OAITimeSeriesServiceStatistics() {
    this->initializeModel();
}

OAITimeSeriesServiceStatistics::~OAITimeSeriesServiceStatistics() {}

void OAITimeSeriesServiceStatistics::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_edge_summary_statistics_isSet = false;
    m_edge_summary_statistics_isValid = false;

    m_service_summary_statistics_isSet = false;
    m_service_summary_statistics_isValid = false;

    m_service_forecast_statistics_isSet = false;
    m_service_forecast_statistics_isValid = false;

    m_response_time_histogram_isSet = false;
    m_response_time_histogram_isValid = false;
}

void OAITimeSeriesServiceStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesServiceStatistics::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_edge_summary_statistics_isValid = ::OpenAPI::fromJsonValue(m_edge_summary_statistics, json[QString("EdgeSummaryStatistics")]);
    m_edge_summary_statistics_isSet = !json[QString("EdgeSummaryStatistics")].isNull() && m_edge_summary_statistics_isValid;

    m_service_summary_statistics_isValid = ::OpenAPI::fromJsonValue(m_service_summary_statistics, json[QString("ServiceSummaryStatistics")]);
    m_service_summary_statistics_isSet = !json[QString("ServiceSummaryStatistics")].isNull() && m_service_summary_statistics_isValid;

    m_service_forecast_statistics_isValid = ::OpenAPI::fromJsonValue(m_service_forecast_statistics, json[QString("ServiceForecastStatistics")]);
    m_service_forecast_statistics_isSet = !json[QString("ServiceForecastStatistics")].isNull() && m_service_forecast_statistics_isValid;

    m_response_time_histogram_isValid = ::OpenAPI::fromJsonValue(m_response_time_histogram, json[QString("ResponseTimeHistogram")]);
    m_response_time_histogram_isSet = !json[QString("ResponseTimeHistogram")].isNull() && m_response_time_histogram_isValid;
}

QString OAITimeSeriesServiceStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesServiceStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_edge_summary_statistics.isSet()) {
        obj.insert(QString("EdgeSummaryStatistics"), ::OpenAPI::toJsonValue(m_edge_summary_statistics));
    }
    if (m_service_summary_statistics.isSet()) {
        obj.insert(QString("ServiceSummaryStatistics"), ::OpenAPI::toJsonValue(m_service_summary_statistics));
    }
    if (m_service_forecast_statistics.isSet()) {
        obj.insert(QString("ServiceForecastStatistics"), ::OpenAPI::toJsonValue(m_service_forecast_statistics));
    }
    if (m_response_time_histogram.isSet()) {
        obj.insert(QString("ResponseTimeHistogram"), ::OpenAPI::toJsonValue(m_response_time_histogram));
    }
    return obj;
}

QDateTime OAITimeSeriesServiceStatistics::getTimestamp() const {
    return m_timestamp;
}
void OAITimeSeriesServiceStatistics::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITimeSeriesServiceStatistics::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITimeSeriesServiceStatistics::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIEdgeStatistics OAITimeSeriesServiceStatistics::getEdgeSummaryStatistics() const {
    return m_edge_summary_statistics;
}
void OAITimeSeriesServiceStatistics::setEdgeSummaryStatistics(const OAIEdgeStatistics &edge_summary_statistics) {
    m_edge_summary_statistics = edge_summary_statistics;
    m_edge_summary_statistics_isSet = true;
}

bool OAITimeSeriesServiceStatistics::is_edge_summary_statistics_Set() const{
    return m_edge_summary_statistics_isSet;
}

bool OAITimeSeriesServiceStatistics::is_edge_summary_statistics_Valid() const{
    return m_edge_summary_statistics_isValid;
}

OAIServiceStatistics OAITimeSeriesServiceStatistics::getServiceSummaryStatistics() const {
    return m_service_summary_statistics;
}
void OAITimeSeriesServiceStatistics::setServiceSummaryStatistics(const OAIServiceStatistics &service_summary_statistics) {
    m_service_summary_statistics = service_summary_statistics;
    m_service_summary_statistics_isSet = true;
}

bool OAITimeSeriesServiceStatistics::is_service_summary_statistics_Set() const{
    return m_service_summary_statistics_isSet;
}

bool OAITimeSeriesServiceStatistics::is_service_summary_statistics_Valid() const{
    return m_service_summary_statistics_isValid;
}

OAITimeSeriesServiceStatistics_ServiceForecastStatistics OAITimeSeriesServiceStatistics::getServiceForecastStatistics() const {
    return m_service_forecast_statistics;
}
void OAITimeSeriesServiceStatistics::setServiceForecastStatistics(const OAITimeSeriesServiceStatistics_ServiceForecastStatistics &service_forecast_statistics) {
    m_service_forecast_statistics = service_forecast_statistics;
    m_service_forecast_statistics_isSet = true;
}

bool OAITimeSeriesServiceStatistics::is_service_forecast_statistics_Set() const{
    return m_service_forecast_statistics_isSet;
}

bool OAITimeSeriesServiceStatistics::is_service_forecast_statistics_Valid() const{
    return m_service_forecast_statistics_isValid;
}

QList OAITimeSeriesServiceStatistics::getResponseTimeHistogram() const {
    return m_response_time_histogram;
}
void OAITimeSeriesServiceStatistics::setResponseTimeHistogram(const QList &response_time_histogram) {
    m_response_time_histogram = response_time_histogram;
    m_response_time_histogram_isSet = true;
}

bool OAITimeSeriesServiceStatistics::is_response_time_histogram_Set() const{
    return m_response_time_histogram_isSet;
}

bool OAITimeSeriesServiceStatistics::is_response_time_histogram_Valid() const{
    return m_response_time_histogram_isValid;
}

bool OAITimeSeriesServiceStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_summary_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_summary_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_forecast_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesServiceStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
