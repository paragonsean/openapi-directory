/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionConfig::OAIEncryptionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionConfig::OAIEncryptionConfig() {
    this->initializeModel();
}

OAIEncryptionConfig::~OAIEncryptionConfig() {}

void OAIEncryptionConfig::initializeModel() {

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEncryptionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionConfig::fromJsonObject(QJsonObject json) {

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("KeyId")]);
    m_key_id_isSet = !json[QString("KeyId")].isNull() && m_key_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIEncryptionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_key_id_isSet) {
        obj.insert(QString("KeyId"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEncryptionConfig::getKeyId() const {
    return m_key_id;
}
void OAIEncryptionConfig::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAIEncryptionConfig::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAIEncryptionConfig::is_key_id_Valid() const{
    return m_key_id_isValid;
}

OAIEncryptionStatus OAIEncryptionConfig::getStatus() const {
    return m_status;
}
void OAIEncryptionConfig::setStatus(const OAIEncryptionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEncryptionConfig::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEncryptionConfig::is_status_Valid() const{
    return m_status_isValid;
}

OAIEncryptionType OAIEncryptionConfig::getType() const {
    return m_type;
}
void OAIEncryptionConfig::setType(const OAIEncryptionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEncryptionConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEncryptionConfig::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEncryptionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
