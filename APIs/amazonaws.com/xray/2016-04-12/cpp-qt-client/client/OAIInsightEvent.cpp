/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightEvent::OAIInsightEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightEvent::OAIInsightEvent() {
    this->initializeModel();
}

OAIInsightEvent::~OAIInsightEvent() {}

void OAIInsightEvent::initializeModel() {

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_client_request_impact_statistics_isSet = false;
    m_client_request_impact_statistics_isValid = false;

    m_root_cause_service_request_impact_statistics_isSet = false;
    m_root_cause_service_request_impact_statistics_isValid = false;

    m_top_anomalous_services_isSet = false;
    m_top_anomalous_services_isValid = false;
}

void OAIInsightEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightEvent::fromJsonObject(QJsonObject json) {

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("Summary")]);
    m_summary_isSet = !json[QString("Summary")].isNull() && m_summary_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("EventTime")]);
    m_event_time_isSet = !json[QString("EventTime")].isNull() && m_event_time_isValid;

    m_client_request_impact_statistics_isValid = ::OpenAPI::fromJsonValue(m_client_request_impact_statistics, json[QString("ClientRequestImpactStatistics")]);
    m_client_request_impact_statistics_isSet = !json[QString("ClientRequestImpactStatistics")].isNull() && m_client_request_impact_statistics_isValid;

    m_root_cause_service_request_impact_statistics_isValid = ::OpenAPI::fromJsonValue(m_root_cause_service_request_impact_statistics, json[QString("RootCauseServiceRequestImpactStatistics")]);
    m_root_cause_service_request_impact_statistics_isSet = !json[QString("RootCauseServiceRequestImpactStatistics")].isNull() && m_root_cause_service_request_impact_statistics_isValid;

    m_top_anomalous_services_isValid = ::OpenAPI::fromJsonValue(m_top_anomalous_services, json[QString("TopAnomalousServices")]);
    m_top_anomalous_services_isSet = !json[QString("TopAnomalousServices")].isNull() && m_top_anomalous_services_isValid;
}

QString OAIInsightEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_summary_isSet) {
        obj.insert(QString("Summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("EventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_client_request_impact_statistics.isSet()) {
        obj.insert(QString("ClientRequestImpactStatistics"), ::OpenAPI::toJsonValue(m_client_request_impact_statistics));
    }
    if (m_root_cause_service_request_impact_statistics.isSet()) {
        obj.insert(QString("RootCauseServiceRequestImpactStatistics"), ::OpenAPI::toJsonValue(m_root_cause_service_request_impact_statistics));
    }
    if (m_top_anomalous_services.isSet()) {
        obj.insert(QString("TopAnomalousServices"), ::OpenAPI::toJsonValue(m_top_anomalous_services));
    }
    return obj;
}

QString OAIInsightEvent::getSummary() const {
    return m_summary;
}
void OAIInsightEvent::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIInsightEvent::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIInsightEvent::is_summary_Valid() const{
    return m_summary_isValid;
}

QDateTime OAIInsightEvent::getEventTime() const {
    return m_event_time;
}
void OAIInsightEvent::setEventTime(const QDateTime &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIInsightEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIInsightEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

OAIInsight_ClientRequestImpactStatistics OAIInsightEvent::getClientRequestImpactStatistics() const {
    return m_client_request_impact_statistics;
}
void OAIInsightEvent::setClientRequestImpactStatistics(const OAIInsight_ClientRequestImpactStatistics &client_request_impact_statistics) {
    m_client_request_impact_statistics = client_request_impact_statistics;
    m_client_request_impact_statistics_isSet = true;
}

bool OAIInsightEvent::is_client_request_impact_statistics_Set() const{
    return m_client_request_impact_statistics_isSet;
}

bool OAIInsightEvent::is_client_request_impact_statistics_Valid() const{
    return m_client_request_impact_statistics_isValid;
}

OAIInsight_RootCauseServiceRequestImpactStatistics OAIInsightEvent::getRootCauseServiceRequestImpactStatistics() const {
    return m_root_cause_service_request_impact_statistics;
}
void OAIInsightEvent::setRootCauseServiceRequestImpactStatistics(const OAIInsight_RootCauseServiceRequestImpactStatistics &root_cause_service_request_impact_statistics) {
    m_root_cause_service_request_impact_statistics = root_cause_service_request_impact_statistics;
    m_root_cause_service_request_impact_statistics_isSet = true;
}

bool OAIInsightEvent::is_root_cause_service_request_impact_statistics_Set() const{
    return m_root_cause_service_request_impact_statistics_isSet;
}

bool OAIInsightEvent::is_root_cause_service_request_impact_statistics_Valid() const{
    return m_root_cause_service_request_impact_statistics_isValid;
}

QList OAIInsightEvent::getTopAnomalousServices() const {
    return m_top_anomalous_services;
}
void OAIInsightEvent::setTopAnomalousServices(const QList &top_anomalous_services) {
    m_top_anomalous_services = top_anomalous_services;
    m_top_anomalous_services_isSet = true;
}

bool OAIInsightEvent::is_top_anomalous_services_Set() const{
    return m_top_anomalous_services_isSet;
}

bool OAIInsightEvent::is_top_anomalous_services_Valid() const{
    return m_top_anomalous_services_isValid;
}

bool OAIInsightEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_impact_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_cause_service_request_impact_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_anomalous_services.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
