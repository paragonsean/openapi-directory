/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITraceSummary.h
 *
 * Metadata generated from the segment documents in a trace.
 */

#ifndef OAITraceSummary_H
#define OAITraceSummary_H

#include <QJsonObject>

#include "OAITraceSummary_EntryPoint.h"
#include "OAITraceSummary_Http.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITraceSummary_Http;
class OAITraceSummary_EntryPoint;

class OAITraceSummary : public OAIObject {
public:
    OAITraceSummary();
    OAITraceSummary(QString json);
    ~OAITraceSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    double getResponseTime() const;
    void setResponseTime(const double &response_time);
    bool is_response_time_Set() const;
    bool is_response_time_Valid() const;

    bool getHasFault() const;
    void setHasFault(const bool &has_fault);
    bool is_has_fault_Set() const;
    bool is_has_fault_Valid() const;

    bool getHasError() const;
    void setHasError(const bool &has_error);
    bool is_has_error_Set() const;
    bool is_has_error_Valid() const;

    bool getHasThrottle() const;
    void setHasThrottle(const bool &has_throttle);
    bool is_has_throttle_Set() const;
    bool is_has_throttle_Valid() const;

    bool getIsPartial() const;
    void setIsPartial(const bool &is_partial);
    bool is_is_partial_Set() const;
    bool is_is_partial_Valid() const;

    OAITraceSummary_Http getHttp() const;
    void setHttp(const OAITraceSummary_Http &http);
    bool is_http_Set() const;
    bool is_http_Valid() const;

    QMap getAnnotations() const;
    void setAnnotations(const QMap &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QList getUsers() const;
    void setUsers(const QList &users);
    bool is_users_Set() const;
    bool is_users_Valid() const;

    QList getServiceIds() const;
    void setServiceIds(const QList &service_ids);
    bool is_service_ids_Set() const;
    bool is_service_ids_Valid() const;

    QList getResourceArns() const;
    void setResourceArns(const QList &resource_arns);
    bool is_resource_arns_Set() const;
    bool is_resource_arns_Valid() const;

    QList getInstanceIds() const;
    void setInstanceIds(const QList &instance_ids);
    bool is_instance_ids_Set() const;
    bool is_instance_ids_Valid() const;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    OAITraceSummary_EntryPoint getEntryPoint() const;
    void setEntryPoint(const OAITraceSummary_EntryPoint &entry_point);
    bool is_entry_point_Set() const;
    bool is_entry_point_Valid() const;

    QList getFaultRootCauses() const;
    void setFaultRootCauses(const QList &fault_root_causes);
    bool is_fault_root_causes_Set() const;
    bool is_fault_root_causes_Valid() const;

    QList getErrorRootCauses() const;
    void setErrorRootCauses(const QList &error_root_causes);
    bool is_error_root_causes_Set() const;
    bool is_error_root_causes_Valid() const;

    QList getResponseTimeRootCauses() const;
    void setResponseTimeRootCauses(const QList &response_time_root_causes);
    bool is_response_time_root_causes_Set() const;
    bool is_response_time_root_causes_Valid() const;

    qint32 getRevision() const;
    void setRevision(const qint32 &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    QDateTime getMatchedEventTime() const;
    void setMatchedEventTime(const QDateTime &matched_event_time);
    bool is_matched_event_time_Set() const;
    bool is_matched_event_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    double m_response_time;
    bool m_response_time_isSet;
    bool m_response_time_isValid;

    bool m_has_fault;
    bool m_has_fault_isSet;
    bool m_has_fault_isValid;

    bool m_has_error;
    bool m_has_error_isSet;
    bool m_has_error_isValid;

    bool m_has_throttle;
    bool m_has_throttle_isSet;
    bool m_has_throttle_isValid;

    bool m_is_partial;
    bool m_is_partial_isSet;
    bool m_is_partial_isValid;

    OAITraceSummary_Http m_http;
    bool m_http_isSet;
    bool m_http_isValid;

    QMap m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QList m_users;
    bool m_users_isSet;
    bool m_users_isValid;

    QList m_service_ids;
    bool m_service_ids_isSet;
    bool m_service_ids_isValid;

    QList m_resource_arns;
    bool m_resource_arns_isSet;
    bool m_resource_arns_isValid;

    QList m_instance_ids;
    bool m_instance_ids_isSet;
    bool m_instance_ids_isValid;

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;

    OAITraceSummary_EntryPoint m_entry_point;
    bool m_entry_point_isSet;
    bool m_entry_point_isValid;

    QList m_fault_root_causes;
    bool m_fault_root_causes_isSet;
    bool m_fault_root_causes_isValid;

    QList m_error_root_causes;
    bool m_error_root_causes_isSet;
    bool m_error_root_causes_isValid;

    QList m_response_time_root_causes;
    bool m_response_time_root_causes_isSet;
    bool m_response_time_root_causes_isValid;

    qint32 m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    QDateTime m_matched_event_time;
    bool m_matched_event_time_isSet;
    bool m_matched_event_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITraceSummary)

#endif // OAITraceSummary_H
