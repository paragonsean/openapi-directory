/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraceSummary_Http.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraceSummary_Http::OAITraceSummary_Http(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraceSummary_Http::OAITraceSummary_Http() {
    this->initializeModel();
}

OAITraceSummary_Http::~OAITraceSummary_Http() {}

void OAITraceSummary_Http::initializeModel() {

    m_http_url_isSet = false;
    m_http_url_isValid = false;

    m_http_status_isSet = false;
    m_http_status_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_client_ip_isSet = false;
    m_client_ip_isValid = false;
}

void OAITraceSummary_Http::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraceSummary_Http::fromJsonObject(QJsonObject json) {

    m_http_url_isValid = ::OpenAPI::fromJsonValue(m_http_url, json[QString("HttpURL")]);
    m_http_url_isSet = !json[QString("HttpURL")].isNull() && m_http_url_isValid;

    m_http_status_isValid = ::OpenAPI::fromJsonValue(m_http_status, json[QString("HttpStatus")]);
    m_http_status_isSet = !json[QString("HttpStatus")].isNull() && m_http_status_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("HttpMethod")]);
    m_http_method_isSet = !json[QString("HttpMethod")].isNull() && m_http_method_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("UserAgent")]);
    m_user_agent_isSet = !json[QString("UserAgent")].isNull() && m_user_agent_isValid;

    m_client_ip_isValid = ::OpenAPI::fromJsonValue(m_client_ip, json[QString("ClientIp")]);
    m_client_ip_isSet = !json[QString("ClientIp")].isNull() && m_client_ip_isValid;
}

QString OAITraceSummary_Http::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraceSummary_Http::asJsonObject() const {
    QJsonObject obj;
    if (m_http_url_isSet) {
        obj.insert(QString("HttpURL"), ::OpenAPI::toJsonValue(m_http_url));
    }
    if (m_http_status_isSet) {
        obj.insert(QString("HttpStatus"), ::OpenAPI::toJsonValue(m_http_status));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("HttpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("UserAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_client_ip_isSet) {
        obj.insert(QString("ClientIp"), ::OpenAPI::toJsonValue(m_client_ip));
    }
    return obj;
}

QString OAITraceSummary_Http::getHttpUrl() const {
    return m_http_url;
}
void OAITraceSummary_Http::setHttpUrl(const QString &http_url) {
    m_http_url = http_url;
    m_http_url_isSet = true;
}

bool OAITraceSummary_Http::is_http_url_Set() const{
    return m_http_url_isSet;
}

bool OAITraceSummary_Http::is_http_url_Valid() const{
    return m_http_url_isValid;
}

qint32 OAITraceSummary_Http::getHttpStatus() const {
    return m_http_status;
}
void OAITraceSummary_Http::setHttpStatus(const qint32 &http_status) {
    m_http_status = http_status;
    m_http_status_isSet = true;
}

bool OAITraceSummary_Http::is_http_status_Set() const{
    return m_http_status_isSet;
}

bool OAITraceSummary_Http::is_http_status_Valid() const{
    return m_http_status_isValid;
}

QString OAITraceSummary_Http::getHttpMethod() const {
    return m_http_method;
}
void OAITraceSummary_Http::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAITraceSummary_Http::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAITraceSummary_Http::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QString OAITraceSummary_Http::getUserAgent() const {
    return m_user_agent;
}
void OAITraceSummary_Http::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAITraceSummary_Http::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAITraceSummary_Http::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QString OAITraceSummary_Http::getClientIp() const {
    return m_client_ip;
}
void OAITraceSummary_Http::setClientIp(const QString &client_ip) {
    m_client_ip = client_ip;
    m_client_ip_isSet = true;
}

bool OAITraceSummary_Http::is_client_ip_Set() const{
    return m_client_ip_isSet;
}

bool OAITraceSummary_Http::is_client_ip_Valid() const{
    return m_client_ip_isValid;
}

bool OAITraceSummary_Http::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraceSummary_Http::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
