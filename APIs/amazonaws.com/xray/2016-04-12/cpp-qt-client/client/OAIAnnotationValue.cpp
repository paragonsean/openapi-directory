/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotationValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotationValue::OAIAnnotationValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotationValue::OAIAnnotationValue() {
    this->initializeModel();
}

OAIAnnotationValue::~OAIAnnotationValue() {}

void OAIAnnotationValue::initializeModel() {

    m_number_value_isSet = false;
    m_number_value_isValid = false;

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIAnnotationValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotationValue::fromJsonObject(QJsonObject json) {

    m_number_value_isValid = ::OpenAPI::fromJsonValue(m_number_value, json[QString("NumberValue")]);
    m_number_value_isSet = !json[QString("NumberValue")].isNull() && m_number_value_isValid;

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("BooleanValue")]);
    m_boolean_value_isSet = !json[QString("BooleanValue")].isNull() && m_boolean_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("StringValue")]);
    m_string_value_isSet = !json[QString("StringValue")].isNull() && m_string_value_isValid;
}

QString OAIAnnotationValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotationValue::asJsonObject() const {
    QJsonObject obj;
    if (m_number_value_isSet) {
        obj.insert(QString("NumberValue"), ::OpenAPI::toJsonValue(m_number_value));
    }
    if (m_boolean_value_isSet) {
        obj.insert(QString("BooleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("StringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

double OAIAnnotationValue::getNumberValue() const {
    return m_number_value;
}
void OAIAnnotationValue::setNumberValue(const double &number_value) {
    m_number_value = number_value;
    m_number_value_isSet = true;
}

bool OAIAnnotationValue::is_number_value_Set() const{
    return m_number_value_isSet;
}

bool OAIAnnotationValue::is_number_value_Valid() const{
    return m_number_value_isValid;
}

bool OAIAnnotationValue::getBooleanValue() const {
    return m_boolean_value;
}
void OAIAnnotationValue::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAIAnnotationValue::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAIAnnotationValue::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

QString OAIAnnotationValue::getStringValue() const {
    return m_string_value;
}
void OAIAnnotationValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIAnnotationValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIAnnotationValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIAnnotationValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotationValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
