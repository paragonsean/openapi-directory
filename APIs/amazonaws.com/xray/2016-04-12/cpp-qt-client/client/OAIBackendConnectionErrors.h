/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackendConnectionErrors.h
 *
 * &lt;p/&gt;
 */

#ifndef OAIBackendConnectionErrors_H
#define OAIBackendConnectionErrors_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBackendConnectionErrors : public OAIObject {
public:
    OAIBackendConnectionErrors();
    OAIBackendConnectionErrors(QString json);
    ~OAIBackendConnectionErrors() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getTimeoutCount() const;
    void setTimeoutCount(const qint32 &timeout_count);
    bool is_timeout_count_Set() const;
    bool is_timeout_count_Valid() const;

    qint32 getConnectionRefusedCount() const;
    void setConnectionRefusedCount(const qint32 &connection_refused_count);
    bool is_connection_refused_count_Set() const;
    bool is_connection_refused_count_Valid() const;

    qint32 getHttpCode4XxCount() const;
    void setHttpCode4XxCount(const qint32 &http_code4_xx_count);
    bool is_http_code4_xx_count_Set() const;
    bool is_http_code4_xx_count_Valid() const;

    qint32 getHttpCode5XxCount() const;
    void setHttpCode5XxCount(const qint32 &http_code5_xx_count);
    bool is_http_code5_xx_count_Set() const;
    bool is_http_code5_xx_count_Valid() const;

    qint32 getUnknownHostCount() const;
    void setUnknownHostCount(const qint32 &unknown_host_count);
    bool is_unknown_host_count_Set() const;
    bool is_unknown_host_count_Valid() const;

    qint32 getOtherCount() const;
    void setOtherCount(const qint32 &other_count);
    bool is_other_count_Set() const;
    bool is_other_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_timeout_count;
    bool m_timeout_count_isSet;
    bool m_timeout_count_isValid;

    qint32 m_connection_refused_count;
    bool m_connection_refused_count_isSet;
    bool m_connection_refused_count_isValid;

    qint32 m_http_code4_xx_count;
    bool m_http_code4_xx_count_isSet;
    bool m_http_code4_xx_count_isValid;

    qint32 m_http_code5_xx_count;
    bool m_http_code5_xx_count_isSet;
    bool m_http_code5_xx_count_isValid;

    qint32 m_unknown_host_count;
    bool m_unknown_host_count_isSet;
    bool m_unknown_host_count_isValid;

    qint32 m_other_count;
    bool m_other_count_isSet;
    bool m_other_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackendConnectionErrors)

#endif // OAIBackendConnectionErrors_H
