/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateSamplingRule_request_SamplingRuleUpdate.h
 *
 * A document specifying changes to a sampling rule&#39;s configuration.
 */

#ifndef OAIUpdateSamplingRule_request_SamplingRuleUpdate_H
#define OAIUpdateSamplingRule_request_SamplingRuleUpdate_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateSamplingRule_request_SamplingRuleUpdate : public OAIObject {
public:
    OAIUpdateSamplingRule_request_SamplingRuleUpdate();
    OAIUpdateSamplingRule_request_SamplingRuleUpdate(QString json);
    ~OAIUpdateSamplingRule_request_SamplingRuleUpdate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    QString getRuleArn() const;
    void setRuleArn(const QString &rule_arn);
    bool is_rule_arn_Set() const;
    bool is_rule_arn_Valid() const;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    qint32 getPriority() const;
    void setPriority(const qint32 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    double getFixedRate() const;
    void setFixedRate(const double &fixed_rate);
    bool is_fixed_rate_Set() const;
    bool is_fixed_rate_Valid() const;

    qint32 getReservoirSize() const;
    void setReservoirSize(const qint32 &reservoir_size);
    bool is_reservoir_size_Set() const;
    bool is_reservoir_size_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QString getServiceName() const;
    void setServiceName(const QString &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    QString getServiceType() const;
    void setServiceType(const QString &service_type);
    bool is_service_type_Set() const;
    bool is_service_type_Valid() const;

    QString getHttpMethod() const;
    void setHttpMethod(const QString &http_method);
    bool is_http_method_Set() const;
    bool is_http_method_Valid() const;

    QString getUrlPath() const;
    void setUrlPath(const QString &url_path);
    bool is_url_path_Set() const;
    bool is_url_path_Valid() const;

    QMap getAttributes() const;
    void setAttributes(const QMap &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    QString m_rule_arn;
    bool m_rule_arn_isSet;
    bool m_rule_arn_isValid;

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    qint32 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    double m_fixed_rate;
    bool m_fixed_rate_isSet;
    bool m_fixed_rate_isValid;

    qint32 m_reservoir_size;
    bool m_reservoir_size_isSet;
    bool m_reservoir_size_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QString m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    QString m_service_type;
    bool m_service_type_isSet;
    bool m_service_type_isValid;

    QString m_http_method;
    bool m_http_method_isSet;
    bool m_http_method_isValid;

    QString m_url_path;
    bool m_url_path_isSet;
    bool m_url_path_isValid;

    QMap m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateSamplingRule_request_SamplingRuleUpdate)

#endif // OAIUpdateSamplingRule_request_SamplingRuleUpdate_H
