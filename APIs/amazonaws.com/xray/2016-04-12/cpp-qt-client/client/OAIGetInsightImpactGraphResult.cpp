/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInsightImpactGraphResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInsightImpactGraphResult::OAIGetInsightImpactGraphResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInsightImpactGraphResult::OAIGetInsightImpactGraphResult() {
    this->initializeModel();
}

OAIGetInsightImpactGraphResult::~OAIGetInsightImpactGraphResult() {}

void OAIGetInsightImpactGraphResult::initializeModel() {

    m_insight_id_isSet = false;
    m_insight_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_service_graph_start_time_isSet = false;
    m_service_graph_start_time_isValid = false;

    m_service_graph_end_time_isSet = false;
    m_service_graph_end_time_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetInsightImpactGraphResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInsightImpactGraphResult::fromJsonObject(QJsonObject json) {

    m_insight_id_isValid = ::OpenAPI::fromJsonValue(m_insight_id, json[QString("InsightId")]);
    m_insight_id_isSet = !json[QString("InsightId")].isNull() && m_insight_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_service_graph_start_time_isValid = ::OpenAPI::fromJsonValue(m_service_graph_start_time, json[QString("ServiceGraphStartTime")]);
    m_service_graph_start_time_isSet = !json[QString("ServiceGraphStartTime")].isNull() && m_service_graph_start_time_isValid;

    m_service_graph_end_time_isValid = ::OpenAPI::fromJsonValue(m_service_graph_end_time, json[QString("ServiceGraphEndTime")]);
    m_service_graph_end_time_isSet = !json[QString("ServiceGraphEndTime")].isNull() && m_service_graph_end_time_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("Services")]);
    m_services_isSet = !json[QString("Services")].isNull() && m_services_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetInsightImpactGraphResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInsightImpactGraphResult::asJsonObject() const {
    QJsonObject obj;
    if (m_insight_id_isSet) {
        obj.insert(QString("InsightId"), ::OpenAPI::toJsonValue(m_insight_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_service_graph_start_time_isSet) {
        obj.insert(QString("ServiceGraphStartTime"), ::OpenAPI::toJsonValue(m_service_graph_start_time));
    }
    if (m_service_graph_end_time_isSet) {
        obj.insert(QString("ServiceGraphEndTime"), ::OpenAPI::toJsonValue(m_service_graph_end_time));
    }
    if (m_services.isSet()) {
        obj.insert(QString("Services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIGetInsightImpactGraphResult::getInsightId() const {
    return m_insight_id;
}
void OAIGetInsightImpactGraphResult::setInsightId(const QString &insight_id) {
    m_insight_id = insight_id;
    m_insight_id_isSet = true;
}

bool OAIGetInsightImpactGraphResult::is_insight_id_Set() const{
    return m_insight_id_isSet;
}

bool OAIGetInsightImpactGraphResult::is_insight_id_Valid() const{
    return m_insight_id_isValid;
}

QDateTime OAIGetInsightImpactGraphResult::getStartTime() const {
    return m_start_time;
}
void OAIGetInsightImpactGraphResult::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetInsightImpactGraphResult::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetInsightImpactGraphResult::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetInsightImpactGraphResult::getEndTime() const {
    return m_end_time;
}
void OAIGetInsightImpactGraphResult::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetInsightImpactGraphResult::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetInsightImpactGraphResult::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIGetInsightImpactGraphResult::getServiceGraphStartTime() const {
    return m_service_graph_start_time;
}
void OAIGetInsightImpactGraphResult::setServiceGraphStartTime(const QDateTime &service_graph_start_time) {
    m_service_graph_start_time = service_graph_start_time;
    m_service_graph_start_time_isSet = true;
}

bool OAIGetInsightImpactGraphResult::is_service_graph_start_time_Set() const{
    return m_service_graph_start_time_isSet;
}

bool OAIGetInsightImpactGraphResult::is_service_graph_start_time_Valid() const{
    return m_service_graph_start_time_isValid;
}

QDateTime OAIGetInsightImpactGraphResult::getServiceGraphEndTime() const {
    return m_service_graph_end_time;
}
void OAIGetInsightImpactGraphResult::setServiceGraphEndTime(const QDateTime &service_graph_end_time) {
    m_service_graph_end_time = service_graph_end_time;
    m_service_graph_end_time_isSet = true;
}

bool OAIGetInsightImpactGraphResult::is_service_graph_end_time_Set() const{
    return m_service_graph_end_time_isSet;
}

bool OAIGetInsightImpactGraphResult::is_service_graph_end_time_Valid() const{
    return m_service_graph_end_time_isValid;
}

QList OAIGetInsightImpactGraphResult::getServices() const {
    return m_services;
}
void OAIGetInsightImpactGraphResult::setServices(const QList &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIGetInsightImpactGraphResult::is_services_Set() const{
    return m_services_isSet;
}

bool OAIGetInsightImpactGraphResult::is_services_Valid() const{
    return m_services_isValid;
}

QString OAIGetInsightImpactGraphResult::getNextToken() const {
    return m_next_token;
}
void OAIGetInsightImpactGraphResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetInsightImpactGraphResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetInsightImpactGraphResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetInsightImpactGraphResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insight_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_graph_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_graph_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInsightImpactGraphResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
