/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightSummary::OAIInsightSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightSummary::OAIInsightSummary() {
    this->initializeModel();
}

OAIInsightSummary::~OAIInsightSummary() {}

void OAIInsightSummary::initializeModel() {

    m_insight_id_isSet = false;
    m_insight_id_isValid = false;

    m_group_arn_isSet = false;
    m_group_arn_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_root_cause_service_id_isSet = false;
    m_root_cause_service_id_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_client_request_impact_statistics_isSet = false;
    m_client_request_impact_statistics_isValid = false;

    m_root_cause_service_request_impact_statistics_isSet = false;
    m_root_cause_service_request_impact_statistics_isValid = false;

    m_top_anomalous_services_isSet = false;
    m_top_anomalous_services_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;
}

void OAIInsightSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightSummary::fromJsonObject(QJsonObject json) {

    m_insight_id_isValid = ::OpenAPI::fromJsonValue(m_insight_id, json[QString("InsightId")]);
    m_insight_id_isSet = !json[QString("InsightId")].isNull() && m_insight_id_isValid;

    m_group_arn_isValid = ::OpenAPI::fromJsonValue(m_group_arn, json[QString("GroupARN")]);
    m_group_arn_isSet = !json[QString("GroupARN")].isNull() && m_group_arn_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;

    m_root_cause_service_id_isValid = ::OpenAPI::fromJsonValue(m_root_cause_service_id, json[QString("RootCauseServiceId")]);
    m_root_cause_service_id_isSet = !json[QString("RootCauseServiceId")].isNull() && m_root_cause_service_id_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("Summary")]);
    m_summary_isSet = !json[QString("Summary")].isNull() && m_summary_isValid;

    m_client_request_impact_statistics_isValid = ::OpenAPI::fromJsonValue(m_client_request_impact_statistics, json[QString("ClientRequestImpactStatistics")]);
    m_client_request_impact_statistics_isSet = !json[QString("ClientRequestImpactStatistics")].isNull() && m_client_request_impact_statistics_isValid;

    m_root_cause_service_request_impact_statistics_isValid = ::OpenAPI::fromJsonValue(m_root_cause_service_request_impact_statistics, json[QString("RootCauseServiceRequestImpactStatistics")]);
    m_root_cause_service_request_impact_statistics_isSet = !json[QString("RootCauseServiceRequestImpactStatistics")].isNull() && m_root_cause_service_request_impact_statistics_isValid;

    m_top_anomalous_services_isValid = ::OpenAPI::fromJsonValue(m_top_anomalous_services, json[QString("TopAnomalousServices")]);
    m_top_anomalous_services_isSet = !json[QString("TopAnomalousServices")].isNull() && m_top_anomalous_services_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("LastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("LastUpdateTime")].isNull() && m_last_update_time_isValid;
}

QString OAIInsightSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_insight_id_isSet) {
        obj.insert(QString("InsightId"), ::OpenAPI::toJsonValue(m_insight_id));
    }
    if (m_group_arn_isSet) {
        obj.insert(QString("GroupARN"), ::OpenAPI::toJsonValue(m_group_arn));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_root_cause_service_id.isSet()) {
        obj.insert(QString("RootCauseServiceId"), ::OpenAPI::toJsonValue(m_root_cause_service_id));
    }
    if (m_categories.isSet()) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_summary_isSet) {
        obj.insert(QString("Summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_client_request_impact_statistics.isSet()) {
        obj.insert(QString("ClientRequestImpactStatistics"), ::OpenAPI::toJsonValue(m_client_request_impact_statistics));
    }
    if (m_root_cause_service_request_impact_statistics.isSet()) {
        obj.insert(QString("RootCauseServiceRequestImpactStatistics"), ::OpenAPI::toJsonValue(m_root_cause_service_request_impact_statistics));
    }
    if (m_top_anomalous_services.isSet()) {
        obj.insert(QString("TopAnomalousServices"), ::OpenAPI::toJsonValue(m_top_anomalous_services));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("LastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    return obj;
}

QString OAIInsightSummary::getInsightId() const {
    return m_insight_id;
}
void OAIInsightSummary::setInsightId(const QString &insight_id) {
    m_insight_id = insight_id;
    m_insight_id_isSet = true;
}

bool OAIInsightSummary::is_insight_id_Set() const{
    return m_insight_id_isSet;
}

bool OAIInsightSummary::is_insight_id_Valid() const{
    return m_insight_id_isValid;
}

QString OAIInsightSummary::getGroupArn() const {
    return m_group_arn;
}
void OAIInsightSummary::setGroupArn(const QString &group_arn) {
    m_group_arn = group_arn;
    m_group_arn_isSet = true;
}

bool OAIInsightSummary::is_group_arn_Set() const{
    return m_group_arn_isSet;
}

bool OAIInsightSummary::is_group_arn_Valid() const{
    return m_group_arn_isValid;
}

QString OAIInsightSummary::getGroupName() const {
    return m_group_name;
}
void OAIInsightSummary::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIInsightSummary::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIInsightSummary::is_group_name_Valid() const{
    return m_group_name_isValid;
}

OAIServiceId OAIInsightSummary::getRootCauseServiceId() const {
    return m_root_cause_service_id;
}
void OAIInsightSummary::setRootCauseServiceId(const OAIServiceId &root_cause_service_id) {
    m_root_cause_service_id = root_cause_service_id;
    m_root_cause_service_id_isSet = true;
}

bool OAIInsightSummary::is_root_cause_service_id_Set() const{
    return m_root_cause_service_id_isSet;
}

bool OAIInsightSummary::is_root_cause_service_id_Valid() const{
    return m_root_cause_service_id_isValid;
}

QList OAIInsightSummary::getCategories() const {
    return m_categories;
}
void OAIInsightSummary::setCategories(const QList &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIInsightSummary::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIInsightSummary::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIInsightState OAIInsightSummary::getState() const {
    return m_state;
}
void OAIInsightSummary::setState(const OAIInsightState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInsightSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInsightSummary::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIInsightSummary::getStartTime() const {
    return m_start_time;
}
void OAIInsightSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIInsightSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIInsightSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIInsightSummary::getEndTime() const {
    return m_end_time;
}
void OAIInsightSummary::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIInsightSummary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIInsightSummary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIInsightSummary::getSummary() const {
    return m_summary;
}
void OAIInsightSummary::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIInsightSummary::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIInsightSummary::is_summary_Valid() const{
    return m_summary_isValid;
}

OAIInsightSummary_ClientRequestImpactStatistics OAIInsightSummary::getClientRequestImpactStatistics() const {
    return m_client_request_impact_statistics;
}
void OAIInsightSummary::setClientRequestImpactStatistics(const OAIInsightSummary_ClientRequestImpactStatistics &client_request_impact_statistics) {
    m_client_request_impact_statistics = client_request_impact_statistics;
    m_client_request_impact_statistics_isSet = true;
}

bool OAIInsightSummary::is_client_request_impact_statistics_Set() const{
    return m_client_request_impact_statistics_isSet;
}

bool OAIInsightSummary::is_client_request_impact_statistics_Valid() const{
    return m_client_request_impact_statistics_isValid;
}

OAIInsightSummary_RootCauseServiceRequestImpactStatistics OAIInsightSummary::getRootCauseServiceRequestImpactStatistics() const {
    return m_root_cause_service_request_impact_statistics;
}
void OAIInsightSummary::setRootCauseServiceRequestImpactStatistics(const OAIInsightSummary_RootCauseServiceRequestImpactStatistics &root_cause_service_request_impact_statistics) {
    m_root_cause_service_request_impact_statistics = root_cause_service_request_impact_statistics;
    m_root_cause_service_request_impact_statistics_isSet = true;
}

bool OAIInsightSummary::is_root_cause_service_request_impact_statistics_Set() const{
    return m_root_cause_service_request_impact_statistics_isSet;
}

bool OAIInsightSummary::is_root_cause_service_request_impact_statistics_Valid() const{
    return m_root_cause_service_request_impact_statistics_isValid;
}

QList OAIInsightSummary::getTopAnomalousServices() const {
    return m_top_anomalous_services;
}
void OAIInsightSummary::setTopAnomalousServices(const QList &top_anomalous_services) {
    m_top_anomalous_services = top_anomalous_services;
    m_top_anomalous_services_isSet = true;
}

bool OAIInsightSummary::is_top_anomalous_services_Set() const{
    return m_top_anomalous_services_isSet;
}

bool OAIInsightSummary::is_top_anomalous_services_Valid() const{
    return m_top_anomalous_services_isValid;
}

QDateTime OAIInsightSummary::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIInsightSummary::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIInsightSummary::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIInsightSummary::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

bool OAIInsightSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insight_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_cause_service_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_impact_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_cause_service_request_impact_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_anomalous_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
