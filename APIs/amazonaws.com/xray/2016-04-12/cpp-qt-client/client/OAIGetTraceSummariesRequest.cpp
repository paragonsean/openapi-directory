/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTraceSummariesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTraceSummariesRequest::OAIGetTraceSummariesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTraceSummariesRequest::OAIGetTraceSummariesRequest() {
    this->initializeModel();
}

OAIGetTraceSummariesRequest::~OAIGetTraceSummariesRequest() {}

void OAIGetTraceSummariesRequest::initializeModel() {

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_time_range_type_isSet = false;
    m_time_range_type_isValid = false;

    m_sampling_isSet = false;
    m_sampling_isValid = false;

    m_sampling_strategy_isSet = false;
    m_sampling_strategy_isValid = false;

    m_filter_expression_isSet = false;
    m_filter_expression_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetTraceSummariesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTraceSummariesRequest::fromJsonObject(QJsonObject json) {

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_time_range_type_isValid = ::OpenAPI::fromJsonValue(m_time_range_type, json[QString("TimeRangeType")]);
    m_time_range_type_isSet = !json[QString("TimeRangeType")].isNull() && m_time_range_type_isValid;

    m_sampling_isValid = ::OpenAPI::fromJsonValue(m_sampling, json[QString("Sampling")]);
    m_sampling_isSet = !json[QString("Sampling")].isNull() && m_sampling_isValid;

    m_sampling_strategy_isValid = ::OpenAPI::fromJsonValue(m_sampling_strategy, json[QString("SamplingStrategy")]);
    m_sampling_strategy_isSet = !json[QString("SamplingStrategy")].isNull() && m_sampling_strategy_isValid;

    m_filter_expression_isValid = ::OpenAPI::fromJsonValue(m_filter_expression, json[QString("FilterExpression")]);
    m_filter_expression_isSet = !json[QString("FilterExpression")].isNull() && m_filter_expression_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetTraceSummariesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTraceSummariesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_time_range_type.isSet()) {
        obj.insert(QString("TimeRangeType"), ::OpenAPI::toJsonValue(m_time_range_type));
    }
    if (m_sampling_isSet) {
        obj.insert(QString("Sampling"), ::OpenAPI::toJsonValue(m_sampling));
    }
    if (m_sampling_strategy.isSet()) {
        obj.insert(QString("SamplingStrategy"), ::OpenAPI::toJsonValue(m_sampling_strategy));
    }
    if (m_filter_expression_isSet) {
        obj.insert(QString("FilterExpression"), ::OpenAPI::toJsonValue(m_filter_expression));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QDateTime OAIGetTraceSummariesRequest::getStartTime() const {
    return m_start_time;
}
void OAIGetTraceSummariesRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetTraceSummariesRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetTraceSummariesRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetTraceSummariesRequest::getEndTime() const {
    return m_end_time;
}
void OAIGetTraceSummariesRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetTraceSummariesRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetTraceSummariesRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAITimeRangeType OAIGetTraceSummariesRequest::getTimeRangeType() const {
    return m_time_range_type;
}
void OAIGetTraceSummariesRequest::setTimeRangeType(const OAITimeRangeType &time_range_type) {
    m_time_range_type = time_range_type;
    m_time_range_type_isSet = true;
}

bool OAIGetTraceSummariesRequest::is_time_range_type_Set() const{
    return m_time_range_type_isSet;
}

bool OAIGetTraceSummariesRequest::is_time_range_type_Valid() const{
    return m_time_range_type_isValid;
}

bool OAIGetTraceSummariesRequest::getSampling() const {
    return m_sampling;
}
void OAIGetTraceSummariesRequest::setSampling(const bool &sampling) {
    m_sampling = sampling;
    m_sampling_isSet = true;
}

bool OAIGetTraceSummariesRequest::is_sampling_Set() const{
    return m_sampling_isSet;
}

bool OAIGetTraceSummariesRequest::is_sampling_Valid() const{
    return m_sampling_isValid;
}

OAIGetTraceSummariesRequest_SamplingStrategy OAIGetTraceSummariesRequest::getSamplingStrategy() const {
    return m_sampling_strategy;
}
void OAIGetTraceSummariesRequest::setSamplingStrategy(const OAIGetTraceSummariesRequest_SamplingStrategy &sampling_strategy) {
    m_sampling_strategy = sampling_strategy;
    m_sampling_strategy_isSet = true;
}

bool OAIGetTraceSummariesRequest::is_sampling_strategy_Set() const{
    return m_sampling_strategy_isSet;
}

bool OAIGetTraceSummariesRequest::is_sampling_strategy_Valid() const{
    return m_sampling_strategy_isValid;
}

QString OAIGetTraceSummariesRequest::getFilterExpression() const {
    return m_filter_expression;
}
void OAIGetTraceSummariesRequest::setFilterExpression(const QString &filter_expression) {
    m_filter_expression = filter_expression;
    m_filter_expression_isSet = true;
}

bool OAIGetTraceSummariesRequest::is_filter_expression_Set() const{
    return m_filter_expression_isSet;
}

bool OAIGetTraceSummariesRequest::is_filter_expression_Valid() const{
    return m_filter_expression_isValid;
}

QString OAIGetTraceSummariesRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetTraceSummariesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetTraceSummariesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetTraceSummariesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetTraceSummariesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTraceSummariesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
