/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_edges_isSet = false;
    m_edges_isValid = false;

    m_summary_statistics_isSet = false;
    m_summary_statistics_isValid = false;

    m_duration_histogram_isSet = false;
    m_duration_histogram_isValid = false;

    m_response_time_histogram_isSet = false;
    m_response_time_histogram_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceId")]);
    m_reference_id_isSet = !json[QString("ReferenceId")].isNull() && m_reference_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("Names")]);
    m_names_isSet = !json[QString("Names")].isNull() && m_names_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("Root")]);
    m_root_isSet = !json[QString("Root")].isNull() && m_root_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_edges_isValid = ::OpenAPI::fromJsonValue(m_edges, json[QString("Edges")]);
    m_edges_isSet = !json[QString("Edges")].isNull() && m_edges_isValid;

    m_summary_statistics_isValid = ::OpenAPI::fromJsonValue(m_summary_statistics, json[QString("SummaryStatistics")]);
    m_summary_statistics_isSet = !json[QString("SummaryStatistics")].isNull() && m_summary_statistics_isValid;

    m_duration_histogram_isValid = ::OpenAPI::fromJsonValue(m_duration_histogram, json[QString("DurationHistogram")]);
    m_duration_histogram_isSet = !json[QString("DurationHistogram")].isNull() && m_duration_histogram_isValid;

    m_response_time_histogram_isValid = ::OpenAPI::fromJsonValue(m_response_time_histogram, json[QString("ResponseTimeHistogram")]);
    m_response_time_histogram_isSet = !json[QString("ResponseTimeHistogram")].isNull() && m_response_time_histogram_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_names.isSet()) {
        obj.insert(QString("Names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_root_isSet) {
        obj.insert(QString("Root"), ::OpenAPI::toJsonValue(m_root));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_edges.isSet()) {
        obj.insert(QString("Edges"), ::OpenAPI::toJsonValue(m_edges));
    }
    if (m_summary_statistics.isSet()) {
        obj.insert(QString("SummaryStatistics"), ::OpenAPI::toJsonValue(m_summary_statistics));
    }
    if (m_duration_histogram.isSet()) {
        obj.insert(QString("DurationHistogram"), ::OpenAPI::toJsonValue(m_duration_histogram));
    }
    if (m_response_time_histogram.isSet()) {
        obj.insert(QString("ResponseTimeHistogram"), ::OpenAPI::toJsonValue(m_response_time_histogram));
    }
    return obj;
}

qint32 OAIService::getReferenceId() const {
    return m_reference_id;
}
void OAIService::setReferenceId(const qint32 &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIService::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIService::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIService::getNames() const {
    return m_names;
}
void OAIService::setNames(const QList &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIService::is_names_Set() const{
    return m_names_isSet;
}

bool OAIService::is_names_Valid() const{
    return m_names_isValid;
}

bool OAIService::getRoot() const {
    return m_root;
}
void OAIService::setRoot(const bool &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIService::is_root_Set() const{
    return m_root_isSet;
}

bool OAIService::is_root_Valid() const{
    return m_root_isValid;
}

QString OAIService::getAccountId() const {
    return m_account_id;
}
void OAIService::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIService::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIService::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIService::getType() const {
    return m_type;
}
void OAIService::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIService::is_type_Set() const{
    return m_type_isSet;
}

bool OAIService::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIService::getState() const {
    return m_state;
}
void OAIService::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIService::is_state_Set() const{
    return m_state_isSet;
}

bool OAIService::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIService::getStartTime() const {
    return m_start_time;
}
void OAIService::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIService::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIService::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIService::getEndTime() const {
    return m_end_time;
}
void OAIService::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIService::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIService::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList OAIService::getEdges() const {
    return m_edges;
}
void OAIService::setEdges(const QList &edges) {
    m_edges = edges;
    m_edges_isSet = true;
}

bool OAIService::is_edges_Set() const{
    return m_edges_isSet;
}

bool OAIService::is_edges_Valid() const{
    return m_edges_isValid;
}

OAIService_SummaryStatistics OAIService::getSummaryStatistics() const {
    return m_summary_statistics;
}
void OAIService::setSummaryStatistics(const OAIService_SummaryStatistics &summary_statistics) {
    m_summary_statistics = summary_statistics;
    m_summary_statistics_isSet = true;
}

bool OAIService::is_summary_statistics_Set() const{
    return m_summary_statistics_isSet;
}

bool OAIService::is_summary_statistics_Valid() const{
    return m_summary_statistics_isValid;
}

QList OAIService::getDurationHistogram() const {
    return m_duration_histogram;
}
void OAIService::setDurationHistogram(const QList &duration_histogram) {
    m_duration_histogram = duration_histogram;
    m_duration_histogram_isSet = true;
}

bool OAIService::is_duration_histogram_Set() const{
    return m_duration_histogram_isSet;
}

bool OAIService::is_duration_histogram_Valid() const{
    return m_duration_histogram_isValid;
}

QList OAIService::getResponseTimeHistogram() const {
    return m_response_time_histogram;
}
void OAIService::setResponseTimeHistogram(const QList &response_time_histogram) {
    m_response_time_histogram = response_time_histogram;
    m_response_time_histogram_isSet = true;
}

bool OAIService::is_response_time_histogram_Set() const{
    return m_response_time_histogram_isSet;
}

bool OAIService::is_response_time_histogram_Valid() const{
    return m_response_time_histogram_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
