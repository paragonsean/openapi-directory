/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupSummary::OAIGroupSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupSummary::OAIGroupSummary() {
    this->initializeModel();
}

OAIGroupSummary::~OAIGroupSummary() {}

void OAIGroupSummary::initializeModel() {

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_group_arn_isSet = false;
    m_group_arn_isValid = false;

    m_filter_expression_isSet = false;
    m_filter_expression_isValid = false;

    m_insights_configuration_isSet = false;
    m_insights_configuration_isValid = false;
}

void OAIGroupSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupSummary::fromJsonObject(QJsonObject json) {

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;

    m_group_arn_isValid = ::OpenAPI::fromJsonValue(m_group_arn, json[QString("GroupARN")]);
    m_group_arn_isSet = !json[QString("GroupARN")].isNull() && m_group_arn_isValid;

    m_filter_expression_isValid = ::OpenAPI::fromJsonValue(m_filter_expression, json[QString("FilterExpression")]);
    m_filter_expression_isSet = !json[QString("FilterExpression")].isNull() && m_filter_expression_isValid;

    m_insights_configuration_isValid = ::OpenAPI::fromJsonValue(m_insights_configuration, json[QString("InsightsConfiguration")]);
    m_insights_configuration_isSet = !json[QString("InsightsConfiguration")].isNull() && m_insights_configuration_isValid;
}

QString OAIGroupSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_group_arn_isSet) {
        obj.insert(QString("GroupARN"), ::OpenAPI::toJsonValue(m_group_arn));
    }
    if (m_filter_expression_isSet) {
        obj.insert(QString("FilterExpression"), ::OpenAPI::toJsonValue(m_filter_expression));
    }
    if (m_insights_configuration.isSet()) {
        obj.insert(QString("InsightsConfiguration"), ::OpenAPI::toJsonValue(m_insights_configuration));
    }
    return obj;
}

QString OAIGroupSummary::getGroupName() const {
    return m_group_name;
}
void OAIGroupSummary::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIGroupSummary::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIGroupSummary::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIGroupSummary::getGroupArn() const {
    return m_group_arn;
}
void OAIGroupSummary::setGroupArn(const QString &group_arn) {
    m_group_arn = group_arn;
    m_group_arn_isSet = true;
}

bool OAIGroupSummary::is_group_arn_Set() const{
    return m_group_arn_isSet;
}

bool OAIGroupSummary::is_group_arn_Valid() const{
    return m_group_arn_isValid;
}

QString OAIGroupSummary::getFilterExpression() const {
    return m_filter_expression;
}
void OAIGroupSummary::setFilterExpression(const QString &filter_expression) {
    m_filter_expression = filter_expression;
    m_filter_expression_isSet = true;
}

bool OAIGroupSummary::is_filter_expression_Set() const{
    return m_filter_expression_isSet;
}

bool OAIGroupSummary::is_filter_expression_Valid() const{
    return m_filter_expression_isValid;
}

OAIGroupSummary_InsightsConfiguration OAIGroupSummary::getInsightsConfiguration() const {
    return m_insights_configuration;
}
void OAIGroupSummary::setInsightsConfiguration(const OAIGroupSummary_InsightsConfiguration &insights_configuration) {
    m_insights_configuration = insights_configuration;
    m_insights_configuration_isSet = true;
}

bool OAIGroupSummary::is_insights_configuration_Set() const{
    return m_insights_configuration_isSet;
}

bool OAIGroupSummary::is_insights_configuration_Valid() const{
    return m_insights_configuration_isValid;
}

bool OAIGroupSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insights_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
