/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTimeSeriesServiceStatistics_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTimeSeriesServiceStatistics_request::OAIGetTimeSeriesServiceStatistics_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTimeSeriesServiceStatistics_request::OAIGetTimeSeriesServiceStatistics_request() {
    this->initializeModel();
}

OAIGetTimeSeriesServiceStatistics_request::~OAIGetTimeSeriesServiceStatistics_request() {}

void OAIGetTimeSeriesServiceStatistics_request::initializeModel() {

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_group_arn_isSet = false;
    m_group_arn_isValid = false;

    m_entity_selector_expression_isSet = false;
    m_entity_selector_expression_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_forecast_statistics_isSet = false;
    m_forecast_statistics_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetTimeSeriesServiceStatistics_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTimeSeriesServiceStatistics_request::fromJsonObject(QJsonObject json) {

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;

    m_group_arn_isValid = ::OpenAPI::fromJsonValue(m_group_arn, json[QString("GroupARN")]);
    m_group_arn_isSet = !json[QString("GroupARN")].isNull() && m_group_arn_isValid;

    m_entity_selector_expression_isValid = ::OpenAPI::fromJsonValue(m_entity_selector_expression, json[QString("EntitySelectorExpression")]);
    m_entity_selector_expression_isSet = !json[QString("EntitySelectorExpression")].isNull() && m_entity_selector_expression_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_forecast_statistics_isValid = ::OpenAPI::fromJsonValue(m_forecast_statistics, json[QString("ForecastStatistics")]);
    m_forecast_statistics_isSet = !json[QString("ForecastStatistics")].isNull() && m_forecast_statistics_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetTimeSeriesServiceStatistics_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTimeSeriesServiceStatistics_request::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_group_arn_isSet) {
        obj.insert(QString("GroupARN"), ::OpenAPI::toJsonValue(m_group_arn));
    }
    if (m_entity_selector_expression_isSet) {
        obj.insert(QString("EntitySelectorExpression"), ::OpenAPI::toJsonValue(m_entity_selector_expression));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_forecast_statistics_isSet) {
        obj.insert(QString("ForecastStatistics"), ::OpenAPI::toJsonValue(m_forecast_statistics));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QDateTime OAIGetTimeSeriesServiceStatistics_request::getStartTime() const {
    return m_start_time;
}
void OAIGetTimeSeriesServiceStatistics_request::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetTimeSeriesServiceStatistics_request::getEndTime() const {
    return m_end_time;
}
void OAIGetTimeSeriesServiceStatistics_request::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGetTimeSeriesServiceStatistics_request::getGroupName() const {
    return m_group_name;
}
void OAIGetTimeSeriesServiceStatistics_request::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIGetTimeSeriesServiceStatistics_request::getGroupArn() const {
    return m_group_arn;
}
void OAIGetTimeSeriesServiceStatistics_request::setGroupArn(const QString &group_arn) {
    m_group_arn = group_arn;
    m_group_arn_isSet = true;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_group_arn_Set() const{
    return m_group_arn_isSet;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_group_arn_Valid() const{
    return m_group_arn_isValid;
}

QString OAIGetTimeSeriesServiceStatistics_request::getEntitySelectorExpression() const {
    return m_entity_selector_expression;
}
void OAIGetTimeSeriesServiceStatistics_request::setEntitySelectorExpression(const QString &entity_selector_expression) {
    m_entity_selector_expression = entity_selector_expression;
    m_entity_selector_expression_isSet = true;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_entity_selector_expression_Set() const{
    return m_entity_selector_expression_isSet;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_entity_selector_expression_Valid() const{
    return m_entity_selector_expression_isValid;
}

qint32 OAIGetTimeSeriesServiceStatistics_request::getPeriod() const {
    return m_period;
}
void OAIGetTimeSeriesServiceStatistics_request::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_period_Valid() const{
    return m_period_isValid;
}

bool OAIGetTimeSeriesServiceStatistics_request::isForecastStatistics() const {
    return m_forecast_statistics;
}
void OAIGetTimeSeriesServiceStatistics_request::setForecastStatistics(const bool &forecast_statistics) {
    m_forecast_statistics = forecast_statistics;
    m_forecast_statistics_isSet = true;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_forecast_statistics_Set() const{
    return m_forecast_statistics_isSet;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_forecast_statistics_Valid() const{
    return m_forecast_statistics_isValid;
}

QString OAIGetTimeSeriesServiceStatistics_request::getNextToken() const {
    return m_next_token;
}
void OAIGetTimeSeriesServiceStatistics_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetTimeSeriesServiceStatistics_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetTimeSeriesServiceStatistics_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_selector_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_statistics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTimeSeriesServiceStatistics_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
