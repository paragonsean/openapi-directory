/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEdge.h
 *
 * Information about a connection between two services. An edge can be a synchronous connection, such as typical call between client and service, or an asynchronous link, such as a Lambda function which retrieves an event from an SNS queue.
 */

#ifndef OAIEdge_H
#define OAIEdge_H

#include <QJsonObject>

#include "OAIEdge_SummaryStatistics.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEdge_SummaryStatistics;

class OAIEdge : public OAIObject {
public:
    OAIEdge();
    OAIEdge(QString json);
    ~OAIEdge() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getReferenceId() const;
    void setReferenceId(const qint32 &reference_id);
    bool is_reference_id_Set() const;
    bool is_reference_id_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    OAIEdge_SummaryStatistics getSummaryStatistics() const;
    void setSummaryStatistics(const OAIEdge_SummaryStatistics &summary_statistics);
    bool is_summary_statistics_Set() const;
    bool is_summary_statistics_Valid() const;

    QList getResponseTimeHistogram() const;
    void setResponseTimeHistogram(const QList &response_time_histogram);
    bool is_response_time_histogram_Set() const;
    bool is_response_time_histogram_Valid() const;

    QList getAliases() const;
    void setAliases(const QList &aliases);
    bool is_aliases_Set() const;
    bool is_aliases_Valid() const;

    QString getEdgeType() const;
    void setEdgeType(const QString &edge_type);
    bool is_edge_type_Set() const;
    bool is_edge_type_Valid() const;

    QList getReceivedEventAgeHistogram() const;
    void setReceivedEventAgeHistogram(const QList &received_event_age_histogram);
    bool is_received_event_age_histogram_Set() const;
    bool is_received_event_age_histogram_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_reference_id;
    bool m_reference_id_isSet;
    bool m_reference_id_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    OAIEdge_SummaryStatistics m_summary_statistics;
    bool m_summary_statistics_isSet;
    bool m_summary_statistics_isValid;

    QList m_response_time_histogram;
    bool m_response_time_histogram_isSet;
    bool m_response_time_histogram_isValid;

    QList m_aliases;
    bool m_aliases_isSet;
    bool m_aliases_isValid;

    QString m_edge_type;
    bool m_edge_type_isSet;
    bool m_edge_type_isValid;

    QList m_received_event_age_histogram;
    bool m_received_event_age_histogram_isSet;
    bool m_received_event_age_histogram_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEdge)

#endif // OAIEdge_H
