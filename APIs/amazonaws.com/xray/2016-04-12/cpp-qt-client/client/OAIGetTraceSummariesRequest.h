/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTraceSummariesRequest.h
 *
 * 
 */

#ifndef OAIGetTraceSummariesRequest_H
#define OAIGetTraceSummariesRequest_H

#include <QJsonObject>

#include "OAIGetTraceSummariesRequest_SamplingStrategy.h"
#include "OAITimeRangeType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTraceSummariesRequest_SamplingStrategy;

class OAIGetTraceSummariesRequest : public OAIObject {
public:
    OAIGetTraceSummariesRequest();
    OAIGetTraceSummariesRequest(QString json);
    ~OAIGetTraceSummariesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    OAITimeRangeType getTimeRangeType() const;
    void setTimeRangeType(const OAITimeRangeType &time_range_type);
    bool is_time_range_type_Set() const;
    bool is_time_range_type_Valid() const;

    bool getSampling() const;
    void setSampling(const bool &sampling);
    bool is_sampling_Set() const;
    bool is_sampling_Valid() const;

    OAIGetTraceSummariesRequest_SamplingStrategy getSamplingStrategy() const;
    void setSamplingStrategy(const OAIGetTraceSummariesRequest_SamplingStrategy &sampling_strategy);
    bool is_sampling_strategy_Set() const;
    bool is_sampling_strategy_Valid() const;

    QString getFilterExpression() const;
    void setFilterExpression(const QString &filter_expression);
    bool is_filter_expression_Set() const;
    bool is_filter_expression_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    OAITimeRangeType m_time_range_type;
    bool m_time_range_type_isSet;
    bool m_time_range_type_isValid;

    bool m_sampling;
    bool m_sampling_isSet;
    bool m_sampling_isValid;

    OAIGetTraceSummariesRequest_SamplingStrategy m_sampling_strategy;
    bool m_sampling_strategy_isSet;
    bool m_sampling_strategy_isValid;

    QString m_filter_expression;
    bool m_filter_expression_isSet;
    bool m_filter_expression_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTraceSummariesRequest)

#endif // OAIGetTraceSummariesRequest_H
