/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutTelemetryRecordsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutTelemetryRecordsRequest::OAIPutTelemetryRecordsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutTelemetryRecordsRequest::OAIPutTelemetryRecordsRequest() {
    this->initializeModel();
}

OAIPutTelemetryRecordsRequest::~OAIPutTelemetryRecordsRequest() {}

void OAIPutTelemetryRecordsRequest::initializeModel() {

    m_telemetry_records_isSet = false;
    m_telemetry_records_isValid = false;

    m_ec2_instance_id_isSet = false;
    m_ec2_instance_id_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIPutTelemetryRecordsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutTelemetryRecordsRequest::fromJsonObject(QJsonObject json) {

    m_telemetry_records_isValid = ::OpenAPI::fromJsonValue(m_telemetry_records, json[QString("TelemetryRecords")]);
    m_telemetry_records_isSet = !json[QString("TelemetryRecords")].isNull() && m_telemetry_records_isValid;

    m_ec2_instance_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_id, json[QString("EC2InstanceId")]);
    m_ec2_instance_id_isSet = !json[QString("EC2InstanceId")].isNull() && m_ec2_instance_id_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("Hostname")]);
    m_hostname_isSet = !json[QString("Hostname")].isNull() && m_hostname_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;
}

QString OAIPutTelemetryRecordsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutTelemetryRecordsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_telemetry_records.isSet()) {
        obj.insert(QString("TelemetryRecords"), ::OpenAPI::toJsonValue(m_telemetry_records));
    }
    if (m_ec2_instance_id_isSet) {
        obj.insert(QString("EC2InstanceId"), ::OpenAPI::toJsonValue(m_ec2_instance_id));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("Hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QList OAIPutTelemetryRecordsRequest::getTelemetryRecords() const {
    return m_telemetry_records;
}
void OAIPutTelemetryRecordsRequest::setTelemetryRecords(const QList &telemetry_records) {
    m_telemetry_records = telemetry_records;
    m_telemetry_records_isSet = true;
}

bool OAIPutTelemetryRecordsRequest::is_telemetry_records_Set() const{
    return m_telemetry_records_isSet;
}

bool OAIPutTelemetryRecordsRequest::is_telemetry_records_Valid() const{
    return m_telemetry_records_isValid;
}

QString OAIPutTelemetryRecordsRequest::getEc2InstanceId() const {
    return m_ec2_instance_id;
}
void OAIPutTelemetryRecordsRequest::setEc2InstanceId(const QString &ec2_instance_id) {
    m_ec2_instance_id = ec2_instance_id;
    m_ec2_instance_id_isSet = true;
}

bool OAIPutTelemetryRecordsRequest::is_ec2_instance_id_Set() const{
    return m_ec2_instance_id_isSet;
}

bool OAIPutTelemetryRecordsRequest::is_ec2_instance_id_Valid() const{
    return m_ec2_instance_id_isValid;
}

QString OAIPutTelemetryRecordsRequest::getHostname() const {
    return m_hostname;
}
void OAIPutTelemetryRecordsRequest::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIPutTelemetryRecordsRequest::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIPutTelemetryRecordsRequest::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIPutTelemetryRecordsRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIPutTelemetryRecordsRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIPutTelemetryRecordsRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIPutTelemetryRecordsRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIPutTelemetryRecordsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_telemetry_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutTelemetryRecordsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_telemetry_records_isValid && true;
}

} // namespace OpenAPI
