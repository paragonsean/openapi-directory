/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelemetryRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITelemetryRecord::OAITelemetryRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITelemetryRecord::OAITelemetryRecord() {
    this->initializeModel();
}

OAITelemetryRecord::~OAITelemetryRecord() {}

void OAITelemetryRecord::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_segments_received_count_isSet = false;
    m_segments_received_count_isValid = false;

    m_segments_sent_count_isSet = false;
    m_segments_sent_count_isValid = false;

    m_segments_spillover_count_isSet = false;
    m_segments_spillover_count_isValid = false;

    m_segments_rejected_count_isSet = false;
    m_segments_rejected_count_isValid = false;

    m_backend_connection_errors_isSet = false;
    m_backend_connection_errors_isValid = false;
}

void OAITelemetryRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITelemetryRecord::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_segments_received_count_isValid = ::OpenAPI::fromJsonValue(m_segments_received_count, json[QString("SegmentsReceivedCount")]);
    m_segments_received_count_isSet = !json[QString("SegmentsReceivedCount")].isNull() && m_segments_received_count_isValid;

    m_segments_sent_count_isValid = ::OpenAPI::fromJsonValue(m_segments_sent_count, json[QString("SegmentsSentCount")]);
    m_segments_sent_count_isSet = !json[QString("SegmentsSentCount")].isNull() && m_segments_sent_count_isValid;

    m_segments_spillover_count_isValid = ::OpenAPI::fromJsonValue(m_segments_spillover_count, json[QString("SegmentsSpilloverCount")]);
    m_segments_spillover_count_isSet = !json[QString("SegmentsSpilloverCount")].isNull() && m_segments_spillover_count_isValid;

    m_segments_rejected_count_isValid = ::OpenAPI::fromJsonValue(m_segments_rejected_count, json[QString("SegmentsRejectedCount")]);
    m_segments_rejected_count_isSet = !json[QString("SegmentsRejectedCount")].isNull() && m_segments_rejected_count_isValid;

    m_backend_connection_errors_isValid = ::OpenAPI::fromJsonValue(m_backend_connection_errors, json[QString("BackendConnectionErrors")]);
    m_backend_connection_errors_isSet = !json[QString("BackendConnectionErrors")].isNull() && m_backend_connection_errors_isValid;
}

QString OAITelemetryRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITelemetryRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_segments_received_count_isSet) {
        obj.insert(QString("SegmentsReceivedCount"), ::OpenAPI::toJsonValue(m_segments_received_count));
    }
    if (m_segments_sent_count_isSet) {
        obj.insert(QString("SegmentsSentCount"), ::OpenAPI::toJsonValue(m_segments_sent_count));
    }
    if (m_segments_spillover_count_isSet) {
        obj.insert(QString("SegmentsSpilloverCount"), ::OpenAPI::toJsonValue(m_segments_spillover_count));
    }
    if (m_segments_rejected_count_isSet) {
        obj.insert(QString("SegmentsRejectedCount"), ::OpenAPI::toJsonValue(m_segments_rejected_count));
    }
    if (m_backend_connection_errors.isSet()) {
        obj.insert(QString("BackendConnectionErrors"), ::OpenAPI::toJsonValue(m_backend_connection_errors));
    }
    return obj;
}

QDateTime OAITelemetryRecord::getTimestamp() const {
    return m_timestamp;
}
void OAITelemetryRecord::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITelemetryRecord::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITelemetryRecord::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAITelemetryRecord::getSegmentsReceivedCount() const {
    return m_segments_received_count;
}
void OAITelemetryRecord::setSegmentsReceivedCount(const qint32 &segments_received_count) {
    m_segments_received_count = segments_received_count;
    m_segments_received_count_isSet = true;
}

bool OAITelemetryRecord::is_segments_received_count_Set() const{
    return m_segments_received_count_isSet;
}

bool OAITelemetryRecord::is_segments_received_count_Valid() const{
    return m_segments_received_count_isValid;
}

qint32 OAITelemetryRecord::getSegmentsSentCount() const {
    return m_segments_sent_count;
}
void OAITelemetryRecord::setSegmentsSentCount(const qint32 &segments_sent_count) {
    m_segments_sent_count = segments_sent_count;
    m_segments_sent_count_isSet = true;
}

bool OAITelemetryRecord::is_segments_sent_count_Set() const{
    return m_segments_sent_count_isSet;
}

bool OAITelemetryRecord::is_segments_sent_count_Valid() const{
    return m_segments_sent_count_isValid;
}

qint32 OAITelemetryRecord::getSegmentsSpilloverCount() const {
    return m_segments_spillover_count;
}
void OAITelemetryRecord::setSegmentsSpilloverCount(const qint32 &segments_spillover_count) {
    m_segments_spillover_count = segments_spillover_count;
    m_segments_spillover_count_isSet = true;
}

bool OAITelemetryRecord::is_segments_spillover_count_Set() const{
    return m_segments_spillover_count_isSet;
}

bool OAITelemetryRecord::is_segments_spillover_count_Valid() const{
    return m_segments_spillover_count_isValid;
}

qint32 OAITelemetryRecord::getSegmentsRejectedCount() const {
    return m_segments_rejected_count;
}
void OAITelemetryRecord::setSegmentsRejectedCount(const qint32 &segments_rejected_count) {
    m_segments_rejected_count = segments_rejected_count;
    m_segments_rejected_count_isSet = true;
}

bool OAITelemetryRecord::is_segments_rejected_count_Set() const{
    return m_segments_rejected_count_isSet;
}

bool OAITelemetryRecord::is_segments_rejected_count_Valid() const{
    return m_segments_rejected_count_isValid;
}

OAITelemetryRecord_BackendConnectionErrors OAITelemetryRecord::getBackendConnectionErrors() const {
    return m_backend_connection_errors;
}
void OAITelemetryRecord::setBackendConnectionErrors(const OAITelemetryRecord_BackendConnectionErrors &backend_connection_errors) {
    m_backend_connection_errors = backend_connection_errors;
    m_backend_connection_errors_isSet = true;
}

bool OAITelemetryRecord::is_backend_connection_errors_Set() const{
    return m_backend_connection_errors_isSet;
}

bool OAITelemetryRecord::is_backend_connection_errors_Valid() const{
    return m_backend_connection_errors_isValid;
}

bool OAITelemetryRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_received_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_sent_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_spillover_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_rejected_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_connection_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITelemetryRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamp_isValid && true;
}

} // namespace OpenAPI
