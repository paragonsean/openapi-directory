/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseTimeRootCauseEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseTimeRootCauseEntity::OAIResponseTimeRootCauseEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseTimeRootCauseEntity::OAIResponseTimeRootCauseEntity() {
    this->initializeModel();
}

OAIResponseTimeRootCauseEntity::~OAIResponseTimeRootCauseEntity() {}

void OAIResponseTimeRootCauseEntity::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_coverage_isSet = false;
    m_coverage_isValid = false;

    m_remote_isSet = false;
    m_remote_isValid = false;
}

void OAIResponseTimeRootCauseEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseTimeRootCauseEntity::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_coverage_isValid = ::OpenAPI::fromJsonValue(m_coverage, json[QString("Coverage")]);
    m_coverage_isSet = !json[QString("Coverage")].isNull() && m_coverage_isValid;

    m_remote_isValid = ::OpenAPI::fromJsonValue(m_remote, json[QString("Remote")]);
    m_remote_isSet = !json[QString("Remote")].isNull() && m_remote_isValid;
}

QString OAIResponseTimeRootCauseEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseTimeRootCauseEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_coverage_isSet) {
        obj.insert(QString("Coverage"), ::OpenAPI::toJsonValue(m_coverage));
    }
    if (m_remote_isSet) {
        obj.insert(QString("Remote"), ::OpenAPI::toJsonValue(m_remote));
    }
    return obj;
}

QString OAIResponseTimeRootCauseEntity::getName() const {
    return m_name;
}
void OAIResponseTimeRootCauseEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResponseTimeRootCauseEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResponseTimeRootCauseEntity::is_name_Valid() const{
    return m_name_isValid;
}

double OAIResponseTimeRootCauseEntity::getCoverage() const {
    return m_coverage;
}
void OAIResponseTimeRootCauseEntity::setCoverage(const double &coverage) {
    m_coverage = coverage;
    m_coverage_isSet = true;
}

bool OAIResponseTimeRootCauseEntity::is_coverage_Set() const{
    return m_coverage_isSet;
}

bool OAIResponseTimeRootCauseEntity::is_coverage_Valid() const{
    return m_coverage_isValid;
}

bool OAIResponseTimeRootCauseEntity::getRemote() const {
    return m_remote;
}
void OAIResponseTimeRootCauseEntity::setRemote(const bool &remote) {
    m_remote = remote;
    m_remote_isSet = true;
}

bool OAIResponseTimeRootCauseEntity::is_remote_Set() const{
    return m_remote_isSet;
}

bool OAIResponseTimeRootCauseEntity::is_remote_Valid() const{
    return m_remote_isValid;
}

bool OAIResponseTimeRootCauseEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseTimeRootCauseEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
