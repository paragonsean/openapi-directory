/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdgeStatistics_ErrorStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdgeStatistics_ErrorStatistics::OAIEdgeStatistics_ErrorStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdgeStatistics_ErrorStatistics::OAIEdgeStatistics_ErrorStatistics() {
    this->initializeModel();
}

OAIEdgeStatistics_ErrorStatistics::~OAIEdgeStatistics_ErrorStatistics() {}

void OAIEdgeStatistics_ErrorStatistics::initializeModel() {

    m_throttle_count_isSet = false;
    m_throttle_count_isValid = false;

    m_other_count_isSet = false;
    m_other_count_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIEdgeStatistics_ErrorStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdgeStatistics_ErrorStatistics::fromJsonObject(QJsonObject json) {

    m_throttle_count_isValid = ::OpenAPI::fromJsonValue(m_throttle_count, json[QString("ThrottleCount")]);
    m_throttle_count_isSet = !json[QString("ThrottleCount")].isNull() && m_throttle_count_isValid;

    m_other_count_isValid = ::OpenAPI::fromJsonValue(m_other_count, json[QString("OtherCount")]);
    m_other_count_isSet = !json[QString("OtherCount")].isNull() && m_other_count_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;
}

QString OAIEdgeStatistics_ErrorStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdgeStatistics_ErrorStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_throttle_count_isSet) {
        obj.insert(QString("ThrottleCount"), ::OpenAPI::toJsonValue(m_throttle_count));
    }
    if (m_other_count_isSet) {
        obj.insert(QString("OtherCount"), ::OpenAPI::toJsonValue(m_other_count));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint32 OAIEdgeStatistics_ErrorStatistics::getThrottleCount() const {
    return m_throttle_count;
}
void OAIEdgeStatistics_ErrorStatistics::setThrottleCount(const qint32 &throttle_count) {
    m_throttle_count = throttle_count;
    m_throttle_count_isSet = true;
}

bool OAIEdgeStatistics_ErrorStatistics::is_throttle_count_Set() const{
    return m_throttle_count_isSet;
}

bool OAIEdgeStatistics_ErrorStatistics::is_throttle_count_Valid() const{
    return m_throttle_count_isValid;
}

qint32 OAIEdgeStatistics_ErrorStatistics::getOtherCount() const {
    return m_other_count;
}
void OAIEdgeStatistics_ErrorStatistics::setOtherCount(const qint32 &other_count) {
    m_other_count = other_count;
    m_other_count_isSet = true;
}

bool OAIEdgeStatistics_ErrorStatistics::is_other_count_Set() const{
    return m_other_count_isSet;
}

bool OAIEdgeStatistics_ErrorStatistics::is_other_count_Valid() const{
    return m_other_count_isValid;
}

qint32 OAIEdgeStatistics_ErrorStatistics::getTotalCount() const {
    return m_total_count;
}
void OAIEdgeStatistics_ErrorStatistics::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIEdgeStatistics_ErrorStatistics::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIEdgeStatistics_ErrorStatistics::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIEdgeStatistics_ErrorStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_throttle_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdgeStatistics_ErrorStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
