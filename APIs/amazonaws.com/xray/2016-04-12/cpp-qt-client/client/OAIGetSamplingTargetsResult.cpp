/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSamplingTargetsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSamplingTargetsResult::OAIGetSamplingTargetsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSamplingTargetsResult::OAIGetSamplingTargetsResult() {
    this->initializeModel();
}

OAIGetSamplingTargetsResult::~OAIGetSamplingTargetsResult() {}

void OAIGetSamplingTargetsResult::initializeModel() {

    m_sampling_target_documents_isSet = false;
    m_sampling_target_documents_isValid = false;

    m_last_rule_modification_isSet = false;
    m_last_rule_modification_isValid = false;

    m_unprocessed_statistics_isSet = false;
    m_unprocessed_statistics_isValid = false;
}

void OAIGetSamplingTargetsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSamplingTargetsResult::fromJsonObject(QJsonObject json) {

    m_sampling_target_documents_isValid = ::OpenAPI::fromJsonValue(m_sampling_target_documents, json[QString("SamplingTargetDocuments")]);
    m_sampling_target_documents_isSet = !json[QString("SamplingTargetDocuments")].isNull() && m_sampling_target_documents_isValid;

    m_last_rule_modification_isValid = ::OpenAPI::fromJsonValue(m_last_rule_modification, json[QString("LastRuleModification")]);
    m_last_rule_modification_isSet = !json[QString("LastRuleModification")].isNull() && m_last_rule_modification_isValid;

    m_unprocessed_statistics_isValid = ::OpenAPI::fromJsonValue(m_unprocessed_statistics, json[QString("UnprocessedStatistics")]);
    m_unprocessed_statistics_isSet = !json[QString("UnprocessedStatistics")].isNull() && m_unprocessed_statistics_isValid;
}

QString OAIGetSamplingTargetsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSamplingTargetsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_sampling_target_documents.isSet()) {
        obj.insert(QString("SamplingTargetDocuments"), ::OpenAPI::toJsonValue(m_sampling_target_documents));
    }
    if (m_last_rule_modification_isSet) {
        obj.insert(QString("LastRuleModification"), ::OpenAPI::toJsonValue(m_last_rule_modification));
    }
    if (m_unprocessed_statistics.isSet()) {
        obj.insert(QString("UnprocessedStatistics"), ::OpenAPI::toJsonValue(m_unprocessed_statistics));
    }
    return obj;
}

QList OAIGetSamplingTargetsResult::getSamplingTargetDocuments() const {
    return m_sampling_target_documents;
}
void OAIGetSamplingTargetsResult::setSamplingTargetDocuments(const QList &sampling_target_documents) {
    m_sampling_target_documents = sampling_target_documents;
    m_sampling_target_documents_isSet = true;
}

bool OAIGetSamplingTargetsResult::is_sampling_target_documents_Set() const{
    return m_sampling_target_documents_isSet;
}

bool OAIGetSamplingTargetsResult::is_sampling_target_documents_Valid() const{
    return m_sampling_target_documents_isValid;
}

QDateTime OAIGetSamplingTargetsResult::getLastRuleModification() const {
    return m_last_rule_modification;
}
void OAIGetSamplingTargetsResult::setLastRuleModification(const QDateTime &last_rule_modification) {
    m_last_rule_modification = last_rule_modification;
    m_last_rule_modification_isSet = true;
}

bool OAIGetSamplingTargetsResult::is_last_rule_modification_Set() const{
    return m_last_rule_modification_isSet;
}

bool OAIGetSamplingTargetsResult::is_last_rule_modification_Valid() const{
    return m_last_rule_modification_isValid;
}

QList OAIGetSamplingTargetsResult::getUnprocessedStatistics() const {
    return m_unprocessed_statistics;
}
void OAIGetSamplingTargetsResult::setUnprocessedStatistics(const QList &unprocessed_statistics) {
    m_unprocessed_statistics = unprocessed_statistics;
    m_unprocessed_statistics_isSet = true;
}

bool OAIGetSamplingTargetsResult::is_unprocessed_statistics_Set() const{
    return m_unprocessed_statistics_isSet;
}

bool OAIGetSamplingTargetsResult::is_unprocessed_statistics_Valid() const{
    return m_unprocessed_statistics_isValid;
}

bool OAIGetSamplingTargetsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sampling_target_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_rule_modification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unprocessed_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSamplingTargetsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
