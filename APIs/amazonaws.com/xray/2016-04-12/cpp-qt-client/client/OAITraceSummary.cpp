/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraceSummary::OAITraceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraceSummary::OAITraceSummary() {
    this->initializeModel();
}

OAITraceSummary::~OAITraceSummary() {}

void OAITraceSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_response_time_isSet = false;
    m_response_time_isValid = false;

    m_has_fault_isSet = false;
    m_has_fault_isValid = false;

    m_has_error_isSet = false;
    m_has_error_isValid = false;

    m_has_throttle_isSet = false;
    m_has_throttle_isValid = false;

    m_is_partial_isSet = false;
    m_is_partial_isValid = false;

    m_http_isSet = false;
    m_http_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_service_ids_isSet = false;
    m_service_ids_isValid = false;

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_instance_ids_isSet = false;
    m_instance_ids_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_entry_point_isSet = false;
    m_entry_point_isValid = false;

    m_fault_root_causes_isSet = false;
    m_fault_root_causes_isValid = false;

    m_error_root_causes_isSet = false;
    m_error_root_causes_isValid = false;

    m_response_time_root_causes_isSet = false;
    m_response_time_root_causes_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_matched_event_time_isSet = false;
    m_matched_event_time_isValid = false;
}

void OAITraceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraceSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_response_time_isValid = ::OpenAPI::fromJsonValue(m_response_time, json[QString("ResponseTime")]);
    m_response_time_isSet = !json[QString("ResponseTime")].isNull() && m_response_time_isValid;

    m_has_fault_isValid = ::OpenAPI::fromJsonValue(m_has_fault, json[QString("HasFault")]);
    m_has_fault_isSet = !json[QString("HasFault")].isNull() && m_has_fault_isValid;

    m_has_error_isValid = ::OpenAPI::fromJsonValue(m_has_error, json[QString("HasError")]);
    m_has_error_isSet = !json[QString("HasError")].isNull() && m_has_error_isValid;

    m_has_throttle_isValid = ::OpenAPI::fromJsonValue(m_has_throttle, json[QString("HasThrottle")]);
    m_has_throttle_isSet = !json[QString("HasThrottle")].isNull() && m_has_throttle_isValid;

    m_is_partial_isValid = ::OpenAPI::fromJsonValue(m_is_partial, json[QString("IsPartial")]);
    m_is_partial_isSet = !json[QString("IsPartial")].isNull() && m_is_partial_isValid;

    m_http_isValid = ::OpenAPI::fromJsonValue(m_http, json[QString("Http")]);
    m_http_isSet = !json[QString("Http")].isNull() && m_http_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("Annotations")]);
    m_annotations_isSet = !json[QString("Annotations")].isNull() && m_annotations_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("Users")]);
    m_users_isSet = !json[QString("Users")].isNull() && m_users_isValid;

    m_service_ids_isValid = ::OpenAPI::fromJsonValue(m_service_ids, json[QString("ServiceIds")]);
    m_service_ids_isSet = !json[QString("ServiceIds")].isNull() && m_service_ids_isValid;

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("ResourceARNs")]);
    m_resource_arns_isSet = !json[QString("ResourceARNs")].isNull() && m_resource_arns_isValid;

    m_instance_ids_isValid = ::OpenAPI::fromJsonValue(m_instance_ids, json[QString("InstanceIds")]);
    m_instance_ids_isSet = !json[QString("InstanceIds")].isNull() && m_instance_ids_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_entry_point_isValid = ::OpenAPI::fromJsonValue(m_entry_point, json[QString("EntryPoint")]);
    m_entry_point_isSet = !json[QString("EntryPoint")].isNull() && m_entry_point_isValid;

    m_fault_root_causes_isValid = ::OpenAPI::fromJsonValue(m_fault_root_causes, json[QString("FaultRootCauses")]);
    m_fault_root_causes_isSet = !json[QString("FaultRootCauses")].isNull() && m_fault_root_causes_isValid;

    m_error_root_causes_isValid = ::OpenAPI::fromJsonValue(m_error_root_causes, json[QString("ErrorRootCauses")]);
    m_error_root_causes_isSet = !json[QString("ErrorRootCauses")].isNull() && m_error_root_causes_isValid;

    m_response_time_root_causes_isValid = ::OpenAPI::fromJsonValue(m_response_time_root_causes, json[QString("ResponseTimeRootCauses")]);
    m_response_time_root_causes_isSet = !json[QString("ResponseTimeRootCauses")].isNull() && m_response_time_root_causes_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_matched_event_time_isValid = ::OpenAPI::fromJsonValue(m_matched_event_time, json[QString("MatchedEventTime")]);
    m_matched_event_time_isSet = !json[QString("MatchedEventTime")].isNull() && m_matched_event_time_isValid;
}

QString OAITraceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_response_time_isSet) {
        obj.insert(QString("ResponseTime"), ::OpenAPI::toJsonValue(m_response_time));
    }
    if (m_has_fault_isSet) {
        obj.insert(QString("HasFault"), ::OpenAPI::toJsonValue(m_has_fault));
    }
    if (m_has_error_isSet) {
        obj.insert(QString("HasError"), ::OpenAPI::toJsonValue(m_has_error));
    }
    if (m_has_throttle_isSet) {
        obj.insert(QString("HasThrottle"), ::OpenAPI::toJsonValue(m_has_throttle));
    }
    if (m_is_partial_isSet) {
        obj.insert(QString("IsPartial"), ::OpenAPI::toJsonValue(m_is_partial));
    }
    if (m_http.isSet()) {
        obj.insert(QString("Http"), ::OpenAPI::toJsonValue(m_http));
    }
    if (m_annotations.isSet()) {
        obj.insert(QString("Annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_users.isSet()) {
        obj.insert(QString("Users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_service_ids.isSet()) {
        obj.insert(QString("ServiceIds"), ::OpenAPI::toJsonValue(m_service_ids));
    }
    if (m_resource_arns.isSet()) {
        obj.insert(QString("ResourceARNs"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_instance_ids.isSet()) {
        obj.insert(QString("InstanceIds"), ::OpenAPI::toJsonValue(m_instance_ids));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_entry_point.isSet()) {
        obj.insert(QString("EntryPoint"), ::OpenAPI::toJsonValue(m_entry_point));
    }
    if (m_fault_root_causes.isSet()) {
        obj.insert(QString("FaultRootCauses"), ::OpenAPI::toJsonValue(m_fault_root_causes));
    }
    if (m_error_root_causes.isSet()) {
        obj.insert(QString("ErrorRootCauses"), ::OpenAPI::toJsonValue(m_error_root_causes));
    }
    if (m_response_time_root_causes.isSet()) {
        obj.insert(QString("ResponseTimeRootCauses"), ::OpenAPI::toJsonValue(m_response_time_root_causes));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_matched_event_time_isSet) {
        obj.insert(QString("MatchedEventTime"), ::OpenAPI::toJsonValue(m_matched_event_time));
    }
    return obj;
}

QString OAITraceSummary::getId() const {
    return m_id;
}
void OAITraceSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITraceSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAITraceSummary::is_id_Valid() const{
    return m_id_isValid;
}

double OAITraceSummary::getDuration() const {
    return m_duration;
}
void OAITraceSummary::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITraceSummary::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITraceSummary::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAITraceSummary::getResponseTime() const {
    return m_response_time;
}
void OAITraceSummary::setResponseTime(const double &response_time) {
    m_response_time = response_time;
    m_response_time_isSet = true;
}

bool OAITraceSummary::is_response_time_Set() const{
    return m_response_time_isSet;
}

bool OAITraceSummary::is_response_time_Valid() const{
    return m_response_time_isValid;
}

bool OAITraceSummary::getHasFault() const {
    return m_has_fault;
}
void OAITraceSummary::setHasFault(const bool &has_fault) {
    m_has_fault = has_fault;
    m_has_fault_isSet = true;
}

bool OAITraceSummary::is_has_fault_Set() const{
    return m_has_fault_isSet;
}

bool OAITraceSummary::is_has_fault_Valid() const{
    return m_has_fault_isValid;
}

bool OAITraceSummary::getHasError() const {
    return m_has_error;
}
void OAITraceSummary::setHasError(const bool &has_error) {
    m_has_error = has_error;
    m_has_error_isSet = true;
}

bool OAITraceSummary::is_has_error_Set() const{
    return m_has_error_isSet;
}

bool OAITraceSummary::is_has_error_Valid() const{
    return m_has_error_isValid;
}

bool OAITraceSummary::getHasThrottle() const {
    return m_has_throttle;
}
void OAITraceSummary::setHasThrottle(const bool &has_throttle) {
    m_has_throttle = has_throttle;
    m_has_throttle_isSet = true;
}

bool OAITraceSummary::is_has_throttle_Set() const{
    return m_has_throttle_isSet;
}

bool OAITraceSummary::is_has_throttle_Valid() const{
    return m_has_throttle_isValid;
}

bool OAITraceSummary::getIsPartial() const {
    return m_is_partial;
}
void OAITraceSummary::setIsPartial(const bool &is_partial) {
    m_is_partial = is_partial;
    m_is_partial_isSet = true;
}

bool OAITraceSummary::is_is_partial_Set() const{
    return m_is_partial_isSet;
}

bool OAITraceSummary::is_is_partial_Valid() const{
    return m_is_partial_isValid;
}

OAITraceSummary_Http OAITraceSummary::getHttp() const {
    return m_http;
}
void OAITraceSummary::setHttp(const OAITraceSummary_Http &http) {
    m_http = http;
    m_http_isSet = true;
}

bool OAITraceSummary::is_http_Set() const{
    return m_http_isSet;
}

bool OAITraceSummary::is_http_Valid() const{
    return m_http_isValid;
}

QMap OAITraceSummary::getAnnotations() const {
    return m_annotations;
}
void OAITraceSummary::setAnnotations(const QMap &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAITraceSummary::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAITraceSummary::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QList OAITraceSummary::getUsers() const {
    return m_users;
}
void OAITraceSummary::setUsers(const QList &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAITraceSummary::is_users_Set() const{
    return m_users_isSet;
}

bool OAITraceSummary::is_users_Valid() const{
    return m_users_isValid;
}

QList OAITraceSummary::getServiceIds() const {
    return m_service_ids;
}
void OAITraceSummary::setServiceIds(const QList &service_ids) {
    m_service_ids = service_ids;
    m_service_ids_isSet = true;
}

bool OAITraceSummary::is_service_ids_Set() const{
    return m_service_ids_isSet;
}

bool OAITraceSummary::is_service_ids_Valid() const{
    return m_service_ids_isValid;
}

QList OAITraceSummary::getResourceArns() const {
    return m_resource_arns;
}
void OAITraceSummary::setResourceArns(const QList &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAITraceSummary::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAITraceSummary::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QList OAITraceSummary::getInstanceIds() const {
    return m_instance_ids;
}
void OAITraceSummary::setInstanceIds(const QList &instance_ids) {
    m_instance_ids = instance_ids;
    m_instance_ids_isSet = true;
}

bool OAITraceSummary::is_instance_ids_Set() const{
    return m_instance_ids_isSet;
}

bool OAITraceSummary::is_instance_ids_Valid() const{
    return m_instance_ids_isValid;
}

QList OAITraceSummary::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAITraceSummary::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAITraceSummary::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAITraceSummary::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

OAITraceSummary_EntryPoint OAITraceSummary::getEntryPoint() const {
    return m_entry_point;
}
void OAITraceSummary::setEntryPoint(const OAITraceSummary_EntryPoint &entry_point) {
    m_entry_point = entry_point;
    m_entry_point_isSet = true;
}

bool OAITraceSummary::is_entry_point_Set() const{
    return m_entry_point_isSet;
}

bool OAITraceSummary::is_entry_point_Valid() const{
    return m_entry_point_isValid;
}

QList OAITraceSummary::getFaultRootCauses() const {
    return m_fault_root_causes;
}
void OAITraceSummary::setFaultRootCauses(const QList &fault_root_causes) {
    m_fault_root_causes = fault_root_causes;
    m_fault_root_causes_isSet = true;
}

bool OAITraceSummary::is_fault_root_causes_Set() const{
    return m_fault_root_causes_isSet;
}

bool OAITraceSummary::is_fault_root_causes_Valid() const{
    return m_fault_root_causes_isValid;
}

QList OAITraceSummary::getErrorRootCauses() const {
    return m_error_root_causes;
}
void OAITraceSummary::setErrorRootCauses(const QList &error_root_causes) {
    m_error_root_causes = error_root_causes;
    m_error_root_causes_isSet = true;
}

bool OAITraceSummary::is_error_root_causes_Set() const{
    return m_error_root_causes_isSet;
}

bool OAITraceSummary::is_error_root_causes_Valid() const{
    return m_error_root_causes_isValid;
}

QList OAITraceSummary::getResponseTimeRootCauses() const {
    return m_response_time_root_causes;
}
void OAITraceSummary::setResponseTimeRootCauses(const QList &response_time_root_causes) {
    m_response_time_root_causes = response_time_root_causes;
    m_response_time_root_causes_isSet = true;
}

bool OAITraceSummary::is_response_time_root_causes_Set() const{
    return m_response_time_root_causes_isSet;
}

bool OAITraceSummary::is_response_time_root_causes_Valid() const{
    return m_response_time_root_causes_isValid;
}

qint32 OAITraceSummary::getRevision() const {
    return m_revision;
}
void OAITraceSummary::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAITraceSummary::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAITraceSummary::is_revision_Valid() const{
    return m_revision_isValid;
}

QDateTime OAITraceSummary::getMatchedEventTime() const {
    return m_matched_event_time;
}
void OAITraceSummary::setMatchedEventTime(const QDateTime &matched_event_time) {
    m_matched_event_time = matched_event_time;
    m_matched_event_time_isSet = true;
}

bool OAITraceSummary::is_matched_event_time_Set() const{
    return m_matched_event_time_isSet;
}

bool OAITraceSummary::is_matched_event_time_Valid() const{
    return m_matched_event_time_isValid;
}

bool OAITraceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_fault_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_throttle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_partial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_root_causes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_root_causes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_root_causes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
