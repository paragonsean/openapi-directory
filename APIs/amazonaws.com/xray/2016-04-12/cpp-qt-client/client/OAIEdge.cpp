/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdge::OAIEdge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdge::OAIEdge() {
    this->initializeModel();
}

OAIEdge::~OAIEdge() {}

void OAIEdge::initializeModel() {

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_summary_statistics_isSet = false;
    m_summary_statistics_isValid = false;

    m_response_time_histogram_isSet = false;
    m_response_time_histogram_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_edge_type_isSet = false;
    m_edge_type_isValid = false;

    m_received_event_age_histogram_isSet = false;
    m_received_event_age_histogram_isValid = false;
}

void OAIEdge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdge::fromJsonObject(QJsonObject json) {

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceId")]);
    m_reference_id_isSet = !json[QString("ReferenceId")].isNull() && m_reference_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_summary_statistics_isValid = ::OpenAPI::fromJsonValue(m_summary_statistics, json[QString("SummaryStatistics")]);
    m_summary_statistics_isSet = !json[QString("SummaryStatistics")].isNull() && m_summary_statistics_isValid;

    m_response_time_histogram_isValid = ::OpenAPI::fromJsonValue(m_response_time_histogram, json[QString("ResponseTimeHistogram")]);
    m_response_time_histogram_isSet = !json[QString("ResponseTimeHistogram")].isNull() && m_response_time_histogram_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("Aliases")]);
    m_aliases_isSet = !json[QString("Aliases")].isNull() && m_aliases_isValid;

    m_edge_type_isValid = ::OpenAPI::fromJsonValue(m_edge_type, json[QString("EdgeType")]);
    m_edge_type_isSet = !json[QString("EdgeType")].isNull() && m_edge_type_isValid;

    m_received_event_age_histogram_isValid = ::OpenAPI::fromJsonValue(m_received_event_age_histogram, json[QString("ReceivedEventAgeHistogram")]);
    m_received_event_age_histogram_isSet = !json[QString("ReceivedEventAgeHistogram")].isNull() && m_received_event_age_histogram_isValid;
}

QString OAIEdge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdge::asJsonObject() const {
    QJsonObject obj;
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_summary_statistics.isSet()) {
        obj.insert(QString("SummaryStatistics"), ::OpenAPI::toJsonValue(m_summary_statistics));
    }
    if (m_response_time_histogram.isSet()) {
        obj.insert(QString("ResponseTimeHistogram"), ::OpenAPI::toJsonValue(m_response_time_histogram));
    }
    if (m_aliases.isSet()) {
        obj.insert(QString("Aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_edge_type_isSet) {
        obj.insert(QString("EdgeType"), ::OpenAPI::toJsonValue(m_edge_type));
    }
    if (m_received_event_age_histogram.isSet()) {
        obj.insert(QString("ReceivedEventAgeHistogram"), ::OpenAPI::toJsonValue(m_received_event_age_histogram));
    }
    return obj;
}

qint32 OAIEdge::getReferenceId() const {
    return m_reference_id;
}
void OAIEdge::setReferenceId(const qint32 &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIEdge::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIEdge::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QDateTime OAIEdge::getStartTime() const {
    return m_start_time;
}
void OAIEdge::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIEdge::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIEdge::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIEdge::getEndTime() const {
    return m_end_time;
}
void OAIEdge::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIEdge::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIEdge::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIEdge_SummaryStatistics OAIEdge::getSummaryStatistics() const {
    return m_summary_statistics;
}
void OAIEdge::setSummaryStatistics(const OAIEdge_SummaryStatistics &summary_statistics) {
    m_summary_statistics = summary_statistics;
    m_summary_statistics_isSet = true;
}

bool OAIEdge::is_summary_statistics_Set() const{
    return m_summary_statistics_isSet;
}

bool OAIEdge::is_summary_statistics_Valid() const{
    return m_summary_statistics_isValid;
}

QList OAIEdge::getResponseTimeHistogram() const {
    return m_response_time_histogram;
}
void OAIEdge::setResponseTimeHistogram(const QList &response_time_histogram) {
    m_response_time_histogram = response_time_histogram;
    m_response_time_histogram_isSet = true;
}

bool OAIEdge::is_response_time_histogram_Set() const{
    return m_response_time_histogram_isSet;
}

bool OAIEdge::is_response_time_histogram_Valid() const{
    return m_response_time_histogram_isValid;
}

QList OAIEdge::getAliases() const {
    return m_aliases;
}
void OAIEdge::setAliases(const QList &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIEdge::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIEdge::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QString OAIEdge::getEdgeType() const {
    return m_edge_type;
}
void OAIEdge::setEdgeType(const QString &edge_type) {
    m_edge_type = edge_type;
    m_edge_type_isSet = true;
}

bool OAIEdge::is_edge_type_Set() const{
    return m_edge_type_isSet;
}

bool OAIEdge::is_edge_type_Valid() const{
    return m_edge_type_isValid;
}

QList OAIEdge::getReceivedEventAgeHistogram() const {
    return m_received_event_age_histogram;
}
void OAIEdge::setReceivedEventAgeHistogram(const QList &received_event_age_histogram) {
    m_received_event_age_histogram = received_event_age_histogram;
    m_received_event_age_histogram_isSet = true;
}

bool OAIEdge::is_received_event_age_histogram_Set() const{
    return m_received_event_age_histogram_isSet;
}

bool OAIEdge::is_received_event_age_histogram_Valid() const{
    return m_received_event_age_histogram_isValid;
}

bool OAIEdge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_event_age_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
