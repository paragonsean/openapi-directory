/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISamplingStatisticSummary.h
 *
 * Aggregated request sampling data for a sampling rule across all services for a 10-second window.
 */

#ifndef OAISamplingStatisticSummary_H
#define OAISamplingStatisticSummary_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISamplingStatisticSummary : public OAIObject {
public:
    OAISamplingStatisticSummary();
    OAISamplingStatisticSummary(QString json);
    ~OAISamplingStatisticSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    qint32 getRequestCount() const;
    void setRequestCount(const qint32 &request_count);
    bool is_request_count_Set() const;
    bool is_request_count_Valid() const;

    qint32 getBorrowCount() const;
    void setBorrowCount(const qint32 &borrow_count);
    bool is_borrow_count_Set() const;
    bool is_borrow_count_Valid() const;

    qint32 getSampledCount() const;
    void setSampledCount(const qint32 &sampled_count);
    bool is_sampled_count_Set() const;
    bool is_sampled_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    qint32 m_request_count;
    bool m_request_count_isSet;
    bool m_request_count_isValid;

    qint32 m_borrow_count;
    bool m_borrow_count_isSet;
    bool m_borrow_count_isValid;

    qint32 m_sampled_count;
    bool m_sampled_count_isSet;
    bool m_sampled_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISamplingStatisticSummary)

#endif // OAISamplingStatisticSummary_H
