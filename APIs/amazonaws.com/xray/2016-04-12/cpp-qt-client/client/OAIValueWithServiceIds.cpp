/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValueWithServiceIds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValueWithServiceIds::OAIValueWithServiceIds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValueWithServiceIds::OAIValueWithServiceIds() {
    this->initializeModel();
}

OAIValueWithServiceIds::~OAIValueWithServiceIds() {}

void OAIValueWithServiceIds::initializeModel() {

    m_annotation_value_isSet = false;
    m_annotation_value_isValid = false;

    m_service_ids_isSet = false;
    m_service_ids_isValid = false;
}

void OAIValueWithServiceIds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValueWithServiceIds::fromJsonObject(QJsonObject json) {

    m_annotation_value_isValid = ::OpenAPI::fromJsonValue(m_annotation_value, json[QString("AnnotationValue")]);
    m_annotation_value_isSet = !json[QString("AnnotationValue")].isNull() && m_annotation_value_isValid;

    m_service_ids_isValid = ::OpenAPI::fromJsonValue(m_service_ids, json[QString("ServiceIds")]);
    m_service_ids_isSet = !json[QString("ServiceIds")].isNull() && m_service_ids_isValid;
}

QString OAIValueWithServiceIds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValueWithServiceIds::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_value.isSet()) {
        obj.insert(QString("AnnotationValue"), ::OpenAPI::toJsonValue(m_annotation_value));
    }
    if (m_service_ids.isSet()) {
        obj.insert(QString("ServiceIds"), ::OpenAPI::toJsonValue(m_service_ids));
    }
    return obj;
}

OAIValueWithServiceIds_AnnotationValue OAIValueWithServiceIds::getAnnotationValue() const {
    return m_annotation_value;
}
void OAIValueWithServiceIds::setAnnotationValue(const OAIValueWithServiceIds_AnnotationValue &annotation_value) {
    m_annotation_value = annotation_value;
    m_annotation_value_isSet = true;
}

bool OAIValueWithServiceIds::is_annotation_value_Set() const{
    return m_annotation_value_isSet;
}

bool OAIValueWithServiceIds::is_annotation_value_Valid() const{
    return m_annotation_value_isValid;
}

QList OAIValueWithServiceIds::getServiceIds() const {
    return m_service_ids;
}
void OAIValueWithServiceIds::setServiceIds(const QList &service_ids) {
    m_service_ids = service_ids;
    m_service_ids_isSet = true;
}

bool OAIValueWithServiceIds::is_service_ids_Set() const{
    return m_service_ids_isSet;
}

bool OAIValueWithServiceIds::is_service_ids_Valid() const{
    return m_service_ids_isValid;
}

bool OAIValueWithServiceIds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValueWithServiceIds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
