/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSamplingRuleResult_SamplingRuleRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSamplingRuleResult_SamplingRuleRecord::OAIUpdateSamplingRuleResult_SamplingRuleRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSamplingRuleResult_SamplingRuleRecord::OAIUpdateSamplingRuleResult_SamplingRuleRecord() {
    this->initializeModel();
}

OAIUpdateSamplingRuleResult_SamplingRuleRecord::~OAIUpdateSamplingRuleResult_SamplingRuleRecord() {}

void OAIUpdateSamplingRuleResult_SamplingRuleRecord::initializeModel() {

    m_sampling_rule_isSet = false;
    m_sampling_rule_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;
}

void OAIUpdateSamplingRuleResult_SamplingRuleRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSamplingRuleResult_SamplingRuleRecord::fromJsonObject(QJsonObject json) {

    m_sampling_rule_isValid = ::OpenAPI::fromJsonValue(m_sampling_rule, json[QString("SamplingRule")]);
    m_sampling_rule_isSet = !json[QString("SamplingRule")].isNull() && m_sampling_rule_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("ModifiedAt")]);
    m_modified_at_isSet = !json[QString("ModifiedAt")].isNull() && m_modified_at_isValid;
}

QString OAIUpdateSamplingRuleResult_SamplingRuleRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSamplingRuleResult_SamplingRuleRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_sampling_rule.isSet()) {
        obj.insert(QString("SamplingRule"), ::OpenAPI::toJsonValue(m_sampling_rule));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("ModifiedAt"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    return obj;
}

OAISamplingRuleRecord_SamplingRule OAIUpdateSamplingRuleResult_SamplingRuleRecord::getSamplingRule() const {
    return m_sampling_rule;
}
void OAIUpdateSamplingRuleResult_SamplingRuleRecord::setSamplingRule(const OAISamplingRuleRecord_SamplingRule &sampling_rule) {
    m_sampling_rule = sampling_rule;
    m_sampling_rule_isSet = true;
}

bool OAIUpdateSamplingRuleResult_SamplingRuleRecord::is_sampling_rule_Set() const{
    return m_sampling_rule_isSet;
}

bool OAIUpdateSamplingRuleResult_SamplingRuleRecord::is_sampling_rule_Valid() const{
    return m_sampling_rule_isValid;
}

QDateTime OAIUpdateSamplingRuleResult_SamplingRuleRecord::getCreatedAt() const {
    return m_created_at;
}
void OAIUpdateSamplingRuleResult_SamplingRuleRecord::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUpdateSamplingRuleResult_SamplingRuleRecord::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUpdateSamplingRuleResult_SamplingRuleRecord::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIUpdateSamplingRuleResult_SamplingRuleRecord::getModifiedAt() const {
    return m_modified_at;
}
void OAIUpdateSamplingRuleResult_SamplingRuleRecord::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIUpdateSamplingRuleResult_SamplingRuleRecord::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIUpdateSamplingRuleResult_SamplingRuleRecord::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

bool OAIUpdateSamplingRuleResult_SamplingRuleRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sampling_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSamplingRuleResult_SamplingRuleRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
