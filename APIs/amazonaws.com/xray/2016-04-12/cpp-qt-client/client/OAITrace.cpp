/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrace::OAITrace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrace::OAITrace() {
    this->initializeModel();
}

OAITrace::~OAITrace() {}

void OAITrace::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_limit_exceeded_isSet = false;
    m_limit_exceeded_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;
}

void OAITrace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrace::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_limit_exceeded_isValid = ::OpenAPI::fromJsonValue(m_limit_exceeded, json[QString("LimitExceeded")]);
    m_limit_exceeded_isSet = !json[QString("LimitExceeded")].isNull() && m_limit_exceeded_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("Segments")]);
    m_segments_isSet = !json[QString("Segments")].isNull() && m_segments_isValid;
}

QString OAITrace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrace::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_limit_exceeded_isSet) {
        obj.insert(QString("LimitExceeded"), ::OpenAPI::toJsonValue(m_limit_exceeded));
    }
    if (m_segments.isSet()) {
        obj.insert(QString("Segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    return obj;
}

QString OAITrace::getId() const {
    return m_id;
}
void OAITrace::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrace::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrace::is_id_Valid() const{
    return m_id_isValid;
}

double OAITrace::getDuration() const {
    return m_duration;
}
void OAITrace::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITrace::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITrace::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAITrace::getLimitExceeded() const {
    return m_limit_exceeded;
}
void OAITrace::setLimitExceeded(const bool &limit_exceeded) {
    m_limit_exceeded = limit_exceeded;
    m_limit_exceeded_isSet = true;
}

bool OAITrace::is_limit_exceeded_Set() const{
    return m_limit_exceeded_isSet;
}

bool OAITrace::is_limit_exceeded_Valid() const{
    return m_limit_exceeded_isValid;
}

QList OAITrace::getSegments() const {
    return m_segments;
}
void OAITrace::setSegments(const QList &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAITrace::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAITrace::is_segments_Valid() const{
    return m_segments_isValid;
}

bool OAITrace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_exceeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
