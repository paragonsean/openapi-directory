/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackendConnectionErrors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackendConnectionErrors::OAIBackendConnectionErrors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackendConnectionErrors::OAIBackendConnectionErrors() {
    this->initializeModel();
}

OAIBackendConnectionErrors::~OAIBackendConnectionErrors() {}

void OAIBackendConnectionErrors::initializeModel() {

    m_timeout_count_isSet = false;
    m_timeout_count_isValid = false;

    m_connection_refused_count_isSet = false;
    m_connection_refused_count_isValid = false;

    m_http_code4_xx_count_isSet = false;
    m_http_code4_xx_count_isValid = false;

    m_http_code5_xx_count_isSet = false;
    m_http_code5_xx_count_isValid = false;

    m_unknown_host_count_isSet = false;
    m_unknown_host_count_isValid = false;

    m_other_count_isSet = false;
    m_other_count_isValid = false;
}

void OAIBackendConnectionErrors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackendConnectionErrors::fromJsonObject(QJsonObject json) {

    m_timeout_count_isValid = ::OpenAPI::fromJsonValue(m_timeout_count, json[QString("TimeoutCount")]);
    m_timeout_count_isSet = !json[QString("TimeoutCount")].isNull() && m_timeout_count_isValid;

    m_connection_refused_count_isValid = ::OpenAPI::fromJsonValue(m_connection_refused_count, json[QString("ConnectionRefusedCount")]);
    m_connection_refused_count_isSet = !json[QString("ConnectionRefusedCount")].isNull() && m_connection_refused_count_isValid;

    m_http_code4_xx_count_isValid = ::OpenAPI::fromJsonValue(m_http_code4_xx_count, json[QString("HTTPCode4XXCount")]);
    m_http_code4_xx_count_isSet = !json[QString("HTTPCode4XXCount")].isNull() && m_http_code4_xx_count_isValid;

    m_http_code5_xx_count_isValid = ::OpenAPI::fromJsonValue(m_http_code5_xx_count, json[QString("HTTPCode5XXCount")]);
    m_http_code5_xx_count_isSet = !json[QString("HTTPCode5XXCount")].isNull() && m_http_code5_xx_count_isValid;

    m_unknown_host_count_isValid = ::OpenAPI::fromJsonValue(m_unknown_host_count, json[QString("UnknownHostCount")]);
    m_unknown_host_count_isSet = !json[QString("UnknownHostCount")].isNull() && m_unknown_host_count_isValid;

    m_other_count_isValid = ::OpenAPI::fromJsonValue(m_other_count, json[QString("OtherCount")]);
    m_other_count_isSet = !json[QString("OtherCount")].isNull() && m_other_count_isValid;
}

QString OAIBackendConnectionErrors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackendConnectionErrors::asJsonObject() const {
    QJsonObject obj;
    if (m_timeout_count_isSet) {
        obj.insert(QString("TimeoutCount"), ::OpenAPI::toJsonValue(m_timeout_count));
    }
    if (m_connection_refused_count_isSet) {
        obj.insert(QString("ConnectionRefusedCount"), ::OpenAPI::toJsonValue(m_connection_refused_count));
    }
    if (m_http_code4_xx_count_isSet) {
        obj.insert(QString("HTTPCode4XXCount"), ::OpenAPI::toJsonValue(m_http_code4_xx_count));
    }
    if (m_http_code5_xx_count_isSet) {
        obj.insert(QString("HTTPCode5XXCount"), ::OpenAPI::toJsonValue(m_http_code5_xx_count));
    }
    if (m_unknown_host_count_isSet) {
        obj.insert(QString("UnknownHostCount"), ::OpenAPI::toJsonValue(m_unknown_host_count));
    }
    if (m_other_count_isSet) {
        obj.insert(QString("OtherCount"), ::OpenAPI::toJsonValue(m_other_count));
    }
    return obj;
}

qint32 OAIBackendConnectionErrors::getTimeoutCount() const {
    return m_timeout_count;
}
void OAIBackendConnectionErrors::setTimeoutCount(const qint32 &timeout_count) {
    m_timeout_count = timeout_count;
    m_timeout_count_isSet = true;
}

bool OAIBackendConnectionErrors::is_timeout_count_Set() const{
    return m_timeout_count_isSet;
}

bool OAIBackendConnectionErrors::is_timeout_count_Valid() const{
    return m_timeout_count_isValid;
}

qint32 OAIBackendConnectionErrors::getConnectionRefusedCount() const {
    return m_connection_refused_count;
}
void OAIBackendConnectionErrors::setConnectionRefusedCount(const qint32 &connection_refused_count) {
    m_connection_refused_count = connection_refused_count;
    m_connection_refused_count_isSet = true;
}

bool OAIBackendConnectionErrors::is_connection_refused_count_Set() const{
    return m_connection_refused_count_isSet;
}

bool OAIBackendConnectionErrors::is_connection_refused_count_Valid() const{
    return m_connection_refused_count_isValid;
}

qint32 OAIBackendConnectionErrors::getHttpCode4XxCount() const {
    return m_http_code4_xx_count;
}
void OAIBackendConnectionErrors::setHttpCode4XxCount(const qint32 &http_code4_xx_count) {
    m_http_code4_xx_count = http_code4_xx_count;
    m_http_code4_xx_count_isSet = true;
}

bool OAIBackendConnectionErrors::is_http_code4_xx_count_Set() const{
    return m_http_code4_xx_count_isSet;
}

bool OAIBackendConnectionErrors::is_http_code4_xx_count_Valid() const{
    return m_http_code4_xx_count_isValid;
}

qint32 OAIBackendConnectionErrors::getHttpCode5XxCount() const {
    return m_http_code5_xx_count;
}
void OAIBackendConnectionErrors::setHttpCode5XxCount(const qint32 &http_code5_xx_count) {
    m_http_code5_xx_count = http_code5_xx_count;
    m_http_code5_xx_count_isSet = true;
}

bool OAIBackendConnectionErrors::is_http_code5_xx_count_Set() const{
    return m_http_code5_xx_count_isSet;
}

bool OAIBackendConnectionErrors::is_http_code5_xx_count_Valid() const{
    return m_http_code5_xx_count_isValid;
}

qint32 OAIBackendConnectionErrors::getUnknownHostCount() const {
    return m_unknown_host_count;
}
void OAIBackendConnectionErrors::setUnknownHostCount(const qint32 &unknown_host_count) {
    m_unknown_host_count = unknown_host_count;
    m_unknown_host_count_isSet = true;
}

bool OAIBackendConnectionErrors::is_unknown_host_count_Set() const{
    return m_unknown_host_count_isSet;
}

bool OAIBackendConnectionErrors::is_unknown_host_count_Valid() const{
    return m_unknown_host_count_isValid;
}

qint32 OAIBackendConnectionErrors::getOtherCount() const {
    return m_other_count;
}
void OAIBackendConnectionErrors::setOtherCount(const qint32 &other_count) {
    m_other_count = other_count;
    m_other_count_isSet = true;
}

bool OAIBackendConnectionErrors::is_other_count_Set() const{
    return m_other_count_isSet;
}

bool OAIBackendConnectionErrors::is_other_count_Valid() const{
    return m_other_count_isValid;
}

bool OAIBackendConnectionErrors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timeout_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_refused_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code4_xx_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code5_xx_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_host_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackendConnectionErrors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
