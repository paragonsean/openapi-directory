/**
 * AWS X-Ray
 * Amazon Web Services X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.
 *
 * The version of the OpenAPI document: 2016-04-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISamplingTargetDocument.h
 *
 * Temporary changes to a sampling rule configuration. To meet the global sampling target for a rule, X-Ray calculates a new reservoir for each service based on the recent sampling results of all services that called &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingTargets.html\&quot;&gt;GetSamplingTargets&lt;/a&gt;.
 */

#ifndef OAISamplingTargetDocument_H
#define OAISamplingTargetDocument_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISamplingTargetDocument : public OAIObject {
public:
    OAISamplingTargetDocument();
    OAISamplingTargetDocument(QString json);
    ~OAISamplingTargetDocument() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    double getFixedRate() const;
    void setFixedRate(const double &fixed_rate);
    bool is_fixed_rate_Set() const;
    bool is_fixed_rate_Valid() const;

    qint32 getReservoirQuota() const;
    void setReservoirQuota(const qint32 &reservoir_quota);
    bool is_reservoir_quota_Set() const;
    bool is_reservoir_quota_Valid() const;

    QDateTime getReservoirQuotaTtl() const;
    void setReservoirQuotaTtl(const QDateTime &reservoir_quota_ttl);
    bool is_reservoir_quota_ttl_Set() const;
    bool is_reservoir_quota_ttl_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    double m_fixed_rate;
    bool m_fixed_rate_isSet;
    bool m_fixed_rate_isValid;

    qint32 m_reservoir_quota;
    bool m_reservoir_quota_isSet;
    bool m_reservoir_quota_isValid;

    QDateTime m_reservoir_quota_ttl;
    bool m_reservoir_quota_ttl_isSet;
    bool m_reservoir_quota_ttl_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISamplingTargetDocument)

#endif // OAISamplingTargetDocument_H
