# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact import Artifact
from openapi_server.models.job_type import JobType
from openapi_server import util


class CreateJobOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, job_type: JobType=None, signature: str=None, signature_file_contents: str=None, warning_message: str=None, artifact_list: List[Artifact]=None):
        """CreateJobOutput - a model defined in OpenAPI

        :param job_id: The job_id of this CreateJobOutput.
        :param job_type: The job_type of this CreateJobOutput.
        :param signature: The signature of this CreateJobOutput.
        :param signature_file_contents: The signature_file_contents of this CreateJobOutput.
        :param warning_message: The warning_message of this CreateJobOutput.
        :param artifact_list: The artifact_list of this CreateJobOutput.
        """
        self.openapi_types = {
            'job_id': str,
            'job_type': JobType,
            'signature': str,
            'signature_file_contents': str,
            'warning_message': str,
            'artifact_list': List[Artifact]
        }

        self.attribute_map = {
            'job_id': 'JobId',
            'job_type': 'JobType',
            'signature': 'Signature',
            'signature_file_contents': 'SignatureFileContents',
            'warning_message': 'WarningMessage',
            'artifact_list': 'ArtifactList'
        }

        self._job_id = job_id
        self._job_type = job_type
        self._signature = signature
        self._signature_file_contents = signature_file_contents
        self._warning_message = warning_message
        self._artifact_list = artifact_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJobOutput of this CreateJobOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this CreateJobOutput.

        A unique identifier which refers to a particular job.

        :return: The job_id of this CreateJobOutput.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CreateJobOutput.

        A unique identifier which refers to a particular job.

        :param job_id: The job_id of this CreateJobOutput.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def job_type(self):
        """Gets the job_type of this CreateJobOutput.


        :return: The job_type of this CreateJobOutput.
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this CreateJobOutput.


        :param job_type: The job_type of this CreateJobOutput.
        :type job_type: JobType
        """

        self._job_type = job_type

    @property
    def signature(self):
        """Gets the signature of this CreateJobOutput.

        An encrypted code used to authenticate the request and response, for example, \"DV+TpDfx1/TdSE9ktyK9k/bDTVI=\". Only use this value is you want to create the signature file yourself. Generally you should use the SignatureFileContents value.

        :return: The signature of this CreateJobOutput.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this CreateJobOutput.

        An encrypted code used to authenticate the request and response, for example, \"DV+TpDfx1/TdSE9ktyK9k/bDTVI=\". Only use this value is you want to create the signature file yourself. Generally you should use the SignatureFileContents value.

        :param signature: The signature of this CreateJobOutput.
        :type signature: str
        """

        self._signature = signature

    @property
    def signature_file_contents(self):
        """Gets the signature_file_contents of this CreateJobOutput.

        The actual text of the SIGNATURE file to be written to disk.

        :return: The signature_file_contents of this CreateJobOutput.
        :rtype: str
        """
        return self._signature_file_contents

    @signature_file_contents.setter
    def signature_file_contents(self, signature_file_contents):
        """Sets the signature_file_contents of this CreateJobOutput.

        The actual text of the SIGNATURE file to be written to disk.

        :param signature_file_contents: The signature_file_contents of this CreateJobOutput.
        :type signature_file_contents: str
        """

        self._signature_file_contents = signature_file_contents

    @property
    def warning_message(self):
        """Gets the warning_message of this CreateJobOutput.

        An optional message notifying you of non-fatal issues with the job, such as use of an incompatible Amazon S3 bucket name.

        :return: The warning_message of this CreateJobOutput.
        :rtype: str
        """
        return self._warning_message

    @warning_message.setter
    def warning_message(self, warning_message):
        """Sets the warning_message of this CreateJobOutput.

        An optional message notifying you of non-fatal issues with the job, such as use of an incompatible Amazon S3 bucket name.

        :param warning_message: The warning_message of this CreateJobOutput.
        :type warning_message: str
        """

        self._warning_message = warning_message

    @property
    def artifact_list(self):
        """Gets the artifact_list of this CreateJobOutput.

        A collection of artifacts.

        :return: The artifact_list of this CreateJobOutput.
        :rtype: List[Artifact]
        """
        return self._artifact_list

    @artifact_list.setter
    def artifact_list(self, artifact_list):
        """Sets the artifact_list of this CreateJobOutput.

        A collection of artifacts.

        :param artifact_list: The artifact_list of this CreateJobOutput.
        :type artifact_list: List[Artifact]
        """

        self._artifact_list = artifact_list
