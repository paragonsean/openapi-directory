# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_type import JobType
from openapi_server import util


class UpdateJobInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, manifest: str=None, job_type: JobType=None, validate_only: bool=None, api_version: str=None):
        """UpdateJobInput - a model defined in OpenAPI

        :param job_id: The job_id of this UpdateJobInput.
        :param manifest: The manifest of this UpdateJobInput.
        :param job_type: The job_type of this UpdateJobInput.
        :param validate_only: The validate_only of this UpdateJobInput.
        :param api_version: The api_version of this UpdateJobInput.
        """
        self.openapi_types = {
            'job_id': str,
            'manifest': str,
            'job_type': JobType,
            'validate_only': bool,
            'api_version': str
        }

        self.attribute_map = {
            'job_id': 'JobId',
            'manifest': 'Manifest',
            'job_type': 'JobType',
            'validate_only': 'ValidateOnly',
            'api_version': 'APIVersion'
        }

        self._job_id = job_id
        self._manifest = manifest
        self._job_type = job_type
        self._validate_only = validate_only
        self._api_version = api_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateJobInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateJobInput of this UpdateJobInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this UpdateJobInput.

        A unique identifier which refers to a particular job.

        :return: The job_id of this UpdateJobInput.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this UpdateJobInput.

        A unique identifier which refers to a particular job.

        :param job_id: The job_id of this UpdateJobInput.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def manifest(self):
        """Gets the manifest of this UpdateJobInput.

        The UTF-8 encoded text of the manifest file.

        :return: The manifest of this UpdateJobInput.
        :rtype: str
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this UpdateJobInput.

        The UTF-8 encoded text of the manifest file.

        :param manifest: The manifest of this UpdateJobInput.
        :type manifest: str
        """
        if manifest is None:
            raise ValueError("Invalid value for `manifest`, must not be `None`")

        self._manifest = manifest

    @property
    def job_type(self):
        """Gets the job_type of this UpdateJobInput.


        :return: The job_type of this UpdateJobInput.
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this UpdateJobInput.


        :param job_type: The job_type of this UpdateJobInput.
        :type job_type: JobType
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")

        self._job_type = job_type

    @property
    def validate_only(self):
        """Gets the validate_only of this UpdateJobInput.

        Validate the manifest and parameter values in the request but do not actually create a job.

        :return: The validate_only of this UpdateJobInput.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this UpdateJobInput.

        Validate the manifest and parameter values in the request but do not actually create a job.

        :param validate_only: The validate_only of this UpdateJobInput.
        :type validate_only: bool
        """
        if validate_only is None:
            raise ValueError("Invalid value for `validate_only`, must not be `None`")

        self._validate_only = validate_only

    @property
    def api_version(self):
        """Gets the api_version of this UpdateJobInput.

        Specifies the version of the client tool.

        :return: The api_version of this UpdateJobInput.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this UpdateJobInput.

        Specifies the version of the client tool.

        :param api_version: The api_version of this UpdateJobInput.
        :type api_version: str
        """

        self._api_version = api_version
