# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetShippingLabelInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_ids: List[str]=None, name: str=None, company: str=None, phone_number: str=None, country: str=None, state_or_province: str=None, city: str=None, postal_code: str=None, street1: str=None, street2: str=None, street3: str=None, api_version: str=None):
        """GetShippingLabelInput - a model defined in OpenAPI

        :param job_ids: The job_ids of this GetShippingLabelInput.
        :param name: The name of this GetShippingLabelInput.
        :param company: The company of this GetShippingLabelInput.
        :param phone_number: The phone_number of this GetShippingLabelInput.
        :param country: The country of this GetShippingLabelInput.
        :param state_or_province: The state_or_province of this GetShippingLabelInput.
        :param city: The city of this GetShippingLabelInput.
        :param postal_code: The postal_code of this GetShippingLabelInput.
        :param street1: The street1 of this GetShippingLabelInput.
        :param street2: The street2 of this GetShippingLabelInput.
        :param street3: The street3 of this GetShippingLabelInput.
        :param api_version: The api_version of this GetShippingLabelInput.
        """
        self.openapi_types = {
            'job_ids': List[str],
            'name': str,
            'company': str,
            'phone_number': str,
            'country': str,
            'state_or_province': str,
            'city': str,
            'postal_code': str,
            'street1': str,
            'street2': str,
            'street3': str,
            'api_version': str
        }

        self.attribute_map = {
            'job_ids': 'jobIds',
            'name': 'name',
            'company': 'company',
            'phone_number': 'phoneNumber',
            'country': 'country',
            'state_or_province': 'stateOrProvince',
            'city': 'city',
            'postal_code': 'postalCode',
            'street1': 'street1',
            'street2': 'street2',
            'street3': 'street3',
            'api_version': 'APIVersion'
        }

        self._job_ids = job_ids
        self._name = name
        self._company = company
        self._phone_number = phone_number
        self._country = country
        self._state_or_province = state_or_province
        self._city = city
        self._postal_code = postal_code
        self._street1 = street1
        self._street2 = street2
        self._street3 = street3
        self._api_version = api_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetShippingLabelInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetShippingLabelInput of this GetShippingLabelInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_ids(self):
        """Gets the job_ids of this GetShippingLabelInput.


        :return: The job_ids of this GetShippingLabelInput.
        :rtype: List[str]
        """
        return self._job_ids

    @job_ids.setter
    def job_ids(self, job_ids):
        """Sets the job_ids of this GetShippingLabelInput.


        :param job_ids: The job_ids of this GetShippingLabelInput.
        :type job_ids: List[str]
        """
        if job_ids is None:
            raise ValueError("Invalid value for `job_ids`, must not be `None`")

        self._job_ids = job_ids

    @property
    def name(self):
        """Gets the name of this GetShippingLabelInput.

        Specifies the name of the person responsible for shipping this package.

        :return: The name of this GetShippingLabelInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetShippingLabelInput.

        Specifies the name of the person responsible for shipping this package.

        :param name: The name of this GetShippingLabelInput.
        :type name: str
        """

        self._name = name

    @property
    def company(self):
        """Gets the company of this GetShippingLabelInput.

        Specifies the name of the company that will ship this package.

        :return: The company of this GetShippingLabelInput.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this GetShippingLabelInput.

        Specifies the name of the company that will ship this package.

        :param company: The company of this GetShippingLabelInput.
        :type company: str
        """

        self._company = company

    @property
    def phone_number(self):
        """Gets the phone_number of this GetShippingLabelInput.

        Specifies the phone number of the person responsible for shipping this package.

        :return: The phone_number of this GetShippingLabelInput.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetShippingLabelInput.

        Specifies the phone number of the person responsible for shipping this package.

        :param phone_number: The phone_number of this GetShippingLabelInput.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def country(self):
        """Gets the country of this GetShippingLabelInput.

        Specifies the name of your country for the return address.

        :return: The country of this GetShippingLabelInput.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GetShippingLabelInput.

        Specifies the name of your country for the return address.

        :param country: The country of this GetShippingLabelInput.
        :type country: str
        """

        self._country = country

    @property
    def state_or_province(self):
        """Gets the state_or_province of this GetShippingLabelInput.

        Specifies the name of your state or your province for the return address.

        :return: The state_or_province of this GetShippingLabelInput.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this GetShippingLabelInput.

        Specifies the name of your state or your province for the return address.

        :param state_or_province: The state_or_province of this GetShippingLabelInput.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def city(self):
        """Gets the city of this GetShippingLabelInput.

        Specifies the name of your city for the return address.

        :return: The city of this GetShippingLabelInput.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GetShippingLabelInput.

        Specifies the name of your city for the return address.

        :param city: The city of this GetShippingLabelInput.
        :type city: str
        """

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this GetShippingLabelInput.

        Specifies the postal code for the return address.

        :return: The postal_code of this GetShippingLabelInput.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this GetShippingLabelInput.

        Specifies the postal code for the return address.

        :param postal_code: The postal_code of this GetShippingLabelInput.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def street1(self):
        """Gets the street1 of this GetShippingLabelInput.

        Specifies the first part of the street address for the return address, for example 1234 Main Street.

        :return: The street1 of this GetShippingLabelInput.
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this GetShippingLabelInput.

        Specifies the first part of the street address for the return address, for example 1234 Main Street.

        :param street1: The street1 of this GetShippingLabelInput.
        :type street1: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this GetShippingLabelInput.

        Specifies the optional second part of the street address for the return address, for example Suite 100.

        :return: The street2 of this GetShippingLabelInput.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this GetShippingLabelInput.

        Specifies the optional second part of the street address for the return address, for example Suite 100.

        :param street2: The street2 of this GetShippingLabelInput.
        :type street2: str
        """

        self._street2 = street2

    @property
    def street3(self):
        """Gets the street3 of this GetShippingLabelInput.

        Specifies the optional third part of the street address for the return address, for example c/o Jane Doe.

        :return: The street3 of this GetShippingLabelInput.
        :rtype: str
        """
        return self._street3

    @street3.setter
    def street3(self, street3):
        """Sets the street3 of this GetShippingLabelInput.

        Specifies the optional third part of the street address for the return address, for example c/o Jane Doe.

        :param street3: The street3 of this GetShippingLabelInput.
        :type street3: str
        """

        self._street3 = street3

    @property
    def api_version(self):
        """Gets the api_version of this GetShippingLabelInput.

        Specifies the version of the client tool.

        :return: The api_version of this GetShippingLabelInput.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this GetShippingLabelInput.

        Specifies the version of the client tool.

        :param api_version: The api_version of this GetShippingLabelInput.
        :type api_version: str
        """

        self._api_version = api_version
