/*
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetShippingLabelInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:32.510683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetShippingLabelInput {
  public static final String SERIALIZED_NAME_JOB_IDS = "jobIds";
  @SerializedName(SERIALIZED_NAME_JOB_IDS)
  private List<String> jobIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_STATE_OR_PROVINCE = "stateOrProvince";
  @SerializedName(SERIALIZED_NAME_STATE_OR_PROVINCE)
  private String stateOrProvince;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STREET1 = "street1";
  @SerializedName(SERIALIZED_NAME_STREET1)
  private String street1;

  public static final String SERIALIZED_NAME_STREET2 = "street2";
  @SerializedName(SERIALIZED_NAME_STREET2)
  private String street2;

  public static final String SERIALIZED_NAME_STREET3 = "street3";
  @SerializedName(SERIALIZED_NAME_STREET3)
  private String street3;

  public static final String SERIALIZED_NAME_AP_I_VERSION = "APIVersion";
  @SerializedName(SERIALIZED_NAME_AP_I_VERSION)
  private String apIVersion;

  public GetShippingLabelInput() {
  }

  public GetShippingLabelInput jobIds(List<String> jobIds) {
    this.jobIds = jobIds;
    return this;
  }

  public GetShippingLabelInput addJobIdsItem(String jobIdsItem) {
    if (this.jobIds == null) {
      this.jobIds = new ArrayList<>();
    }
    this.jobIds.add(jobIdsItem);
    return this;
  }

  /**
   * Get jobIds
   * @return jobIds
   */
  @javax.annotation.Nonnull
  public List<String> getJobIds() {
    return jobIds;
  }

  public void setJobIds(List<String> jobIds) {
    this.jobIds = jobIds;
  }


  public GetShippingLabelInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Specifies the name of the person responsible for shipping this package.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetShippingLabelInput company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Specifies the name of the company that will ship this package.
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public GetShippingLabelInput phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Specifies the phone number of the person responsible for shipping this package.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public GetShippingLabelInput country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Specifies the name of your country for the return address.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public GetShippingLabelInput stateOrProvince(String stateOrProvince) {
    this.stateOrProvince = stateOrProvince;
    return this;
  }

  /**
   * Specifies the name of your state or your province for the return address.
   * @return stateOrProvince
   */
  @javax.annotation.Nullable
  public String getStateOrProvince() {
    return stateOrProvince;
  }

  public void setStateOrProvince(String stateOrProvince) {
    this.stateOrProvince = stateOrProvince;
  }


  public GetShippingLabelInput city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Specifies the name of your city for the return address.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public GetShippingLabelInput postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Specifies the postal code for the return address.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public GetShippingLabelInput street1(String street1) {
    this.street1 = street1;
    return this;
  }

  /**
   * Specifies the first part of the street address for the return address, for example 1234 Main Street.
   * @return street1
   */
  @javax.annotation.Nullable
  public String getStreet1() {
    return street1;
  }

  public void setStreet1(String street1) {
    this.street1 = street1;
  }


  public GetShippingLabelInput street2(String street2) {
    this.street2 = street2;
    return this;
  }

  /**
   * Specifies the optional second part of the street address for the return address, for example Suite 100.
   * @return street2
   */
  @javax.annotation.Nullable
  public String getStreet2() {
    return street2;
  }

  public void setStreet2(String street2) {
    this.street2 = street2;
  }


  public GetShippingLabelInput street3(String street3) {
    this.street3 = street3;
    return this;
  }

  /**
   * Specifies the optional third part of the street address for the return address, for example c/o Jane Doe.
   * @return street3
   */
  @javax.annotation.Nullable
  public String getStreet3() {
    return street3;
  }

  public void setStreet3(String street3) {
    this.street3 = street3;
  }


  public GetShippingLabelInput apIVersion(String apIVersion) {
    this.apIVersion = apIVersion;
    return this;
  }

  /**
   * Specifies the version of the client tool.
   * @return apIVersion
   */
  @javax.annotation.Nullable
  public String getApIVersion() {
    return apIVersion;
  }

  public void setApIVersion(String apIVersion) {
    this.apIVersion = apIVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetShippingLabelInput getShippingLabelInput = (GetShippingLabelInput) o;
    return Objects.equals(this.jobIds, getShippingLabelInput.jobIds) &&
        Objects.equals(this.name, getShippingLabelInput.name) &&
        Objects.equals(this.company, getShippingLabelInput.company) &&
        Objects.equals(this.phoneNumber, getShippingLabelInput.phoneNumber) &&
        Objects.equals(this.country, getShippingLabelInput.country) &&
        Objects.equals(this.stateOrProvince, getShippingLabelInput.stateOrProvince) &&
        Objects.equals(this.city, getShippingLabelInput.city) &&
        Objects.equals(this.postalCode, getShippingLabelInput.postalCode) &&
        Objects.equals(this.street1, getShippingLabelInput.street1) &&
        Objects.equals(this.street2, getShippingLabelInput.street2) &&
        Objects.equals(this.street3, getShippingLabelInput.street3) &&
        Objects.equals(this.apIVersion, getShippingLabelInput.apIVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobIds, name, company, phoneNumber, country, stateOrProvince, city, postalCode, street1, street2, street3, apIVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetShippingLabelInput {\n");
    sb.append("    jobIds: ").append(toIndentedString(jobIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    stateOrProvince: ").append(toIndentedString(stateOrProvince)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    street3: ").append(toIndentedString(street3)).append("\n");
    sb.append("    apIVersion: ").append(toIndentedString(apIVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobIds");
    openapiFields.add("name");
    openapiFields.add("company");
    openapiFields.add("phoneNumber");
    openapiFields.add("country");
    openapiFields.add("stateOrProvince");
    openapiFields.add("city");
    openapiFields.add("postalCode");
    openapiFields.add("street1");
    openapiFields.add("street2");
    openapiFields.add("street3");
    openapiFields.add("APIVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetShippingLabelInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetShippingLabelInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetShippingLabelInput is not found in the empty JSON string", GetShippingLabelInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetShippingLabelInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetShippingLabelInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetShippingLabelInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("jobIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("jobIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobIds` to be an array in the JSON string but got `%s`", jsonObj.get("jobIds").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("stateOrProvince") != null && !jsonObj.get("stateOrProvince").isJsonNull()) && !jsonObj.get("stateOrProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateOrProvince").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("street1") != null && !jsonObj.get("street1").isJsonNull()) && !jsonObj.get("street1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street1").toString()));
      }
      if ((jsonObj.get("street2") != null && !jsonObj.get("street2").isJsonNull()) && !jsonObj.get("street2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street2").toString()));
      }
      if ((jsonObj.get("street3") != null && !jsonObj.get("street3").isJsonNull()) && !jsonObj.get("street3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street3").toString()));
      }
      if ((jsonObj.get("APIVersion") != null && !jsonObj.get("APIVersion").isJsonNull()) && !jsonObj.get("APIVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APIVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APIVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetShippingLabelInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetShippingLabelInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetShippingLabelInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetShippingLabelInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetShippingLabelInput>() {
           @Override
           public void write(JsonWriter out, GetShippingLabelInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetShippingLabelInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetShippingLabelInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetShippingLabelInput
   * @throws IOException if the JSON string is invalid with respect to GetShippingLabelInput
   */
  public static GetShippingLabelInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetShippingLabelInput.class);
  }

  /**
   * Convert an instance of GetShippingLabelInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

