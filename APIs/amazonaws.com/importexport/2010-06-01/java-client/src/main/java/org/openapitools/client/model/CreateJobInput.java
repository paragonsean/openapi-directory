/*
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JobType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input structure for the CreateJob operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:32.510683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateJobInput {
  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobType jobType;

  public static final String SERIALIZED_NAME_MANIFEST = "Manifest";
  @SerializedName(SERIALIZED_NAME_MANIFEST)
  private String manifest;

  public static final String SERIALIZED_NAME_MANIFEST_ADDENDUM = "ManifestAddendum";
  @SerializedName(SERIALIZED_NAME_MANIFEST_ADDENDUM)
  private String manifestAddendum;

  public static final String SERIALIZED_NAME_VALIDATE_ONLY = "ValidateOnly";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ONLY)
  private Boolean validateOnly;

  public static final String SERIALIZED_NAME_AP_I_VERSION = "APIVersion";
  @SerializedName(SERIALIZED_NAME_AP_I_VERSION)
  private String apIVersion;

  public CreateJobInput() {
  }

  public CreateJobInput jobType(JobType jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nonnull
  public JobType getJobType() {
    return jobType;
  }

  public void setJobType(JobType jobType) {
    this.jobType = jobType;
  }


  public CreateJobInput manifest(String manifest) {
    this.manifest = manifest;
    return this;
  }

  /**
   * The UTF-8 encoded text of the manifest file.
   * @return manifest
   */
  @javax.annotation.Nonnull
  public String getManifest() {
    return manifest;
  }

  public void setManifest(String manifest) {
    this.manifest = manifest;
  }


  public CreateJobInput manifestAddendum(String manifestAddendum) {
    this.manifestAddendum = manifestAddendum;
    return this;
  }

  /**
   * For internal use only.
   * @return manifestAddendum
   */
  @javax.annotation.Nullable
  public String getManifestAddendum() {
    return manifestAddendum;
  }

  public void setManifestAddendum(String manifestAddendum) {
    this.manifestAddendum = manifestAddendum;
  }


  public CreateJobInput validateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  /**
   * Validate the manifest and parameter values in the request but do not actually create a job.
   * @return validateOnly
   */
  @javax.annotation.Nonnull
  public Boolean getValidateOnly() {
    return validateOnly;
  }

  public void setValidateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
  }


  public CreateJobInput apIVersion(String apIVersion) {
    this.apIVersion = apIVersion;
    return this;
  }

  /**
   * Specifies the version of the client tool.
   * @return apIVersion
   */
  @javax.annotation.Nullable
  public String getApIVersion() {
    return apIVersion;
  }

  public void setApIVersion(String apIVersion) {
    this.apIVersion = apIVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateJobInput createJobInput = (CreateJobInput) o;
    return Objects.equals(this.jobType, createJobInput.jobType) &&
        Objects.equals(this.manifest, createJobInput.manifest) &&
        Objects.equals(this.manifestAddendum, createJobInput.manifestAddendum) &&
        Objects.equals(this.validateOnly, createJobInput.validateOnly) &&
        Objects.equals(this.apIVersion, createJobInput.apIVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobType, manifest, manifestAddendum, validateOnly, apIVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateJobInput {\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
    sb.append("    manifestAddendum: ").append(toIndentedString(manifestAddendum)).append("\n");
    sb.append("    validateOnly: ").append(toIndentedString(validateOnly)).append("\n");
    sb.append("    apIVersion: ").append(toIndentedString(apIVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobType");
    openapiFields.add("Manifest");
    openapiFields.add("ManifestAddendum");
    openapiFields.add("ValidateOnly");
    openapiFields.add("APIVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("JobType");
    openapiRequiredFields.add("Manifest");
    openapiRequiredFields.add("ValidateOnly");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateJobInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateJobInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateJobInput is not found in the empty JSON string", CreateJobInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateJobInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateJobInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateJobInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `JobType`
      JobType.validateJsonElement(jsonObj.get("JobType"));
      if (!jsonObj.get("Manifest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Manifest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Manifest").toString()));
      }
      if ((jsonObj.get("ManifestAddendum") != null && !jsonObj.get("ManifestAddendum").isJsonNull()) && !jsonObj.get("ManifestAddendum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ManifestAddendum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ManifestAddendum").toString()));
      }
      if ((jsonObj.get("APIVersion") != null && !jsonObj.get("APIVersion").isJsonNull()) && !jsonObj.get("APIVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APIVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APIVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateJobInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateJobInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateJobInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateJobInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateJobInput>() {
           @Override
           public void write(JsonWriter out, CreateJobInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateJobInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateJobInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateJobInput
   * @throws IOException if the JSON string is invalid with respect to CreateJobInput
   */
  public static CreateJobInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateJobInput.class);
  }

  /**
   * Convert an instance of CreateJobInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

