/*
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BucketPermissionException;
import org.openapitools.client.model.CancelJobInput;
import org.openapitools.client.model.CancelJobOutput;
import org.openapitools.client.model.CanceledJobIdException;
import org.openapitools.client.model.CreateJobInput;
import org.openapitools.client.model.CreateJobOutput;
import org.openapitools.client.model.CreateJobQuotaExceededException;
import org.openapitools.client.model.ExpiredJobIdException;
import org.openapitools.client.model.GetShippingLabelInput;
import org.openapitools.client.model.GetShippingLabelOutput;
import org.openapitools.client.model.GetStatusInput;
import org.openapitools.client.model.GetStatusOutput;
import org.openapitools.client.model.InvalidAccessKeyIdException;
import org.openapitools.client.model.InvalidAddressException;
import org.openapitools.client.model.InvalidCustomsException;
import org.openapitools.client.model.InvalidFileSystemException;
import org.openapitools.client.model.InvalidJobIdException;
import org.openapitools.client.model.InvalidManifestFieldException;
import org.openapitools.client.model.InvalidParameterException;
import org.openapitools.client.model.InvalidVersionException;
import org.openapitools.client.model.ListJobsInput;
import org.openapitools.client.model.ListJobsOutput;
import org.openapitools.client.model.MalformedManifestException;
import org.openapitools.client.model.MissingCustomsException;
import org.openapitools.client.model.MissingManifestFieldException;
import org.openapitools.client.model.MissingParameterException;
import org.openapitools.client.model.MultipleRegionsException;
import org.openapitools.client.model.NoSuchBucketException;
import org.openapitools.client.model.UnableToCancelJobIdException;
import org.openapitools.client.model.UnableToUpdateJobIdException;
import org.openapitools.client.model.UpdateJobInput;
import org.openapitools.client.model.UpdateJobOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETCancelJob
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnableToCancelJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCancelJobCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Operation=CancelJob&Action=CancelJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("JobId", jobId));
        }

        if (apIVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("APIVersion", apIVersion));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCancelJobValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETCancelJob(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETCancelJob(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETCancelJob(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETCancelJob(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETCancelJob(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling gETCancelJob(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling gETCancelJob(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCancelJob(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCancelJob(Async)");
        }

        return gETCancelJobCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion, _callback);

    }

    /**
     * 
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @return CancelJobOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnableToCancelJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public CancelJobOutput gETCancelJob(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion) throws ApiException {
        ApiResponse<CancelJobOutput> localVarResp = gETCancelJobWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CancelJobOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnableToCancelJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelJobOutput> gETCancelJobWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = gETCancelJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion, null);
        Type localVarReturnType = new TypeToken<CancelJobOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnableToCancelJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCancelJobAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion, final ApiCallback<CancelJobOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCancelJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CancelJobOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateJob
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobType  (required)
     * @param manifest  (required)
     * @param validateOnly  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param manifestAddendum  (optional)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CreateJobQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateJobCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobType, String manifest, Boolean validateOnly, String operation, String action, String version, String manifestAddendum, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Operation=CreateJob&Action=CreateJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (jobType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("JobType", jobType));
        }

        if (manifest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Manifest", manifest));
        }

        if (manifestAddendum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ManifestAddendum", manifestAddendum));
        }

        if (validateOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ValidateOnly", validateOnly));
        }

        if (apIVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("APIVersion", apIVersion));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateJobValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobType, String manifest, Boolean validateOnly, String operation, String action, String version, String manifestAddendum, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'jobType' is set
        if (jobType == null) {
            throw new ApiException("Missing the required parameter 'jobType' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'manifest' is set
        if (manifest == null) {
            throw new ApiException("Missing the required parameter 'manifest' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'validateOnly' is set
        if (validateOnly == null) {
            throw new ApiException("Missing the required parameter 'validateOnly' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateJob(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateJob(Async)");
        }

        return gETCreateJobCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobType, manifest, validateOnly, operation, action, version, manifestAddendum, apIVersion, _callback);

    }

    /**
     * 
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobType  (required)
     * @param manifest  (required)
     * @param validateOnly  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param manifestAddendum  (optional)
     * @param apIVersion  (optional)
     * @return CreateJobOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CreateJobQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public CreateJobOutput gETCreateJob(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobType, String manifest, Boolean validateOnly, String operation, String action, String version, String manifestAddendum, String apIVersion) throws ApiException {
        ApiResponse<CreateJobOutput> localVarResp = gETCreateJobWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobType, manifest, validateOnly, operation, action, version, manifestAddendum, apIVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobType  (required)
     * @param manifest  (required)
     * @param validateOnly  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param manifestAddendum  (optional)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CreateJobOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CreateJobQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateJobOutput> gETCreateJobWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobType, String manifest, Boolean validateOnly, String operation, String action, String version, String manifestAddendum, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = gETCreateJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobType, manifest, validateOnly, operation, action, version, manifestAddendum, apIVersion, null);
        Type localVarReturnType = new TypeToken<CreateJobOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobType  (required)
     * @param manifest  (required)
     * @param validateOnly  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param manifestAddendum  (optional)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CreateJobQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateJobAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobType, String manifest, Boolean validateOnly, String operation, String action, String version, String manifestAddendum, String apIVersion, final ApiCallback<CreateJobOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobType, manifest, validateOnly, operation, action, version, manifestAddendum, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CreateJobOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetShippingLabel
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobIds  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param name  (optional)
     * @param company  (optional)
     * @param phoneNumber  (optional)
     * @param country  (optional)
     * @param stateOrProvince  (optional)
     * @param city  (optional)
     * @param postalCode  (optional)
     * @param street1  (optional)
     * @param street2  (optional)
     * @param street3  (optional)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetShippingLabelCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, List<String> jobIds, String operation, String action, String version, String name, String company, String phoneNumber, String country, String stateOrProvince, String city, String postalCode, String street1, String street2, String street3, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Operation=GetShippingLabel&Action=GetShippingLabel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (jobIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "jobIds", jobIds));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (company != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company", company));
        }

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumber", phoneNumber));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (stateOrProvince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stateOrProvince", stateOrProvince));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postalCode", postalCode));
        }

        if (street1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street1", street1));
        }

        if (street2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street2", street2));
        }

        if (street3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street3", street3));
        }

        if (apIVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("APIVersion", apIVersion));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetShippingLabelValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, List<String> jobIds, String operation, String action, String version, String name, String company, String phoneNumber, String country, String stateOrProvince, String city, String postalCode, String street1, String street2, String street3, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETGetShippingLabel(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETGetShippingLabel(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETGetShippingLabel(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETGetShippingLabel(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETGetShippingLabel(Async)");
        }

        // verify the required parameter 'jobIds' is set
        if (jobIds == null) {
            throw new ApiException("Missing the required parameter 'jobIds' when calling gETGetShippingLabel(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling gETGetShippingLabel(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetShippingLabel(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetShippingLabel(Async)");
        }

        return gETGetShippingLabelCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobIds, operation, action, version, name, company, phoneNumber, country, stateOrProvince, city, postalCode, street1, street2, street3, apIVersion, _callback);

    }

    /**
     * 
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobIds  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param name  (optional)
     * @param company  (optional)
     * @param phoneNumber  (optional)
     * @param country  (optional)
     * @param stateOrProvince  (optional)
     * @param city  (optional)
     * @param postalCode  (optional)
     * @param street1  (optional)
     * @param street2  (optional)
     * @param street3  (optional)
     * @param apIVersion  (optional)
     * @return GetShippingLabelOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public GetShippingLabelOutput gETGetShippingLabel(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, List<String> jobIds, String operation, String action, String version, String name, String company, String phoneNumber, String country, String stateOrProvince, String city, String postalCode, String street1, String street2, String street3, String apIVersion) throws ApiException {
        ApiResponse<GetShippingLabelOutput> localVarResp = gETGetShippingLabelWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobIds, operation, action, version, name, company, phoneNumber, country, stateOrProvince, city, postalCode, street1, street2, street3, apIVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobIds  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param name  (optional)
     * @param company  (optional)
     * @param phoneNumber  (optional)
     * @param country  (optional)
     * @param stateOrProvince  (optional)
     * @param city  (optional)
     * @param postalCode  (optional)
     * @param street1  (optional)
     * @param street2  (optional)
     * @param street3  (optional)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;GetShippingLabelOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShippingLabelOutput> gETGetShippingLabelWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, List<String> jobIds, String operation, String action, String version, String name, String company, String phoneNumber, String country, String stateOrProvince, String city, String postalCode, String street1, String street2, String street3, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = gETGetShippingLabelValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobIds, operation, action, version, name, company, phoneNumber, country, stateOrProvince, city, postalCode, street1, street2, street3, apIVersion, null);
        Type localVarReturnType = new TypeToken<GetShippingLabelOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobIds  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param name  (optional)
     * @param company  (optional)
     * @param phoneNumber  (optional)
     * @param country  (optional)
     * @param stateOrProvince  (optional)
     * @param city  (optional)
     * @param postalCode  (optional)
     * @param street1  (optional)
     * @param street2  (optional)
     * @param street3  (optional)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetShippingLabelAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, List<String> jobIds, String operation, String action, String version, String name, String company, String phoneNumber, String country, String stateOrProvince, String city, String postalCode, String street1, String street2, String street3, String apIVersion, final ApiCallback<GetShippingLabelOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetShippingLabelValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobIds, operation, action, version, name, company, phoneNumber, country, stateOrProvince, city, postalCode, street1, street2, street3, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<GetShippingLabelOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetStatus
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetStatusCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Operation=GetStatus&Action=GetStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("JobId", jobId));
        }

        if (apIVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("APIVersion", apIVersion));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetStatusValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETGetStatus(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETGetStatus(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETGetStatus(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETGetStatus(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETGetStatus(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling gETGetStatus(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling gETGetStatus(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetStatus(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetStatus(Async)");
        }

        return gETGetStatusCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion, _callback);

    }

    /**
     * 
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @return GetStatusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusOutput gETGetStatus(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion) throws ApiException {
        ApiResponse<GetStatusOutput> localVarResp = gETGetStatusWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;GetStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStatusOutput> gETGetStatusWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = gETGetStatusValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion, null);
        Type localVarReturnType = new TypeToken<GetStatusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetStatusAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String operation, String action, String version, String apIVersion, final ApiCallback<GetStatusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetStatusValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<GetStatusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListJobs
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxJobs  (optional)
     * @param marker  (optional)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListJobsCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, Integer maxJobs, String marker, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Operation=ListJobs&Action=ListJobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (maxJobs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxJobs", maxJobs));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (apIVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("APIVersion", apIVersion));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListJobsValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, Integer maxJobs, String marker, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETListJobs(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETListJobs(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETListJobs(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETListJobs(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETListJobs(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling gETListJobs(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListJobs(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListJobs(Async)");
        }

        return gETListJobsCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, apIVersion, _callback);

    }

    /**
     * 
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxJobs  (optional)
     * @param marker  (optional)
     * @param apIVersion  (optional)
     * @return ListJobsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ListJobsOutput gETListJobs(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, Integer maxJobs, String marker, String apIVersion) throws ApiException {
        ApiResponse<ListJobsOutput> localVarResp = gETListJobsWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, apIVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxJobs  (optional)
     * @param marker  (optional)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;ListJobsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListJobsOutput> gETListJobsWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, Integer maxJobs, String marker, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = gETListJobsValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, apIVersion, null);
        Type localVarReturnType = new TypeToken<ListJobsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxJobs  (optional)
     * @param marker  (optional)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListJobsAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, Integer maxJobs, String marker, String apIVersion, final ApiCallback<ListJobsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListJobsValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<ListJobsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateJob
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param manifest  (required)
     * @param jobType  (required)
     * @param validateOnly  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UnableToUpdateJobIdException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateJobCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String manifest, String jobType, Boolean validateOnly, String operation, String action, String version, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Operation=UpdateJob&Action=UpdateJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("JobId", jobId));
        }

        if (manifest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Manifest", manifest));
        }

        if (jobType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("JobType", jobType));
        }

        if (validateOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ValidateOnly", validateOnly));
        }

        if (apIVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("APIVersion", apIVersion));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateJobValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String manifest, String jobType, Boolean validateOnly, String operation, String action, String version, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'manifest' is set
        if (manifest == null) {
            throw new ApiException("Missing the required parameter 'manifest' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'jobType' is set
        if (jobType == null) {
            throw new ApiException("Missing the required parameter 'jobType' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'validateOnly' is set
        if (validateOnly == null) {
            throw new ApiException("Missing the required parameter 'validateOnly' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateJob(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateJob(Async)");
        }

        return gETUpdateJobCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, manifest, jobType, validateOnly, operation, action, version, apIVersion, _callback);

    }

    /**
     * 
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param manifest  (required)
     * @param jobType  (required)
     * @param validateOnly  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @return UpdateJobOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UnableToUpdateJobIdException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobOutput gETUpdateJob(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String manifest, String jobType, Boolean validateOnly, String operation, String action, String version, String apIVersion) throws ApiException {
        ApiResponse<UpdateJobOutput> localVarResp = gETUpdateJobWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, manifest, jobType, validateOnly, operation, action, version, apIVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param manifest  (required)
     * @param jobType  (required)
     * @param validateOnly  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;UpdateJobOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UnableToUpdateJobIdException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateJobOutput> gETUpdateJobWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String manifest, String jobType, Boolean validateOnly, String operation, String action, String version, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, manifest, jobType, validateOnly, operation, action, version, apIVersion, null);
        Type localVarReturnType = new TypeToken<UpdateJobOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param jobId  (required)
     * @param manifest  (required)
     * @param jobType  (required)
     * @param validateOnly  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UnableToUpdateJobIdException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateJobAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String jobId, String manifest, String jobType, Boolean validateOnly, String operation, String action, String version, String apIVersion, final ApiCallback<UpdateJobOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, manifest, jobType, validateOnly, operation, action, version, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<UpdateJobOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCancelJob
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param cancelJobInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnableToCancelJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCancelJobCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CancelJobInput cancelJobInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelJobInput;

        // create path and map variables
        String localVarPath = "/#Operation=CancelJob&Action=CancelJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCancelJobValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CancelJobInput cancelJobInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTCancelJob(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTCancelJob(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTCancelJob(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTCancelJob(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTCancelJob(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling pOSTCancelJob(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCancelJob(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCancelJob(Async)");
        }

        return pOSTCancelJobCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, cancelJobInput, _callback);

    }

    /**
     * 
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param cancelJobInput  (optional)
     * @return CancelJobOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnableToCancelJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public CancelJobOutput pOSTCancelJob(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CancelJobInput cancelJobInput) throws ApiException {
        ApiResponse<CancelJobOutput> localVarResp = pOSTCancelJobWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, cancelJobInput);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param cancelJobInput  (optional)
     * @return ApiResponse&lt;CancelJobOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnableToCancelJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelJobOutput> pOSTCancelJobWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CancelJobInput cancelJobInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCancelJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, cancelJobInput, null);
        Type localVarReturnType = new TypeToken<CancelJobOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param cancelJobInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnableToCancelJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCancelJobAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CancelJobInput cancelJobInput, final ApiCallback<CancelJobOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCancelJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, cancelJobInput, _callback);
        Type localVarReturnType = new TypeToken<CancelJobOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateJob
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param createJobInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CreateJobQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateJobCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CreateJobInput createJobInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJobInput;

        // create path and map variables
        String localVarPath = "/#Operation=CreateJob&Action=CreateJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateJobValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CreateJobInput createJobInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTCreateJob(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTCreateJob(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTCreateJob(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTCreateJob(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTCreateJob(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling pOSTCreateJob(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateJob(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateJob(Async)");
        }

        return pOSTCreateJobCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, createJobInput, _callback);

    }

    /**
     * 
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param createJobInput  (optional)
     * @return CreateJobOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CreateJobQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public CreateJobOutput pOSTCreateJob(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CreateJobInput createJobInput) throws ApiException {
        ApiResponse<CreateJobOutput> localVarResp = pOSTCreateJobWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, createJobInput);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param createJobInput  (optional)
     * @return ApiResponse&lt;CreateJobOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CreateJobQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateJobOutput> pOSTCreateJobWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CreateJobInput createJobInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, createJobInput, null);
        Type localVarReturnType = new TypeToken<CreateJobOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param createJobInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CreateJobQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateJobAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, CreateJobInput createJobInput, final ApiCallback<CreateJobOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, createJobInput, _callback);
        Type localVarReturnType = new TypeToken<CreateJobOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetShippingLabel
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getShippingLabelInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetShippingLabelCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetShippingLabelInput getShippingLabelInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getShippingLabelInput;

        // create path and map variables
        String localVarPath = "/#Operation=GetShippingLabel&Action=GetShippingLabel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetShippingLabelValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetShippingLabelInput getShippingLabelInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTGetShippingLabel(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTGetShippingLabel(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTGetShippingLabel(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTGetShippingLabel(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTGetShippingLabel(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling pOSTGetShippingLabel(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetShippingLabel(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetShippingLabel(Async)");
        }

        return pOSTGetShippingLabelCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getShippingLabelInput, _callback);

    }

    /**
     * 
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getShippingLabelInput  (optional)
     * @return GetShippingLabelOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public GetShippingLabelOutput pOSTGetShippingLabel(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetShippingLabelInput getShippingLabelInput) throws ApiException {
        ApiResponse<GetShippingLabelOutput> localVarResp = pOSTGetShippingLabelWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getShippingLabelInput);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getShippingLabelInput  (optional)
     * @return ApiResponse&lt;GetShippingLabelOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShippingLabelOutput> pOSTGetShippingLabelWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetShippingLabelInput getShippingLabelInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetShippingLabelValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getShippingLabelInput, null);
        Type localVarReturnType = new TypeToken<GetShippingLabelOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getShippingLabelInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVersionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetShippingLabelAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetShippingLabelInput getShippingLabelInput, final ApiCallback<GetShippingLabelOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetShippingLabelValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getShippingLabelInput, _callback);
        Type localVarReturnType = new TypeToken<GetShippingLabelOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetStatus
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getStatusInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetStatusCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetStatusInput getStatusInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getStatusInput;

        // create path and map variables
        String localVarPath = "/#Operation=GetStatus&Action=GetStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetStatusValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetStatusInput getStatusInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTGetStatus(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTGetStatus(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTGetStatus(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTGetStatus(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTGetStatus(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling pOSTGetStatus(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetStatus(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetStatus(Async)");
        }

        return pOSTGetStatusCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getStatusInput, _callback);

    }

    /**
     * 
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getStatusInput  (optional)
     * @return GetStatusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusOutput pOSTGetStatus(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetStatusInput getStatusInput) throws ApiException {
        ApiResponse<GetStatusOutput> localVarResp = pOSTGetStatusWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getStatusInput);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getStatusInput  (optional)
     * @return ApiResponse&lt;GetStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStatusOutput> pOSTGetStatusWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetStatusInput getStatusInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetStatusValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getStatusInput, null);
        Type localVarReturnType = new TypeToken<GetStatusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getStatusInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetStatusAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, GetStatusInput getStatusInput, final ApiCallback<GetStatusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetStatusValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getStatusInput, _callback);
        Type localVarReturnType = new TypeToken<GetStatusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListJobs
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxJobs Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param listJobsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListJobsCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, String maxJobs, String marker, ListJobsInput listJobsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listJobsInput;

        // create path and map variables
        String localVarPath = "/#Operation=ListJobs&Action=ListJobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (maxJobs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxJobs", maxJobs));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListJobsValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, String maxJobs, String marker, ListJobsInput listJobsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTListJobs(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTListJobs(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTListJobs(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTListJobs(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTListJobs(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling pOSTListJobs(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListJobs(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListJobs(Async)");
        }

        return pOSTListJobsCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, listJobsInput, _callback);

    }

    /**
     * 
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxJobs Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param listJobsInput  (optional)
     * @return ListJobsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ListJobsOutput pOSTListJobs(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, String maxJobs, String marker, ListJobsInput listJobsInput) throws ApiException {
        ApiResponse<ListJobsOutput> localVarResp = pOSTListJobsWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, listJobsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxJobs Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param listJobsInput  (optional)
     * @return ApiResponse&lt;ListJobsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListJobsOutput> pOSTListJobsWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, String maxJobs, String marker, ListJobsInput listJobsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListJobsValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, listJobsInput, null);
        Type localVarReturnType = new TypeToken<ListJobsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxJobs Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param listJobsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListJobsAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, String maxJobs, String marker, ListJobsInput listJobsInput, final ApiCallback<ListJobsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListJobsValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, listJobsInput, _callback);
        Type localVarReturnType = new TypeToken<ListJobsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateJob
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param updateJobInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UnableToUpdateJobIdException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateJobCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, UpdateJobInput updateJobInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateJobInput;

        // create path and map variables
        String localVarPath = "/#Operation=UpdateJob&Action=UpdateJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateJobValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, UpdateJobInput updateJobInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTUpdateJob(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTUpdateJob(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTUpdateJob(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTUpdateJob(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTUpdateJob(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling pOSTUpdateJob(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateJob(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateJob(Async)");
        }

        return pOSTUpdateJobCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, updateJobInput, _callback);

    }

    /**
     * 
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param updateJobInput  (optional)
     * @return UpdateJobOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UnableToUpdateJobIdException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobOutput pOSTUpdateJob(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, UpdateJobInput updateJobInput) throws ApiException {
        ApiResponse<UpdateJobOutput> localVarResp = pOSTUpdateJobWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, updateJobInput);
        return localVarResp.getData();
    }

    /**
     * 
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param updateJobInput  (optional)
     * @return ApiResponse&lt;UpdateJobOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UnableToUpdateJobIdException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateJobOutput> pOSTUpdateJobWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, UpdateJobInput updateJobInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, updateJobInput, null);
        Type localVarReturnType = new TypeToken<UpdateJobOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param operation  (required)
     * @param action  (required)
     * @param version  (required)
     * @param updateJobInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MissingParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidAccessKeyIdException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidAddressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingManifestFieldException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchBucketException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ExpiredJobIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CanceledJobIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> MissingCustomsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidCustomsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidFileSystemException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> MultipleRegionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> BucketPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> MalformedManifestException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UnableToUpdateJobIdException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateJobAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String operation, String action, String version, UpdateJobInput updateJobInput, final ApiCallback<UpdateJobOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateJobValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, updateJobInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateJobOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
