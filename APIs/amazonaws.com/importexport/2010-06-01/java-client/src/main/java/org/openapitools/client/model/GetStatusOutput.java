/*
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.JobType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output structure for the GetStatus operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:32.510683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetStatusOutput {
  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobType jobType;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "LocationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_LOCATION_MESSAGE = "LocationMessage";
  @SerializedName(SERIALIZED_NAME_LOCATION_MESSAGE)
  private String locationMessage;

  public static final String SERIALIZED_NAME_PROGRESS_CODE = "ProgressCode";
  @SerializedName(SERIALIZED_NAME_PROGRESS_CODE)
  private String progressCode;

  public static final String SERIALIZED_NAME_PROGRESS_MESSAGE = "ProgressMessage";
  @SerializedName(SERIALIZED_NAME_PROGRESS_MESSAGE)
  private String progressMessage;

  public static final String SERIALIZED_NAME_CARRIER = "Carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private String carrier;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "TrackingNumber";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_LOG_BUCKET = "LogBucket";
  @SerializedName(SERIALIZED_NAME_LOG_BUCKET)
  private String logBucket;

  public static final String SERIALIZED_NAME_LOG_KEY = "LogKey";
  @SerializedName(SERIALIZED_NAME_LOG_KEY)
  private String logKey;

  public static final String SERIALIZED_NAME_ERROR_COUNT = "ErrorCount";
  @SerializedName(SERIALIZED_NAME_ERROR_COUNT)
  private Integer errorCount;

  public static final String SERIALIZED_NAME_SIGNATURE = "Signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SIGNATURE_FILE_CONTENTS = "SignatureFileContents";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_FILE_CONTENTS)
  private String signatureFileContents;

  public static final String SERIALIZED_NAME_CURRENT_MANIFEST = "CurrentManifest";
  @SerializedName(SERIALIZED_NAME_CURRENT_MANIFEST)
  private String currentManifest;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_ARTIFACT_LIST = "ArtifactList";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_LIST)
  private List<Artifact> artifactList = new ArrayList<>();

  public GetStatusOutput() {
  }

  public GetStatusOutput jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * A unique identifier which refers to a particular job.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public GetStatusOutput jobType(JobType jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nullable
  public JobType getJobType() {
    return jobType;
  }

  public void setJobType(JobType jobType) {
    this.jobType = jobType;
  }


  public GetStatusOutput locationCode(String locationCode) {
    this.locationCode = locationCode;
    return this;
  }

  /**
   * A token representing the location of the storage device, such as \&quot;AtAWS\&quot;.
   * @return locationCode
   */
  @javax.annotation.Nullable
  public String getLocationCode() {
    return locationCode;
  }

  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public GetStatusOutput locationMessage(String locationMessage) {
    this.locationMessage = locationMessage;
    return this;
  }

  /**
   * A more human readable form of the physical location of the storage device.
   * @return locationMessage
   */
  @javax.annotation.Nullable
  public String getLocationMessage() {
    return locationMessage;
  }

  public void setLocationMessage(String locationMessage) {
    this.locationMessage = locationMessage;
  }


  public GetStatusOutput progressCode(String progressCode) {
    this.progressCode = progressCode;
    return this;
  }

  /**
   * A token representing the state of the job, such as \&quot;Started\&quot;.
   * @return progressCode
   */
  @javax.annotation.Nullable
  public String getProgressCode() {
    return progressCode;
  }

  public void setProgressCode(String progressCode) {
    this.progressCode = progressCode;
  }


  public GetStatusOutput progressMessage(String progressMessage) {
    this.progressMessage = progressMessage;
    return this;
  }

  /**
   * A more human readable form of the job status.
   * @return progressMessage
   */
  @javax.annotation.Nullable
  public String getProgressMessage() {
    return progressMessage;
  }

  public void setProgressMessage(String progressMessage) {
    this.progressMessage = progressMessage;
  }


  public GetStatusOutput carrier(String carrier) {
    this.carrier = carrier;
    return this;
  }

  /**
   * Name of the shipping company. This value is included when the LocationCode is \&quot;Returned\&quot;.
   * @return carrier
   */
  @javax.annotation.Nullable
  public String getCarrier() {
    return carrier;
  }

  public void setCarrier(String carrier) {
    this.carrier = carrier;
  }


  public GetStatusOutput trackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
    return this;
  }

  /**
   * The shipping tracking number assigned by AWS Import/Export to the storage device when it&#39;s returned to you. We return this value when the LocationCode is \&quot;Returned\&quot;.
   * @return trackingNumber
   */
  @javax.annotation.Nullable
  public String getTrackingNumber() {
    return trackingNumber;
  }

  public void setTrackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
  }


  public GetStatusOutput logBucket(String logBucket) {
    this.logBucket = logBucket;
    return this;
  }

  /**
   * Amazon S3 bucket for user logs.
   * @return logBucket
   */
  @javax.annotation.Nullable
  public String getLogBucket() {
    return logBucket;
  }

  public void setLogBucket(String logBucket) {
    this.logBucket = logBucket;
  }


  public GetStatusOutput logKey(String logKey) {
    this.logKey = logKey;
    return this;
  }

  /**
   * The key where the user logs were stored.
   * @return logKey
   */
  @javax.annotation.Nullable
  public String getLogKey() {
    return logKey;
  }

  public void setLogKey(String logKey) {
    this.logKey = logKey;
  }


  public GetStatusOutput errorCount(Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * Number of errors. We return this value when the ProgressCode is Success or SuccessWithErrors.
   * @return errorCount
   */
  @javax.annotation.Nullable
  public Integer getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(Integer errorCount) {
    this.errorCount = errorCount;
  }


  public GetStatusOutput signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * An encrypted code used to authenticate the request and response, for example, \&quot;DV+TpDfx1/TdSE9ktyK9k/bDTVI&#x3D;\&quot;. Only use this value is you want to create the signature file yourself. Generally you should use the SignatureFileContents value.
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public GetStatusOutput signatureFileContents(String signatureFileContents) {
    this.signatureFileContents = signatureFileContents;
    return this;
  }

  /**
   * An encrypted code used to authenticate the request and response, for example, \&quot;DV+TpDfx1/TdSE9ktyK9k/bDTVI&#x3D;\&quot;. Only use this value is you want to create the signature file yourself. Generally you should use the SignatureFileContents value.
   * @return signatureFileContents
   */
  @javax.annotation.Nullable
  public String getSignatureFileContents() {
    return signatureFileContents;
  }

  public void setSignatureFileContents(String signatureFileContents) {
    this.signatureFileContents = signatureFileContents;
  }


  public GetStatusOutput currentManifest(String currentManifest) {
    this.currentManifest = currentManifest;
    return this;
  }

  /**
   * The last manifest submitted, which will be used to process the job.
   * @return currentManifest
   */
  @javax.annotation.Nullable
  public String getCurrentManifest() {
    return currentManifest;
  }

  public void setCurrentManifest(String currentManifest) {
    this.currentManifest = currentManifest;
  }


  public GetStatusOutput creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Timestamp of the CreateJob request in ISO8601 date format. For example \&quot;2010-03-28T20:27:35Z\&quot;.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public GetStatusOutput artifactList(List<Artifact> artifactList) {
    this.artifactList = artifactList;
    return this;
  }

  public GetStatusOutput addArtifactListItem(Artifact artifactListItem) {
    if (this.artifactList == null) {
      this.artifactList = new ArrayList<>();
    }
    this.artifactList.add(artifactListItem);
    return this;
  }

  /**
   * A collection of artifacts.
   * @return artifactList
   */
  @javax.annotation.Nullable
  public List<Artifact> getArtifactList() {
    return artifactList;
  }

  public void setArtifactList(List<Artifact> artifactList) {
    this.artifactList = artifactList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetStatusOutput getStatusOutput = (GetStatusOutput) o;
    return Objects.equals(this.jobId, getStatusOutput.jobId) &&
        Objects.equals(this.jobType, getStatusOutput.jobType) &&
        Objects.equals(this.locationCode, getStatusOutput.locationCode) &&
        Objects.equals(this.locationMessage, getStatusOutput.locationMessage) &&
        Objects.equals(this.progressCode, getStatusOutput.progressCode) &&
        Objects.equals(this.progressMessage, getStatusOutput.progressMessage) &&
        Objects.equals(this.carrier, getStatusOutput.carrier) &&
        Objects.equals(this.trackingNumber, getStatusOutput.trackingNumber) &&
        Objects.equals(this.logBucket, getStatusOutput.logBucket) &&
        Objects.equals(this.logKey, getStatusOutput.logKey) &&
        Objects.equals(this.errorCount, getStatusOutput.errorCount) &&
        Objects.equals(this.signature, getStatusOutput.signature) &&
        Objects.equals(this.signatureFileContents, getStatusOutput.signatureFileContents) &&
        Objects.equals(this.currentManifest, getStatusOutput.currentManifest) &&
        Objects.equals(this.creationDate, getStatusOutput.creationDate) &&
        Objects.equals(this.artifactList, getStatusOutput.artifactList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, jobType, locationCode, locationMessage, progressCode, progressMessage, carrier, trackingNumber, logBucket, logKey, errorCount, signature, signatureFileContents, currentManifest, creationDate, artifactList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetStatusOutput {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    locationMessage: ").append(toIndentedString(locationMessage)).append("\n");
    sb.append("    progressCode: ").append(toIndentedString(progressCode)).append("\n");
    sb.append("    progressMessage: ").append(toIndentedString(progressMessage)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    logBucket: ").append(toIndentedString(logBucket)).append("\n");
    sb.append("    logKey: ").append(toIndentedString(logKey)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    signatureFileContents: ").append(toIndentedString(signatureFileContents)).append("\n");
    sb.append("    currentManifest: ").append(toIndentedString(currentManifest)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    artifactList: ").append(toIndentedString(artifactList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobId");
    openapiFields.add("JobType");
    openapiFields.add("LocationCode");
    openapiFields.add("LocationMessage");
    openapiFields.add("ProgressCode");
    openapiFields.add("ProgressMessage");
    openapiFields.add("Carrier");
    openapiFields.add("TrackingNumber");
    openapiFields.add("LogBucket");
    openapiFields.add("LogKey");
    openapiFields.add("ErrorCount");
    openapiFields.add("Signature");
    openapiFields.add("SignatureFileContents");
    openapiFields.add("CurrentManifest");
    openapiFields.add("CreationDate");
    openapiFields.add("ArtifactList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetStatusOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetStatusOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetStatusOutput is not found in the empty JSON string", GetStatusOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetStatusOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetStatusOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) && !jsonObj.get("JobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobId").toString()));
      }
      // validate the optional field `JobType`
      if (jsonObj.get("JobType") != null && !jsonObj.get("JobType").isJsonNull()) {
        JobType.validateJsonElement(jsonObj.get("JobType"));
      }
      if ((jsonObj.get("LocationCode") != null && !jsonObj.get("LocationCode").isJsonNull()) && !jsonObj.get("LocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocationCode").toString()));
      }
      if ((jsonObj.get("LocationMessage") != null && !jsonObj.get("LocationMessage").isJsonNull()) && !jsonObj.get("LocationMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocationMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocationMessage").toString()));
      }
      if ((jsonObj.get("ProgressCode") != null && !jsonObj.get("ProgressCode").isJsonNull()) && !jsonObj.get("ProgressCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProgressCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProgressCode").toString()));
      }
      if ((jsonObj.get("ProgressMessage") != null && !jsonObj.get("ProgressMessage").isJsonNull()) && !jsonObj.get("ProgressMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProgressMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProgressMessage").toString()));
      }
      if ((jsonObj.get("Carrier") != null && !jsonObj.get("Carrier").isJsonNull()) && !jsonObj.get("Carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Carrier").toString()));
      }
      if ((jsonObj.get("TrackingNumber") != null && !jsonObj.get("TrackingNumber").isJsonNull()) && !jsonObj.get("TrackingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingNumber").toString()));
      }
      if ((jsonObj.get("LogBucket") != null && !jsonObj.get("LogBucket").isJsonNull()) && !jsonObj.get("LogBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogBucket").toString()));
      }
      if ((jsonObj.get("LogKey") != null && !jsonObj.get("LogKey").isJsonNull()) && !jsonObj.get("LogKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogKey").toString()));
      }
      if ((jsonObj.get("Signature") != null && !jsonObj.get("Signature").isJsonNull()) && !jsonObj.get("Signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Signature").toString()));
      }
      if ((jsonObj.get("SignatureFileContents") != null && !jsonObj.get("SignatureFileContents").isJsonNull()) && !jsonObj.get("SignatureFileContents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SignatureFileContents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SignatureFileContents").toString()));
      }
      if ((jsonObj.get("CurrentManifest") != null && !jsonObj.get("CurrentManifest").isJsonNull()) && !jsonObj.get("CurrentManifest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentManifest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentManifest").toString()));
      }
      if (jsonObj.get("ArtifactList") != null && !jsonObj.get("ArtifactList").isJsonNull()) {
        JsonArray jsonArrayartifactList = jsonObj.getAsJsonArray("ArtifactList");
        if (jsonArrayartifactList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ArtifactList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ArtifactList` to be an array in the JSON string but got `%s`", jsonObj.get("ArtifactList").toString()));
          }

          // validate the optional field `ArtifactList` (array)
          for (int i = 0; i < jsonArrayartifactList.size(); i++) {
            Artifact.validateJsonElement(jsonArrayartifactList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetStatusOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetStatusOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetStatusOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetStatusOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetStatusOutput>() {
           @Override
           public void write(JsonWriter out, GetStatusOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetStatusOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetStatusOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetStatusOutput
   * @throws IOException if the JSON string is invalid with respect to GetStatusOutput
   */
  public static GetStatusOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetStatusOutput.class);
  }

  /**
   * Convert an instance of GetStatusOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

