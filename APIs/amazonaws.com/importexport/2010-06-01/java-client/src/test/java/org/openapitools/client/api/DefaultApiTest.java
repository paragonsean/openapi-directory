/*
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BucketPermissionException;
import org.openapitools.client.model.CancelJobInput;
import org.openapitools.client.model.CancelJobOutput;
import org.openapitools.client.model.CanceledJobIdException;
import org.openapitools.client.model.CreateJobInput;
import org.openapitools.client.model.CreateJobOutput;
import org.openapitools.client.model.CreateJobQuotaExceededException;
import org.openapitools.client.model.ExpiredJobIdException;
import org.openapitools.client.model.GetShippingLabelInput;
import org.openapitools.client.model.GetShippingLabelOutput;
import org.openapitools.client.model.GetStatusInput;
import org.openapitools.client.model.GetStatusOutput;
import org.openapitools.client.model.InvalidAccessKeyIdException;
import org.openapitools.client.model.InvalidAddressException;
import org.openapitools.client.model.InvalidCustomsException;
import org.openapitools.client.model.InvalidFileSystemException;
import org.openapitools.client.model.InvalidJobIdException;
import org.openapitools.client.model.InvalidManifestFieldException;
import org.openapitools.client.model.InvalidParameterException;
import org.openapitools.client.model.InvalidVersionException;
import org.openapitools.client.model.ListJobsInput;
import org.openapitools.client.model.ListJobsOutput;
import org.openapitools.client.model.MalformedManifestException;
import org.openapitools.client.model.MissingCustomsException;
import org.openapitools.client.model.MissingManifestFieldException;
import org.openapitools.client.model.MissingParameterException;
import org.openapitools.client.model.MultipleRegionsException;
import org.openapitools.client.model.NoSuchBucketException;
import org.openapitools.client.model.UnableToCancelJobIdException;
import org.openapitools.client.model.UnableToUpdateJobIdException;
import org.openapitools.client.model.UpdateJobInput;
import org.openapitools.client.model.UpdateJobOutput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCancelJobTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String jobId = null;
        String operation = null;
        String action = null;
        String version = null;
        String apIVersion = null;
        CancelJobOutput response = api.gETCancelJob(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion);
        // TODO: test validations
    }

    /**
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateJobTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String jobType = null;
        String manifest = null;
        Boolean validateOnly = null;
        String operation = null;
        String action = null;
        String version = null;
        String manifestAddendum = null;
        String apIVersion = null;
        CreateJobOutput response = api.gETCreateJob(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobType, manifest, validateOnly, operation, action, version, manifestAddendum, apIVersion);
        // TODO: test validations
    }

    /**
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetShippingLabelTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        List<String> jobIds = null;
        String operation = null;
        String action = null;
        String version = null;
        String name = null;
        String company = null;
        String phoneNumber = null;
        String country = null;
        String stateOrProvince = null;
        String city = null;
        String postalCode = null;
        String street1 = null;
        String street2 = null;
        String street3 = null;
        String apIVersion = null;
        GetShippingLabelOutput response = api.gETGetShippingLabel(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobIds, operation, action, version, name, company, phoneNumber, country, stateOrProvince, city, postalCode, street1, street2, street3, apIVersion);
        // TODO: test validations
    }

    /**
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetStatusTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String jobId = null;
        String operation = null;
        String action = null;
        String version = null;
        String apIVersion = null;
        GetStatusOutput response = api.gETGetStatus(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, apIVersion);
        // TODO: test validations
    }

    /**
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListJobsTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String operation = null;
        String action = null;
        String version = null;
        Integer maxJobs = null;
        String marker = null;
        String apIVersion = null;
        ListJobsOutput response = api.gETListJobs(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, apIVersion);
        // TODO: test validations
    }

    /**
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETUpdateJobTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String jobId = null;
        String manifest = null;
        String jobType = null;
        Boolean validateOnly = null;
        String operation = null;
        String action = null;
        String version = null;
        String apIVersion = null;
        UpdateJobOutput response = api.gETUpdateJob(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, manifest, jobType, validateOnly, operation, action, version, apIVersion);
        // TODO: test validations
    }

    /**
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCancelJobTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String operation = null;
        String action = null;
        String version = null;
        CancelJobInput cancelJobInput = null;
        CancelJobOutput response = api.pOSTCancelJob(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, cancelJobInput);
        // TODO: test validations
    }

    /**
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateJobTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String operation = null;
        String action = null;
        String version = null;
        CreateJobInput createJobInput = null;
        CreateJobOutput response = api.pOSTCreateJob(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, createJobInput);
        // TODO: test validations
    }

    /**
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetShippingLabelTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String operation = null;
        String action = null;
        String version = null;
        GetShippingLabelInput getShippingLabelInput = null;
        GetShippingLabelOutput response = api.pOSTGetShippingLabel(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getShippingLabelInput);
        // TODO: test validations
    }

    /**
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetStatusTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String operation = null;
        String action = null;
        String version = null;
        GetStatusInput getStatusInput = null;
        GetStatusOutput response = api.pOSTGetStatus(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, getStatusInput);
        // TODO: test validations
    }

    /**
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListJobsTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String operation = null;
        String action = null;
        String version = null;
        String maxJobs = null;
        String marker = null;
        ListJobsInput listJobsInput = null;
        ListJobsOutput response = api.pOSTListJobs(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, maxJobs, marker, listJobsInput);
        // TODO: test validations
    }

    /**
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTUpdateJobTest() throws ApiException {
        String awSAccessKeyId = null;
        String signatureMethod = null;
        String signatureVersion = null;
        String timestamp = null;
        String signature = null;
        String operation = null;
        String action = null;
        String version = null;
        UpdateJobInput updateJobInput = null;
        UpdateJobOutput response = api.pOSTUpdateJob(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, updateJobInput);
        // TODO: test validations
    }

}
