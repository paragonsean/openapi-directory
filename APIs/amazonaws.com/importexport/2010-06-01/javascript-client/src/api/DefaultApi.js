/**
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BucketPermissionException from '../model/BucketPermissionException';
import CancelJobInput from '../model/CancelJobInput';
import CancelJobOutput from '../model/CancelJobOutput';
import CanceledJobIdException from '../model/CanceledJobIdException';
import CreateJobInput from '../model/CreateJobInput';
import CreateJobOutput from '../model/CreateJobOutput';
import CreateJobQuotaExceededException from '../model/CreateJobQuotaExceededException';
import ExpiredJobIdException from '../model/ExpiredJobIdException';
import GetShippingLabelInput from '../model/GetShippingLabelInput';
import GetShippingLabelOutput from '../model/GetShippingLabelOutput';
import GetStatusInput from '../model/GetStatusInput';
import GetStatusOutput from '../model/GetStatusOutput';
import InvalidAccessKeyIdException from '../model/InvalidAccessKeyIdException';
import InvalidAddressException from '../model/InvalidAddressException';
import InvalidCustomsException from '../model/InvalidCustomsException';
import InvalidFileSystemException from '../model/InvalidFileSystemException';
import InvalidJobIdException from '../model/InvalidJobIdException';
import InvalidManifestFieldException from '../model/InvalidManifestFieldException';
import InvalidParameterException from '../model/InvalidParameterException';
import InvalidVersionException from '../model/InvalidVersionException';
import ListJobsInput from '../model/ListJobsInput';
import ListJobsOutput from '../model/ListJobsOutput';
import MalformedManifestException from '../model/MalformedManifestException';
import MissingCustomsException from '../model/MissingCustomsException';
import MissingManifestFieldException from '../model/MissingManifestFieldException';
import MissingParameterException from '../model/MissingParameterException';
import MultipleRegionsException from '../model/MultipleRegionsException';
import NoSuchBucketException from '../model/NoSuchBucketException';
import UnableToCancelJobIdException from '../model/UnableToCancelJobIdException';
import UnableToUpdateJobIdException from '../model/UnableToUpdateJobIdException';
import UpdateJobInput from '../model/UpdateJobInput';
import UpdateJobOutput from '../model/UpdateJobOutput';

/**
* Default service.
* @module api/DefaultApi
* @version 2010-06-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETCancelJob operation.
     * @callback module:api/DefaultApi~gETCancelJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} jobId 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [aPIVersion] 
     * @param {module:api/DefaultApi~gETCancelJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelJobOutput}
     */
    gETCancelJob(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETCancelJob");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETCancelJob");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETCancelJob");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETCancelJob");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETCancelJob");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling gETCancelJob");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling gETCancelJob");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCancelJob");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCancelJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'JobId': jobId,
        'APIVersion': opts['aPIVersion'],
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CancelJobOutput;
      return this.apiClient.callApi(
        '/#Operation=CancelJob&Action=CancelJob', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateJob operation.
     * @callback module:api/DefaultApi~gETCreateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {module:model/String} jobType 
     * @param {String} manifest 
     * @param {Boolean} validateOnly 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [manifestAddendum] 
     * @param {String} [aPIVersion] 
     * @param {module:api/DefaultApi~gETCreateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateJobOutput}
     */
    gETCreateJob(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobType, manifest, validateOnly, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETCreateJob");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETCreateJob");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETCreateJob");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETCreateJob");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETCreateJob");
      }
      // verify the required parameter 'jobType' is set
      if (jobType === undefined || jobType === null) {
        throw new Error("Missing the required parameter 'jobType' when calling gETCreateJob");
      }
      // verify the required parameter 'manifest' is set
      if (manifest === undefined || manifest === null) {
        throw new Error("Missing the required parameter 'manifest' when calling gETCreateJob");
      }
      // verify the required parameter 'validateOnly' is set
      if (validateOnly === undefined || validateOnly === null) {
        throw new Error("Missing the required parameter 'validateOnly' when calling gETCreateJob");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling gETCreateJob");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateJob");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'JobType': jobType,
        'Manifest': manifest,
        'ManifestAddendum': opts['manifestAddendum'],
        'ValidateOnly': validateOnly,
        'APIVersion': opts['aPIVersion'],
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateJobOutput;
      return this.apiClient.callApi(
        '/#Operation=CreateJob&Action=CreateJob', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETGetShippingLabel operation.
     * @callback module:api/DefaultApi~gETGetShippingLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShippingLabelOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {Array.<String>} jobIds 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [company] 
     * @param {String} [phoneNumber] 
     * @param {String} [country] 
     * @param {String} [stateOrProvince] 
     * @param {String} [city] 
     * @param {String} [postalCode] 
     * @param {String} [street1] 
     * @param {String} [street2] 
     * @param {String} [street3] 
     * @param {String} [aPIVersion] 
     * @param {module:api/DefaultApi~gETGetShippingLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShippingLabelOutput}
     */
    gETGetShippingLabel(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobIds, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETGetShippingLabel");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETGetShippingLabel");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETGetShippingLabel");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETGetShippingLabel");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETGetShippingLabel");
      }
      // verify the required parameter 'jobIds' is set
      if (jobIds === undefined || jobIds === null) {
        throw new Error("Missing the required parameter 'jobIds' when calling gETGetShippingLabel");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling gETGetShippingLabel");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETGetShippingLabel");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETGetShippingLabel");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'jobIds': this.apiClient.buildCollectionParam(jobIds, 'multi'),
        'name': opts['name'],
        'company': opts['company'],
        'phoneNumber': opts['phoneNumber'],
        'country': opts['country'],
        'stateOrProvince': opts['stateOrProvince'],
        'city': opts['city'],
        'postalCode': opts['postalCode'],
        'street1': opts['street1'],
        'street2': opts['street2'],
        'street3': opts['street3'],
        'APIVersion': opts['aPIVersion'],
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetShippingLabelOutput;
      return this.apiClient.callApi(
        '/#Operation=GetShippingLabel&Action=GetShippingLabel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETGetStatus operation.
     * @callback module:api/DefaultApi~gETGetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStatusOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} jobId 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [aPIVersion] 
     * @param {module:api/DefaultApi~gETGetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStatusOutput}
     */
    gETGetStatus(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETGetStatus");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETGetStatus");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETGetStatus");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETGetStatus");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETGetStatus");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling gETGetStatus");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling gETGetStatus");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETGetStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETGetStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'JobId': jobId,
        'APIVersion': opts['aPIVersion'],
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetStatusOutput;
      return this.apiClient.callApi(
        '/#Operation=GetStatus&Action=GetStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETListJobs operation.
     * @callback module:api/DefaultApi~gETListJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJobsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxJobs] 
     * @param {String} [marker] 
     * @param {String} [aPIVersion] 
     * @param {module:api/DefaultApi~gETListJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJobsOutput}
     */
    gETListJobs(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETListJobs");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETListJobs");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETListJobs");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETListJobs");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETListJobs");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling gETListJobs");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETListJobs");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETListJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'MaxJobs': opts['maxJobs'],
        'Marker': opts['marker'],
        'APIVersion': opts['aPIVersion'],
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListJobsOutput;
      return this.apiClient.callApi(
        '/#Operation=ListJobs&Action=ListJobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateJob operation.
     * @callback module:api/DefaultApi~gETUpdateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} jobId 
     * @param {String} manifest 
     * @param {module:model/String} jobType 
     * @param {Boolean} validateOnly 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [aPIVersion] 
     * @param {module:api/DefaultApi~gETUpdateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateJobOutput}
     */
    gETUpdateJob(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, jobId, manifest, jobType, validateOnly, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETUpdateJob");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETUpdateJob");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETUpdateJob");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETUpdateJob");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETUpdateJob");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling gETUpdateJob");
      }
      // verify the required parameter 'manifest' is set
      if (manifest === undefined || manifest === null) {
        throw new Error("Missing the required parameter 'manifest' when calling gETUpdateJob");
      }
      // verify the required parameter 'jobType' is set
      if (jobType === undefined || jobType === null) {
        throw new Error("Missing the required parameter 'jobType' when calling gETUpdateJob");
      }
      // verify the required parameter 'validateOnly' is set
      if (validateOnly === undefined || validateOnly === null) {
        throw new Error("Missing the required parameter 'validateOnly' when calling gETUpdateJob");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling gETUpdateJob");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateJob");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'JobId': jobId,
        'Manifest': manifest,
        'JobType': jobType,
        'ValidateOnly': validateOnly,
        'APIVersion': opts['aPIVersion'],
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateJobOutput;
      return this.apiClient.callApi(
        '/#Operation=UpdateJob&Action=UpdateJob', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCancelJob operation.
     * @callback module:api/DefaultApi~pOSTCancelJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelJobInput} [cancelJobInput] 
     * @param {module:api/DefaultApi~pOSTCancelJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelJobOutput}
     */
    pOSTCancelJob(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['cancelJobInput'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTCancelJob");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTCancelJob");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTCancelJob");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTCancelJob");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTCancelJob");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling pOSTCancelJob");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCancelJob");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCancelJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CancelJobOutput;
      return this.apiClient.callApi(
        '/#Operation=CancelJob&Action=CancelJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateJob operation.
     * @callback module:api/DefaultApi~pOSTCreateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateJobInput} [createJobInput] 
     * @param {module:api/DefaultApi~pOSTCreateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateJobOutput}
     */
    pOSTCreateJob(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createJobInput'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTCreateJob");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTCreateJob");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTCreateJob");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTCreateJob");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTCreateJob");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling pOSTCreateJob");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateJob");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateJobOutput;
      return this.apiClient.callApi(
        '/#Operation=CreateJob&Action=CreateJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTGetShippingLabel operation.
     * @callback module:api/DefaultApi~pOSTGetShippingLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShippingLabelOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetShippingLabelInput} [getShippingLabelInput] 
     * @param {module:api/DefaultApi~pOSTGetShippingLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShippingLabelOutput}
     */
    pOSTGetShippingLabel(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['getShippingLabelInput'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTGetShippingLabel");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTGetShippingLabel");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTGetShippingLabel");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTGetShippingLabel");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTGetShippingLabel");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling pOSTGetShippingLabel");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTGetShippingLabel");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTGetShippingLabel");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = GetShippingLabelOutput;
      return this.apiClient.callApi(
        '/#Operation=GetShippingLabel&Action=GetShippingLabel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTGetStatus operation.
     * @callback module:api/DefaultApi~pOSTGetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStatusOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetStatusInput} [getStatusInput] 
     * @param {module:api/DefaultApi~pOSTGetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStatusOutput}
     */
    pOSTGetStatus(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['getStatusInput'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTGetStatus");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTGetStatus");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTGetStatus");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTGetStatus");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTGetStatus");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling pOSTGetStatus");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTGetStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTGetStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = GetStatusOutput;
      return this.apiClient.callApi(
        '/#Operation=GetStatus&Action=GetStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTListJobs operation.
     * @callback module:api/DefaultApi~pOSTListJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJobsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [maxJobs] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/ListJobsInput} [listJobsInput] 
     * @param {module:api/DefaultApi~pOSTListJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJobsOutput}
     */
    pOSTListJobs(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['listJobsInput'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTListJobs");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTListJobs");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTListJobs");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTListJobs");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTListJobs");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling pOSTListJobs");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTListJobs");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTListJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'MaxJobs': opts['maxJobs'],
        'Marker': opts['marker'],
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ListJobsOutput;
      return this.apiClient.callApi(
        '/#Operation=ListJobs&Action=ListJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateJob operation.
     * @callback module:api/DefaultApi~pOSTUpdateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {module:model/String} operation 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateJobInput} [updateJobInput] 
     * @param {module:api/DefaultApi~pOSTUpdateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateJobOutput}
     */
    pOSTUpdateJob(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, operation, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateJobInput'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTUpdateJob");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTUpdateJob");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTUpdateJob");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTUpdateJob");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTUpdateJob");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling pOSTUpdateJob");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateJob");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Operation': operation,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateJobOutput;
      return this.apiClient.callApi(
        '/#Operation=UpdateJob&Action=UpdateJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
