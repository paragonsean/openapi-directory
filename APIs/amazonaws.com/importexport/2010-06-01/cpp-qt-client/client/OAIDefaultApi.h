/**
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBucketPermissionException.h"
#include "OAICancelJobInput.h"
#include "OAICancelJobOutput.h"
#include "OAICanceledJobIdException.h"
#include "OAICreateJobInput.h"
#include "OAICreateJobOutput.h"
#include "OAICreateJobQuotaExceededException.h"
#include "OAIExpiredJobIdException.h"
#include "OAIGetShippingLabelInput.h"
#include "OAIGetShippingLabelOutput.h"
#include "OAIGetStatusInput.h"
#include "OAIGetStatusOutput.h"
#include "OAIInvalidAccessKeyIdException.h"
#include "OAIInvalidAddressException.h"
#include "OAIInvalidCustomsException.h"
#include "OAIInvalidFileSystemException.h"
#include "OAIInvalidJobIdException.h"
#include "OAIInvalidManifestFieldException.h"
#include "OAIInvalidParameterException.h"
#include "OAIInvalidVersionException.h"
#include "OAIListJobsInput.h"
#include "OAIListJobsOutput.h"
#include "OAIMalformedManifestException.h"
#include "OAIMissingCustomsException.h"
#include "OAIMissingManifestFieldException.h"
#include "OAIMissingParameterException.h"
#include "OAIMultipleRegionsException.h"
#include "OAINoSuchBucketException.h"
#include "OAIUnableToCancelJobIdException.h"
#include "OAIUnableToUpdateJobIdException.h"
#include "OAIUpdateJobInput.h"
#include "OAIUpdateJobOutput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  api_version QString [optional]
    */
    virtual void gETCancelJob(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &job_id, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  job_type QString [required]
    * @param[in]  manifest QString [required]
    * @param[in]  validate_only bool [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  manifest_addendum QString [optional]
    * @param[in]  api_version QString [optional]
    */
    virtual void gETCreateJob(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &job_type, const QString &manifest, const bool &validate_only, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &manifest_addendum = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  job_ids QList<QString> [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  company QString [optional]
    * @param[in]  phone_number QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  state_or_province QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  street1 QString [optional]
    * @param[in]  street2 QString [optional]
    * @param[in]  street3 QString [optional]
    * @param[in]  api_version QString [optional]
    */
    virtual void gETGetShippingLabel(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QList<QString> &job_ids, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state_or_province = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  api_version QString [optional]
    */
    virtual void gETGetStatus(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &job_id, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  max_jobs qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  api_version QString [optional]
    */
    virtual void gETListJobs(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<qint32> &max_jobs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  manifest QString [required]
    * @param[in]  job_type QString [required]
    * @param[in]  validate_only bool [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  api_version QString [optional]
    */
    virtual void gETUpdateJob(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &job_id, const QString &manifest, const QString &job_type, const bool &validate_only, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_cancel_job_input OAICancelJobInput [optional]
    */
    virtual void pOSTCancelJob(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAICancelJobInput> &oai_cancel_job_input = ::OpenAPI::OptionalParam<OAICancelJobInput>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_create_job_input OAICreateJobInput [optional]
    */
    virtual void pOSTCreateJob(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAICreateJobInput> &oai_create_job_input = ::OpenAPI::OptionalParam<OAICreateJobInput>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_get_shipping_label_input OAIGetShippingLabelInput [optional]
    */
    virtual void pOSTGetShippingLabel(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIGetShippingLabelInput> &oai_get_shipping_label_input = ::OpenAPI::OptionalParam<OAIGetShippingLabelInput>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_get_status_input OAIGetStatusInput [optional]
    */
    virtual void pOSTGetStatus(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIGetStatusInput> &oai_get_status_input = ::OpenAPI::OptionalParam<OAIGetStatusInput>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  max_jobs QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_list_jobs_input OAIListJobsInput [optional]
    */
    virtual void pOSTListJobs(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &max_jobs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListJobsInput> &oai_list_jobs_input = ::OpenAPI::OptionalParam<OAIListJobsInput>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_update_job_input OAIUpdateJobInput [optional]
    */
    virtual void pOSTUpdateJob(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &operation, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIUpdateJobInput> &oai_update_job_input = ::OpenAPI::OptionalParam<OAIUpdateJobInput>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETCancelJobCallback(OAIHttpRequestWorker *worker);
    void gETCreateJobCallback(OAIHttpRequestWorker *worker);
    void gETGetShippingLabelCallback(OAIHttpRequestWorker *worker);
    void gETGetStatusCallback(OAIHttpRequestWorker *worker);
    void gETListJobsCallback(OAIHttpRequestWorker *worker);
    void gETUpdateJobCallback(OAIHttpRequestWorker *worker);
    void pOSTCancelJobCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateJobCallback(OAIHttpRequestWorker *worker);
    void pOSTGetShippingLabelCallback(OAIHttpRequestWorker *worker);
    void pOSTGetStatusCallback(OAIHttpRequestWorker *worker);
    void pOSTListJobsCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateJobCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETCancelJobSignal(OAICancelJobOutput summary);
    void gETCreateJobSignal(OAICreateJobOutput summary);
    void gETGetShippingLabelSignal(OAIGetShippingLabelOutput summary);
    void gETGetStatusSignal(OAIGetStatusOutput summary);
    void gETListJobsSignal(OAIListJobsOutput summary);
    void gETUpdateJobSignal(OAIUpdateJobOutput summary);
    void pOSTCancelJobSignal(OAICancelJobOutput summary);
    void pOSTCreateJobSignal(OAICreateJobOutput summary);
    void pOSTGetShippingLabelSignal(OAIGetShippingLabelOutput summary);
    void pOSTGetStatusSignal(OAIGetStatusOutput summary);
    void pOSTListJobsSignal(OAIListJobsOutput summary);
    void pOSTUpdateJobSignal(OAIUpdateJobOutput summary);


    void gETCancelJobSignalFull(OAIHttpRequestWorker *worker, OAICancelJobOutput summary);
    void gETCreateJobSignalFull(OAIHttpRequestWorker *worker, OAICreateJobOutput summary);
    void gETGetShippingLabelSignalFull(OAIHttpRequestWorker *worker, OAIGetShippingLabelOutput summary);
    void gETGetStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetStatusOutput summary);
    void gETListJobsSignalFull(OAIHttpRequestWorker *worker, OAIListJobsOutput summary);
    void gETUpdateJobSignalFull(OAIHttpRequestWorker *worker, OAIUpdateJobOutput summary);
    void pOSTCancelJobSignalFull(OAIHttpRequestWorker *worker, OAICancelJobOutput summary);
    void pOSTCreateJobSignalFull(OAIHttpRequestWorker *worker, OAICreateJobOutput summary);
    void pOSTGetShippingLabelSignalFull(OAIHttpRequestWorker *worker, OAIGetShippingLabelOutput summary);
    void pOSTGetStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetStatusOutput summary);
    void pOSTListJobsSignalFull(OAIHttpRequestWorker *worker, OAIListJobsOutput summary);
    void pOSTUpdateJobSignalFull(OAIHttpRequestWorker *worker, OAIUpdateJobOutput summary);

    Q_DECL_DEPRECATED_X("Use gETCancelJobSignalError() instead")
    void gETCancelJobSignalE(OAICancelJobOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCancelJobSignalError(OAICancelJobOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateJobSignalError() instead")
    void gETCreateJobSignalE(OAICreateJobOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateJobSignalError(OAICreateJobOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetShippingLabelSignalError() instead")
    void gETGetShippingLabelSignalE(OAIGetShippingLabelOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetShippingLabelSignalError(OAIGetShippingLabelOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetStatusSignalError() instead")
    void gETGetStatusSignalE(OAIGetStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetStatusSignalError(OAIGetStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListJobsSignalError() instead")
    void gETListJobsSignalE(OAIListJobsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListJobsSignalError(OAIListJobsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateJobSignalError() instead")
    void gETUpdateJobSignalE(OAIUpdateJobOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateJobSignalError(OAIUpdateJobOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCancelJobSignalError() instead")
    void pOSTCancelJobSignalE(OAICancelJobOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCancelJobSignalError(OAICancelJobOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateJobSignalError() instead")
    void pOSTCreateJobSignalE(OAICreateJobOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateJobSignalError(OAICreateJobOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetShippingLabelSignalError() instead")
    void pOSTGetShippingLabelSignalE(OAIGetShippingLabelOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetShippingLabelSignalError(OAIGetShippingLabelOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetStatusSignalError() instead")
    void pOSTGetStatusSignalE(OAIGetStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetStatusSignalError(OAIGetStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListJobsSignalError() instead")
    void pOSTListJobsSignalE(OAIListJobsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListJobsSignalError(OAIListJobsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateJobSignalError() instead")
    void pOSTUpdateJobSignalE(OAIUpdateJobOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateJobSignalError(OAIUpdateJobOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETCancelJobSignalErrorFull() instead")
    void gETCancelJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCancelJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateJobSignalErrorFull() instead")
    void gETCreateJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetShippingLabelSignalErrorFull() instead")
    void gETGetShippingLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetShippingLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetStatusSignalErrorFull() instead")
    void gETGetStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListJobsSignalErrorFull() instead")
    void gETListJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateJobSignalErrorFull() instead")
    void gETUpdateJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCancelJobSignalErrorFull() instead")
    void pOSTCancelJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCancelJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateJobSignalErrorFull() instead")
    void pOSTCreateJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetShippingLabelSignalErrorFull() instead")
    void pOSTGetShippingLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetShippingLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetStatusSignalErrorFull() instead")
    void pOSTGetStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListJobsSignalErrorFull() instead")
    void pOSTListJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateJobSignalErrorFull() instead")
    void pOSTUpdateJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
