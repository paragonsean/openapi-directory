/**
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetStatusOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetStatusOutput::OAIGetStatusOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetStatusOutput::OAIGetStatusOutput() {
    this->initializeModel();
}

OAIGetStatusOutput::~OAIGetStatusOutput() {}

void OAIGetStatusOutput::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_location_code_isSet = false;
    m_location_code_isValid = false;

    m_location_message_isSet = false;
    m_location_message_isValid = false;

    m_progress_code_isSet = false;
    m_progress_code_isValid = false;

    m_progress_message_isSet = false;
    m_progress_message_isValid = false;

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;

    m_log_bucket_isSet = false;
    m_log_bucket_isValid = false;

    m_log_key_isSet = false;
    m_log_key_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_signature_file_contents_isSet = false;
    m_signature_file_contents_isValid = false;

    m_current_manifest_isSet = false;
    m_current_manifest_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_artifact_list_isSet = false;
    m_artifact_list_isValid = false;
}

void OAIGetStatusOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetStatusOutput::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_location_code_isValid = ::OpenAPI::fromJsonValue(m_location_code, json[QString("LocationCode")]);
    m_location_code_isSet = !json[QString("LocationCode")].isNull() && m_location_code_isValid;

    m_location_message_isValid = ::OpenAPI::fromJsonValue(m_location_message, json[QString("LocationMessage")]);
    m_location_message_isSet = !json[QString("LocationMessage")].isNull() && m_location_message_isValid;

    m_progress_code_isValid = ::OpenAPI::fromJsonValue(m_progress_code, json[QString("ProgressCode")]);
    m_progress_code_isSet = !json[QString("ProgressCode")].isNull() && m_progress_code_isValid;

    m_progress_message_isValid = ::OpenAPI::fromJsonValue(m_progress_message, json[QString("ProgressMessage")]);
    m_progress_message_isSet = !json[QString("ProgressMessage")].isNull() && m_progress_message_isValid;

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("Carrier")]);
    m_carrier_isSet = !json[QString("Carrier")].isNull() && m_carrier_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("TrackingNumber")]);
    m_tracking_number_isSet = !json[QString("TrackingNumber")].isNull() && m_tracking_number_isValid;

    m_log_bucket_isValid = ::OpenAPI::fromJsonValue(m_log_bucket, json[QString("LogBucket")]);
    m_log_bucket_isSet = !json[QString("LogBucket")].isNull() && m_log_bucket_isValid;

    m_log_key_isValid = ::OpenAPI::fromJsonValue(m_log_key, json[QString("LogKey")]);
    m_log_key_isSet = !json[QString("LogKey")].isNull() && m_log_key_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("ErrorCount")]);
    m_error_count_isSet = !json[QString("ErrorCount")].isNull() && m_error_count_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("Signature")]);
    m_signature_isSet = !json[QString("Signature")].isNull() && m_signature_isValid;

    m_signature_file_contents_isValid = ::OpenAPI::fromJsonValue(m_signature_file_contents, json[QString("SignatureFileContents")]);
    m_signature_file_contents_isSet = !json[QString("SignatureFileContents")].isNull() && m_signature_file_contents_isValid;

    m_current_manifest_isValid = ::OpenAPI::fromJsonValue(m_current_manifest, json[QString("CurrentManifest")]);
    m_current_manifest_isSet = !json[QString("CurrentManifest")].isNull() && m_current_manifest_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_artifact_list_isValid = ::OpenAPI::fromJsonValue(m_artifact_list, json[QString("ArtifactList")]);
    m_artifact_list_isSet = !json[QString("ArtifactList")].isNull() && m_artifact_list_isValid;
}

QString OAIGetStatusOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetStatusOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_location_code_isSet) {
        obj.insert(QString("LocationCode"), ::OpenAPI::toJsonValue(m_location_code));
    }
    if (m_location_message_isSet) {
        obj.insert(QString("LocationMessage"), ::OpenAPI::toJsonValue(m_location_message));
    }
    if (m_progress_code_isSet) {
        obj.insert(QString("ProgressCode"), ::OpenAPI::toJsonValue(m_progress_code));
    }
    if (m_progress_message_isSet) {
        obj.insert(QString("ProgressMessage"), ::OpenAPI::toJsonValue(m_progress_message));
    }
    if (m_carrier_isSet) {
        obj.insert(QString("Carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("TrackingNumber"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    if (m_log_bucket_isSet) {
        obj.insert(QString("LogBucket"), ::OpenAPI::toJsonValue(m_log_bucket));
    }
    if (m_log_key_isSet) {
        obj.insert(QString("LogKey"), ::OpenAPI::toJsonValue(m_log_key));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("ErrorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_signature_isSet) {
        obj.insert(QString("Signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_signature_file_contents_isSet) {
        obj.insert(QString("SignatureFileContents"), ::OpenAPI::toJsonValue(m_signature_file_contents));
    }
    if (m_current_manifest_isSet) {
        obj.insert(QString("CurrentManifest"), ::OpenAPI::toJsonValue(m_current_manifest));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_artifact_list.size() > 0) {
        obj.insert(QString("ArtifactList"), ::OpenAPI::toJsonValue(m_artifact_list));
    }
    return obj;
}

QString OAIGetStatusOutput::getJobId() const {
    return m_job_id;
}
void OAIGetStatusOutput::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIGetStatusOutput::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIGetStatusOutput::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIJobType OAIGetStatusOutput::getJobType() const {
    return m_job_type;
}
void OAIGetStatusOutput::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIGetStatusOutput::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIGetStatusOutput::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAIGetStatusOutput::getLocationCode() const {
    return m_location_code;
}
void OAIGetStatusOutput::setLocationCode(const QString &location_code) {
    m_location_code = location_code;
    m_location_code_isSet = true;
}

bool OAIGetStatusOutput::is_location_code_Set() const{
    return m_location_code_isSet;
}

bool OAIGetStatusOutput::is_location_code_Valid() const{
    return m_location_code_isValid;
}

QString OAIGetStatusOutput::getLocationMessage() const {
    return m_location_message;
}
void OAIGetStatusOutput::setLocationMessage(const QString &location_message) {
    m_location_message = location_message;
    m_location_message_isSet = true;
}

bool OAIGetStatusOutput::is_location_message_Set() const{
    return m_location_message_isSet;
}

bool OAIGetStatusOutput::is_location_message_Valid() const{
    return m_location_message_isValid;
}

QString OAIGetStatusOutput::getProgressCode() const {
    return m_progress_code;
}
void OAIGetStatusOutput::setProgressCode(const QString &progress_code) {
    m_progress_code = progress_code;
    m_progress_code_isSet = true;
}

bool OAIGetStatusOutput::is_progress_code_Set() const{
    return m_progress_code_isSet;
}

bool OAIGetStatusOutput::is_progress_code_Valid() const{
    return m_progress_code_isValid;
}

QString OAIGetStatusOutput::getProgressMessage() const {
    return m_progress_message;
}
void OAIGetStatusOutput::setProgressMessage(const QString &progress_message) {
    m_progress_message = progress_message;
    m_progress_message_isSet = true;
}

bool OAIGetStatusOutput::is_progress_message_Set() const{
    return m_progress_message_isSet;
}

bool OAIGetStatusOutput::is_progress_message_Valid() const{
    return m_progress_message_isValid;
}

QString OAIGetStatusOutput::getCarrier() const {
    return m_carrier;
}
void OAIGetStatusOutput::setCarrier(const QString &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAIGetStatusOutput::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAIGetStatusOutput::is_carrier_Valid() const{
    return m_carrier_isValid;
}

QString OAIGetStatusOutput::getTrackingNumber() const {
    return m_tracking_number;
}
void OAIGetStatusOutput::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAIGetStatusOutput::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAIGetStatusOutput::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

QString OAIGetStatusOutput::getLogBucket() const {
    return m_log_bucket;
}
void OAIGetStatusOutput::setLogBucket(const QString &log_bucket) {
    m_log_bucket = log_bucket;
    m_log_bucket_isSet = true;
}

bool OAIGetStatusOutput::is_log_bucket_Set() const{
    return m_log_bucket_isSet;
}

bool OAIGetStatusOutput::is_log_bucket_Valid() const{
    return m_log_bucket_isValid;
}

QString OAIGetStatusOutput::getLogKey() const {
    return m_log_key;
}
void OAIGetStatusOutput::setLogKey(const QString &log_key) {
    m_log_key = log_key;
    m_log_key_isSet = true;
}

bool OAIGetStatusOutput::is_log_key_Set() const{
    return m_log_key_isSet;
}

bool OAIGetStatusOutput::is_log_key_Valid() const{
    return m_log_key_isValid;
}

qint32 OAIGetStatusOutput::getErrorCount() const {
    return m_error_count;
}
void OAIGetStatusOutput::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIGetStatusOutput::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIGetStatusOutput::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QString OAIGetStatusOutput::getSignature() const {
    return m_signature;
}
void OAIGetStatusOutput::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIGetStatusOutput::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIGetStatusOutput::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAIGetStatusOutput::getSignatureFileContents() const {
    return m_signature_file_contents;
}
void OAIGetStatusOutput::setSignatureFileContents(const QString &signature_file_contents) {
    m_signature_file_contents = signature_file_contents;
    m_signature_file_contents_isSet = true;
}

bool OAIGetStatusOutput::is_signature_file_contents_Set() const{
    return m_signature_file_contents_isSet;
}

bool OAIGetStatusOutput::is_signature_file_contents_Valid() const{
    return m_signature_file_contents_isValid;
}

QString OAIGetStatusOutput::getCurrentManifest() const {
    return m_current_manifest;
}
void OAIGetStatusOutput::setCurrentManifest(const QString &current_manifest) {
    m_current_manifest = current_manifest;
    m_current_manifest_isSet = true;
}

bool OAIGetStatusOutput::is_current_manifest_Set() const{
    return m_current_manifest_isSet;
}

bool OAIGetStatusOutput::is_current_manifest_Valid() const{
    return m_current_manifest_isValid;
}

QDateTime OAIGetStatusOutput::getCreationDate() const {
    return m_creation_date;
}
void OAIGetStatusOutput::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGetStatusOutput::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGetStatusOutput::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QList<OAIArtifact> OAIGetStatusOutput::getArtifactList() const {
    return m_artifact_list;
}
void OAIGetStatusOutput::setArtifactList(const QList<OAIArtifact> &artifact_list) {
    m_artifact_list = artifact_list;
    m_artifact_list_isSet = true;
}

bool OAIGetStatusOutput::is_artifact_list_Set() const{
    return m_artifact_list_isSet;
}

bool OAIGetStatusOutput::is_artifact_list_Valid() const{
    return m_artifact_list_isValid;
}

bool OAIGetStatusOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_file_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetStatusOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
