/**
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJobOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJobOutput::OAICreateJobOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJobOutput::OAICreateJobOutput() {
    this->initializeModel();
}

OAICreateJobOutput::~OAICreateJobOutput() {}

void OAICreateJobOutput::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_signature_file_contents_isSet = false;
    m_signature_file_contents_isValid = false;

    m_warning_message_isSet = false;
    m_warning_message_isValid = false;

    m_artifact_list_isSet = false;
    m_artifact_list_isValid = false;
}

void OAICreateJobOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJobOutput::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("Signature")]);
    m_signature_isSet = !json[QString("Signature")].isNull() && m_signature_isValid;

    m_signature_file_contents_isValid = ::OpenAPI::fromJsonValue(m_signature_file_contents, json[QString("SignatureFileContents")]);
    m_signature_file_contents_isSet = !json[QString("SignatureFileContents")].isNull() && m_signature_file_contents_isValid;

    m_warning_message_isValid = ::OpenAPI::fromJsonValue(m_warning_message, json[QString("WarningMessage")]);
    m_warning_message_isSet = !json[QString("WarningMessage")].isNull() && m_warning_message_isValid;

    m_artifact_list_isValid = ::OpenAPI::fromJsonValue(m_artifact_list, json[QString("ArtifactList")]);
    m_artifact_list_isSet = !json[QString("ArtifactList")].isNull() && m_artifact_list_isValid;
}

QString OAICreateJobOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJobOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_signature_isSet) {
        obj.insert(QString("Signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_signature_file_contents_isSet) {
        obj.insert(QString("SignatureFileContents"), ::OpenAPI::toJsonValue(m_signature_file_contents));
    }
    if (m_warning_message_isSet) {
        obj.insert(QString("WarningMessage"), ::OpenAPI::toJsonValue(m_warning_message));
    }
    if (m_artifact_list.size() > 0) {
        obj.insert(QString("ArtifactList"), ::OpenAPI::toJsonValue(m_artifact_list));
    }
    return obj;
}

QString OAICreateJobOutput::getJobId() const {
    return m_job_id;
}
void OAICreateJobOutput::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAICreateJobOutput::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAICreateJobOutput::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIJobType OAICreateJobOutput::getJobType() const {
    return m_job_type;
}
void OAICreateJobOutput::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAICreateJobOutput::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAICreateJobOutput::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAICreateJobOutput::getSignature() const {
    return m_signature;
}
void OAICreateJobOutput::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAICreateJobOutput::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAICreateJobOutput::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAICreateJobOutput::getSignatureFileContents() const {
    return m_signature_file_contents;
}
void OAICreateJobOutput::setSignatureFileContents(const QString &signature_file_contents) {
    m_signature_file_contents = signature_file_contents;
    m_signature_file_contents_isSet = true;
}

bool OAICreateJobOutput::is_signature_file_contents_Set() const{
    return m_signature_file_contents_isSet;
}

bool OAICreateJobOutput::is_signature_file_contents_Valid() const{
    return m_signature_file_contents_isValid;
}

QString OAICreateJobOutput::getWarningMessage() const {
    return m_warning_message;
}
void OAICreateJobOutput::setWarningMessage(const QString &warning_message) {
    m_warning_message = warning_message;
    m_warning_message_isSet = true;
}

bool OAICreateJobOutput::is_warning_message_Set() const{
    return m_warning_message_isSet;
}

bool OAICreateJobOutput::is_warning_message_Valid() const{
    return m_warning_message_isValid;
}

QList<OAIArtifact> OAICreateJobOutput::getArtifactList() const {
    return m_artifact_list;
}
void OAICreateJobOutput::setArtifactList(const QList<OAIArtifact> &artifact_list) {
    m_artifact_list = artifact_list;
    m_artifact_list_isSet = true;
}

bool OAICreateJobOutput::is_artifact_list_Set() const{
    return m_artifact_list_isSet;
}

bool OAICreateJobOutput::is_artifact_list_Valid() const{
    return m_artifact_list_isValid;
}

bool OAICreateJobOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_file_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJobOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
