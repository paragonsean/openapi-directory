/**
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetShippingLabelInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetShippingLabelInput::OAIGetShippingLabelInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetShippingLabelInput::OAIGetShippingLabelInput() {
    this->initializeModel();
}

OAIGetShippingLabelInput::~OAIGetShippingLabelInput() {}

void OAIGetShippingLabelInput::initializeModel() {

    m_job_ids_isSet = false;
    m_job_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_street1_isSet = false;
    m_street1_isValid = false;

    m_street2_isSet = false;
    m_street2_isValid = false;

    m_street3_isSet = false;
    m_street3_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;
}

void OAIGetShippingLabelInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetShippingLabelInput::fromJsonObject(QJsonObject json) {

    m_job_ids_isValid = ::OpenAPI::fromJsonValue(m_job_ids, json[QString("jobIds")]);
    m_job_ids_isSet = !json[QString("jobIds")].isNull() && m_job_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_street1_isValid = ::OpenAPI::fromJsonValue(m_street1, json[QString("street1")]);
    m_street1_isSet = !json[QString("street1")].isNull() && m_street1_isValid;

    m_street2_isValid = ::OpenAPI::fromJsonValue(m_street2, json[QString("street2")]);
    m_street2_isSet = !json[QString("street2")].isNull() && m_street2_isValid;

    m_street3_isValid = ::OpenAPI::fromJsonValue(m_street3, json[QString("street3")]);
    m_street3_isSet = !json[QString("street3")].isNull() && m_street3_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("APIVersion")]);
    m_api_version_isSet = !json[QString("APIVersion")].isNull() && m_api_version_isValid;
}

QString OAIGetShippingLabelInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetShippingLabelInput::asJsonObject() const {
    QJsonObject obj;
    if (m_job_ids.size() > 0) {
        obj.insert(QString("jobIds"), ::OpenAPI::toJsonValue(m_job_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_street1_isSet) {
        obj.insert(QString("street1"), ::OpenAPI::toJsonValue(m_street1));
    }
    if (m_street2_isSet) {
        obj.insert(QString("street2"), ::OpenAPI::toJsonValue(m_street2));
    }
    if (m_street3_isSet) {
        obj.insert(QString("street3"), ::OpenAPI::toJsonValue(m_street3));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("APIVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    return obj;
}

QList<QString> OAIGetShippingLabelInput::getJobIds() const {
    return m_job_ids;
}
void OAIGetShippingLabelInput::setJobIds(const QList<QString> &job_ids) {
    m_job_ids = job_ids;
    m_job_ids_isSet = true;
}

bool OAIGetShippingLabelInput::is_job_ids_Set() const{
    return m_job_ids_isSet;
}

bool OAIGetShippingLabelInput::is_job_ids_Valid() const{
    return m_job_ids_isValid;
}

QString OAIGetShippingLabelInput::getName() const {
    return m_name;
}
void OAIGetShippingLabelInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetShippingLabelInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetShippingLabelInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetShippingLabelInput::getCompany() const {
    return m_company;
}
void OAIGetShippingLabelInput::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIGetShippingLabelInput::is_company_Set() const{
    return m_company_isSet;
}

bool OAIGetShippingLabelInput::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIGetShippingLabelInput::getPhoneNumber() const {
    return m_phone_number;
}
void OAIGetShippingLabelInput::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIGetShippingLabelInput::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIGetShippingLabelInput::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIGetShippingLabelInput::getCountry() const {
    return m_country;
}
void OAIGetShippingLabelInput::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIGetShippingLabelInput::is_country_Set() const{
    return m_country_isSet;
}

bool OAIGetShippingLabelInput::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIGetShippingLabelInput::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIGetShippingLabelInput::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIGetShippingLabelInput::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIGetShippingLabelInput::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

QString OAIGetShippingLabelInput::getCity() const {
    return m_city;
}
void OAIGetShippingLabelInput::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIGetShippingLabelInput::is_city_Set() const{
    return m_city_isSet;
}

bool OAIGetShippingLabelInput::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIGetShippingLabelInput::getPostalCode() const {
    return m_postal_code;
}
void OAIGetShippingLabelInput::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIGetShippingLabelInput::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIGetShippingLabelInput::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIGetShippingLabelInput::getStreet1() const {
    return m_street1;
}
void OAIGetShippingLabelInput::setStreet1(const QString &street1) {
    m_street1 = street1;
    m_street1_isSet = true;
}

bool OAIGetShippingLabelInput::is_street1_Set() const{
    return m_street1_isSet;
}

bool OAIGetShippingLabelInput::is_street1_Valid() const{
    return m_street1_isValid;
}

QString OAIGetShippingLabelInput::getStreet2() const {
    return m_street2;
}
void OAIGetShippingLabelInput::setStreet2(const QString &street2) {
    m_street2 = street2;
    m_street2_isSet = true;
}

bool OAIGetShippingLabelInput::is_street2_Set() const{
    return m_street2_isSet;
}

bool OAIGetShippingLabelInput::is_street2_Valid() const{
    return m_street2_isValid;
}

QString OAIGetShippingLabelInput::getStreet3() const {
    return m_street3;
}
void OAIGetShippingLabelInput::setStreet3(const QString &street3) {
    m_street3 = street3;
    m_street3_isSet = true;
}

bool OAIGetShippingLabelInput::is_street3_Set() const{
    return m_street3_isSet;
}

bool OAIGetShippingLabelInput::is_street3_Valid() const{
    return m_street3_isValid;
}

QString OAIGetShippingLabelInput::getApiVersion() const {
    return m_api_version;
}
void OAIGetShippingLabelInput::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIGetShippingLabelInput::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIGetShippingLabelInput::is_api_version_Valid() const{
    return m_api_version_isValid;
}

bool OAIGetShippingLabelInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetShippingLabelInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_ids_isValid && true;
}

} // namespace OpenAPI
