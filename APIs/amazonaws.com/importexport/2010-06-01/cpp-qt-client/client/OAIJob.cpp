/**
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_is_canceled_isSet = false;
    m_is_canceled_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_is_canceled_isValid = ::OpenAPI::fromJsonValue(m_is_canceled, json[QString("IsCanceled")]);
    m_is_canceled_isSet = !json[QString("IsCanceled")].isNull() && m_is_canceled_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_is_canceled_isSet) {
        obj.insert(QString("IsCanceled"), ::OpenAPI::toJsonValue(m_is_canceled));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    return obj;
}

QString OAIJob::getJobId() const {
    return m_job_id;
}
void OAIJob::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJob::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJob::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QDateTime OAIJob::getCreationDate() const {
    return m_creation_date;
}
void OAIJob::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIJob::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIJob::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIJob::isIsCanceled() const {
    return m_is_canceled;
}
void OAIJob::setIsCanceled(const bool &is_canceled) {
    m_is_canceled = is_canceled;
    m_is_canceled_isSet = true;
}

bool OAIJob::is_is_canceled_Set() const{
    return m_is_canceled_isSet;
}

bool OAIJob::is_is_canceled_Valid() const{
    return m_is_canceled_isValid;
}

OAIJobType OAIJob::getJobType() const {
    return m_job_type;
}
void OAIJob::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIJob::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIJob::is_job_type_Valid() const{
    return m_job_type_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
