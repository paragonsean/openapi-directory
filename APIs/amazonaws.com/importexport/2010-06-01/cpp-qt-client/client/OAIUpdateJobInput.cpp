/**
 * AWS Import/Export
 * <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 *
 * The version of the OpenAPI document: 2010-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateJobInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateJobInput::OAIUpdateJobInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateJobInput::OAIUpdateJobInput() {
    this->initializeModel();
}

OAIUpdateJobInput::~OAIUpdateJobInput() {}

void OAIUpdateJobInput::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_manifest_isSet = false;
    m_manifest_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;
}

void OAIUpdateJobInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateJobInput::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_manifest_isValid = ::OpenAPI::fromJsonValue(m_manifest, json[QString("Manifest")]);
    m_manifest_isSet = !json[QString("Manifest")].isNull() && m_manifest_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("ValidateOnly")]);
    m_validate_only_isSet = !json[QString("ValidateOnly")].isNull() && m_validate_only_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("APIVersion")]);
    m_api_version_isSet = !json[QString("APIVersion")].isNull() && m_api_version_isValid;
}

QString OAIUpdateJobInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateJobInput::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_manifest_isSet) {
        obj.insert(QString("Manifest"), ::OpenAPI::toJsonValue(m_manifest));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("ValidateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("APIVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    return obj;
}

QString OAIUpdateJobInput::getJobId() const {
    return m_job_id;
}
void OAIUpdateJobInput::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIUpdateJobInput::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIUpdateJobInput::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIUpdateJobInput::getManifest() const {
    return m_manifest;
}
void OAIUpdateJobInput::setManifest(const QString &manifest) {
    m_manifest = manifest;
    m_manifest_isSet = true;
}

bool OAIUpdateJobInput::is_manifest_Set() const{
    return m_manifest_isSet;
}

bool OAIUpdateJobInput::is_manifest_Valid() const{
    return m_manifest_isValid;
}

OAIJobType OAIUpdateJobInput::getJobType() const {
    return m_job_type;
}
void OAIUpdateJobInput::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIUpdateJobInput::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIUpdateJobInput::is_job_type_Valid() const{
    return m_job_type_isValid;
}

bool OAIUpdateJobInput::isValidateOnly() const {
    return m_validate_only;
}
void OAIUpdateJobInput::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIUpdateJobInput::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIUpdateJobInput::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

QString OAIUpdateJobInput::getApiVersion() const {
    return m_api_version;
}
void OAIUpdateJobInput::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIUpdateJobInput::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIUpdateJobInput::is_api_version_Valid() const{
    return m_api_version_isValid;
}

bool OAIUpdateJobInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateJobInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_id_isValid && m_manifest_isValid && m_job_type_isValid && m_validate_only_isValid && true;
}

} // namespace OpenAPI
