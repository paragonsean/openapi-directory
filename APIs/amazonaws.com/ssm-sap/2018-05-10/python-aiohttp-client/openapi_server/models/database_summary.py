# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_type import DatabaseType
from openapi_server import util


class DatabaseSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, component_id: str=None, database_id: str=None, database_type: DatabaseType=None, arn: str=None, tags: Dict=None):
        """DatabaseSummary - a model defined in OpenAPI

        :param application_id: The application_id of this DatabaseSummary.
        :param component_id: The component_id of this DatabaseSummary.
        :param database_id: The database_id of this DatabaseSummary.
        :param database_type: The database_type of this DatabaseSummary.
        :param arn: The arn of this DatabaseSummary.
        :param tags: The tags of this DatabaseSummary.
        """
        self.openapi_types = {
            'application_id': str,
            'component_id': str,
            'database_id': str,
            'database_type': DatabaseType,
            'arn': str,
            'tags': Dict
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'component_id': 'ComponentId',
            'database_id': 'DatabaseId',
            'database_type': 'DatabaseType',
            'arn': 'Arn',
            'tags': 'Tags'
        }

        self._application_id = application_id
        self._component_id = component_id
        self._database_id = database_id
        self._database_type = database_type
        self._arn = arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseSummary of this DatabaseSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this DatabaseSummary.


        :return: The application_id of this DatabaseSummary.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this DatabaseSummary.


        :param application_id: The application_id of this DatabaseSummary.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def component_id(self):
        """Gets the component_id of this DatabaseSummary.


        :return: The component_id of this DatabaseSummary.
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this DatabaseSummary.


        :param component_id: The component_id of this DatabaseSummary.
        :type component_id: str
        """

        self._component_id = component_id

    @property
    def database_id(self):
        """Gets the database_id of this DatabaseSummary.


        :return: The database_id of this DatabaseSummary.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this DatabaseSummary.


        :param database_id: The database_id of this DatabaseSummary.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def database_type(self):
        """Gets the database_type of this DatabaseSummary.


        :return: The database_type of this DatabaseSummary.
        :rtype: DatabaseType
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this DatabaseSummary.


        :param database_type: The database_type of this DatabaseSummary.
        :type database_type: DatabaseType
        """

        self._database_type = database_type

    @property
    def arn(self):
        """Gets the arn of this DatabaseSummary.


        :return: The arn of this DatabaseSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DatabaseSummary.


        :param arn: The arn of this DatabaseSummary.
        :type arn: str
        """

        self._arn = arn

    @property
    def tags(self):
        """Gets the tags of this DatabaseSummary.


        :return: The tags of this DatabaseSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DatabaseSummary.


        :param tags: The tags of this DatabaseSummary.
        :type tags: Dict
        """

        self._tags = tags
