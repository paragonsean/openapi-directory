# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, application_arn: str=None, app_registry_arn: str=None):
        """GetApplicationRequest - a model defined in OpenAPI

        :param application_id: The application_id of this GetApplicationRequest.
        :param application_arn: The application_arn of this GetApplicationRequest.
        :param app_registry_arn: The app_registry_arn of this GetApplicationRequest.
        """
        self.openapi_types = {
            'application_id': str,
            'application_arn': str,
            'app_registry_arn': str
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'application_arn': 'ApplicationArn',
            'app_registry_arn': 'AppRegistryArn'
        }

        self._application_id = application_id
        self._application_arn = application_arn
        self._app_registry_arn = app_registry_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetApplication_request of this GetApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this GetApplicationRequest.

        The ID of the application.

        :return: The application_id of this GetApplicationRequest.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this GetApplicationRequest.

        The ID of the application.

        :param application_id: The application_id of this GetApplicationRequest.
        :type application_id: str
        """
        if application_id is not None and not re.search(r'[\w\d]{1,50}', application_id):
            raise ValueError("Invalid value for `application_id`, must be a follow pattern or equal to `/[\w\d]{1,50}/`")

        self._application_id = application_id

    @property
    def application_arn(self):
        """Gets the application_arn of this GetApplicationRequest.

        The Amazon Resource Name (ARN) of the application. 

        :return: The application_arn of this GetApplicationRequest.
        :rtype: str
        """
        return self._application_arn

    @application_arn.setter
    def application_arn(self, application_arn):
        """Sets the application_arn of this GetApplicationRequest.

        The Amazon Resource Name (ARN) of the application. 

        :param application_arn: The application_arn of this GetApplicationRequest.
        :type application_arn: str
        """
        if application_arn is not None and not re.search(r'arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\/.+', application_arn):
            raise ValueError("Invalid value for `application_arn`, must be a follow pattern or equal to `/arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\/.+/`")

        self._application_arn = application_arn

    @property
    def app_registry_arn(self):
        """Gets the app_registry_arn of this GetApplicationRequest.

        The Amazon Resource Name (ARN) of the application registry.

        :return: The app_registry_arn of this GetApplicationRequest.
        :rtype: str
        """
        return self._app_registry_arn

    @app_registry_arn.setter
    def app_registry_arn(self, app_registry_arn):
        """Sets the app_registry_arn of this GetApplicationRequest.

        The Amazon Resource Name (ARN) of the application registry.

        :param app_registry_arn: The app_registry_arn of this GetApplicationRequest.
        :type app_registry_arn: str
        """
        if app_registry_arn is not None and not re.search(r'arn:aws:servicecatalog:[a-z0-9:\/-]+', app_registry_arn):
            raise ValueError("Invalid value for `app_registry_arn`, must be a follow pattern or equal to `/arn:aws:servicecatalog:[a-z0-9:\/-]+/`")

        self._app_registry_arn = app_registry_arn
