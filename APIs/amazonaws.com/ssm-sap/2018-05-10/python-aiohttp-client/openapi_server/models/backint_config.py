# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backint_mode import BackintMode
from openapi_server import util


class BackintConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backint_mode: BackintMode=None, ensure_no_backup_in_process: bool=None):
        """BackintConfig - a model defined in OpenAPI

        :param backint_mode: The backint_mode of this BackintConfig.
        :param ensure_no_backup_in_process: The ensure_no_backup_in_process of this BackintConfig.
        """
        self.openapi_types = {
            'backint_mode': BackintMode,
            'ensure_no_backup_in_process': bool
        }

        self.attribute_map = {
            'backint_mode': 'BackintMode',
            'ensure_no_backup_in_process': 'EnsureNoBackupInProcess'
        }

        self._backint_mode = backint_mode
        self._ensure_no_backup_in_process = ensure_no_backup_in_process

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackintConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackintConfig of this BackintConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backint_mode(self):
        """Gets the backint_mode of this BackintConfig.


        :return: The backint_mode of this BackintConfig.
        :rtype: BackintMode
        """
        return self._backint_mode

    @backint_mode.setter
    def backint_mode(self, backint_mode):
        """Sets the backint_mode of this BackintConfig.


        :param backint_mode: The backint_mode of this BackintConfig.
        :type backint_mode: BackintMode
        """
        if backint_mode is None:
            raise ValueError("Invalid value for `backint_mode`, must not be `None`")

        self._backint_mode = backint_mode

    @property
    def ensure_no_backup_in_process(self):
        """Gets the ensure_no_backup_in_process of this BackintConfig.


        :return: The ensure_no_backup_in_process of this BackintConfig.
        :rtype: bool
        """
        return self._ensure_no_backup_in_process

    @ensure_no_backup_in_process.setter
    def ensure_no_backup_in_process(self, ensure_no_backup_in_process):
        """Sets the ensure_no_backup_in_process of this BackintConfig.


        :param ensure_no_backup_in_process: The ensure_no_backup_in_process of this BackintConfig.
        :type ensure_no_backup_in_process: bool
        """
        if ensure_no_backup_in_process is None:
            raise ValueError("Invalid value for `ensure_no_backup_in_process`, must not be `None`")

        self._ensure_no_backup_in_process = ensure_no_backup_in_process
