# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credential_type import CredentialType
from openapi_server import util


class ApplicationCredential(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_name: str=None, credential_type: CredentialType=None, secret_id: str=None):
        """ApplicationCredential - a model defined in OpenAPI

        :param database_name: The database_name of this ApplicationCredential.
        :param credential_type: The credential_type of this ApplicationCredential.
        :param secret_id: The secret_id of this ApplicationCredential.
        """
        self.openapi_types = {
            'database_name': str,
            'credential_type': CredentialType,
            'secret_id': str
        }

        self.attribute_map = {
            'database_name': 'DatabaseName',
            'credential_type': 'CredentialType',
            'secret_id': 'SecretId'
        }

        self._database_name = database_name
        self._credential_type = credential_type
        self._secret_id = secret_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationCredential':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationCredential of this ApplicationCredential.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_name(self):
        """Gets the database_name of this ApplicationCredential.


        :return: The database_name of this ApplicationCredential.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this ApplicationCredential.


        :param database_name: The database_name of this ApplicationCredential.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def credential_type(self):
        """Gets the credential_type of this ApplicationCredential.


        :return: The credential_type of this ApplicationCredential.
        :rtype: CredentialType
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this ApplicationCredential.


        :param credential_type: The credential_type of this ApplicationCredential.
        :type credential_type: CredentialType
        """
        if credential_type is None:
            raise ValueError("Invalid value for `credential_type`, must not be `None`")

        self._credential_type = credential_type

    @property
    def secret_id(self):
        """Gets the secret_id of this ApplicationCredential.


        :return: The secret_id of this ApplicationCredential.
        :rtype: str
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this ApplicationCredential.


        :param secret_id: The secret_id of this ApplicationCredential.
        :type secret_id: str
        """
        if secret_id is None:
            raise ValueError("Invalid value for `secret_id`, must not be `None`")

        self._secret_id = secret_id
