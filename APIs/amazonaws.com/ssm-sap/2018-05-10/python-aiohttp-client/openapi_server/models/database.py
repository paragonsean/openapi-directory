# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_status import DatabaseStatus
from openapi_server.models.database_type import DatabaseType
from openapi_server import util


class Database(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, component_id: str=None, credentials: List=None, database_id: str=None, database_name: str=None, database_type: DatabaseType=None, arn: str=None, status: DatabaseStatus=None, primary_host: str=None, sql_port: int=None, last_updated: datetime=None):
        """Database - a model defined in OpenAPI

        :param application_id: The application_id of this Database.
        :param component_id: The component_id of this Database.
        :param credentials: The credentials of this Database.
        :param database_id: The database_id of this Database.
        :param database_name: The database_name of this Database.
        :param database_type: The database_type of this Database.
        :param arn: The arn of this Database.
        :param status: The status of this Database.
        :param primary_host: The primary_host of this Database.
        :param sql_port: The sql_port of this Database.
        :param last_updated: The last_updated of this Database.
        """
        self.openapi_types = {
            'application_id': str,
            'component_id': str,
            'credentials': List,
            'database_id': str,
            'database_name': str,
            'database_type': DatabaseType,
            'arn': str,
            'status': DatabaseStatus,
            'primary_host': str,
            'sql_port': int,
            'last_updated': datetime
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'component_id': 'ComponentId',
            'credentials': 'Credentials',
            'database_id': 'DatabaseId',
            'database_name': 'DatabaseName',
            'database_type': 'DatabaseType',
            'arn': 'Arn',
            'status': 'Status',
            'primary_host': 'PrimaryHost',
            'sql_port': 'SQLPort',
            'last_updated': 'LastUpdated'
        }

        self._application_id = application_id
        self._component_id = component_id
        self._credentials = credentials
        self._database_id = database_id
        self._database_name = database_name
        self._database_type = database_type
        self._arn = arn
        self._status = status
        self._primary_host = primary_host
        self._sql_port = sql_port
        self._last_updated = last_updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Database':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Database of this Database.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this Database.


        :return: The application_id of this Database.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Database.


        :param application_id: The application_id of this Database.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def component_id(self):
        """Gets the component_id of this Database.


        :return: The component_id of this Database.
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this Database.


        :param component_id: The component_id of this Database.
        :type component_id: str
        """

        self._component_id = component_id

    @property
    def credentials(self):
        """Gets the credentials of this Database.


        :return: The credentials of this Database.
        :rtype: List
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Database.


        :param credentials: The credentials of this Database.
        :type credentials: List
        """

        self._credentials = credentials

    @property
    def database_id(self):
        """Gets the database_id of this Database.


        :return: The database_id of this Database.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this Database.


        :param database_id: The database_id of this Database.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def database_name(self):
        """Gets the database_name of this Database.


        :return: The database_name of this Database.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this Database.


        :param database_name: The database_name of this Database.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def database_type(self):
        """Gets the database_type of this Database.


        :return: The database_type of this Database.
        :rtype: DatabaseType
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this Database.


        :param database_type: The database_type of this Database.
        :type database_type: DatabaseType
        """

        self._database_type = database_type

    @property
    def arn(self):
        """Gets the arn of this Database.


        :return: The arn of this Database.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Database.


        :param arn: The arn of this Database.
        :type arn: str
        """

        self._arn = arn

    @property
    def status(self):
        """Gets the status of this Database.


        :return: The status of this Database.
        :rtype: DatabaseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Database.


        :param status: The status of this Database.
        :type status: DatabaseStatus
        """

        self._status = status

    @property
    def primary_host(self):
        """Gets the primary_host of this Database.


        :return: The primary_host of this Database.
        :rtype: str
        """
        return self._primary_host

    @primary_host.setter
    def primary_host(self, primary_host):
        """Sets the primary_host of this Database.


        :param primary_host: The primary_host of this Database.
        :type primary_host: str
        """

        self._primary_host = primary_host

    @property
    def sql_port(self):
        """Gets the sql_port of this Database.


        :return: The sql_port of this Database.
        :rtype: int
        """
        return self._sql_port

    @sql_port.setter
    def sql_port(self, sql_port):
        """Sets the sql_port of this Database.


        :param sql_port: The sql_port of this Database.
        :type sql_port: int
        """

        self._sql_port = sql_port

    @property
    def last_updated(self):
        """Gets the last_updated of this Database.


        :return: The last_updated of this Database.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Database.


        :param last_updated: The last_updated of this Database.
        :type last_updated: datetime
        """

        self._last_updated = last_updated
