# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_credential import ApplicationCredential
import re
from openapi_server import util


class RegisterApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, application_type: str=None, instances: List[str]=None, sap_instance_number: str=None, sid: str=None, tags: Dict[str, str]=None, credentials: List[ApplicationCredential]=None):
        """RegisterApplicationRequest - a model defined in OpenAPI

        :param application_id: The application_id of this RegisterApplicationRequest.
        :param application_type: The application_type of this RegisterApplicationRequest.
        :param instances: The instances of this RegisterApplicationRequest.
        :param sap_instance_number: The sap_instance_number of this RegisterApplicationRequest.
        :param sid: The sid of this RegisterApplicationRequest.
        :param tags: The tags of this RegisterApplicationRequest.
        :param credentials: The credentials of this RegisterApplicationRequest.
        """
        self.openapi_types = {
            'application_id': str,
            'application_type': str,
            'instances': List[str],
            'sap_instance_number': str,
            'sid': str,
            'tags': Dict[str, str],
            'credentials': List[ApplicationCredential]
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'application_type': 'ApplicationType',
            'instances': 'Instances',
            'sap_instance_number': 'SapInstanceNumber',
            'sid': 'Sid',
            'tags': 'Tags',
            'credentials': 'Credentials'
        }

        self._application_id = application_id
        self._application_type = application_type
        self._instances = instances
        self._sap_instance_number = sap_instance_number
        self._sid = sid
        self._tags = tags
        self._credentials = credentials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterApplication_request of this RegisterApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this RegisterApplicationRequest.

        The ID of the application.

        :return: The application_id of this RegisterApplicationRequest.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this RegisterApplicationRequest.

        The ID of the application.

        :param application_id: The application_id of this RegisterApplicationRequest.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")
        if application_id is not None and not re.search(r'[\w\d]{1,50}', application_id):
            raise ValueError("Invalid value for `application_id`, must be a follow pattern or equal to `/[\w\d]{1,50}/`")

        self._application_id = application_id

    @property
    def application_type(self):
        """Gets the application_type of this RegisterApplicationRequest.

        The type of the application.

        :return: The application_type of this RegisterApplicationRequest.
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this RegisterApplicationRequest.

        The type of the application.

        :param application_type: The application_type of this RegisterApplicationRequest.
        :type application_type: str
        """
        allowed_values = ["HANA"]  # noqa: E501
        if application_type not in allowed_values:
            raise ValueError(
                "Invalid value for `application_type` ({0}), must be one of {1}"
                .format(application_type, allowed_values)
            )

        self._application_type = application_type

    @property
    def instances(self):
        """Gets the instances of this RegisterApplicationRequest.

        The Amazon EC2 instances on which your SAP application is running.

        :return: The instances of this RegisterApplicationRequest.
        :rtype: List[str]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this RegisterApplicationRequest.

        The Amazon EC2 instances on which your SAP application is running.

        :param instances: The instances of this RegisterApplicationRequest.
        :type instances: List[str]
        """
        if instances is None:
            raise ValueError("Invalid value for `instances`, must not be `None`")
        if instances is not None and len(instances) > 1:
            raise ValueError("Invalid value for `instances`, number of items must be less than or equal to `1`")
        if instances is not None and len(instances) < 1:
            raise ValueError("Invalid value for `instances`, number of items must be greater than or equal to `1`")

        self._instances = instances

    @property
    def sap_instance_number(self):
        """Gets the sap_instance_number of this RegisterApplicationRequest.

        The SAP instance number of the application.

        :return: The sap_instance_number of this RegisterApplicationRequest.
        :rtype: str
        """
        return self._sap_instance_number

    @sap_instance_number.setter
    def sap_instance_number(self, sap_instance_number):
        """Sets the sap_instance_number of this RegisterApplicationRequest.

        The SAP instance number of the application.

        :param sap_instance_number: The sap_instance_number of this RegisterApplicationRequest.
        :type sap_instance_number: str
        """
        if sap_instance_number is not None and not re.search(r'[0-9]{2}', sap_instance_number):
            raise ValueError("Invalid value for `sap_instance_number`, must be a follow pattern or equal to `/[0-9]{2}/`")

        self._sap_instance_number = sap_instance_number

    @property
    def sid(self):
        """Gets the sid of this RegisterApplicationRequest.

        The System ID of the application.

        :return: The sid of this RegisterApplicationRequest.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this RegisterApplicationRequest.

        The System ID of the application.

        :param sid: The sid of this RegisterApplicationRequest.
        :type sid: str
        """
        if sid is not None and not re.search(r'[A-Z][A-Z0-9]{2}', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/[A-Z][A-Z0-9]{2}/`")

        self._sid = sid

    @property
    def tags(self):
        """Gets the tags of this RegisterApplicationRequest.

        The tags to be attached to the SAP application.

        :return: The tags of this RegisterApplicationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RegisterApplicationRequest.

        The tags to be attached to the SAP application.

        :param tags: The tags of this RegisterApplicationRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def credentials(self):
        """Gets the credentials of this RegisterApplicationRequest.

        The credentials of the SAP application.

        :return: The credentials of this RegisterApplicationRequest.
        :rtype: List[ApplicationCredential]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this RegisterApplicationRequest.

        The credentials of the SAP application.

        :param credentials: The credentials of this RegisterApplicationRequest.
        :type credentials: List[ApplicationCredential]
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")
        if credentials is not None and len(credentials) > 20:
            raise ValueError("Invalid value for `credentials`, number of items must be less than or equal to `20`")
        if credentials is not None and len(credentials) < 1:
            raise ValueError("Invalid value for `credentials`, number of items must be greater than or equal to `1`")

        self._credentials = credentials
