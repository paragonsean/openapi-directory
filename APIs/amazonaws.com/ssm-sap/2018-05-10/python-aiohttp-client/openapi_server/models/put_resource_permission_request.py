# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutResourcePermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, source_resource_arn: str=None, resource_arn: str=None):
        """PutResourcePermissionRequest - a model defined in OpenAPI

        :param action_type: The action_type of this PutResourcePermissionRequest.
        :param source_resource_arn: The source_resource_arn of this PutResourcePermissionRequest.
        :param resource_arn: The resource_arn of this PutResourcePermissionRequest.
        """
        self.openapi_types = {
            'action_type': str,
            'source_resource_arn': str,
            'resource_arn': str
        }

        self.attribute_map = {
            'action_type': 'ActionType',
            'source_resource_arn': 'SourceResourceArn',
            'resource_arn': 'ResourceArn'
        }

        self._action_type = action_type
        self._source_resource_arn = source_resource_arn
        self._resource_arn = resource_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutResourcePermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutResourcePermission_request of this PutResourcePermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this PutResourcePermissionRequest.

        <p/>

        :return: The action_type of this PutResourcePermissionRequest.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this PutResourcePermissionRequest.

        <p/>

        :param action_type: The action_type of this PutResourcePermissionRequest.
        :type action_type: str
        """
        allowed_values = ["RESTORE"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def source_resource_arn(self):
        """Gets the source_resource_arn of this PutResourcePermissionRequest.

        <p/>

        :return: The source_resource_arn of this PutResourcePermissionRequest.
        :rtype: str
        """
        return self._source_resource_arn

    @source_resource_arn.setter
    def source_resource_arn(self, source_resource_arn):
        """Sets the source_resource_arn of this PutResourcePermissionRequest.

        <p/>

        :param source_resource_arn: The source_resource_arn of this PutResourcePermissionRequest.
        :type source_resource_arn: str
        """
        if source_resource_arn is None:
            raise ValueError("Invalid value for `source_resource_arn`, must not be `None`")
        if source_resource_arn is not None and not re.search(r'arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\/.+', source_resource_arn):
            raise ValueError("Invalid value for `source_resource_arn`, must be a follow pattern or equal to `/arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\/.+/`")

        self._source_resource_arn = source_resource_arn

    @property
    def resource_arn(self):
        """Gets the resource_arn of this PutResourcePermissionRequest.

        <p/>

        :return: The resource_arn of this PutResourcePermissionRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this PutResourcePermissionRequest.

        <p/>

        :param resource_arn: The resource_arn of this PutResourcePermissionRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")
        if resource_arn is not None and not re.search(r'arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\/.+', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\/.+/`")

        self._resource_arn = resource_arn
