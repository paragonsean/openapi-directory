# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
import re
from openapi_server import util


class ListOperationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, max_results: int=None, next_token: str=None, filters: List[Filter]=None):
        """ListOperationsRequest - a model defined in OpenAPI

        :param application_id: The application_id of this ListOperationsRequest.
        :param max_results: The max_results of this ListOperationsRequest.
        :param next_token: The next_token of this ListOperationsRequest.
        :param filters: The filters of this ListOperationsRequest.
        """
        self.openapi_types = {
            'application_id': str,
            'max_results': int,
            'next_token': str,
            'filters': List[Filter]
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'filters': 'Filters'
        }

        self._application_id = application_id
        self._max_results = max_results
        self._next_token = next_token
        self._filters = filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListOperationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListOperations_request of this ListOperationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this ListOperationsRequest.

        The ID of the application.

        :return: The application_id of this ListOperationsRequest.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ListOperationsRequest.

        The ID of the application.

        :param application_id: The application_id of this ListOperationsRequest.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")
        if application_id is not None and not re.search(r'[\w\d]{1,50}', application_id):
            raise ValueError("Invalid value for `application_id`, must be a follow pattern or equal to `/[\w\d]{1,50}/`")

        self._application_id = application_id

    @property
    def max_results(self):
        """Gets the max_results of this ListOperationsRequest.

        The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If you do not specify a value for MaxResults, the request returns 50 items per page by default.

        :return: The max_results of this ListOperationsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListOperationsRequest.

        The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If you do not specify a value for MaxResults, the request returns 50 items per page by default.

        :param max_results: The max_results of this ListOperationsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListOperationsRequest.

        The token for the next page of results. 

        :return: The next_token of this ListOperationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListOperationsRequest.

        The token for the next page of results. 

        :param next_token: The next_token of this ListOperationsRequest.
        :type next_token: str
        """
        if next_token is not None and not re.search(r'.{16,1024}', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/.{16,1024}/`")

        self._next_token = next_token

    @property
    def filters(self):
        """Gets the filters of this ListOperationsRequest.

        The filters of an operation.

        :return: The filters of this ListOperationsRequest.
        :rtype: List[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListOperationsRequest.

        The filters of an operation.

        :param filters: The filters of this ListOperationsRequest.
        :type filters: List[Filter]
        """
        if filters is not None and len(filters) > 10:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `10`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters
