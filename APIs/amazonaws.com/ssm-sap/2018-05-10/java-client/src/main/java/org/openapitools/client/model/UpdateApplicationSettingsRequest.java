/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationCredential;
import org.openapitools.client.model.UpdateApplicationSettingsRequestBackint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationSettingsRequest {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_CREDENTIALS_TO_ADD_OR_UPDATE = "CredentialsToAddOrUpdate";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_TO_ADD_OR_UPDATE)
  private List<ApplicationCredential> credentialsToAddOrUpdate = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREDENTIALS_TO_REMOVE = "CredentialsToRemove";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_TO_REMOVE)
  private List<ApplicationCredential> credentialsToRemove = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKINT = "Backint";
  @SerializedName(SERIALIZED_NAME_BACKINT)
  private UpdateApplicationSettingsRequestBackint backint;

  public UpdateApplicationSettingsRequest() {
  }

  public UpdateApplicationSettingsRequest applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * The ID of the application.
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public UpdateApplicationSettingsRequest credentialsToAddOrUpdate(List<ApplicationCredential> credentialsToAddOrUpdate) {
    this.credentialsToAddOrUpdate = credentialsToAddOrUpdate;
    return this;
  }

  public UpdateApplicationSettingsRequest addCredentialsToAddOrUpdateItem(ApplicationCredential credentialsToAddOrUpdateItem) {
    if (this.credentialsToAddOrUpdate == null) {
      this.credentialsToAddOrUpdate = new ArrayList<>();
    }
    this.credentialsToAddOrUpdate.add(credentialsToAddOrUpdateItem);
    return this;
  }

  /**
   * The credentials to be added or updated.
   * @return credentialsToAddOrUpdate
   */
  @javax.annotation.Nullable
  public List<ApplicationCredential> getCredentialsToAddOrUpdate() {
    return credentialsToAddOrUpdate;
  }

  public void setCredentialsToAddOrUpdate(List<ApplicationCredential> credentialsToAddOrUpdate) {
    this.credentialsToAddOrUpdate = credentialsToAddOrUpdate;
  }


  public UpdateApplicationSettingsRequest credentialsToRemove(List<ApplicationCredential> credentialsToRemove) {
    this.credentialsToRemove = credentialsToRemove;
    return this;
  }

  public UpdateApplicationSettingsRequest addCredentialsToRemoveItem(ApplicationCredential credentialsToRemoveItem) {
    if (this.credentialsToRemove == null) {
      this.credentialsToRemove = new ArrayList<>();
    }
    this.credentialsToRemove.add(credentialsToRemoveItem);
    return this;
  }

  /**
   * The credentials to be removed.
   * @return credentialsToRemove
   */
  @javax.annotation.Nullable
  public List<ApplicationCredential> getCredentialsToRemove() {
    return credentialsToRemove;
  }

  public void setCredentialsToRemove(List<ApplicationCredential> credentialsToRemove) {
    this.credentialsToRemove = credentialsToRemove;
  }


  public UpdateApplicationSettingsRequest backint(UpdateApplicationSettingsRequestBackint backint) {
    this.backint = backint;
    return this;
  }

  /**
   * Get backint
   * @return backint
   */
  @javax.annotation.Nullable
  public UpdateApplicationSettingsRequestBackint getBackint() {
    return backint;
  }

  public void setBackint(UpdateApplicationSettingsRequestBackint backint) {
    this.backint = backint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationSettingsRequest updateApplicationSettingsRequest = (UpdateApplicationSettingsRequest) o;
    return Objects.equals(this.applicationId, updateApplicationSettingsRequest.applicationId) &&
        Objects.equals(this.credentialsToAddOrUpdate, updateApplicationSettingsRequest.credentialsToAddOrUpdate) &&
        Objects.equals(this.credentialsToRemove, updateApplicationSettingsRequest.credentialsToRemove) &&
        Objects.equals(this.backint, updateApplicationSettingsRequest.backint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, credentialsToAddOrUpdate, credentialsToRemove, backint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationSettingsRequest {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    credentialsToAddOrUpdate: ").append(toIndentedString(credentialsToAddOrUpdate)).append("\n");
    sb.append("    credentialsToRemove: ").append(toIndentedString(credentialsToRemove)).append("\n");
    sb.append("    backint: ").append(toIndentedString(backint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("CredentialsToAddOrUpdate");
    openapiFields.add("CredentialsToRemove");
    openapiFields.add("Backint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationSettingsRequest is not found in the empty JSON string", UpdateApplicationSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateApplicationSettingsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationId").toString()));
      }
      if (jsonObj.get("CredentialsToAddOrUpdate") != null && !jsonObj.get("CredentialsToAddOrUpdate").isJsonNull()) {
        JsonArray jsonArraycredentialsToAddOrUpdate = jsonObj.getAsJsonArray("CredentialsToAddOrUpdate");
        if (jsonArraycredentialsToAddOrUpdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CredentialsToAddOrUpdate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CredentialsToAddOrUpdate` to be an array in the JSON string but got `%s`", jsonObj.get("CredentialsToAddOrUpdate").toString()));
          }

          // validate the optional field `CredentialsToAddOrUpdate` (array)
          for (int i = 0; i < jsonArraycredentialsToAddOrUpdate.size(); i++) {
            ApplicationCredential.validateJsonElement(jsonArraycredentialsToAddOrUpdate.get(i));
          };
        }
      }
      if (jsonObj.get("CredentialsToRemove") != null && !jsonObj.get("CredentialsToRemove").isJsonNull()) {
        JsonArray jsonArraycredentialsToRemove = jsonObj.getAsJsonArray("CredentialsToRemove");
        if (jsonArraycredentialsToRemove != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CredentialsToRemove").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CredentialsToRemove` to be an array in the JSON string but got `%s`", jsonObj.get("CredentialsToRemove").toString()));
          }

          // validate the optional field `CredentialsToRemove` (array)
          for (int i = 0; i < jsonArraycredentialsToRemove.size(); i++) {
            ApplicationCredential.validateJsonElement(jsonArraycredentialsToRemove.get(i));
          };
        }
      }
      // validate the optional field `Backint`
      if (jsonObj.get("Backint") != null && !jsonObj.get("Backint").isJsonNull()) {
        UpdateApplicationSettingsRequestBackint.validateJsonElement(jsonObj.get("Backint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationSettingsRequest>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationSettingsRequest
   */
  public static UpdateApplicationSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationSettingsRequest.class);
  }

  /**
   * Convert an instance of UpdateApplicationSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

