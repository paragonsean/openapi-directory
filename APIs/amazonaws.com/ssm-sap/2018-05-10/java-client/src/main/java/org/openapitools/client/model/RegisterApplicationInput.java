/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApplicationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterApplicationInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterApplicationInput {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE = "ApplicationType";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE)
  private ApplicationType applicationType;

  public static final String SERIALIZED_NAME_INSTANCES = "Instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List instances;

  public static final String SERIALIZED_NAME_SAP_INSTANCE_NUMBER = "SapInstanceNumber";
  @SerializedName(SERIALIZED_NAME_SAP_INSTANCE_NUMBER)
  private String sapInstanceNumber;

  public static final String SERIALIZED_NAME_SID = "Sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_CREDENTIALS = "Credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private List credentials;

  public RegisterApplicationInput() {
  }

  public RegisterApplicationInput applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public RegisterApplicationInput applicationType(ApplicationType applicationType) {
    this.applicationType = applicationType;
    return this;
  }

  /**
   * Get applicationType
   * @return applicationType
   */
  @javax.annotation.Nonnull
  public ApplicationType getApplicationType() {
    return applicationType;
  }

  public void setApplicationType(ApplicationType applicationType) {
    this.applicationType = applicationType;
  }


  public RegisterApplicationInput instances(List instances) {
    this.instances = instances;
    return this;
  }

  /**
   * Get instances
   * @return instances
   */
  @javax.annotation.Nonnull
  public List getInstances() {
    return instances;
  }

  public void setInstances(List instances) {
    this.instances = instances;
  }


  public RegisterApplicationInput sapInstanceNumber(String sapInstanceNumber) {
    this.sapInstanceNumber = sapInstanceNumber;
    return this;
  }

  /**
   * Get sapInstanceNumber
   * @return sapInstanceNumber
   */
  @javax.annotation.Nullable
  public String getSapInstanceNumber() {
    return sapInstanceNumber;
  }

  public void setSapInstanceNumber(String sapInstanceNumber) {
    this.sapInstanceNumber = sapInstanceNumber;
  }


  public RegisterApplicationInput sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * Get sid
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public RegisterApplicationInput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public RegisterApplicationInput credentials(List credentials) {
    this.credentials = credentials;
    return this;
  }

  /**
   * Get credentials
   * @return credentials
   */
  @javax.annotation.Nonnull
  public List getCredentials() {
    return credentials;
  }

  public void setCredentials(List credentials) {
    this.credentials = credentials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterApplicationInput registerApplicationInput = (RegisterApplicationInput) o;
    return Objects.equals(this.applicationId, registerApplicationInput.applicationId) &&
        Objects.equals(this.applicationType, registerApplicationInput.applicationType) &&
        Objects.equals(this.instances, registerApplicationInput.instances) &&
        Objects.equals(this.sapInstanceNumber, registerApplicationInput.sapInstanceNumber) &&
        Objects.equals(this.sid, registerApplicationInput.sid) &&
        Objects.equals(this.tags, registerApplicationInput.tags) &&
        Objects.equals(this.credentials, registerApplicationInput.credentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, applicationType, instances, sapInstanceNumber, sid, tags, credentials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterApplicationInput {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    sapInstanceNumber: ").append(toIndentedString(sapInstanceNumber)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("ApplicationType");
    openapiFields.add("Instances");
    openapiFields.add("SapInstanceNumber");
    openapiFields.add("Sid");
    openapiFields.add("Tags");
    openapiFields.add("Credentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
    openapiRequiredFields.add("ApplicationType");
    openapiRequiredFields.add("Instances");
    openapiRequiredFields.add("Credentials");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterApplicationInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterApplicationInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterApplicationInput is not found in the empty JSON string", RegisterApplicationInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterApplicationInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterApplicationInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterApplicationInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationId`
      String.validateJsonElement(jsonObj.get("ApplicationId"));
      // validate the required field `ApplicationType`
      ApplicationType.validateJsonElement(jsonObj.get("ApplicationType"));
      // validate the required field `Instances`
      List.validateJsonElement(jsonObj.get("Instances"));
      // validate the optional field `SapInstanceNumber`
      if (jsonObj.get("SapInstanceNumber") != null && !jsonObj.get("SapInstanceNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SapInstanceNumber"));
      }
      // validate the optional field `Sid`
      if (jsonObj.get("Sid") != null && !jsonObj.get("Sid").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Sid"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the required field `Credentials`
      List.validateJsonElement(jsonObj.get("Credentials"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterApplicationInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterApplicationInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterApplicationInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterApplicationInput.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterApplicationInput>() {
           @Override
           public void write(JsonWriter out, RegisterApplicationInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterApplicationInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterApplicationInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterApplicationInput
   * @throws IOException if the JSON string is invalid with respect to RegisterApplicationInput
   */
  public static RegisterApplicationInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterApplicationInput.class);
  }

  /**
   * Convert an instance of RegisterApplicationInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

