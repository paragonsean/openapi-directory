/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BackintMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration parameters for AWS Backint Agent for SAP HANA. You can backup your SAP HANA database with AWS Backup or Amazon S3.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationSettingsRequestBackint {
  public static final String SERIALIZED_NAME_BACKINT_MODE = "BackintMode";
  @SerializedName(SERIALIZED_NAME_BACKINT_MODE)
  private BackintMode backintMode;

  public static final String SERIALIZED_NAME_ENSURE_NO_BACKUP_IN_PROCESS = "EnsureNoBackupInProcess";
  @SerializedName(SERIALIZED_NAME_ENSURE_NO_BACKUP_IN_PROCESS)
  private Boolean ensureNoBackupInProcess;

  public UpdateApplicationSettingsRequestBackint() {
  }

  public UpdateApplicationSettingsRequestBackint backintMode(BackintMode backintMode) {
    this.backintMode = backintMode;
    return this;
  }

  /**
   * Get backintMode
   * @return backintMode
   */
  @javax.annotation.Nullable
  public BackintMode getBackintMode() {
    return backintMode;
  }

  public void setBackintMode(BackintMode backintMode) {
    this.backintMode = backintMode;
  }


  public UpdateApplicationSettingsRequestBackint ensureNoBackupInProcess(Boolean ensureNoBackupInProcess) {
    this.ensureNoBackupInProcess = ensureNoBackupInProcess;
    return this;
  }

  /**
   * Get ensureNoBackupInProcess
   * @return ensureNoBackupInProcess
   */
  @javax.annotation.Nullable
  public Boolean getEnsureNoBackupInProcess() {
    return ensureNoBackupInProcess;
  }

  public void setEnsureNoBackupInProcess(Boolean ensureNoBackupInProcess) {
    this.ensureNoBackupInProcess = ensureNoBackupInProcess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationSettingsRequestBackint updateApplicationSettingsRequestBackint = (UpdateApplicationSettingsRequestBackint) o;
    return Objects.equals(this.backintMode, updateApplicationSettingsRequestBackint.backintMode) &&
        Objects.equals(this.ensureNoBackupInProcess, updateApplicationSettingsRequestBackint.ensureNoBackupInProcess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backintMode, ensureNoBackupInProcess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationSettingsRequestBackint {\n");
    sb.append("    backintMode: ").append(toIndentedString(backintMode)).append("\n");
    sb.append("    ensureNoBackupInProcess: ").append(toIndentedString(ensureNoBackupInProcess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackintMode");
    openapiFields.add("EnsureNoBackupInProcess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationSettingsRequestBackint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationSettingsRequestBackint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationSettingsRequestBackint is not found in the empty JSON string", UpdateApplicationSettingsRequestBackint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationSettingsRequestBackint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationSettingsRequestBackint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BackintMode`
      if (jsonObj.get("BackintMode") != null && !jsonObj.get("BackintMode").isJsonNull()) {
        BackintMode.validateJsonElement(jsonObj.get("BackintMode"));
      }
      // validate the optional field `EnsureNoBackupInProcess`
      if (jsonObj.get("EnsureNoBackupInProcess") != null && !jsonObj.get("EnsureNoBackupInProcess").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnsureNoBackupInProcess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationSettingsRequestBackint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationSettingsRequestBackint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationSettingsRequestBackint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationSettingsRequestBackint.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationSettingsRequestBackint>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationSettingsRequestBackint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationSettingsRequestBackint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationSettingsRequestBackint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationSettingsRequestBackint
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationSettingsRequestBackint
   */
  public static UpdateApplicationSettingsRequestBackint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationSettingsRequestBackint.class);
  }

  /**
   * Convert an instance of UpdateApplicationSettingsRequestBackint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

