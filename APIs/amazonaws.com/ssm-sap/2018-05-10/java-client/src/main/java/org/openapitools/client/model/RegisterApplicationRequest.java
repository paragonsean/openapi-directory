/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApplicationCredential;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterApplicationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterApplicationRequest {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  /**
   * The type of the application.
   */
  @JsonAdapter(ApplicationTypeEnum.Adapter.class)
  public enum ApplicationTypeEnum {
    HANA("HANA");

    private String value;

    ApplicationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationTypeEnum fromValue(String value) {
      for (ApplicationTypeEnum b : ApplicationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApplicationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_TYPE = "ApplicationType";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE)
  private ApplicationTypeEnum applicationType;

  public static final String SERIALIZED_NAME_INSTANCES = "Instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<String> instances = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAP_INSTANCE_NUMBER = "SapInstanceNumber";
  @SerializedName(SERIALIZED_NAME_SAP_INSTANCE_NUMBER)
  private String sapInstanceNumber;

  public static final String SERIALIZED_NAME_SID = "Sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_CREDENTIALS = "Credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private List<ApplicationCredential> credentials = new ArrayList<>();

  public RegisterApplicationRequest() {
  }

  public RegisterApplicationRequest applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * The ID of the application.
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public RegisterApplicationRequest applicationType(ApplicationTypeEnum applicationType) {
    this.applicationType = applicationType;
    return this;
  }

  /**
   * The type of the application.
   * @return applicationType
   */
  @javax.annotation.Nonnull
  public ApplicationTypeEnum getApplicationType() {
    return applicationType;
  }

  public void setApplicationType(ApplicationTypeEnum applicationType) {
    this.applicationType = applicationType;
  }


  public RegisterApplicationRequest instances(List<String> instances) {
    this.instances = instances;
    return this;
  }

  public RegisterApplicationRequest addInstancesItem(String instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * The Amazon EC2 instances on which your SAP application is running.
   * @return instances
   */
  @javax.annotation.Nonnull
  public List<String> getInstances() {
    return instances;
  }

  public void setInstances(List<String> instances) {
    this.instances = instances;
  }


  public RegisterApplicationRequest sapInstanceNumber(String sapInstanceNumber) {
    this.sapInstanceNumber = sapInstanceNumber;
    return this;
  }

  /**
   * The SAP instance number of the application.
   * @return sapInstanceNumber
   */
  @javax.annotation.Nullable
  public String getSapInstanceNumber() {
    return sapInstanceNumber;
  }

  public void setSapInstanceNumber(String sapInstanceNumber) {
    this.sapInstanceNumber = sapInstanceNumber;
  }


  public RegisterApplicationRequest sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The System ID of the application.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public RegisterApplicationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public RegisterApplicationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to be attached to the SAP application.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public RegisterApplicationRequest credentials(List<ApplicationCredential> credentials) {
    this.credentials = credentials;
    return this;
  }

  public RegisterApplicationRequest addCredentialsItem(ApplicationCredential credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

  /**
   * The credentials of the SAP application.
   * @return credentials
   */
  @javax.annotation.Nonnull
  public List<ApplicationCredential> getCredentials() {
    return credentials;
  }

  public void setCredentials(List<ApplicationCredential> credentials) {
    this.credentials = credentials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterApplicationRequest registerApplicationRequest = (RegisterApplicationRequest) o;
    return Objects.equals(this.applicationId, registerApplicationRequest.applicationId) &&
        Objects.equals(this.applicationType, registerApplicationRequest.applicationType) &&
        Objects.equals(this.instances, registerApplicationRequest.instances) &&
        Objects.equals(this.sapInstanceNumber, registerApplicationRequest.sapInstanceNumber) &&
        Objects.equals(this.sid, registerApplicationRequest.sid) &&
        Objects.equals(this.tags, registerApplicationRequest.tags) &&
        Objects.equals(this.credentials, registerApplicationRequest.credentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, applicationType, instances, sapInstanceNumber, sid, tags, credentials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterApplicationRequest {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    sapInstanceNumber: ").append(toIndentedString(sapInstanceNumber)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("ApplicationType");
    openapiFields.add("Instances");
    openapiFields.add("SapInstanceNumber");
    openapiFields.add("Sid");
    openapiFields.add("Tags");
    openapiFields.add("Credentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
    openapiRequiredFields.add("ApplicationType");
    openapiRequiredFields.add("Instances");
    openapiRequiredFields.add("Credentials");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterApplicationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterApplicationRequest is not found in the empty JSON string", RegisterApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterApplicationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterApplicationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterApplicationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationId").toString()));
      }
      if (!jsonObj.get("ApplicationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationType").toString()));
      }
      // validate the required field `ApplicationType`
      ApplicationTypeEnum.validateJsonElement(jsonObj.get("ApplicationType"));
      // ensure the required json array is present
      if (jsonObj.get("Instances") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Instances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Instances` to be an array in the JSON string but got `%s`", jsonObj.get("Instances").toString()));
      }
      if ((jsonObj.get("SapInstanceNumber") != null && !jsonObj.get("SapInstanceNumber").isJsonNull()) && !jsonObj.get("SapInstanceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SapInstanceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SapInstanceNumber").toString()));
      }
      if ((jsonObj.get("Sid") != null && !jsonObj.get("Sid").isJsonNull()) && !jsonObj.get("Sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sid").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Credentials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Credentials` to be an array in the JSON string but got `%s`", jsonObj.get("Credentials").toString()));
      }

      JsonArray jsonArraycredentials = jsonObj.getAsJsonArray("Credentials");
      // validate the required field `Credentials` (array)
      for (int i = 0; i < jsonArraycredentials.size(); i++) {
        ApplicationCredential.validateJsonElement(jsonArraycredentials.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterApplicationRequest>() {
           @Override
           public void write(JsonWriter out, RegisterApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterApplicationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterApplicationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterApplicationRequest
   * @throws IOException if the JSON string is invalid with respect to RegisterApplicationRequest
   */
  public static RegisterApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterApplicationRequest.class);
  }

  /**
   * Convert an instance of RegisterApplicationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

