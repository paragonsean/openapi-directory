/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetApplicationInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetApplicationInput {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_APPLICATION_ARN = "ApplicationArn";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ARN)
  private String applicationArn;

  public static final String SERIALIZED_NAME_APP_REGISTRY_ARN = "AppRegistryArn";
  @SerializedName(SERIALIZED_NAME_APP_REGISTRY_ARN)
  private String appRegistryArn;

  public GetApplicationInput() {
  }

  public GetApplicationInput applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nullable
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public GetApplicationInput applicationArn(String applicationArn) {
    this.applicationArn = applicationArn;
    return this;
  }

  /**
   * Get applicationArn
   * @return applicationArn
   */
  @javax.annotation.Nullable
  public String getApplicationArn() {
    return applicationArn;
  }

  public void setApplicationArn(String applicationArn) {
    this.applicationArn = applicationArn;
  }


  public GetApplicationInput appRegistryArn(String appRegistryArn) {
    this.appRegistryArn = appRegistryArn;
    return this;
  }

  /**
   * Get appRegistryArn
   * @return appRegistryArn
   */
  @javax.annotation.Nullable
  public String getAppRegistryArn() {
    return appRegistryArn;
  }

  public void setAppRegistryArn(String appRegistryArn) {
    this.appRegistryArn = appRegistryArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetApplicationInput getApplicationInput = (GetApplicationInput) o;
    return Objects.equals(this.applicationId, getApplicationInput.applicationId) &&
        Objects.equals(this.applicationArn, getApplicationInput.applicationArn) &&
        Objects.equals(this.appRegistryArn, getApplicationInput.appRegistryArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, applicationArn, appRegistryArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetApplicationInput {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    applicationArn: ").append(toIndentedString(applicationArn)).append("\n");
    sb.append("    appRegistryArn: ").append(toIndentedString(appRegistryArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("ApplicationArn");
    openapiFields.add("AppRegistryArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetApplicationInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetApplicationInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetApplicationInput is not found in the empty JSON string", GetApplicationInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetApplicationInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetApplicationInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationId`
      if (jsonObj.get("ApplicationId") != null && !jsonObj.get("ApplicationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationId"));
      }
      // validate the optional field `ApplicationArn`
      if (jsonObj.get("ApplicationArn") != null && !jsonObj.get("ApplicationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationArn"));
      }
      // validate the optional field `AppRegistryArn`
      if (jsonObj.get("AppRegistryArn") != null && !jsonObj.get("AppRegistryArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppRegistryArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetApplicationInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetApplicationInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetApplicationInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetApplicationInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetApplicationInput>() {
           @Override
           public void write(JsonWriter out, GetApplicationInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetApplicationInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetApplicationInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetApplicationInput
   * @throws IOException if the JSON string is invalid with respect to GetApplicationInput
   */
  public static GetApplicationInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetApplicationInput.class);
  }

  /**
   * Convert an instance of GetApplicationInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

