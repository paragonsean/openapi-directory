/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HostRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of the Dedicated Host. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Host {
  public static final String SERIALIZED_NAME_HOST_NAME = "HostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_HOST_IP = "HostIp";
  @SerializedName(SERIALIZED_NAME_HOST_IP)
  private String hostIp;

  public static final String SERIALIZED_NAME_EC2_INSTANCE_ID = "EC2InstanceId";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_ID)
  private String ec2InstanceId;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_HOST_ROLE = "HostRole";
  @SerializedName(SERIALIZED_NAME_HOST_ROLE)
  private HostRole hostRole;

  public static final String SERIALIZED_NAME_OS_VERSION = "OsVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public Host() {
  }

  public Host hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Get hostName
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public Host hostIp(String hostIp) {
    this.hostIp = hostIp;
    return this;
  }

  /**
   * Get hostIp
   * @return hostIp
   */
  @javax.annotation.Nullable
  public String getHostIp() {
    return hostIp;
  }

  public void setHostIp(String hostIp) {
    this.hostIp = hostIp;
  }


  public Host ec2InstanceId(String ec2InstanceId) {
    this.ec2InstanceId = ec2InstanceId;
    return this;
  }

  /**
   * Get ec2InstanceId
   * @return ec2InstanceId
   */
  @javax.annotation.Nullable
  public String getEc2InstanceId() {
    return ec2InstanceId;
  }

  public void setEc2InstanceId(String ec2InstanceId) {
    this.ec2InstanceId = ec2InstanceId;
  }


  public Host instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public Host hostRole(HostRole hostRole) {
    this.hostRole = hostRole;
    return this;
  }

  /**
   * Get hostRole
   * @return hostRole
   */
  @javax.annotation.Nullable
  public HostRole getHostRole() {
    return hostRole;
  }

  public void setHostRole(HostRole hostRole) {
    this.hostRole = hostRole;
  }


  public Host osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * Get osVersion
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Host host = (Host) o;
    return Objects.equals(this.hostName, host.hostName) &&
        Objects.equals(this.hostIp, host.hostIp) &&
        Objects.equals(this.ec2InstanceId, host.ec2InstanceId) &&
        Objects.equals(this.instanceId, host.instanceId) &&
        Objects.equals(this.hostRole, host.hostRole) &&
        Objects.equals(this.osVersion, host.osVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostName, hostIp, ec2InstanceId, instanceId, hostRole, osVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Host {\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    hostIp: ").append(toIndentedString(hostIp)).append("\n");
    sb.append("    ec2InstanceId: ").append(toIndentedString(ec2InstanceId)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    hostRole: ").append(toIndentedString(hostRole)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HostName");
    openapiFields.add("HostIp");
    openapiFields.add("EC2InstanceId");
    openapiFields.add("InstanceId");
    openapiFields.add("HostRole");
    openapiFields.add("OsVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Host
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Host.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Host is not found in the empty JSON string", Host.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Host.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Host` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HostName`
      if (jsonObj.get("HostName") != null && !jsonObj.get("HostName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostName"));
      }
      // validate the optional field `HostIp`
      if (jsonObj.get("HostIp") != null && !jsonObj.get("HostIp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostIp"));
      }
      // validate the optional field `EC2InstanceId`
      if (jsonObj.get("EC2InstanceId") != null && !jsonObj.get("EC2InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EC2InstanceId"));
      }
      // validate the optional field `InstanceId`
      if (jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceId"));
      }
      // validate the optional field `HostRole`
      if (jsonObj.get("HostRole") != null && !jsonObj.get("HostRole").isJsonNull()) {
        HostRole.validateJsonElement(jsonObj.get("HostRole"));
      }
      // validate the optional field `OsVersion`
      if (jsonObj.get("OsVersion") != null && !jsonObj.get("OsVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OsVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Host.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Host' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Host> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Host.class));

       return (TypeAdapter<T>) new TypeAdapter<Host>() {
           @Override
           public void write(JsonWriter out, Host value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Host read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Host given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Host
   * @throws IOException if the JSON string is invalid with respect to Host
   */
  public static Host fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Host.class);
  }

  /**
   * Convert an instance of Host to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

