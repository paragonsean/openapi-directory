/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationDiscoveryStatus;
import org.openapitools.client.model.ApplicationStatus;
import org.openapitools.client.model.ApplicationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterApplicationOutputApplication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterApplicationOutputApplication {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ApplicationType type;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_APP_REGISTRY_ARN = "AppRegistryArn";
  @SerializedName(SERIALIZED_NAME_APP_REGISTRY_ARN)
  private String appRegistryArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ApplicationStatus status;

  public static final String SERIALIZED_NAME_DISCOVERY_STATUS = "DiscoveryStatus";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_STATUS)
  private ApplicationDiscoveryStatus discoveryStatus;

  public static final String SERIALIZED_NAME_COMPONENTS = "Components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List components;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public RegisterApplicationOutputApplication() {
  }

  public RegisterApplicationOutputApplication id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RegisterApplicationOutputApplication type(ApplicationType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ApplicationType getType() {
    return type;
  }

  public void setType(ApplicationType type) {
    this.type = type;
  }


  public RegisterApplicationOutputApplication arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public RegisterApplicationOutputApplication appRegistryArn(String appRegistryArn) {
    this.appRegistryArn = appRegistryArn;
    return this;
  }

  /**
   * Get appRegistryArn
   * @return appRegistryArn
   */
  @javax.annotation.Nullable
  public String getAppRegistryArn() {
    return appRegistryArn;
  }

  public void setAppRegistryArn(String appRegistryArn) {
    this.appRegistryArn = appRegistryArn;
  }


  public RegisterApplicationOutputApplication status(ApplicationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ApplicationStatus getStatus() {
    return status;
  }

  public void setStatus(ApplicationStatus status) {
    this.status = status;
  }


  public RegisterApplicationOutputApplication discoveryStatus(ApplicationDiscoveryStatus discoveryStatus) {
    this.discoveryStatus = discoveryStatus;
    return this;
  }

  /**
   * Get discoveryStatus
   * @return discoveryStatus
   */
  @javax.annotation.Nullable
  public ApplicationDiscoveryStatus getDiscoveryStatus() {
    return discoveryStatus;
  }

  public void setDiscoveryStatus(ApplicationDiscoveryStatus discoveryStatus) {
    this.discoveryStatus = discoveryStatus;
  }


  public RegisterApplicationOutputApplication components(List components) {
    this.components = components;
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @javax.annotation.Nullable
  public List getComponents() {
    return components;
  }

  public void setComponents(List components) {
    this.components = components;
  }


  public RegisterApplicationOutputApplication lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public RegisterApplicationOutputApplication statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterApplicationOutputApplication registerApplicationOutputApplication = (RegisterApplicationOutputApplication) o;
    return Objects.equals(this.id, registerApplicationOutputApplication.id) &&
        Objects.equals(this.type, registerApplicationOutputApplication.type) &&
        Objects.equals(this.arn, registerApplicationOutputApplication.arn) &&
        Objects.equals(this.appRegistryArn, registerApplicationOutputApplication.appRegistryArn) &&
        Objects.equals(this.status, registerApplicationOutputApplication.status) &&
        Objects.equals(this.discoveryStatus, registerApplicationOutputApplication.discoveryStatus) &&
        Objects.equals(this.components, registerApplicationOutputApplication.components) &&
        Objects.equals(this.lastUpdated, registerApplicationOutputApplication.lastUpdated) &&
        Objects.equals(this.statusMessage, registerApplicationOutputApplication.statusMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, arn, appRegistryArn, status, discoveryStatus, components, lastUpdated, statusMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterApplicationOutputApplication {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    appRegistryArn: ").append(toIndentedString(appRegistryArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    discoveryStatus: ").append(toIndentedString(discoveryStatus)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Type");
    openapiFields.add("Arn");
    openapiFields.add("AppRegistryArn");
    openapiFields.add("Status");
    openapiFields.add("DiscoveryStatus");
    openapiFields.add("Components");
    openapiFields.add("LastUpdated");
    openapiFields.add("StatusMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterApplicationOutputApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterApplicationOutputApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterApplicationOutputApplication is not found in the empty JSON string", RegisterApplicationOutputApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterApplicationOutputApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterApplicationOutputApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ApplicationType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `AppRegistryArn`
      if (jsonObj.get("AppRegistryArn") != null && !jsonObj.get("AppRegistryArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppRegistryArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ApplicationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `DiscoveryStatus`
      if (jsonObj.get("DiscoveryStatus") != null && !jsonObj.get("DiscoveryStatus").isJsonNull()) {
        ApplicationDiscoveryStatus.validateJsonElement(jsonObj.get("DiscoveryStatus"));
      }
      // validate the optional field `Components`
      if (jsonObj.get("Components") != null && !jsonObj.get("Components").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Components"));
      }
      // validate the optional field `LastUpdated`
      if (jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdated"));
      }
      // validate the optional field `StatusMessage`
      if (jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterApplicationOutputApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterApplicationOutputApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterApplicationOutputApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterApplicationOutputApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterApplicationOutputApplication>() {
           @Override
           public void write(JsonWriter out, RegisterApplicationOutputApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterApplicationOutputApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterApplicationOutputApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterApplicationOutputApplication
   * @throws IOException if the JSON string is invalid with respect to RegisterApplicationOutputApplication
   */
  public static RegisterApplicationOutputApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterApplicationOutputApplication.class);
  }

  /**
   * Convert an instance of RegisterApplicationOutputApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

