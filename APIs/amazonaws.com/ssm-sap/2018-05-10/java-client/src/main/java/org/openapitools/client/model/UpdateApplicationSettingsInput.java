/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateApplicationSettingsInputBackint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationSettingsInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationSettingsInput {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_CREDENTIALS_TO_ADD_OR_UPDATE = "CredentialsToAddOrUpdate";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_TO_ADD_OR_UPDATE)
  private List credentialsToAddOrUpdate;

  public static final String SERIALIZED_NAME_CREDENTIALS_TO_REMOVE = "CredentialsToRemove";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_TO_REMOVE)
  private List credentialsToRemove;

  public static final String SERIALIZED_NAME_BACKINT = "Backint";
  @SerializedName(SERIALIZED_NAME_BACKINT)
  private UpdateApplicationSettingsInputBackint backint;

  public UpdateApplicationSettingsInput() {
  }

  public UpdateApplicationSettingsInput applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public UpdateApplicationSettingsInput credentialsToAddOrUpdate(List credentialsToAddOrUpdate) {
    this.credentialsToAddOrUpdate = credentialsToAddOrUpdate;
    return this;
  }

  /**
   * Get credentialsToAddOrUpdate
   * @return credentialsToAddOrUpdate
   */
  @javax.annotation.Nullable
  public List getCredentialsToAddOrUpdate() {
    return credentialsToAddOrUpdate;
  }

  public void setCredentialsToAddOrUpdate(List credentialsToAddOrUpdate) {
    this.credentialsToAddOrUpdate = credentialsToAddOrUpdate;
  }


  public UpdateApplicationSettingsInput credentialsToRemove(List credentialsToRemove) {
    this.credentialsToRemove = credentialsToRemove;
    return this;
  }

  /**
   * Get credentialsToRemove
   * @return credentialsToRemove
   */
  @javax.annotation.Nullable
  public List getCredentialsToRemove() {
    return credentialsToRemove;
  }

  public void setCredentialsToRemove(List credentialsToRemove) {
    this.credentialsToRemove = credentialsToRemove;
  }


  public UpdateApplicationSettingsInput backint(UpdateApplicationSettingsInputBackint backint) {
    this.backint = backint;
    return this;
  }

  /**
   * Get backint
   * @return backint
   */
  @javax.annotation.Nullable
  public UpdateApplicationSettingsInputBackint getBackint() {
    return backint;
  }

  public void setBackint(UpdateApplicationSettingsInputBackint backint) {
    this.backint = backint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationSettingsInput updateApplicationSettingsInput = (UpdateApplicationSettingsInput) o;
    return Objects.equals(this.applicationId, updateApplicationSettingsInput.applicationId) &&
        Objects.equals(this.credentialsToAddOrUpdate, updateApplicationSettingsInput.credentialsToAddOrUpdate) &&
        Objects.equals(this.credentialsToRemove, updateApplicationSettingsInput.credentialsToRemove) &&
        Objects.equals(this.backint, updateApplicationSettingsInput.backint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, credentialsToAddOrUpdate, credentialsToRemove, backint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationSettingsInput {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    credentialsToAddOrUpdate: ").append(toIndentedString(credentialsToAddOrUpdate)).append("\n");
    sb.append("    credentialsToRemove: ").append(toIndentedString(credentialsToRemove)).append("\n");
    sb.append("    backint: ").append(toIndentedString(backint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("CredentialsToAddOrUpdate");
    openapiFields.add("CredentialsToRemove");
    openapiFields.add("Backint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationSettingsInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationSettingsInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationSettingsInput is not found in the empty JSON string", UpdateApplicationSettingsInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationSettingsInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationSettingsInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateApplicationSettingsInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationId`
      String.validateJsonElement(jsonObj.get("ApplicationId"));
      // validate the optional field `CredentialsToAddOrUpdate`
      if (jsonObj.get("CredentialsToAddOrUpdate") != null && !jsonObj.get("CredentialsToAddOrUpdate").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CredentialsToAddOrUpdate"));
      }
      // validate the optional field `CredentialsToRemove`
      if (jsonObj.get("CredentialsToRemove") != null && !jsonObj.get("CredentialsToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CredentialsToRemove"));
      }
      // validate the optional field `Backint`
      if (jsonObj.get("Backint") != null && !jsonObj.get("Backint").isJsonNull()) {
        UpdateApplicationSettingsInputBackint.validateJsonElement(jsonObj.get("Backint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationSettingsInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationSettingsInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationSettingsInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationSettingsInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationSettingsInput>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationSettingsInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationSettingsInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationSettingsInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationSettingsInput
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationSettingsInput
   */
  public static UpdateApplicationSettingsInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationSettingsInput.class);
  }

  /**
   * Convert an instance of UpdateApplicationSettingsInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

