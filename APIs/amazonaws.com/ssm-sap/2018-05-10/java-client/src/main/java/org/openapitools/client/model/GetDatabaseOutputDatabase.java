/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatabaseStatus;
import org.openapitools.client.model.DatabaseType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDatabaseOutputDatabase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDatabaseOutputDatabase {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_COMPONENT_ID = "ComponentId";
  @SerializedName(SERIALIZED_NAME_COMPONENT_ID)
  private String componentId;

  public static final String SERIALIZED_NAME_CREDENTIALS = "Credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private List credentials;

  public static final String SERIALIZED_NAME_DATABASE_ID = "DatabaseId";
  @SerializedName(SERIALIZED_NAME_DATABASE_ID)
  private String databaseId;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "DatabaseType";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private DatabaseType databaseType;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DatabaseStatus status;

  public static final String SERIALIZED_NAME_PRIMARY_HOST = "PrimaryHost";
  @SerializedName(SERIALIZED_NAME_PRIMARY_HOST)
  private String primaryHost;

  public static final String SERIALIZED_NAME_SQ_L_PORT = "SQLPort";
  @SerializedName(SERIALIZED_NAME_SQ_L_PORT)
  private Integer sqLPort;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public GetDatabaseOutputDatabase() {
  }

  public GetDatabaseOutputDatabase applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nullable
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public GetDatabaseOutputDatabase componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

  /**
   * Get componentId
   * @return componentId
   */
  @javax.annotation.Nullable
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }


  public GetDatabaseOutputDatabase credentials(List credentials) {
    this.credentials = credentials;
    return this;
  }

  /**
   * Get credentials
   * @return credentials
   */
  @javax.annotation.Nullable
  public List getCredentials() {
    return credentials;
  }

  public void setCredentials(List credentials) {
    this.credentials = credentials;
  }


  public GetDatabaseOutputDatabase databaseId(String databaseId) {
    this.databaseId = databaseId;
    return this;
  }

  /**
   * Get databaseId
   * @return databaseId
   */
  @javax.annotation.Nullable
  public String getDatabaseId() {
    return databaseId;
  }

  public void setDatabaseId(String databaseId) {
    this.databaseId = databaseId;
  }


  public GetDatabaseOutputDatabase databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public GetDatabaseOutputDatabase databaseType(DatabaseType databaseType) {
    this.databaseType = databaseType;
    return this;
  }

  /**
   * Get databaseType
   * @return databaseType
   */
  @javax.annotation.Nullable
  public DatabaseType getDatabaseType() {
    return databaseType;
  }

  public void setDatabaseType(DatabaseType databaseType) {
    this.databaseType = databaseType;
  }


  public GetDatabaseOutputDatabase arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetDatabaseOutputDatabase status(DatabaseStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DatabaseStatus getStatus() {
    return status;
  }

  public void setStatus(DatabaseStatus status) {
    this.status = status;
  }


  public GetDatabaseOutputDatabase primaryHost(String primaryHost) {
    this.primaryHost = primaryHost;
    return this;
  }

  /**
   * Get primaryHost
   * @return primaryHost
   */
  @javax.annotation.Nullable
  public String getPrimaryHost() {
    return primaryHost;
  }

  public void setPrimaryHost(String primaryHost) {
    this.primaryHost = primaryHost;
  }


  public GetDatabaseOutputDatabase sqLPort(Integer sqLPort) {
    this.sqLPort = sqLPort;
    return this;
  }

  /**
   * Get sqLPort
   * @return sqLPort
   */
  @javax.annotation.Nullable
  public Integer getSqLPort() {
    return sqLPort;
  }

  public void setSqLPort(Integer sqLPort) {
    this.sqLPort = sqLPort;
  }


  public GetDatabaseOutputDatabase lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDatabaseOutputDatabase getDatabaseOutputDatabase = (GetDatabaseOutputDatabase) o;
    return Objects.equals(this.applicationId, getDatabaseOutputDatabase.applicationId) &&
        Objects.equals(this.componentId, getDatabaseOutputDatabase.componentId) &&
        Objects.equals(this.credentials, getDatabaseOutputDatabase.credentials) &&
        Objects.equals(this.databaseId, getDatabaseOutputDatabase.databaseId) &&
        Objects.equals(this.databaseName, getDatabaseOutputDatabase.databaseName) &&
        Objects.equals(this.databaseType, getDatabaseOutputDatabase.databaseType) &&
        Objects.equals(this.arn, getDatabaseOutputDatabase.arn) &&
        Objects.equals(this.status, getDatabaseOutputDatabase.status) &&
        Objects.equals(this.primaryHost, getDatabaseOutputDatabase.primaryHost) &&
        Objects.equals(this.sqLPort, getDatabaseOutputDatabase.sqLPort) &&
        Objects.equals(this.lastUpdated, getDatabaseOutputDatabase.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, componentId, credentials, databaseId, databaseName, databaseType, arn, status, primaryHost, sqLPort, lastUpdated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDatabaseOutputDatabase {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    primaryHost: ").append(toIndentedString(primaryHost)).append("\n");
    sb.append("    sqLPort: ").append(toIndentedString(sqLPort)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("ComponentId");
    openapiFields.add("Credentials");
    openapiFields.add("DatabaseId");
    openapiFields.add("DatabaseName");
    openapiFields.add("DatabaseType");
    openapiFields.add("Arn");
    openapiFields.add("Status");
    openapiFields.add("PrimaryHost");
    openapiFields.add("SQLPort");
    openapiFields.add("LastUpdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDatabaseOutputDatabase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDatabaseOutputDatabase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDatabaseOutputDatabase is not found in the empty JSON string", GetDatabaseOutputDatabase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDatabaseOutputDatabase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDatabaseOutputDatabase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationId`
      if (jsonObj.get("ApplicationId") != null && !jsonObj.get("ApplicationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationId"));
      }
      // validate the optional field `ComponentId`
      if (jsonObj.get("ComponentId") != null && !jsonObj.get("ComponentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ComponentId"));
      }
      // validate the optional field `Credentials`
      if (jsonObj.get("Credentials") != null && !jsonObj.get("Credentials").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Credentials"));
      }
      // validate the optional field `DatabaseId`
      if (jsonObj.get("DatabaseId") != null && !jsonObj.get("DatabaseId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseId"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `DatabaseType`
      if (jsonObj.get("DatabaseType") != null && !jsonObj.get("DatabaseType").isJsonNull()) {
        DatabaseType.validateJsonElement(jsonObj.get("DatabaseType"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        DatabaseStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `PrimaryHost`
      if (jsonObj.get("PrimaryHost") != null && !jsonObj.get("PrimaryHost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PrimaryHost"));
      }
      // validate the optional field `SQLPort`
      if (jsonObj.get("SQLPort") != null && !jsonObj.get("SQLPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SQLPort"));
      }
      // validate the optional field `LastUpdated`
      if (jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdated"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDatabaseOutputDatabase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDatabaseOutputDatabase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDatabaseOutputDatabase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDatabaseOutputDatabase.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDatabaseOutputDatabase>() {
           @Override
           public void write(JsonWriter out, GetDatabaseOutputDatabase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDatabaseOutputDatabase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDatabaseOutputDatabase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDatabaseOutputDatabase
   * @throws IOException if the JSON string is invalid with respect to GetDatabaseOutputDatabase
   */
  public static GetDatabaseOutputDatabase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDatabaseOutputDatabase.class);
  }

  /**
   * Convert an instance of GetDatabaseOutputDatabase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

