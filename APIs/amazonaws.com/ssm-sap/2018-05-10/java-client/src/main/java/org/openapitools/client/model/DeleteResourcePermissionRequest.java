/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteResourcePermissionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.271797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteResourcePermissionRequest {
  /**
   * Delete or restore the permissions on the target database.
   */
  @JsonAdapter(ActionTypeEnum.Adapter.class)
  public enum ActionTypeEnum {
    RESTORE("RESTORE");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_TYPE = "ActionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private ActionTypeEnum actionType;

  public static final String SERIALIZED_NAME_SOURCE_RESOURCE_ARN = "SourceResourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_RESOURCE_ARN)
  private String sourceResourceArn;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public DeleteResourcePermissionRequest() {
  }

  public DeleteResourcePermissionRequest actionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Delete or restore the permissions on the target database.
   * @return actionType
   */
  @javax.annotation.Nullable
  public ActionTypeEnum getActionType() {
    return actionType;
  }

  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public DeleteResourcePermissionRequest sourceResourceArn(String sourceResourceArn) {
    this.sourceResourceArn = sourceResourceArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the source resource.
   * @return sourceResourceArn
   */
  @javax.annotation.Nullable
  public String getSourceResourceArn() {
    return sourceResourceArn;
  }

  public void setSourceResourceArn(String sourceResourceArn) {
    this.sourceResourceArn = sourceResourceArn;
  }


  public DeleteResourcePermissionRequest resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the resource.
   * @return resourceArn
   */
  @javax.annotation.Nonnull
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteResourcePermissionRequest deleteResourcePermissionRequest = (DeleteResourcePermissionRequest) o;
    return Objects.equals(this.actionType, deleteResourcePermissionRequest.actionType) &&
        Objects.equals(this.sourceResourceArn, deleteResourcePermissionRequest.sourceResourceArn) &&
        Objects.equals(this.resourceArn, deleteResourcePermissionRequest.resourceArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionType, sourceResourceArn, resourceArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteResourcePermissionRequest {\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    sourceResourceArn: ").append(toIndentedString(sourceResourceArn)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionType");
    openapiFields.add("SourceResourceArn");
    openapiFields.add("ResourceArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ResourceArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteResourcePermissionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteResourcePermissionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteResourcePermissionRequest is not found in the empty JSON string", DeleteResourcePermissionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteResourcePermissionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteResourcePermissionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeleteResourcePermissionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ActionType") != null && !jsonObj.get("ActionType").isJsonNull()) && !jsonObj.get("ActionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActionType").toString()));
      }
      // validate the optional field `ActionType`
      if (jsonObj.get("ActionType") != null && !jsonObj.get("ActionType").isJsonNull()) {
        ActionTypeEnum.validateJsonElement(jsonObj.get("ActionType"));
      }
      if ((jsonObj.get("SourceResourceArn") != null && !jsonObj.get("SourceResourceArn").isJsonNull()) && !jsonObj.get("SourceResourceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceResourceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceResourceArn").toString()));
      }
      if (!jsonObj.get("ResourceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteResourcePermissionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteResourcePermissionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteResourcePermissionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteResourcePermissionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteResourcePermissionRequest>() {
           @Override
           public void write(JsonWriter out, DeleteResourcePermissionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteResourcePermissionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteResourcePermissionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteResourcePermissionRequest
   * @throws IOException if the JSON string is invalid with respect to DeleteResourcePermissionRequest
   */
  public static DeleteResourcePermissionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteResourcePermissionRequest.class);
  }

  /**
   * Convert an instance of DeleteResourcePermissionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

