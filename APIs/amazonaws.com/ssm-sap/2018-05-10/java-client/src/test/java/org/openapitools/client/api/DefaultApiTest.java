/*
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeleteResourcePermissionOutput;
import org.openapitools.client.model.DeleteResourcePermissionRequest;
import org.openapitools.client.model.DeregisterApplicationRequest;
import org.openapitools.client.model.GetApplicationOutput;
import org.openapitools.client.model.GetApplicationRequest;
import org.openapitools.client.model.GetComponentOutput;
import org.openapitools.client.model.GetComponentRequest;
import org.openapitools.client.model.GetDatabaseOutput;
import org.openapitools.client.model.GetDatabaseRequest;
import org.openapitools.client.model.GetOperationOutput;
import org.openapitools.client.model.GetOperationRequest;
import org.openapitools.client.model.GetResourcePermissionOutput;
import org.openapitools.client.model.GetResourcePermissionRequest;
import org.openapitools.client.model.ListApplicationsOutput;
import org.openapitools.client.model.ListApplicationsRequest;
import org.openapitools.client.model.ListComponentsOutput;
import org.openapitools.client.model.ListComponentsRequest;
import org.openapitools.client.model.ListDatabasesOutput;
import org.openapitools.client.model.ListDatabasesRequest;
import org.openapitools.client.model.ListOperationsOutput;
import org.openapitools.client.model.ListOperationsRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutResourcePermissionOutput;
import org.openapitools.client.model.PutResourcePermissionRequest;
import org.openapitools.client.model.RegisterApplicationOutput;
import org.openapitools.client.model.RegisterApplicationRequest;
import org.openapitools.client.model.StartApplicationRefreshOutput;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateApplicationSettingsOutput;
import org.openapitools.client.model.UpdateApplicationSettingsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Removes permissions associated with the target database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePermissionTest() throws ApiException {
        DeleteResourcePermissionRequest deleteResourcePermissionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteResourcePermissionOutput response = api.deleteResourcePermission(deleteResourcePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deregister an SAP application with AWS Systems Manager for SAP. This action does not aï¬€ect the existing setup of your SAP workloads on Amazon EC2.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterApplicationTest() throws ApiException {
        DeregisterApplicationRequest deregisterApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deregisterApplication(deregisterApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets an application registered with AWS Systems Manager for SAP. It also returns the components of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationTest() throws ApiException {
        GetApplicationRequest getApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApplicationOutput response = api.getApplication(getApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the component of an application registered with AWS Systems Manager for SAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getComponentTest() throws ApiException {
        GetComponentRequest getComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetComponentOutput response = api.getComponent(getComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the SAP HANA database of an application registered with AWS Systems Manager for SAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatabaseTest() throws ApiException {
        GetDatabaseRequest getDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDatabaseOutput response = api.getDatabase(getDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details of an operation by specifying the operation ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationTest() throws ApiException {
        GetOperationRequest getOperationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOperationOutput response = api.getOperation(getOperationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets permissions associated with the target database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcePermissionTest() throws ApiException {
        GetResourcePermissionRequest getResourcePermissionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourcePermissionOutput response = api.getResourcePermission(getResourcePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all the applications registered with AWS Systems Manager for SAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationsTest() throws ApiException {
        ListApplicationsRequest listApplicationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListApplicationsOutput response = api.listApplications(listApplicationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the components registered with AWS Systems Manager for SAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listComponentsTest() throws ApiException {
        ListComponentsRequest listComponentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListComponentsOutput response = api.listComponents(listComponentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the SAP HANA databases of an application registered with AWS Systems Manager for SAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDatabasesTest() throws ApiException {
        ListDatabasesRequest listDatabasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDatabasesOutput response = api.listDatabases(listDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the operations performed by AWS Systems Manager for SAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOperationsTest() throws ApiException {
        ListOperationsRequest listOperationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListOperationsOutput response = api.listOperations(listOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all tags on an SAP HANA application and/or database registered with AWS Systems Manager for SAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds permissions to the target database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePermissionTest() throws ApiException {
        PutResourcePermissionRequest putResourcePermissionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutResourcePermissionOutput response = api.putResourcePermission(putResourcePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Register an SAP application with AWS Systems Manager for SAP. You must meet the following requirements before registering. &lt;/p&gt; &lt;p&gt;The SAP application you want to register with AWS Systems Manager for SAP is running on Amazon EC2.&lt;/p&gt; &lt;p&gt;AWS Systems Manager Agent must be setup on an Amazon EC2 instance along with the required IAM permissions.&lt;/p&gt; &lt;p&gt;Amazon EC2 instance(s) must have access to the secrets created in AWS Secrets Manager to manage SAP applications and components.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerApplicationTest() throws ApiException {
        RegisterApplicationRequest registerApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterApplicationOutput response = api.registerApplication(registerApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Refreshes a registered application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startApplicationRefreshTest() throws ApiException {
        DeregisterApplicationRequest deregisterApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartApplicationRefreshOutput response = api.startApplicationRefresh(deregisterApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates tag for a resource by specifying the ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete the tags for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the settings of an application registered with AWS Systems Manager for SAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationSettingsTest() throws ApiException {
        UpdateApplicationSettingsRequest updateApplicationSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApplicationSettingsOutput response = api.updateApplicationSettings(updateApplicationSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
