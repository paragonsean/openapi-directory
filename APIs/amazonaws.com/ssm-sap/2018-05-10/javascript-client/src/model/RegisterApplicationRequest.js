/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationCredential from './ApplicationCredential';

/**
 * The RegisterApplicationRequest model module.
 * @module model/RegisterApplicationRequest
 * @version 2018-05-10
 */
class RegisterApplicationRequest {
    /**
     * Constructs a new <code>RegisterApplicationRequest</code>.
     * @alias module:model/RegisterApplicationRequest
     * @param applicationId {String} The ID of the application.
     * @param applicationType {module:model/RegisterApplicationRequest.ApplicationTypeEnum} The type of the application.
     * @param instances {Array.<String>} The Amazon EC2 instances on which your SAP application is running.
     * @param credentials {Array.<module:model/ApplicationCredential>} The credentials of the SAP application.
     */
    constructor(applicationId, applicationType, instances, credentials) { 
        
        RegisterApplicationRequest.initialize(this, applicationId, applicationType, instances, credentials);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationId, applicationType, instances, credentials) { 
        obj['ApplicationId'] = applicationId;
        obj['ApplicationType'] = applicationType;
        obj['Instances'] = instances;
        obj['Credentials'] = credentials;
    }

    /**
     * Constructs a <code>RegisterApplicationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegisterApplicationRequest} obj Optional instance to populate.
     * @return {module:model/RegisterApplicationRequest} The populated <code>RegisterApplicationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegisterApplicationRequest();

            if (data.hasOwnProperty('ApplicationId')) {
                obj['ApplicationId'] = ApiClient.convertToType(data['ApplicationId'], 'String');
            }
            if (data.hasOwnProperty('ApplicationType')) {
                obj['ApplicationType'] = ApiClient.convertToType(data['ApplicationType'], 'String');
            }
            if (data.hasOwnProperty('Instances')) {
                obj['Instances'] = ApiClient.convertToType(data['Instances'], ['String']);
            }
            if (data.hasOwnProperty('SapInstanceNumber')) {
                obj['SapInstanceNumber'] = ApiClient.convertToType(data['SapInstanceNumber'], 'String');
            }
            if (data.hasOwnProperty('Sid')) {
                obj['Sid'] = ApiClient.convertToType(data['Sid'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Credentials')) {
                obj['Credentials'] = ApiClient.convertToType(data['Credentials'], [ApplicationCredential]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegisterApplicationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegisterApplicationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegisterApplicationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ApplicationId'] && !(typeof data['ApplicationId'] === 'string' || data['ApplicationId'] instanceof String)) {
            throw new Error("Expected the field `ApplicationId` to be a primitive type in the JSON string but got " + data['ApplicationId']);
        }
        // ensure the json data is a string
        if (data['ApplicationType'] && !(typeof data['ApplicationType'] === 'string' || data['ApplicationType'] instanceof String)) {
            throw new Error("Expected the field `ApplicationType` to be a primitive type in the JSON string but got " + data['ApplicationType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Instances'])) {
            throw new Error("Expected the field `Instances` to be an array in the JSON data but got " + data['Instances']);
        }
        // ensure the json data is a string
        if (data['SapInstanceNumber'] && !(typeof data['SapInstanceNumber'] === 'string' || data['SapInstanceNumber'] instanceof String)) {
            throw new Error("Expected the field `SapInstanceNumber` to be a primitive type in the JSON string but got " + data['SapInstanceNumber']);
        }
        // ensure the json data is a string
        if (data['Sid'] && !(typeof data['Sid'] === 'string' || data['Sid'] instanceof String)) {
            throw new Error("Expected the field `Sid` to be a primitive type in the JSON string but got " + data['Sid']);
        }
        if (data['Credentials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Credentials'])) {
                throw new Error("Expected the field `Credentials` to be an array in the JSON data but got " + data['Credentials']);
            }
            // validate the optional field `Credentials` (array)
            for (const item of data['Credentials']) {
                ApplicationCredential.validateJSON(item);
            };
        }

        return true;
    }


}

RegisterApplicationRequest.RequiredProperties = ["ApplicationId", "ApplicationType", "Instances", "Credentials"];

/**
 * The ID of the application.
 * @member {String} ApplicationId
 */
RegisterApplicationRequest.prototype['ApplicationId'] = undefined;

/**
 * The type of the application.
 * @member {module:model/RegisterApplicationRequest.ApplicationTypeEnum} ApplicationType
 */
RegisterApplicationRequest.prototype['ApplicationType'] = undefined;

/**
 * The Amazon EC2 instances on which your SAP application is running.
 * @member {Array.<String>} Instances
 */
RegisterApplicationRequest.prototype['Instances'] = undefined;

/**
 * The SAP instance number of the application.
 * @member {String} SapInstanceNumber
 */
RegisterApplicationRequest.prototype['SapInstanceNumber'] = undefined;

/**
 * The System ID of the application.
 * @member {String} Sid
 */
RegisterApplicationRequest.prototype['Sid'] = undefined;

/**
 * The tags to be attached to the SAP application.
 * @member {Object.<String, String>} Tags
 */
RegisterApplicationRequest.prototype['Tags'] = undefined;

/**
 * The credentials of the SAP application.
 * @member {Array.<module:model/ApplicationCredential>} Credentials
 */
RegisterApplicationRequest.prototype['Credentials'] = undefined;





/**
 * Allowed values for the <code>ApplicationType</code> property.
 * @enum {String}
 * @readonly
 */
RegisterApplicationRequest['ApplicationTypeEnum'] = {

    /**
     * value: "HANA"
     * @const
     */
    "HANA": "HANA"
};



export default RegisterApplicationRequest;

