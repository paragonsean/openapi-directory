/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteResourcePermissionOutput from '../model/DeleteResourcePermissionOutput';
import DeleteResourcePermissionRequest from '../model/DeleteResourcePermissionRequest';
import DeregisterApplicationRequest from '../model/DeregisterApplicationRequest';
import GetApplicationOutput from '../model/GetApplicationOutput';
import GetApplicationRequest from '../model/GetApplicationRequest';
import GetComponentOutput from '../model/GetComponentOutput';
import GetComponentRequest from '../model/GetComponentRequest';
import GetDatabaseOutput from '../model/GetDatabaseOutput';
import GetDatabaseRequest from '../model/GetDatabaseRequest';
import GetOperationOutput from '../model/GetOperationOutput';
import GetOperationRequest from '../model/GetOperationRequest';
import GetResourcePermissionOutput from '../model/GetResourcePermissionOutput';
import GetResourcePermissionRequest from '../model/GetResourcePermissionRequest';
import ListApplicationsOutput from '../model/ListApplicationsOutput';
import ListApplicationsRequest from '../model/ListApplicationsRequest';
import ListComponentsOutput from '../model/ListComponentsOutput';
import ListComponentsRequest from '../model/ListComponentsRequest';
import ListDatabasesOutput from '../model/ListDatabasesOutput';
import ListDatabasesRequest from '../model/ListDatabasesRequest';
import ListOperationsOutput from '../model/ListOperationsOutput';
import ListOperationsRequest from '../model/ListOperationsRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutResourcePermissionOutput from '../model/PutResourcePermissionOutput';
import PutResourcePermissionRequest from '../model/PutResourcePermissionRequest';
import RegisterApplicationOutput from '../model/RegisterApplicationOutput';
import RegisterApplicationRequest from '../model/RegisterApplicationRequest';
import StartApplicationRefreshOutput from '../model/StartApplicationRefreshOutput';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateApplicationSettingsOutput from '../model/UpdateApplicationSettingsOutput';
import UpdateApplicationSettingsRequest from '../model/UpdateApplicationSettingsRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-05-10
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteResourcePermission operation.
     * @callback module:api/DefaultApi~deleteResourcePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResourcePermissionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes permissions associated with the target database.
     * @param {module:model/DeleteResourcePermissionRequest} deleteResourcePermissionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourcePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResourcePermissionOutput}
     */
    deleteResourcePermission(deleteResourcePermissionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteResourcePermissionRequest;
      // verify the required parameter 'deleteResourcePermissionRequest' is set
      if (deleteResourcePermissionRequest === undefined || deleteResourcePermissionRequest === null) {
        throw new Error("Missing the required parameter 'deleteResourcePermissionRequest' when calling deleteResourcePermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteResourcePermissionOutput;
      return this.apiClient.callApi(
        '/delete-resource-permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterApplication operation.
     * @callback module:api/DefaultApi~deregisterApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregister an SAP application with AWS Systems Manager for SAP. This action does not aï¬€ect the existing setup of your SAP workloads on Amazon EC2.
     * @param {module:model/DeregisterApplicationRequest} deregisterApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deregisterApplication(deregisterApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterApplicationRequest;
      // verify the required parameter 'deregisterApplicationRequest' is set
      if (deregisterApplicationRequest === undefined || deregisterApplicationRequest === null) {
        throw new Error("Missing the required parameter 'deregisterApplicationRequest' when calling deregisterApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deregister-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplication operation.
     * @callback module:api/DefaultApi~getApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an application registered with AWS Systems Manager for SAP. It also returns the components of the application.
     * @param {module:model/GetApplicationRequest} getApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationOutput}
     */
    getApplication(getApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getApplicationRequest;
      // verify the required parameter 'getApplicationRequest' is set
      if (getApplicationRequest === undefined || getApplicationRequest === null) {
        throw new Error("Missing the required parameter 'getApplicationRequest' when calling getApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetApplicationOutput;
      return this.apiClient.callApi(
        '/get-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComponent operation.
     * @callback module:api/DefaultApi~getComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetComponentOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the component of an application registered with AWS Systems Manager for SAP.
     * @param {module:model/GetComponentRequest} getComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetComponentOutput}
     */
    getComponent(getComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = getComponentRequest;
      // verify the required parameter 'getComponentRequest' is set
      if (getComponentRequest === undefined || getComponentRequest === null) {
        throw new Error("Missing the required parameter 'getComponentRequest' when calling getComponent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetComponentOutput;
      return this.apiClient.callApi(
        '/get-component', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatabase operation.
     * @callback module:api/DefaultApi~getDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDatabaseOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SAP HANA database of an application registered with AWS Systems Manager for SAP.
     * @param {module:model/GetDatabaseRequest} getDatabaseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDatabaseOutput}
     */
    getDatabase(getDatabaseRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDatabaseRequest;
      // verify the required parameter 'getDatabaseRequest' is set
      if (getDatabaseRequest === undefined || getDatabaseRequest === null) {
        throw new Error("Missing the required parameter 'getDatabaseRequest' when calling getDatabase");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDatabaseOutput;
      return this.apiClient.callApi(
        '/get-database', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperation operation.
     * @callback module:api/DefaultApi~getOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOperationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of an operation by specifying the operation ID.
     * @param {module:model/GetOperationRequest} getOperationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOperationOutput}
     */
    getOperation(getOperationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getOperationRequest;
      // verify the required parameter 'getOperationRequest' is set
      if (getOperationRequest === undefined || getOperationRequest === null) {
        throw new Error("Missing the required parameter 'getOperationRequest' when calling getOperation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOperationOutput;
      return this.apiClient.callApi(
        '/get-operation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourcePermission operation.
     * @callback module:api/DefaultApi~getResourcePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourcePermissionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets permissions associated with the target database.
     * @param {module:model/GetResourcePermissionRequest} getResourcePermissionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResourcePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourcePermissionOutput}
     */
    getResourcePermission(getResourcePermissionRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResourcePermissionRequest;
      // verify the required parameter 'getResourcePermissionRequest' is set
      if (getResourcePermissionRequest === undefined || getResourcePermissionRequest === null) {
        throw new Error("Missing the required parameter 'getResourcePermissionRequest' when calling getResourcePermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResourcePermissionOutput;
      return this.apiClient.callApi(
        '/get-resource-permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplications operation.
     * @callback module:api/DefaultApi~listApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the applications registered with AWS Systems Manager for SAP.
     * @param {module:model/ListApplicationsRequest} listApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationsOutput}
     */
    listApplications(listApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listApplicationsRequest;
      // verify the required parameter 'listApplicationsRequest' is set
      if (listApplicationsRequest === undefined || listApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'listApplicationsRequest' when calling listApplications");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListApplicationsOutput;
      return this.apiClient.callApi(
        '/list-applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listComponents operation.
     * @callback module:api/DefaultApi~listComponentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListComponentsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the components registered with AWS Systems Manager for SAP.
     * @param {module:model/ListComponentsRequest} listComponentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListComponentsOutput}
     */
    listComponents(listComponentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listComponentsRequest;
      // verify the required parameter 'listComponentsRequest' is set
      if (listComponentsRequest === undefined || listComponentsRequest === null) {
        throw new Error("Missing the required parameter 'listComponentsRequest' when calling listComponents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListComponentsOutput;
      return this.apiClient.callApi(
        '/list-components', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatabases operation.
     * @callback module:api/DefaultApi~listDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDatabasesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the SAP HANA databases of an application registered with AWS Systems Manager for SAP.
     * @param {module:model/ListDatabasesRequest} listDatabasesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDatabasesOutput}
     */
    listDatabases(listDatabasesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDatabasesRequest;
      // verify the required parameter 'listDatabasesRequest' is set
      if (listDatabasesRequest === undefined || listDatabasesRequest === null) {
        throw new Error("Missing the required parameter 'listDatabasesRequest' when calling listDatabases");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDatabasesOutput;
      return this.apiClient.callApi(
        '/list-databases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOperations operation.
     * @callback module:api/DefaultApi~listOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOperationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the operations performed by AWS Systems Manager for SAP.
     * @param {module:model/ListOperationsRequest} listOperationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOperationsOutput}
     */
    listOperations(listOperationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOperationsRequest;
      // verify the required parameter 'listOperationsRequest' is set
      if (listOperationsRequest === undefined || listOperationsRequest === null) {
        throw new Error("Missing the required parameter 'listOperationsRequest' when calling listOperations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOperationsOutput;
      return this.apiClient.callApi(
        '/list-operations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags on an SAP HANA application and/or database registered with AWS Systems Manager for SAP.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResourcePermission operation.
     * @callback module:api/DefaultApi~putResourcePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutResourcePermissionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds permissions to the target database.
     * @param {module:model/PutResourcePermissionRequest} putResourcePermissionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResourcePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutResourcePermissionOutput}
     */
    putResourcePermission(putResourcePermissionRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResourcePermissionRequest;
      // verify the required parameter 'putResourcePermissionRequest' is set
      if (putResourcePermissionRequest === undefined || putResourcePermissionRequest === null) {
        throw new Error("Missing the required parameter 'putResourcePermissionRequest' when calling putResourcePermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutResourcePermissionOutput;
      return this.apiClient.callApi(
        '/put-resource-permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerApplication operation.
     * @callback module:api/DefaultApi~registerApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterApplicationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Register an SAP application with AWS Systems Manager for SAP. You must meet the following requirements before registering. </p> <p>The SAP application you want to register with AWS Systems Manager for SAP is running on Amazon EC2.</p> <p>AWS Systems Manager Agent must be setup on an Amazon EC2 instance along with the required IAM permissions.</p> <p>Amazon EC2 instance(s) must have access to the secrets created in AWS Secrets Manager to manage SAP applications and components.</p>
     * @param {module:model/RegisterApplicationRequest} registerApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterApplicationOutput}
     */
    registerApplication(registerApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerApplicationRequest;
      // verify the required parameter 'registerApplicationRequest' is set
      if (registerApplicationRequest === undefined || registerApplicationRequest === null) {
        throw new Error("Missing the required parameter 'registerApplicationRequest' when calling registerApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterApplicationOutput;
      return this.apiClient.callApi(
        '/register-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startApplicationRefresh operation.
     * @callback module:api/DefaultApi~startApplicationRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartApplicationRefreshOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes a registered application.
     * @param {module:model/DeregisterApplicationRequest} deregisterApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startApplicationRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartApplicationRefreshOutput}
     */
    startApplicationRefresh(deregisterApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterApplicationRequest;
      // verify the required parameter 'deregisterApplicationRequest' is set
      if (deregisterApplicationRequest === undefined || deregisterApplicationRequest === null) {
        throw new Error("Missing the required parameter 'deregisterApplicationRequest' when calling startApplicationRefresh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartApplicationRefreshOutput;
      return this.apiClient.callApi(
        '/start-application-refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates tag for a resource by specifying the ARN.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the tags for a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Array.<String>} tagKeys Adds/updates or removes credentials for applications registered with AWS Systems Manager for SAP.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplicationSettings operation.
     * @callback module:api/DefaultApi~updateApplicationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApplicationSettingsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the settings of an application registered with AWS Systems Manager for SAP.
     * @param {module:model/UpdateApplicationSettingsRequest} updateApplicationSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApplicationSettingsOutput}
     */
    updateApplicationSettings(updateApplicationSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationSettingsRequest;
      // verify the required parameter 'updateApplicationSettingsRequest' is set
      if (updateApplicationSettingsRequest === undefined || updateApplicationSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationSettingsRequest' when calling updateApplicationSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApplicationSettingsOutput;
      return this.apiClient.callApi(
        '/update-application-settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
