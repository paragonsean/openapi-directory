/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetApplication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetApplication_request::OAIGetApplication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetApplication_request::OAIGetApplication_request() {
    this->initializeModel();
}

OAIGetApplication_request::~OAIGetApplication_request() {}

void OAIGetApplication_request::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_app_registry_arn_isSet = false;
    m_app_registry_arn_isValid = false;
}

void OAIGetApplication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetApplication_request::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationArn")]);
    m_application_arn_isSet = !json[QString("ApplicationArn")].isNull() && m_application_arn_isValid;

    m_app_registry_arn_isValid = ::OpenAPI::fromJsonValue(m_app_registry_arn, json[QString("AppRegistryArn")]);
    m_app_registry_arn_isSet = !json[QString("AppRegistryArn")].isNull() && m_app_registry_arn_isValid;
}

QString OAIGetApplication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetApplication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationArn"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_app_registry_arn_isSet) {
        obj.insert(QString("AppRegistryArn"), ::OpenAPI::toJsonValue(m_app_registry_arn));
    }
    return obj;
}

QString OAIGetApplication_request::getApplicationId() const {
    return m_application_id;
}
void OAIGetApplication_request::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetApplication_request::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetApplication_request::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIGetApplication_request::getApplicationArn() const {
    return m_application_arn;
}
void OAIGetApplication_request::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIGetApplication_request::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIGetApplication_request::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

QString OAIGetApplication_request::getAppRegistryArn() const {
    return m_app_registry_arn;
}
void OAIGetApplication_request::setAppRegistryArn(const QString &app_registry_arn) {
    m_app_registry_arn = app_registry_arn;
    m_app_registry_arn_isSet = true;
}

bool OAIGetApplication_request::is_app_registry_arn_Set() const{
    return m_app_registry_arn_isSet;
}

bool OAIGetApplication_request::is_app_registry_arn_Valid() const{
    return m_app_registry_arn_isValid;
}

bool OAIGetApplication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_registry_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetApplication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
