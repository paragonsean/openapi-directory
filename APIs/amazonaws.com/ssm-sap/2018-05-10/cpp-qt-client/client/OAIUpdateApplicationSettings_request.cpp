/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationSettings_request::OAIUpdateApplicationSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationSettings_request::OAIUpdateApplicationSettings_request() {
    this->initializeModel();
}

OAIUpdateApplicationSettings_request::~OAIUpdateApplicationSettings_request() {}

void OAIUpdateApplicationSettings_request::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_credentials_to_add_or_update_isSet = false;
    m_credentials_to_add_or_update_isValid = false;

    m_credentials_to_remove_isSet = false;
    m_credentials_to_remove_isValid = false;

    m_backint_isSet = false;
    m_backint_isValid = false;
}

void OAIUpdateApplicationSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationSettings_request::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_credentials_to_add_or_update_isValid = ::OpenAPI::fromJsonValue(m_credentials_to_add_or_update, json[QString("CredentialsToAddOrUpdate")]);
    m_credentials_to_add_or_update_isSet = !json[QString("CredentialsToAddOrUpdate")].isNull() && m_credentials_to_add_or_update_isValid;

    m_credentials_to_remove_isValid = ::OpenAPI::fromJsonValue(m_credentials_to_remove, json[QString("CredentialsToRemove")]);
    m_credentials_to_remove_isSet = !json[QString("CredentialsToRemove")].isNull() && m_credentials_to_remove_isValid;

    m_backint_isValid = ::OpenAPI::fromJsonValue(m_backint, json[QString("Backint")]);
    m_backint_isSet = !json[QString("Backint")].isNull() && m_backint_isValid;
}

QString OAIUpdateApplicationSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_credentials_to_add_or_update.size() > 0) {
        obj.insert(QString("CredentialsToAddOrUpdate"), ::OpenAPI::toJsonValue(m_credentials_to_add_or_update));
    }
    if (m_credentials_to_remove.size() > 0) {
        obj.insert(QString("CredentialsToRemove"), ::OpenAPI::toJsonValue(m_credentials_to_remove));
    }
    if (m_backint.isSet()) {
        obj.insert(QString("Backint"), ::OpenAPI::toJsonValue(m_backint));
    }
    return obj;
}

QString OAIUpdateApplicationSettings_request::getApplicationId() const {
    return m_application_id;
}
void OAIUpdateApplicationSettings_request::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIUpdateApplicationSettings_request::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIUpdateApplicationSettings_request::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QList<OAIApplicationCredential> OAIUpdateApplicationSettings_request::getCredentialsToAddOrUpdate() const {
    return m_credentials_to_add_or_update;
}
void OAIUpdateApplicationSettings_request::setCredentialsToAddOrUpdate(const QList<OAIApplicationCredential> &credentials_to_add_or_update) {
    m_credentials_to_add_or_update = credentials_to_add_or_update;
    m_credentials_to_add_or_update_isSet = true;
}

bool OAIUpdateApplicationSettings_request::is_credentials_to_add_or_update_Set() const{
    return m_credentials_to_add_or_update_isSet;
}

bool OAIUpdateApplicationSettings_request::is_credentials_to_add_or_update_Valid() const{
    return m_credentials_to_add_or_update_isValid;
}

QList<OAIApplicationCredential> OAIUpdateApplicationSettings_request::getCredentialsToRemove() const {
    return m_credentials_to_remove;
}
void OAIUpdateApplicationSettings_request::setCredentialsToRemove(const QList<OAIApplicationCredential> &credentials_to_remove) {
    m_credentials_to_remove = credentials_to_remove;
    m_credentials_to_remove_isSet = true;
}

bool OAIUpdateApplicationSettings_request::is_credentials_to_remove_Set() const{
    return m_credentials_to_remove_isSet;
}

bool OAIUpdateApplicationSettings_request::is_credentials_to_remove_Valid() const{
    return m_credentials_to_remove_isValid;
}

OAIUpdateApplicationSettings_request_Backint OAIUpdateApplicationSettings_request::getBackint() const {
    return m_backint;
}
void OAIUpdateApplicationSettings_request::setBackint(const OAIUpdateApplicationSettings_request_Backint &backint) {
    m_backint = backint;
    m_backint_isSet = true;
}

bool OAIUpdateApplicationSettings_request::is_backint_Set() const{
    return m_backint_isSet;
}

bool OAIUpdateApplicationSettings_request::is_backint_Valid() const{
    return m_backint_isValid;
}

bool OAIUpdateApplicationSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_to_add_or_update.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_to_remove.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && true;
}

} // namespace OpenAPI
