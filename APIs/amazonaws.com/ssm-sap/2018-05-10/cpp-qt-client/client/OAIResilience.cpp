/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResilience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResilience::OAIResilience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResilience::OAIResilience() {
    this->initializeModel();
}

OAIResilience::~OAIResilience() {}

void OAIResilience::initializeModel() {

    m_hsr_tier_isSet = false;
    m_hsr_tier_isValid = false;

    m_hsr_replication_mode_isSet = false;
    m_hsr_replication_mode_isValid = false;

    m_hsr_operation_mode_isSet = false;
    m_hsr_operation_mode_isValid = false;

    m_cluster_status_isSet = false;
    m_cluster_status_isValid = false;
}

void OAIResilience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResilience::fromJsonObject(QJsonObject json) {

    m_hsr_tier_isValid = ::OpenAPI::fromJsonValue(m_hsr_tier, json[QString("HsrTier")]);
    m_hsr_tier_isSet = !json[QString("HsrTier")].isNull() && m_hsr_tier_isValid;

    m_hsr_replication_mode_isValid = ::OpenAPI::fromJsonValue(m_hsr_replication_mode, json[QString("HsrReplicationMode")]);
    m_hsr_replication_mode_isSet = !json[QString("HsrReplicationMode")].isNull() && m_hsr_replication_mode_isValid;

    m_hsr_operation_mode_isValid = ::OpenAPI::fromJsonValue(m_hsr_operation_mode, json[QString("HsrOperationMode")]);
    m_hsr_operation_mode_isSet = !json[QString("HsrOperationMode")].isNull() && m_hsr_operation_mode_isValid;

    m_cluster_status_isValid = ::OpenAPI::fromJsonValue(m_cluster_status, json[QString("ClusterStatus")]);
    m_cluster_status_isSet = !json[QString("ClusterStatus")].isNull() && m_cluster_status_isValid;
}

QString OAIResilience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResilience::asJsonObject() const {
    QJsonObject obj;
    if (m_hsr_tier_isSet) {
        obj.insert(QString("HsrTier"), ::OpenAPI::toJsonValue(m_hsr_tier));
    }
    if (m_hsr_replication_mode.isSet()) {
        obj.insert(QString("HsrReplicationMode"), ::OpenAPI::toJsonValue(m_hsr_replication_mode));
    }
    if (m_hsr_operation_mode.isSet()) {
        obj.insert(QString("HsrOperationMode"), ::OpenAPI::toJsonValue(m_hsr_operation_mode));
    }
    if (m_cluster_status.isSet()) {
        obj.insert(QString("ClusterStatus"), ::OpenAPI::toJsonValue(m_cluster_status));
    }
    return obj;
}

QString OAIResilience::getHsrTier() const {
    return m_hsr_tier;
}
void OAIResilience::setHsrTier(const QString &hsr_tier) {
    m_hsr_tier = hsr_tier;
    m_hsr_tier_isSet = true;
}

bool OAIResilience::is_hsr_tier_Set() const{
    return m_hsr_tier_isSet;
}

bool OAIResilience::is_hsr_tier_Valid() const{
    return m_hsr_tier_isValid;
}

OAIReplicationMode OAIResilience::getHsrReplicationMode() const {
    return m_hsr_replication_mode;
}
void OAIResilience::setHsrReplicationMode(const OAIReplicationMode &hsr_replication_mode) {
    m_hsr_replication_mode = hsr_replication_mode;
    m_hsr_replication_mode_isSet = true;
}

bool OAIResilience::is_hsr_replication_mode_Set() const{
    return m_hsr_replication_mode_isSet;
}

bool OAIResilience::is_hsr_replication_mode_Valid() const{
    return m_hsr_replication_mode_isValid;
}

OAIOperationMode OAIResilience::getHsrOperationMode() const {
    return m_hsr_operation_mode;
}
void OAIResilience::setHsrOperationMode(const OAIOperationMode &hsr_operation_mode) {
    m_hsr_operation_mode = hsr_operation_mode;
    m_hsr_operation_mode_isSet = true;
}

bool OAIResilience::is_hsr_operation_mode_Set() const{
    return m_hsr_operation_mode_isSet;
}

bool OAIResilience::is_hsr_operation_mode_Valid() const{
    return m_hsr_operation_mode_isValid;
}

OAIClusterStatus OAIResilience::getClusterStatus() const {
    return m_cluster_status;
}
void OAIResilience::setClusterStatus(const OAIClusterStatus &cluster_status) {
    m_cluster_status = cluster_status;
    m_cluster_status_isSet = true;
}

bool OAIResilience::is_cluster_status_Set() const{
    return m_cluster_status_isSet;
}

bool OAIResilience::is_cluster_status_Valid() const{
    return m_cluster_status_isValid;
}

bool OAIResilience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hsr_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsr_replication_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsr_operation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResilience::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
