/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDatabaseOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDatabaseOutput::OAIGetDatabaseOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDatabaseOutput::OAIGetDatabaseOutput() {
    this->initializeModel();
}

OAIGetDatabaseOutput::~OAIGetDatabaseOutput() {}

void OAIGetDatabaseOutput::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetDatabaseOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDatabaseOutput::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetDatabaseOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDatabaseOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_database.isSet()) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIGetDatabaseOutput_Database OAIGetDatabaseOutput::getDatabase() const {
    return m_database;
}
void OAIGetDatabaseOutput::setDatabase(const OAIGetDatabaseOutput_Database &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIGetDatabaseOutput::is_database_Set() const{
    return m_database_isSet;
}

bool OAIGetDatabaseOutput::is_database_Valid() const{
    return m_database_isValid;
}

QMap OAIGetDatabaseOutput::getTags() const {
    return m_tags;
}
void OAIGetDatabaseOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetDatabaseOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetDatabaseOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetDatabaseOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDatabaseOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
