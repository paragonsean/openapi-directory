/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationSummary::OAIApplicationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationSummary::OAIApplicationSummary() {
    this->initializeModel();
}

OAIApplicationSummary::~OAIApplicationSummary() {}

void OAIApplicationSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIApplicationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIApplicationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIApplicationSummary::getId() const {
    return m_id;
}
void OAIApplicationSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplicationSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplicationSummary::is_id_Valid() const{
    return m_id_isValid;
}

OAIApplicationType OAIApplicationSummary::getType() const {
    return m_type;
}
void OAIApplicationSummary::setType(const OAIApplicationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApplicationSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApplicationSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIApplicationSummary::getArn() const {
    return m_arn;
}
void OAIApplicationSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIApplicationSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIApplicationSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QMap OAIApplicationSummary::getTags() const {
    return m_tags;
}
void OAIApplicationSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIApplicationSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIApplicationSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIApplicationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
