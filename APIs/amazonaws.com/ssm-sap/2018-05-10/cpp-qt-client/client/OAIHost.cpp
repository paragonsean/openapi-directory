/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHost::OAIHost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHost::OAIHost() {
    this->initializeModel();
}

OAIHost::~OAIHost() {}

void OAIHost::initializeModel() {

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_host_ip_isSet = false;
    m_host_ip_isValid = false;

    m_ec2_instance_id_isSet = false;
    m_ec2_instance_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_host_role_isSet = false;
    m_host_role_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;
}

void OAIHost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHost::fromJsonObject(QJsonObject json) {

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("HostName")]);
    m_host_name_isSet = !json[QString("HostName")].isNull() && m_host_name_isValid;

    m_host_ip_isValid = ::OpenAPI::fromJsonValue(m_host_ip, json[QString("HostIp")]);
    m_host_ip_isSet = !json[QString("HostIp")].isNull() && m_host_ip_isValid;

    m_ec2_instance_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_id, json[QString("EC2InstanceId")]);
    m_ec2_instance_id_isSet = !json[QString("EC2InstanceId")].isNull() && m_ec2_instance_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_host_role_isValid = ::OpenAPI::fromJsonValue(m_host_role, json[QString("HostRole")]);
    m_host_role_isSet = !json[QString("HostRole")].isNull() && m_host_role_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("OsVersion")]);
    m_os_version_isSet = !json[QString("OsVersion")].isNull() && m_os_version_isValid;
}

QString OAIHost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHost::asJsonObject() const {
    QJsonObject obj;
    if (m_host_name_isSet) {
        obj.insert(QString("HostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_host_ip_isSet) {
        obj.insert(QString("HostIp"), ::OpenAPI::toJsonValue(m_host_ip));
    }
    if (m_ec2_instance_id_isSet) {
        obj.insert(QString("EC2InstanceId"), ::OpenAPI::toJsonValue(m_ec2_instance_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_host_role.isSet()) {
        obj.insert(QString("HostRole"), ::OpenAPI::toJsonValue(m_host_role));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("OsVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    return obj;
}

QString OAIHost::getHostName() const {
    return m_host_name;
}
void OAIHost::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIHost::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIHost::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIHost::getHostIp() const {
    return m_host_ip;
}
void OAIHost::setHostIp(const QString &host_ip) {
    m_host_ip = host_ip;
    m_host_ip_isSet = true;
}

bool OAIHost::is_host_ip_Set() const{
    return m_host_ip_isSet;
}

bool OAIHost::is_host_ip_Valid() const{
    return m_host_ip_isValid;
}

QString OAIHost::getEc2InstanceId() const {
    return m_ec2_instance_id;
}
void OAIHost::setEc2InstanceId(const QString &ec2_instance_id) {
    m_ec2_instance_id = ec2_instance_id;
    m_ec2_instance_id_isSet = true;
}

bool OAIHost::is_ec2_instance_id_Set() const{
    return m_ec2_instance_id_isSet;
}

bool OAIHost::is_ec2_instance_id_Valid() const{
    return m_ec2_instance_id_isValid;
}

QString OAIHost::getInstanceId() const {
    return m_instance_id;
}
void OAIHost::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIHost::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIHost::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

OAIHostRole OAIHost::getHostRole() const {
    return m_host_role;
}
void OAIHost::setHostRole(const OAIHostRole &host_role) {
    m_host_role = host_role;
    m_host_role_isSet = true;
}

bool OAIHost::is_host_role_Set() const{
    return m_host_role_isSet;
}

bool OAIHost::is_host_role_Valid() const{
    return m_host_role_isValid;
}

QString OAIHost::getOsVersion() const {
    return m_os_version;
}
void OAIHost::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIHost::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIHost::is_os_version_Valid() const{
    return m_os_version_isValid;
}

bool OAIHost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
