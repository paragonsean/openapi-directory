/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociatedHost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociatedHost::OAIAssociatedHost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociatedHost::OAIAssociatedHost() {
    this->initializeModel();
}

OAIAssociatedHost::~OAIAssociatedHost() {}

void OAIAssociatedHost::initializeModel() {

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_ec2_instance_id_isSet = false;
    m_ec2_instance_id_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;
}

void OAIAssociatedHost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociatedHost::fromJsonObject(QJsonObject json) {

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("Hostname")]);
    m_hostname_isSet = !json[QString("Hostname")].isNull() && m_hostname_isValid;

    m_ec2_instance_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_id, json[QString("Ec2InstanceId")]);
    m_ec2_instance_id_isSet = !json[QString("Ec2InstanceId")].isNull() && m_ec2_instance_id_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("OsVersion")]);
    m_os_version_isSet = !json[QString("OsVersion")].isNull() && m_os_version_isValid;
}

QString OAIAssociatedHost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociatedHost::asJsonObject() const {
    QJsonObject obj;
    if (m_hostname_isSet) {
        obj.insert(QString("Hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_ec2_instance_id_isSet) {
        obj.insert(QString("Ec2InstanceId"), ::OpenAPI::toJsonValue(m_ec2_instance_id));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("OsVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    return obj;
}

QString OAIAssociatedHost::getHostname() const {
    return m_hostname;
}
void OAIAssociatedHost::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIAssociatedHost::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIAssociatedHost::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIAssociatedHost::getEc2InstanceId() const {
    return m_ec2_instance_id;
}
void OAIAssociatedHost::setEc2InstanceId(const QString &ec2_instance_id) {
    m_ec2_instance_id = ec2_instance_id;
    m_ec2_instance_id_isSet = true;
}

bool OAIAssociatedHost::is_ec2_instance_id_Set() const{
    return m_ec2_instance_id_isSet;
}

bool OAIAssociatedHost::is_ec2_instance_id_Valid() const{
    return m_ec2_instance_id_isValid;
}

QString OAIAssociatedHost::getOsVersion() const {
    return m_os_version;
}
void OAIAssociatedHost::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIAssociatedHost::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIAssociatedHost::is_os_version_Valid() const{
    return m_os_version_isValid;
}

bool OAIAssociatedHost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociatedHost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
