/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseStatus::OAIDatabaseStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseStatus::OAIDatabaseStatus() {
    this->initializeModel();
}

OAIDatabaseStatus::~OAIDatabaseStatus() {}

void OAIDatabaseStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDatabaseStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDatabaseStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDatabaseStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDatabaseStatus::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDatabaseStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WARNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDatabaseStatus::WARNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDatabaseStatus::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDatabaseStatus::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDatabaseStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDatabaseStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDatabaseStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAIDatabaseStatus::STARTING:
            val = "STARTING";
            break;
        case eOAIDatabaseStatus::STOPPED:
            val = "STOPPED";
            break;
        case eOAIDatabaseStatus::WARNING:
            val = "WARNING";
            break;
        case eOAIDatabaseStatus::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIDatabaseStatus::ERROR:
            val = "ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDatabaseStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDatabaseStatus::eOAIDatabaseStatus OAIDatabaseStatus::getValue() const {
    return m_value;
}

void OAIDatabaseStatus::setValue(const OAIDatabaseStatus::eOAIDatabaseStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDatabaseStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIDatabaseStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
