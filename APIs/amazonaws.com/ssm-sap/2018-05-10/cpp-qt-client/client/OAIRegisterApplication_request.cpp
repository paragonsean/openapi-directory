/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterApplication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterApplication_request::OAIRegisterApplication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterApplication_request::OAIRegisterApplication_request() {
    this->initializeModel();
}

OAIRegisterApplication_request::~OAIRegisterApplication_request() {}

void OAIRegisterApplication_request::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_type_isSet = false;
    m_application_type_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_sap_instance_number_isSet = false;
    m_sap_instance_number_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;
}

void OAIRegisterApplication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterApplication_request::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_application_type_isValid = ::OpenAPI::fromJsonValue(m_application_type, json[QString("ApplicationType")]);
    m_application_type_isSet = !json[QString("ApplicationType")].isNull() && m_application_type_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("Instances")]);
    m_instances_isSet = !json[QString("Instances")].isNull() && m_instances_isValid;

    m_sap_instance_number_isValid = ::OpenAPI::fromJsonValue(m_sap_instance_number, json[QString("SapInstanceNumber")]);
    m_sap_instance_number_isSet = !json[QString("SapInstanceNumber")].isNull() && m_sap_instance_number_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("Sid")]);
    m_sid_isSet = !json[QString("Sid")].isNull() && m_sid_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;
}

QString OAIRegisterApplication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterApplication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_type_isSet) {
        obj.insert(QString("ApplicationType"), ::OpenAPI::toJsonValue(m_application_type));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("Instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_sap_instance_number_isSet) {
        obj.insert(QString("SapInstanceNumber"), ::OpenAPI::toJsonValue(m_sap_instance_number));
    }
    if (m_sid_isSet) {
        obj.insert(QString("Sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_credentials.size() > 0) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    return obj;
}

QString OAIRegisterApplication_request::getApplicationId() const {
    return m_application_id;
}
void OAIRegisterApplication_request::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIRegisterApplication_request::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIRegisterApplication_request::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIRegisterApplication_request::getApplicationType() const {
    return m_application_type;
}
void OAIRegisterApplication_request::setApplicationType(const QString &application_type) {
    m_application_type = application_type;
    m_application_type_isSet = true;
}

bool OAIRegisterApplication_request::is_application_type_Set() const{
    return m_application_type_isSet;
}

bool OAIRegisterApplication_request::is_application_type_Valid() const{
    return m_application_type_isValid;
}

QList<QString> OAIRegisterApplication_request::getInstances() const {
    return m_instances;
}
void OAIRegisterApplication_request::setInstances(const QList<QString> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIRegisterApplication_request::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIRegisterApplication_request::is_instances_Valid() const{
    return m_instances_isValid;
}

QString OAIRegisterApplication_request::getSapInstanceNumber() const {
    return m_sap_instance_number;
}
void OAIRegisterApplication_request::setSapInstanceNumber(const QString &sap_instance_number) {
    m_sap_instance_number = sap_instance_number;
    m_sap_instance_number_isSet = true;
}

bool OAIRegisterApplication_request::is_sap_instance_number_Set() const{
    return m_sap_instance_number_isSet;
}

bool OAIRegisterApplication_request::is_sap_instance_number_Valid() const{
    return m_sap_instance_number_isValid;
}

QString OAIRegisterApplication_request::getSid() const {
    return m_sid;
}
void OAIRegisterApplication_request::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIRegisterApplication_request::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIRegisterApplication_request::is_sid_Valid() const{
    return m_sid_isValid;
}

QMap<QString, QString> OAIRegisterApplication_request::getTags() const {
    return m_tags;
}
void OAIRegisterApplication_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRegisterApplication_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRegisterApplication_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIApplicationCredential> OAIRegisterApplication_request::getCredentials() const {
    return m_credentials;
}
void OAIRegisterApplication_request::setCredentials(const QList<OAIApplicationCredential> &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIRegisterApplication_request::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIRegisterApplication_request::is_credentials_Valid() const{
    return m_credentials_isValid;
}

bool OAIRegisterApplication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sap_instance_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterApplication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_application_type_isValid && m_instances_isValid && m_credentials_isValid && true;
}

} // namespace OpenAPI
