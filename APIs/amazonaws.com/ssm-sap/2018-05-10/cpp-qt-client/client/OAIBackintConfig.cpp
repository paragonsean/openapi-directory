/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackintConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackintConfig::OAIBackintConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackintConfig::OAIBackintConfig() {
    this->initializeModel();
}

OAIBackintConfig::~OAIBackintConfig() {}

void OAIBackintConfig::initializeModel() {

    m_backint_mode_isSet = false;
    m_backint_mode_isValid = false;

    m_ensure_no_backup_in_process_isSet = false;
    m_ensure_no_backup_in_process_isValid = false;
}

void OAIBackintConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackintConfig::fromJsonObject(QJsonObject json) {

    m_backint_mode_isValid = ::OpenAPI::fromJsonValue(m_backint_mode, json[QString("BackintMode")]);
    m_backint_mode_isSet = !json[QString("BackintMode")].isNull() && m_backint_mode_isValid;

    m_ensure_no_backup_in_process_isValid = ::OpenAPI::fromJsonValue(m_ensure_no_backup_in_process, json[QString("EnsureNoBackupInProcess")]);
    m_ensure_no_backup_in_process_isSet = !json[QString("EnsureNoBackupInProcess")].isNull() && m_ensure_no_backup_in_process_isValid;
}

QString OAIBackintConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackintConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_backint_mode.isSet()) {
        obj.insert(QString("BackintMode"), ::OpenAPI::toJsonValue(m_backint_mode));
    }
    if (m_ensure_no_backup_in_process_isSet) {
        obj.insert(QString("EnsureNoBackupInProcess"), ::OpenAPI::toJsonValue(m_ensure_no_backup_in_process));
    }
    return obj;
}

OAIBackintMode OAIBackintConfig::getBackintMode() const {
    return m_backint_mode;
}
void OAIBackintConfig::setBackintMode(const OAIBackintMode &backint_mode) {
    m_backint_mode = backint_mode;
    m_backint_mode_isSet = true;
}

bool OAIBackintConfig::is_backint_mode_Set() const{
    return m_backint_mode_isSet;
}

bool OAIBackintConfig::is_backint_mode_Valid() const{
    return m_backint_mode_isValid;
}

bool OAIBackintConfig::getEnsureNoBackupInProcess() const {
    return m_ensure_no_backup_in_process;
}
void OAIBackintConfig::setEnsureNoBackupInProcess(const bool &ensure_no_backup_in_process) {
    m_ensure_no_backup_in_process = ensure_no_backup_in_process;
    m_ensure_no_backup_in_process_isSet = true;
}

bool OAIBackintConfig::is_ensure_no_backup_in_process_Set() const{
    return m_ensure_no_backup_in_process_isSet;
}

bool OAIBackintConfig::is_ensure_no_backup_in_process_Valid() const{
    return m_ensure_no_backup_in_process_isValid;
}

bool OAIBackintConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backint_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ensure_no_backup_in_process_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackintConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backint_mode_isValid && m_ensure_no_backup_in_process_isValid && true;
}

} // namespace OpenAPI
