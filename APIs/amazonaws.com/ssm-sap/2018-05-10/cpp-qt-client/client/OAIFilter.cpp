/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter::OAIFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter::OAIFilter() {
    this->initializeModel();
}

OAIFilter::~OAIFilter() {}

void OAIFilter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("Operator")]);
    m_r_operator_isSet = !json[QString("Operator")].isNull() && m_r_operator_isValid;
}

QString OAIFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("Operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QString OAIFilter::getName() const {
    return m_name;
}
void OAIFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFilter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFilter::getValue() const {
    return m_value;
}
void OAIFilter::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFilter::is_value_Valid() const{
    return m_value_isValid;
}

OAIFilterOperator OAIFilter::getROperator() const {
    return m_r_operator;
}
void OAIFilter::setROperator(const OAIFilterOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIFilter::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIFilter::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_value_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
