/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListApplicationsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListApplicationsOutput::OAIListApplicationsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListApplicationsOutput::OAIListApplicationsOutput() {
    this->initializeModel();
}

OAIListApplicationsOutput::~OAIListApplicationsOutput() {}

void OAIListApplicationsOutput::initializeModel() {

    m_applications_isSet = false;
    m_applications_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListApplicationsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListApplicationsOutput::fromJsonObject(QJsonObject json) {

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("Applications")]);
    m_applications_isSet = !json[QString("Applications")].isNull() && m_applications_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListApplicationsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListApplicationsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_applications.isSet()) {
        obj.insert(QString("Applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListApplicationsOutput::getApplications() const {
    return m_applications;
}
void OAIListApplicationsOutput::setApplications(const QList &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAIListApplicationsOutput::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAIListApplicationsOutput::is_applications_Valid() const{
    return m_applications_isValid;
}

QString OAIListApplicationsOutput::getNextToken() const {
    return m_next_token;
}
void OAIListApplicationsOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListApplicationsOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListApplicationsOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListApplicationsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListApplicationsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
