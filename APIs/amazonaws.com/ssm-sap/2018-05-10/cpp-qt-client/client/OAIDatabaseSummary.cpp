/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseSummary::OAIDatabaseSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseSummary::OAIDatabaseSummary() {
    this->initializeModel();
}

OAIDatabaseSummary::~OAIDatabaseSummary() {}

void OAIDatabaseSummary::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_database_type_isSet = false;
    m_database_type_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDatabaseSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseSummary::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("ComponentId")]);
    m_component_id_isSet = !json[QString("ComponentId")].isNull() && m_component_id_isValid;

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("DatabaseId")]);
    m_database_id_isSet = !json[QString("DatabaseId")].isNull() && m_database_id_isValid;

    m_database_type_isValid = ::OpenAPI::fromJsonValue(m_database_type, json[QString("DatabaseType")]);
    m_database_type_isSet = !json[QString("DatabaseType")].isNull() && m_database_type_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDatabaseSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_component_id_isSet) {
        obj.insert(QString("ComponentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_database_id_isSet) {
        obj.insert(QString("DatabaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_database_type.isSet()) {
        obj.insert(QString("DatabaseType"), ::OpenAPI::toJsonValue(m_database_type));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDatabaseSummary::getApplicationId() const {
    return m_application_id;
}
void OAIDatabaseSummary::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIDatabaseSummary::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIDatabaseSummary::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIDatabaseSummary::getComponentId() const {
    return m_component_id;
}
void OAIDatabaseSummary::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIDatabaseSummary::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIDatabaseSummary::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QString OAIDatabaseSummary::getDatabaseId() const {
    return m_database_id;
}
void OAIDatabaseSummary::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIDatabaseSummary::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIDatabaseSummary::is_database_id_Valid() const{
    return m_database_id_isValid;
}

OAIDatabaseType OAIDatabaseSummary::getDatabaseType() const {
    return m_database_type;
}
void OAIDatabaseSummary::setDatabaseType(const OAIDatabaseType &database_type) {
    m_database_type = database_type;
    m_database_type_isSet = true;
}

bool OAIDatabaseSummary::is_database_type_Set() const{
    return m_database_type_isSet;
}

bool OAIDatabaseSummary::is_database_type_Valid() const{
    return m_database_type_isValid;
}

QString OAIDatabaseSummary::getArn() const {
    return m_arn;
}
void OAIDatabaseSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDatabaseSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDatabaseSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QMap OAIDatabaseSummary::getTags() const {
    return m_tags;
}
void OAIDatabaseSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDatabaseSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDatabaseSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDatabaseSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
