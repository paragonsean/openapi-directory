/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeregisterApplication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeregisterApplication_request::OAIDeregisterApplication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeregisterApplication_request::OAIDeregisterApplication_request() {
    this->initializeModel();
}

OAIDeregisterApplication_request::~OAIDeregisterApplication_request() {}

void OAIDeregisterApplication_request::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;
}

void OAIDeregisterApplication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeregisterApplication_request::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;
}

QString OAIDeregisterApplication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeregisterApplication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    return obj;
}

QString OAIDeregisterApplication_request::getApplicationId() const {
    return m_application_id;
}
void OAIDeregisterApplication_request::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIDeregisterApplication_request::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIDeregisterApplication_request::is_application_id_Valid() const{
    return m_application_id_isValid;
}

bool OAIDeregisterApplication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeregisterApplication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && true;
}

} // namespace OpenAPI
