/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDatabase_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDatabase_request::OAIGetDatabase_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDatabase_request::OAIGetDatabase_request() {
    this->initializeModel();
}

OAIGetDatabase_request::~OAIGetDatabase_request() {}

void OAIGetDatabase_request::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_database_arn_isSet = false;
    m_database_arn_isValid = false;
}

void OAIGetDatabase_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDatabase_request::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("ComponentId")]);
    m_component_id_isSet = !json[QString("ComponentId")].isNull() && m_component_id_isValid;

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("DatabaseId")]);
    m_database_id_isSet = !json[QString("DatabaseId")].isNull() && m_database_id_isValid;

    m_database_arn_isValid = ::OpenAPI::fromJsonValue(m_database_arn, json[QString("DatabaseArn")]);
    m_database_arn_isSet = !json[QString("DatabaseArn")].isNull() && m_database_arn_isValid;
}

QString OAIGetDatabase_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDatabase_request::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_component_id_isSet) {
        obj.insert(QString("ComponentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_database_id_isSet) {
        obj.insert(QString("DatabaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_database_arn_isSet) {
        obj.insert(QString("DatabaseArn"), ::OpenAPI::toJsonValue(m_database_arn));
    }
    return obj;
}

QString OAIGetDatabase_request::getApplicationId() const {
    return m_application_id;
}
void OAIGetDatabase_request::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetDatabase_request::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetDatabase_request::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIGetDatabase_request::getComponentId() const {
    return m_component_id;
}
void OAIGetDatabase_request::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIGetDatabase_request::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIGetDatabase_request::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QString OAIGetDatabase_request::getDatabaseId() const {
    return m_database_id;
}
void OAIGetDatabase_request::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIGetDatabase_request::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIGetDatabase_request::is_database_id_Valid() const{
    return m_database_id_isValid;
}

QString OAIGetDatabase_request::getDatabaseArn() const {
    return m_database_arn;
}
void OAIGetDatabase_request::setDatabaseArn(const QString &database_arn) {
    m_database_arn = database_arn;
    m_database_arn_isSet = true;
}

bool OAIGetDatabase_request::is_database_arn_Set() const{
    return m_database_arn_isSet;
}

bool OAIGetDatabase_request::is_database_arn_Valid() const{
    return m_database_arn_isValid;
}

bool OAIGetDatabase_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDatabase_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
