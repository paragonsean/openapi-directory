/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabase::OAIDatabase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabase::OAIDatabase() {
    this->initializeModel();
}

OAIDatabase::~OAIDatabase() {}

void OAIDatabase::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_database_type_isSet = false;
    m_database_type_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_primary_host_isSet = false;
    m_primary_host_isValid = false;

    m_sql_port_isSet = false;
    m_sql_port_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;
}

void OAIDatabase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabase::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("ComponentId")]);
    m_component_id_isSet = !json[QString("ComponentId")].isNull() && m_component_id_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("DatabaseId")]);
    m_database_id_isSet = !json[QString("DatabaseId")].isNull() && m_database_id_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_database_type_isValid = ::OpenAPI::fromJsonValue(m_database_type, json[QString("DatabaseType")]);
    m_database_type_isSet = !json[QString("DatabaseType")].isNull() && m_database_type_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_primary_host_isValid = ::OpenAPI::fromJsonValue(m_primary_host, json[QString("PrimaryHost")]);
    m_primary_host_isSet = !json[QString("PrimaryHost")].isNull() && m_primary_host_isValid;

    m_sql_port_isValid = ::OpenAPI::fromJsonValue(m_sql_port, json[QString("SQLPort")]);
    m_sql_port_isSet = !json[QString("SQLPort")].isNull() && m_sql_port_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;
}

QString OAIDatabase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabase::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_component_id_isSet) {
        obj.insert(QString("ComponentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_database_id_isSet) {
        obj.insert(QString("DatabaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_database_type.isSet()) {
        obj.insert(QString("DatabaseType"), ::OpenAPI::toJsonValue(m_database_type));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_primary_host_isSet) {
        obj.insert(QString("PrimaryHost"), ::OpenAPI::toJsonValue(m_primary_host));
    }
    if (m_sql_port_isSet) {
        obj.insert(QString("SQLPort"), ::OpenAPI::toJsonValue(m_sql_port));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    return obj;
}

QString OAIDatabase::getApplicationId() const {
    return m_application_id;
}
void OAIDatabase::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIDatabase::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIDatabase::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIDatabase::getComponentId() const {
    return m_component_id;
}
void OAIDatabase::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIDatabase::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIDatabase::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QList OAIDatabase::getCredentials() const {
    return m_credentials;
}
void OAIDatabase::setCredentials(const QList &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIDatabase::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIDatabase::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAIDatabase::getDatabaseId() const {
    return m_database_id;
}
void OAIDatabase::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIDatabase::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIDatabase::is_database_id_Valid() const{
    return m_database_id_isValid;
}

QString OAIDatabase::getDatabaseName() const {
    return m_database_name;
}
void OAIDatabase::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDatabase::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDatabase::is_database_name_Valid() const{
    return m_database_name_isValid;
}

OAIDatabaseType OAIDatabase::getDatabaseType() const {
    return m_database_type;
}
void OAIDatabase::setDatabaseType(const OAIDatabaseType &database_type) {
    m_database_type = database_type;
    m_database_type_isSet = true;
}

bool OAIDatabase::is_database_type_Set() const{
    return m_database_type_isSet;
}

bool OAIDatabase::is_database_type_Valid() const{
    return m_database_type_isValid;
}

QString OAIDatabase::getArn() const {
    return m_arn;
}
void OAIDatabase::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDatabase::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDatabase::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIDatabaseStatus OAIDatabase::getStatus() const {
    return m_status;
}
void OAIDatabase::setStatus(const OAIDatabaseStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDatabase::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDatabase::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDatabase::getPrimaryHost() const {
    return m_primary_host;
}
void OAIDatabase::setPrimaryHost(const QString &primary_host) {
    m_primary_host = primary_host;
    m_primary_host_isSet = true;
}

bool OAIDatabase::is_primary_host_Set() const{
    return m_primary_host_isSet;
}

bool OAIDatabase::is_primary_host_Valid() const{
    return m_primary_host_isValid;
}

qint32 OAIDatabase::getSqlPort() const {
    return m_sql_port;
}
void OAIDatabase::setSqlPort(const qint32 &sql_port) {
    m_sql_port = sql_port;
    m_sql_port_isSet = true;
}

bool OAIDatabase::is_sql_port_Set() const{
    return m_sql_port_isSet;
}

bool OAIDatabase::is_sql_port_Valid() const{
    return m_sql_port_isValid;
}

QDateTime OAIDatabase::getLastUpdated() const {
    return m_last_updated;
}
void OAIDatabase::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDatabase::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDatabase::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

bool OAIDatabase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
