/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListOperations_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListOperations_request::OAIListOperations_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListOperations_request::OAIListOperations_request() {
    this->initializeModel();
}

OAIListOperations_request::~OAIListOperations_request() {}

void OAIListOperations_request::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAIListOperations_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListOperations_request::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;
}

QString OAIListOperations_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListOperations_request::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QString OAIListOperations_request::getApplicationId() const {
    return m_application_id;
}
void OAIListOperations_request::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIListOperations_request::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIListOperations_request::is_application_id_Valid() const{
    return m_application_id_isValid;
}

qint32 OAIListOperations_request::getMaxResults() const {
    return m_max_results;
}
void OAIListOperations_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListOperations_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListOperations_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListOperations_request::getNextToken() const {
    return m_next_token;
}
void OAIListOperations_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListOperations_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListOperations_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList<OAIFilter> OAIListOperations_request::getFilters() const {
    return m_filters;
}
void OAIListOperations_request::setFilters(const QList<OAIFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIListOperations_request::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIListOperations_request::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAIListOperations_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListOperations_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && true;
}

} // namespace OpenAPI
