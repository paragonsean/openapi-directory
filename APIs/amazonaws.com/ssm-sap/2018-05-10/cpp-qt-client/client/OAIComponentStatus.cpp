/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentStatus::OAIComponentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentStatus::OAIComponentStatus() {
    this->initializeModel();
}

OAIComponentStatus::~OAIComponentStatus() {}

void OAIComponentStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIComponentStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIComponentStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACTIVATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComponentStatus::ACTIVATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComponentStatus::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComponentStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComponentStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComponentStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING_WITH_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComponentStatus::RUNNING_WITH_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNDEFINED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComponentStatus::UNDEFINED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIComponentStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIComponentStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIComponentStatus::ACTIVATED:
            val = "ACTIVATED";
            break;
        case eOAIComponentStatus::STARTING:
            val = "STARTING";
            break;
        case eOAIComponentStatus::STOPPED:
            val = "STOPPED";
            break;
        case eOAIComponentStatus::STOPPING:
            val = "STOPPING";
            break;
        case eOAIComponentStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAIComponentStatus::RUNNING_WITH_ERROR:
            val = "RUNNING_WITH_ERROR";
            break;
        case eOAIComponentStatus::UNDEFINED:
            val = "UNDEFINED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIComponentStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIComponentStatus::eOAIComponentStatus OAIComponentStatus::getValue() const {
    return m_value;
}

void OAIComponentStatus::setValue(const OAIComponentStatus::eOAIComponentStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIComponentStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIComponentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
