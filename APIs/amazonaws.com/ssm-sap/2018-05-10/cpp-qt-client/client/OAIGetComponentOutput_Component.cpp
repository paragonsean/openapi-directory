/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetComponentOutput_Component.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetComponentOutput_Component::OAIGetComponentOutput_Component(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetComponentOutput_Component::OAIGetComponentOutput_Component() {
    this->initializeModel();
}

OAIGetComponentOutput_Component::~OAIGetComponentOutput_Component() {}

void OAIGetComponentOutput_Component::initializeModel() {

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_parent_component_isSet = false;
    m_parent_component_isValid = false;

    m_child_components_isSet = false;
    m_child_components_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_component_type_isSet = false;
    m_component_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sap_hostname_isSet = false;
    m_sap_hostname_isValid = false;

    m_sap_kernel_version_isSet = false;
    m_sap_kernel_version_isValid = false;

    m_hdb_version_isSet = false;
    m_hdb_version_isValid = false;

    m_resilience_isSet = false;
    m_resilience_isValid = false;

    m_associated_host_isSet = false;
    m_associated_host_isValid = false;

    m_databases_isSet = false;
    m_databases_isValid = false;

    m_hosts_isSet = false;
    m_hosts_isValid = false;

    m_primary_host_isSet = false;
    m_primary_host_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIGetComponentOutput_Component::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetComponentOutput_Component::fromJsonObject(QJsonObject json) {

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("ComponentId")]);
    m_component_id_isSet = !json[QString("ComponentId")].isNull() && m_component_id_isValid;

    m_parent_component_isValid = ::OpenAPI::fromJsonValue(m_parent_component, json[QString("ParentComponent")]);
    m_parent_component_isSet = !json[QString("ParentComponent")].isNull() && m_parent_component_isValid;

    m_child_components_isValid = ::OpenAPI::fromJsonValue(m_child_components, json[QString("ChildComponents")]);
    m_child_components_isSet = !json[QString("ChildComponents")].isNull() && m_child_components_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_component_type_isValid = ::OpenAPI::fromJsonValue(m_component_type, json[QString("ComponentType")]);
    m_component_type_isSet = !json[QString("ComponentType")].isNull() && m_component_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sap_hostname_isValid = ::OpenAPI::fromJsonValue(m_sap_hostname, json[QString("SapHostname")]);
    m_sap_hostname_isSet = !json[QString("SapHostname")].isNull() && m_sap_hostname_isValid;

    m_sap_kernel_version_isValid = ::OpenAPI::fromJsonValue(m_sap_kernel_version, json[QString("SapKernelVersion")]);
    m_sap_kernel_version_isSet = !json[QString("SapKernelVersion")].isNull() && m_sap_kernel_version_isValid;

    m_hdb_version_isValid = ::OpenAPI::fromJsonValue(m_hdb_version, json[QString("HdbVersion")]);
    m_hdb_version_isSet = !json[QString("HdbVersion")].isNull() && m_hdb_version_isValid;

    m_resilience_isValid = ::OpenAPI::fromJsonValue(m_resilience, json[QString("Resilience")]);
    m_resilience_isSet = !json[QString("Resilience")].isNull() && m_resilience_isValid;

    m_associated_host_isValid = ::OpenAPI::fromJsonValue(m_associated_host, json[QString("AssociatedHost")]);
    m_associated_host_isSet = !json[QString("AssociatedHost")].isNull() && m_associated_host_isValid;

    m_databases_isValid = ::OpenAPI::fromJsonValue(m_databases, json[QString("Databases")]);
    m_databases_isSet = !json[QString("Databases")].isNull() && m_databases_isValid;

    m_hosts_isValid = ::OpenAPI::fromJsonValue(m_hosts, json[QString("Hosts")]);
    m_hosts_isSet = !json[QString("Hosts")].isNull() && m_hosts_isValid;

    m_primary_host_isValid = ::OpenAPI::fromJsonValue(m_primary_host, json[QString("PrimaryHost")]);
    m_primary_host_isSet = !json[QString("PrimaryHost")].isNull() && m_primary_host_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;
}

QString OAIGetComponentOutput_Component::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetComponentOutput_Component::asJsonObject() const {
    QJsonObject obj;
    if (m_component_id_isSet) {
        obj.insert(QString("ComponentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_parent_component_isSet) {
        obj.insert(QString("ParentComponent"), ::OpenAPI::toJsonValue(m_parent_component));
    }
    if (m_child_components.isSet()) {
        obj.insert(QString("ChildComponents"), ::OpenAPI::toJsonValue(m_child_components));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_component_type.isSet()) {
        obj.insert(QString("ComponentType"), ::OpenAPI::toJsonValue(m_component_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sap_hostname_isSet) {
        obj.insert(QString("SapHostname"), ::OpenAPI::toJsonValue(m_sap_hostname));
    }
    if (m_sap_kernel_version_isSet) {
        obj.insert(QString("SapKernelVersion"), ::OpenAPI::toJsonValue(m_sap_kernel_version));
    }
    if (m_hdb_version_isSet) {
        obj.insert(QString("HdbVersion"), ::OpenAPI::toJsonValue(m_hdb_version));
    }
    if (m_resilience.isSet()) {
        obj.insert(QString("Resilience"), ::OpenAPI::toJsonValue(m_resilience));
    }
    if (m_associated_host.isSet()) {
        obj.insert(QString("AssociatedHost"), ::OpenAPI::toJsonValue(m_associated_host));
    }
    if (m_databases.isSet()) {
        obj.insert(QString("Databases"), ::OpenAPI::toJsonValue(m_databases));
    }
    if (m_hosts.isSet()) {
        obj.insert(QString("Hosts"), ::OpenAPI::toJsonValue(m_hosts));
    }
    if (m_primary_host_isSet) {
        obj.insert(QString("PrimaryHost"), ::OpenAPI::toJsonValue(m_primary_host));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QString OAIGetComponentOutput_Component::getComponentId() const {
    return m_component_id;
}
void OAIGetComponentOutput_Component::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIGetComponentOutput_Component::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIGetComponentOutput_Component::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QString OAIGetComponentOutput_Component::getParentComponent() const {
    return m_parent_component;
}
void OAIGetComponentOutput_Component::setParentComponent(const QString &parent_component) {
    m_parent_component = parent_component;
    m_parent_component_isSet = true;
}

bool OAIGetComponentOutput_Component::is_parent_component_Set() const{
    return m_parent_component_isSet;
}

bool OAIGetComponentOutput_Component::is_parent_component_Valid() const{
    return m_parent_component_isValid;
}

QList OAIGetComponentOutput_Component::getChildComponents() const {
    return m_child_components;
}
void OAIGetComponentOutput_Component::setChildComponents(const QList &child_components) {
    m_child_components = child_components;
    m_child_components_isSet = true;
}

bool OAIGetComponentOutput_Component::is_child_components_Set() const{
    return m_child_components_isSet;
}

bool OAIGetComponentOutput_Component::is_child_components_Valid() const{
    return m_child_components_isValid;
}

QString OAIGetComponentOutput_Component::getApplicationId() const {
    return m_application_id;
}
void OAIGetComponentOutput_Component::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetComponentOutput_Component::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetComponentOutput_Component::is_application_id_Valid() const{
    return m_application_id_isValid;
}

OAIComponentType OAIGetComponentOutput_Component::getComponentType() const {
    return m_component_type;
}
void OAIGetComponentOutput_Component::setComponentType(const OAIComponentType &component_type) {
    m_component_type = component_type;
    m_component_type_isSet = true;
}

bool OAIGetComponentOutput_Component::is_component_type_Set() const{
    return m_component_type_isSet;
}

bool OAIGetComponentOutput_Component::is_component_type_Valid() const{
    return m_component_type_isValid;
}

OAIComponentStatus OAIGetComponentOutput_Component::getStatus() const {
    return m_status;
}
void OAIGetComponentOutput_Component::setStatus(const OAIComponentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetComponentOutput_Component::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetComponentOutput_Component::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetComponentOutput_Component::getSapHostname() const {
    return m_sap_hostname;
}
void OAIGetComponentOutput_Component::setSapHostname(const QString &sap_hostname) {
    m_sap_hostname = sap_hostname;
    m_sap_hostname_isSet = true;
}

bool OAIGetComponentOutput_Component::is_sap_hostname_Set() const{
    return m_sap_hostname_isSet;
}

bool OAIGetComponentOutput_Component::is_sap_hostname_Valid() const{
    return m_sap_hostname_isValid;
}

QString OAIGetComponentOutput_Component::getSapKernelVersion() const {
    return m_sap_kernel_version;
}
void OAIGetComponentOutput_Component::setSapKernelVersion(const QString &sap_kernel_version) {
    m_sap_kernel_version = sap_kernel_version;
    m_sap_kernel_version_isSet = true;
}

bool OAIGetComponentOutput_Component::is_sap_kernel_version_Set() const{
    return m_sap_kernel_version_isSet;
}

bool OAIGetComponentOutput_Component::is_sap_kernel_version_Valid() const{
    return m_sap_kernel_version_isValid;
}

QString OAIGetComponentOutput_Component::getHdbVersion() const {
    return m_hdb_version;
}
void OAIGetComponentOutput_Component::setHdbVersion(const QString &hdb_version) {
    m_hdb_version = hdb_version;
    m_hdb_version_isSet = true;
}

bool OAIGetComponentOutput_Component::is_hdb_version_Set() const{
    return m_hdb_version_isSet;
}

bool OAIGetComponentOutput_Component::is_hdb_version_Valid() const{
    return m_hdb_version_isValid;
}

OAIComponent_Resilience OAIGetComponentOutput_Component::getResilience() const {
    return m_resilience;
}
void OAIGetComponentOutput_Component::setResilience(const OAIComponent_Resilience &resilience) {
    m_resilience = resilience;
    m_resilience_isSet = true;
}

bool OAIGetComponentOutput_Component::is_resilience_Set() const{
    return m_resilience_isSet;
}

bool OAIGetComponentOutput_Component::is_resilience_Valid() const{
    return m_resilience_isValid;
}

OAIComponent_AssociatedHost OAIGetComponentOutput_Component::getAssociatedHost() const {
    return m_associated_host;
}
void OAIGetComponentOutput_Component::setAssociatedHost(const OAIComponent_AssociatedHost &associated_host) {
    m_associated_host = associated_host;
    m_associated_host_isSet = true;
}

bool OAIGetComponentOutput_Component::is_associated_host_Set() const{
    return m_associated_host_isSet;
}

bool OAIGetComponentOutput_Component::is_associated_host_Valid() const{
    return m_associated_host_isValid;
}

QList OAIGetComponentOutput_Component::getDatabases() const {
    return m_databases;
}
void OAIGetComponentOutput_Component::setDatabases(const QList &databases) {
    m_databases = databases;
    m_databases_isSet = true;
}

bool OAIGetComponentOutput_Component::is_databases_Set() const{
    return m_databases_isSet;
}

bool OAIGetComponentOutput_Component::is_databases_Valid() const{
    return m_databases_isValid;
}

QList OAIGetComponentOutput_Component::getHosts() const {
    return m_hosts;
}
void OAIGetComponentOutput_Component::setHosts(const QList &hosts) {
    m_hosts = hosts;
    m_hosts_isSet = true;
}

bool OAIGetComponentOutput_Component::is_hosts_Set() const{
    return m_hosts_isSet;
}

bool OAIGetComponentOutput_Component::is_hosts_Valid() const{
    return m_hosts_isValid;
}

QString OAIGetComponentOutput_Component::getPrimaryHost() const {
    return m_primary_host;
}
void OAIGetComponentOutput_Component::setPrimaryHost(const QString &primary_host) {
    m_primary_host = primary_host;
    m_primary_host_isSet = true;
}

bool OAIGetComponentOutput_Component::is_primary_host_Set() const{
    return m_primary_host_isSet;
}

bool OAIGetComponentOutput_Component::is_primary_host_Valid() const{
    return m_primary_host_isValid;
}

QDateTime OAIGetComponentOutput_Component::getLastUpdated() const {
    return m_last_updated;
}
void OAIGetComponentOutput_Component::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIGetComponentOutput_Component::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIGetComponentOutput_Component::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIGetComponentOutput_Component::getArn() const {
    return m_arn;
}
void OAIGetComponentOutput_Component::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetComponentOutput_Component::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetComponentOutput_Component::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIGetComponentOutput_Component::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_component_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_components.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sap_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sap_kernel_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdb_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resilience.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_host.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_databases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetComponentOutput_Component::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
