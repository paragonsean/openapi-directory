/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDatabasesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDatabasesOutput::OAIListDatabasesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDatabasesOutput::OAIListDatabasesOutput() {
    this->initializeModel();
}

OAIListDatabasesOutput::~OAIListDatabasesOutput() {}

void OAIListDatabasesOutput::initializeModel() {

    m_databases_isSet = false;
    m_databases_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDatabasesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDatabasesOutput::fromJsonObject(QJsonObject json) {

    m_databases_isValid = ::OpenAPI::fromJsonValue(m_databases, json[QString("Databases")]);
    m_databases_isSet = !json[QString("Databases")].isNull() && m_databases_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDatabasesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDatabasesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_databases.isSet()) {
        obj.insert(QString("Databases"), ::OpenAPI::toJsonValue(m_databases));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDatabasesOutput::getDatabases() const {
    return m_databases;
}
void OAIListDatabasesOutput::setDatabases(const QList &databases) {
    m_databases = databases;
    m_databases_isSet = true;
}

bool OAIListDatabasesOutput::is_databases_Set() const{
    return m_databases_isSet;
}

bool OAIListDatabasesOutput::is_databases_Valid() const{
    return m_databases_isValid;
}

QString OAIListDatabasesOutput::getNextToken() const {
    return m_next_token;
}
void OAIListDatabasesOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDatabasesOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDatabasesOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDatabasesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_databases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDatabasesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
