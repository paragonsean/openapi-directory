/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetApplicationOutput_Application.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetApplicationOutput_Application::OAIGetApplicationOutput_Application(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetApplicationOutput_Application::OAIGetApplicationOutput_Application() {
    this->initializeModel();
}

OAIGetApplicationOutput_Application::~OAIGetApplicationOutput_Application() {}

void OAIGetApplicationOutput_Application::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_app_registry_arn_isSet = false;
    m_app_registry_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_discovery_status_isSet = false;
    m_discovery_status_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIGetApplicationOutput_Application::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetApplicationOutput_Application::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_app_registry_arn_isValid = ::OpenAPI::fromJsonValue(m_app_registry_arn, json[QString("AppRegistryArn")]);
    m_app_registry_arn_isSet = !json[QString("AppRegistryArn")].isNull() && m_app_registry_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_discovery_status_isValid = ::OpenAPI::fromJsonValue(m_discovery_status, json[QString("DiscoveryStatus")]);
    m_discovery_status_isSet = !json[QString("DiscoveryStatus")].isNull() && m_discovery_status_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("Components")]);
    m_components_isSet = !json[QString("Components")].isNull() && m_components_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;
}

QString OAIGetApplicationOutput_Application::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetApplicationOutput_Application::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_app_registry_arn_isSet) {
        obj.insert(QString("AppRegistryArn"), ::OpenAPI::toJsonValue(m_app_registry_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_discovery_status.isSet()) {
        obj.insert(QString("DiscoveryStatus"), ::OpenAPI::toJsonValue(m_discovery_status));
    }
    if (m_components.isSet()) {
        obj.insert(QString("Components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QString OAIGetApplicationOutput_Application::getId() const {
    return m_id;
}
void OAIGetApplicationOutput_Application::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetApplicationOutput_Application::is_id_Valid() const{
    return m_id_isValid;
}

OAIApplicationType OAIGetApplicationOutput_Application::getType() const {
    return m_type;
}
void OAIGetApplicationOutput_Application::setType(const OAIApplicationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetApplicationOutput_Application::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetApplicationOutput_Application::getArn() const {
    return m_arn;
}
void OAIGetApplicationOutput_Application::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetApplicationOutput_Application::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetApplicationOutput_Application::getAppRegistryArn() const {
    return m_app_registry_arn;
}
void OAIGetApplicationOutput_Application::setAppRegistryArn(const QString &app_registry_arn) {
    m_app_registry_arn = app_registry_arn;
    m_app_registry_arn_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_app_registry_arn_Set() const{
    return m_app_registry_arn_isSet;
}

bool OAIGetApplicationOutput_Application::is_app_registry_arn_Valid() const{
    return m_app_registry_arn_isValid;
}

OAIApplicationStatus OAIGetApplicationOutput_Application::getStatus() const {
    return m_status;
}
void OAIGetApplicationOutput_Application::setStatus(const OAIApplicationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetApplicationOutput_Application::is_status_Valid() const{
    return m_status_isValid;
}

OAIApplicationDiscoveryStatus OAIGetApplicationOutput_Application::getDiscoveryStatus() const {
    return m_discovery_status;
}
void OAIGetApplicationOutput_Application::setDiscoveryStatus(const OAIApplicationDiscoveryStatus &discovery_status) {
    m_discovery_status = discovery_status;
    m_discovery_status_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_discovery_status_Set() const{
    return m_discovery_status_isSet;
}

bool OAIGetApplicationOutput_Application::is_discovery_status_Valid() const{
    return m_discovery_status_isValid;
}

QList OAIGetApplicationOutput_Application::getComponents() const {
    return m_components;
}
void OAIGetApplicationOutput_Application::setComponents(const QList &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_components_Set() const{
    return m_components_isSet;
}

bool OAIGetApplicationOutput_Application::is_components_Valid() const{
    return m_components_isValid;
}

QDateTime OAIGetApplicationOutput_Application::getLastUpdated() const {
    return m_last_updated;
}
void OAIGetApplicationOutput_Application::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIGetApplicationOutput_Application::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIGetApplicationOutput_Application::getStatusMessage() const {
    return m_status_message;
}
void OAIGetApplicationOutput_Application::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGetApplicationOutput_Application::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGetApplicationOutput_Application::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIGetApplicationOutput_Application::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_registry_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetApplicationOutput_Application::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
