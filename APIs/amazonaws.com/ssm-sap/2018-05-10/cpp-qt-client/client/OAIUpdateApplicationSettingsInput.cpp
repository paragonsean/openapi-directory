/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationSettingsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationSettingsInput::OAIUpdateApplicationSettingsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationSettingsInput::OAIUpdateApplicationSettingsInput() {
    this->initializeModel();
}

OAIUpdateApplicationSettingsInput::~OAIUpdateApplicationSettingsInput() {}

void OAIUpdateApplicationSettingsInput::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_credentials_to_add_or_update_isSet = false;
    m_credentials_to_add_or_update_isValid = false;

    m_credentials_to_remove_isSet = false;
    m_credentials_to_remove_isValid = false;

    m_backint_isSet = false;
    m_backint_isValid = false;
}

void OAIUpdateApplicationSettingsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationSettingsInput::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_credentials_to_add_or_update_isValid = ::OpenAPI::fromJsonValue(m_credentials_to_add_or_update, json[QString("CredentialsToAddOrUpdate")]);
    m_credentials_to_add_or_update_isSet = !json[QString("CredentialsToAddOrUpdate")].isNull() && m_credentials_to_add_or_update_isValid;

    m_credentials_to_remove_isValid = ::OpenAPI::fromJsonValue(m_credentials_to_remove, json[QString("CredentialsToRemove")]);
    m_credentials_to_remove_isSet = !json[QString("CredentialsToRemove")].isNull() && m_credentials_to_remove_isValid;

    m_backint_isValid = ::OpenAPI::fromJsonValue(m_backint, json[QString("Backint")]);
    m_backint_isSet = !json[QString("Backint")].isNull() && m_backint_isValid;
}

QString OAIUpdateApplicationSettingsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationSettingsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_credentials_to_add_or_update.isSet()) {
        obj.insert(QString("CredentialsToAddOrUpdate"), ::OpenAPI::toJsonValue(m_credentials_to_add_or_update));
    }
    if (m_credentials_to_remove.isSet()) {
        obj.insert(QString("CredentialsToRemove"), ::OpenAPI::toJsonValue(m_credentials_to_remove));
    }
    if (m_backint.isSet()) {
        obj.insert(QString("Backint"), ::OpenAPI::toJsonValue(m_backint));
    }
    return obj;
}

QString OAIUpdateApplicationSettingsInput::getApplicationId() const {
    return m_application_id;
}
void OAIUpdateApplicationSettingsInput::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIUpdateApplicationSettingsInput::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIUpdateApplicationSettingsInput::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QList OAIUpdateApplicationSettingsInput::getCredentialsToAddOrUpdate() const {
    return m_credentials_to_add_or_update;
}
void OAIUpdateApplicationSettingsInput::setCredentialsToAddOrUpdate(const QList &credentials_to_add_or_update) {
    m_credentials_to_add_or_update = credentials_to_add_or_update;
    m_credentials_to_add_or_update_isSet = true;
}

bool OAIUpdateApplicationSettingsInput::is_credentials_to_add_or_update_Set() const{
    return m_credentials_to_add_or_update_isSet;
}

bool OAIUpdateApplicationSettingsInput::is_credentials_to_add_or_update_Valid() const{
    return m_credentials_to_add_or_update_isValid;
}

QList OAIUpdateApplicationSettingsInput::getCredentialsToRemove() const {
    return m_credentials_to_remove;
}
void OAIUpdateApplicationSettingsInput::setCredentialsToRemove(const QList &credentials_to_remove) {
    m_credentials_to_remove = credentials_to_remove;
    m_credentials_to_remove_isSet = true;
}

bool OAIUpdateApplicationSettingsInput::is_credentials_to_remove_Set() const{
    return m_credentials_to_remove_isSet;
}

bool OAIUpdateApplicationSettingsInput::is_credentials_to_remove_Valid() const{
    return m_credentials_to_remove_isValid;
}

OAIUpdateApplicationSettingsInput_Backint OAIUpdateApplicationSettingsInput::getBackint() const {
    return m_backint;
}
void OAIUpdateApplicationSettingsInput::setBackint(const OAIUpdateApplicationSettingsInput_Backint &backint) {
    m_backint = backint;
    m_backint_isSet = true;
}

bool OAIUpdateApplicationSettingsInput::is_backint_Set() const{
    return m_backint_isSet;
}

bool OAIUpdateApplicationSettingsInput::is_backint_Valid() const{
    return m_backint_isValid;
}

bool OAIUpdateApplicationSettingsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_to_add_or_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationSettingsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && true;
}

} // namespace OpenAPI
