/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDatabasesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDatabasesInput::OAIListDatabasesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDatabasesInput::OAIListDatabasesInput() {
    this->initializeModel();
}

OAIListDatabasesInput::~OAIListDatabasesInput() {}

void OAIListDatabasesInput::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListDatabasesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDatabasesInput::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("ComponentId")]);
    m_component_id_isSet = !json[QString("ComponentId")].isNull() && m_component_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListDatabasesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDatabasesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_component_id_isSet) {
        obj.insert(QString("ComponentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListDatabasesInput::getApplicationId() const {
    return m_application_id;
}
void OAIListDatabasesInput::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIListDatabasesInput::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIListDatabasesInput::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIListDatabasesInput::getComponentId() const {
    return m_component_id;
}
void OAIListDatabasesInput::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIListDatabasesInput::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIListDatabasesInput::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QString OAIListDatabasesInput::getNextToken() const {
    return m_next_token;
}
void OAIListDatabasesInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDatabasesInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDatabasesInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListDatabasesInput::getMaxResults() const {
    return m_max_results;
}
void OAIListDatabasesInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListDatabasesInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListDatabasesInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListDatabasesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDatabasesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
