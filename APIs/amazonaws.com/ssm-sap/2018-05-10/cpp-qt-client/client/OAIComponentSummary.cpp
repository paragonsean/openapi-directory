/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentSummary::OAIComponentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentSummary::OAIComponentSummary() {
    this->initializeModel();
}

OAIComponentSummary::~OAIComponentSummary() {}

void OAIComponentSummary::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_component_type_isSet = false;
    m_component_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIComponentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentSummary::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("ComponentId")]);
    m_component_id_isSet = !json[QString("ComponentId")].isNull() && m_component_id_isValid;

    m_component_type_isValid = ::OpenAPI::fromJsonValue(m_component_type, json[QString("ComponentType")]);
    m_component_type_isSet = !json[QString("ComponentType")].isNull() && m_component_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;
}

QString OAIComponentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_component_id_isSet) {
        obj.insert(QString("ComponentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_component_type.isSet()) {
        obj.insert(QString("ComponentType"), ::OpenAPI::toJsonValue(m_component_type));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QString OAIComponentSummary::getApplicationId() const {
    return m_application_id;
}
void OAIComponentSummary::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIComponentSummary::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIComponentSummary::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIComponentSummary::getComponentId() const {
    return m_component_id;
}
void OAIComponentSummary::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIComponentSummary::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIComponentSummary::is_component_id_Valid() const{
    return m_component_id_isValid;
}

OAIComponentType OAIComponentSummary::getComponentType() const {
    return m_component_type;
}
void OAIComponentSummary::setComponentType(const OAIComponentType &component_type) {
    m_component_type = component_type;
    m_component_type_isSet = true;
}

bool OAIComponentSummary::is_component_type_Set() const{
    return m_component_type_isSet;
}

bool OAIComponentSummary::is_component_type_Valid() const{
    return m_component_type_isValid;
}

QMap OAIComponentSummary::getTags() const {
    return m_tags;
}
void OAIComponentSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIComponentSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIComponentSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIComponentSummary::getArn() const {
    return m_arn;
}
void OAIComponentSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIComponentSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIComponentSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIComponentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
