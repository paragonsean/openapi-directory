/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetApplicationOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetApplicationOutput::OAIGetApplicationOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetApplicationOutput::OAIGetApplicationOutput() {
    this->initializeModel();
}

OAIGetApplicationOutput::~OAIGetApplicationOutput() {}

void OAIGetApplicationOutput::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetApplicationOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetApplicationOutput::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("Application")]);
    m_application_isSet = !json[QString("Application")].isNull() && m_application_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetApplicationOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetApplicationOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_application.isSet()) {
        obj.insert(QString("Application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIGetApplicationOutput_Application OAIGetApplicationOutput::getApplication() const {
    return m_application;
}
void OAIGetApplicationOutput::setApplication(const OAIGetApplicationOutput_Application &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIGetApplicationOutput::is_application_Set() const{
    return m_application_isSet;
}

bool OAIGetApplicationOutput::is_application_Valid() const{
    return m_application_isValid;
}

QMap OAIGetApplicationOutput::getTags() const {
    return m_tags;
}
void OAIGetApplicationOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetApplicationOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetApplicationOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetApplicationOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetApplicationOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
