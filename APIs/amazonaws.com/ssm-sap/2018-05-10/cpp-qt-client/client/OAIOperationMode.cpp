/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationMode::OAIOperationMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationMode::OAIOperationMode() {
    this->initializeModel();
}

OAIOperationMode::~OAIOperationMode() {}

void OAIOperationMode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperationMode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperationMode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PRIMARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationMode::PRIMARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOGREPLAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationMode::LOGREPLAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELTA_DATASHIPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationMode::DELTA_DATASHIPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOGREPLAY_READACCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationMode::LOGREPLAY_READACCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationMode::NONE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperationMode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperationMode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperationMode::PRIMARY:
            val = "PRIMARY";
            break;
        case eOAIOperationMode::LOGREPLAY:
            val = "LOGREPLAY";
            break;
        case eOAIOperationMode::DELTA_DATASHIPPING:
            val = "DELTA_DATASHIPPING";
            break;
        case eOAIOperationMode::LOGREPLAY_READACCESS:
            val = "LOGREPLAY_READACCESS";
            break;
        case eOAIOperationMode::NONE:
            val = "NONE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperationMode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperationMode::eOAIOperationMode OAIOperationMode::getValue() const {
    return m_value;
}

void OAIOperationMode::setValue(const OAIOperationMode::eOAIOperationMode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperationMode::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperationMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
