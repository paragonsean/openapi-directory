/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetComponentOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetComponentOutput::OAIGetComponentOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetComponentOutput::OAIGetComponentOutput() {
    this->initializeModel();
}

OAIGetComponentOutput::~OAIGetComponentOutput() {}

void OAIGetComponentOutput::initializeModel() {

    m_component_isSet = false;
    m_component_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetComponentOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetComponentOutput::fromJsonObject(QJsonObject json) {

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("Component")]);
    m_component_isSet = !json[QString("Component")].isNull() && m_component_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetComponentOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetComponentOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_component.isSet()) {
        obj.insert(QString("Component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIGetComponentOutput_Component OAIGetComponentOutput::getComponent() const {
    return m_component;
}
void OAIGetComponentOutput::setComponent(const OAIGetComponentOutput_Component &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAIGetComponentOutput::is_component_Set() const{
    return m_component_isSet;
}

bool OAIGetComponentOutput::is_component_Valid() const{
    return m_component_isValid;
}

QMap OAIGetComponentOutput::getTags() const {
    return m_tags;
}
void OAIGetComponentOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetComponentOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetComponentOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetComponentOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetComponentOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
