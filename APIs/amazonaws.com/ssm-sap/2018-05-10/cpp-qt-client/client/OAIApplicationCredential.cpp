/**
 * AWS Systems Manager for SAP
 * This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Systems Manager for SAP. The topic for each action shows the API request parameters and responses. 
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationCredential.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationCredential::OAIApplicationCredential(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationCredential::OAIApplicationCredential() {
    this->initializeModel();
}

OAIApplicationCredential::~OAIApplicationCredential() {}

void OAIApplicationCredential::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_credential_type_isSet = false;
    m_credential_type_isValid = false;

    m_secret_id_isSet = false;
    m_secret_id_isValid = false;
}

void OAIApplicationCredential::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationCredential::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_credential_type_isValid = ::OpenAPI::fromJsonValue(m_credential_type, json[QString("CredentialType")]);
    m_credential_type_isSet = !json[QString("CredentialType")].isNull() && m_credential_type_isValid;

    m_secret_id_isValid = ::OpenAPI::fromJsonValue(m_secret_id, json[QString("SecretId")]);
    m_secret_id_isSet = !json[QString("SecretId")].isNull() && m_secret_id_isValid;
}

QString OAIApplicationCredential::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationCredential::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_credential_type.isSet()) {
        obj.insert(QString("CredentialType"), ::OpenAPI::toJsonValue(m_credential_type));
    }
    if (m_secret_id_isSet) {
        obj.insert(QString("SecretId"), ::OpenAPI::toJsonValue(m_secret_id));
    }
    return obj;
}

QString OAIApplicationCredential::getDatabaseName() const {
    return m_database_name;
}
void OAIApplicationCredential::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIApplicationCredential::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIApplicationCredential::is_database_name_Valid() const{
    return m_database_name_isValid;
}

OAICredentialType OAIApplicationCredential::getCredentialType() const {
    return m_credential_type;
}
void OAIApplicationCredential::setCredentialType(const OAICredentialType &credential_type) {
    m_credential_type = credential_type;
    m_credential_type_isSet = true;
}

bool OAIApplicationCredential::is_credential_type_Set() const{
    return m_credential_type_isSet;
}

bool OAIApplicationCredential::is_credential_type_Valid() const{
    return m_credential_type_isValid;
}

QString OAIApplicationCredential::getSecretId() const {
    return m_secret_id;
}
void OAIApplicationCredential::setSecretId(const QString &secret_id) {
    m_secret_id = secret_id;
    m_secret_id_isSet = true;
}

bool OAIApplicationCredential::is_secret_id_Set() const{
    return m_secret_id_isSet;
}

bool OAIApplicationCredential::is_secret_id_Valid() const{
    return m_secret_id_isValid;
}

bool OAIApplicationCredential::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credential_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationCredential::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_name_isValid && m_credential_type_isValid && m_secret_id_isValid && true;
}

} // namespace OpenAPI
