/**
 * AWS Elemental MediaStore Data Plane
 * An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetObjectResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetObjectResponse::OAIGetObjectResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetObjectResponse::OAIGetObjectResponse() {
    this->initializeModel();
}

OAIGetObjectResponse::~OAIGetObjectResponse() {}

void OAIGetObjectResponse::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIGetObjectResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetObjectResponse::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;
}

QString OAIGetObjectResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetObjectResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QString OAIGetObjectResponse::getBody() const {
    return m_body;
}
void OAIGetObjectResponse::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIGetObjectResponse::is_body_Set() const{
    return m_body_isSet;
}

bool OAIGetObjectResponse::is_body_Valid() const{
    return m_body_isValid;
}

qint32 OAIGetObjectResponse::getStatusCode() const {
    return m_status_code;
}
void OAIGetObjectResponse::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIGetObjectResponse::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIGetObjectResponse::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIGetObjectResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetObjectResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
