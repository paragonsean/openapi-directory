/**
 * AWS Elemental MediaStore Data Plane
 * An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_content_length_isSet = false;
    m_content_length_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_content_length_isValid = ::OpenAPI::fromJsonValue(m_content_length, json[QString("ContentLength")]);
    m_content_length_isSet = !json[QString("ContentLength")].isNull() && m_content_length_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_content_length_isSet) {
        obj.insert(QString("ContentLength"), ::OpenAPI::toJsonValue(m_content_length));
    }
    return obj;
}

QString OAIItem::getName() const {
    return m_name;
}
void OAIItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem::is_name_Valid() const{
    return m_name_isValid;
}

OAIItemType OAIItem::getType() const {
    return m_type;
}
void OAIItem::setType(const OAIItemType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIItem::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIItem::getETag() const {
    return m_e_tag;
}
void OAIItem::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAIItem::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAIItem::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QDateTime OAIItem::getLastModified() const {
    return m_last_modified;
}
void OAIItem::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIItem::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIItem::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIItem::getContentType() const {
    return m_content_type;
}
void OAIItem::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIItem::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIItem::is_content_type_Valid() const{
    return m_content_type_isValid;
}

qint32 OAIItem::getContentLength() const {
    return m_content_length;
}
void OAIItem::setContentLength(const qint32 &content_length) {
    m_content_length = content_length;
    m_content_length_isSet = true;
}

bool OAIItem::is_content_length_Set() const{
    return m_content_length_isSet;
}

bool OAIItem::is_content_length_Valid() const{
    return m_content_length_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
