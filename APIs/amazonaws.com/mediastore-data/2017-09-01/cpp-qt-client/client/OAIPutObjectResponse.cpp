/**
 * AWS Elemental MediaStore Data Plane
 * An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutObjectResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutObjectResponse::OAIPutObjectResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutObjectResponse::OAIPutObjectResponse() {
    this->initializeModel();
}

OAIPutObjectResponse::~OAIPutObjectResponse() {}

void OAIPutObjectResponse::initializeModel() {

    m_content_sha256_isSet = false;
    m_content_sha256_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_storage_class_isSet = false;
    m_storage_class_isValid = false;
}

void OAIPutObjectResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutObjectResponse::fromJsonObject(QJsonObject json) {

    m_content_sha256_isValid = ::OpenAPI::fromJsonValue(m_content_sha256, json[QString("ContentSHA256")]);
    m_content_sha256_isSet = !json[QString("ContentSHA256")].isNull() && m_content_sha256_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_storage_class_isValid = ::OpenAPI::fromJsonValue(m_storage_class, json[QString("StorageClass")]);
    m_storage_class_isSet = !json[QString("StorageClass")].isNull() && m_storage_class_isValid;
}

QString OAIPutObjectResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutObjectResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_sha256_isSet) {
        obj.insert(QString("ContentSHA256"), ::OpenAPI::toJsonValue(m_content_sha256));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_storage_class.isSet()) {
        obj.insert(QString("StorageClass"), ::OpenAPI::toJsonValue(m_storage_class));
    }
    return obj;
}

QString OAIPutObjectResponse::getContentSha256() const {
    return m_content_sha256;
}
void OAIPutObjectResponse::setContentSha256(const QString &content_sha256) {
    m_content_sha256 = content_sha256;
    m_content_sha256_isSet = true;
}

bool OAIPutObjectResponse::is_content_sha256_Set() const{
    return m_content_sha256_isSet;
}

bool OAIPutObjectResponse::is_content_sha256_Valid() const{
    return m_content_sha256_isValid;
}

QString OAIPutObjectResponse::getETag() const {
    return m_e_tag;
}
void OAIPutObjectResponse::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAIPutObjectResponse::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAIPutObjectResponse::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

OAIStorageClass OAIPutObjectResponse::getStorageClass() const {
    return m_storage_class;
}
void OAIPutObjectResponse::setStorageClass(const OAIStorageClass &storage_class) {
    m_storage_class = storage_class;
    m_storage_class_isSet = true;
}

bool OAIPutObjectResponse::is_storage_class_Set() const{
    return m_storage_class_isSet;
}

bool OAIPutObjectResponse::is_storage_class_Valid() const{
    return m_storage_class_isValid;
}

bool OAIPutObjectResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutObjectResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
