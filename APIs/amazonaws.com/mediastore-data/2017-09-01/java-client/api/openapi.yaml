openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "An AWS Elemental MediaStore asset is an object, similar to an object\
    \ in the Amazon S3 service. Objects are the fundamental entities that are stored\
    \ in AWS Elemental MediaStore."
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS Elemental MediaStore Data Plane
  version: 2017-09-01
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: mediastore-data
  x-aws-signingName: mediastore
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-data-2017-09-01.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/mediastore/
servers:
- description: The MediaStore Data multi-region endpoint
  url: "http://data.mediastore.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The MediaStore Data multi-region endpoint
  url: "https://data.mediastore.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The MediaStore Data endpoint for China (Beijing) and China (Ningxia)
  url: "http://data.mediastore.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The MediaStore Data endpoint for China (Beijing) and China (Ningxia)
  url: "https://data.mediastore.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /{Path}:
    delete:
      description: Deletes an object at the specified path.
      operationId: DeleteObject
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The path (including the file name) where the object is stored\
          \ in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file\
          \ name&gt;"
        explode: false
        in: path
        name: Path
        required: true
        schema:
          maxLength: 900
          minLength: 1
          pattern: "(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteObjectResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
          description: ObjectNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-accepts:
      - application/json
    get:
      description: "Downloads the object at the specified path. If the object’s upload\
        \ availability is set to <code>streaming</code>, AWS Elemental MediaStore\
        \ downloads the object even if it’s still uploading the object."
      operationId: GetObject
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The path (including the file name) where the object is stored\
          \ in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file\
          \ name&gt;</p> <p>For example, to upload the file <code>mlaw.avi</code>\
          \ to the folder path <code>premium\\canada</code> in the container <code>movies</code>,\
          \ enter the path <code>premium/canada/mlaw.avi</code>.</p> <p>Do not include\
          \ the container name in this path.</p> <p>If the path includes any folders\
          \ that don't exist yet, the service creates them. For example, suppose you\
          \ have an existing <code>premium/usa</code> subfolder. If you specify <code>premium/canada</code>,\
          \ the service creates a <code>canada</code> subfolder in the <code>premium</code>\
          \ folder. You then have two subfolders, <code>usa</code> and <code>canada</code>,\
          \ in the <code>premium</code> folder. </p> <p>There is no correlation between\
          \ the path to the source and the path (folders) in the container in AWS\
          \ Elemental MediaStore.</p> <p>For more information about folders and how\
          \ they exist in a container, see the <a href=\"http://docs.aws.amazon.com/mediastore/latest/ug/\"\
          >AWS Elemental MediaStore User Guide</a>.</p> <p>The file name is the name\
          \ that is assigned to the file that you upload. The file can have the same\
          \ name inside and outside of AWS Elemental MediaStore, or it can have the\
          \ same name. The file name can include or omit an extension. </p>"
        explode: false
        in: path
        name: Path
        required: true
        schema:
          maxLength: 900
          minLength: 1
          pattern: "(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+"
          type: string
        style: simple
      - description: "The range bytes of an object to retrieve. For more information\
          \ about the <code>Range</code> header, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\"\
          >http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>. AWS\
          \ Elemental MediaStore ignores this header for partially uploaded objects\
          \ that have streaming upload availability."
        explode: false
        in: header
        name: Range
        required: false
        schema:
          pattern: ^bytes=(?:\d+\-\d*|\d*\-\d+)$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObjectResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
          description: ObjectNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestedRangeNotSatisfiableException'
          description: RequestedRangeNotSatisfiableException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-accepts:
      - application/json
    head:
      description: Gets the headers for an object at the specified path.
      operationId: DescribeObject
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The path (including the file name) where the object is stored\
          \ in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file\
          \ name&gt;"
        explode: false
        in: path
        name: Path
        required: true
        schema:
          maxLength: 900
          minLength: 1
          pattern: "(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeObjectResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
          description: ObjectNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-accepts:
      - application/json
    put:
      description: Uploads an object to the specified path. Object sizes are limited
        to 25 MB for standard upload availability and 10 MB for streaming upload availability.
      operationId: PutObject
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The path (including the file name) where the object is stored\
          \ in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file\
          \ name&gt;</p> <p>For example, to upload the file <code>mlaw.avi</code>\
          \ to the folder path <code>premium\\canada</code> in the container <code>movies</code>,\
          \ enter the path <code>premium/canada/mlaw.avi</code>.</p> <p>Do not include\
          \ the container name in this path.</p> <p>If the path includes any folders\
          \ that don't exist yet, the service creates them. For example, suppose you\
          \ have an existing <code>premium/usa</code> subfolder. If you specify <code>premium/canada</code>,\
          \ the service creates a <code>canada</code> subfolder in the <code>premium</code>\
          \ folder. You then have two subfolders, <code>usa</code> and <code>canada</code>,\
          \ in the <code>premium</code> folder. </p> <p>There is no correlation between\
          \ the path to the source and the path (folders) in the container in AWS\
          \ Elemental MediaStore.</p> <p>For more information about folders and how\
          \ they exist in a container, see the <a href=\"http://docs.aws.amazon.com/mediastore/latest/ug/\"\
          >AWS Elemental MediaStore User Guide</a>.</p> <p>The file name is the name\
          \ that is assigned to the file that you upload. The file can have the same\
          \ name inside and outside of AWS Elemental MediaStore, or it can have the\
          \ same name. The file name can include or omit an extension. </p>"
        explode: false
        in: path
        name: Path
        required: true
        schema:
          maxLength: 900
          minLength: 1
          pattern: "(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+"
          type: string
        style: simple
      - description: The content type of the object.
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          pattern: "^[\\w\\-\\/\\.\\+]{1,255}$"
          type: string
        style: simple
      - description: <p>An optional <code>CacheControl</code> header that allows the
          caller to control the object's cache behavior. Headers can be passed in
          as specified in the HTTP at <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>
          <p>Headers with a custom user-defined value are also accepted.</p>
        explode: false
        in: header
        name: Cache-Control
        required: false
        schema:
          type: string
        style: simple
      - description: "Indicates the storage class of a <code>Put</code> request. Defaults\
          \ to high-performance temporal storage class, and objects are persisted\
          \ into durable storage shortly after being received."
        explode: false
        in: header
        name: x-amz-storage-class
        required: false
        schema:
          enum:
          - TEMPORAL
          maxLength: 16
          minLength: 1
          type: string
        style: simple
      - description: "<p>Indicates the availability of an object while it is still\
          \ uploading. If the value is set to <code>streaming</code>, the object is\
          \ available for downloading after some initial buffering but before the\
          \ object is uploaded completely. If the value is set to <code>standard</code>,\
          \ the object is available for downloading only when it is uploaded completely.\
          \ The default value for this header is <code>standard</code>.</p> <p>To\
          \ use this header, you must also set the HTTP <code>Transfer-Encoding</code>\
          \ header to <code>chunked</code>.</p>"
        explode: false
        in: header
        name: x-amz-upload-availability
        required: false
        schema:
          enum:
          - STANDARD
          - STREAMING
          maxLength: 16
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutObject_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutObjectResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /:
    get:
      description: Provides a list of metadata entries about folders and objects in
        the specified folder.
      operationId: ListItems
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The path in the container from which to retrieve items. Format:\
          \ &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;"
        explode: true
        in: query
        name: Path
        required: false
        schema:
          maxLength: 900
          minLength: 0
          pattern: "/?(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}(?:[A-Za-z0-9_\\.\\-\\~]+)?/?"
          type: string
        style: form
      - description: "<p>The maximum number of results to return per API request.\
          \ For example, you submit a <code>ListItems</code> request with <code>MaxResults</code>\
          \ set at 500. Although 2,000 items match your request, the service returns\
          \ no more than the first 500 items. (The service also returns a <code>NextToken</code>\
          \ value that you can use to fetch the next batch of results.) The service\
          \ might return fewer results than the <code>MaxResults</code> value.</p>\
          \ <p>If <code>MaxResults</code> is not included in the request, the service\
          \ defaults to pagination with a maximum of 1,000 results per page.</p>"
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: "<p>The token that identifies which batch of results that you\
          \ want to see. For example, you submit a <code>ListItems</code> request\
          \ with <code>MaxResults</code> set at 500. The service returns the first\
          \ batch of results (up to 500) and a <code>NextToken</code> value. To see\
          \ the next batch of results, you can submit the <code>ListItems</code> request\
          \ a second time and specify the <code>NextToken</code> value.</p> <p>Tokens\
          \ expire after 15 minutes.</p>"
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    DeleteObjectResponse:
      properties: {}
      type: object
    ContainerNotFoundException: {}
    ObjectNotFoundException: {}
    InternalServerError: {}
    DescribeObjectResponse:
      properties: {}
      type: object
    GetObjectResponse:
      example:
        Body: ""
        StatusCode: ""
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/PayloadBlob'
          - description: 'The bytes of the object. '
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/statusCode'
          - description: The HTML status code of the request. Status codes ranging
              from 200 to 299 indicate success. All other status codes indicate the
              type of error that occurred.
      type: object
    RequestedRangeNotSatisfiableException: {}
    ListItemsResponse:
      example:
        NextToken: ""
        Items: ""
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ItemList'
          - description: The metadata entries for the folders and objects at the requested
              path.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "The token that can be used in a request to view the next\
              \ set of results. For example, you submit a <code>ListItems</code> request\
              \ that matches 2,000 items with <code>MaxResults</code> set at 500.\
              \ The service returns the first batch of results (up to 500) and a <code>NextToken</code>\
              \ value that can be used to fetch the next batch of results."
      type: object
    PutObjectResponse:
      example:
        ETag: ""
        StorageClass: ""
        ContentSHA256: ""
      properties:
        ContentSHA256:
          allOf:
          - $ref: '#/components/schemas/SHA256Hash'
          - description: The SHA256 digest of the object that is persisted.
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETag'
          - description: Unique identifier of the object in the container.
        StorageClass:
          allOf:
          - $ref: '#/components/schemas/StorageClass'
          - description: The storage class where the object was persisted. The class
              should be “Temporal”.
      type: object
    ContentRangePattern:
      pattern: ^bytes=\d+\-\d+/\d+$
      type: string
    ContentType:
      pattern: "^[\\w\\-\\/\\.\\+]{1,255}$"
      type: string
    PathNaming:
      maxLength: 900
      minLength: 1
      pattern: "(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+"
      type: string
    DeleteObjectRequest:
      properties: {}
      title: DeleteObjectRequest
      type: object
    DescribeObjectRequest:
      properties: {}
      title: DescribeObjectRequest
      type: object
    ETag:
      maxLength: 64
      minLength: 1
      pattern: "[0-9A-Fa-f]+"
      type: string
    NonNegativeLong:
      minimum: 0
      type: integer
    StringPrimitive:
      type: string
    TimeStamp:
      format: date-time
      type: string
    RangePattern:
      pattern: ^bytes=(?:\d+\-\d*|\d*\-\d+)$
      type: string
    GetObjectRequest:
      properties: {}
      title: GetObjectRequest
      type: object
    PayloadBlob:
      type: string
    statusCode:
      type: integer
    ItemName:
      pattern: "[A-Za-z0-9_\\.\\-\\~]+"
      type: string
    ItemType:
      enum:
      - OBJECT
      - FOLDER
      type: string
    Item:
      description: A metadata entry for a folder or object.
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/ItemName'
          - description: The name of the item.
        Type:
          allOf:
          - $ref: '#/components/schemas/ItemType'
          - description: The item type (folder or object).
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETag'
          - description: The ETag that represents a unique instance of the item.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          - description: The date and time that the item was last modified.
        ContentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          - description: The content type of the item.
        ContentLength:
          allOf:
          - $ref: '#/components/schemas/NonNegativeLong'
          - description: The length of the item in bytes.
      type: object
    ItemList:
      items:
        $ref: '#/components/schemas/Item'
      type: array
    ListPathNaming:
      maxLength: 900
      minLength: 0
      pattern: "/?(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}(?:[A-Za-z0-9_\\.\\-\\~]+)?/?"
      type: string
    ListLimit:
      maximum: 1000
      minimum: 1
      type: integer
    PaginationToken:
      type: string
    ListItemsRequest:
      properties: {}
      title: ListItemsRequest
      type: object
    StorageClass:
      enum:
      - TEMPORAL
      maxLength: 16
      minLength: 1
      type: string
    UploadAvailability:
      enum:
      - STANDARD
      - STREAMING
      maxLength: 16
      minLength: 1
      type: string
    PutObjectRequest:
      example:
        Body: ""
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/PayloadBlob'
          - description: 'The bytes to be stored. '
      required:
      - Body
      title: PutObjectRequest
      type: object
    SHA256Hash:
      maxLength: 64
      minLength: 64
      pattern: "[0-9A-Fa-f]{64}"
      type: string
    PutObject_request:
      properties:
        Body:
          description: 'The bytes to be stored. '
          type: string
      required:
      - Body
      type: object
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4

