/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseException from '../model/BaseException';
import CreateDomainRequest from '../model/CreateDomainRequest';
import CreateDomainResponse from '../model/CreateDomainResponse';
import DefineIndexFieldRequest from '../model/DefineIndexFieldRequest';
import DefineIndexFieldResponse from '../model/DefineIndexFieldResponse';
import DefineRankExpressionRequest from '../model/DefineRankExpressionRequest';
import DefineRankExpressionResponse from '../model/DefineRankExpressionResponse';
import DeleteDomainRequest from '../model/DeleteDomainRequest';
import DeleteDomainResponse from '../model/DeleteDomainResponse';
import DeleteIndexFieldRequest from '../model/DeleteIndexFieldRequest';
import DeleteIndexFieldResponse from '../model/DeleteIndexFieldResponse';
import DeleteRankExpressionRequest from '../model/DeleteRankExpressionRequest';
import DeleteRankExpressionResponse from '../model/DeleteRankExpressionResponse';
import DescribeAvailabilityOptionsRequest from '../model/DescribeAvailabilityOptionsRequest';
import DescribeAvailabilityOptionsResponse from '../model/DescribeAvailabilityOptionsResponse';
import DescribeDefaultSearchFieldRequest from '../model/DescribeDefaultSearchFieldRequest';
import DescribeDefaultSearchFieldResponse from '../model/DescribeDefaultSearchFieldResponse';
import DescribeDomainsRequest from '../model/DescribeDomainsRequest';
import DescribeDomainsResponse from '../model/DescribeDomainsResponse';
import DescribeIndexFieldsRequest from '../model/DescribeIndexFieldsRequest';
import DescribeIndexFieldsResponse from '../model/DescribeIndexFieldsResponse';
import DescribeRankExpressionsRequest from '../model/DescribeRankExpressionsRequest';
import DescribeRankExpressionsResponse from '../model/DescribeRankExpressionsResponse';
import DescribeServiceAccessPoliciesRequest from '../model/DescribeServiceAccessPoliciesRequest';
import DescribeServiceAccessPoliciesResponse from '../model/DescribeServiceAccessPoliciesResponse';
import DescribeStemmingOptionsRequest from '../model/DescribeStemmingOptionsRequest';
import DescribeStemmingOptionsResponse from '../model/DescribeStemmingOptionsResponse';
import DescribeStopwordOptionsRequest from '../model/DescribeStopwordOptionsRequest';
import DescribeStopwordOptionsResponse from '../model/DescribeStopwordOptionsResponse';
import DescribeSynonymOptionsRequest from '../model/DescribeSynonymOptionsRequest';
import DescribeSynonymOptionsResponse from '../model/DescribeSynonymOptionsResponse';
import GETDefineIndexFieldIndexFieldParameter from '../model/GETDefineIndexFieldIndexFieldParameter';
import GETDefineRankExpressionRankExpressionParameter from '../model/GETDefineRankExpressionRankExpressionParameter';
import IndexDocumentsRequest from '../model/IndexDocumentsRequest';
import IndexDocumentsResponse from '../model/IndexDocumentsResponse';
import UpdateAvailabilityOptionsRequest from '../model/UpdateAvailabilityOptionsRequest';
import UpdateAvailabilityOptionsResponse from '../model/UpdateAvailabilityOptionsResponse';
import UpdateDefaultSearchFieldRequest from '../model/UpdateDefaultSearchFieldRequest';
import UpdateDefaultSearchFieldResponse from '../model/UpdateDefaultSearchFieldResponse';
import UpdateServiceAccessPoliciesRequest from '../model/UpdateServiceAccessPoliciesRequest';
import UpdateServiceAccessPoliciesResponse from '../model/UpdateServiceAccessPoliciesResponse';
import UpdateStemmingOptionsRequest from '../model/UpdateStemmingOptionsRequest';
import UpdateStemmingOptionsResponse from '../model/UpdateStemmingOptionsResponse';
import UpdateStopwordOptionsRequest from '../model/UpdateStopwordOptionsRequest';
import UpdateStopwordOptionsResponse from '../model/UpdateStopwordOptionsResponse';
import UpdateSynonymOptionsRequest from '../model/UpdateSynonymOptionsRequest';
import UpdateSynonymOptionsResponse from '../model/UpdateSynonymOptionsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2011-02-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETCreateDomain operation.
     * @callback module:api/DefaultApi~gETCreateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new search domain.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETCreateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainResponse}
     */
    gETCreateDomain(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETCreateDomain");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDomainResponse;
      return this.apiClient.callApi(
        '/#Action=CreateDomain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDefineIndexField operation.
     * @callback module:api/DefaultApi~gETDefineIndexFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineIndexFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures an <code>IndexField</code> for the search domain. Used to create new fields and modify existing ones. If the field exists, the new configuration replaces the old one. You can configure a maximum of 200 index fields.
     * @param {String} domainName 
     * @param {module:model/GETDefineIndexFieldIndexFieldParameter} indexField 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDefineIndexFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineIndexFieldResponse}
     */
    gETDefineIndexField(domainName, indexField, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDefineIndexField");
      }
      // verify the required parameter 'indexField' is set
      if (indexField === undefined || indexField === null) {
        throw new Error("Missing the required parameter 'indexField' when calling gETDefineIndexField");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDefineIndexField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDefineIndexField");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'IndexField': indexField,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DefineIndexFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DefineIndexField', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDefineRankExpression operation.
     * @callback module:api/DefaultApi~gETDefineRankExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineRankExpressionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures a <code>RankExpression</code> for the search domain. Used to create new rank expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. You can configure a maximum of 50 rank expressions.
     * @param {String} domainName 
     * @param {module:model/GETDefineRankExpressionRankExpressionParameter} rankExpression 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDefineRankExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineRankExpressionResponse}
     */
    gETDefineRankExpression(domainName, rankExpression, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDefineRankExpression");
      }
      // verify the required parameter 'rankExpression' is set
      if (rankExpression === undefined || rankExpression === null) {
        throw new Error("Missing the required parameter 'rankExpression' when calling gETDefineRankExpression");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDefineRankExpression");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDefineRankExpression");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'RankExpression': rankExpression,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DefineRankExpressionResponse;
      return this.apiClient.callApi(
        '/#Action=DefineRankExpression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDomain operation.
     * @callback module:api/DefaultApi~gETDeleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes a search domain and all of its data.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDomainResponse}
     */
    gETDeleteDomain(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteDomain");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteDomainResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteDomain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteIndexField operation.
     * @callback module:api/DefaultApi~gETDeleteIndexFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteIndexFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an <code>IndexField</code> from the search domain.
     * @param {String} domainName 
     * @param {String} indexFieldName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteIndexFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteIndexFieldResponse}
     */
    gETDeleteIndexField(domainName, indexFieldName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteIndexField");
      }
      // verify the required parameter 'indexFieldName' is set
      if (indexFieldName === undefined || indexFieldName === null) {
        throw new Error("Missing the required parameter 'indexFieldName' when calling gETDeleteIndexField");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteIndexField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteIndexField");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'IndexFieldName': indexFieldName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteIndexFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteIndexField', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteRankExpression operation.
     * @callback module:api/DefaultApi~gETDeleteRankExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRankExpressionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a <code>RankExpression</code> from the search domain.
     * @param {String} domainName 
     * @param {String} rankName The name of the <code>RankExpression</code> to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteRankExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRankExpressionResponse}
     */
    gETDeleteRankExpression(domainName, rankName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteRankExpression");
      }
      // verify the required parameter 'rankName' is set
      if (rankName === undefined || rankName === null) {
        throw new Error("Missing the required parameter 'rankName' when calling gETDeleteRankExpression");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteRankExpression");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteRankExpression");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'RankName': rankName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteRankExpressionResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteRankExpression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeAvailabilityOptions operation.
     * @callback module:api/DefaultApi~gETDescribeAvailabilityOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAvailabilityOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the availability options configured for a domain. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html\" target=\"_blank\">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName The name of the domain you want to describe.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeAvailabilityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAvailabilityOptionsResponse}
     */
    gETDescribeAvailabilityOptions(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeAvailabilityOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeAvailabilityOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeAvailabilityOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeAvailabilityOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeAvailabilityOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDefaultSearchField operation.
     * @callback module:api/DefaultApi~gETDescribeDefaultSearchFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDefaultSearchFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the default search field configured for the search domain.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeDefaultSearchFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDefaultSearchFieldResponse}
     */
    gETDescribeDefaultSearchField(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeDefaultSearchField");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDefaultSearchField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDefaultSearchField");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDefaultSearchFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeDefaultSearchField', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDomains operation.
     * @callback module:api/DefaultApi~gETDescribeDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the search domains owned by this account. Can be limited to specific domains. Shows all domains by default.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [domainNames] Limits the DescribeDomains response to the specified search domains.
     * @param {module:api/DefaultApi~gETDescribeDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainsResponse}
     */
    gETDescribeDomains(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDomains");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainNames': this.apiClient.buildCollectionParam(opts['domainNames'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDomainsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeDomains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeIndexFields operation.
     * @callback module:api/DefaultApi~gETDescribeIndexFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIndexFieldsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the index fields configured for the search domain. Can be limited to specific fields by name. Shows all fields by default.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [fieldNames] Limits the <code>DescribeIndexFields</code> response to the specified fields.
     * @param {module:api/DefaultApi~gETDescribeIndexFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIndexFieldsResponse}
     */
    gETDescribeIndexFields(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeIndexFields");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeIndexFields");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeIndexFields");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'FieldNames': this.apiClient.buildCollectionParam(opts['fieldNames'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeIndexFieldsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeIndexFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeRankExpressions operation.
     * @callback module:api/DefaultApi~gETDescribeRankExpressionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRankExpressionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the rank expressions configured for the search domain. Can be limited to specific rank expressions by name. Shows all rank expressions by default. 
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [rankNames] Limits the <code>DescribeRankExpressions</code> response to the specified fields.
     * @param {module:api/DefaultApi~gETDescribeRankExpressionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRankExpressionsResponse}
     */
    gETDescribeRankExpressions(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeRankExpressions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeRankExpressions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeRankExpressions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'RankNames': this.apiClient.buildCollectionParam(opts['rankNames'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeRankExpressionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeRankExpressions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeServiceAccessPolicies operation.
     * @callback module:api/DefaultApi~gETDescribeServiceAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the resource-based policies that control access to the domain's document and search services.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeServiceAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceAccessPoliciesResponse}
     */
    gETDescribeServiceAccessPolicies(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeServiceAccessPolicies");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeServiceAccessPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeServiceAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeServiceAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeServiceAccessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeStemmingOptions operation.
     * @callback module:api/DefaultApi~gETDescribeStemmingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStemmingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the stemming dictionary configured for the search domain.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeStemmingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStemmingOptionsResponse}
     */
    gETDescribeStemmingOptions(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeStemmingOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeStemmingOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeStemmingOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeStemmingOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeStemmingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeStopwordOptions operation.
     * @callback module:api/DefaultApi~gETDescribeStopwordOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStopwordOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the stopwords configured for the search domain.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeStopwordOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStopwordOptionsResponse}
     */
    gETDescribeStopwordOptions(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeStopwordOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeStopwordOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeStopwordOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeStopwordOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeStopwordOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeSynonymOptions operation.
     * @callback module:api/DefaultApi~gETDescribeSynonymOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSynonymOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the synonym dictionary configured for the search domain.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeSynonymOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSynonymOptionsResponse}
     */
    gETDescribeSynonymOptions(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeSynonymOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeSynonymOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeSynonymOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeSynonymOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeSynonymOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETIndexDocuments operation.
     * @callback module:api/DefaultApi~gETIndexDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexDocumentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tells the search domain to start indexing its documents using the latest text processing options and <code>IndexFields</code>. This operation must be invoked to make options whose <a>OptionStatus</a> has <code>OptionState</code> of <code>RequiresIndexDocuments</code> visible in search results.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETIndexDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexDocumentsResponse}
     */
    gETIndexDocuments(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETIndexDocuments");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETIndexDocuments");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETIndexDocuments");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = IndexDocumentsResponse;
      return this.apiClient.callApi(
        '/#Action=IndexDocuments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateAvailabilityOptions operation.
     * @callback module:api/DefaultApi~gETUpdateAvailabilityOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAvailabilityOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the availability options for a domain. Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability Zone in the same Region to increase fault tolerance in the event of a service disruption. Changes to the Multi-AZ option can take about half an hour to become active. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html\" target=\"_blank\">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {Boolean} multiAZ You expand an existing search domain to a second Availability Zone by setting the Multi-AZ option to true. Similarly, you can turn off the Multi-AZ option to downgrade the domain to a single Availability Zone by setting the Multi-AZ option to <code>false</code>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateAvailabilityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAvailabilityOptionsResponse}
     */
    gETUpdateAvailabilityOptions(domainName, multiAZ, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateAvailabilityOptions");
      }
      // verify the required parameter 'multiAZ' is set
      if (multiAZ === undefined || multiAZ === null) {
        throw new Error("Missing the required parameter 'multiAZ' when calling gETUpdateAvailabilityOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateAvailabilityOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateAvailabilityOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'MultiAZ': multiAZ,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateAvailabilityOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateAvailabilityOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateDefaultSearchField operation.
     * @callback module:api/DefaultApi~gETUpdateDefaultSearchFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDefaultSearchFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the default search field for the search domain. The default search field is the text field that is searched when a search request does not specify which fields to search. By default, it is configured to include the contents of all of the domain's text fields. 
     * @param {String} domainName 
     * @param {String} defaultSearchField The text field to search if the search request does not specify which field to search. The default search field is used when search terms are specified with the <code>q</code> parameter, or if a match expression specified with the <code>bq</code> parameter does not constrain the search to a particular field. The default is an empty string, which automatically searches all text fields.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateDefaultSearchFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDefaultSearchFieldResponse}
     */
    gETUpdateDefaultSearchField(domainName, defaultSearchField, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateDefaultSearchField");
      }
      // verify the required parameter 'defaultSearchField' is set
      if (defaultSearchField === undefined || defaultSearchField === null) {
        throw new Error("Missing the required parameter 'defaultSearchField' when calling gETUpdateDefaultSearchField");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateDefaultSearchField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateDefaultSearchField");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'DefaultSearchField': defaultSearchField,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateDefaultSearchFieldResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateDefaultSearchField', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateServiceAccessPolicies operation.
     * @callback module:api/DefaultApi~gETUpdateServiceAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the policies that control access to the domain's document and search services. The maximum size of an access policy document is 100 KB.
     * @param {String} domainName 
     * @param {String} accessPolicies 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateServiceAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceAccessPoliciesResponse}
     */
    gETUpdateServiceAccessPolicies(domainName, accessPolicies, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateServiceAccessPolicies");
      }
      // verify the required parameter 'accessPolicies' is set
      if (accessPolicies === undefined || accessPolicies === null) {
        throw new Error("Missing the required parameter 'accessPolicies' when calling gETUpdateServiceAccessPolicies");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateServiceAccessPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateServiceAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'AccessPolicies': accessPolicies,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateServiceAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateServiceAccessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateStemmingOptions operation.
     * @callback module:api/DefaultApi~gETUpdateStemmingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStemmingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures a stemming dictionary for the search domain. The stemming dictionary is used during indexing and when processing search requests. The maximum size of the stemming dictionary is 500 KB.
     * @param {String} domainName 
     * @param {String} stems 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateStemmingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStemmingOptionsResponse}
     */
    gETUpdateStemmingOptions(domainName, stems, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateStemmingOptions");
      }
      // verify the required parameter 'stems' is set
      if (stems === undefined || stems === null) {
        throw new Error("Missing the required parameter 'stems' when calling gETUpdateStemmingOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateStemmingOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateStemmingOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Stems': stems,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateStemmingOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateStemmingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateStopwordOptions operation.
     * @callback module:api/DefaultApi~gETUpdateStopwordOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStopwordOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures stopwords for the search domain. Stopwords are used during indexing and when processing search requests. The maximum size of the stopwords dictionary is 10 KB.
     * @param {String} domainName 
     * @param {String} stopwords 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateStopwordOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStopwordOptionsResponse}
     */
    gETUpdateStopwordOptions(domainName, stopwords, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateStopwordOptions");
      }
      // verify the required parameter 'stopwords' is set
      if (stopwords === undefined || stopwords === null) {
        throw new Error("Missing the required parameter 'stopwords' when calling gETUpdateStopwordOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateStopwordOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateStopwordOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Stopwords': stopwords,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateStopwordOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateStopwordOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateSynonymOptions operation.
     * @callback module:api/DefaultApi~gETUpdateSynonymOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSynonymOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures a synonym dictionary for the search domain. The synonym dictionary is used during indexing to configure mappings for terms that occur in text fields. The maximum size of the synonym dictionary is 100 KB. 
     * @param {String} domainName 
     * @param {String} synonyms 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateSynonymOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSynonymOptionsResponse}
     */
    gETUpdateSynonymOptions(domainName, synonyms, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateSynonymOptions");
      }
      // verify the required parameter 'synonyms' is set
      if (synonyms === undefined || synonyms === null) {
        throw new Error("Missing the required parameter 'synonyms' when calling gETUpdateSynonymOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateSynonymOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateSynonymOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Synonyms': synonyms,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateSynonymOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateSynonymOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDomain operation.
     * @callback module:api/DefaultApi~pOSTCreateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new search domain.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDomainRequest} [createDomainRequest] 
     * @param {module:api/DefaultApi~pOSTCreateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainResponse}
     */
    pOSTCreateDomain(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDomainRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDomainResponse;
      return this.apiClient.callApi(
        '/#Action=CreateDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDefineIndexField operation.
     * @callback module:api/DefaultApi~pOSTDefineIndexFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineIndexFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures an <code>IndexField</code> for the search domain. Used to create new fields and modify existing ones. If the field exists, the new configuration replaces the old one. You can configure a maximum of 200 index fields.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DefineIndexFieldRequest} [defineIndexFieldRequest] 
     * @param {module:api/DefaultApi~pOSTDefineIndexFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineIndexFieldResponse}
     */
    pOSTDefineIndexField(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['defineIndexFieldRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDefineIndexField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDefineIndexField");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DefineIndexFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DefineIndexField', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDefineRankExpression operation.
     * @callback module:api/DefaultApi~pOSTDefineRankExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineRankExpressionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures a <code>RankExpression</code> for the search domain. Used to create new rank expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. You can configure a maximum of 50 rank expressions.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DefineRankExpressionRequest} [defineRankExpressionRequest] 
     * @param {module:api/DefaultApi~pOSTDefineRankExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineRankExpressionResponse}
     */
    pOSTDefineRankExpression(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['defineRankExpressionRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDefineRankExpression");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDefineRankExpression");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DefineRankExpressionResponse;
      return this.apiClient.callApi(
        '/#Action=DefineRankExpression', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDomain operation.
     * @callback module:api/DefaultApi~pOSTDeleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes a search domain and all of its data.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDomainRequest} [deleteDomainRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDomainResponse}
     */
    pOSTDeleteDomain(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDomainRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteDomainResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteIndexField operation.
     * @callback module:api/DefaultApi~pOSTDeleteIndexFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteIndexFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an <code>IndexField</code> from the search domain.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteIndexFieldRequest} [deleteIndexFieldRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteIndexFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteIndexFieldResponse}
     */
    pOSTDeleteIndexField(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteIndexFieldRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteIndexField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteIndexField");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteIndexFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteIndexField', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteRankExpression operation.
     * @callback module:api/DefaultApi~pOSTDeleteRankExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRankExpressionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a <code>RankExpression</code> from the search domain.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteRankExpressionRequest} [deleteRankExpressionRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteRankExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRankExpressionResponse}
     */
    pOSTDeleteRankExpression(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteRankExpressionRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteRankExpression");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteRankExpression");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteRankExpressionResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteRankExpression', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeAvailabilityOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeAvailabilityOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAvailabilityOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the availability options configured for a domain. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html\" target=\"_blank\">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeAvailabilityOptionsRequest} [describeAvailabilityOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeAvailabilityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAvailabilityOptionsResponse}
     */
    pOSTDescribeAvailabilityOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeAvailabilityOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeAvailabilityOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeAvailabilityOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeAvailabilityOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeAvailabilityOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDefaultSearchField operation.
     * @callback module:api/DefaultApi~pOSTDescribeDefaultSearchFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDefaultSearchFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the default search field configured for the search domain.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeDefaultSearchFieldRequest} [describeDefaultSearchFieldRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeDefaultSearchFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDefaultSearchFieldResponse}
     */
    pOSTDescribeDefaultSearchField(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDefaultSearchFieldRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDefaultSearchField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDefaultSearchField");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDefaultSearchFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeDefaultSearchField', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDomains operation.
     * @callback module:api/DefaultApi~pOSTDescribeDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the search domains owned by this account. Can be limited to specific domains. Shows all domains by default.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeDomainsRequest} [describeDomainsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainsResponse}
     */
    pOSTDescribeDomains(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDomainsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDomains");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDomainsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeIndexFields operation.
     * @callback module:api/DefaultApi~pOSTDescribeIndexFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIndexFieldsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the index fields configured for the search domain. Can be limited to specific fields by name. Shows all fields by default.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeIndexFieldsRequest} [describeIndexFieldsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeIndexFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIndexFieldsResponse}
     */
    pOSTDescribeIndexFields(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeIndexFieldsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeIndexFields");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeIndexFields");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeIndexFieldsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeIndexFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeRankExpressions operation.
     * @callback module:api/DefaultApi~pOSTDescribeRankExpressionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRankExpressionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the rank expressions configured for the search domain. Can be limited to specific rank expressions by name. Shows all rank expressions by default. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeRankExpressionsRequest} [describeRankExpressionsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeRankExpressionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRankExpressionsResponse}
     */
    pOSTDescribeRankExpressions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeRankExpressionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeRankExpressions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeRankExpressions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeRankExpressionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeRankExpressions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeServiceAccessPolicies operation.
     * @callback module:api/DefaultApi~pOSTDescribeServiceAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the resource-based policies that control access to the domain's document and search services.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeServiceAccessPoliciesRequest} [describeServiceAccessPoliciesRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeServiceAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceAccessPoliciesResponse}
     */
    pOSTDescribeServiceAccessPolicies(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeServiceAccessPoliciesRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeServiceAccessPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeServiceAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeServiceAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeServiceAccessPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeStemmingOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeStemmingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStemmingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the stemming dictionary configured for the search domain.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeStemmingOptionsRequest} [describeStemmingOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeStemmingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStemmingOptionsResponse}
     */
    pOSTDescribeStemmingOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeStemmingOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeStemmingOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeStemmingOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeStemmingOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeStemmingOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeStopwordOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeStopwordOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStopwordOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the stopwords configured for the search domain.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeStopwordOptionsRequest} [describeStopwordOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeStopwordOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStopwordOptionsResponse}
     */
    pOSTDescribeStopwordOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeStopwordOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeStopwordOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeStopwordOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeStopwordOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeStopwordOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeSynonymOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeSynonymOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSynonymOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the synonym dictionary configured for the search domain.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeSynonymOptionsRequest} [describeSynonymOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeSynonymOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSynonymOptionsResponse}
     */
    pOSTDescribeSynonymOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeSynonymOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeSynonymOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeSynonymOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeSynonymOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeSynonymOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTIndexDocuments operation.
     * @callback module:api/DefaultApi~pOSTIndexDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexDocumentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tells the search domain to start indexing its documents using the latest text processing options and <code>IndexFields</code>. This operation must be invoked to make options whose <a>OptionStatus</a> has <code>OptionState</code> of <code>RequiresIndexDocuments</code> visible in search results.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/IndexDocumentsRequest} [indexDocumentsRequest] 
     * @param {module:api/DefaultApi~pOSTIndexDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexDocumentsResponse}
     */
    pOSTIndexDocuments(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['indexDocumentsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTIndexDocuments");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTIndexDocuments");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = IndexDocumentsResponse;
      return this.apiClient.callApi(
        '/#Action=IndexDocuments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateAvailabilityOptions operation.
     * @callback module:api/DefaultApi~pOSTUpdateAvailabilityOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAvailabilityOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the availability options for a domain. Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability Zone in the same Region to increase fault tolerance in the event of a service disruption. Changes to the Multi-AZ option can take about half an hour to become active. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html\" target=\"_blank\">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateAvailabilityOptionsRequest} [updateAvailabilityOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateAvailabilityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAvailabilityOptionsResponse}
     */
    pOSTUpdateAvailabilityOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAvailabilityOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateAvailabilityOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateAvailabilityOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateAvailabilityOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateAvailabilityOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateDefaultSearchField operation.
     * @callback module:api/DefaultApi~pOSTUpdateDefaultSearchFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDefaultSearchFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the default search field for the search domain. The default search field is the text field that is searched when a search request does not specify which fields to search. By default, it is configured to include the contents of all of the domain's text fields. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateDefaultSearchFieldRequest} [updateDefaultSearchFieldRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateDefaultSearchFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDefaultSearchFieldResponse}
     */
    pOSTUpdateDefaultSearchField(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDefaultSearchFieldRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateDefaultSearchField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateDefaultSearchField");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateDefaultSearchFieldResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateDefaultSearchField', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateServiceAccessPolicies operation.
     * @callback module:api/DefaultApi~pOSTUpdateServiceAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the policies that control access to the domain's document and search services. The maximum size of an access policy document is 100 KB.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateServiceAccessPoliciesRequest} [updateServiceAccessPoliciesRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateServiceAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceAccessPoliciesResponse}
     */
    pOSTUpdateServiceAccessPolicies(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateServiceAccessPoliciesRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateServiceAccessPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateServiceAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateServiceAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateServiceAccessPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateStemmingOptions operation.
     * @callback module:api/DefaultApi~pOSTUpdateStemmingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStemmingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures a stemming dictionary for the search domain. The stemming dictionary is used during indexing and when processing search requests. The maximum size of the stemming dictionary is 500 KB.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateStemmingOptionsRequest} [updateStemmingOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateStemmingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStemmingOptionsResponse}
     */
    pOSTUpdateStemmingOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateStemmingOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateStemmingOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateStemmingOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateStemmingOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateStemmingOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateStopwordOptions operation.
     * @callback module:api/DefaultApi~pOSTUpdateStopwordOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStopwordOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures stopwords for the search domain. Stopwords are used during indexing and when processing search requests. The maximum size of the stopwords dictionary is 10 KB.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateStopwordOptionsRequest} [updateStopwordOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateStopwordOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStopwordOptionsResponse}
     */
    pOSTUpdateStopwordOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateStopwordOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateStopwordOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateStopwordOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateStopwordOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateStopwordOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateSynonymOptions operation.
     * @callback module:api/DefaultApi~pOSTUpdateSynonymOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSynonymOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures a synonym dictionary for the search domain. The synonym dictionary is used during indexing to configure mappings for terms that occur in text fields. The maximum size of the synonym dictionary is 100 KB. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateSynonymOptionsRequest} [updateSynonymOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateSynonymOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSynonymOptionsResponse}
     */
    pOSTUpdateSynonymOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateSynonymOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateSynonymOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateSynonymOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateSynonymOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateSynonymOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
