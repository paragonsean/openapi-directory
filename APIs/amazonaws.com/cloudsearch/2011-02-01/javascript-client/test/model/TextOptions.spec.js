/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudSearch);
  }
}(this, function(expect, AmazonCloudSearch) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudSearch.TextOptions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TextOptions', function() {
    it('should create an instance of TextOptions', function() {
      // uncomment below and update the code to test TextOptions
      //var instance = new AmazonCloudSearch.TextOptions();
      //expect(instance).to.be.a(AmazonCloudSearch.TextOptions);
    });

    it('should have the property defaultValue (base name: "DefaultValue")', function() {
      // uncomment below and update the code to test the property defaultValue
      //var instance = new AmazonCloudSearch.TextOptions();
      //expect(instance).to.be();
    });

    it('should have the property facetEnabled (base name: "FacetEnabled")', function() {
      // uncomment below and update the code to test the property facetEnabled
      //var instance = new AmazonCloudSearch.TextOptions();
      //expect(instance).to.be();
    });

    it('should have the property resultEnabled (base name: "ResultEnabled")', function() {
      // uncomment below and update the code to test the property resultEnabled
      //var instance = new AmazonCloudSearch.TextOptions();
      //expect(instance).to.be();
    });

    it('should have the property textProcessor (base name: "TextProcessor")', function() {
      // uncomment below and update the code to test the property textProcessor
      //var instance = new AmazonCloudSearch.TextOptions();
      //expect(instance).to.be();
    });

  });

}));
