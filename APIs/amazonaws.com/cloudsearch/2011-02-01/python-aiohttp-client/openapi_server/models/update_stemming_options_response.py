# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stemming_options_status import StemmingOptionsStatus
from openapi_server import util


class UpdateStemmingOptionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stems: StemmingOptionsStatus=None):
        """UpdateStemmingOptionsResponse - a model defined in OpenAPI

        :param stems: The stems of this UpdateStemmingOptionsResponse.
        """
        self.openapi_types = {
            'stems': StemmingOptionsStatus
        }

        self.attribute_map = {
            'stems': 'Stems'
        }

        self._stems = stems

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateStemmingOptionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateStemmingOptionsResponse of this UpdateStemmingOptionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stems(self):
        """Gets the stems of this UpdateStemmingOptionsResponse.


        :return: The stems of this UpdateStemmingOptionsResponse.
        :rtype: StemmingOptionsStatus
        """
        return self._stems

    @stems.setter
    def stems(self, stems):
        """Sets the stems of this UpdateStemmingOptionsResponse.


        :param stems: The stems of this UpdateStemmingOptionsResponse.
        :type stems: StemmingOptionsStatus
        """
        if stems is None:
            raise ValueError("Invalid value for `stems`, must not be `None`")

        self._stems = stems
