# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.synonym_options_status import SynonymOptionsStatus
from openapi_server import util


class DescribeSynonymOptionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, synonyms: SynonymOptionsStatus=None):
        """DescribeSynonymOptionsResponse - a model defined in OpenAPI

        :param synonyms: The synonyms of this DescribeSynonymOptionsResponse.
        """
        self.openapi_types = {
            'synonyms': SynonymOptionsStatus
        }

        self.attribute_map = {
            'synonyms': 'Synonyms'
        }

        self._synonyms = synonyms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeSynonymOptionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeSynonymOptionsResponse of this DescribeSynonymOptionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def synonyms(self):
        """Gets the synonyms of this DescribeSynonymOptionsResponse.


        :return: The synonyms of this DescribeSynonymOptionsResponse.
        :rtype: SynonymOptionsStatus
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this DescribeSynonymOptionsResponse.


        :param synonyms: The synonyms of this DescribeSynonymOptionsResponse.
        :type synonyms: SynonymOptionsStatus
        """
        if synonyms is None:
            raise ValueError("Invalid value for `synonyms`, must not be `None`")

        self._synonyms = synonyms
