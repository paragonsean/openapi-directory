# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeRankExpressionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rank_expressions: List=None):
        """DescribeRankExpressionsResponse - a model defined in OpenAPI

        :param rank_expressions: The rank_expressions of this DescribeRankExpressionsResponse.
        """
        self.openapi_types = {
            'rank_expressions': List
        }

        self.attribute_map = {
            'rank_expressions': 'RankExpressions'
        }

        self._rank_expressions = rank_expressions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeRankExpressionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeRankExpressionsResponse of this DescribeRankExpressionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rank_expressions(self):
        """Gets the rank_expressions of this DescribeRankExpressionsResponse.


        :return: The rank_expressions of this DescribeRankExpressionsResponse.
        :rtype: List
        """
        return self._rank_expressions

    @rank_expressions.setter
    def rank_expressions(self, rank_expressions):
        """Sets the rank_expressions of this DescribeRankExpressionsResponse.


        :param rank_expressions: The rank_expressions of this DescribeRankExpressionsResponse.
        :type rank_expressions: List
        """
        if rank_expressions is None:
            raise ValueError("Invalid value for `rank_expressions`, must not be `None`")

        self._rank_expressions = rank_expressions
