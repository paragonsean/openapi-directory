# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stopword_options_status import StopwordOptionsStatus
from openapi_server import util


class DescribeStopwordOptionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stopwords: StopwordOptionsStatus=None):
        """DescribeStopwordOptionsResponse - a model defined in OpenAPI

        :param stopwords: The stopwords of this DescribeStopwordOptionsResponse.
        """
        self.openapi_types = {
            'stopwords': StopwordOptionsStatus
        }

        self.attribute_map = {
            'stopwords': 'Stopwords'
        }

        self._stopwords = stopwords

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeStopwordOptionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeStopwordOptionsResponse of this DescribeStopwordOptionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stopwords(self):
        """Gets the stopwords of this DescribeStopwordOptionsResponse.


        :return: The stopwords of this DescribeStopwordOptionsResponse.
        :rtype: StopwordOptionsStatus
        """
        return self._stopwords

    @stopwords.setter
    def stopwords(self, stopwords):
        """Sets the stopwords of this DescribeStopwordOptionsResponse.


        :param stopwords: The stopwords of this DescribeStopwordOptionsResponse.
        :type stopwords: StopwordOptionsStatus
        """
        if stopwords is None:
            raise ValueError("Invalid value for `stopwords`, must not be `None`")

        self._stopwords = stopwords
