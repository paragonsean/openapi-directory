# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_define_index_field_index_field_parameter_literal_options import GETDefineIndexFieldIndexFieldParameterLiteralOptions
from openapi_server.models.get_define_index_field_index_field_parameter_text_options import GETDefineIndexFieldIndexFieldParameterTextOptions
from openapi_server.models.get_define_index_field_index_field_parameter_u_int_options import GETDefineIndexFieldIndexFieldParameterUIntOptions
from openapi_server.models.index_field_type import IndexFieldType
from openapi_server import util


class IndexField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_field_name: str=None, index_field_type: IndexFieldType=None, u_int_options: GETDefineIndexFieldIndexFieldParameterUIntOptions=None, literal_options: GETDefineIndexFieldIndexFieldParameterLiteralOptions=None, text_options: GETDefineIndexFieldIndexFieldParameterTextOptions=None, source_attributes: List=None):
        """IndexField - a model defined in OpenAPI

        :param index_field_name: The index_field_name of this IndexField.
        :param index_field_type: The index_field_type of this IndexField.
        :param u_int_options: The u_int_options of this IndexField.
        :param literal_options: The literal_options of this IndexField.
        :param text_options: The text_options of this IndexField.
        :param source_attributes: The source_attributes of this IndexField.
        """
        self.openapi_types = {
            'index_field_name': str,
            'index_field_type': IndexFieldType,
            'u_int_options': GETDefineIndexFieldIndexFieldParameterUIntOptions,
            'literal_options': GETDefineIndexFieldIndexFieldParameterLiteralOptions,
            'text_options': GETDefineIndexFieldIndexFieldParameterTextOptions,
            'source_attributes': List
        }

        self.attribute_map = {
            'index_field_name': 'IndexFieldName',
            'index_field_type': 'IndexFieldType',
            'u_int_options': 'UIntOptions',
            'literal_options': 'LiteralOptions',
            'text_options': 'TextOptions',
            'source_attributes': 'SourceAttributes'
        }

        self._index_field_name = index_field_name
        self._index_field_type = index_field_type
        self._u_int_options = u_int_options
        self._literal_options = literal_options
        self._text_options = text_options
        self._source_attributes = source_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexField of this IndexField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_field_name(self):
        """Gets the index_field_name of this IndexField.


        :return: The index_field_name of this IndexField.
        :rtype: str
        """
        return self._index_field_name

    @index_field_name.setter
    def index_field_name(self, index_field_name):
        """Sets the index_field_name of this IndexField.


        :param index_field_name: The index_field_name of this IndexField.
        :type index_field_name: str
        """
        if index_field_name is None:
            raise ValueError("Invalid value for `index_field_name`, must not be `None`")

        self._index_field_name = index_field_name

    @property
    def index_field_type(self):
        """Gets the index_field_type of this IndexField.


        :return: The index_field_type of this IndexField.
        :rtype: IndexFieldType
        """
        return self._index_field_type

    @index_field_type.setter
    def index_field_type(self, index_field_type):
        """Sets the index_field_type of this IndexField.


        :param index_field_type: The index_field_type of this IndexField.
        :type index_field_type: IndexFieldType
        """
        if index_field_type is None:
            raise ValueError("Invalid value for `index_field_type`, must not be `None`")

        self._index_field_type = index_field_type

    @property
    def u_int_options(self):
        """Gets the u_int_options of this IndexField.


        :return: The u_int_options of this IndexField.
        :rtype: GETDefineIndexFieldIndexFieldParameterUIntOptions
        """
        return self._u_int_options

    @u_int_options.setter
    def u_int_options(self, u_int_options):
        """Sets the u_int_options of this IndexField.


        :param u_int_options: The u_int_options of this IndexField.
        :type u_int_options: GETDefineIndexFieldIndexFieldParameterUIntOptions
        """

        self._u_int_options = u_int_options

    @property
    def literal_options(self):
        """Gets the literal_options of this IndexField.


        :return: The literal_options of this IndexField.
        :rtype: GETDefineIndexFieldIndexFieldParameterLiteralOptions
        """
        return self._literal_options

    @literal_options.setter
    def literal_options(self, literal_options):
        """Sets the literal_options of this IndexField.


        :param literal_options: The literal_options of this IndexField.
        :type literal_options: GETDefineIndexFieldIndexFieldParameterLiteralOptions
        """

        self._literal_options = literal_options

    @property
    def text_options(self):
        """Gets the text_options of this IndexField.


        :return: The text_options of this IndexField.
        :rtype: GETDefineIndexFieldIndexFieldParameterTextOptions
        """
        return self._text_options

    @text_options.setter
    def text_options(self, text_options):
        """Sets the text_options of this IndexField.


        :param text_options: The text_options of this IndexField.
        :type text_options: GETDefineIndexFieldIndexFieldParameterTextOptions
        """

        self._text_options = text_options

    @property
    def source_attributes(self):
        """Gets the source_attributes of this IndexField.


        :return: The source_attributes of this IndexField.
        :rtype: List
        """
        return self._source_attributes

    @source_attributes.setter
    def source_attributes(self, source_attributes):
        """Sets the source_attributes of this IndexField.


        :param source_attributes: The source_attributes of this IndexField.
        :type source_attributes: List
        """

        self._source_attributes = source_attributes
