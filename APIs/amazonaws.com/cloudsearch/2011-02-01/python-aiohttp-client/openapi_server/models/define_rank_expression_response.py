# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rank_expression_status import RankExpressionStatus
from openapi_server import util


class DefineRankExpressionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rank_expression: RankExpressionStatus=None):
        """DefineRankExpressionResponse - a model defined in OpenAPI

        :param rank_expression: The rank_expression of this DefineRankExpressionResponse.
        """
        self.openapi_types = {
            'rank_expression': RankExpressionStatus
        }

        self.attribute_map = {
            'rank_expression': 'RankExpression'
        }

        self._rank_expression = rank_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefineRankExpressionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefineRankExpressionResponse of this DefineRankExpressionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rank_expression(self):
        """Gets the rank_expression of this DefineRankExpressionResponse.


        :return: The rank_expression of this DefineRankExpressionResponse.
        :rtype: RankExpressionStatus
        """
        return self._rank_expression

    @rank_expression.setter
    def rank_expression(self, rank_expression):
        """Sets the rank_expression of this DefineRankExpressionResponse.


        :param rank_expression: The rank_expression of this DefineRankExpressionResponse.
        :type rank_expression: RankExpressionStatus
        """
        if rank_expression is None:
            raise ValueError("Invalid value for `rank_expression`, must not be `None`")

        self._rank_expression = rank_expression
