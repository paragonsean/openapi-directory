/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GETDefineIndexFieldIndexFieldParameterUIntOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:56.396635-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETDefineIndexFieldIndexFieldParameterUIntOptions {
  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private Integer defaultValue;

  public GETDefineIndexFieldIndexFieldParameterUIntOptions() {
  }

  public GETDefineIndexFieldIndexFieldParameterUIntOptions defaultValue(Integer defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public Integer getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(Integer defaultValue) {
    this.defaultValue = defaultValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETDefineIndexFieldIndexFieldParameterUIntOptions geTDefineIndexFieldIndexFieldParameterUIntOptions = (GETDefineIndexFieldIndexFieldParameterUIntOptions) o;
    return Objects.equals(this.defaultValue, geTDefineIndexFieldIndexFieldParameterUIntOptions.defaultValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETDefineIndexFieldIndexFieldParameterUIntOptions {\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefaultValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETDefineIndexFieldIndexFieldParameterUIntOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETDefineIndexFieldIndexFieldParameterUIntOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETDefineIndexFieldIndexFieldParameterUIntOptions is not found in the empty JSON string", GETDefineIndexFieldIndexFieldParameterUIntOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETDefineIndexFieldIndexFieldParameterUIntOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETDefineIndexFieldIndexFieldParameterUIntOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DefaultValue`
      if (jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DefaultValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETDefineIndexFieldIndexFieldParameterUIntOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETDefineIndexFieldIndexFieldParameterUIntOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETDefineIndexFieldIndexFieldParameterUIntOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETDefineIndexFieldIndexFieldParameterUIntOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GETDefineIndexFieldIndexFieldParameterUIntOptions>() {
           @Override
           public void write(JsonWriter out, GETDefineIndexFieldIndexFieldParameterUIntOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETDefineIndexFieldIndexFieldParameterUIntOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETDefineIndexFieldIndexFieldParameterUIntOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETDefineIndexFieldIndexFieldParameterUIntOptions
   * @throws IOException if the JSON string is invalid with respect to GETDefineIndexFieldIndexFieldParameterUIntOptions
   */
  public static GETDefineIndexFieldIndexFieldParameterUIntOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETDefineIndexFieldIndexFieldParameterUIntOptions.class);
  }

  /**
   * Convert an instance of GETDefineIndexFieldIndexFieldParameterUIntOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

