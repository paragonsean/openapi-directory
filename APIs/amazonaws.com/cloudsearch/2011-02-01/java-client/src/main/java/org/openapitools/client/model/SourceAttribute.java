/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SourceAttributeSourceDataCopy;
import org.openapitools.client.model.SourceAttributeSourceDataMap;
import org.openapitools.client.model.SourceAttributeSourceDataTrimTitle;
import org.openapitools.client.model.SourceDataFunction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies the source data for an index field. An optional data transformation can be applied to the source data when populating the index field. By default, the value of the source attribute is copied to the index field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:56.396635-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceAttribute {
  public static final String SERIALIZED_NAME_SOURCE_DATA_FUNCTION = "SourceDataFunction";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_FUNCTION)
  private SourceDataFunction sourceDataFunction;

  public static final String SERIALIZED_NAME_SOURCE_DATA_COPY = "SourceDataCopy";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_COPY)
  private SourceAttributeSourceDataCopy sourceDataCopy;

  public static final String SERIALIZED_NAME_SOURCE_DATA_TRIM_TITLE = "SourceDataTrimTitle";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_TRIM_TITLE)
  private SourceAttributeSourceDataTrimTitle sourceDataTrimTitle;

  public static final String SERIALIZED_NAME_SOURCE_DATA_MAP = "SourceDataMap";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_MAP)
  private SourceAttributeSourceDataMap sourceDataMap;

  public SourceAttribute() {
  }

  public SourceAttribute sourceDataFunction(SourceDataFunction sourceDataFunction) {
    this.sourceDataFunction = sourceDataFunction;
    return this;
  }

  /**
   * Get sourceDataFunction
   * @return sourceDataFunction
   */
  @javax.annotation.Nonnull
  public SourceDataFunction getSourceDataFunction() {
    return sourceDataFunction;
  }

  public void setSourceDataFunction(SourceDataFunction sourceDataFunction) {
    this.sourceDataFunction = sourceDataFunction;
  }


  public SourceAttribute sourceDataCopy(SourceAttributeSourceDataCopy sourceDataCopy) {
    this.sourceDataCopy = sourceDataCopy;
    return this;
  }

  /**
   * Get sourceDataCopy
   * @return sourceDataCopy
   */
  @javax.annotation.Nullable
  public SourceAttributeSourceDataCopy getSourceDataCopy() {
    return sourceDataCopy;
  }

  public void setSourceDataCopy(SourceAttributeSourceDataCopy sourceDataCopy) {
    this.sourceDataCopy = sourceDataCopy;
  }


  public SourceAttribute sourceDataTrimTitle(SourceAttributeSourceDataTrimTitle sourceDataTrimTitle) {
    this.sourceDataTrimTitle = sourceDataTrimTitle;
    return this;
  }

  /**
   * Get sourceDataTrimTitle
   * @return sourceDataTrimTitle
   */
  @javax.annotation.Nullable
  public SourceAttributeSourceDataTrimTitle getSourceDataTrimTitle() {
    return sourceDataTrimTitle;
  }

  public void setSourceDataTrimTitle(SourceAttributeSourceDataTrimTitle sourceDataTrimTitle) {
    this.sourceDataTrimTitle = sourceDataTrimTitle;
  }


  public SourceAttribute sourceDataMap(SourceAttributeSourceDataMap sourceDataMap) {
    this.sourceDataMap = sourceDataMap;
    return this;
  }

  /**
   * Get sourceDataMap
   * @return sourceDataMap
   */
  @javax.annotation.Nullable
  public SourceAttributeSourceDataMap getSourceDataMap() {
    return sourceDataMap;
  }

  public void setSourceDataMap(SourceAttributeSourceDataMap sourceDataMap) {
    this.sourceDataMap = sourceDataMap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceAttribute sourceAttribute = (SourceAttribute) o;
    return Objects.equals(this.sourceDataFunction, sourceAttribute.sourceDataFunction) &&
        Objects.equals(this.sourceDataCopy, sourceAttribute.sourceDataCopy) &&
        Objects.equals(this.sourceDataTrimTitle, sourceAttribute.sourceDataTrimTitle) &&
        Objects.equals(this.sourceDataMap, sourceAttribute.sourceDataMap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceDataFunction, sourceDataCopy, sourceDataTrimTitle, sourceDataMap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceAttribute {\n");
    sb.append("    sourceDataFunction: ").append(toIndentedString(sourceDataFunction)).append("\n");
    sb.append("    sourceDataCopy: ").append(toIndentedString(sourceDataCopy)).append("\n");
    sb.append("    sourceDataTrimTitle: ").append(toIndentedString(sourceDataTrimTitle)).append("\n");
    sb.append("    sourceDataMap: ").append(toIndentedString(sourceDataMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceDataFunction");
    openapiFields.add("SourceDataCopy");
    openapiFields.add("SourceDataTrimTitle");
    openapiFields.add("SourceDataMap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceDataFunction");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceAttribute is not found in the empty JSON string", SourceAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceAttribute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceDataFunction`
      SourceDataFunction.validateJsonElement(jsonObj.get("SourceDataFunction"));
      // validate the optional field `SourceDataCopy`
      if (jsonObj.get("SourceDataCopy") != null && !jsonObj.get("SourceDataCopy").isJsonNull()) {
        SourceAttributeSourceDataCopy.validateJsonElement(jsonObj.get("SourceDataCopy"));
      }
      // validate the optional field `SourceDataTrimTitle`
      if (jsonObj.get("SourceDataTrimTitle") != null && !jsonObj.get("SourceDataTrimTitle").isJsonNull()) {
        SourceAttributeSourceDataTrimTitle.validateJsonElement(jsonObj.get("SourceDataTrimTitle"));
      }
      // validate the optional field `SourceDataMap`
      if (jsonObj.get("SourceDataMap") != null && !jsonObj.get("SourceDataMap").isJsonNull()) {
        SourceAttributeSourceDataMap.validateJsonElement(jsonObj.get("SourceDataMap"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceAttribute>() {
           @Override
           public void write(JsonWriter out, SourceAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceAttribute
   * @throws IOException if the JSON string is invalid with respect to SourceAttribute
   */
  public static SourceAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceAttribute.class);
  }

  /**
   * Convert an instance of SourceAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

