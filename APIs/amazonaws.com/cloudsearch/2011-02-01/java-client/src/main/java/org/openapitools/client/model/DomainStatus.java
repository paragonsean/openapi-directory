/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DomainStatusDocService;
import org.openapitools.client.model.DomainStatusSearchService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The current status of the search domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:56.396635-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainStatus {
  public static final String SERIALIZED_NAME_DOMAIN_ID = "DomainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Boolean created;

  public static final String SERIALIZED_NAME_DELETED = "Deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_NUM_SEARCHABLE_DOCS = "NumSearchableDocs";
  @SerializedName(SERIALIZED_NAME_NUM_SEARCHABLE_DOCS)
  private Integer numSearchableDocs;

  public static final String SERIALIZED_NAME_DOC_SERVICE = "DocService";
  @SerializedName(SERIALIZED_NAME_DOC_SERVICE)
  private DomainStatusDocService docService;

  public static final String SERIALIZED_NAME_SEARCH_SERVICE = "SearchService";
  @SerializedName(SERIALIZED_NAME_SEARCH_SERVICE)
  private DomainStatusSearchService searchService;

  public static final String SERIALIZED_NAME_REQUIRES_INDEX_DOCUMENTS = "RequiresIndexDocuments";
  @SerializedName(SERIALIZED_NAME_REQUIRES_INDEX_DOCUMENTS)
  private Boolean requiresIndexDocuments;

  public static final String SERIALIZED_NAME_PROCESSING = "Processing";
  @SerializedName(SERIALIZED_NAME_PROCESSING)
  private Boolean processing;

  public static final String SERIALIZED_NAME_SEARCH_INSTANCE_TYPE = "SearchInstanceType";
  @SerializedName(SERIALIZED_NAME_SEARCH_INSTANCE_TYPE)
  private String searchInstanceType;

  public static final String SERIALIZED_NAME_SEARCH_PARTITION_COUNT = "SearchPartitionCount";
  @SerializedName(SERIALIZED_NAME_SEARCH_PARTITION_COUNT)
  private Integer searchPartitionCount;

  public static final String SERIALIZED_NAME_SEARCH_INSTANCE_COUNT = "SearchInstanceCount";
  @SerializedName(SERIALIZED_NAME_SEARCH_INSTANCE_COUNT)
  private Integer searchInstanceCount;

  public DomainStatus() {
  }

  public DomainStatus domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * An internally generated unique identifier for a domain.
   * @return domainId
   */
  @javax.annotation.Nonnull
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public DomainStatus domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public DomainStatus created(Boolean created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public Boolean getCreated() {
    return created;
  }

  public void setCreated(Boolean created) {
    this.created = created;
  }


  public DomainStatus deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public DomainStatus numSearchableDocs(Integer numSearchableDocs) {
    this.numSearchableDocs = numSearchableDocs;
    return this;
  }

  /**
   * Get numSearchableDocs
   * @return numSearchableDocs
   */
  @javax.annotation.Nullable
  public Integer getNumSearchableDocs() {
    return numSearchableDocs;
  }

  public void setNumSearchableDocs(Integer numSearchableDocs) {
    this.numSearchableDocs = numSearchableDocs;
  }


  public DomainStatus docService(DomainStatusDocService docService) {
    this.docService = docService;
    return this;
  }

  /**
   * Get docService
   * @return docService
   */
  @javax.annotation.Nullable
  public DomainStatusDocService getDocService() {
    return docService;
  }

  public void setDocService(DomainStatusDocService docService) {
    this.docService = docService;
  }


  public DomainStatus searchService(DomainStatusSearchService searchService) {
    this.searchService = searchService;
    return this;
  }

  /**
   * Get searchService
   * @return searchService
   */
  @javax.annotation.Nullable
  public DomainStatusSearchService getSearchService() {
    return searchService;
  }

  public void setSearchService(DomainStatusSearchService searchService) {
    this.searchService = searchService;
  }


  public DomainStatus requiresIndexDocuments(Boolean requiresIndexDocuments) {
    this.requiresIndexDocuments = requiresIndexDocuments;
    return this;
  }

  /**
   * Get requiresIndexDocuments
   * @return requiresIndexDocuments
   */
  @javax.annotation.Nonnull
  public Boolean getRequiresIndexDocuments() {
    return requiresIndexDocuments;
  }

  public void setRequiresIndexDocuments(Boolean requiresIndexDocuments) {
    this.requiresIndexDocuments = requiresIndexDocuments;
  }


  public DomainStatus processing(Boolean processing) {
    this.processing = processing;
    return this;
  }

  /**
   * Get processing
   * @return processing
   */
  @javax.annotation.Nullable
  public Boolean getProcessing() {
    return processing;
  }

  public void setProcessing(Boolean processing) {
    this.processing = processing;
  }


  public DomainStatus searchInstanceType(String searchInstanceType) {
    this.searchInstanceType = searchInstanceType;
    return this;
  }

  /**
   * Get searchInstanceType
   * @return searchInstanceType
   */
  @javax.annotation.Nullable
  public String getSearchInstanceType() {
    return searchInstanceType;
  }

  public void setSearchInstanceType(String searchInstanceType) {
    this.searchInstanceType = searchInstanceType;
  }


  public DomainStatus searchPartitionCount(Integer searchPartitionCount) {
    this.searchPartitionCount = searchPartitionCount;
    return this;
  }

  /**
   * Get searchPartitionCount
   * @return searchPartitionCount
   */
  @javax.annotation.Nullable
  public Integer getSearchPartitionCount() {
    return searchPartitionCount;
  }

  public void setSearchPartitionCount(Integer searchPartitionCount) {
    this.searchPartitionCount = searchPartitionCount;
  }


  public DomainStatus searchInstanceCount(Integer searchInstanceCount) {
    this.searchInstanceCount = searchInstanceCount;
    return this;
  }

  /**
   * Get searchInstanceCount
   * @return searchInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getSearchInstanceCount() {
    return searchInstanceCount;
  }

  public void setSearchInstanceCount(Integer searchInstanceCount) {
    this.searchInstanceCount = searchInstanceCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainStatus domainStatus = (DomainStatus) o;
    return Objects.equals(this.domainId, domainStatus.domainId) &&
        Objects.equals(this.domainName, domainStatus.domainName) &&
        Objects.equals(this.created, domainStatus.created) &&
        Objects.equals(this.deleted, domainStatus.deleted) &&
        Objects.equals(this.numSearchableDocs, domainStatus.numSearchableDocs) &&
        Objects.equals(this.docService, domainStatus.docService) &&
        Objects.equals(this.searchService, domainStatus.searchService) &&
        Objects.equals(this.requiresIndexDocuments, domainStatus.requiresIndexDocuments) &&
        Objects.equals(this.processing, domainStatus.processing) &&
        Objects.equals(this.searchInstanceType, domainStatus.searchInstanceType) &&
        Objects.equals(this.searchPartitionCount, domainStatus.searchPartitionCount) &&
        Objects.equals(this.searchInstanceCount, domainStatus.searchInstanceCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainId, domainName, created, deleted, numSearchableDocs, docService, searchService, requiresIndexDocuments, processing, searchInstanceType, searchPartitionCount, searchInstanceCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainStatus {\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    numSearchableDocs: ").append(toIndentedString(numSearchableDocs)).append("\n");
    sb.append("    docService: ").append(toIndentedString(docService)).append("\n");
    sb.append("    searchService: ").append(toIndentedString(searchService)).append("\n");
    sb.append("    requiresIndexDocuments: ").append(toIndentedString(requiresIndexDocuments)).append("\n");
    sb.append("    processing: ").append(toIndentedString(processing)).append("\n");
    sb.append("    searchInstanceType: ").append(toIndentedString(searchInstanceType)).append("\n");
    sb.append("    searchPartitionCount: ").append(toIndentedString(searchPartitionCount)).append("\n");
    sb.append("    searchInstanceCount: ").append(toIndentedString(searchInstanceCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainId");
    openapiFields.add("DomainName");
    openapiFields.add("Created");
    openapiFields.add("Deleted");
    openapiFields.add("NumSearchableDocs");
    openapiFields.add("DocService");
    openapiFields.add("SearchService");
    openapiFields.add("RequiresIndexDocuments");
    openapiFields.add("Processing");
    openapiFields.add("SearchInstanceType");
    openapiFields.add("SearchPartitionCount");
    openapiFields.add("SearchInstanceCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DomainId");
    openapiRequiredFields.add("DomainName");
    openapiRequiredFields.add("RequiresIndexDocuments");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainStatus is not found in the empty JSON string", DomainStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DomainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DomainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DomainId").toString()));
      }
      if (!jsonObj.get("DomainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DomainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DomainName").toString()));
      }
      // validate the optional field `Created`
      if (jsonObj.get("Created") != null && !jsonObj.get("Created").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Created"));
      }
      // validate the optional field `Deleted`
      if (jsonObj.get("Deleted") != null && !jsonObj.get("Deleted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Deleted"));
      }
      // validate the optional field `NumSearchableDocs`
      if (jsonObj.get("NumSearchableDocs") != null && !jsonObj.get("NumSearchableDocs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumSearchableDocs"));
      }
      // validate the optional field `DocService`
      if (jsonObj.get("DocService") != null && !jsonObj.get("DocService").isJsonNull()) {
        DomainStatusDocService.validateJsonElement(jsonObj.get("DocService"));
      }
      // validate the optional field `SearchService`
      if (jsonObj.get("SearchService") != null && !jsonObj.get("SearchService").isJsonNull()) {
        DomainStatusSearchService.validateJsonElement(jsonObj.get("SearchService"));
      }
      // validate the required field `RequiresIndexDocuments`
      Boolean.validateJsonElement(jsonObj.get("RequiresIndexDocuments"));
      // validate the optional field `Processing`
      if (jsonObj.get("Processing") != null && !jsonObj.get("Processing").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Processing"));
      }
      // validate the optional field `SearchInstanceType`
      if (jsonObj.get("SearchInstanceType") != null && !jsonObj.get("SearchInstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SearchInstanceType"));
      }
      // validate the optional field `SearchPartitionCount`
      if (jsonObj.get("SearchPartitionCount") != null && !jsonObj.get("SearchPartitionCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SearchPartitionCount"));
      }
      // validate the optional field `SearchInstanceCount`
      if (jsonObj.get("SearchInstanceCount") != null && !jsonObj.get("SearchInstanceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SearchInstanceCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainStatus>() {
           @Override
           public void write(JsonWriter out, DomainStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainStatus
   * @throws IOException if the JSON string is invalid with respect to DomainStatus
   */
  public static DomainStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainStatus.class);
  }

  /**
   * Convert an instance of DomainStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

