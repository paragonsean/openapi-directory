/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GETDefineIndexFieldIndexFieldParameterLiteralOptions;
import org.openapitools.client.model.GETDefineIndexFieldIndexFieldParameterTextOptions;
import org.openapitools.client.model.GETDefineIndexFieldIndexFieldParameterUIntOptions;
import org.openapitools.client.model.IndexFieldType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a field in the index, including its name, type, and the source of its data. The &lt;code&gt;IndexFieldType&lt;/code&gt; indicates which of the options will be present. It is invalid to specify options for a type other than the &lt;code&gt;IndexFieldType&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:56.396635-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndexField {
  public static final String SERIALIZED_NAME_INDEX_FIELD_NAME = "IndexFieldName";
  @SerializedName(SERIALIZED_NAME_INDEX_FIELD_NAME)
  private String indexFieldName;

  public static final String SERIALIZED_NAME_INDEX_FIELD_TYPE = "IndexFieldType";
  @SerializedName(SERIALIZED_NAME_INDEX_FIELD_TYPE)
  private IndexFieldType indexFieldType;

  public static final String SERIALIZED_NAME_UINT_OPTIONS = "UIntOptions";
  @SerializedName(SERIALIZED_NAME_UINT_OPTIONS)
  private GETDefineIndexFieldIndexFieldParameterUIntOptions uintOptions;

  public static final String SERIALIZED_NAME_LITERAL_OPTIONS = "LiteralOptions";
  @SerializedName(SERIALIZED_NAME_LITERAL_OPTIONS)
  private GETDefineIndexFieldIndexFieldParameterLiteralOptions literalOptions;

  public static final String SERIALIZED_NAME_TEXT_OPTIONS = "TextOptions";
  @SerializedName(SERIALIZED_NAME_TEXT_OPTIONS)
  private GETDefineIndexFieldIndexFieldParameterTextOptions textOptions;

  public static final String SERIALIZED_NAME_SOURCE_ATTRIBUTES = "SourceAttributes";
  @SerializedName(SERIALIZED_NAME_SOURCE_ATTRIBUTES)
  private List sourceAttributes;

  public IndexField() {
  }

  public IndexField indexFieldName(String indexFieldName) {
    this.indexFieldName = indexFieldName;
    return this;
  }

  /**
   * Get indexFieldName
   * @return indexFieldName
   */
  @javax.annotation.Nonnull
  public String getIndexFieldName() {
    return indexFieldName;
  }

  public void setIndexFieldName(String indexFieldName) {
    this.indexFieldName = indexFieldName;
  }


  public IndexField indexFieldType(IndexFieldType indexFieldType) {
    this.indexFieldType = indexFieldType;
    return this;
  }

  /**
   * Get indexFieldType
   * @return indexFieldType
   */
  @javax.annotation.Nonnull
  public IndexFieldType getIndexFieldType() {
    return indexFieldType;
  }

  public void setIndexFieldType(IndexFieldType indexFieldType) {
    this.indexFieldType = indexFieldType;
  }


  public IndexField uintOptions(GETDefineIndexFieldIndexFieldParameterUIntOptions uintOptions) {
    this.uintOptions = uintOptions;
    return this;
  }

  /**
   * Get uintOptions
   * @return uintOptions
   */
  @javax.annotation.Nullable
  public GETDefineIndexFieldIndexFieldParameterUIntOptions getUintOptions() {
    return uintOptions;
  }

  public void setUintOptions(GETDefineIndexFieldIndexFieldParameterUIntOptions uintOptions) {
    this.uintOptions = uintOptions;
  }


  public IndexField literalOptions(GETDefineIndexFieldIndexFieldParameterLiteralOptions literalOptions) {
    this.literalOptions = literalOptions;
    return this;
  }

  /**
   * Get literalOptions
   * @return literalOptions
   */
  @javax.annotation.Nullable
  public GETDefineIndexFieldIndexFieldParameterLiteralOptions getLiteralOptions() {
    return literalOptions;
  }

  public void setLiteralOptions(GETDefineIndexFieldIndexFieldParameterLiteralOptions literalOptions) {
    this.literalOptions = literalOptions;
  }


  public IndexField textOptions(GETDefineIndexFieldIndexFieldParameterTextOptions textOptions) {
    this.textOptions = textOptions;
    return this;
  }

  /**
   * Get textOptions
   * @return textOptions
   */
  @javax.annotation.Nullable
  public GETDefineIndexFieldIndexFieldParameterTextOptions getTextOptions() {
    return textOptions;
  }

  public void setTextOptions(GETDefineIndexFieldIndexFieldParameterTextOptions textOptions) {
    this.textOptions = textOptions;
  }


  public IndexField sourceAttributes(List sourceAttributes) {
    this.sourceAttributes = sourceAttributes;
    return this;
  }

  /**
   * Get sourceAttributes
   * @return sourceAttributes
   */
  @javax.annotation.Nullable
  public List getSourceAttributes() {
    return sourceAttributes;
  }

  public void setSourceAttributes(List sourceAttributes) {
    this.sourceAttributes = sourceAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexField indexField = (IndexField) o;
    return Objects.equals(this.indexFieldName, indexField.indexFieldName) &&
        Objects.equals(this.indexFieldType, indexField.indexFieldType) &&
        Objects.equals(this.uintOptions, indexField.uintOptions) &&
        Objects.equals(this.literalOptions, indexField.literalOptions) &&
        Objects.equals(this.textOptions, indexField.textOptions) &&
        Objects.equals(this.sourceAttributes, indexField.sourceAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexFieldName, indexFieldType, uintOptions, literalOptions, textOptions, sourceAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexField {\n");
    sb.append("    indexFieldName: ").append(toIndentedString(indexFieldName)).append("\n");
    sb.append("    indexFieldType: ").append(toIndentedString(indexFieldType)).append("\n");
    sb.append("    uintOptions: ").append(toIndentedString(uintOptions)).append("\n");
    sb.append("    literalOptions: ").append(toIndentedString(literalOptions)).append("\n");
    sb.append("    textOptions: ").append(toIndentedString(textOptions)).append("\n");
    sb.append("    sourceAttributes: ").append(toIndentedString(sourceAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IndexFieldName");
    openapiFields.add("IndexFieldType");
    openapiFields.add("UIntOptions");
    openapiFields.add("LiteralOptions");
    openapiFields.add("TextOptions");
    openapiFields.add("SourceAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IndexFieldName");
    openapiRequiredFields.add("IndexFieldType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexField is not found in the empty JSON string", IndexField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IndexField.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `IndexFieldName`
      String.validateJsonElement(jsonObj.get("IndexFieldName"));
      // validate the required field `IndexFieldType`
      IndexFieldType.validateJsonElement(jsonObj.get("IndexFieldType"));
      // validate the optional field `UIntOptions`
      if (jsonObj.get("UIntOptions") != null && !jsonObj.get("UIntOptions").isJsonNull()) {
        GETDefineIndexFieldIndexFieldParameterUIntOptions.validateJsonElement(jsonObj.get("UIntOptions"));
      }
      // validate the optional field `LiteralOptions`
      if (jsonObj.get("LiteralOptions") != null && !jsonObj.get("LiteralOptions").isJsonNull()) {
        GETDefineIndexFieldIndexFieldParameterLiteralOptions.validateJsonElement(jsonObj.get("LiteralOptions"));
      }
      // validate the optional field `TextOptions`
      if (jsonObj.get("TextOptions") != null && !jsonObj.get("TextOptions").isJsonNull()) {
        GETDefineIndexFieldIndexFieldParameterTextOptions.validateJsonElement(jsonObj.get("TextOptions"));
      }
      // validate the optional field `SourceAttributes`
      if (jsonObj.get("SourceAttributes") != null && !jsonObj.get("SourceAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SourceAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexField.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexField>() {
           @Override
           public void write(JsonWriter out, IndexField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexField
   * @throws IOException if the JSON string is invalid with respect to IndexField
   */
  public static IndexField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexField.class);
  }

  /**
   * Convert an instance of IndexField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

