/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseException.h"
#include "OAICreateDomainRequest.h"
#include "OAICreateDomainResponse.h"
#include "OAIDefineIndexFieldRequest.h"
#include "OAIDefineIndexFieldResponse.h"
#include "OAIDefineRankExpressionRequest.h"
#include "OAIDefineRankExpressionResponse.h"
#include "OAIDeleteDomainRequest.h"
#include "OAIDeleteDomainResponse.h"
#include "OAIDeleteIndexFieldRequest.h"
#include "OAIDeleteIndexFieldResponse.h"
#include "OAIDeleteRankExpressionRequest.h"
#include "OAIDeleteRankExpressionResponse.h"
#include "OAIDescribeAvailabilityOptionsRequest.h"
#include "OAIDescribeAvailabilityOptionsResponse.h"
#include "OAIDescribeDefaultSearchFieldRequest.h"
#include "OAIDescribeDefaultSearchFieldResponse.h"
#include "OAIDescribeDomainsRequest.h"
#include "OAIDescribeDomainsResponse.h"
#include "OAIDescribeIndexFieldsRequest.h"
#include "OAIDescribeIndexFieldsResponse.h"
#include "OAIDescribeRankExpressionsRequest.h"
#include "OAIDescribeRankExpressionsResponse.h"
#include "OAIDescribeServiceAccessPoliciesRequest.h"
#include "OAIDescribeServiceAccessPoliciesResponse.h"
#include "OAIDescribeStemmingOptionsRequest.h"
#include "OAIDescribeStemmingOptionsResponse.h"
#include "OAIDescribeStopwordOptionsRequest.h"
#include "OAIDescribeStopwordOptionsResponse.h"
#include "OAIDescribeSynonymOptionsRequest.h"
#include "OAIDescribeSynonymOptionsResponse.h"
#include "OAIGET_DefineIndexField_IndexField_parameter.h"
#include "OAIGET_DefineRankExpression_RankExpression_parameter.h"
#include "OAIIndexDocumentsRequest.h"
#include "OAIIndexDocumentsResponse.h"
#include "OAIObject.h"
#include "OAIUpdateAvailabilityOptionsRequest.h"
#include "OAIUpdateAvailabilityOptionsResponse.h"
#include "OAIUpdateDefaultSearchFieldRequest.h"
#include "OAIUpdateDefaultSearchFieldResponse.h"
#include "OAIUpdateServiceAccessPoliciesRequest.h"
#include "OAIUpdateServiceAccessPoliciesResponse.h"
#include "OAIUpdateStemmingOptionsRequest.h"
#include "OAIUpdateStemmingOptionsResponse.h"
#include "OAIUpdateStopwordOptionsRequest.h"
#include "OAIUpdateStopwordOptionsResponse.h"
#include "OAIUpdateSynonymOptionsRequest.h"
#include "OAIUpdateSynonymOptionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateDomain(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  index_field OAIGET_DefineIndexField_IndexField_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDefineIndexField(const QString &domain_name, const OAIGET_DefineIndexField_IndexField_parameter &index_field, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  rank_expression OAIGET_DefineRankExpression_RankExpression_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDefineRankExpression(const QString &domain_name, const OAIGET_DefineRankExpression_RankExpression_parameter &rank_expression, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteDomain(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  index_field_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteIndexField(const QString &domain_name, const QString &index_field_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  rank_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteRankExpression(const QString &domain_name, const QString &rank_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeAvailabilityOptions(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeDefaultSearchField(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  domain_names QList<QString> [optional]
    */
    virtual void gETDescribeDomains(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &domain_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  field_names QList<QString> [optional]
    */
    virtual void gETDescribeIndexFields(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &field_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  rank_names QList<QString> [optional]
    */
    virtual void gETDescribeRankExpressions(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &rank_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeServiceAccessPolicies(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeStemmingOptions(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeStopwordOptions(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeSynonymOptions(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETIndexDocuments(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  multi_az bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateAvailabilityOptions(const QString &domain_name, const bool &multi_az, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  default_search_field QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateDefaultSearchField(const QString &domain_name, const QString &default_search_field, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  access_policies QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateServiceAccessPolicies(const QString &domain_name, const QString &access_policies, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  stems QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateStemmingOptions(const QString &domain_name, const QString &stems, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  stopwords QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateStopwordOptions(const QString &domain_name, const QString &stopwords, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  synonyms QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateSynonymOptions(const QString &domain_name, const QString &synonyms, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_domain_request OAICreateDomainRequest [optional]
    */
    virtual void pOSTCreateDomain(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateDomainRequest> &oai_create_domain_request = ::OpenAPI::OptionalParam<OAICreateDomainRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_define_index_field_request OAIDefineIndexFieldRequest [optional]
    */
    virtual void pOSTDefineIndexField(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDefineIndexFieldRequest> &oai_define_index_field_request = ::OpenAPI::OptionalParam<OAIDefineIndexFieldRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_define_rank_expression_request OAIDefineRankExpressionRequest [optional]
    */
    virtual void pOSTDefineRankExpression(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDefineRankExpressionRequest> &oai_define_rank_expression_request = ::OpenAPI::OptionalParam<OAIDefineRankExpressionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_domain_request OAIDeleteDomainRequest [optional]
    */
    virtual void pOSTDeleteDomain(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteDomainRequest> &oai_delete_domain_request = ::OpenAPI::OptionalParam<OAIDeleteDomainRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_index_field_request OAIDeleteIndexFieldRequest [optional]
    */
    virtual void pOSTDeleteIndexField(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteIndexFieldRequest> &oai_delete_index_field_request = ::OpenAPI::OptionalParam<OAIDeleteIndexFieldRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_rank_expression_request OAIDeleteRankExpressionRequest [optional]
    */
    virtual void pOSTDeleteRankExpression(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteRankExpressionRequest> &oai_delete_rank_expression_request = ::OpenAPI::OptionalParam<OAIDeleteRankExpressionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_availability_options_request OAIDescribeAvailabilityOptionsRequest [optional]
    */
    virtual void pOSTDescribeAvailabilityOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAvailabilityOptionsRequest> &oai_describe_availability_options_request = ::OpenAPI::OptionalParam<OAIDescribeAvailabilityOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_default_search_field_request OAIDescribeDefaultSearchFieldRequest [optional]
    */
    virtual void pOSTDescribeDefaultSearchField(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDefaultSearchFieldRequest> &oai_describe_default_search_field_request = ::OpenAPI::OptionalParam<OAIDescribeDefaultSearchFieldRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_domains_request OAIDescribeDomainsRequest [optional]
    */
    virtual void pOSTDescribeDomains(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDomainsRequest> &oai_describe_domains_request = ::OpenAPI::OptionalParam<OAIDescribeDomainsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_index_fields_request OAIDescribeIndexFieldsRequest [optional]
    */
    virtual void pOSTDescribeIndexFields(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeIndexFieldsRequest> &oai_describe_index_fields_request = ::OpenAPI::OptionalParam<OAIDescribeIndexFieldsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_rank_expressions_request OAIDescribeRankExpressionsRequest [optional]
    */
    virtual void pOSTDescribeRankExpressions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeRankExpressionsRequest> &oai_describe_rank_expressions_request = ::OpenAPI::OptionalParam<OAIDescribeRankExpressionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_service_access_policies_request OAIDescribeServiceAccessPoliciesRequest [optional]
    */
    virtual void pOSTDescribeServiceAccessPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeServiceAccessPoliciesRequest> &oai_describe_service_access_policies_request = ::OpenAPI::OptionalParam<OAIDescribeServiceAccessPoliciesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_stemming_options_request OAIDescribeStemmingOptionsRequest [optional]
    */
    virtual void pOSTDescribeStemmingOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStemmingOptionsRequest> &oai_describe_stemming_options_request = ::OpenAPI::OptionalParam<OAIDescribeStemmingOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_stopword_options_request OAIDescribeStopwordOptionsRequest [optional]
    */
    virtual void pOSTDescribeStopwordOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStopwordOptionsRequest> &oai_describe_stopword_options_request = ::OpenAPI::OptionalParam<OAIDescribeStopwordOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_synonym_options_request OAIDescribeSynonymOptionsRequest [optional]
    */
    virtual void pOSTDescribeSynonymOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeSynonymOptionsRequest> &oai_describe_synonym_options_request = ::OpenAPI::OptionalParam<OAIDescribeSynonymOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_index_documents_request OAIIndexDocumentsRequest [optional]
    */
    virtual void pOSTIndexDocuments(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIndexDocumentsRequest> &oai_index_documents_request = ::OpenAPI::OptionalParam<OAIIndexDocumentsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_availability_options_request OAIUpdateAvailabilityOptionsRequest [optional]
    */
    virtual void pOSTUpdateAvailabilityOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateAvailabilityOptionsRequest> &oai_update_availability_options_request = ::OpenAPI::OptionalParam<OAIUpdateAvailabilityOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_default_search_field_request OAIUpdateDefaultSearchFieldRequest [optional]
    */
    virtual void pOSTUpdateDefaultSearchField(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateDefaultSearchFieldRequest> &oai_update_default_search_field_request = ::OpenAPI::OptionalParam<OAIUpdateDefaultSearchFieldRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_service_access_policies_request OAIUpdateServiceAccessPoliciesRequest [optional]
    */
    virtual void pOSTUpdateServiceAccessPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateServiceAccessPoliciesRequest> &oai_update_service_access_policies_request = ::OpenAPI::OptionalParam<OAIUpdateServiceAccessPoliciesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_stemming_options_request OAIUpdateStemmingOptionsRequest [optional]
    */
    virtual void pOSTUpdateStemmingOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateStemmingOptionsRequest> &oai_update_stemming_options_request = ::OpenAPI::OptionalParam<OAIUpdateStemmingOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_stopword_options_request OAIUpdateStopwordOptionsRequest [optional]
    */
    virtual void pOSTUpdateStopwordOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateStopwordOptionsRequest> &oai_update_stopword_options_request = ::OpenAPI::OptionalParam<OAIUpdateStopwordOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_synonym_options_request OAIUpdateSynonymOptionsRequest [optional]
    */
    virtual void pOSTUpdateSynonymOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateSynonymOptionsRequest> &oai_update_synonym_options_request = ::OpenAPI::OptionalParam<OAIUpdateSynonymOptionsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETCreateDomainCallback(OAIHttpRequestWorker *worker);
    void gETDefineIndexFieldCallback(OAIHttpRequestWorker *worker);
    void gETDefineRankExpressionCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDomainCallback(OAIHttpRequestWorker *worker);
    void gETDeleteIndexFieldCallback(OAIHttpRequestWorker *worker);
    void gETDeleteRankExpressionCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAvailabilityOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDefaultSearchFieldCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDomainsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeIndexFieldsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeRankExpressionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeServiceAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStemmingOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStopwordOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeSynonymOptionsCallback(OAIHttpRequestWorker *worker);
    void gETIndexDocumentsCallback(OAIHttpRequestWorker *worker);
    void gETUpdateAvailabilityOptionsCallback(OAIHttpRequestWorker *worker);
    void gETUpdateDefaultSearchFieldCallback(OAIHttpRequestWorker *worker);
    void gETUpdateServiceAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void gETUpdateStemmingOptionsCallback(OAIHttpRequestWorker *worker);
    void gETUpdateStopwordOptionsCallback(OAIHttpRequestWorker *worker);
    void gETUpdateSynonymOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateDomainCallback(OAIHttpRequestWorker *worker);
    void pOSTDefineIndexFieldCallback(OAIHttpRequestWorker *worker);
    void pOSTDefineRankExpressionCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDomainCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteIndexFieldCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteRankExpressionCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAvailabilityOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDefaultSearchFieldCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDomainsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeIndexFieldsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeRankExpressionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeServiceAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStemmingOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStopwordOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeSynonymOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTIndexDocumentsCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateAvailabilityOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateDefaultSearchFieldCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateServiceAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateStemmingOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateStopwordOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateSynonymOptionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETCreateDomainSignal(OAICreateDomainResponse summary);
    void gETDefineIndexFieldSignal(OAIDefineIndexFieldResponse summary);
    void gETDefineRankExpressionSignal(OAIDefineRankExpressionResponse summary);
    void gETDeleteDomainSignal(OAIDeleteDomainResponse summary);
    void gETDeleteIndexFieldSignal(OAIDeleteIndexFieldResponse summary);
    void gETDeleteRankExpressionSignal(OAIDeleteRankExpressionResponse summary);
    void gETDescribeAvailabilityOptionsSignal(OAIDescribeAvailabilityOptionsResponse summary);
    void gETDescribeDefaultSearchFieldSignal(OAIDescribeDefaultSearchFieldResponse summary);
    void gETDescribeDomainsSignal(OAIDescribeDomainsResponse summary);
    void gETDescribeIndexFieldsSignal(OAIDescribeIndexFieldsResponse summary);
    void gETDescribeRankExpressionsSignal(OAIDescribeRankExpressionsResponse summary);
    void gETDescribeServiceAccessPoliciesSignal(OAIDescribeServiceAccessPoliciesResponse summary);
    void gETDescribeStemmingOptionsSignal(OAIDescribeStemmingOptionsResponse summary);
    void gETDescribeStopwordOptionsSignal(OAIDescribeStopwordOptionsResponse summary);
    void gETDescribeSynonymOptionsSignal(OAIDescribeSynonymOptionsResponse summary);
    void gETIndexDocumentsSignal(OAIIndexDocumentsResponse summary);
    void gETUpdateAvailabilityOptionsSignal(OAIUpdateAvailabilityOptionsResponse summary);
    void gETUpdateDefaultSearchFieldSignal(OAIUpdateDefaultSearchFieldResponse summary);
    void gETUpdateServiceAccessPoliciesSignal(OAIUpdateServiceAccessPoliciesResponse summary);
    void gETUpdateStemmingOptionsSignal(OAIUpdateStemmingOptionsResponse summary);
    void gETUpdateStopwordOptionsSignal(OAIUpdateStopwordOptionsResponse summary);
    void gETUpdateSynonymOptionsSignal(OAIUpdateSynonymOptionsResponse summary);
    void pOSTCreateDomainSignal(OAICreateDomainResponse summary);
    void pOSTDefineIndexFieldSignal(OAIDefineIndexFieldResponse summary);
    void pOSTDefineRankExpressionSignal(OAIDefineRankExpressionResponse summary);
    void pOSTDeleteDomainSignal(OAIDeleteDomainResponse summary);
    void pOSTDeleteIndexFieldSignal(OAIDeleteIndexFieldResponse summary);
    void pOSTDeleteRankExpressionSignal(OAIDeleteRankExpressionResponse summary);
    void pOSTDescribeAvailabilityOptionsSignal(OAIDescribeAvailabilityOptionsResponse summary);
    void pOSTDescribeDefaultSearchFieldSignal(OAIDescribeDefaultSearchFieldResponse summary);
    void pOSTDescribeDomainsSignal(OAIDescribeDomainsResponse summary);
    void pOSTDescribeIndexFieldsSignal(OAIDescribeIndexFieldsResponse summary);
    void pOSTDescribeRankExpressionsSignal(OAIDescribeRankExpressionsResponse summary);
    void pOSTDescribeServiceAccessPoliciesSignal(OAIDescribeServiceAccessPoliciesResponse summary);
    void pOSTDescribeStemmingOptionsSignal(OAIDescribeStemmingOptionsResponse summary);
    void pOSTDescribeStopwordOptionsSignal(OAIDescribeStopwordOptionsResponse summary);
    void pOSTDescribeSynonymOptionsSignal(OAIDescribeSynonymOptionsResponse summary);
    void pOSTIndexDocumentsSignal(OAIIndexDocumentsResponse summary);
    void pOSTUpdateAvailabilityOptionsSignal(OAIUpdateAvailabilityOptionsResponse summary);
    void pOSTUpdateDefaultSearchFieldSignal(OAIUpdateDefaultSearchFieldResponse summary);
    void pOSTUpdateServiceAccessPoliciesSignal(OAIUpdateServiceAccessPoliciesResponse summary);
    void pOSTUpdateStemmingOptionsSignal(OAIUpdateStemmingOptionsResponse summary);
    void pOSTUpdateStopwordOptionsSignal(OAIUpdateStopwordOptionsResponse summary);
    void pOSTUpdateSynonymOptionsSignal(OAIUpdateSynonymOptionsResponse summary);


    void gETCreateDomainSignalFull(OAIHttpRequestWorker *worker, OAICreateDomainResponse summary);
    void gETDefineIndexFieldSignalFull(OAIHttpRequestWorker *worker, OAIDefineIndexFieldResponse summary);
    void gETDefineRankExpressionSignalFull(OAIHttpRequestWorker *worker, OAIDefineRankExpressionResponse summary);
    void gETDeleteDomainSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDomainResponse summary);
    void gETDeleteIndexFieldSignalFull(OAIHttpRequestWorker *worker, OAIDeleteIndexFieldResponse summary);
    void gETDeleteRankExpressionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRankExpressionResponse summary);
    void gETDescribeAvailabilityOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAvailabilityOptionsResponse summary);
    void gETDescribeDefaultSearchFieldSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDefaultSearchFieldResponse summary);
    void gETDescribeDomainsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDomainsResponse summary);
    void gETDescribeIndexFieldsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeIndexFieldsResponse summary);
    void gETDescribeRankExpressionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeRankExpressionsResponse summary);
    void gETDescribeServiceAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeServiceAccessPoliciesResponse summary);
    void gETDescribeStemmingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStemmingOptionsResponse summary);
    void gETDescribeStopwordOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStopwordOptionsResponse summary);
    void gETDescribeSynonymOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSynonymOptionsResponse summary);
    void gETIndexDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIIndexDocumentsResponse summary);
    void gETUpdateAvailabilityOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAvailabilityOptionsResponse summary);
    void gETUpdateDefaultSearchFieldSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDefaultSearchFieldResponse summary);
    void gETUpdateServiceAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateServiceAccessPoliciesResponse summary);
    void gETUpdateStemmingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStemmingOptionsResponse summary);
    void gETUpdateStopwordOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStopwordOptionsResponse summary);
    void gETUpdateSynonymOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSynonymOptionsResponse summary);
    void pOSTCreateDomainSignalFull(OAIHttpRequestWorker *worker, OAICreateDomainResponse summary);
    void pOSTDefineIndexFieldSignalFull(OAIHttpRequestWorker *worker, OAIDefineIndexFieldResponse summary);
    void pOSTDefineRankExpressionSignalFull(OAIHttpRequestWorker *worker, OAIDefineRankExpressionResponse summary);
    void pOSTDeleteDomainSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDomainResponse summary);
    void pOSTDeleteIndexFieldSignalFull(OAIHttpRequestWorker *worker, OAIDeleteIndexFieldResponse summary);
    void pOSTDeleteRankExpressionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRankExpressionResponse summary);
    void pOSTDescribeAvailabilityOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAvailabilityOptionsResponse summary);
    void pOSTDescribeDefaultSearchFieldSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDefaultSearchFieldResponse summary);
    void pOSTDescribeDomainsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDomainsResponse summary);
    void pOSTDescribeIndexFieldsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeIndexFieldsResponse summary);
    void pOSTDescribeRankExpressionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeRankExpressionsResponse summary);
    void pOSTDescribeServiceAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeServiceAccessPoliciesResponse summary);
    void pOSTDescribeStemmingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStemmingOptionsResponse summary);
    void pOSTDescribeStopwordOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStopwordOptionsResponse summary);
    void pOSTDescribeSynonymOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSynonymOptionsResponse summary);
    void pOSTIndexDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIIndexDocumentsResponse summary);
    void pOSTUpdateAvailabilityOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAvailabilityOptionsResponse summary);
    void pOSTUpdateDefaultSearchFieldSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDefaultSearchFieldResponse summary);
    void pOSTUpdateServiceAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateServiceAccessPoliciesResponse summary);
    void pOSTUpdateStemmingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStemmingOptionsResponse summary);
    void pOSTUpdateStopwordOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStopwordOptionsResponse summary);
    void pOSTUpdateSynonymOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSynonymOptionsResponse summary);

    Q_DECL_DEPRECATED_X("Use gETCreateDomainSignalError() instead")
    void gETCreateDomainSignalE(OAICreateDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDomainSignalError(OAICreateDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineIndexFieldSignalError() instead")
    void gETDefineIndexFieldSignalE(OAIDefineIndexFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineIndexFieldSignalError(OAIDefineIndexFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineRankExpressionSignalError() instead")
    void gETDefineRankExpressionSignalE(OAIDefineRankExpressionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineRankExpressionSignalError(OAIDefineRankExpressionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDomainSignalError() instead")
    void gETDeleteDomainSignalE(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDomainSignalError(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteIndexFieldSignalError() instead")
    void gETDeleteIndexFieldSignalE(OAIDeleteIndexFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteIndexFieldSignalError(OAIDeleteIndexFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteRankExpressionSignalError() instead")
    void gETDeleteRankExpressionSignalE(OAIDeleteRankExpressionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteRankExpressionSignalError(OAIDeleteRankExpressionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAvailabilityOptionsSignalError() instead")
    void gETDescribeAvailabilityOptionsSignalE(OAIDescribeAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAvailabilityOptionsSignalError(OAIDescribeAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDefaultSearchFieldSignalError() instead")
    void gETDescribeDefaultSearchFieldSignalE(OAIDescribeDefaultSearchFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDefaultSearchFieldSignalError(OAIDescribeDefaultSearchFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDomainsSignalError() instead")
    void gETDescribeDomainsSignalE(OAIDescribeDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDomainsSignalError(OAIDescribeDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeIndexFieldsSignalError() instead")
    void gETDescribeIndexFieldsSignalE(OAIDescribeIndexFieldsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeIndexFieldsSignalError(OAIDescribeIndexFieldsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeRankExpressionsSignalError() instead")
    void gETDescribeRankExpressionsSignalE(OAIDescribeRankExpressionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeRankExpressionsSignalError(OAIDescribeRankExpressionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeServiceAccessPoliciesSignalError() instead")
    void gETDescribeServiceAccessPoliciesSignalE(OAIDescribeServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeServiceAccessPoliciesSignalError(OAIDescribeServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStemmingOptionsSignalError() instead")
    void gETDescribeStemmingOptionsSignalE(OAIDescribeStemmingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStemmingOptionsSignalError(OAIDescribeStemmingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStopwordOptionsSignalError() instead")
    void gETDescribeStopwordOptionsSignalE(OAIDescribeStopwordOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStopwordOptionsSignalError(OAIDescribeStopwordOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSynonymOptionsSignalError() instead")
    void gETDescribeSynonymOptionsSignalE(OAIDescribeSynonymOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSynonymOptionsSignalError(OAIDescribeSynonymOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETIndexDocumentsSignalError() instead")
    void gETIndexDocumentsSignalE(OAIIndexDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETIndexDocumentsSignalError(OAIIndexDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateAvailabilityOptionsSignalError() instead")
    void gETUpdateAvailabilityOptionsSignalE(OAIUpdateAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateAvailabilityOptionsSignalError(OAIUpdateAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateDefaultSearchFieldSignalError() instead")
    void gETUpdateDefaultSearchFieldSignalE(OAIUpdateDefaultSearchFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateDefaultSearchFieldSignalError(OAIUpdateDefaultSearchFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateServiceAccessPoliciesSignalError() instead")
    void gETUpdateServiceAccessPoliciesSignalE(OAIUpdateServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateServiceAccessPoliciesSignalError(OAIUpdateServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStemmingOptionsSignalError() instead")
    void gETUpdateStemmingOptionsSignalE(OAIUpdateStemmingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStemmingOptionsSignalError(OAIUpdateStemmingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStopwordOptionsSignalError() instead")
    void gETUpdateStopwordOptionsSignalE(OAIUpdateStopwordOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStopwordOptionsSignalError(OAIUpdateStopwordOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateSynonymOptionsSignalError() instead")
    void gETUpdateSynonymOptionsSignalE(OAIUpdateSynonymOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateSynonymOptionsSignalError(OAIUpdateSynonymOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDomainSignalError() instead")
    void pOSTCreateDomainSignalE(OAICreateDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDomainSignalError(OAICreateDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineIndexFieldSignalError() instead")
    void pOSTDefineIndexFieldSignalE(OAIDefineIndexFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineIndexFieldSignalError(OAIDefineIndexFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineRankExpressionSignalError() instead")
    void pOSTDefineRankExpressionSignalE(OAIDefineRankExpressionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineRankExpressionSignalError(OAIDefineRankExpressionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDomainSignalError() instead")
    void pOSTDeleteDomainSignalE(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDomainSignalError(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteIndexFieldSignalError() instead")
    void pOSTDeleteIndexFieldSignalE(OAIDeleteIndexFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteIndexFieldSignalError(OAIDeleteIndexFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteRankExpressionSignalError() instead")
    void pOSTDeleteRankExpressionSignalE(OAIDeleteRankExpressionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteRankExpressionSignalError(OAIDeleteRankExpressionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAvailabilityOptionsSignalError() instead")
    void pOSTDescribeAvailabilityOptionsSignalE(OAIDescribeAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAvailabilityOptionsSignalError(OAIDescribeAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDefaultSearchFieldSignalError() instead")
    void pOSTDescribeDefaultSearchFieldSignalE(OAIDescribeDefaultSearchFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDefaultSearchFieldSignalError(OAIDescribeDefaultSearchFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDomainsSignalError() instead")
    void pOSTDescribeDomainsSignalE(OAIDescribeDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDomainsSignalError(OAIDescribeDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeIndexFieldsSignalError() instead")
    void pOSTDescribeIndexFieldsSignalE(OAIDescribeIndexFieldsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeIndexFieldsSignalError(OAIDescribeIndexFieldsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeRankExpressionsSignalError() instead")
    void pOSTDescribeRankExpressionsSignalE(OAIDescribeRankExpressionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeRankExpressionsSignalError(OAIDescribeRankExpressionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeServiceAccessPoliciesSignalError() instead")
    void pOSTDescribeServiceAccessPoliciesSignalE(OAIDescribeServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeServiceAccessPoliciesSignalError(OAIDescribeServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStemmingOptionsSignalError() instead")
    void pOSTDescribeStemmingOptionsSignalE(OAIDescribeStemmingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStemmingOptionsSignalError(OAIDescribeStemmingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStopwordOptionsSignalError() instead")
    void pOSTDescribeStopwordOptionsSignalE(OAIDescribeStopwordOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStopwordOptionsSignalError(OAIDescribeStopwordOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSynonymOptionsSignalError() instead")
    void pOSTDescribeSynonymOptionsSignalE(OAIDescribeSynonymOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSynonymOptionsSignalError(OAIDescribeSynonymOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTIndexDocumentsSignalError() instead")
    void pOSTIndexDocumentsSignalE(OAIIndexDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTIndexDocumentsSignalError(OAIIndexDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateAvailabilityOptionsSignalError() instead")
    void pOSTUpdateAvailabilityOptionsSignalE(OAIUpdateAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateAvailabilityOptionsSignalError(OAIUpdateAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateDefaultSearchFieldSignalError() instead")
    void pOSTUpdateDefaultSearchFieldSignalE(OAIUpdateDefaultSearchFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateDefaultSearchFieldSignalError(OAIUpdateDefaultSearchFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateServiceAccessPoliciesSignalError() instead")
    void pOSTUpdateServiceAccessPoliciesSignalE(OAIUpdateServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateServiceAccessPoliciesSignalError(OAIUpdateServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStemmingOptionsSignalError() instead")
    void pOSTUpdateStemmingOptionsSignalE(OAIUpdateStemmingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStemmingOptionsSignalError(OAIUpdateStemmingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStopwordOptionsSignalError() instead")
    void pOSTUpdateStopwordOptionsSignalE(OAIUpdateStopwordOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStopwordOptionsSignalError(OAIUpdateStopwordOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateSynonymOptionsSignalError() instead")
    void pOSTUpdateSynonymOptionsSignalE(OAIUpdateSynonymOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateSynonymOptionsSignalError(OAIUpdateSynonymOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETCreateDomainSignalErrorFull() instead")
    void gETCreateDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineIndexFieldSignalErrorFull() instead")
    void gETDefineIndexFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineIndexFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineRankExpressionSignalErrorFull() instead")
    void gETDefineRankExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineRankExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDomainSignalErrorFull() instead")
    void gETDeleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteIndexFieldSignalErrorFull() instead")
    void gETDeleteIndexFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteIndexFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteRankExpressionSignalErrorFull() instead")
    void gETDeleteRankExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteRankExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAvailabilityOptionsSignalErrorFull() instead")
    void gETDescribeAvailabilityOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAvailabilityOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDefaultSearchFieldSignalErrorFull() instead")
    void gETDescribeDefaultSearchFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDefaultSearchFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDomainsSignalErrorFull() instead")
    void gETDescribeDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeIndexFieldsSignalErrorFull() instead")
    void gETDescribeIndexFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeIndexFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeRankExpressionsSignalErrorFull() instead")
    void gETDescribeRankExpressionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeRankExpressionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeServiceAccessPoliciesSignalErrorFull() instead")
    void gETDescribeServiceAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeServiceAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStemmingOptionsSignalErrorFull() instead")
    void gETDescribeStemmingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStemmingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStopwordOptionsSignalErrorFull() instead")
    void gETDescribeStopwordOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStopwordOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSynonymOptionsSignalErrorFull() instead")
    void gETDescribeSynonymOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSynonymOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETIndexDocumentsSignalErrorFull() instead")
    void gETIndexDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETIndexDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateAvailabilityOptionsSignalErrorFull() instead")
    void gETUpdateAvailabilityOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateAvailabilityOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateDefaultSearchFieldSignalErrorFull() instead")
    void gETUpdateDefaultSearchFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateDefaultSearchFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateServiceAccessPoliciesSignalErrorFull() instead")
    void gETUpdateServiceAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateServiceAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStemmingOptionsSignalErrorFull() instead")
    void gETUpdateStemmingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStemmingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStopwordOptionsSignalErrorFull() instead")
    void gETUpdateStopwordOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStopwordOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateSynonymOptionsSignalErrorFull() instead")
    void gETUpdateSynonymOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateSynonymOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDomainSignalErrorFull() instead")
    void pOSTCreateDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineIndexFieldSignalErrorFull() instead")
    void pOSTDefineIndexFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineIndexFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineRankExpressionSignalErrorFull() instead")
    void pOSTDefineRankExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineRankExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDomainSignalErrorFull() instead")
    void pOSTDeleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteIndexFieldSignalErrorFull() instead")
    void pOSTDeleteIndexFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteIndexFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteRankExpressionSignalErrorFull() instead")
    void pOSTDeleteRankExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteRankExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAvailabilityOptionsSignalErrorFull() instead")
    void pOSTDescribeAvailabilityOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAvailabilityOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDefaultSearchFieldSignalErrorFull() instead")
    void pOSTDescribeDefaultSearchFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDefaultSearchFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDomainsSignalErrorFull() instead")
    void pOSTDescribeDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeIndexFieldsSignalErrorFull() instead")
    void pOSTDescribeIndexFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeIndexFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeRankExpressionsSignalErrorFull() instead")
    void pOSTDescribeRankExpressionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeRankExpressionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeServiceAccessPoliciesSignalErrorFull() instead")
    void pOSTDescribeServiceAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeServiceAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStemmingOptionsSignalErrorFull() instead")
    void pOSTDescribeStemmingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStemmingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStopwordOptionsSignalErrorFull() instead")
    void pOSTDescribeStopwordOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStopwordOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSynonymOptionsSignalErrorFull() instead")
    void pOSTDescribeSynonymOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSynonymOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTIndexDocumentsSignalErrorFull() instead")
    void pOSTIndexDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTIndexDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateAvailabilityOptionsSignalErrorFull() instead")
    void pOSTUpdateAvailabilityOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateAvailabilityOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateDefaultSearchFieldSignalErrorFull() instead")
    void pOSTUpdateDefaultSearchFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateDefaultSearchFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateServiceAccessPoliciesSignalErrorFull() instead")
    void pOSTUpdateServiceAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateServiceAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStemmingOptionsSignalErrorFull() instead")
    void pOSTUpdateStemmingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStemmingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStopwordOptionsSignalErrorFull() instead")
    void pOSTUpdateStopwordOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStopwordOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateSynonymOptionsSignalErrorFull() instead")
    void pOSTUpdateSynonymOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateSynonymOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
