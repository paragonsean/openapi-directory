/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceDataTrimTitle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceDataTrimTitle::OAISourceDataTrimTitle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceDataTrimTitle::OAISourceDataTrimTitle() {
    this->initializeModel();
}

OAISourceDataTrimTitle::~OAISourceDataTrimTitle() {}

void OAISourceDataTrimTitle::initializeModel() {

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_separator_isSet = false;
    m_separator_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;
}

void OAISourceDataTrimTitle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceDataTrimTitle::fromJsonObject(QJsonObject json) {

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("SourceName")]);
    m_source_name_isSet = !json[QString("SourceName")].isNull() && m_source_name_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_separator_isValid = ::OpenAPI::fromJsonValue(m_separator, json[QString("Separator")]);
    m_separator_isSet = !json[QString("Separator")].isNull() && m_separator_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;
}

QString OAISourceDataTrimTitle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceDataTrimTitle::asJsonObject() const {
    QJsonObject obj;
    if (m_source_name_isSet) {
        obj.insert(QString("SourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_separator_isSet) {
        obj.insert(QString("Separator"), ::OpenAPI::toJsonValue(m_separator));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    return obj;
}

QString OAISourceDataTrimTitle::getSourceName() const {
    return m_source_name;
}
void OAISourceDataTrimTitle::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAISourceDataTrimTitle::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAISourceDataTrimTitle::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAISourceDataTrimTitle::getDefaultValue() const {
    return m_default_value;
}
void OAISourceDataTrimTitle::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAISourceDataTrimTitle::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAISourceDataTrimTitle::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAISourceDataTrimTitle::getSeparator() const {
    return m_separator;
}
void OAISourceDataTrimTitle::setSeparator(const QString &separator) {
    m_separator = separator;
    m_separator_isSet = true;
}

bool OAISourceDataTrimTitle::is_separator_Set() const{
    return m_separator_isSet;
}

bool OAISourceDataTrimTitle::is_separator_Valid() const{
    return m_separator_isValid;
}

QString OAISourceDataTrimTitle::getLanguage() const {
    return m_language;
}
void OAISourceDataTrimTitle::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISourceDataTrimTitle::is_language_Set() const{
    return m_language_isSet;
}

bool OAISourceDataTrimTitle::is_language_Valid() const{
    return m_language_isValid;
}

bool OAISourceDataTrimTitle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceDataTrimTitle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_name_isValid && true;
}

} // namespace OpenAPI
