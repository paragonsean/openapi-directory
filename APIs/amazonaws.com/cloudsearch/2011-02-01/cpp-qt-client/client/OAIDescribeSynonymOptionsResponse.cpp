/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSynonymOptionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSynonymOptionsResponse::OAIDescribeSynonymOptionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSynonymOptionsResponse::OAIDescribeSynonymOptionsResponse() {
    this->initializeModel();
}

OAIDescribeSynonymOptionsResponse::~OAIDescribeSynonymOptionsResponse() {}

void OAIDescribeSynonymOptionsResponse::initializeModel() {

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;
}

void OAIDescribeSynonymOptionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSynonymOptionsResponse::fromJsonObject(QJsonObject json) {

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("Synonyms")]);
    m_synonyms_isSet = !json[QString("Synonyms")].isNull() && m_synonyms_isValid;
}

QString OAIDescribeSynonymOptionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSynonymOptionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_synonyms.isSet()) {
        obj.insert(QString("Synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    return obj;
}

OAISynonymOptionsStatus OAIDescribeSynonymOptionsResponse::getSynonyms() const {
    return m_synonyms;
}
void OAIDescribeSynonymOptionsResponse::setSynonyms(const OAISynonymOptionsStatus &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAIDescribeSynonymOptionsResponse::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAIDescribeSynonymOptionsResponse::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

bool OAIDescribeSynonymOptionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_synonyms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSynonymOptionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_synonyms_isValid && true;
}

} // namespace OpenAPI
