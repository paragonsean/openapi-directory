/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptionStatus::OAIOptionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptionStatus::OAIOptionStatus() {
    this->initializeModel();
}

OAIOptionStatus::~OAIOptionStatus() {}

void OAIOptionStatus::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_update_version_isSet = false;
    m_update_version_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_pending_deletion_isSet = false;
    m_pending_deletion_isValid = false;
}

void OAIOptionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptionStatus::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("UpdateDate")]);
    m_update_date_isSet = !json[QString("UpdateDate")].isNull() && m_update_date_isValid;

    m_update_version_isValid = ::OpenAPI::fromJsonValue(m_update_version, json[QString("UpdateVersion")]);
    m_update_version_isSet = !json[QString("UpdateVersion")].isNull() && m_update_version_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_pending_deletion_isValid = ::OpenAPI::fromJsonValue(m_pending_deletion, json[QString("PendingDeletion")]);
    m_pending_deletion_isSet = !json[QString("PendingDeletion")].isNull() && m_pending_deletion_isValid;
}

QString OAIOptionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("UpdateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_update_version_isSet) {
        obj.insert(QString("UpdateVersion"), ::OpenAPI::toJsonValue(m_update_version));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_pending_deletion_isSet) {
        obj.insert(QString("PendingDeletion"), ::OpenAPI::toJsonValue(m_pending_deletion));
    }
    return obj;
}

QDateTime OAIOptionStatus::getCreationDate() const {
    return m_creation_date;
}
void OAIOptionStatus::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIOptionStatus::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIOptionStatus::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIOptionStatus::getUpdateDate() const {
    return m_update_date;
}
void OAIOptionStatus::setUpdateDate(const QDateTime &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIOptionStatus::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIOptionStatus::is_update_date_Valid() const{
    return m_update_date_isValid;
}

qint32 OAIOptionStatus::getUpdateVersion() const {
    return m_update_version;
}
void OAIOptionStatus::setUpdateVersion(const qint32 &update_version) {
    m_update_version = update_version;
    m_update_version_isSet = true;
}

bool OAIOptionStatus::is_update_version_Set() const{
    return m_update_version_isSet;
}

bool OAIOptionStatus::is_update_version_Valid() const{
    return m_update_version_isValid;
}

OAIOptionState OAIOptionStatus::getState() const {
    return m_state;
}
void OAIOptionStatus::setState(const OAIOptionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOptionStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOptionStatus::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIOptionStatus::getPendingDeletion() const {
    return m_pending_deletion;
}
void OAIOptionStatus::setPendingDeletion(const bool &pending_deletion) {
    m_pending_deletion = pending_deletion;
    m_pending_deletion_isSet = true;
}

bool OAIOptionStatus::is_pending_deletion_Set() const{
    return m_pending_deletion_isSet;
}

bool OAIOptionStatus::is_pending_deletion_Valid() const{
    return m_pending_deletion_isValid;
}

bool OAIOptionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_deletion_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_date_isValid && m_update_date_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
