/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRankExpressionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRankExpressionsResponse::OAIDescribeRankExpressionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRankExpressionsResponse::OAIDescribeRankExpressionsResponse() {
    this->initializeModel();
}

OAIDescribeRankExpressionsResponse::~OAIDescribeRankExpressionsResponse() {}

void OAIDescribeRankExpressionsResponse::initializeModel() {

    m_rank_expressions_isSet = false;
    m_rank_expressions_isValid = false;
}

void OAIDescribeRankExpressionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRankExpressionsResponse::fromJsonObject(QJsonObject json) {

    m_rank_expressions_isValid = ::OpenAPI::fromJsonValue(m_rank_expressions, json[QString("RankExpressions")]);
    m_rank_expressions_isSet = !json[QString("RankExpressions")].isNull() && m_rank_expressions_isValid;
}

QString OAIDescribeRankExpressionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRankExpressionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_rank_expressions.isSet()) {
        obj.insert(QString("RankExpressions"), ::OpenAPI::toJsonValue(m_rank_expressions));
    }
    return obj;
}

QList OAIDescribeRankExpressionsResponse::getRankExpressions() const {
    return m_rank_expressions;
}
void OAIDescribeRankExpressionsResponse::setRankExpressions(const QList &rank_expressions) {
    m_rank_expressions = rank_expressions;
    m_rank_expressions_isSet = true;
}

bool OAIDescribeRankExpressionsResponse::is_rank_expressions_Set() const{
    return m_rank_expressions_isSet;
}

bool OAIDescribeRankExpressionsResponse::is_rank_expressions_Valid() const{
    return m_rank_expressions_isValid;
}

bool OAIDescribeRankExpressionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rank_expressions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRankExpressionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rank_expressions_isValid && true;
}

} // namespace OpenAPI
