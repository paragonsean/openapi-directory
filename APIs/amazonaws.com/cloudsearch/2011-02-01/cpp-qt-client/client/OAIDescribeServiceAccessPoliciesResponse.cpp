/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeServiceAccessPoliciesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeServiceAccessPoliciesResponse::OAIDescribeServiceAccessPoliciesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeServiceAccessPoliciesResponse::OAIDescribeServiceAccessPoliciesResponse() {
    this->initializeModel();
}

OAIDescribeServiceAccessPoliciesResponse::~OAIDescribeServiceAccessPoliciesResponse() {}

void OAIDescribeServiceAccessPoliciesResponse::initializeModel() {

    m_access_policies_isSet = false;
    m_access_policies_isValid = false;
}

void OAIDescribeServiceAccessPoliciesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeServiceAccessPoliciesResponse::fromJsonObject(QJsonObject json) {

    m_access_policies_isValid = ::OpenAPI::fromJsonValue(m_access_policies, json[QString("AccessPolicies")]);
    m_access_policies_isSet = !json[QString("AccessPolicies")].isNull() && m_access_policies_isValid;
}

QString OAIDescribeServiceAccessPoliciesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeServiceAccessPoliciesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policies.isSet()) {
        obj.insert(QString("AccessPolicies"), ::OpenAPI::toJsonValue(m_access_policies));
    }
    return obj;
}

OAIAccessPoliciesStatus OAIDescribeServiceAccessPoliciesResponse::getAccessPolicies() const {
    return m_access_policies;
}
void OAIDescribeServiceAccessPoliciesResponse::setAccessPolicies(const OAIAccessPoliciesStatus &access_policies) {
    m_access_policies = access_policies;
    m_access_policies_isSet = true;
}

bool OAIDescribeServiceAccessPoliciesResponse::is_access_policies_Set() const{
    return m_access_policies_isSet;
}

bool OAIDescribeServiceAccessPoliciesResponse::is_access_policies_Valid() const{
    return m_access_policies_isValid;
}

bool OAIDescribeServiceAccessPoliciesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeServiceAccessPoliciesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_policies_isValid && true;
}

} // namespace OpenAPI
