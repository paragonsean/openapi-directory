/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceAttribute_SourceDataMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceAttribute_SourceDataMap::OAISourceAttribute_SourceDataMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceAttribute_SourceDataMap::OAISourceAttribute_SourceDataMap() {
    this->initializeModel();
}

OAISourceAttribute_SourceDataMap::~OAISourceAttribute_SourceDataMap() {}

void OAISourceAttribute_SourceDataMap::initializeModel() {

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_cases_isSet = false;
    m_cases_isValid = false;
}

void OAISourceAttribute_SourceDataMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceAttribute_SourceDataMap::fromJsonObject(QJsonObject json) {

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("SourceName")]);
    m_source_name_isSet = !json[QString("SourceName")].isNull() && m_source_name_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_cases_isValid = ::OpenAPI::fromJsonValue(m_cases, json[QString("Cases")]);
    m_cases_isSet = !json[QString("Cases")].isNull() && m_cases_isValid;
}

QString OAISourceAttribute_SourceDataMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceAttribute_SourceDataMap::asJsonObject() const {
    QJsonObject obj;
    if (m_source_name_isSet) {
        obj.insert(QString("SourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_cases.isSet()) {
        obj.insert(QString("Cases"), ::OpenAPI::toJsonValue(m_cases));
    }
    return obj;
}

QString OAISourceAttribute_SourceDataMap::getSourceName() const {
    return m_source_name;
}
void OAISourceAttribute_SourceDataMap::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAISourceAttribute_SourceDataMap::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAISourceAttribute_SourceDataMap::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAISourceAttribute_SourceDataMap::getDefaultValue() const {
    return m_default_value;
}
void OAISourceAttribute_SourceDataMap::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAISourceAttribute_SourceDataMap::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAISourceAttribute_SourceDataMap::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QMap OAISourceAttribute_SourceDataMap::getCases() const {
    return m_cases;
}
void OAISourceAttribute_SourceDataMap::setCases(const QMap &cases) {
    m_cases = cases;
    m_cases_isSet = true;
}

bool OAISourceAttribute_SourceDataMap::is_cases_Set() const{
    return m_cases_isSet;
}

bool OAISourceAttribute_SourceDataMap::is_cases_Valid() const{
    return m_cases_isValid;
}

bool OAISourceAttribute_SourceDataMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cases.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceAttribute_SourceDataMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_name_isValid && true;
}

} // namespace OpenAPI
