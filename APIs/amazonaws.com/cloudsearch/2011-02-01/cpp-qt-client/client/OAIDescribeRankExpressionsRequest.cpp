/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRankExpressionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRankExpressionsRequest::OAIDescribeRankExpressionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRankExpressionsRequest::OAIDescribeRankExpressionsRequest() {
    this->initializeModel();
}

OAIDescribeRankExpressionsRequest::~OAIDescribeRankExpressionsRequest() {}

void OAIDescribeRankExpressionsRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_rank_names_isSet = false;
    m_rank_names_isValid = false;
}

void OAIDescribeRankExpressionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRankExpressionsRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_rank_names_isValid = ::OpenAPI::fromJsonValue(m_rank_names, json[QString("RankNames")]);
    m_rank_names_isSet = !json[QString("RankNames")].isNull() && m_rank_names_isValid;
}

QString OAIDescribeRankExpressionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRankExpressionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_rank_names.isSet()) {
        obj.insert(QString("RankNames"), ::OpenAPI::toJsonValue(m_rank_names));
    }
    return obj;
}

QString OAIDescribeRankExpressionsRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDescribeRankExpressionsRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDescribeRankExpressionsRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDescribeRankExpressionsRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIDescribeRankExpressionsRequest::getRankNames() const {
    return m_rank_names;
}
void OAIDescribeRankExpressionsRequest::setRankNames(const QList &rank_names) {
    m_rank_names = rank_names;
    m_rank_names_isSet = true;
}

bool OAIDescribeRankExpressionsRequest::is_rank_names_Set() const{
    return m_rank_names_isSet;
}

bool OAIDescribeRankExpressionsRequest::is_rank_names_Valid() const{
    return m_rank_names_isValid;
}

bool OAIDescribeRankExpressionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRankExpressionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
