/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteIndexFieldRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteIndexFieldRequest::OAIDeleteIndexFieldRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteIndexFieldRequest::OAIDeleteIndexFieldRequest() {
    this->initializeModel();
}

OAIDeleteIndexFieldRequest::~OAIDeleteIndexFieldRequest() {}

void OAIDeleteIndexFieldRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_index_field_name_isSet = false;
    m_index_field_name_isValid = false;
}

void OAIDeleteIndexFieldRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteIndexFieldRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_index_field_name_isValid = ::OpenAPI::fromJsonValue(m_index_field_name, json[QString("IndexFieldName")]);
    m_index_field_name_isSet = !json[QString("IndexFieldName")].isNull() && m_index_field_name_isValid;
}

QString OAIDeleteIndexFieldRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteIndexFieldRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_index_field_name_isSet) {
        obj.insert(QString("IndexFieldName"), ::OpenAPI::toJsonValue(m_index_field_name));
    }
    return obj;
}

QString OAIDeleteIndexFieldRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDeleteIndexFieldRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDeleteIndexFieldRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDeleteIndexFieldRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDeleteIndexFieldRequest::getIndexFieldName() const {
    return m_index_field_name;
}
void OAIDeleteIndexFieldRequest::setIndexFieldName(const QString &index_field_name) {
    m_index_field_name = index_field_name;
    m_index_field_name_isSet = true;
}

bool OAIDeleteIndexFieldRequest::is_index_field_name_Set() const{
    return m_index_field_name_isSet;
}

bool OAIDeleteIndexFieldRequest::is_index_field_name_Valid() const{
    return m_index_field_name_isValid;
}

bool OAIDeleteIndexFieldRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteIndexFieldRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_index_field_name_isValid && true;
}

} // namespace OpenAPI
