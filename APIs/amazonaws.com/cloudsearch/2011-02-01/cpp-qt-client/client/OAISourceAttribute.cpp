/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceAttribute::OAISourceAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceAttribute::OAISourceAttribute() {
    this->initializeModel();
}

OAISourceAttribute::~OAISourceAttribute() {}

void OAISourceAttribute::initializeModel() {

    m_source_data_function_isSet = false;
    m_source_data_function_isValid = false;

    m_source_data_copy_isSet = false;
    m_source_data_copy_isValid = false;

    m_source_data_trim_title_isSet = false;
    m_source_data_trim_title_isValid = false;

    m_source_data_map_isSet = false;
    m_source_data_map_isValid = false;
}

void OAISourceAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceAttribute::fromJsonObject(QJsonObject json) {

    m_source_data_function_isValid = ::OpenAPI::fromJsonValue(m_source_data_function, json[QString("SourceDataFunction")]);
    m_source_data_function_isSet = !json[QString("SourceDataFunction")].isNull() && m_source_data_function_isValid;

    m_source_data_copy_isValid = ::OpenAPI::fromJsonValue(m_source_data_copy, json[QString("SourceDataCopy")]);
    m_source_data_copy_isSet = !json[QString("SourceDataCopy")].isNull() && m_source_data_copy_isValid;

    m_source_data_trim_title_isValid = ::OpenAPI::fromJsonValue(m_source_data_trim_title, json[QString("SourceDataTrimTitle")]);
    m_source_data_trim_title_isSet = !json[QString("SourceDataTrimTitle")].isNull() && m_source_data_trim_title_isValid;

    m_source_data_map_isValid = ::OpenAPI::fromJsonValue(m_source_data_map, json[QString("SourceDataMap")]);
    m_source_data_map_isSet = !json[QString("SourceDataMap")].isNull() && m_source_data_map_isValid;
}

QString OAISourceAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_source_data_function.isSet()) {
        obj.insert(QString("SourceDataFunction"), ::OpenAPI::toJsonValue(m_source_data_function));
    }
    if (m_source_data_copy.isSet()) {
        obj.insert(QString("SourceDataCopy"), ::OpenAPI::toJsonValue(m_source_data_copy));
    }
    if (m_source_data_trim_title.isSet()) {
        obj.insert(QString("SourceDataTrimTitle"), ::OpenAPI::toJsonValue(m_source_data_trim_title));
    }
    if (m_source_data_map.isSet()) {
        obj.insert(QString("SourceDataMap"), ::OpenAPI::toJsonValue(m_source_data_map));
    }
    return obj;
}

OAISourceDataFunction OAISourceAttribute::getSourceDataFunction() const {
    return m_source_data_function;
}
void OAISourceAttribute::setSourceDataFunction(const OAISourceDataFunction &source_data_function) {
    m_source_data_function = source_data_function;
    m_source_data_function_isSet = true;
}

bool OAISourceAttribute::is_source_data_function_Set() const{
    return m_source_data_function_isSet;
}

bool OAISourceAttribute::is_source_data_function_Valid() const{
    return m_source_data_function_isValid;
}

OAISourceAttribute_SourceDataCopy OAISourceAttribute::getSourceDataCopy() const {
    return m_source_data_copy;
}
void OAISourceAttribute::setSourceDataCopy(const OAISourceAttribute_SourceDataCopy &source_data_copy) {
    m_source_data_copy = source_data_copy;
    m_source_data_copy_isSet = true;
}

bool OAISourceAttribute::is_source_data_copy_Set() const{
    return m_source_data_copy_isSet;
}

bool OAISourceAttribute::is_source_data_copy_Valid() const{
    return m_source_data_copy_isValid;
}

OAISourceAttribute_SourceDataTrimTitle OAISourceAttribute::getSourceDataTrimTitle() const {
    return m_source_data_trim_title;
}
void OAISourceAttribute::setSourceDataTrimTitle(const OAISourceAttribute_SourceDataTrimTitle &source_data_trim_title) {
    m_source_data_trim_title = source_data_trim_title;
    m_source_data_trim_title_isSet = true;
}

bool OAISourceAttribute::is_source_data_trim_title_Set() const{
    return m_source_data_trim_title_isSet;
}

bool OAISourceAttribute::is_source_data_trim_title_Valid() const{
    return m_source_data_trim_title_isValid;
}

OAISourceAttribute_SourceDataMap OAISourceAttribute::getSourceDataMap() const {
    return m_source_data_map;
}
void OAISourceAttribute::setSourceDataMap(const OAISourceAttribute_SourceDataMap &source_data_map) {
    m_source_data_map = source_data_map;
    m_source_data_map_isSet = true;
}

bool OAISourceAttribute::is_source_data_map_Set() const{
    return m_source_data_map_isSet;
}

bool OAISourceAttribute::is_source_data_map_Valid() const{
    return m_source_data_map_isValid;
}

bool OAISourceAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_data_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_data_copy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_data_trim_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_data_map.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_data_function_isValid && true;
}

} // namespace OpenAPI
