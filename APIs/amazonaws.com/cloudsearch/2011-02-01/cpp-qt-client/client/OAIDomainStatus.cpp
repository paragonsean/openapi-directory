/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainStatus::OAIDomainStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainStatus::OAIDomainStatus() {
    this->initializeModel();
}

OAIDomainStatus::~OAIDomainStatus() {}

void OAIDomainStatus::initializeModel() {

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_num_searchable_docs_isSet = false;
    m_num_searchable_docs_isValid = false;

    m_doc_service_isSet = false;
    m_doc_service_isValid = false;

    m_search_service_isSet = false;
    m_search_service_isValid = false;

    m_requires_index_documents_isSet = false;
    m_requires_index_documents_isValid = false;

    m_processing_isSet = false;
    m_processing_isValid = false;

    m_search_instance_type_isSet = false;
    m_search_instance_type_isValid = false;

    m_search_partition_count_isSet = false;
    m_search_partition_count_isValid = false;

    m_search_instance_count_isSet = false;
    m_search_instance_count_isValid = false;
}

void OAIDomainStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainStatus::fromJsonObject(QJsonObject json) {

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("Deleted")]);
    m_deleted_isSet = !json[QString("Deleted")].isNull() && m_deleted_isValid;

    m_num_searchable_docs_isValid = ::OpenAPI::fromJsonValue(m_num_searchable_docs, json[QString("NumSearchableDocs")]);
    m_num_searchable_docs_isSet = !json[QString("NumSearchableDocs")].isNull() && m_num_searchable_docs_isValid;

    m_doc_service_isValid = ::OpenAPI::fromJsonValue(m_doc_service, json[QString("DocService")]);
    m_doc_service_isSet = !json[QString("DocService")].isNull() && m_doc_service_isValid;

    m_search_service_isValid = ::OpenAPI::fromJsonValue(m_search_service, json[QString("SearchService")]);
    m_search_service_isSet = !json[QString("SearchService")].isNull() && m_search_service_isValid;

    m_requires_index_documents_isValid = ::OpenAPI::fromJsonValue(m_requires_index_documents, json[QString("RequiresIndexDocuments")]);
    m_requires_index_documents_isSet = !json[QString("RequiresIndexDocuments")].isNull() && m_requires_index_documents_isValid;

    m_processing_isValid = ::OpenAPI::fromJsonValue(m_processing, json[QString("Processing")]);
    m_processing_isSet = !json[QString("Processing")].isNull() && m_processing_isValid;

    m_search_instance_type_isValid = ::OpenAPI::fromJsonValue(m_search_instance_type, json[QString("SearchInstanceType")]);
    m_search_instance_type_isSet = !json[QString("SearchInstanceType")].isNull() && m_search_instance_type_isValid;

    m_search_partition_count_isValid = ::OpenAPI::fromJsonValue(m_search_partition_count, json[QString("SearchPartitionCount")]);
    m_search_partition_count_isSet = !json[QString("SearchPartitionCount")].isNull() && m_search_partition_count_isValid;

    m_search_instance_count_isValid = ::OpenAPI::fromJsonValue(m_search_instance_count, json[QString("SearchInstanceCount")]);
    m_search_instance_count_isSet = !json[QString("SearchInstanceCount")].isNull() && m_search_instance_count_isValid;
}

QString OAIDomainStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("Deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_num_searchable_docs_isSet) {
        obj.insert(QString("NumSearchableDocs"), ::OpenAPI::toJsonValue(m_num_searchable_docs));
    }
    if (m_doc_service.isSet()) {
        obj.insert(QString("DocService"), ::OpenAPI::toJsonValue(m_doc_service));
    }
    if (m_search_service.isSet()) {
        obj.insert(QString("SearchService"), ::OpenAPI::toJsonValue(m_search_service));
    }
    if (m_requires_index_documents_isSet) {
        obj.insert(QString("RequiresIndexDocuments"), ::OpenAPI::toJsonValue(m_requires_index_documents));
    }
    if (m_processing_isSet) {
        obj.insert(QString("Processing"), ::OpenAPI::toJsonValue(m_processing));
    }
    if (m_search_instance_type_isSet) {
        obj.insert(QString("SearchInstanceType"), ::OpenAPI::toJsonValue(m_search_instance_type));
    }
    if (m_search_partition_count_isSet) {
        obj.insert(QString("SearchPartitionCount"), ::OpenAPI::toJsonValue(m_search_partition_count));
    }
    if (m_search_instance_count_isSet) {
        obj.insert(QString("SearchInstanceCount"), ::OpenAPI::toJsonValue(m_search_instance_count));
    }
    return obj;
}

QString OAIDomainStatus::getDomainId() const {
    return m_domain_id;
}
void OAIDomainStatus::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAIDomainStatus::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAIDomainStatus::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

QString OAIDomainStatus::getDomainName() const {
    return m_domain_name;
}
void OAIDomainStatus::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDomainStatus::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDomainStatus::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

bool OAIDomainStatus::getCreated() const {
    return m_created;
}
void OAIDomainStatus::setCreated(const bool &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDomainStatus::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDomainStatus::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIDomainStatus::getDeleted() const {
    return m_deleted;
}
void OAIDomainStatus::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIDomainStatus::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIDomainStatus::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint32 OAIDomainStatus::getNumSearchableDocs() const {
    return m_num_searchable_docs;
}
void OAIDomainStatus::setNumSearchableDocs(const qint32 &num_searchable_docs) {
    m_num_searchable_docs = num_searchable_docs;
    m_num_searchable_docs_isSet = true;
}

bool OAIDomainStatus::is_num_searchable_docs_Set() const{
    return m_num_searchable_docs_isSet;
}

bool OAIDomainStatus::is_num_searchable_docs_Valid() const{
    return m_num_searchable_docs_isValid;
}

OAIDomainStatus_DocService OAIDomainStatus::getDocService() const {
    return m_doc_service;
}
void OAIDomainStatus::setDocService(const OAIDomainStatus_DocService &doc_service) {
    m_doc_service = doc_service;
    m_doc_service_isSet = true;
}

bool OAIDomainStatus::is_doc_service_Set() const{
    return m_doc_service_isSet;
}

bool OAIDomainStatus::is_doc_service_Valid() const{
    return m_doc_service_isValid;
}

OAIDomainStatus_SearchService OAIDomainStatus::getSearchService() const {
    return m_search_service;
}
void OAIDomainStatus::setSearchService(const OAIDomainStatus_SearchService &search_service) {
    m_search_service = search_service;
    m_search_service_isSet = true;
}

bool OAIDomainStatus::is_search_service_Set() const{
    return m_search_service_isSet;
}

bool OAIDomainStatus::is_search_service_Valid() const{
    return m_search_service_isValid;
}

bool OAIDomainStatus::getRequiresIndexDocuments() const {
    return m_requires_index_documents;
}
void OAIDomainStatus::setRequiresIndexDocuments(const bool &requires_index_documents) {
    m_requires_index_documents = requires_index_documents;
    m_requires_index_documents_isSet = true;
}

bool OAIDomainStatus::is_requires_index_documents_Set() const{
    return m_requires_index_documents_isSet;
}

bool OAIDomainStatus::is_requires_index_documents_Valid() const{
    return m_requires_index_documents_isValid;
}

bool OAIDomainStatus::getProcessing() const {
    return m_processing;
}
void OAIDomainStatus::setProcessing(const bool &processing) {
    m_processing = processing;
    m_processing_isSet = true;
}

bool OAIDomainStatus::is_processing_Set() const{
    return m_processing_isSet;
}

bool OAIDomainStatus::is_processing_Valid() const{
    return m_processing_isValid;
}

QString OAIDomainStatus::getSearchInstanceType() const {
    return m_search_instance_type;
}
void OAIDomainStatus::setSearchInstanceType(const QString &search_instance_type) {
    m_search_instance_type = search_instance_type;
    m_search_instance_type_isSet = true;
}

bool OAIDomainStatus::is_search_instance_type_Set() const{
    return m_search_instance_type_isSet;
}

bool OAIDomainStatus::is_search_instance_type_Valid() const{
    return m_search_instance_type_isValid;
}

qint32 OAIDomainStatus::getSearchPartitionCount() const {
    return m_search_partition_count;
}
void OAIDomainStatus::setSearchPartitionCount(const qint32 &search_partition_count) {
    m_search_partition_count = search_partition_count;
    m_search_partition_count_isSet = true;
}

bool OAIDomainStatus::is_search_partition_count_Set() const{
    return m_search_partition_count_isSet;
}

bool OAIDomainStatus::is_search_partition_count_Valid() const{
    return m_search_partition_count_isValid;
}

qint32 OAIDomainStatus::getSearchInstanceCount() const {
    return m_search_instance_count;
}
void OAIDomainStatus::setSearchInstanceCount(const qint32 &search_instance_count) {
    m_search_instance_count = search_instance_count;
    m_search_instance_count_isSet = true;
}

bool OAIDomainStatus::is_search_instance_count_Set() const{
    return m_search_instance_count_isSet;
}

bool OAIDomainStatus::is_search_instance_count_Valid() const{
    return m_search_instance_count_isValid;
}

bool OAIDomainStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_searchable_docs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_index_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_partition_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_id_isValid && m_domain_name_isValid && m_requires_index_documents_isValid && true;
}

} // namespace OpenAPI
