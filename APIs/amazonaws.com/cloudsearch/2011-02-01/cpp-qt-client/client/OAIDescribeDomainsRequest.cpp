/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDomainsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDomainsRequest::OAIDescribeDomainsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDomainsRequest::OAIDescribeDomainsRequest() {
    this->initializeModel();
}

OAIDescribeDomainsRequest::~OAIDescribeDomainsRequest() {}

void OAIDescribeDomainsRequest::initializeModel() {

    m_domain_names_isSet = false;
    m_domain_names_isValid = false;
}

void OAIDescribeDomainsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDomainsRequest::fromJsonObject(QJsonObject json) {

    m_domain_names_isValid = ::OpenAPI::fromJsonValue(m_domain_names, json[QString("DomainNames")]);
    m_domain_names_isSet = !json[QString("DomainNames")].isNull() && m_domain_names_isValid;
}

QString OAIDescribeDomainsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDomainsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_names.isSet()) {
        obj.insert(QString("DomainNames"), ::OpenAPI::toJsonValue(m_domain_names));
    }
    return obj;
}

QList OAIDescribeDomainsRequest::getDomainNames() const {
    return m_domain_names;
}
void OAIDescribeDomainsRequest::setDomainNames(const QList &domain_names) {
    m_domain_names = domain_names;
    m_domain_names_isSet = true;
}

bool OAIDescribeDomainsRequest::is_domain_names_Set() const{
    return m_domain_names_isSet;
}

bool OAIDescribeDomainsRequest::is_domain_names_Valid() const{
    return m_domain_names_isValid;
}

bool OAIDescribeDomainsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDomainsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
