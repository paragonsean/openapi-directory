/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceAttribute_SourceDataTrimTitle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceAttribute_SourceDataTrimTitle::OAISourceAttribute_SourceDataTrimTitle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceAttribute_SourceDataTrimTitle::OAISourceAttribute_SourceDataTrimTitle() {
    this->initializeModel();
}

OAISourceAttribute_SourceDataTrimTitle::~OAISourceAttribute_SourceDataTrimTitle() {}

void OAISourceAttribute_SourceDataTrimTitle::initializeModel() {

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_separator_isSet = false;
    m_separator_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;
}

void OAISourceAttribute_SourceDataTrimTitle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceAttribute_SourceDataTrimTitle::fromJsonObject(QJsonObject json) {

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("SourceName")]);
    m_source_name_isSet = !json[QString("SourceName")].isNull() && m_source_name_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_separator_isValid = ::OpenAPI::fromJsonValue(m_separator, json[QString("Separator")]);
    m_separator_isSet = !json[QString("Separator")].isNull() && m_separator_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;
}

QString OAISourceAttribute_SourceDataTrimTitle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceAttribute_SourceDataTrimTitle::asJsonObject() const {
    QJsonObject obj;
    if (m_source_name_isSet) {
        obj.insert(QString("SourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_separator_isSet) {
        obj.insert(QString("Separator"), ::OpenAPI::toJsonValue(m_separator));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    return obj;
}

QString OAISourceAttribute_SourceDataTrimTitle::getSourceName() const {
    return m_source_name;
}
void OAISourceAttribute_SourceDataTrimTitle::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAISourceAttribute_SourceDataTrimTitle::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAISourceAttribute_SourceDataTrimTitle::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAISourceAttribute_SourceDataTrimTitle::getDefaultValue() const {
    return m_default_value;
}
void OAISourceAttribute_SourceDataTrimTitle::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAISourceAttribute_SourceDataTrimTitle::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAISourceAttribute_SourceDataTrimTitle::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAISourceAttribute_SourceDataTrimTitle::getSeparator() const {
    return m_separator;
}
void OAISourceAttribute_SourceDataTrimTitle::setSeparator(const QString &separator) {
    m_separator = separator;
    m_separator_isSet = true;
}

bool OAISourceAttribute_SourceDataTrimTitle::is_separator_Set() const{
    return m_separator_isSet;
}

bool OAISourceAttribute_SourceDataTrimTitle::is_separator_Valid() const{
    return m_separator_isValid;
}

QString OAISourceAttribute_SourceDataTrimTitle::getLanguage() const {
    return m_language;
}
void OAISourceAttribute_SourceDataTrimTitle::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISourceAttribute_SourceDataTrimTitle::is_language_Set() const{
    return m_language_isSet;
}

bool OAISourceAttribute_SourceDataTrimTitle::is_language_Valid() const{
    return m_language_isValid;
}

bool OAISourceAttribute_SourceDataTrimTitle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceAttribute_SourceDataTrimTitle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_name_isValid && true;
}

} // namespace OpenAPI
