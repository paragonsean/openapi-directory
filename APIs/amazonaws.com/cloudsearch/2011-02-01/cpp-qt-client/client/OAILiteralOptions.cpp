/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiteralOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiteralOptions::OAILiteralOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiteralOptions::OAILiteralOptions() {
    this->initializeModel();
}

OAILiteralOptions::~OAILiteralOptions() {}

void OAILiteralOptions::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_search_enabled_isSet = false;
    m_search_enabled_isValid = false;

    m_facet_enabled_isSet = false;
    m_facet_enabled_isValid = false;

    m_result_enabled_isSet = false;
    m_result_enabled_isValid = false;
}

void OAILiteralOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiteralOptions::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_search_enabled_isValid = ::OpenAPI::fromJsonValue(m_search_enabled, json[QString("SearchEnabled")]);
    m_search_enabled_isSet = !json[QString("SearchEnabled")].isNull() && m_search_enabled_isValid;

    m_facet_enabled_isValid = ::OpenAPI::fromJsonValue(m_facet_enabled, json[QString("FacetEnabled")]);
    m_facet_enabled_isSet = !json[QString("FacetEnabled")].isNull() && m_facet_enabled_isValid;

    m_result_enabled_isValid = ::OpenAPI::fromJsonValue(m_result_enabled, json[QString("ResultEnabled")]);
    m_result_enabled_isSet = !json[QString("ResultEnabled")].isNull() && m_result_enabled_isValid;
}

QString OAILiteralOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiteralOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_search_enabled_isSet) {
        obj.insert(QString("SearchEnabled"), ::OpenAPI::toJsonValue(m_search_enabled));
    }
    if (m_facet_enabled_isSet) {
        obj.insert(QString("FacetEnabled"), ::OpenAPI::toJsonValue(m_facet_enabled));
    }
    if (m_result_enabled_isSet) {
        obj.insert(QString("ResultEnabled"), ::OpenAPI::toJsonValue(m_result_enabled));
    }
    return obj;
}

QString OAILiteralOptions::getDefaultValue() const {
    return m_default_value;
}
void OAILiteralOptions::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAILiteralOptions::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAILiteralOptions::is_default_value_Valid() const{
    return m_default_value_isValid;
}

bool OAILiteralOptions::getSearchEnabled() const {
    return m_search_enabled;
}
void OAILiteralOptions::setSearchEnabled(const bool &search_enabled) {
    m_search_enabled = search_enabled;
    m_search_enabled_isSet = true;
}

bool OAILiteralOptions::is_search_enabled_Set() const{
    return m_search_enabled_isSet;
}

bool OAILiteralOptions::is_search_enabled_Valid() const{
    return m_search_enabled_isValid;
}

bool OAILiteralOptions::getFacetEnabled() const {
    return m_facet_enabled;
}
void OAILiteralOptions::setFacetEnabled(const bool &facet_enabled) {
    m_facet_enabled = facet_enabled;
    m_facet_enabled_isSet = true;
}

bool OAILiteralOptions::is_facet_enabled_Set() const{
    return m_facet_enabled_isSet;
}

bool OAILiteralOptions::is_facet_enabled_Valid() const{
    return m_facet_enabled_isValid;
}

bool OAILiteralOptions::getResultEnabled() const {
    return m_result_enabled;
}
void OAILiteralOptions::setResultEnabled(const bool &result_enabled) {
    m_result_enabled = result_enabled;
    m_result_enabled_isSet = true;
}

bool OAILiteralOptions::is_result_enabled_Set() const{
    return m_result_enabled_isSet;
}

bool OAILiteralOptions::is_result_enabled_Valid() const{
    return m_result_enabled_isValid;
}

bool OAILiteralOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiteralOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
