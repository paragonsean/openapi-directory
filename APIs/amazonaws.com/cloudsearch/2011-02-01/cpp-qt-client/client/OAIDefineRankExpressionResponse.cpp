/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefineRankExpressionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefineRankExpressionResponse::OAIDefineRankExpressionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefineRankExpressionResponse::OAIDefineRankExpressionResponse() {
    this->initializeModel();
}

OAIDefineRankExpressionResponse::~OAIDefineRankExpressionResponse() {}

void OAIDefineRankExpressionResponse::initializeModel() {

    m_rank_expression_isSet = false;
    m_rank_expression_isValid = false;
}

void OAIDefineRankExpressionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefineRankExpressionResponse::fromJsonObject(QJsonObject json) {

    m_rank_expression_isValid = ::OpenAPI::fromJsonValue(m_rank_expression, json[QString("RankExpression")]);
    m_rank_expression_isSet = !json[QString("RankExpression")].isNull() && m_rank_expression_isValid;
}

QString OAIDefineRankExpressionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefineRankExpressionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_rank_expression.isSet()) {
        obj.insert(QString("RankExpression"), ::OpenAPI::toJsonValue(m_rank_expression));
    }
    return obj;
}

OAIRankExpressionStatus OAIDefineRankExpressionResponse::getRankExpression() const {
    return m_rank_expression;
}
void OAIDefineRankExpressionResponse::setRankExpression(const OAIRankExpressionStatus &rank_expression) {
    m_rank_expression = rank_expression;
    m_rank_expression_isSet = true;
}

bool OAIDefineRankExpressionResponse::is_rank_expression_Set() const{
    return m_rank_expression_isSet;
}

bool OAIDefineRankExpressionResponse::is_rank_expression_Valid() const{
    return m_rank_expression_isValid;
}

bool OAIDefineRankExpressionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rank_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefineRankExpressionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rank_expression_isValid && true;
}

} // namespace OpenAPI
