/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDomainsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDomainsResponse::OAIDescribeDomainsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDomainsResponse::OAIDescribeDomainsResponse() {
    this->initializeModel();
}

OAIDescribeDomainsResponse::~OAIDescribeDomainsResponse() {}

void OAIDescribeDomainsResponse::initializeModel() {

    m_domain_status_list_isSet = false;
    m_domain_status_list_isValid = false;
}

void OAIDescribeDomainsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDomainsResponse::fromJsonObject(QJsonObject json) {

    m_domain_status_list_isValid = ::OpenAPI::fromJsonValue(m_domain_status_list, json[QString("DomainStatusList")]);
    m_domain_status_list_isSet = !json[QString("DomainStatusList")].isNull() && m_domain_status_list_isValid;
}

QString OAIDescribeDomainsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDomainsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_status_list.size() > 0) {
        obj.insert(QString("DomainStatusList"), ::OpenAPI::toJsonValue(m_domain_status_list));
    }
    return obj;
}

QList<OAIDomainStatus> OAIDescribeDomainsResponse::getDomainStatusList() const {
    return m_domain_status_list;
}
void OAIDescribeDomainsResponse::setDomainStatusList(const QList<OAIDomainStatus> &domain_status_list) {
    m_domain_status_list = domain_status_list;
    m_domain_status_list_isSet = true;
}

bool OAIDescribeDomainsResponse::is_domain_status_list_Set() const{
    return m_domain_status_list_isSet;
}

bool OAIDescribeDomainsResponse::is_domain_status_list_Valid() const{
    return m_domain_status_list_isValid;
}

bool OAIDescribeDomainsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_status_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDomainsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_status_list_isValid && true;
}

} // namespace OpenAPI
