/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2011-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStopwordOptionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStopwordOptionsResponse::OAIDescribeStopwordOptionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStopwordOptionsResponse::OAIDescribeStopwordOptionsResponse() {
    this->initializeModel();
}

OAIDescribeStopwordOptionsResponse::~OAIDescribeStopwordOptionsResponse() {}

void OAIDescribeStopwordOptionsResponse::initializeModel() {

    m_stopwords_isSet = false;
    m_stopwords_isValid = false;
}

void OAIDescribeStopwordOptionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStopwordOptionsResponse::fromJsonObject(QJsonObject json) {

    m_stopwords_isValid = ::OpenAPI::fromJsonValue(m_stopwords, json[QString("Stopwords")]);
    m_stopwords_isSet = !json[QString("Stopwords")].isNull() && m_stopwords_isValid;
}

QString OAIDescribeStopwordOptionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStopwordOptionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_stopwords.isSet()) {
        obj.insert(QString("Stopwords"), ::OpenAPI::toJsonValue(m_stopwords));
    }
    return obj;
}

OAIStopwordOptionsStatus OAIDescribeStopwordOptionsResponse::getStopwords() const {
    return m_stopwords;
}
void OAIDescribeStopwordOptionsResponse::setStopwords(const OAIStopwordOptionsStatus &stopwords) {
    m_stopwords = stopwords;
    m_stopwords_isSet = true;
}

bool OAIDescribeStopwordOptionsResponse::is_stopwords_Set() const{
    return m_stopwords_isSet;
}

bool OAIDescribeStopwordOptionsResponse::is_stopwords_Valid() const{
    return m_stopwords_isValid;
}

bool OAIDescribeStopwordOptionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stopwords.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStopwordOptionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stopwords_isValid && true;
}

} // namespace OpenAPI
