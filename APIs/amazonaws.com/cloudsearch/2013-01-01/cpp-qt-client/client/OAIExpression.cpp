/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpression::OAIExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpression::OAIExpression() {
    this->initializeModel();
}

OAIExpression::~OAIExpression() {}

void OAIExpression::initializeModel() {

    m_expression_name_isSet = false;
    m_expression_name_isValid = false;

    m_expression_value_isSet = false;
    m_expression_value_isValid = false;
}

void OAIExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpression::fromJsonObject(QJsonObject json) {

    m_expression_name_isValid = ::OpenAPI::fromJsonValue(m_expression_name, json[QString("ExpressionName")]);
    m_expression_name_isSet = !json[QString("ExpressionName")].isNull() && m_expression_name_isValid;

    m_expression_value_isValid = ::OpenAPI::fromJsonValue(m_expression_value, json[QString("ExpressionValue")]);
    m_expression_value_isSet = !json[QString("ExpressionValue")].isNull() && m_expression_value_isValid;
}

QString OAIExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_name_isSet) {
        obj.insert(QString("ExpressionName"), ::OpenAPI::toJsonValue(m_expression_name));
    }
    if (m_expression_value_isSet) {
        obj.insert(QString("ExpressionValue"), ::OpenAPI::toJsonValue(m_expression_value));
    }
    return obj;
}

QString OAIExpression::getExpressionName() const {
    return m_expression_name;
}
void OAIExpression::setExpressionName(const QString &expression_name) {
    m_expression_name = expression_name;
    m_expression_name_isSet = true;
}

bool OAIExpression::is_expression_name_Set() const{
    return m_expression_name_isSet;
}

bool OAIExpression::is_expression_name_Valid() const{
    return m_expression_name_isValid;
}

QString OAIExpression::getExpressionValue() const {
    return m_expression_value;
}
void OAIExpression::setExpressionValue(const QString &expression_value) {
    m_expression_value = expression_value;
    m_expression_value_isSet = true;
}

bool OAIExpression::is_expression_value_Set() const{
    return m_expression_value_isSet;
}

bool OAIExpression::is_expression_value_Valid() const{
    return m_expression_value_isValid;
}

bool OAIExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_name_isValid && m_expression_value_isValid && true;
}

} // namespace OpenAPI
