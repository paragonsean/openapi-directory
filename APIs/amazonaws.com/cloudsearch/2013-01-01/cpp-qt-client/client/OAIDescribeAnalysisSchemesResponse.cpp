/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAnalysisSchemesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAnalysisSchemesResponse::OAIDescribeAnalysisSchemesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAnalysisSchemesResponse::OAIDescribeAnalysisSchemesResponse() {
    this->initializeModel();
}

OAIDescribeAnalysisSchemesResponse::~OAIDescribeAnalysisSchemesResponse() {}

void OAIDescribeAnalysisSchemesResponse::initializeModel() {

    m_analysis_schemes_isSet = false;
    m_analysis_schemes_isValid = false;
}

void OAIDescribeAnalysisSchemesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAnalysisSchemesResponse::fromJsonObject(QJsonObject json) {

    m_analysis_schemes_isValid = ::OpenAPI::fromJsonValue(m_analysis_schemes, json[QString("AnalysisSchemes")]);
    m_analysis_schemes_isSet = !json[QString("AnalysisSchemes")].isNull() && m_analysis_schemes_isValid;
}

QString OAIDescribeAnalysisSchemesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAnalysisSchemesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_schemes.isSet()) {
        obj.insert(QString("AnalysisSchemes"), ::OpenAPI::toJsonValue(m_analysis_schemes));
    }
    return obj;
}

QList OAIDescribeAnalysisSchemesResponse::getAnalysisSchemes() const {
    return m_analysis_schemes;
}
void OAIDescribeAnalysisSchemesResponse::setAnalysisSchemes(const QList &analysis_schemes) {
    m_analysis_schemes = analysis_schemes;
    m_analysis_schemes_isSet = true;
}

bool OAIDescribeAnalysisSchemesResponse::is_analysis_schemes_Set() const{
    return m_analysis_schemes_isSet;
}

bool OAIDescribeAnalysisSchemesResponse::is_analysis_schemes_Valid() const{
    return m_analysis_schemes_isValid;
}

bool OAIDescribeAnalysisSchemesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_schemes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAnalysisSchemesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_schemes_isValid && true;
}

} // namespace OpenAPI
