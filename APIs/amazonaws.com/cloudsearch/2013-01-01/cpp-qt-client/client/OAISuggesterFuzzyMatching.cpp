/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggesterFuzzyMatching.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggesterFuzzyMatching::OAISuggesterFuzzyMatching(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggesterFuzzyMatching::OAISuggesterFuzzyMatching() {
    this->initializeModel();
}

OAISuggesterFuzzyMatching::~OAISuggesterFuzzyMatching() {}

void OAISuggesterFuzzyMatching::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISuggesterFuzzyMatching::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISuggesterFuzzyMatching::fromJson(QString jsonString) {
    
    if ( jsonString.compare("none", Qt::CaseInsensitive) == 0) {
        m_value = eOAISuggesterFuzzyMatching::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("low", Qt::CaseInsensitive) == 0) {
        m_value = eOAISuggesterFuzzyMatching::LOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("high", Qt::CaseInsensitive) == 0) {
        m_value = eOAISuggesterFuzzyMatching::HIGH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISuggesterFuzzyMatching::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISuggesterFuzzyMatching::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISuggesterFuzzyMatching::NONE:
            val = "none";
            break;
        case eOAISuggesterFuzzyMatching::LOW:
            val = "low";
            break;
        case eOAISuggesterFuzzyMatching::HIGH:
            val = "high";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISuggesterFuzzyMatching::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISuggesterFuzzyMatching::eOAISuggesterFuzzyMatching OAISuggesterFuzzyMatching::getValue() const {
    return m_value;
}

void OAISuggesterFuzzyMatching::setValue(const OAISuggesterFuzzyMatching::eOAISuggesterFuzzyMatching& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISuggesterFuzzyMatching::isSet() const {
    
    return m_value_isSet;
}

bool OAISuggesterFuzzyMatching::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
