/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteSuggesterResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteSuggesterResponse::OAIDeleteSuggesterResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteSuggesterResponse::OAIDeleteSuggesterResponse() {
    this->initializeModel();
}

OAIDeleteSuggesterResponse::~OAIDeleteSuggesterResponse() {}

void OAIDeleteSuggesterResponse::initializeModel() {

    m_suggester_isSet = false;
    m_suggester_isValid = false;
}

void OAIDeleteSuggesterResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteSuggesterResponse::fromJsonObject(QJsonObject json) {

    m_suggester_isValid = ::OpenAPI::fromJsonValue(m_suggester, json[QString("Suggester")]);
    m_suggester_isSet = !json[QString("Suggester")].isNull() && m_suggester_isValid;
}

QString OAIDeleteSuggesterResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteSuggesterResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_suggester.isSet()) {
        obj.insert(QString("Suggester"), ::OpenAPI::toJsonValue(m_suggester));
    }
    return obj;
}

OAIDeleteSuggesterResponse_Suggester OAIDeleteSuggesterResponse::getSuggester() const {
    return m_suggester;
}
void OAIDeleteSuggesterResponse::setSuggester(const OAIDeleteSuggesterResponse_Suggester &suggester) {
    m_suggester = suggester;
    m_suggester_isSet = true;
}

bool OAIDeleteSuggesterResponse::is_suggester_Set() const{
    return m_suggester_isSet;
}

bool OAIDeleteSuggesterResponse::is_suggester_Valid() const{
    return m_suggester_isValid;
}

bool OAIDeleteSuggesterResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggester.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteSuggesterResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_suggester_isValid && true;
}

} // namespace OpenAPI
