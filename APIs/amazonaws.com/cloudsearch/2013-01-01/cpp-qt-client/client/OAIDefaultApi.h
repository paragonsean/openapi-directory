/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBuildSuggestersRequest.h"
#include "OAIBuildSuggestersResponse.h"
#include "OAICreateDomainRequest.h"
#include "OAICreateDomainResponse.h"
#include "OAIDefineAnalysisSchemeRequest.h"
#include "OAIDefineAnalysisSchemeResponse.h"
#include "OAIDefineExpressionRequest.h"
#include "OAIDefineExpressionResponse.h"
#include "OAIDefineIndexFieldRequest.h"
#include "OAIDefineIndexFieldResponse.h"
#include "OAIDefineSuggesterRequest.h"
#include "OAIDefineSuggesterResponse.h"
#include "OAIDeleteAnalysisSchemeRequest.h"
#include "OAIDeleteAnalysisSchemeResponse.h"
#include "OAIDeleteDomainRequest.h"
#include "OAIDeleteDomainResponse.h"
#include "OAIDeleteExpressionRequest.h"
#include "OAIDeleteExpressionResponse.h"
#include "OAIDeleteIndexFieldRequest.h"
#include "OAIDeleteIndexFieldResponse.h"
#include "OAIDeleteSuggesterRequest.h"
#include "OAIDeleteSuggesterResponse.h"
#include "OAIDescribeAnalysisSchemesRequest.h"
#include "OAIDescribeAnalysisSchemesResponse.h"
#include "OAIDescribeAvailabilityOptionsRequest.h"
#include "OAIDescribeAvailabilityOptionsResponse.h"
#include "OAIDescribeDomainEndpointOptionsRequest.h"
#include "OAIDescribeDomainEndpointOptionsResponse.h"
#include "OAIDescribeDomainsRequest.h"
#include "OAIDescribeDomainsResponse.h"
#include "OAIDescribeExpressionsRequest.h"
#include "OAIDescribeExpressionsResponse.h"
#include "OAIDescribeIndexFieldsRequest.h"
#include "OAIDescribeIndexFieldsResponse.h"
#include "OAIDescribeScalingParametersRequest.h"
#include "OAIDescribeScalingParametersResponse.h"
#include "OAIDescribeServiceAccessPoliciesRequest.h"
#include "OAIDescribeServiceAccessPoliciesResponse.h"
#include "OAIDescribeSuggestersRequest.h"
#include "OAIDescribeSuggestersResponse.h"
#include "OAIGET_DefineAnalysisScheme_AnalysisScheme_parameter.h"
#include "OAIGET_DefineExpression_Expression_parameter.h"
#include "OAIGET_DefineIndexField_IndexField_parameter.h"
#include "OAIGET_DefineSuggester_Suggester_parameter.h"
#include "OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter.h"
#include "OAIGET_UpdateScalingParameters_ScalingParameters_parameter.h"
#include "OAIIndexDocumentsRequest.h"
#include "OAIIndexDocumentsResponse.h"
#include "OAIListDomainNamesResponse.h"
#include "OAIUpdateAvailabilityOptionsRequest.h"
#include "OAIUpdateAvailabilityOptionsResponse.h"
#include "OAIUpdateDomainEndpointOptionsRequest.h"
#include "OAIUpdateDomainEndpointOptionsResponse.h"
#include "OAIUpdateScalingParametersRequest.h"
#include "OAIUpdateScalingParametersResponse.h"
#include "OAIUpdateServiceAccessPoliciesRequest.h"
#include "OAIUpdateServiceAccessPoliciesResponse.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETBuildSuggesters(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateDomain(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  analysis_scheme OAIGET_DefineAnalysisScheme_AnalysisScheme_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDefineAnalysisScheme(const QString &domain_name, const OAIGET_DefineAnalysisScheme_AnalysisScheme_parameter &analysis_scheme, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  expression OAIGET_DefineExpression_Expression_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDefineExpression(const QString &domain_name, const OAIGET_DefineExpression_Expression_parameter &expression, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  index_field OAIGET_DefineIndexField_IndexField_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDefineIndexField(const QString &domain_name, const OAIGET_DefineIndexField_IndexField_parameter &index_field, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  suggester OAIGET_DefineSuggester_Suggester_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDefineSuggester(const QString &domain_name, const OAIGET_DefineSuggester_Suggester_parameter &suggester, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  analysis_scheme_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteAnalysisScheme(const QString &domain_name, const QString &analysis_scheme_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteDomain(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  expression_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteExpression(const QString &domain_name, const QString &expression_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  index_field_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteIndexField(const QString &domain_name, const QString &index_field_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  suggester_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteSuggester(const QString &domain_name, const QString &suggester_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  analysis_scheme_names QList<QString> [optional]
    * @param[in]  deployed bool [optional]
    */
    virtual void gETDescribeAnalysisSchemes(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &analysis_scheme_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &deployed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  deployed bool [optional]
    */
    virtual void gETDescribeAvailabilityOptions(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deployed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  deployed bool [optional]
    */
    virtual void gETDescribeDomainEndpointOptions(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deployed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  domain_names QList<QString> [optional]
    */
    virtual void gETDescribeDomains(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &domain_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  expression_names QList<QString> [optional]
    * @param[in]  deployed bool [optional]
    */
    virtual void gETDescribeExpressions(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &expression_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &deployed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  field_names QList<QString> [optional]
    * @param[in]  deployed bool [optional]
    */
    virtual void gETDescribeIndexFields(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &field_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &deployed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeScalingParameters(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  deployed bool [optional]
    */
    virtual void gETDescribeServiceAccessPolicies(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deployed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  suggester_names QList<QString> [optional]
    * @param[in]  deployed bool [optional]
    */
    virtual void gETDescribeSuggesters(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &suggester_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &deployed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETIndexDocuments(const QString &domain_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETListDomainNames(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  multi_az bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateAvailabilityOptions(const QString &domain_name, const bool &multi_az, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  domain_endpoint_options OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateDomainEndpointOptions(const QString &domain_name, const OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter &domain_endpoint_options, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  scaling_parameters OAIGET_UpdateScalingParameters_ScalingParameters_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateScalingParameters(const QString &domain_name, const OAIGET_UpdateScalingParameters_ScalingParameters_parameter &scaling_parameters, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  access_policies QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateServiceAccessPolicies(const QString &domain_name, const QString &access_policies, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_build_suggesters_request OAIBuildSuggestersRequest [optional]
    */
    virtual void pOSTBuildSuggesters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBuildSuggestersRequest> &oai_build_suggesters_request = ::OpenAPI::OptionalParam<OAIBuildSuggestersRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_domain_request OAICreateDomainRequest [optional]
    */
    virtual void pOSTCreateDomain(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateDomainRequest> &oai_create_domain_request = ::OpenAPI::OptionalParam<OAICreateDomainRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_define_analysis_scheme_request OAIDefineAnalysisSchemeRequest [optional]
    */
    virtual void pOSTDefineAnalysisScheme(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDefineAnalysisSchemeRequest> &oai_define_analysis_scheme_request = ::OpenAPI::OptionalParam<OAIDefineAnalysisSchemeRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_define_expression_request OAIDefineExpressionRequest [optional]
    */
    virtual void pOSTDefineExpression(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDefineExpressionRequest> &oai_define_expression_request = ::OpenAPI::OptionalParam<OAIDefineExpressionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_define_index_field_request OAIDefineIndexFieldRequest [optional]
    */
    virtual void pOSTDefineIndexField(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDefineIndexFieldRequest> &oai_define_index_field_request = ::OpenAPI::OptionalParam<OAIDefineIndexFieldRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_define_suggester_request OAIDefineSuggesterRequest [optional]
    */
    virtual void pOSTDefineSuggester(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDefineSuggesterRequest> &oai_define_suggester_request = ::OpenAPI::OptionalParam<OAIDefineSuggesterRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_analysis_scheme_request OAIDeleteAnalysisSchemeRequest [optional]
    */
    virtual void pOSTDeleteAnalysisScheme(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteAnalysisSchemeRequest> &oai_delete_analysis_scheme_request = ::OpenAPI::OptionalParam<OAIDeleteAnalysisSchemeRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_domain_request OAIDeleteDomainRequest [optional]
    */
    virtual void pOSTDeleteDomain(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteDomainRequest> &oai_delete_domain_request = ::OpenAPI::OptionalParam<OAIDeleteDomainRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_expression_request OAIDeleteExpressionRequest [optional]
    */
    virtual void pOSTDeleteExpression(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteExpressionRequest> &oai_delete_expression_request = ::OpenAPI::OptionalParam<OAIDeleteExpressionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_index_field_request OAIDeleteIndexFieldRequest [optional]
    */
    virtual void pOSTDeleteIndexField(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteIndexFieldRequest> &oai_delete_index_field_request = ::OpenAPI::OptionalParam<OAIDeleteIndexFieldRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_suggester_request OAIDeleteSuggesterRequest [optional]
    */
    virtual void pOSTDeleteSuggester(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteSuggesterRequest> &oai_delete_suggester_request = ::OpenAPI::OptionalParam<OAIDeleteSuggesterRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_analysis_schemes_request OAIDescribeAnalysisSchemesRequest [optional]
    */
    virtual void pOSTDescribeAnalysisSchemes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAnalysisSchemesRequest> &oai_describe_analysis_schemes_request = ::OpenAPI::OptionalParam<OAIDescribeAnalysisSchemesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_availability_options_request OAIDescribeAvailabilityOptionsRequest [optional]
    */
    virtual void pOSTDescribeAvailabilityOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAvailabilityOptionsRequest> &oai_describe_availability_options_request = ::OpenAPI::OptionalParam<OAIDescribeAvailabilityOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_domain_endpoint_options_request OAIDescribeDomainEndpointOptionsRequest [optional]
    */
    virtual void pOSTDescribeDomainEndpointOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDomainEndpointOptionsRequest> &oai_describe_domain_endpoint_options_request = ::OpenAPI::OptionalParam<OAIDescribeDomainEndpointOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_domains_request OAIDescribeDomainsRequest [optional]
    */
    virtual void pOSTDescribeDomains(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDomainsRequest> &oai_describe_domains_request = ::OpenAPI::OptionalParam<OAIDescribeDomainsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_expressions_request OAIDescribeExpressionsRequest [optional]
    */
    virtual void pOSTDescribeExpressions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeExpressionsRequest> &oai_describe_expressions_request = ::OpenAPI::OptionalParam<OAIDescribeExpressionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_index_fields_request OAIDescribeIndexFieldsRequest [optional]
    */
    virtual void pOSTDescribeIndexFields(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeIndexFieldsRequest> &oai_describe_index_fields_request = ::OpenAPI::OptionalParam<OAIDescribeIndexFieldsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_scaling_parameters_request OAIDescribeScalingParametersRequest [optional]
    */
    virtual void pOSTDescribeScalingParameters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeScalingParametersRequest> &oai_describe_scaling_parameters_request = ::OpenAPI::OptionalParam<OAIDescribeScalingParametersRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_service_access_policies_request OAIDescribeServiceAccessPoliciesRequest [optional]
    */
    virtual void pOSTDescribeServiceAccessPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeServiceAccessPoliciesRequest> &oai_describe_service_access_policies_request = ::OpenAPI::OptionalParam<OAIDescribeServiceAccessPoliciesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_suggesters_request OAIDescribeSuggestersRequest [optional]
    */
    virtual void pOSTDescribeSuggesters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeSuggestersRequest> &oai_describe_suggesters_request = ::OpenAPI::OptionalParam<OAIDescribeSuggestersRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_index_documents_request OAIIndexDocumentsRequest [optional]
    */
    virtual void pOSTIndexDocuments(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIndexDocumentsRequest> &oai_index_documents_request = ::OpenAPI::OptionalParam<OAIIndexDocumentsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTListDomainNames(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_availability_options_request OAIUpdateAvailabilityOptionsRequest [optional]
    */
    virtual void pOSTUpdateAvailabilityOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateAvailabilityOptionsRequest> &oai_update_availability_options_request = ::OpenAPI::OptionalParam<OAIUpdateAvailabilityOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_domain_endpoint_options_request OAIUpdateDomainEndpointOptionsRequest [optional]
    */
    virtual void pOSTUpdateDomainEndpointOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateDomainEndpointOptionsRequest> &oai_update_domain_endpoint_options_request = ::OpenAPI::OptionalParam<OAIUpdateDomainEndpointOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_scaling_parameters_request OAIUpdateScalingParametersRequest [optional]
    */
    virtual void pOSTUpdateScalingParameters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateScalingParametersRequest> &oai_update_scaling_parameters_request = ::OpenAPI::OptionalParam<OAIUpdateScalingParametersRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_service_access_policies_request OAIUpdateServiceAccessPoliciesRequest [optional]
    */
    virtual void pOSTUpdateServiceAccessPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateServiceAccessPoliciesRequest> &oai_update_service_access_policies_request = ::OpenAPI::OptionalParam<OAIUpdateServiceAccessPoliciesRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETBuildSuggestersCallback(OAIHttpRequestWorker *worker);
    void gETCreateDomainCallback(OAIHttpRequestWorker *worker);
    void gETDefineAnalysisSchemeCallback(OAIHttpRequestWorker *worker);
    void gETDefineExpressionCallback(OAIHttpRequestWorker *worker);
    void gETDefineIndexFieldCallback(OAIHttpRequestWorker *worker);
    void gETDefineSuggesterCallback(OAIHttpRequestWorker *worker);
    void gETDeleteAnalysisSchemeCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDomainCallback(OAIHttpRequestWorker *worker);
    void gETDeleteExpressionCallback(OAIHttpRequestWorker *worker);
    void gETDeleteIndexFieldCallback(OAIHttpRequestWorker *worker);
    void gETDeleteSuggesterCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAnalysisSchemesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAvailabilityOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDomainEndpointOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDomainsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeExpressionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeIndexFieldsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeScalingParametersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeServiceAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeSuggestersCallback(OAIHttpRequestWorker *worker);
    void gETIndexDocumentsCallback(OAIHttpRequestWorker *worker);
    void gETListDomainNamesCallback(OAIHttpRequestWorker *worker);
    void gETUpdateAvailabilityOptionsCallback(OAIHttpRequestWorker *worker);
    void gETUpdateDomainEndpointOptionsCallback(OAIHttpRequestWorker *worker);
    void gETUpdateScalingParametersCallback(OAIHttpRequestWorker *worker);
    void gETUpdateServiceAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTBuildSuggestersCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateDomainCallback(OAIHttpRequestWorker *worker);
    void pOSTDefineAnalysisSchemeCallback(OAIHttpRequestWorker *worker);
    void pOSTDefineExpressionCallback(OAIHttpRequestWorker *worker);
    void pOSTDefineIndexFieldCallback(OAIHttpRequestWorker *worker);
    void pOSTDefineSuggesterCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteAnalysisSchemeCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDomainCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteExpressionCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteIndexFieldCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteSuggesterCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAnalysisSchemesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAvailabilityOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDomainEndpointOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDomainsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeExpressionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeIndexFieldsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeScalingParametersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeServiceAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeSuggestersCallback(OAIHttpRequestWorker *worker);
    void pOSTIndexDocumentsCallback(OAIHttpRequestWorker *worker);
    void pOSTListDomainNamesCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateAvailabilityOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateDomainEndpointOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateScalingParametersCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateServiceAccessPoliciesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETBuildSuggestersSignal(OAIBuildSuggestersResponse summary);
    void gETCreateDomainSignal(OAICreateDomainResponse summary);
    void gETDefineAnalysisSchemeSignal(OAIDefineAnalysisSchemeResponse summary);
    void gETDefineExpressionSignal(OAIDefineExpressionResponse summary);
    void gETDefineIndexFieldSignal(OAIDefineIndexFieldResponse summary);
    void gETDefineSuggesterSignal(OAIDefineSuggesterResponse summary);
    void gETDeleteAnalysisSchemeSignal(OAIDeleteAnalysisSchemeResponse summary);
    void gETDeleteDomainSignal(OAIDeleteDomainResponse summary);
    void gETDeleteExpressionSignal(OAIDeleteExpressionResponse summary);
    void gETDeleteIndexFieldSignal(OAIDeleteIndexFieldResponse summary);
    void gETDeleteSuggesterSignal(OAIDeleteSuggesterResponse summary);
    void gETDescribeAnalysisSchemesSignal(OAIDescribeAnalysisSchemesResponse summary);
    void gETDescribeAvailabilityOptionsSignal(OAIDescribeAvailabilityOptionsResponse summary);
    void gETDescribeDomainEndpointOptionsSignal(OAIDescribeDomainEndpointOptionsResponse summary);
    void gETDescribeDomainsSignal(OAIDescribeDomainsResponse summary);
    void gETDescribeExpressionsSignal(OAIDescribeExpressionsResponse summary);
    void gETDescribeIndexFieldsSignal(OAIDescribeIndexFieldsResponse summary);
    void gETDescribeScalingParametersSignal(OAIDescribeScalingParametersResponse summary);
    void gETDescribeServiceAccessPoliciesSignal(OAIDescribeServiceAccessPoliciesResponse summary);
    void gETDescribeSuggestersSignal(OAIDescribeSuggestersResponse summary);
    void gETIndexDocumentsSignal(OAIIndexDocumentsResponse summary);
    void gETListDomainNamesSignal(OAIListDomainNamesResponse summary);
    void gETUpdateAvailabilityOptionsSignal(OAIUpdateAvailabilityOptionsResponse summary);
    void gETUpdateDomainEndpointOptionsSignal(OAIUpdateDomainEndpointOptionsResponse summary);
    void gETUpdateScalingParametersSignal(OAIUpdateScalingParametersResponse summary);
    void gETUpdateServiceAccessPoliciesSignal(OAIUpdateServiceAccessPoliciesResponse summary);
    void pOSTBuildSuggestersSignal(OAIBuildSuggestersResponse summary);
    void pOSTCreateDomainSignal(OAICreateDomainResponse summary);
    void pOSTDefineAnalysisSchemeSignal(OAIDefineAnalysisSchemeResponse summary);
    void pOSTDefineExpressionSignal(OAIDefineExpressionResponse summary);
    void pOSTDefineIndexFieldSignal(OAIDefineIndexFieldResponse summary);
    void pOSTDefineSuggesterSignal(OAIDefineSuggesterResponse summary);
    void pOSTDeleteAnalysisSchemeSignal(OAIDeleteAnalysisSchemeResponse summary);
    void pOSTDeleteDomainSignal(OAIDeleteDomainResponse summary);
    void pOSTDeleteExpressionSignal(OAIDeleteExpressionResponse summary);
    void pOSTDeleteIndexFieldSignal(OAIDeleteIndexFieldResponse summary);
    void pOSTDeleteSuggesterSignal(OAIDeleteSuggesterResponse summary);
    void pOSTDescribeAnalysisSchemesSignal(OAIDescribeAnalysisSchemesResponse summary);
    void pOSTDescribeAvailabilityOptionsSignal(OAIDescribeAvailabilityOptionsResponse summary);
    void pOSTDescribeDomainEndpointOptionsSignal(OAIDescribeDomainEndpointOptionsResponse summary);
    void pOSTDescribeDomainsSignal(OAIDescribeDomainsResponse summary);
    void pOSTDescribeExpressionsSignal(OAIDescribeExpressionsResponse summary);
    void pOSTDescribeIndexFieldsSignal(OAIDescribeIndexFieldsResponse summary);
    void pOSTDescribeScalingParametersSignal(OAIDescribeScalingParametersResponse summary);
    void pOSTDescribeServiceAccessPoliciesSignal(OAIDescribeServiceAccessPoliciesResponse summary);
    void pOSTDescribeSuggestersSignal(OAIDescribeSuggestersResponse summary);
    void pOSTIndexDocumentsSignal(OAIIndexDocumentsResponse summary);
    void pOSTListDomainNamesSignal(OAIListDomainNamesResponse summary);
    void pOSTUpdateAvailabilityOptionsSignal(OAIUpdateAvailabilityOptionsResponse summary);
    void pOSTUpdateDomainEndpointOptionsSignal(OAIUpdateDomainEndpointOptionsResponse summary);
    void pOSTUpdateScalingParametersSignal(OAIUpdateScalingParametersResponse summary);
    void pOSTUpdateServiceAccessPoliciesSignal(OAIUpdateServiceAccessPoliciesResponse summary);


    void gETBuildSuggestersSignalFull(OAIHttpRequestWorker *worker, OAIBuildSuggestersResponse summary);
    void gETCreateDomainSignalFull(OAIHttpRequestWorker *worker, OAICreateDomainResponse summary);
    void gETDefineAnalysisSchemeSignalFull(OAIHttpRequestWorker *worker, OAIDefineAnalysisSchemeResponse summary);
    void gETDefineExpressionSignalFull(OAIHttpRequestWorker *worker, OAIDefineExpressionResponse summary);
    void gETDefineIndexFieldSignalFull(OAIHttpRequestWorker *worker, OAIDefineIndexFieldResponse summary);
    void gETDefineSuggesterSignalFull(OAIHttpRequestWorker *worker, OAIDefineSuggesterResponse summary);
    void gETDeleteAnalysisSchemeSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAnalysisSchemeResponse summary);
    void gETDeleteDomainSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDomainResponse summary);
    void gETDeleteExpressionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteExpressionResponse summary);
    void gETDeleteIndexFieldSignalFull(OAIHttpRequestWorker *worker, OAIDeleteIndexFieldResponse summary);
    void gETDeleteSuggesterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSuggesterResponse summary);
    void gETDescribeAnalysisSchemesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAnalysisSchemesResponse summary);
    void gETDescribeAvailabilityOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAvailabilityOptionsResponse summary);
    void gETDescribeDomainEndpointOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDomainEndpointOptionsResponse summary);
    void gETDescribeDomainsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDomainsResponse summary);
    void gETDescribeExpressionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeExpressionsResponse summary);
    void gETDescribeIndexFieldsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeIndexFieldsResponse summary);
    void gETDescribeScalingParametersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeScalingParametersResponse summary);
    void gETDescribeServiceAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeServiceAccessPoliciesResponse summary);
    void gETDescribeSuggestersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSuggestersResponse summary);
    void gETIndexDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIIndexDocumentsResponse summary);
    void gETListDomainNamesSignalFull(OAIHttpRequestWorker *worker, OAIListDomainNamesResponse summary);
    void gETUpdateAvailabilityOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAvailabilityOptionsResponse summary);
    void gETUpdateDomainEndpointOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDomainEndpointOptionsResponse summary);
    void gETUpdateScalingParametersSignalFull(OAIHttpRequestWorker *worker, OAIUpdateScalingParametersResponse summary);
    void gETUpdateServiceAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateServiceAccessPoliciesResponse summary);
    void pOSTBuildSuggestersSignalFull(OAIHttpRequestWorker *worker, OAIBuildSuggestersResponse summary);
    void pOSTCreateDomainSignalFull(OAIHttpRequestWorker *worker, OAICreateDomainResponse summary);
    void pOSTDefineAnalysisSchemeSignalFull(OAIHttpRequestWorker *worker, OAIDefineAnalysisSchemeResponse summary);
    void pOSTDefineExpressionSignalFull(OAIHttpRequestWorker *worker, OAIDefineExpressionResponse summary);
    void pOSTDefineIndexFieldSignalFull(OAIHttpRequestWorker *worker, OAIDefineIndexFieldResponse summary);
    void pOSTDefineSuggesterSignalFull(OAIHttpRequestWorker *worker, OAIDefineSuggesterResponse summary);
    void pOSTDeleteAnalysisSchemeSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAnalysisSchemeResponse summary);
    void pOSTDeleteDomainSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDomainResponse summary);
    void pOSTDeleteExpressionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteExpressionResponse summary);
    void pOSTDeleteIndexFieldSignalFull(OAIHttpRequestWorker *worker, OAIDeleteIndexFieldResponse summary);
    void pOSTDeleteSuggesterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSuggesterResponse summary);
    void pOSTDescribeAnalysisSchemesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAnalysisSchemesResponse summary);
    void pOSTDescribeAvailabilityOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAvailabilityOptionsResponse summary);
    void pOSTDescribeDomainEndpointOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDomainEndpointOptionsResponse summary);
    void pOSTDescribeDomainsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDomainsResponse summary);
    void pOSTDescribeExpressionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeExpressionsResponse summary);
    void pOSTDescribeIndexFieldsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeIndexFieldsResponse summary);
    void pOSTDescribeScalingParametersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeScalingParametersResponse summary);
    void pOSTDescribeServiceAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeServiceAccessPoliciesResponse summary);
    void pOSTDescribeSuggestersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSuggestersResponse summary);
    void pOSTIndexDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIIndexDocumentsResponse summary);
    void pOSTListDomainNamesSignalFull(OAIHttpRequestWorker *worker, OAIListDomainNamesResponse summary);
    void pOSTUpdateAvailabilityOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAvailabilityOptionsResponse summary);
    void pOSTUpdateDomainEndpointOptionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDomainEndpointOptionsResponse summary);
    void pOSTUpdateScalingParametersSignalFull(OAIHttpRequestWorker *worker, OAIUpdateScalingParametersResponse summary);
    void pOSTUpdateServiceAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateServiceAccessPoliciesResponse summary);

    Q_DECL_DEPRECATED_X("Use gETBuildSuggestersSignalError() instead")
    void gETBuildSuggestersSignalE(OAIBuildSuggestersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBuildSuggestersSignalError(OAIBuildSuggestersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDomainSignalError() instead")
    void gETCreateDomainSignalE(OAICreateDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDomainSignalError(OAICreateDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineAnalysisSchemeSignalError() instead")
    void gETDefineAnalysisSchemeSignalE(OAIDefineAnalysisSchemeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineAnalysisSchemeSignalError(OAIDefineAnalysisSchemeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineExpressionSignalError() instead")
    void gETDefineExpressionSignalE(OAIDefineExpressionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineExpressionSignalError(OAIDefineExpressionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineIndexFieldSignalError() instead")
    void gETDefineIndexFieldSignalE(OAIDefineIndexFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineIndexFieldSignalError(OAIDefineIndexFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineSuggesterSignalError() instead")
    void gETDefineSuggesterSignalE(OAIDefineSuggesterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineSuggesterSignalError(OAIDefineSuggesterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAnalysisSchemeSignalError() instead")
    void gETDeleteAnalysisSchemeSignalE(OAIDeleteAnalysisSchemeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAnalysisSchemeSignalError(OAIDeleteAnalysisSchemeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDomainSignalError() instead")
    void gETDeleteDomainSignalE(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDomainSignalError(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteExpressionSignalError() instead")
    void gETDeleteExpressionSignalE(OAIDeleteExpressionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteExpressionSignalError(OAIDeleteExpressionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteIndexFieldSignalError() instead")
    void gETDeleteIndexFieldSignalE(OAIDeleteIndexFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteIndexFieldSignalError(OAIDeleteIndexFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteSuggesterSignalError() instead")
    void gETDeleteSuggesterSignalE(OAIDeleteSuggesterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteSuggesterSignalError(OAIDeleteSuggesterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAnalysisSchemesSignalError() instead")
    void gETDescribeAnalysisSchemesSignalE(OAIDescribeAnalysisSchemesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAnalysisSchemesSignalError(OAIDescribeAnalysisSchemesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAvailabilityOptionsSignalError() instead")
    void gETDescribeAvailabilityOptionsSignalE(OAIDescribeAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAvailabilityOptionsSignalError(OAIDescribeAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDomainEndpointOptionsSignalError() instead")
    void gETDescribeDomainEndpointOptionsSignalE(OAIDescribeDomainEndpointOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDomainEndpointOptionsSignalError(OAIDescribeDomainEndpointOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDomainsSignalError() instead")
    void gETDescribeDomainsSignalE(OAIDescribeDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDomainsSignalError(OAIDescribeDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeExpressionsSignalError() instead")
    void gETDescribeExpressionsSignalE(OAIDescribeExpressionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeExpressionsSignalError(OAIDescribeExpressionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeIndexFieldsSignalError() instead")
    void gETDescribeIndexFieldsSignalE(OAIDescribeIndexFieldsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeIndexFieldsSignalError(OAIDescribeIndexFieldsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScalingParametersSignalError() instead")
    void gETDescribeScalingParametersSignalE(OAIDescribeScalingParametersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScalingParametersSignalError(OAIDescribeScalingParametersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeServiceAccessPoliciesSignalError() instead")
    void gETDescribeServiceAccessPoliciesSignalE(OAIDescribeServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeServiceAccessPoliciesSignalError(OAIDescribeServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSuggestersSignalError() instead")
    void gETDescribeSuggestersSignalE(OAIDescribeSuggestersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSuggestersSignalError(OAIDescribeSuggestersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETIndexDocumentsSignalError() instead")
    void gETIndexDocumentsSignalE(OAIIndexDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETIndexDocumentsSignalError(OAIIndexDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListDomainNamesSignalError() instead")
    void gETListDomainNamesSignalE(OAIListDomainNamesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListDomainNamesSignalError(OAIListDomainNamesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateAvailabilityOptionsSignalError() instead")
    void gETUpdateAvailabilityOptionsSignalE(OAIUpdateAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateAvailabilityOptionsSignalError(OAIUpdateAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateDomainEndpointOptionsSignalError() instead")
    void gETUpdateDomainEndpointOptionsSignalE(OAIUpdateDomainEndpointOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateDomainEndpointOptionsSignalError(OAIUpdateDomainEndpointOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateScalingParametersSignalError() instead")
    void gETUpdateScalingParametersSignalE(OAIUpdateScalingParametersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateScalingParametersSignalError(OAIUpdateScalingParametersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateServiceAccessPoliciesSignalError() instead")
    void gETUpdateServiceAccessPoliciesSignalE(OAIUpdateServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateServiceAccessPoliciesSignalError(OAIUpdateServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBuildSuggestersSignalError() instead")
    void pOSTBuildSuggestersSignalE(OAIBuildSuggestersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBuildSuggestersSignalError(OAIBuildSuggestersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDomainSignalError() instead")
    void pOSTCreateDomainSignalE(OAICreateDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDomainSignalError(OAICreateDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineAnalysisSchemeSignalError() instead")
    void pOSTDefineAnalysisSchemeSignalE(OAIDefineAnalysisSchemeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineAnalysisSchemeSignalError(OAIDefineAnalysisSchemeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineExpressionSignalError() instead")
    void pOSTDefineExpressionSignalE(OAIDefineExpressionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineExpressionSignalError(OAIDefineExpressionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineIndexFieldSignalError() instead")
    void pOSTDefineIndexFieldSignalE(OAIDefineIndexFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineIndexFieldSignalError(OAIDefineIndexFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineSuggesterSignalError() instead")
    void pOSTDefineSuggesterSignalE(OAIDefineSuggesterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineSuggesterSignalError(OAIDefineSuggesterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAnalysisSchemeSignalError() instead")
    void pOSTDeleteAnalysisSchemeSignalE(OAIDeleteAnalysisSchemeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAnalysisSchemeSignalError(OAIDeleteAnalysisSchemeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDomainSignalError() instead")
    void pOSTDeleteDomainSignalE(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDomainSignalError(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteExpressionSignalError() instead")
    void pOSTDeleteExpressionSignalE(OAIDeleteExpressionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteExpressionSignalError(OAIDeleteExpressionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteIndexFieldSignalError() instead")
    void pOSTDeleteIndexFieldSignalE(OAIDeleteIndexFieldResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteIndexFieldSignalError(OAIDeleteIndexFieldResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteSuggesterSignalError() instead")
    void pOSTDeleteSuggesterSignalE(OAIDeleteSuggesterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteSuggesterSignalError(OAIDeleteSuggesterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAnalysisSchemesSignalError() instead")
    void pOSTDescribeAnalysisSchemesSignalE(OAIDescribeAnalysisSchemesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAnalysisSchemesSignalError(OAIDescribeAnalysisSchemesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAvailabilityOptionsSignalError() instead")
    void pOSTDescribeAvailabilityOptionsSignalE(OAIDescribeAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAvailabilityOptionsSignalError(OAIDescribeAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDomainEndpointOptionsSignalError() instead")
    void pOSTDescribeDomainEndpointOptionsSignalE(OAIDescribeDomainEndpointOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDomainEndpointOptionsSignalError(OAIDescribeDomainEndpointOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDomainsSignalError() instead")
    void pOSTDescribeDomainsSignalE(OAIDescribeDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDomainsSignalError(OAIDescribeDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeExpressionsSignalError() instead")
    void pOSTDescribeExpressionsSignalE(OAIDescribeExpressionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeExpressionsSignalError(OAIDescribeExpressionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeIndexFieldsSignalError() instead")
    void pOSTDescribeIndexFieldsSignalE(OAIDescribeIndexFieldsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeIndexFieldsSignalError(OAIDescribeIndexFieldsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScalingParametersSignalError() instead")
    void pOSTDescribeScalingParametersSignalE(OAIDescribeScalingParametersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScalingParametersSignalError(OAIDescribeScalingParametersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeServiceAccessPoliciesSignalError() instead")
    void pOSTDescribeServiceAccessPoliciesSignalE(OAIDescribeServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeServiceAccessPoliciesSignalError(OAIDescribeServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSuggestersSignalError() instead")
    void pOSTDescribeSuggestersSignalE(OAIDescribeSuggestersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSuggestersSignalError(OAIDescribeSuggestersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTIndexDocumentsSignalError() instead")
    void pOSTIndexDocumentsSignalE(OAIIndexDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTIndexDocumentsSignalError(OAIIndexDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListDomainNamesSignalError() instead")
    void pOSTListDomainNamesSignalE(OAIListDomainNamesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListDomainNamesSignalError(OAIListDomainNamesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateAvailabilityOptionsSignalError() instead")
    void pOSTUpdateAvailabilityOptionsSignalE(OAIUpdateAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateAvailabilityOptionsSignalError(OAIUpdateAvailabilityOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateDomainEndpointOptionsSignalError() instead")
    void pOSTUpdateDomainEndpointOptionsSignalE(OAIUpdateDomainEndpointOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateDomainEndpointOptionsSignalError(OAIUpdateDomainEndpointOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateScalingParametersSignalError() instead")
    void pOSTUpdateScalingParametersSignalE(OAIUpdateScalingParametersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateScalingParametersSignalError(OAIUpdateScalingParametersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateServiceAccessPoliciesSignalError() instead")
    void pOSTUpdateServiceAccessPoliciesSignalE(OAIUpdateServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateServiceAccessPoliciesSignalError(OAIUpdateServiceAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETBuildSuggestersSignalErrorFull() instead")
    void gETBuildSuggestersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBuildSuggestersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDomainSignalErrorFull() instead")
    void gETCreateDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineAnalysisSchemeSignalErrorFull() instead")
    void gETDefineAnalysisSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineAnalysisSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineExpressionSignalErrorFull() instead")
    void gETDefineExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineIndexFieldSignalErrorFull() instead")
    void gETDefineIndexFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineIndexFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDefineSuggesterSignalErrorFull() instead")
    void gETDefineSuggesterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDefineSuggesterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAnalysisSchemeSignalErrorFull() instead")
    void gETDeleteAnalysisSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAnalysisSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDomainSignalErrorFull() instead")
    void gETDeleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteExpressionSignalErrorFull() instead")
    void gETDeleteExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteIndexFieldSignalErrorFull() instead")
    void gETDeleteIndexFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteIndexFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteSuggesterSignalErrorFull() instead")
    void gETDeleteSuggesterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteSuggesterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAnalysisSchemesSignalErrorFull() instead")
    void gETDescribeAnalysisSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAnalysisSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAvailabilityOptionsSignalErrorFull() instead")
    void gETDescribeAvailabilityOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAvailabilityOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDomainEndpointOptionsSignalErrorFull() instead")
    void gETDescribeDomainEndpointOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDomainEndpointOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDomainsSignalErrorFull() instead")
    void gETDescribeDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeExpressionsSignalErrorFull() instead")
    void gETDescribeExpressionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeExpressionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeIndexFieldsSignalErrorFull() instead")
    void gETDescribeIndexFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeIndexFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScalingParametersSignalErrorFull() instead")
    void gETDescribeScalingParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScalingParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeServiceAccessPoliciesSignalErrorFull() instead")
    void gETDescribeServiceAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeServiceAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSuggestersSignalErrorFull() instead")
    void gETDescribeSuggestersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSuggestersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETIndexDocumentsSignalErrorFull() instead")
    void gETIndexDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETIndexDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListDomainNamesSignalErrorFull() instead")
    void gETListDomainNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListDomainNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateAvailabilityOptionsSignalErrorFull() instead")
    void gETUpdateAvailabilityOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateAvailabilityOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateDomainEndpointOptionsSignalErrorFull() instead")
    void gETUpdateDomainEndpointOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateDomainEndpointOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateScalingParametersSignalErrorFull() instead")
    void gETUpdateScalingParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateScalingParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateServiceAccessPoliciesSignalErrorFull() instead")
    void gETUpdateServiceAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateServiceAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBuildSuggestersSignalErrorFull() instead")
    void pOSTBuildSuggestersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBuildSuggestersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDomainSignalErrorFull() instead")
    void pOSTCreateDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineAnalysisSchemeSignalErrorFull() instead")
    void pOSTDefineAnalysisSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineAnalysisSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineExpressionSignalErrorFull() instead")
    void pOSTDefineExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineIndexFieldSignalErrorFull() instead")
    void pOSTDefineIndexFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineIndexFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDefineSuggesterSignalErrorFull() instead")
    void pOSTDefineSuggesterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDefineSuggesterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAnalysisSchemeSignalErrorFull() instead")
    void pOSTDeleteAnalysisSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAnalysisSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDomainSignalErrorFull() instead")
    void pOSTDeleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteExpressionSignalErrorFull() instead")
    void pOSTDeleteExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteIndexFieldSignalErrorFull() instead")
    void pOSTDeleteIndexFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteIndexFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteSuggesterSignalErrorFull() instead")
    void pOSTDeleteSuggesterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteSuggesterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAnalysisSchemesSignalErrorFull() instead")
    void pOSTDescribeAnalysisSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAnalysisSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAvailabilityOptionsSignalErrorFull() instead")
    void pOSTDescribeAvailabilityOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAvailabilityOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDomainEndpointOptionsSignalErrorFull() instead")
    void pOSTDescribeDomainEndpointOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDomainEndpointOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDomainsSignalErrorFull() instead")
    void pOSTDescribeDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeExpressionsSignalErrorFull() instead")
    void pOSTDescribeExpressionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeExpressionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeIndexFieldsSignalErrorFull() instead")
    void pOSTDescribeIndexFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeIndexFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScalingParametersSignalErrorFull() instead")
    void pOSTDescribeScalingParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScalingParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeServiceAccessPoliciesSignalErrorFull() instead")
    void pOSTDescribeServiceAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeServiceAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSuggestersSignalErrorFull() instead")
    void pOSTDescribeSuggestersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSuggestersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTIndexDocumentsSignalErrorFull() instead")
    void pOSTIndexDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTIndexDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListDomainNamesSignalErrorFull() instead")
    void pOSTListDomainNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListDomainNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateAvailabilityOptionsSignalErrorFull() instead")
    void pOSTUpdateAvailabilityOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateAvailabilityOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateDomainEndpointOptionsSignalErrorFull() instead")
    void pOSTUpdateDomainEndpointOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateDomainEndpointOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateScalingParametersSignalErrorFull() instead")
    void pOSTUpdateScalingParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateScalingParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateServiceAccessPoliciesSignalErrorFull() instead")
    void pOSTUpdateServiceAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateServiceAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
