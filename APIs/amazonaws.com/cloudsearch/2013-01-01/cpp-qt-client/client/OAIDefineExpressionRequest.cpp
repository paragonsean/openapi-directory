/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefineExpressionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefineExpressionRequest::OAIDefineExpressionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefineExpressionRequest::OAIDefineExpressionRequest() {
    this->initializeModel();
}

OAIDefineExpressionRequest::~OAIDefineExpressionRequest() {}

void OAIDefineExpressionRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;
}

void OAIDefineExpressionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefineExpressionRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;
}

QString OAIDefineExpressionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefineExpressionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_expression.isSet()) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    return obj;
}

QString OAIDefineExpressionRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDefineExpressionRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDefineExpressionRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDefineExpressionRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIExpression OAIDefineExpressionRequest::getExpression() const {
    return m_expression;
}
void OAIDefineExpressionRequest::setExpression(const OAIExpression &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIDefineExpressionRequest::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIDefineExpressionRequest::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAIDefineExpressionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefineExpressionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_expression_isValid && true;
}

} // namespace OpenAPI
