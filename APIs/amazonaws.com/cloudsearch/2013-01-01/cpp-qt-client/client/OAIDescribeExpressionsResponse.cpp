/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeExpressionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeExpressionsResponse::OAIDescribeExpressionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeExpressionsResponse::OAIDescribeExpressionsResponse() {
    this->initializeModel();
}

OAIDescribeExpressionsResponse::~OAIDescribeExpressionsResponse() {}

void OAIDescribeExpressionsResponse::initializeModel() {

    m_expressions_isSet = false;
    m_expressions_isValid = false;
}

void OAIDescribeExpressionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeExpressionsResponse::fromJsonObject(QJsonObject json) {

    m_expressions_isValid = ::OpenAPI::fromJsonValue(m_expressions, json[QString("Expressions")]);
    m_expressions_isSet = !json[QString("Expressions")].isNull() && m_expressions_isValid;
}

QString OAIDescribeExpressionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeExpressionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_expressions.isSet()) {
        obj.insert(QString("Expressions"), ::OpenAPI::toJsonValue(m_expressions));
    }
    return obj;
}

QList OAIDescribeExpressionsResponse::getExpressions() const {
    return m_expressions;
}
void OAIDescribeExpressionsResponse::setExpressions(const QList &expressions) {
    m_expressions = expressions;
    m_expressions_isSet = true;
}

bool OAIDescribeExpressionsResponse::is_expressions_Set() const{
    return m_expressions_isSet;
}

bool OAIDescribeExpressionsResponse::is_expressions_Valid() const{
    return m_expressions_isValid;
}

bool OAIDescribeExpressionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expressions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeExpressionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expressions_isValid && true;
}

} // namespace OpenAPI
