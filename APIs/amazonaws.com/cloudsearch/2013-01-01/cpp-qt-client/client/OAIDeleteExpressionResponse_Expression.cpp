/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteExpressionResponse_Expression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteExpressionResponse_Expression::OAIDeleteExpressionResponse_Expression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteExpressionResponse_Expression::OAIDeleteExpressionResponse_Expression() {
    this->initializeModel();
}

OAIDeleteExpressionResponse_Expression::~OAIDeleteExpressionResponse_Expression() {}

void OAIDeleteExpressionResponse_Expression::initializeModel() {

    m_options_isSet = false;
    m_options_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDeleteExpressionResponse_Expression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteExpressionResponse_Expression::fromJsonObject(QJsonObject json) {

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDeleteExpressionResponse_Expression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteExpressionResponse_Expression::asJsonObject() const {
    QJsonObject obj;
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIExpressionStatus_Options OAIDeleteExpressionResponse_Expression::getOptions() const {
    return m_options;
}
void OAIDeleteExpressionResponse_Expression::setOptions(const OAIExpressionStatus_Options &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIDeleteExpressionResponse_Expression::is_options_Set() const{
    return m_options_isSet;
}

bool OAIDeleteExpressionResponse_Expression::is_options_Valid() const{
    return m_options_isValid;
}

OAIOptionStatus OAIDeleteExpressionResponse_Expression::getStatus() const {
    return m_status;
}
void OAIDeleteExpressionResponse_Expression::setStatus(const OAIOptionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteExpressionResponse_Expression::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteExpressionResponse_Expression::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDeleteExpressionResponse_Expression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteExpressionResponse_Expression::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_options_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
