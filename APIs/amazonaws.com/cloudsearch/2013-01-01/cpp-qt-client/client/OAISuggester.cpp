/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggester.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggester::OAISuggester(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggester::OAISuggester() {
    this->initializeModel();
}

OAISuggester::~OAISuggester() {}

void OAISuggester::initializeModel() {

    m_suggester_name_isSet = false;
    m_suggester_name_isValid = false;

    m_document_suggester_options_isSet = false;
    m_document_suggester_options_isValid = false;
}

void OAISuggester::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggester::fromJsonObject(QJsonObject json) {

    m_suggester_name_isValid = ::OpenAPI::fromJsonValue(m_suggester_name, json[QString("SuggesterName")]);
    m_suggester_name_isSet = !json[QString("SuggesterName")].isNull() && m_suggester_name_isValid;

    m_document_suggester_options_isValid = ::OpenAPI::fromJsonValue(m_document_suggester_options, json[QString("DocumentSuggesterOptions")]);
    m_document_suggester_options_isSet = !json[QString("DocumentSuggesterOptions")].isNull() && m_document_suggester_options_isValid;
}

QString OAISuggester::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggester::asJsonObject() const {
    QJsonObject obj;
    if (m_suggester_name_isSet) {
        obj.insert(QString("SuggesterName"), ::OpenAPI::toJsonValue(m_suggester_name));
    }
    if (m_document_suggester_options.isSet()) {
        obj.insert(QString("DocumentSuggesterOptions"), ::OpenAPI::toJsonValue(m_document_suggester_options));
    }
    return obj;
}

QString OAISuggester::getSuggesterName() const {
    return m_suggester_name;
}
void OAISuggester::setSuggesterName(const QString &suggester_name) {
    m_suggester_name = suggester_name;
    m_suggester_name_isSet = true;
}

bool OAISuggester::is_suggester_name_Set() const{
    return m_suggester_name_isSet;
}

bool OAISuggester::is_suggester_name_Valid() const{
    return m_suggester_name_isValid;
}

OAIDocumentSuggesterOptions OAISuggester::getDocumentSuggesterOptions() const {
    return m_document_suggester_options;
}
void OAISuggester::setDocumentSuggesterOptions(const OAIDocumentSuggesterOptions &document_suggester_options) {
    m_document_suggester_options = document_suggester_options;
    m_document_suggester_options_isSet = true;
}

bool OAISuggester::is_document_suggester_options_Set() const{
    return m_document_suggester_options_isSet;
}

bool OAISuggester::is_document_suggester_options_Valid() const{
    return m_document_suggester_options_isValid;
}

bool OAISuggester::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggester_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_suggester_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggester::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_suggester_name_isValid && m_document_suggester_options_isValid && true;
}

} // namespace OpenAPI
