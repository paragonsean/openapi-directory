/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisSchemeLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisSchemeLanguage::OAIAnalysisSchemeLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisSchemeLanguage::OAIAnalysisSchemeLanguage() {
    this->initializeModel();
}

OAIAnalysisSchemeLanguage::~OAIAnalysisSchemeLanguage() {}

void OAIAnalysisSchemeLanguage::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnalysisSchemeLanguage::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnalysisSchemeLanguage::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ar", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::AR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::BG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ca", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::CS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("da", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::DA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("el", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::EL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::EN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::EU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::FA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fi", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::FI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ga", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::GA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gl", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::GL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("he", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::HE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hi", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::HI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::HU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::HY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ja", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::JA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ko", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::KO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lv", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::LV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mul", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::MUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nl", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("no", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::NO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::RO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ru", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::RU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sv", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::SV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("th", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::TH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::TR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh-Hans", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::ZH_HANS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh-Hant", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisSchemeLanguage::ZH_HANT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnalysisSchemeLanguage::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnalysisSchemeLanguage::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnalysisSchemeLanguage::AR:
            val = "ar";
            break;
        case eOAIAnalysisSchemeLanguage::BG:
            val = "bg";
            break;
        case eOAIAnalysisSchemeLanguage::CA:
            val = "ca";
            break;
        case eOAIAnalysisSchemeLanguage::CS:
            val = "cs";
            break;
        case eOAIAnalysisSchemeLanguage::DA:
            val = "da";
            break;
        case eOAIAnalysisSchemeLanguage::DE:
            val = "de";
            break;
        case eOAIAnalysisSchemeLanguage::EL:
            val = "el";
            break;
        case eOAIAnalysisSchemeLanguage::EN:
            val = "en";
            break;
        case eOAIAnalysisSchemeLanguage::ES:
            val = "es";
            break;
        case eOAIAnalysisSchemeLanguage::EU:
            val = "eu";
            break;
        case eOAIAnalysisSchemeLanguage::FA:
            val = "fa";
            break;
        case eOAIAnalysisSchemeLanguage::FI:
            val = "fi";
            break;
        case eOAIAnalysisSchemeLanguage::FR:
            val = "fr";
            break;
        case eOAIAnalysisSchemeLanguage::GA:
            val = "ga";
            break;
        case eOAIAnalysisSchemeLanguage::GL:
            val = "gl";
            break;
        case eOAIAnalysisSchemeLanguage::HE:
            val = "he";
            break;
        case eOAIAnalysisSchemeLanguage::HI:
            val = "hi";
            break;
        case eOAIAnalysisSchemeLanguage::HU:
            val = "hu";
            break;
        case eOAIAnalysisSchemeLanguage::HY:
            val = "hy";
            break;
        case eOAIAnalysisSchemeLanguage::ID:
            val = "id";
            break;
        case eOAIAnalysisSchemeLanguage::IT:
            val = "it";
            break;
        case eOAIAnalysisSchemeLanguage::JA:
            val = "ja";
            break;
        case eOAIAnalysisSchemeLanguage::KO:
            val = "ko";
            break;
        case eOAIAnalysisSchemeLanguage::LV:
            val = "lv";
            break;
        case eOAIAnalysisSchemeLanguage::MUL:
            val = "mul";
            break;
        case eOAIAnalysisSchemeLanguage::NL:
            val = "nl";
            break;
        case eOAIAnalysisSchemeLanguage::NO:
            val = "no";
            break;
        case eOAIAnalysisSchemeLanguage::PT:
            val = "pt";
            break;
        case eOAIAnalysisSchemeLanguage::RO:
            val = "ro";
            break;
        case eOAIAnalysisSchemeLanguage::RU:
            val = "ru";
            break;
        case eOAIAnalysisSchemeLanguage::SV:
            val = "sv";
            break;
        case eOAIAnalysisSchemeLanguage::TH:
            val = "th";
            break;
        case eOAIAnalysisSchemeLanguage::TR:
            val = "tr";
            break;
        case eOAIAnalysisSchemeLanguage::ZH_HANS:
            val = "zh-Hans";
            break;
        case eOAIAnalysisSchemeLanguage::ZH_HANT:
            val = "zh-Hant";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnalysisSchemeLanguage::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnalysisSchemeLanguage::eOAIAnalysisSchemeLanguage OAIAnalysisSchemeLanguage::getValue() const {
    return m_value;
}

void OAIAnalysisSchemeLanguage::setValue(const OAIAnalysisSchemeLanguage::eOAIAnalysisSchemeLanguage& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnalysisSchemeLanguage::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnalysisSchemeLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
