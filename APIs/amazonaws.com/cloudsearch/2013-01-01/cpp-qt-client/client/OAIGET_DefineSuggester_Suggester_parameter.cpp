/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_DefineSuggester_Suggester_parameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_DefineSuggester_Suggester_parameter::OAIGET_DefineSuggester_Suggester_parameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_DefineSuggester_Suggester_parameter::OAIGET_DefineSuggester_Suggester_parameter() {
    this->initializeModel();
}

OAIGET_DefineSuggester_Suggester_parameter::~OAIGET_DefineSuggester_Suggester_parameter() {}

void OAIGET_DefineSuggester_Suggester_parameter::initializeModel() {

    m_suggester_name_isSet = false;
    m_suggester_name_isValid = false;

    m_document_suggester_options_isSet = false;
    m_document_suggester_options_isValid = false;
}

void OAIGET_DefineSuggester_Suggester_parameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_DefineSuggester_Suggester_parameter::fromJsonObject(QJsonObject json) {

    m_suggester_name_isValid = ::OpenAPI::fromJsonValue(m_suggester_name, json[QString("SuggesterName")]);
    m_suggester_name_isSet = !json[QString("SuggesterName")].isNull() && m_suggester_name_isValid;

    m_document_suggester_options_isValid = ::OpenAPI::fromJsonValue(m_document_suggester_options, json[QString("DocumentSuggesterOptions")]);
    m_document_suggester_options_isSet = !json[QString("DocumentSuggesterOptions")].isNull() && m_document_suggester_options_isValid;
}

QString OAIGET_DefineSuggester_Suggester_parameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_DefineSuggester_Suggester_parameter::asJsonObject() const {
    QJsonObject obj;
    if (m_suggester_name_isSet) {
        obj.insert(QString("SuggesterName"), ::OpenAPI::toJsonValue(m_suggester_name));
    }
    if (m_document_suggester_options.isSet()) {
        obj.insert(QString("DocumentSuggesterOptions"), ::OpenAPI::toJsonValue(m_document_suggester_options));
    }
    return obj;
}

QString OAIGET_DefineSuggester_Suggester_parameter::getSuggesterName() const {
    return m_suggester_name;
}
void OAIGET_DefineSuggester_Suggester_parameter::setSuggesterName(const QString &suggester_name) {
    m_suggester_name = suggester_name;
    m_suggester_name_isSet = true;
}

bool OAIGET_DefineSuggester_Suggester_parameter::is_suggester_name_Set() const{
    return m_suggester_name_isSet;
}

bool OAIGET_DefineSuggester_Suggester_parameter::is_suggester_name_Valid() const{
    return m_suggester_name_isValid;
}

OAIDocumentSuggesterOptions OAIGET_DefineSuggester_Suggester_parameter::getDocumentSuggesterOptions() const {
    return m_document_suggester_options;
}
void OAIGET_DefineSuggester_Suggester_parameter::setDocumentSuggesterOptions(const OAIDocumentSuggesterOptions &document_suggester_options) {
    m_document_suggester_options = document_suggester_options;
    m_document_suggester_options_isSet = true;
}

bool OAIGET_DefineSuggester_Suggester_parameter::is_document_suggester_options_Set() const{
    return m_document_suggester_options_isSet;
}

bool OAIGET_DefineSuggester_Suggester_parameter::is_document_suggester_options_Valid() const{
    return m_document_suggester_options_isValid;
}

bool OAIGET_DefineSuggester_Suggester_parameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggester_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_suggester_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_DefineSuggester_Suggester_parameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_suggester_name_isValid && m_document_suggester_options_isValid && true;
}

} // namespace OpenAPI
