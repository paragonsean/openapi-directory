/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSuggestersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSuggestersResponse::OAIDescribeSuggestersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSuggestersResponse::OAIDescribeSuggestersResponse() {
    this->initializeModel();
}

OAIDescribeSuggestersResponse::~OAIDescribeSuggestersResponse() {}

void OAIDescribeSuggestersResponse::initializeModel() {

    m_suggesters_isSet = false;
    m_suggesters_isValid = false;
}

void OAIDescribeSuggestersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSuggestersResponse::fromJsonObject(QJsonObject json) {

    m_suggesters_isValid = ::OpenAPI::fromJsonValue(m_suggesters, json[QString("Suggesters")]);
    m_suggesters_isSet = !json[QString("Suggesters")].isNull() && m_suggesters_isValid;
}

QString OAIDescribeSuggestersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSuggestersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_suggesters.isSet()) {
        obj.insert(QString("Suggesters"), ::OpenAPI::toJsonValue(m_suggesters));
    }
    return obj;
}

QList OAIDescribeSuggestersResponse::getSuggesters() const {
    return m_suggesters;
}
void OAIDescribeSuggestersResponse::setSuggesters(const QList &suggesters) {
    m_suggesters = suggesters;
    m_suggesters_isSet = true;
}

bool OAIDescribeSuggestersResponse::is_suggesters_Set() const{
    return m_suggesters_isSet;
}

bool OAIDescribeSuggestersResponse::is_suggesters_Valid() const{
    return m_suggesters_isValid;
}

bool OAIDescribeSuggestersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggesters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSuggestersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_suggesters_isValid && true;
}

} // namespace OpenAPI
