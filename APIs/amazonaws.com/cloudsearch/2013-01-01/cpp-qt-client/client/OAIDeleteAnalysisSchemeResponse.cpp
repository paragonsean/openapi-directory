/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAnalysisSchemeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAnalysisSchemeResponse::OAIDeleteAnalysisSchemeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAnalysisSchemeResponse::OAIDeleteAnalysisSchemeResponse() {
    this->initializeModel();
}

OAIDeleteAnalysisSchemeResponse::~OAIDeleteAnalysisSchemeResponse() {}

void OAIDeleteAnalysisSchemeResponse::initializeModel() {

    m_analysis_scheme_isSet = false;
    m_analysis_scheme_isValid = false;
}

void OAIDeleteAnalysisSchemeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAnalysisSchemeResponse::fromJsonObject(QJsonObject json) {

    m_analysis_scheme_isValid = ::OpenAPI::fromJsonValue(m_analysis_scheme, json[QString("AnalysisScheme")]);
    m_analysis_scheme_isSet = !json[QString("AnalysisScheme")].isNull() && m_analysis_scheme_isValid;
}

QString OAIDeleteAnalysisSchemeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAnalysisSchemeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_scheme.isSet()) {
        obj.insert(QString("AnalysisScheme"), ::OpenAPI::toJsonValue(m_analysis_scheme));
    }
    return obj;
}

OAIDeleteAnalysisSchemeResponse_AnalysisScheme OAIDeleteAnalysisSchemeResponse::getAnalysisScheme() const {
    return m_analysis_scheme;
}
void OAIDeleteAnalysisSchemeResponse::setAnalysisScheme(const OAIDeleteAnalysisSchemeResponse_AnalysisScheme &analysis_scheme) {
    m_analysis_scheme = analysis_scheme;
    m_analysis_scheme_isSet = true;
}

bool OAIDeleteAnalysisSchemeResponse::is_analysis_scheme_Set() const{
    return m_analysis_scheme_isSet;
}

bool OAIDeleteAnalysisSchemeResponse::is_analysis_scheme_Valid() const{
    return m_analysis_scheme_isValid;
}

bool OAIDeleteAnalysisSchemeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAnalysisSchemeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_scheme_isValid && true;
}

} // namespace OpenAPI
