/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextOptions::OAITextOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextOptions::OAITextOptions() {
    this->initializeModel();
}

OAITextOptions::~OAITextOptions() {}

void OAITextOptions::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_source_field_isSet = false;
    m_source_field_isValid = false;

    m_return_enabled_isSet = false;
    m_return_enabled_isValid = false;

    m_sort_enabled_isSet = false;
    m_sort_enabled_isValid = false;

    m_highlight_enabled_isSet = false;
    m_highlight_enabled_isValid = false;

    m_analysis_scheme_isSet = false;
    m_analysis_scheme_isValid = false;
}

void OAITextOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextOptions::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_source_field_isValid = ::OpenAPI::fromJsonValue(m_source_field, json[QString("SourceField")]);
    m_source_field_isSet = !json[QString("SourceField")].isNull() && m_source_field_isValid;

    m_return_enabled_isValid = ::OpenAPI::fromJsonValue(m_return_enabled, json[QString("ReturnEnabled")]);
    m_return_enabled_isSet = !json[QString("ReturnEnabled")].isNull() && m_return_enabled_isValid;

    m_sort_enabled_isValid = ::OpenAPI::fromJsonValue(m_sort_enabled, json[QString("SortEnabled")]);
    m_sort_enabled_isSet = !json[QString("SortEnabled")].isNull() && m_sort_enabled_isValid;

    m_highlight_enabled_isValid = ::OpenAPI::fromJsonValue(m_highlight_enabled, json[QString("HighlightEnabled")]);
    m_highlight_enabled_isSet = !json[QString("HighlightEnabled")].isNull() && m_highlight_enabled_isValid;

    m_analysis_scheme_isValid = ::OpenAPI::fromJsonValue(m_analysis_scheme, json[QString("AnalysisScheme")]);
    m_analysis_scheme_isSet = !json[QString("AnalysisScheme")].isNull() && m_analysis_scheme_isValid;
}

QString OAITextOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_source_field_isSet) {
        obj.insert(QString("SourceField"), ::OpenAPI::toJsonValue(m_source_field));
    }
    if (m_return_enabled_isSet) {
        obj.insert(QString("ReturnEnabled"), ::OpenAPI::toJsonValue(m_return_enabled));
    }
    if (m_sort_enabled_isSet) {
        obj.insert(QString("SortEnabled"), ::OpenAPI::toJsonValue(m_sort_enabled));
    }
    if (m_highlight_enabled_isSet) {
        obj.insert(QString("HighlightEnabled"), ::OpenAPI::toJsonValue(m_highlight_enabled));
    }
    if (m_analysis_scheme_isSet) {
        obj.insert(QString("AnalysisScheme"), ::OpenAPI::toJsonValue(m_analysis_scheme));
    }
    return obj;
}

QString OAITextOptions::getDefaultValue() const {
    return m_default_value;
}
void OAITextOptions::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAITextOptions::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAITextOptions::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAITextOptions::getSourceField() const {
    return m_source_field;
}
void OAITextOptions::setSourceField(const QString &source_field) {
    m_source_field = source_field;
    m_source_field_isSet = true;
}

bool OAITextOptions::is_source_field_Set() const{
    return m_source_field_isSet;
}

bool OAITextOptions::is_source_field_Valid() const{
    return m_source_field_isValid;
}

bool OAITextOptions::getReturnEnabled() const {
    return m_return_enabled;
}
void OAITextOptions::setReturnEnabled(const bool &return_enabled) {
    m_return_enabled = return_enabled;
    m_return_enabled_isSet = true;
}

bool OAITextOptions::is_return_enabled_Set() const{
    return m_return_enabled_isSet;
}

bool OAITextOptions::is_return_enabled_Valid() const{
    return m_return_enabled_isValid;
}

bool OAITextOptions::getSortEnabled() const {
    return m_sort_enabled;
}
void OAITextOptions::setSortEnabled(const bool &sort_enabled) {
    m_sort_enabled = sort_enabled;
    m_sort_enabled_isSet = true;
}

bool OAITextOptions::is_sort_enabled_Set() const{
    return m_sort_enabled_isSet;
}

bool OAITextOptions::is_sort_enabled_Valid() const{
    return m_sort_enabled_isValid;
}

bool OAITextOptions::getHighlightEnabled() const {
    return m_highlight_enabled;
}
void OAITextOptions::setHighlightEnabled(const bool &highlight_enabled) {
    m_highlight_enabled = highlight_enabled;
    m_highlight_enabled_isSet = true;
}

bool OAITextOptions::is_highlight_enabled_Set() const{
    return m_highlight_enabled_isSet;
}

bool OAITextOptions::is_highlight_enabled_Valid() const{
    return m_highlight_enabled_isValid;
}

QString OAITextOptions::getAnalysisScheme() const {
    return m_analysis_scheme;
}
void OAITextOptions::setAnalysisScheme(const QString &analysis_scheme) {
    m_analysis_scheme = analysis_scheme;
    m_analysis_scheme_isSet = true;
}

bool OAITextOptions::is_analysis_scheme_Set() const{
    return m_analysis_scheme_isSet;
}

bool OAITextOptions::is_analysis_scheme_Valid() const{
    return m_analysis_scheme_isValid;
}

bool OAITextOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
