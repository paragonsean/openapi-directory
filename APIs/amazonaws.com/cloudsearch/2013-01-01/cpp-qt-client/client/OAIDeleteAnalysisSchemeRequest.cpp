/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAnalysisSchemeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAnalysisSchemeRequest::OAIDeleteAnalysisSchemeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAnalysisSchemeRequest::OAIDeleteAnalysisSchemeRequest() {
    this->initializeModel();
}

OAIDeleteAnalysisSchemeRequest::~OAIDeleteAnalysisSchemeRequest() {}

void OAIDeleteAnalysisSchemeRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_analysis_scheme_name_isSet = false;
    m_analysis_scheme_name_isValid = false;
}

void OAIDeleteAnalysisSchemeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAnalysisSchemeRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_analysis_scheme_name_isValid = ::OpenAPI::fromJsonValue(m_analysis_scheme_name, json[QString("AnalysisSchemeName")]);
    m_analysis_scheme_name_isSet = !json[QString("AnalysisSchemeName")].isNull() && m_analysis_scheme_name_isValid;
}

QString OAIDeleteAnalysisSchemeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAnalysisSchemeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_analysis_scheme_name_isSet) {
        obj.insert(QString("AnalysisSchemeName"), ::OpenAPI::toJsonValue(m_analysis_scheme_name));
    }
    return obj;
}

QString OAIDeleteAnalysisSchemeRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDeleteAnalysisSchemeRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDeleteAnalysisSchemeRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDeleteAnalysisSchemeRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDeleteAnalysisSchemeRequest::getAnalysisSchemeName() const {
    return m_analysis_scheme_name;
}
void OAIDeleteAnalysisSchemeRequest::setAnalysisSchemeName(const QString &analysis_scheme_name) {
    m_analysis_scheme_name = analysis_scheme_name;
    m_analysis_scheme_name_isSet = true;
}

bool OAIDeleteAnalysisSchemeRequest::is_analysis_scheme_name_Set() const{
    return m_analysis_scheme_name_isSet;
}

bool OAIDeleteAnalysisSchemeRequest::is_analysis_scheme_name_Valid() const{
    return m_analysis_scheme_name_isValid;
}

bool OAIDeleteAnalysisSchemeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_scheme_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAnalysisSchemeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_analysis_scheme_name_isValid && true;
}

} // namespace OpenAPI
