/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScalingParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScalingParameters::OAIScalingParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScalingParameters::OAIScalingParameters() {
    this->initializeModel();
}

OAIScalingParameters::~OAIScalingParameters() {}

void OAIScalingParameters::initializeModel() {

    m_desired_instance_type_isSet = false;
    m_desired_instance_type_isValid = false;

    m_desired_replication_count_isSet = false;
    m_desired_replication_count_isValid = false;

    m_desired_partition_count_isSet = false;
    m_desired_partition_count_isValid = false;
}

void OAIScalingParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScalingParameters::fromJsonObject(QJsonObject json) {

    m_desired_instance_type_isValid = ::OpenAPI::fromJsonValue(m_desired_instance_type, json[QString("DesiredInstanceType")]);
    m_desired_instance_type_isSet = !json[QString("DesiredInstanceType")].isNull() && m_desired_instance_type_isValid;

    m_desired_replication_count_isValid = ::OpenAPI::fromJsonValue(m_desired_replication_count, json[QString("DesiredReplicationCount")]);
    m_desired_replication_count_isSet = !json[QString("DesiredReplicationCount")].isNull() && m_desired_replication_count_isValid;

    m_desired_partition_count_isValid = ::OpenAPI::fromJsonValue(m_desired_partition_count, json[QString("DesiredPartitionCount")]);
    m_desired_partition_count_isSet = !json[QString("DesiredPartitionCount")].isNull() && m_desired_partition_count_isValid;
}

QString OAIScalingParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScalingParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_desired_instance_type.isSet()) {
        obj.insert(QString("DesiredInstanceType"), ::OpenAPI::toJsonValue(m_desired_instance_type));
    }
    if (m_desired_replication_count_isSet) {
        obj.insert(QString("DesiredReplicationCount"), ::OpenAPI::toJsonValue(m_desired_replication_count));
    }
    if (m_desired_partition_count_isSet) {
        obj.insert(QString("DesiredPartitionCount"), ::OpenAPI::toJsonValue(m_desired_partition_count));
    }
    return obj;
}

OAIPartitionInstanceType OAIScalingParameters::getDesiredInstanceType() const {
    return m_desired_instance_type;
}
void OAIScalingParameters::setDesiredInstanceType(const OAIPartitionInstanceType &desired_instance_type) {
    m_desired_instance_type = desired_instance_type;
    m_desired_instance_type_isSet = true;
}

bool OAIScalingParameters::is_desired_instance_type_Set() const{
    return m_desired_instance_type_isSet;
}

bool OAIScalingParameters::is_desired_instance_type_Valid() const{
    return m_desired_instance_type_isValid;
}

qint32 OAIScalingParameters::getDesiredReplicationCount() const {
    return m_desired_replication_count;
}
void OAIScalingParameters::setDesiredReplicationCount(const qint32 &desired_replication_count) {
    m_desired_replication_count = desired_replication_count;
    m_desired_replication_count_isSet = true;
}

bool OAIScalingParameters::is_desired_replication_count_Set() const{
    return m_desired_replication_count_isSet;
}

bool OAIScalingParameters::is_desired_replication_count_Valid() const{
    return m_desired_replication_count_isValid;
}

qint32 OAIScalingParameters::getDesiredPartitionCount() const {
    return m_desired_partition_count;
}
void OAIScalingParameters::setDesiredPartitionCount(const qint32 &desired_partition_count) {
    m_desired_partition_count = desired_partition_count;
    m_desired_partition_count_isSet = true;
}

bool OAIScalingParameters::is_desired_partition_count_Set() const{
    return m_desired_partition_count_isSet;
}

bool OAIScalingParameters::is_desired_partition_count_Valid() const{
    return m_desired_partition_count_isValid;
}

bool OAIScalingParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desired_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_replication_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_partition_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScalingParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
