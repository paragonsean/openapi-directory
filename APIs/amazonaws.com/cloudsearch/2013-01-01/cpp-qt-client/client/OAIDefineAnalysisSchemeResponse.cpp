/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefineAnalysisSchemeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefineAnalysisSchemeResponse::OAIDefineAnalysisSchemeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefineAnalysisSchemeResponse::OAIDefineAnalysisSchemeResponse() {
    this->initializeModel();
}

OAIDefineAnalysisSchemeResponse::~OAIDefineAnalysisSchemeResponse() {}

void OAIDefineAnalysisSchemeResponse::initializeModel() {

    m_analysis_scheme_isSet = false;
    m_analysis_scheme_isValid = false;
}

void OAIDefineAnalysisSchemeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefineAnalysisSchemeResponse::fromJsonObject(QJsonObject json) {

    m_analysis_scheme_isValid = ::OpenAPI::fromJsonValue(m_analysis_scheme, json[QString("AnalysisScheme")]);
    m_analysis_scheme_isSet = !json[QString("AnalysisScheme")].isNull() && m_analysis_scheme_isValid;
}

QString OAIDefineAnalysisSchemeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefineAnalysisSchemeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_scheme.isSet()) {
        obj.insert(QString("AnalysisScheme"), ::OpenAPI::toJsonValue(m_analysis_scheme));
    }
    return obj;
}

OAIAnalysisSchemeStatus OAIDefineAnalysisSchemeResponse::getAnalysisScheme() const {
    return m_analysis_scheme;
}
void OAIDefineAnalysisSchemeResponse::setAnalysisScheme(const OAIAnalysisSchemeStatus &analysis_scheme) {
    m_analysis_scheme = analysis_scheme;
    m_analysis_scheme_isSet = true;
}

bool OAIDefineAnalysisSchemeResponse::is_analysis_scheme_Set() const{
    return m_analysis_scheme_isSet;
}

bool OAIDefineAnalysisSchemeResponse::is_analysis_scheme_Valid() const{
    return m_analysis_scheme_isValid;
}

bool OAIDefineAnalysisSchemeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefineAnalysisSchemeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_scheme_isValid && true;
}

} // namespace OpenAPI
