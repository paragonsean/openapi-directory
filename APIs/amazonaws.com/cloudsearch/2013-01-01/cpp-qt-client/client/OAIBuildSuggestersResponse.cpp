/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildSuggestersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildSuggestersResponse::OAIBuildSuggestersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildSuggestersResponse::OAIBuildSuggestersResponse() {
    this->initializeModel();
}

OAIBuildSuggestersResponse::~OAIBuildSuggestersResponse() {}

void OAIBuildSuggestersResponse::initializeModel() {

    m_field_names_isSet = false;
    m_field_names_isValid = false;
}

void OAIBuildSuggestersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildSuggestersResponse::fromJsonObject(QJsonObject json) {

    m_field_names_isValid = ::OpenAPI::fromJsonValue(m_field_names, json[QString("FieldNames")]);
    m_field_names_isSet = !json[QString("FieldNames")].isNull() && m_field_names_isValid;
}

QString OAIBuildSuggestersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildSuggestersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_field_names.size() > 0) {
        obj.insert(QString("FieldNames"), ::OpenAPI::toJsonValue(m_field_names));
    }
    return obj;
}

QList<QString> OAIBuildSuggestersResponse::getFieldNames() const {
    return m_field_names;
}
void OAIBuildSuggestersResponse::setFieldNames(const QList<QString> &field_names) {
    m_field_names = field_names;
    m_field_names_isSet = true;
}

bool OAIBuildSuggestersResponse::is_field_names_Set() const{
    return m_field_names_isSet;
}

bool OAIBuildSuggestersResponse::is_field_names_Valid() const{
    return m_field_names_isValid;
}

bool OAIBuildSuggestersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildSuggestersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
