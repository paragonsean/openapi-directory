/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisScheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisScheme::OAIAnalysisScheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisScheme::OAIAnalysisScheme() {
    this->initializeModel();
}

OAIAnalysisScheme::~OAIAnalysisScheme() {}

void OAIAnalysisScheme::initializeModel() {

    m_analysis_scheme_name_isSet = false;
    m_analysis_scheme_name_isValid = false;

    m_analysis_scheme_language_isSet = false;
    m_analysis_scheme_language_isValid = false;

    m_analysis_options_isSet = false;
    m_analysis_options_isValid = false;
}

void OAIAnalysisScheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisScheme::fromJsonObject(QJsonObject json) {

    m_analysis_scheme_name_isValid = ::OpenAPI::fromJsonValue(m_analysis_scheme_name, json[QString("AnalysisSchemeName")]);
    m_analysis_scheme_name_isSet = !json[QString("AnalysisSchemeName")].isNull() && m_analysis_scheme_name_isValid;

    m_analysis_scheme_language_isValid = ::OpenAPI::fromJsonValue(m_analysis_scheme_language, json[QString("AnalysisSchemeLanguage")]);
    m_analysis_scheme_language_isSet = !json[QString("AnalysisSchemeLanguage")].isNull() && m_analysis_scheme_language_isValid;

    m_analysis_options_isValid = ::OpenAPI::fromJsonValue(m_analysis_options, json[QString("AnalysisOptions")]);
    m_analysis_options_isSet = !json[QString("AnalysisOptions")].isNull() && m_analysis_options_isValid;
}

QString OAIAnalysisScheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisScheme::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_scheme_name_isSet) {
        obj.insert(QString("AnalysisSchemeName"), ::OpenAPI::toJsonValue(m_analysis_scheme_name));
    }
    if (m_analysis_scheme_language.isSet()) {
        obj.insert(QString("AnalysisSchemeLanguage"), ::OpenAPI::toJsonValue(m_analysis_scheme_language));
    }
    if (m_analysis_options.isSet()) {
        obj.insert(QString("AnalysisOptions"), ::OpenAPI::toJsonValue(m_analysis_options));
    }
    return obj;
}

QString OAIAnalysisScheme::getAnalysisSchemeName() const {
    return m_analysis_scheme_name;
}
void OAIAnalysisScheme::setAnalysisSchemeName(const QString &analysis_scheme_name) {
    m_analysis_scheme_name = analysis_scheme_name;
    m_analysis_scheme_name_isSet = true;
}

bool OAIAnalysisScheme::is_analysis_scheme_name_Set() const{
    return m_analysis_scheme_name_isSet;
}

bool OAIAnalysisScheme::is_analysis_scheme_name_Valid() const{
    return m_analysis_scheme_name_isValid;
}

OAIAnalysisSchemeLanguage OAIAnalysisScheme::getAnalysisSchemeLanguage() const {
    return m_analysis_scheme_language;
}
void OAIAnalysisScheme::setAnalysisSchemeLanguage(const OAIAnalysisSchemeLanguage &analysis_scheme_language) {
    m_analysis_scheme_language = analysis_scheme_language;
    m_analysis_scheme_language_isSet = true;
}

bool OAIAnalysisScheme::is_analysis_scheme_language_Set() const{
    return m_analysis_scheme_language_isSet;
}

bool OAIAnalysisScheme::is_analysis_scheme_language_Valid() const{
    return m_analysis_scheme_language_isValid;
}

OAIAnalysisOptions OAIAnalysisScheme::getAnalysisOptions() const {
    return m_analysis_options;
}
void OAIAnalysisScheme::setAnalysisOptions(const OAIAnalysisOptions &analysis_options) {
    m_analysis_options = analysis_options;
    m_analysis_options_isSet = true;
}

bool OAIAnalysisScheme::is_analysis_options_Set() const{
    return m_analysis_options_isSet;
}

bool OAIAnalysisScheme::is_analysis_options_Valid() const{
    return m_analysis_options_isValid;
}

bool OAIAnalysisScheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_scheme_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_scheme_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisScheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_scheme_name_isValid && m_analysis_scheme_language_isValid && true;
}

} // namespace OpenAPI
