/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILimits::OAILimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILimits::OAILimits() {
    this->initializeModel();
}

OAILimits::~OAILimits() {}

void OAILimits::initializeModel() {

    m_maximum_replication_count_isSet = false;
    m_maximum_replication_count_isValid = false;

    m_maximum_partition_count_isSet = false;
    m_maximum_partition_count_isValid = false;
}

void OAILimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILimits::fromJsonObject(QJsonObject json) {

    m_maximum_replication_count_isValid = ::OpenAPI::fromJsonValue(m_maximum_replication_count, json[QString("MaximumReplicationCount")]);
    m_maximum_replication_count_isSet = !json[QString("MaximumReplicationCount")].isNull() && m_maximum_replication_count_isValid;

    m_maximum_partition_count_isValid = ::OpenAPI::fromJsonValue(m_maximum_partition_count, json[QString("MaximumPartitionCount")]);
    m_maximum_partition_count_isSet = !json[QString("MaximumPartitionCount")].isNull() && m_maximum_partition_count_isValid;
}

QString OAILimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILimits::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_replication_count_isSet) {
        obj.insert(QString("MaximumReplicationCount"), ::OpenAPI::toJsonValue(m_maximum_replication_count));
    }
    if (m_maximum_partition_count_isSet) {
        obj.insert(QString("MaximumPartitionCount"), ::OpenAPI::toJsonValue(m_maximum_partition_count));
    }
    return obj;
}

qint32 OAILimits::getMaximumReplicationCount() const {
    return m_maximum_replication_count;
}
void OAILimits::setMaximumReplicationCount(const qint32 &maximum_replication_count) {
    m_maximum_replication_count = maximum_replication_count;
    m_maximum_replication_count_isSet = true;
}

bool OAILimits::is_maximum_replication_count_Set() const{
    return m_maximum_replication_count_isSet;
}

bool OAILimits::is_maximum_replication_count_Valid() const{
    return m_maximum_replication_count_isValid;
}

qint32 OAILimits::getMaximumPartitionCount() const {
    return m_maximum_partition_count;
}
void OAILimits::setMaximumPartitionCount(const qint32 &maximum_partition_count) {
    m_maximum_partition_count = maximum_partition_count;
    m_maximum_partition_count_isSet = true;
}

bool OAILimits::is_maximum_partition_count_Set() const{
    return m_maximum_partition_count_isSet;
}

bool OAILimits::is_maximum_partition_count_Valid() const{
    return m_maximum_partition_count_isValid;
}

bool OAILimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_replication_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_partition_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_maximum_replication_count_isValid && m_maximum_partition_count_isValid && true;
}

} // namespace OpenAPI
