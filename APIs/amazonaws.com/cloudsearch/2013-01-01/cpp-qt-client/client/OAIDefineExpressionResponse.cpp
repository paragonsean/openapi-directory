/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefineExpressionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefineExpressionResponse::OAIDefineExpressionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefineExpressionResponse::OAIDefineExpressionResponse() {
    this->initializeModel();
}

OAIDefineExpressionResponse::~OAIDefineExpressionResponse() {}

void OAIDefineExpressionResponse::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;
}

void OAIDefineExpressionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefineExpressionResponse::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;
}

QString OAIDefineExpressionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefineExpressionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_expression.isSet()) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    return obj;
}

OAIExpressionStatus OAIDefineExpressionResponse::getExpression() const {
    return m_expression;
}
void OAIDefineExpressionResponse::setExpression(const OAIExpressionStatus &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIDefineExpressionResponse::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIDefineExpressionResponse::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAIDefineExpressionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefineExpressionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && true;
}

} // namespace OpenAPI
