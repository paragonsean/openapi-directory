/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiteralArrayOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiteralArrayOptions::OAILiteralArrayOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiteralArrayOptions::OAILiteralArrayOptions() {
    this->initializeModel();
}

OAILiteralArrayOptions::~OAILiteralArrayOptions() {}

void OAILiteralArrayOptions::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_source_fields_isSet = false;
    m_source_fields_isValid = false;

    m_facet_enabled_isSet = false;
    m_facet_enabled_isValid = false;

    m_search_enabled_isSet = false;
    m_search_enabled_isValid = false;

    m_return_enabled_isSet = false;
    m_return_enabled_isValid = false;
}

void OAILiteralArrayOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiteralArrayOptions::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_source_fields_isValid = ::OpenAPI::fromJsonValue(m_source_fields, json[QString("SourceFields")]);
    m_source_fields_isSet = !json[QString("SourceFields")].isNull() && m_source_fields_isValid;

    m_facet_enabled_isValid = ::OpenAPI::fromJsonValue(m_facet_enabled, json[QString("FacetEnabled")]);
    m_facet_enabled_isSet = !json[QString("FacetEnabled")].isNull() && m_facet_enabled_isValid;

    m_search_enabled_isValid = ::OpenAPI::fromJsonValue(m_search_enabled, json[QString("SearchEnabled")]);
    m_search_enabled_isSet = !json[QString("SearchEnabled")].isNull() && m_search_enabled_isValid;

    m_return_enabled_isValid = ::OpenAPI::fromJsonValue(m_return_enabled, json[QString("ReturnEnabled")]);
    m_return_enabled_isSet = !json[QString("ReturnEnabled")].isNull() && m_return_enabled_isValid;
}

QString OAILiteralArrayOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiteralArrayOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_source_fields_isSet) {
        obj.insert(QString("SourceFields"), ::OpenAPI::toJsonValue(m_source_fields));
    }
    if (m_facet_enabled_isSet) {
        obj.insert(QString("FacetEnabled"), ::OpenAPI::toJsonValue(m_facet_enabled));
    }
    if (m_search_enabled_isSet) {
        obj.insert(QString("SearchEnabled"), ::OpenAPI::toJsonValue(m_search_enabled));
    }
    if (m_return_enabled_isSet) {
        obj.insert(QString("ReturnEnabled"), ::OpenAPI::toJsonValue(m_return_enabled));
    }
    return obj;
}

QString OAILiteralArrayOptions::getDefaultValue() const {
    return m_default_value;
}
void OAILiteralArrayOptions::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAILiteralArrayOptions::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAILiteralArrayOptions::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAILiteralArrayOptions::getSourceFields() const {
    return m_source_fields;
}
void OAILiteralArrayOptions::setSourceFields(const QString &source_fields) {
    m_source_fields = source_fields;
    m_source_fields_isSet = true;
}

bool OAILiteralArrayOptions::is_source_fields_Set() const{
    return m_source_fields_isSet;
}

bool OAILiteralArrayOptions::is_source_fields_Valid() const{
    return m_source_fields_isValid;
}

bool OAILiteralArrayOptions::getFacetEnabled() const {
    return m_facet_enabled;
}
void OAILiteralArrayOptions::setFacetEnabled(const bool &facet_enabled) {
    m_facet_enabled = facet_enabled;
    m_facet_enabled_isSet = true;
}

bool OAILiteralArrayOptions::is_facet_enabled_Set() const{
    return m_facet_enabled_isSet;
}

bool OAILiteralArrayOptions::is_facet_enabled_Valid() const{
    return m_facet_enabled_isValid;
}

bool OAILiteralArrayOptions::getSearchEnabled() const {
    return m_search_enabled;
}
void OAILiteralArrayOptions::setSearchEnabled(const bool &search_enabled) {
    m_search_enabled = search_enabled;
    m_search_enabled_isSet = true;
}

bool OAILiteralArrayOptions::is_search_enabled_Set() const{
    return m_search_enabled_isSet;
}

bool OAILiteralArrayOptions::is_search_enabled_Valid() const{
    return m_search_enabled_isValid;
}

bool OAILiteralArrayOptions::getReturnEnabled() const {
    return m_return_enabled;
}
void OAILiteralArrayOptions::setReturnEnabled(const bool &return_enabled) {
    m_return_enabled = return_enabled;
    m_return_enabled_isSet = true;
}

bool OAILiteralArrayOptions::is_return_enabled_Set() const{
    return m_return_enabled_isSet;
}

bool OAILiteralArrayOptions::is_return_enabled_Valid() const{
    return m_return_enabled_isValid;
}

bool OAILiteralArrayOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiteralArrayOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
