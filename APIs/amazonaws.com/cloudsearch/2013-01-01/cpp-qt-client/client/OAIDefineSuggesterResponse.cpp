/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefineSuggesterResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefineSuggesterResponse::OAIDefineSuggesterResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefineSuggesterResponse::OAIDefineSuggesterResponse() {
    this->initializeModel();
}

OAIDefineSuggesterResponse::~OAIDefineSuggesterResponse() {}

void OAIDefineSuggesterResponse::initializeModel() {

    m_suggester_isSet = false;
    m_suggester_isValid = false;
}

void OAIDefineSuggesterResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefineSuggesterResponse::fromJsonObject(QJsonObject json) {

    m_suggester_isValid = ::OpenAPI::fromJsonValue(m_suggester, json[QString("Suggester")]);
    m_suggester_isSet = !json[QString("Suggester")].isNull() && m_suggester_isValid;
}

QString OAIDefineSuggesterResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefineSuggesterResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_suggester.isSet()) {
        obj.insert(QString("Suggester"), ::OpenAPI::toJsonValue(m_suggester));
    }
    return obj;
}

OAISuggesterStatus OAIDefineSuggesterResponse::getSuggester() const {
    return m_suggester;
}
void OAIDefineSuggesterResponse::setSuggester(const OAISuggesterStatus &suggester) {
    m_suggester = suggester;
    m_suggester_isSet = true;
}

bool OAIDefineSuggesterResponse::is_suggester_Set() const{
    return m_suggester_isSet;
}

bool OAIDefineSuggesterResponse::is_suggester_Valid() const{
    return m_suggester_isValid;
}

bool OAIDefineSuggesterResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggester.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefineSuggesterResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_suggester_isValid && true;
}

} // namespace OpenAPI
