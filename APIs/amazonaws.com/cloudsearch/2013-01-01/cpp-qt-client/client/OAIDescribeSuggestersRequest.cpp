/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSuggestersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSuggestersRequest::OAIDescribeSuggestersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSuggestersRequest::OAIDescribeSuggestersRequest() {
    this->initializeModel();
}

OAIDescribeSuggestersRequest::~OAIDescribeSuggestersRequest() {}

void OAIDescribeSuggestersRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_suggester_names_isSet = false;
    m_suggester_names_isValid = false;

    m_deployed_isSet = false;
    m_deployed_isValid = false;
}

void OAIDescribeSuggestersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSuggestersRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_suggester_names_isValid = ::OpenAPI::fromJsonValue(m_suggester_names, json[QString("SuggesterNames")]);
    m_suggester_names_isSet = !json[QString("SuggesterNames")].isNull() && m_suggester_names_isValid;

    m_deployed_isValid = ::OpenAPI::fromJsonValue(m_deployed, json[QString("Deployed")]);
    m_deployed_isSet = !json[QString("Deployed")].isNull() && m_deployed_isValid;
}

QString OAIDescribeSuggestersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSuggestersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_suggester_names.isSet()) {
        obj.insert(QString("SuggesterNames"), ::OpenAPI::toJsonValue(m_suggester_names));
    }
    if (m_deployed_isSet) {
        obj.insert(QString("Deployed"), ::OpenAPI::toJsonValue(m_deployed));
    }
    return obj;
}

QString OAIDescribeSuggestersRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDescribeSuggestersRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDescribeSuggestersRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDescribeSuggestersRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIDescribeSuggestersRequest::getSuggesterNames() const {
    return m_suggester_names;
}
void OAIDescribeSuggestersRequest::setSuggesterNames(const QList &suggester_names) {
    m_suggester_names = suggester_names;
    m_suggester_names_isSet = true;
}

bool OAIDescribeSuggestersRequest::is_suggester_names_Set() const{
    return m_suggester_names_isSet;
}

bool OAIDescribeSuggestersRequest::is_suggester_names_Valid() const{
    return m_suggester_names_isValid;
}

bool OAIDescribeSuggestersRequest::getDeployed() const {
    return m_deployed;
}
void OAIDescribeSuggestersRequest::setDeployed(const bool &deployed) {
    m_deployed = deployed;
    m_deployed_isSet = true;
}

bool OAIDescribeSuggestersRequest::is_deployed_Set() const{
    return m_deployed_isSet;
}

bool OAIDescribeSuggestersRequest::is_deployed_Valid() const{
    return m_deployed_isValid;
}

bool OAIDescribeSuggestersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggester_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSuggestersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
