/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeScalingParametersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeScalingParametersRequest::OAIDescribeScalingParametersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeScalingParametersRequest::OAIDescribeScalingParametersRequest() {
    this->initializeModel();
}

OAIDescribeScalingParametersRequest::~OAIDescribeScalingParametersRequest() {}

void OAIDescribeScalingParametersRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;
}

void OAIDescribeScalingParametersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeScalingParametersRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;
}

QString OAIDescribeScalingParametersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeScalingParametersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    return obj;
}

QString OAIDescribeScalingParametersRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDescribeScalingParametersRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDescribeScalingParametersRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDescribeScalingParametersRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

bool OAIDescribeScalingParametersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeScalingParametersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
