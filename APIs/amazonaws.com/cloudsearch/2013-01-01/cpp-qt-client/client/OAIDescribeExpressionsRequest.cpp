/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeExpressionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeExpressionsRequest::OAIDescribeExpressionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeExpressionsRequest::OAIDescribeExpressionsRequest() {
    this->initializeModel();
}

OAIDescribeExpressionsRequest::~OAIDescribeExpressionsRequest() {}

void OAIDescribeExpressionsRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_expression_names_isSet = false;
    m_expression_names_isValid = false;

    m_deployed_isSet = false;
    m_deployed_isValid = false;
}

void OAIDescribeExpressionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeExpressionsRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_expression_names_isValid = ::OpenAPI::fromJsonValue(m_expression_names, json[QString("ExpressionNames")]);
    m_expression_names_isSet = !json[QString("ExpressionNames")].isNull() && m_expression_names_isValid;

    m_deployed_isValid = ::OpenAPI::fromJsonValue(m_deployed, json[QString("Deployed")]);
    m_deployed_isSet = !json[QString("Deployed")].isNull() && m_deployed_isValid;
}

QString OAIDescribeExpressionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeExpressionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_expression_names.isSet()) {
        obj.insert(QString("ExpressionNames"), ::OpenAPI::toJsonValue(m_expression_names));
    }
    if (m_deployed_isSet) {
        obj.insert(QString("Deployed"), ::OpenAPI::toJsonValue(m_deployed));
    }
    return obj;
}

QString OAIDescribeExpressionsRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDescribeExpressionsRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDescribeExpressionsRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDescribeExpressionsRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIDescribeExpressionsRequest::getExpressionNames() const {
    return m_expression_names;
}
void OAIDescribeExpressionsRequest::setExpressionNames(const QList &expression_names) {
    m_expression_names = expression_names;
    m_expression_names_isSet = true;
}

bool OAIDescribeExpressionsRequest::is_expression_names_Set() const{
    return m_expression_names_isSet;
}

bool OAIDescribeExpressionsRequest::is_expression_names_Valid() const{
    return m_expression_names_isValid;
}

bool OAIDescribeExpressionsRequest::getDeployed() const {
    return m_deployed;
}
void OAIDescribeExpressionsRequest::setDeployed(const bool &deployed) {
    m_deployed = deployed;
    m_deployed_isSet = true;
}

bool OAIDescribeExpressionsRequest::is_deployed_Set() const{
    return m_deployed_isSet;
}

bool OAIDescribeExpressionsRequest::is_deployed_Valid() const{
    return m_deployed_isValid;
}

bool OAIDescribeExpressionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeExpressionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
