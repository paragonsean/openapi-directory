/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter() {
    this->initializeModel();
}

OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::~OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter() {}

void OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::initializeModel() {

    m_enforce_https_isSet = false;
    m_enforce_https_isValid = false;

    m_tls_security_policy_isSet = false;
    m_tls_security_policy_isValid = false;
}

void OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::fromJsonObject(QJsonObject json) {

    m_enforce_https_isValid = ::OpenAPI::fromJsonValue(m_enforce_https, json[QString("EnforceHTTPS")]);
    m_enforce_https_isSet = !json[QString("EnforceHTTPS")].isNull() && m_enforce_https_isValid;

    m_tls_security_policy_isValid = ::OpenAPI::fromJsonValue(m_tls_security_policy, json[QString("TLSSecurityPolicy")]);
    m_tls_security_policy_isSet = !json[QString("TLSSecurityPolicy")].isNull() && m_tls_security_policy_isValid;
}

QString OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::asJsonObject() const {
    QJsonObject obj;
    if (m_enforce_https_isSet) {
        obj.insert(QString("EnforceHTTPS"), ::OpenAPI::toJsonValue(m_enforce_https));
    }
    if (m_tls_security_policy.isSet()) {
        obj.insert(QString("TLSSecurityPolicy"), ::OpenAPI::toJsonValue(m_tls_security_policy));
    }
    return obj;
}

bool OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::getEnforceHttps() const {
    return m_enforce_https;
}
void OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::setEnforceHttps(const bool &enforce_https) {
    m_enforce_https = enforce_https;
    m_enforce_https_isSet = true;
}

bool OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::is_enforce_https_Set() const{
    return m_enforce_https_isSet;
}

bool OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::is_enforce_https_Valid() const{
    return m_enforce_https_isValid;
}

OAITLSSecurityPolicy OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::getTlsSecurityPolicy() const {
    return m_tls_security_policy;
}
void OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::setTlsSecurityPolicy(const OAITLSSecurityPolicy &tls_security_policy) {
    m_tls_security_policy = tls_security_policy;
    m_tls_security_policy_isSet = true;
}

bool OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::is_tls_security_policy_Set() const{
    return m_tls_security_policy_isSet;
}

bool OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::is_tls_security_policy_Valid() const{
    return m_tls_security_policy_isValid;
}

bool OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enforce_https_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_security_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_UpdateDomainEndpointOptions_DomainEndpointOptions_parameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
