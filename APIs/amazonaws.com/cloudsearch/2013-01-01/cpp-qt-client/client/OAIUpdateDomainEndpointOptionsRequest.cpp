/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDomainEndpointOptionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDomainEndpointOptionsRequest::OAIUpdateDomainEndpointOptionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDomainEndpointOptionsRequest::OAIUpdateDomainEndpointOptionsRequest() {
    this->initializeModel();
}

OAIUpdateDomainEndpointOptionsRequest::~OAIUpdateDomainEndpointOptionsRequest() {}

void OAIUpdateDomainEndpointOptionsRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_domain_endpoint_options_isSet = false;
    m_domain_endpoint_options_isValid = false;
}

void OAIUpdateDomainEndpointOptionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDomainEndpointOptionsRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_domain_endpoint_options_isValid = ::OpenAPI::fromJsonValue(m_domain_endpoint_options, json[QString("DomainEndpointOptions")]);
    m_domain_endpoint_options_isSet = !json[QString("DomainEndpointOptions")].isNull() && m_domain_endpoint_options_isValid;
}

QString OAIUpdateDomainEndpointOptionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDomainEndpointOptionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_domain_endpoint_options.isSet()) {
        obj.insert(QString("DomainEndpointOptions"), ::OpenAPI::toJsonValue(m_domain_endpoint_options));
    }
    return obj;
}

QString OAIUpdateDomainEndpointOptionsRequest::getDomainName() const {
    return m_domain_name;
}
void OAIUpdateDomainEndpointOptionsRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIUpdateDomainEndpointOptionsRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIUpdateDomainEndpointOptionsRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions OAIUpdateDomainEndpointOptionsRequest::getDomainEndpointOptions() const {
    return m_domain_endpoint_options;
}
void OAIUpdateDomainEndpointOptionsRequest::setDomainEndpointOptions(const OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions &domain_endpoint_options) {
    m_domain_endpoint_options = domain_endpoint_options;
    m_domain_endpoint_options_isSet = true;
}

bool OAIUpdateDomainEndpointOptionsRequest::is_domain_endpoint_options_Set() const{
    return m_domain_endpoint_options_isSet;
}

bool OAIUpdateDomainEndpointOptionsRequest::is_domain_endpoint_options_Valid() const{
    return m_domain_endpoint_options_isValid;
}

bool OAIUpdateDomainEndpointOptionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_endpoint_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDomainEndpointOptionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_domain_endpoint_options_isValid && true;
}

} // namespace OpenAPI
