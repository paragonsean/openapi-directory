/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisOptions::OAIAnalysisOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisOptions::OAIAnalysisOptions() {
    this->initializeModel();
}

OAIAnalysisOptions::~OAIAnalysisOptions() {}

void OAIAnalysisOptions::initializeModel() {

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;

    m_stopwords_isSet = false;
    m_stopwords_isValid = false;

    m_stemming_dictionary_isSet = false;
    m_stemming_dictionary_isValid = false;

    m_japanese_tokenization_dictionary_isSet = false;
    m_japanese_tokenization_dictionary_isValid = false;

    m_algorithmic_stemming_isSet = false;
    m_algorithmic_stemming_isValid = false;
}

void OAIAnalysisOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisOptions::fromJsonObject(QJsonObject json) {

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("Synonyms")]);
    m_synonyms_isSet = !json[QString("Synonyms")].isNull() && m_synonyms_isValid;

    m_stopwords_isValid = ::OpenAPI::fromJsonValue(m_stopwords, json[QString("Stopwords")]);
    m_stopwords_isSet = !json[QString("Stopwords")].isNull() && m_stopwords_isValid;

    m_stemming_dictionary_isValid = ::OpenAPI::fromJsonValue(m_stemming_dictionary, json[QString("StemmingDictionary")]);
    m_stemming_dictionary_isSet = !json[QString("StemmingDictionary")].isNull() && m_stemming_dictionary_isValid;

    m_japanese_tokenization_dictionary_isValid = ::OpenAPI::fromJsonValue(m_japanese_tokenization_dictionary, json[QString("JapaneseTokenizationDictionary")]);
    m_japanese_tokenization_dictionary_isSet = !json[QString("JapaneseTokenizationDictionary")].isNull() && m_japanese_tokenization_dictionary_isValid;

    m_algorithmic_stemming_isValid = ::OpenAPI::fromJsonValue(m_algorithmic_stemming, json[QString("AlgorithmicStemming")]);
    m_algorithmic_stemming_isSet = !json[QString("AlgorithmicStemming")].isNull() && m_algorithmic_stemming_isValid;
}

QString OAIAnalysisOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_synonyms_isSet) {
        obj.insert(QString("Synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    if (m_stopwords_isSet) {
        obj.insert(QString("Stopwords"), ::OpenAPI::toJsonValue(m_stopwords));
    }
    if (m_stemming_dictionary_isSet) {
        obj.insert(QString("StemmingDictionary"), ::OpenAPI::toJsonValue(m_stemming_dictionary));
    }
    if (m_japanese_tokenization_dictionary_isSet) {
        obj.insert(QString("JapaneseTokenizationDictionary"), ::OpenAPI::toJsonValue(m_japanese_tokenization_dictionary));
    }
    if (m_algorithmic_stemming.isSet()) {
        obj.insert(QString("AlgorithmicStemming"), ::OpenAPI::toJsonValue(m_algorithmic_stemming));
    }
    return obj;
}

QString OAIAnalysisOptions::getSynonyms() const {
    return m_synonyms;
}
void OAIAnalysisOptions::setSynonyms(const QString &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAIAnalysisOptions::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAIAnalysisOptions::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

QString OAIAnalysisOptions::getStopwords() const {
    return m_stopwords;
}
void OAIAnalysisOptions::setStopwords(const QString &stopwords) {
    m_stopwords = stopwords;
    m_stopwords_isSet = true;
}

bool OAIAnalysisOptions::is_stopwords_Set() const{
    return m_stopwords_isSet;
}

bool OAIAnalysisOptions::is_stopwords_Valid() const{
    return m_stopwords_isValid;
}

QString OAIAnalysisOptions::getStemmingDictionary() const {
    return m_stemming_dictionary;
}
void OAIAnalysisOptions::setStemmingDictionary(const QString &stemming_dictionary) {
    m_stemming_dictionary = stemming_dictionary;
    m_stemming_dictionary_isSet = true;
}

bool OAIAnalysisOptions::is_stemming_dictionary_Set() const{
    return m_stemming_dictionary_isSet;
}

bool OAIAnalysisOptions::is_stemming_dictionary_Valid() const{
    return m_stemming_dictionary_isValid;
}

QString OAIAnalysisOptions::getJapaneseTokenizationDictionary() const {
    return m_japanese_tokenization_dictionary;
}
void OAIAnalysisOptions::setJapaneseTokenizationDictionary(const QString &japanese_tokenization_dictionary) {
    m_japanese_tokenization_dictionary = japanese_tokenization_dictionary;
    m_japanese_tokenization_dictionary_isSet = true;
}

bool OAIAnalysisOptions::is_japanese_tokenization_dictionary_Set() const{
    return m_japanese_tokenization_dictionary_isSet;
}

bool OAIAnalysisOptions::is_japanese_tokenization_dictionary_Valid() const{
    return m_japanese_tokenization_dictionary_isValid;
}

OAIAlgorithmicStemming OAIAnalysisOptions::getAlgorithmicStemming() const {
    return m_algorithmic_stemming;
}
void OAIAnalysisOptions::setAlgorithmicStemming(const OAIAlgorithmicStemming &algorithmic_stemming) {
    m_algorithmic_stemming = algorithmic_stemming;
    m_algorithmic_stemming_isSet = true;
}

bool OAIAnalysisOptions::is_algorithmic_stemming_Set() const{
    return m_algorithmic_stemming_isSet;
}

bool OAIAnalysisOptions::is_algorithmic_stemming_Valid() const{
    return m_algorithmic_stemming_isValid;
}

bool OAIAnalysisOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_synonyms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopwords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stemming_dictionary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_japanese_tokenization_dictionary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithmic_stemming.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
