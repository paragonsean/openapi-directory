/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptionState::OAIOptionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptionState::OAIOptionState() {
    this->initializeModel();
}

OAIOptionState::~OAIOptionState() {}

void OAIOptionState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOptionState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOptionState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RequiresIndexDocuments", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOptionState::REQUIRESINDEXDOCUMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Processing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOptionState::PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Active", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOptionState::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FailedToValidate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOptionState::FAILEDTOVALIDATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOptionState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOptionState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOptionState::REQUIRESINDEXDOCUMENTS:
            val = "RequiresIndexDocuments";
            break;
        case eOAIOptionState::PROCESSING:
            val = "Processing";
            break;
        case eOAIOptionState::ACTIVE:
            val = "Active";
            break;
        case eOAIOptionState::FAILEDTOVALIDATE:
            val = "FailedToValidate";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOptionState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOptionState::eOAIOptionState OAIOptionState::getValue() const {
    return m_value;
}

void OAIOptionState::setValue(const OAIOptionState::eOAIOptionState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOptionState::isSet() const {
    
    return m_value_isSet;
}

bool OAIOptionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
