/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSuggesterOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSuggesterOptions::OAIDocumentSuggesterOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSuggesterOptions::OAIDocumentSuggesterOptions() {
    this->initializeModel();
}

OAIDocumentSuggesterOptions::~OAIDocumentSuggesterOptions() {}

void OAIDocumentSuggesterOptions::initializeModel() {

    m_source_field_isSet = false;
    m_source_field_isValid = false;

    m_fuzzy_matching_isSet = false;
    m_fuzzy_matching_isValid = false;

    m_sort_expression_isSet = false;
    m_sort_expression_isValid = false;
}

void OAIDocumentSuggesterOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSuggesterOptions::fromJsonObject(QJsonObject json) {

    m_source_field_isValid = ::OpenAPI::fromJsonValue(m_source_field, json[QString("SourceField")]);
    m_source_field_isSet = !json[QString("SourceField")].isNull() && m_source_field_isValid;

    m_fuzzy_matching_isValid = ::OpenAPI::fromJsonValue(m_fuzzy_matching, json[QString("FuzzyMatching")]);
    m_fuzzy_matching_isSet = !json[QString("FuzzyMatching")].isNull() && m_fuzzy_matching_isValid;

    m_sort_expression_isValid = ::OpenAPI::fromJsonValue(m_sort_expression, json[QString("SortExpression")]);
    m_sort_expression_isSet = !json[QString("SortExpression")].isNull() && m_sort_expression_isValid;
}

QString OAIDocumentSuggesterOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSuggesterOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_source_field_isSet) {
        obj.insert(QString("SourceField"), ::OpenAPI::toJsonValue(m_source_field));
    }
    if (m_fuzzy_matching.isSet()) {
        obj.insert(QString("FuzzyMatching"), ::OpenAPI::toJsonValue(m_fuzzy_matching));
    }
    if (m_sort_expression_isSet) {
        obj.insert(QString("SortExpression"), ::OpenAPI::toJsonValue(m_sort_expression));
    }
    return obj;
}

QString OAIDocumentSuggesterOptions::getSourceField() const {
    return m_source_field;
}
void OAIDocumentSuggesterOptions::setSourceField(const QString &source_field) {
    m_source_field = source_field;
    m_source_field_isSet = true;
}

bool OAIDocumentSuggesterOptions::is_source_field_Set() const{
    return m_source_field_isSet;
}

bool OAIDocumentSuggesterOptions::is_source_field_Valid() const{
    return m_source_field_isValid;
}

OAISuggesterFuzzyMatching OAIDocumentSuggesterOptions::getFuzzyMatching() const {
    return m_fuzzy_matching;
}
void OAIDocumentSuggesterOptions::setFuzzyMatching(const OAISuggesterFuzzyMatching &fuzzy_matching) {
    m_fuzzy_matching = fuzzy_matching;
    m_fuzzy_matching_isSet = true;
}

bool OAIDocumentSuggesterOptions::is_fuzzy_matching_Set() const{
    return m_fuzzy_matching_isSet;
}

bool OAIDocumentSuggesterOptions::is_fuzzy_matching_Valid() const{
    return m_fuzzy_matching_isValid;
}

QString OAIDocumentSuggesterOptions::getSortExpression() const {
    return m_sort_expression;
}
void OAIDocumentSuggesterOptions::setSortExpression(const QString &sort_expression) {
    m_sort_expression = sort_expression;
    m_sort_expression_isSet = true;
}

bool OAIDocumentSuggesterOptions::is_sort_expression_Set() const{
    return m_sort_expression_isSet;
}

bool OAIDocumentSuggesterOptions::is_sort_expression_Valid() const{
    return m_sort_expression_isValid;
}

bool OAIDocumentSuggesterOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuzzy_matching.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSuggesterOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_field_isValid && true;
}

} // namespace OpenAPI
