/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions() {
    this->initializeModel();
}

OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::~OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions() {}

void OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::initializeModel() {

    m_enforce_https_isSet = false;
    m_enforce_https_isValid = false;

    m_tls_security_policy_isSet = false;
    m_tls_security_policy_isValid = false;
}

void OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::fromJsonObject(QJsonObject json) {

    m_enforce_https_isValid = ::OpenAPI::fromJsonValue(m_enforce_https, json[QString("EnforceHTTPS")]);
    m_enforce_https_isSet = !json[QString("EnforceHTTPS")].isNull() && m_enforce_https_isValid;

    m_tls_security_policy_isValid = ::OpenAPI::fromJsonValue(m_tls_security_policy, json[QString("TLSSecurityPolicy")]);
    m_tls_security_policy_isSet = !json[QString("TLSSecurityPolicy")].isNull() && m_tls_security_policy_isValid;
}

QString OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_enforce_https_isSet) {
        obj.insert(QString("EnforceHTTPS"), ::OpenAPI::toJsonValue(m_enforce_https));
    }
    if (m_tls_security_policy.isSet()) {
        obj.insert(QString("TLSSecurityPolicy"), ::OpenAPI::toJsonValue(m_tls_security_policy));
    }
    return obj;
}

bool OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::getEnforceHttps() const {
    return m_enforce_https;
}
void OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::setEnforceHttps(const bool &enforce_https) {
    m_enforce_https = enforce_https;
    m_enforce_https_isSet = true;
}

bool OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::is_enforce_https_Set() const{
    return m_enforce_https_isSet;
}

bool OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::is_enforce_https_Valid() const{
    return m_enforce_https_isValid;
}

OAITLSSecurityPolicy OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::getTlsSecurityPolicy() const {
    return m_tls_security_policy;
}
void OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::setTlsSecurityPolicy(const OAITLSSecurityPolicy &tls_security_policy) {
    m_tls_security_policy = tls_security_policy;
    m_tls_security_policy_isSet = true;
}

bool OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::is_tls_security_policy_Set() const{
    return m_tls_security_policy_isSet;
}

bool OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::is_tls_security_policy_Valid() const{
    return m_tls_security_policy_isValid;
}

bool OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enforce_https_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_security_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDomainEndpointOptionsRequest_DomainEndpointOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
