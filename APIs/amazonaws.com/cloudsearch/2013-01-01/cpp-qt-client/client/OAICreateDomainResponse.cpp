/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDomainResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDomainResponse::OAICreateDomainResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDomainResponse::OAICreateDomainResponse() {
    this->initializeModel();
}

OAICreateDomainResponse::~OAICreateDomainResponse() {}

void OAICreateDomainResponse::initializeModel() {

    m_domain_status_isSet = false;
    m_domain_status_isValid = false;
}

void OAICreateDomainResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDomainResponse::fromJsonObject(QJsonObject json) {

    m_domain_status_isValid = ::OpenAPI::fromJsonValue(m_domain_status, json[QString("DomainStatus")]);
    m_domain_status_isSet = !json[QString("DomainStatus")].isNull() && m_domain_status_isValid;
}

QString OAICreateDomainResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDomainResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_status.isSet()) {
        obj.insert(QString("DomainStatus"), ::OpenAPI::toJsonValue(m_domain_status));
    }
    return obj;
}

OAIDomainStatus OAICreateDomainResponse::getDomainStatus() const {
    return m_domain_status;
}
void OAICreateDomainResponse::setDomainStatus(const OAIDomainStatus &domain_status) {
    m_domain_status = domain_status;
    m_domain_status_isSet = true;
}

bool OAICreateDomainResponse::is_domain_status_Set() const{
    return m_domain_status_isSet;
}

bool OAICreateDomainResponse::is_domain_status_Valid() const{
    return m_domain_status_isValid;
}

bool OAICreateDomainResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDomainResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
