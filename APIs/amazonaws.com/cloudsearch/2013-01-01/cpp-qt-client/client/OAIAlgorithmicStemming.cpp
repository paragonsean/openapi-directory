/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlgorithmicStemming.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlgorithmicStemming::OAIAlgorithmicStemming(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlgorithmicStemming::OAIAlgorithmicStemming() {
    this->initializeModel();
}

OAIAlgorithmicStemming::~OAIAlgorithmicStemming() {}

void OAIAlgorithmicStemming::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAlgorithmicStemming::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAlgorithmicStemming::fromJson(QString jsonString) {
    
    if ( jsonString.compare("none", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlgorithmicStemming::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("minimal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlgorithmicStemming::MINIMAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("light", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlgorithmicStemming::LIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("full", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlgorithmicStemming::FULL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAlgorithmicStemming::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAlgorithmicStemming::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAlgorithmicStemming::NONE:
            val = "none";
            break;
        case eOAIAlgorithmicStemming::MINIMAL:
            val = "minimal";
            break;
        case eOAIAlgorithmicStemming::LIGHT:
            val = "light";
            break;
        case eOAIAlgorithmicStemming::FULL:
            val = "full";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAlgorithmicStemming::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAlgorithmicStemming::eOAIAlgorithmicStemming OAIAlgorithmicStemming::getValue() const {
    return m_value;
}

void OAIAlgorithmicStemming::setValue(const OAIAlgorithmicStemming::eOAIAlgorithmicStemming& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAlgorithmicStemming::isSet() const {
    
    return m_value_isSet;
}

bool OAIAlgorithmicStemming::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
