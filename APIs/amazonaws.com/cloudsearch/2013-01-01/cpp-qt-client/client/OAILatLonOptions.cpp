/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILatLonOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILatLonOptions::OAILatLonOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILatLonOptions::OAILatLonOptions() {
    this->initializeModel();
}

OAILatLonOptions::~OAILatLonOptions() {}

void OAILatLonOptions::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_source_field_isSet = false;
    m_source_field_isValid = false;

    m_facet_enabled_isSet = false;
    m_facet_enabled_isValid = false;

    m_search_enabled_isSet = false;
    m_search_enabled_isValid = false;

    m_return_enabled_isSet = false;
    m_return_enabled_isValid = false;

    m_sort_enabled_isSet = false;
    m_sort_enabled_isValid = false;
}

void OAILatLonOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILatLonOptions::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_source_field_isValid = ::OpenAPI::fromJsonValue(m_source_field, json[QString("SourceField")]);
    m_source_field_isSet = !json[QString("SourceField")].isNull() && m_source_field_isValid;

    m_facet_enabled_isValid = ::OpenAPI::fromJsonValue(m_facet_enabled, json[QString("FacetEnabled")]);
    m_facet_enabled_isSet = !json[QString("FacetEnabled")].isNull() && m_facet_enabled_isValid;

    m_search_enabled_isValid = ::OpenAPI::fromJsonValue(m_search_enabled, json[QString("SearchEnabled")]);
    m_search_enabled_isSet = !json[QString("SearchEnabled")].isNull() && m_search_enabled_isValid;

    m_return_enabled_isValid = ::OpenAPI::fromJsonValue(m_return_enabled, json[QString("ReturnEnabled")]);
    m_return_enabled_isSet = !json[QString("ReturnEnabled")].isNull() && m_return_enabled_isValid;

    m_sort_enabled_isValid = ::OpenAPI::fromJsonValue(m_sort_enabled, json[QString("SortEnabled")]);
    m_sort_enabled_isSet = !json[QString("SortEnabled")].isNull() && m_sort_enabled_isValid;
}

QString OAILatLonOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILatLonOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_source_field_isSet) {
        obj.insert(QString("SourceField"), ::OpenAPI::toJsonValue(m_source_field));
    }
    if (m_facet_enabled_isSet) {
        obj.insert(QString("FacetEnabled"), ::OpenAPI::toJsonValue(m_facet_enabled));
    }
    if (m_search_enabled_isSet) {
        obj.insert(QString("SearchEnabled"), ::OpenAPI::toJsonValue(m_search_enabled));
    }
    if (m_return_enabled_isSet) {
        obj.insert(QString("ReturnEnabled"), ::OpenAPI::toJsonValue(m_return_enabled));
    }
    if (m_sort_enabled_isSet) {
        obj.insert(QString("SortEnabled"), ::OpenAPI::toJsonValue(m_sort_enabled));
    }
    return obj;
}

QString OAILatLonOptions::getDefaultValue() const {
    return m_default_value;
}
void OAILatLonOptions::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAILatLonOptions::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAILatLonOptions::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAILatLonOptions::getSourceField() const {
    return m_source_field;
}
void OAILatLonOptions::setSourceField(const QString &source_field) {
    m_source_field = source_field;
    m_source_field_isSet = true;
}

bool OAILatLonOptions::is_source_field_Set() const{
    return m_source_field_isSet;
}

bool OAILatLonOptions::is_source_field_Valid() const{
    return m_source_field_isValid;
}

bool OAILatLonOptions::getFacetEnabled() const {
    return m_facet_enabled;
}
void OAILatLonOptions::setFacetEnabled(const bool &facet_enabled) {
    m_facet_enabled = facet_enabled;
    m_facet_enabled_isSet = true;
}

bool OAILatLonOptions::is_facet_enabled_Set() const{
    return m_facet_enabled_isSet;
}

bool OAILatLonOptions::is_facet_enabled_Valid() const{
    return m_facet_enabled_isValid;
}

bool OAILatLonOptions::getSearchEnabled() const {
    return m_search_enabled;
}
void OAILatLonOptions::setSearchEnabled(const bool &search_enabled) {
    m_search_enabled = search_enabled;
    m_search_enabled_isSet = true;
}

bool OAILatLonOptions::is_search_enabled_Set() const{
    return m_search_enabled_isSet;
}

bool OAILatLonOptions::is_search_enabled_Valid() const{
    return m_search_enabled_isValid;
}

bool OAILatLonOptions::getReturnEnabled() const {
    return m_return_enabled;
}
void OAILatLonOptions::setReturnEnabled(const bool &return_enabled) {
    m_return_enabled = return_enabled;
    m_return_enabled_isSet = true;
}

bool OAILatLonOptions::is_return_enabled_Set() const{
    return m_return_enabled_isSet;
}

bool OAILatLonOptions::is_return_enabled_Valid() const{
    return m_return_enabled_isValid;
}

bool OAILatLonOptions::getSortEnabled() const {
    return m_sort_enabled;
}
void OAILatLonOptions::setSortEnabled(const bool &sort_enabled) {
    m_sort_enabled = sort_enabled;
    m_sort_enabled_isSet = true;
}

bool OAILatLonOptions::is_sort_enabled_Set() const{
    return m_sort_enabled_isSet;
}

bool OAILatLonOptions::is_sort_enabled_Valid() const{
    return m_sort_enabled_isValid;
}

bool OAILatLonOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILatLonOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
