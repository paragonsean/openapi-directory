/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteSuggesterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteSuggesterRequest::OAIDeleteSuggesterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteSuggesterRequest::OAIDeleteSuggesterRequest() {
    this->initializeModel();
}

OAIDeleteSuggesterRequest::~OAIDeleteSuggesterRequest() {}

void OAIDeleteSuggesterRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_suggester_name_isSet = false;
    m_suggester_name_isValid = false;
}

void OAIDeleteSuggesterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteSuggesterRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_suggester_name_isValid = ::OpenAPI::fromJsonValue(m_suggester_name, json[QString("SuggesterName")]);
    m_suggester_name_isSet = !json[QString("SuggesterName")].isNull() && m_suggester_name_isValid;
}

QString OAIDeleteSuggesterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteSuggesterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_suggester_name_isSet) {
        obj.insert(QString("SuggesterName"), ::OpenAPI::toJsonValue(m_suggester_name));
    }
    return obj;
}

QString OAIDeleteSuggesterRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDeleteSuggesterRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDeleteSuggesterRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDeleteSuggesterRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDeleteSuggesterRequest::getSuggesterName() const {
    return m_suggester_name;
}
void OAIDeleteSuggesterRequest::setSuggesterName(const QString &suggester_name) {
    m_suggester_name = suggester_name;
    m_suggester_name_isSet = true;
}

bool OAIDeleteSuggesterRequest::is_suggester_name_Set() const{
    return m_suggester_name_isSet;
}

bool OAIDeleteSuggesterRequest::is_suggester_name_Valid() const{
    return m_suggester_name_isValid;
}

bool OAIDeleteSuggesterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggester_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteSuggesterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_suggester_name_isValid && true;
}

} // namespace OpenAPI
