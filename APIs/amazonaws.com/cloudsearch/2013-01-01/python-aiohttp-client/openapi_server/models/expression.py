# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Expression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression_name: str=None, expression_value: str=None):
        """Expression - a model defined in OpenAPI

        :param expression_name: The expression_name of this Expression.
        :param expression_value: The expression_value of this Expression.
        """
        self.openapi_types = {
            'expression_name': str,
            'expression_value': str
        }

        self.attribute_map = {
            'expression_name': 'ExpressionName',
            'expression_value': 'ExpressionValue'
        }

        self._expression_name = expression_name
        self._expression_value = expression_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Expression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Expression of this Expression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression_name(self):
        """Gets the expression_name of this Expression.

        Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).

        :return: The expression_name of this Expression.
        :rtype: str
        """
        return self._expression_name

    @expression_name.setter
    def expression_name(self, expression_name):
        """Sets the expression_name of this Expression.

        Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).

        :param expression_name: The expression_name of this Expression.
        :type expression_name: str
        """
        if expression_name is None:
            raise ValueError("Invalid value for `expression_name`, must not be `None`")
        if expression_name is not None and len(expression_name) > 64:
            raise ValueError("Invalid value for `expression_name`, length must be less than or equal to `64`")
        if expression_name is not None and len(expression_name) < 1:
            raise ValueError("Invalid value for `expression_name`, length must be greater than or equal to `1`")
        if expression_name is not None and not re.search(r'[a-z][a-z0-9_]*', expression_name):
            raise ValueError("Invalid value for `expression_name`, must be a follow pattern or equal to `/[a-z][a-z0-9_]*/`")

        self._expression_name = expression_name

    @property
    def expression_value(self):
        """Gets the expression_value of this Expression.

        The expression to evaluate for sorting while processing a search request. The <code>Expression</code> syntax is based on JavaScript expressions. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\" target=\"_blank\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.

        :return: The expression_value of this Expression.
        :rtype: str
        """
        return self._expression_value

    @expression_value.setter
    def expression_value(self, expression_value):
        """Sets the expression_value of this Expression.

        The expression to evaluate for sorting while processing a search request. The <code>Expression</code> syntax is based on JavaScript expressions. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\" target=\"_blank\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.

        :param expression_value: The expression_value of this Expression.
        :type expression_value: str
        """
        if expression_value is None:
            raise ValueError("Invalid value for `expression_value`, must not be `None`")
        if expression_value is not None and len(expression_value) > 10240:
            raise ValueError("Invalid value for `expression_value`, length must be less than or equal to `10240`")
        if expression_value is not None and len(expression_value) < 1:
            raise ValueError("Invalid value for `expression_value`, length must be greater than or equal to `1`")

        self._expression_value = expression_value
