# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.suggester_status import SuggesterStatus
from openapi_server import util


class DefineSuggesterResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suggester: SuggesterStatus=None):
        """DefineSuggesterResponse - a model defined in OpenAPI

        :param suggester: The suggester of this DefineSuggesterResponse.
        """
        self.openapi_types = {
            'suggester': SuggesterStatus
        }

        self.attribute_map = {
            'suggester': 'Suggester'
        }

        self._suggester = suggester

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefineSuggesterResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefineSuggesterResponse of this DefineSuggesterResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suggester(self):
        """Gets the suggester of this DefineSuggesterResponse.


        :return: The suggester of this DefineSuggesterResponse.
        :rtype: SuggesterStatus
        """
        return self._suggester

    @suggester.setter
    def suggester(self, suggester):
        """Sets the suggester of this DefineSuggesterResponse.


        :param suggester: The suggester of this DefineSuggesterResponse.
        :type suggester: SuggesterStatus
        """
        if suggester is None:
            raise ValueError("Invalid value for `suggester`, must not be `None`")

        self._suggester = suggester
