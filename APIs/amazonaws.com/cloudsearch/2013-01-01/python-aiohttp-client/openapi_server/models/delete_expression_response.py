# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_expression_response_expression import DeleteExpressionResponseExpression
from openapi_server import util


class DeleteExpressionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression: DeleteExpressionResponseExpression=None):
        """DeleteExpressionResponse - a model defined in OpenAPI

        :param expression: The expression of this DeleteExpressionResponse.
        """
        self.openapi_types = {
            'expression': DeleteExpressionResponseExpression
        }

        self.attribute_map = {
            'expression': 'Expression'
        }

        self._expression = expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteExpressionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteExpressionResponse of this DeleteExpressionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression(self):
        """Gets the expression of this DeleteExpressionResponse.


        :return: The expression of this DeleteExpressionResponse.
        :rtype: DeleteExpressionResponseExpression
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this DeleteExpressionResponse.


        :param expression: The expression of this DeleteExpressionResponse.
        :type expression: DeleteExpressionResponseExpression
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression
