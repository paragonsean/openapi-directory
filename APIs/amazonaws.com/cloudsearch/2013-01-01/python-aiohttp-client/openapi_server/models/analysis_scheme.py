# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_options import AnalysisOptions
from openapi_server.models.analysis_scheme_language import AnalysisSchemeLanguage
import re
from openapi_server import util


class AnalysisScheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_scheme_name: str=None, analysis_scheme_language: AnalysisSchemeLanguage=None, analysis_options: AnalysisOptions=None):
        """AnalysisScheme - a model defined in OpenAPI

        :param analysis_scheme_name: The analysis_scheme_name of this AnalysisScheme.
        :param analysis_scheme_language: The analysis_scheme_language of this AnalysisScheme.
        :param analysis_options: The analysis_options of this AnalysisScheme.
        """
        self.openapi_types = {
            'analysis_scheme_name': str,
            'analysis_scheme_language': AnalysisSchemeLanguage,
            'analysis_options': AnalysisOptions
        }

        self.attribute_map = {
            'analysis_scheme_name': 'AnalysisSchemeName',
            'analysis_scheme_language': 'AnalysisSchemeLanguage',
            'analysis_options': 'AnalysisOptions'
        }

        self._analysis_scheme_name = analysis_scheme_name
        self._analysis_scheme_language = analysis_scheme_language
        self._analysis_options = analysis_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisScheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisScheme of this AnalysisScheme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_scheme_name(self):
        """Gets the analysis_scheme_name of this AnalysisScheme.

        Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).

        :return: The analysis_scheme_name of this AnalysisScheme.
        :rtype: str
        """
        return self._analysis_scheme_name

    @analysis_scheme_name.setter
    def analysis_scheme_name(self, analysis_scheme_name):
        """Sets the analysis_scheme_name of this AnalysisScheme.

        Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).

        :param analysis_scheme_name: The analysis_scheme_name of this AnalysisScheme.
        :type analysis_scheme_name: str
        """
        if analysis_scheme_name is None:
            raise ValueError("Invalid value for `analysis_scheme_name`, must not be `None`")
        if analysis_scheme_name is not None and len(analysis_scheme_name) > 64:
            raise ValueError("Invalid value for `analysis_scheme_name`, length must be less than or equal to `64`")
        if analysis_scheme_name is not None and len(analysis_scheme_name) < 1:
            raise ValueError("Invalid value for `analysis_scheme_name`, length must be greater than or equal to `1`")
        if analysis_scheme_name is not None and not re.search(r'[a-z][a-z0-9_]*', analysis_scheme_name):
            raise ValueError("Invalid value for `analysis_scheme_name`, must be a follow pattern or equal to `/[a-z][a-z0-9_]*/`")

        self._analysis_scheme_name = analysis_scheme_name

    @property
    def analysis_scheme_language(self):
        """Gets the analysis_scheme_language of this AnalysisScheme.


        :return: The analysis_scheme_language of this AnalysisScheme.
        :rtype: AnalysisSchemeLanguage
        """
        return self._analysis_scheme_language

    @analysis_scheme_language.setter
    def analysis_scheme_language(self, analysis_scheme_language):
        """Sets the analysis_scheme_language of this AnalysisScheme.


        :param analysis_scheme_language: The analysis_scheme_language of this AnalysisScheme.
        :type analysis_scheme_language: AnalysisSchemeLanguage
        """
        if analysis_scheme_language is None:
            raise ValueError("Invalid value for `analysis_scheme_language`, must not be `None`")

        self._analysis_scheme_language = analysis_scheme_language

    @property
    def analysis_options(self):
        """Gets the analysis_options of this AnalysisScheme.


        :return: The analysis_options of this AnalysisScheme.
        :rtype: AnalysisOptions
        """
        return self._analysis_options

    @analysis_options.setter
    def analysis_options(self, analysis_options):
        """Sets the analysis_options of this AnalysisScheme.


        :param analysis_options: The analysis_options of this AnalysisScheme.
        :type analysis_options: AnalysisOptions
        """

        self._analysis_options = analysis_options
