# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteAnalysisSchemeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, analysis_scheme_name: str=None):
        """DeleteAnalysisSchemeRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this DeleteAnalysisSchemeRequest.
        :param analysis_scheme_name: The analysis_scheme_name of this DeleteAnalysisSchemeRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'analysis_scheme_name': str
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'analysis_scheme_name': 'AnalysisSchemeName'
        }

        self._domain_name = domain_name
        self._analysis_scheme_name = analysis_scheme_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteAnalysisSchemeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteAnalysisSchemeRequest of this DeleteAnalysisSchemeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this DeleteAnalysisSchemeRequest.

        A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).

        :return: The domain_name of this DeleteAnalysisSchemeRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DeleteAnalysisSchemeRequest.

        A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).

        :param domain_name: The domain_name of this DeleteAnalysisSchemeRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")
        if domain_name is not None and len(domain_name) > 28:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `28`")
        if domain_name is not None and len(domain_name) < 3:
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `3`")
        if domain_name is not None and not re.search(r'[a-z][a-z0-9\-]+', domain_name):
            raise ValueError("Invalid value for `domain_name`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]+/`")

        self._domain_name = domain_name

    @property
    def analysis_scheme_name(self):
        """Gets the analysis_scheme_name of this DeleteAnalysisSchemeRequest.


        :return: The analysis_scheme_name of this DeleteAnalysisSchemeRequest.
        :rtype: str
        """
        return self._analysis_scheme_name

    @analysis_scheme_name.setter
    def analysis_scheme_name(self, analysis_scheme_name):
        """Sets the analysis_scheme_name of this DeleteAnalysisSchemeRequest.


        :param analysis_scheme_name: The analysis_scheme_name of this DeleteAnalysisSchemeRequest.
        :type analysis_scheme_name: str
        """
        if analysis_scheme_name is None:
            raise ValueError("Invalid value for `analysis_scheme_name`, must not be `None`")

        self._analysis_scheme_name = analysis_scheme_name
