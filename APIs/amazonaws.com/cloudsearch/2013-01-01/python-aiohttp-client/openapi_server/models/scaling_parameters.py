# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_instance_type import PartitionInstanceType
from openapi_server import util


class ScalingParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired_instance_type: PartitionInstanceType=None, desired_replication_count: int=None, desired_partition_count: int=None):
        """ScalingParameters - a model defined in OpenAPI

        :param desired_instance_type: The desired_instance_type of this ScalingParameters.
        :param desired_replication_count: The desired_replication_count of this ScalingParameters.
        :param desired_partition_count: The desired_partition_count of this ScalingParameters.
        """
        self.openapi_types = {
            'desired_instance_type': PartitionInstanceType,
            'desired_replication_count': int,
            'desired_partition_count': int
        }

        self.attribute_map = {
            'desired_instance_type': 'DesiredInstanceType',
            'desired_replication_count': 'DesiredReplicationCount',
            'desired_partition_count': 'DesiredPartitionCount'
        }

        self._desired_instance_type = desired_instance_type
        self._desired_replication_count = desired_replication_count
        self._desired_partition_count = desired_partition_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScalingParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScalingParameters of this ScalingParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired_instance_type(self):
        """Gets the desired_instance_type of this ScalingParameters.


        :return: The desired_instance_type of this ScalingParameters.
        :rtype: PartitionInstanceType
        """
        return self._desired_instance_type

    @desired_instance_type.setter
    def desired_instance_type(self, desired_instance_type):
        """Sets the desired_instance_type of this ScalingParameters.


        :param desired_instance_type: The desired_instance_type of this ScalingParameters.
        :type desired_instance_type: PartitionInstanceType
        """

        self._desired_instance_type = desired_instance_type

    @property
    def desired_replication_count(self):
        """Gets the desired_replication_count of this ScalingParameters.


        :return: The desired_replication_count of this ScalingParameters.
        :rtype: int
        """
        return self._desired_replication_count

    @desired_replication_count.setter
    def desired_replication_count(self, desired_replication_count):
        """Sets the desired_replication_count of this ScalingParameters.


        :param desired_replication_count: The desired_replication_count of this ScalingParameters.
        :type desired_replication_count: int
        """

        self._desired_replication_count = desired_replication_count

    @property
    def desired_partition_count(self):
        """Gets the desired_partition_count of this ScalingParameters.


        :return: The desired_partition_count of this ScalingParameters.
        :rtype: int
        """
        return self._desired_partition_count

    @desired_partition_count.setter
    def desired_partition_count(self, desired_partition_count):
        """Sets the desired_partition_count of this ScalingParameters.


        :param desired_partition_count: The desired_partition_count of this ScalingParameters.
        :type desired_partition_count: int
        """

        self._desired_partition_count = desired_partition_count
