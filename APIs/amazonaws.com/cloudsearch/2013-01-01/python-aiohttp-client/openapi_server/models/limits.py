# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Limits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum_replication_count: int=None, maximum_partition_count: int=None):
        """Limits - a model defined in OpenAPI

        :param maximum_replication_count: The maximum_replication_count of this Limits.
        :param maximum_partition_count: The maximum_partition_count of this Limits.
        """
        self.openapi_types = {
            'maximum_replication_count': int,
            'maximum_partition_count': int
        }

        self.attribute_map = {
            'maximum_replication_count': 'MaximumReplicationCount',
            'maximum_partition_count': 'MaximumPartitionCount'
        }

        self._maximum_replication_count = maximum_replication_count
        self._maximum_partition_count = maximum_partition_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Limits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Limits of this Limits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum_replication_count(self):
        """Gets the maximum_replication_count of this Limits.


        :return: The maximum_replication_count of this Limits.
        :rtype: int
        """
        return self._maximum_replication_count

    @maximum_replication_count.setter
    def maximum_replication_count(self, maximum_replication_count):
        """Sets the maximum_replication_count of this Limits.


        :param maximum_replication_count: The maximum_replication_count of this Limits.
        :type maximum_replication_count: int
        """
        if maximum_replication_count is None:
            raise ValueError("Invalid value for `maximum_replication_count`, must not be `None`")
        if maximum_replication_count is not None and maximum_replication_count < 1:
            raise ValueError("Invalid value for `maximum_replication_count`, must be a value greater than or equal to `1`")

        self._maximum_replication_count = maximum_replication_count

    @property
    def maximum_partition_count(self):
        """Gets the maximum_partition_count of this Limits.


        :return: The maximum_partition_count of this Limits.
        :rtype: int
        """
        return self._maximum_partition_count

    @maximum_partition_count.setter
    def maximum_partition_count(self, maximum_partition_count):
        """Sets the maximum_partition_count of this Limits.


        :param maximum_partition_count: The maximum_partition_count of this Limits.
        :type maximum_partition_count: int
        """
        if maximum_partition_count is None:
            raise ValueError("Invalid value for `maximum_partition_count`, must not be `None`")
        if maximum_partition_count is not None and maximum_partition_count < 1:
            raise ValueError("Invalid value for `maximum_partition_count`, must be a value greater than or equal to `1`")

        self._maximum_partition_count = maximum_partition_count
