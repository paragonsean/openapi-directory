# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeAnalysisSchemesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_schemes: List=None):
        """DescribeAnalysisSchemesResponse - a model defined in OpenAPI

        :param analysis_schemes: The analysis_schemes of this DescribeAnalysisSchemesResponse.
        """
        self.openapi_types = {
            'analysis_schemes': List
        }

        self.attribute_map = {
            'analysis_schemes': 'AnalysisSchemes'
        }

        self._analysis_schemes = analysis_schemes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAnalysisSchemesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAnalysisSchemesResponse of this DescribeAnalysisSchemesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_schemes(self):
        """Gets the analysis_schemes of this DescribeAnalysisSchemesResponse.


        :return: The analysis_schemes of this DescribeAnalysisSchemesResponse.
        :rtype: List
        """
        return self._analysis_schemes

    @analysis_schemes.setter
    def analysis_schemes(self, analysis_schemes):
        """Sets the analysis_schemes of this DescribeAnalysisSchemesResponse.


        :param analysis_schemes: The analysis_schemes of this DescribeAnalysisSchemesResponse.
        :type analysis_schemes: List
        """
        if analysis_schemes is None:
            raise ValueError("Invalid value for `analysis_schemes`, must not be `None`")

        self._analysis_schemes = analysis_schemes
