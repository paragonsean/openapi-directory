# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithmic_stemming import AlgorithmicStemming
from openapi_server import util


class AnalysisOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, synonyms: str=None, stopwords: str=None, stemming_dictionary: str=None, japanese_tokenization_dictionary: str=None, algorithmic_stemming: AlgorithmicStemming=None):
        """AnalysisOptions - a model defined in OpenAPI

        :param synonyms: The synonyms of this AnalysisOptions.
        :param stopwords: The stopwords of this AnalysisOptions.
        :param stemming_dictionary: The stemming_dictionary of this AnalysisOptions.
        :param japanese_tokenization_dictionary: The japanese_tokenization_dictionary of this AnalysisOptions.
        :param algorithmic_stemming: The algorithmic_stemming of this AnalysisOptions.
        """
        self.openapi_types = {
            'synonyms': str,
            'stopwords': str,
            'stemming_dictionary': str,
            'japanese_tokenization_dictionary': str,
            'algorithmic_stemming': AlgorithmicStemming
        }

        self.attribute_map = {
            'synonyms': 'Synonyms',
            'stopwords': 'Stopwords',
            'stemming_dictionary': 'StemmingDictionary',
            'japanese_tokenization_dictionary': 'JapaneseTokenizationDictionary',
            'algorithmic_stemming': 'AlgorithmicStemming'
        }

        self._synonyms = synonyms
        self._stopwords = stopwords
        self._stemming_dictionary = stemming_dictionary
        self._japanese_tokenization_dictionary = japanese_tokenization_dictionary
        self._algorithmic_stemming = algorithmic_stemming

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisOptions of this AnalysisOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def synonyms(self):
        """Gets the synonyms of this AnalysisOptions.


        :return: The synonyms of this AnalysisOptions.
        :rtype: str
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this AnalysisOptions.


        :param synonyms: The synonyms of this AnalysisOptions.
        :type synonyms: str
        """

        self._synonyms = synonyms

    @property
    def stopwords(self):
        """Gets the stopwords of this AnalysisOptions.


        :return: The stopwords of this AnalysisOptions.
        :rtype: str
        """
        return self._stopwords

    @stopwords.setter
    def stopwords(self, stopwords):
        """Sets the stopwords of this AnalysisOptions.


        :param stopwords: The stopwords of this AnalysisOptions.
        :type stopwords: str
        """

        self._stopwords = stopwords

    @property
    def stemming_dictionary(self):
        """Gets the stemming_dictionary of this AnalysisOptions.


        :return: The stemming_dictionary of this AnalysisOptions.
        :rtype: str
        """
        return self._stemming_dictionary

    @stemming_dictionary.setter
    def stemming_dictionary(self, stemming_dictionary):
        """Sets the stemming_dictionary of this AnalysisOptions.


        :param stemming_dictionary: The stemming_dictionary of this AnalysisOptions.
        :type stemming_dictionary: str
        """

        self._stemming_dictionary = stemming_dictionary

    @property
    def japanese_tokenization_dictionary(self):
        """Gets the japanese_tokenization_dictionary of this AnalysisOptions.


        :return: The japanese_tokenization_dictionary of this AnalysisOptions.
        :rtype: str
        """
        return self._japanese_tokenization_dictionary

    @japanese_tokenization_dictionary.setter
    def japanese_tokenization_dictionary(self, japanese_tokenization_dictionary):
        """Sets the japanese_tokenization_dictionary of this AnalysisOptions.


        :param japanese_tokenization_dictionary: The japanese_tokenization_dictionary of this AnalysisOptions.
        :type japanese_tokenization_dictionary: str
        """

        self._japanese_tokenization_dictionary = japanese_tokenization_dictionary

    @property
    def algorithmic_stemming(self):
        """Gets the algorithmic_stemming of this AnalysisOptions.


        :return: The algorithmic_stemming of this AnalysisOptions.
        :rtype: AlgorithmicStemming
        """
        return self._algorithmic_stemming

    @algorithmic_stemming.setter
    def algorithmic_stemming(self, algorithmic_stemming):
        """Sets the algorithmic_stemming of this AnalysisOptions.


        :param algorithmic_stemming: The algorithmic_stemming of this AnalysisOptions.
        :type algorithmic_stemming: AlgorithmicStemming
        """

        self._algorithmic_stemming = algorithmic_stemming
