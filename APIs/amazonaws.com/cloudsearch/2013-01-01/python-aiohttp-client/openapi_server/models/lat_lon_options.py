# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class LatLonOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value: str=None, source_field: str=None, facet_enabled: bool=None, search_enabled: bool=None, return_enabled: bool=None, sort_enabled: bool=None):
        """LatLonOptions - a model defined in OpenAPI

        :param default_value: The default_value of this LatLonOptions.
        :param source_field: The source_field of this LatLonOptions.
        :param facet_enabled: The facet_enabled of this LatLonOptions.
        :param search_enabled: The search_enabled of this LatLonOptions.
        :param return_enabled: The return_enabled of this LatLonOptions.
        :param sort_enabled: The sort_enabled of this LatLonOptions.
        """
        self.openapi_types = {
            'default_value': str,
            'source_field': str,
            'facet_enabled': bool,
            'search_enabled': bool,
            'return_enabled': bool,
            'sort_enabled': bool
        }

        self.attribute_map = {
            'default_value': 'DefaultValue',
            'source_field': 'SourceField',
            'facet_enabled': 'FacetEnabled',
            'search_enabled': 'SearchEnabled',
            'return_enabled': 'ReturnEnabled',
            'sort_enabled': 'SortEnabled'
        }

        self._default_value = default_value
        self._source_field = source_field
        self._facet_enabled = facet_enabled
        self._search_enabled = search_enabled
        self._return_enabled = return_enabled
        self._sort_enabled = sort_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LatLonOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LatLonOptions of this LatLonOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value(self):
        """Gets the default_value of this LatLonOptions.


        :return: The default_value of this LatLonOptions.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this LatLonOptions.


        :param default_value: The default_value of this LatLonOptions.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def source_field(self):
        """Gets the source_field of this LatLonOptions.

        <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>

        :return: The source_field of this LatLonOptions.
        :rtype: str
        """
        return self._source_field

    @source_field.setter
    def source_field(self, source_field):
        """Sets the source_field of this LatLonOptions.

        <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>

        :param source_field: The source_field of this LatLonOptions.
        :type source_field: str
        """
        if source_field is not None and len(source_field) > 64:
            raise ValueError("Invalid value for `source_field`, length must be less than or equal to `64`")
        if source_field is not None and len(source_field) < 1:
            raise ValueError("Invalid value for `source_field`, length must be greater than or equal to `1`")
        if source_field is not None and not re.search(r'[a-z][a-z0-9_]*', source_field):
            raise ValueError("Invalid value for `source_field`, must be a follow pattern or equal to `/[a-z][a-z0-9_]*/`")

        self._source_field = source_field

    @property
    def facet_enabled(self):
        """Gets the facet_enabled of this LatLonOptions.


        :return: The facet_enabled of this LatLonOptions.
        :rtype: bool
        """
        return self._facet_enabled

    @facet_enabled.setter
    def facet_enabled(self, facet_enabled):
        """Sets the facet_enabled of this LatLonOptions.


        :param facet_enabled: The facet_enabled of this LatLonOptions.
        :type facet_enabled: bool
        """

        self._facet_enabled = facet_enabled

    @property
    def search_enabled(self):
        """Gets the search_enabled of this LatLonOptions.


        :return: The search_enabled of this LatLonOptions.
        :rtype: bool
        """
        return self._search_enabled

    @search_enabled.setter
    def search_enabled(self, search_enabled):
        """Sets the search_enabled of this LatLonOptions.


        :param search_enabled: The search_enabled of this LatLonOptions.
        :type search_enabled: bool
        """

        self._search_enabled = search_enabled

    @property
    def return_enabled(self):
        """Gets the return_enabled of this LatLonOptions.


        :return: The return_enabled of this LatLonOptions.
        :rtype: bool
        """
        return self._return_enabled

    @return_enabled.setter
    def return_enabled(self, return_enabled):
        """Sets the return_enabled of this LatLonOptions.


        :param return_enabled: The return_enabled of this LatLonOptions.
        :type return_enabled: bool
        """

        self._return_enabled = return_enabled

    @property
    def sort_enabled(self):
        """Gets the sort_enabled of this LatLonOptions.


        :return: The sort_enabled of this LatLonOptions.
        :rtype: bool
        """
        return self._sort_enabled

    @sort_enabled.setter
    def sort_enabled(self, sort_enabled):
        """Sets the sort_enabled of this LatLonOptions.


        :param sort_enabled: The sort_enabled of this LatLonOptions.
        :type sort_enabled: bool
        """

        self._sort_enabled = sort_enabled
