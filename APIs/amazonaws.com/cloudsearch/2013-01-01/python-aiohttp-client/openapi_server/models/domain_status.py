# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_status_doc_service import DomainStatusDocService
from openapi_server.models.domain_status_search_service import DomainStatusSearchService
from openapi_server.models.limits import Limits
import re
from openapi_server import util


class DomainStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_id: str=None, domain_name: str=None, arn: str=None, created: bool=None, deleted: bool=None, doc_service: DomainStatusDocService=None, search_service: DomainStatusSearchService=None, requires_index_documents: bool=None, processing: bool=None, search_instance_type: str=None, search_partition_count: int=None, search_instance_count: int=None, limits: Limits=None):
        """DomainStatus - a model defined in OpenAPI

        :param domain_id: The domain_id of this DomainStatus.
        :param domain_name: The domain_name of this DomainStatus.
        :param arn: The arn of this DomainStatus.
        :param created: The created of this DomainStatus.
        :param deleted: The deleted of this DomainStatus.
        :param doc_service: The doc_service of this DomainStatus.
        :param search_service: The search_service of this DomainStatus.
        :param requires_index_documents: The requires_index_documents of this DomainStatus.
        :param processing: The processing of this DomainStatus.
        :param search_instance_type: The search_instance_type of this DomainStatus.
        :param search_partition_count: The search_partition_count of this DomainStatus.
        :param search_instance_count: The search_instance_count of this DomainStatus.
        :param limits: The limits of this DomainStatus.
        """
        self.openapi_types = {
            'domain_id': str,
            'domain_name': str,
            'arn': str,
            'created': bool,
            'deleted': bool,
            'doc_service': DomainStatusDocService,
            'search_service': DomainStatusSearchService,
            'requires_index_documents': bool,
            'processing': bool,
            'search_instance_type': str,
            'search_partition_count': int,
            'search_instance_count': int,
            'limits': Limits
        }

        self.attribute_map = {
            'domain_id': 'DomainId',
            'domain_name': 'DomainName',
            'arn': 'ARN',
            'created': 'Created',
            'deleted': 'Deleted',
            'doc_service': 'DocService',
            'search_service': 'SearchService',
            'requires_index_documents': 'RequiresIndexDocuments',
            'processing': 'Processing',
            'search_instance_type': 'SearchInstanceType',
            'search_partition_count': 'SearchPartitionCount',
            'search_instance_count': 'SearchInstanceCount',
            'limits': 'Limits'
        }

        self._domain_id = domain_id
        self._domain_name = domain_name
        self._arn = arn
        self._created = created
        self._deleted = deleted
        self._doc_service = doc_service
        self._search_service = search_service
        self._requires_index_documents = requires_index_documents
        self._processing = processing
        self._search_instance_type = search_instance_type
        self._search_partition_count = search_partition_count
        self._search_instance_count = search_instance_count
        self._limits = limits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainStatus of this DomainStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_id(self):
        """Gets the domain_id of this DomainStatus.

        An internally generated unique identifier for a domain.

        :return: The domain_id of this DomainStatus.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this DomainStatus.

        An internally generated unique identifier for a domain.

        :param domain_id: The domain_id of this DomainStatus.
        :type domain_id: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")
        if domain_id is not None and len(domain_id) > 64:
            raise ValueError("Invalid value for `domain_id`, length must be less than or equal to `64`")
        if domain_id is not None and len(domain_id) < 1:
            raise ValueError("Invalid value for `domain_id`, length must be greater than or equal to `1`")

        self._domain_id = domain_id

    @property
    def domain_name(self):
        """Gets the domain_name of this DomainStatus.

        A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).

        :return: The domain_name of this DomainStatus.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DomainStatus.

        A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).

        :param domain_name: The domain_name of this DomainStatus.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")
        if domain_name is not None and len(domain_name) > 28:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `28`")
        if domain_name is not None and len(domain_name) < 3:
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `3`")
        if domain_name is not None and not re.search(r'[a-z][a-z0-9\-]+', domain_name):
            raise ValueError("Invalid value for `domain_name`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]+/`")

        self._domain_name = domain_name

    @property
    def arn(self):
        """Gets the arn of this DomainStatus.

        The Amazon Resource Name (ARN) of the search domain. See <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.

        :return: The arn of this DomainStatus.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DomainStatus.

        The Amazon Resource Name (ARN) of the search domain. See <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.

        :param arn: The arn of this DomainStatus.
        :type arn: str
        """

        self._arn = arn

    @property
    def created(self):
        """Gets the created of this DomainStatus.


        :return: The created of this DomainStatus.
        :rtype: bool
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DomainStatus.


        :param created: The created of this DomainStatus.
        :type created: bool
        """

        self._created = created

    @property
    def deleted(self):
        """Gets the deleted of this DomainStatus.


        :return: The deleted of this DomainStatus.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this DomainStatus.


        :param deleted: The deleted of this DomainStatus.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def doc_service(self):
        """Gets the doc_service of this DomainStatus.


        :return: The doc_service of this DomainStatus.
        :rtype: DomainStatusDocService
        """
        return self._doc_service

    @doc_service.setter
    def doc_service(self, doc_service):
        """Sets the doc_service of this DomainStatus.


        :param doc_service: The doc_service of this DomainStatus.
        :type doc_service: DomainStatusDocService
        """

        self._doc_service = doc_service

    @property
    def search_service(self):
        """Gets the search_service of this DomainStatus.


        :return: The search_service of this DomainStatus.
        :rtype: DomainStatusSearchService
        """
        return self._search_service

    @search_service.setter
    def search_service(self, search_service):
        """Sets the search_service of this DomainStatus.


        :param search_service: The search_service of this DomainStatus.
        :type search_service: DomainStatusSearchService
        """

        self._search_service = search_service

    @property
    def requires_index_documents(self):
        """Gets the requires_index_documents of this DomainStatus.


        :return: The requires_index_documents of this DomainStatus.
        :rtype: bool
        """
        return self._requires_index_documents

    @requires_index_documents.setter
    def requires_index_documents(self, requires_index_documents):
        """Sets the requires_index_documents of this DomainStatus.


        :param requires_index_documents: The requires_index_documents of this DomainStatus.
        :type requires_index_documents: bool
        """
        if requires_index_documents is None:
            raise ValueError("Invalid value for `requires_index_documents`, must not be `None`")

        self._requires_index_documents = requires_index_documents

    @property
    def processing(self):
        """Gets the processing of this DomainStatus.


        :return: The processing of this DomainStatus.
        :rtype: bool
        """
        return self._processing

    @processing.setter
    def processing(self, processing):
        """Sets the processing of this DomainStatus.


        :param processing: The processing of this DomainStatus.
        :type processing: bool
        """

        self._processing = processing

    @property
    def search_instance_type(self):
        """Gets the search_instance_type of this DomainStatus.


        :return: The search_instance_type of this DomainStatus.
        :rtype: str
        """
        return self._search_instance_type

    @search_instance_type.setter
    def search_instance_type(self, search_instance_type):
        """Sets the search_instance_type of this DomainStatus.


        :param search_instance_type: The search_instance_type of this DomainStatus.
        :type search_instance_type: str
        """

        self._search_instance_type = search_instance_type

    @property
    def search_partition_count(self):
        """Gets the search_partition_count of this DomainStatus.


        :return: The search_partition_count of this DomainStatus.
        :rtype: int
        """
        return self._search_partition_count

    @search_partition_count.setter
    def search_partition_count(self, search_partition_count):
        """Sets the search_partition_count of this DomainStatus.


        :param search_partition_count: The search_partition_count of this DomainStatus.
        :type search_partition_count: int
        """

        self._search_partition_count = search_partition_count

    @property
    def search_instance_count(self):
        """Gets the search_instance_count of this DomainStatus.


        :return: The search_instance_count of this DomainStatus.
        :rtype: int
        """
        return self._search_instance_count

    @search_instance_count.setter
    def search_instance_count(self, search_instance_count):
        """Sets the search_instance_count of this DomainStatus.


        :param search_instance_count: The search_instance_count of this DomainStatus.
        :type search_instance_count: int
        """

        self._search_instance_count = search_instance_count

    @property
    def limits(self):
        """Gets the limits of this DomainStatus.


        :return: The limits of this DomainStatus.
        :rtype: Limits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this DomainStatus.


        :param limits: The limits of this DomainStatus.
        :type limits: Limits
        """

        self._limits = limits
