/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SuggesterFuzzyMatching;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options for a search suggester.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:53.299300-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentSuggesterOptions {
  public static final String SERIALIZED_NAME_SOURCE_FIELD = "SourceField";
  @SerializedName(SERIALIZED_NAME_SOURCE_FIELD)
  private String sourceField;

  public static final String SERIALIZED_NAME_FUZZY_MATCHING = "FuzzyMatching";
  @SerializedName(SERIALIZED_NAME_FUZZY_MATCHING)
  private SuggesterFuzzyMatching fuzzyMatching;

  public static final String SERIALIZED_NAME_SORT_EXPRESSION = "SortExpression";
  @SerializedName(SERIALIZED_NAME_SORT_EXPRESSION)
  private String sortExpression;

  public DocumentSuggesterOptions() {
  }

  public DocumentSuggesterOptions sourceField(String sourceField) {
    this.sourceField = sourceField;
    return this;
  }

  /**
   * Get sourceField
   * @return sourceField
   */
  @javax.annotation.Nonnull
  public String getSourceField() {
    return sourceField;
  }

  public void setSourceField(String sourceField) {
    this.sourceField = sourceField;
  }


  public DocumentSuggesterOptions fuzzyMatching(SuggesterFuzzyMatching fuzzyMatching) {
    this.fuzzyMatching = fuzzyMatching;
    return this;
  }

  /**
   * Get fuzzyMatching
   * @return fuzzyMatching
   */
  @javax.annotation.Nullable
  public SuggesterFuzzyMatching getFuzzyMatching() {
    return fuzzyMatching;
  }

  public void setFuzzyMatching(SuggesterFuzzyMatching fuzzyMatching) {
    this.fuzzyMatching = fuzzyMatching;
  }


  public DocumentSuggesterOptions sortExpression(String sortExpression) {
    this.sortExpression = sortExpression;
    return this;
  }

  /**
   * Get sortExpression
   * @return sortExpression
   */
  @javax.annotation.Nullable
  public String getSortExpression() {
    return sortExpression;
  }

  public void setSortExpression(String sortExpression) {
    this.sortExpression = sortExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentSuggesterOptions documentSuggesterOptions = (DocumentSuggesterOptions) o;
    return Objects.equals(this.sourceField, documentSuggesterOptions.sourceField) &&
        Objects.equals(this.fuzzyMatching, documentSuggesterOptions.fuzzyMatching) &&
        Objects.equals(this.sortExpression, documentSuggesterOptions.sortExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceField, fuzzyMatching, sortExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentSuggesterOptions {\n");
    sb.append("    sourceField: ").append(toIndentedString(sourceField)).append("\n");
    sb.append("    fuzzyMatching: ").append(toIndentedString(fuzzyMatching)).append("\n");
    sb.append("    sortExpression: ").append(toIndentedString(sortExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceField");
    openapiFields.add("FuzzyMatching");
    openapiFields.add("SortExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceField");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentSuggesterOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentSuggesterOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentSuggesterOptions is not found in the empty JSON string", DocumentSuggesterOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentSuggesterOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentSuggesterOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentSuggesterOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceField`
      String.validateJsonElement(jsonObj.get("SourceField"));
      // validate the optional field `FuzzyMatching`
      if (jsonObj.get("FuzzyMatching") != null && !jsonObj.get("FuzzyMatching").isJsonNull()) {
        SuggesterFuzzyMatching.validateJsonElement(jsonObj.get("FuzzyMatching"));
      }
      // validate the optional field `SortExpression`
      if (jsonObj.get("SortExpression") != null && !jsonObj.get("SortExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SortExpression"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentSuggesterOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentSuggesterOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentSuggesterOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentSuggesterOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentSuggesterOptions>() {
           @Override
           public void write(JsonWriter out, DocumentSuggesterOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentSuggesterOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentSuggesterOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentSuggesterOptions
   * @throws IOException if the JSON string is invalid with respect to DocumentSuggesterOptions
   */
  public static DocumentSuggesterOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentSuggesterOptions.class);
  }

  /**
   * Convert an instance of DocumentSuggesterOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

