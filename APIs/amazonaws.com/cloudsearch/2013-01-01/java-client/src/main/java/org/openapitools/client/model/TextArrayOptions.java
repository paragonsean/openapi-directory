/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options for a field that contains an array of text strings. Present if &lt;code&gt;IndexFieldType&lt;/code&gt; specifies the field is of type &lt;code&gt;text-array&lt;/code&gt;. A &lt;code&gt;text-array&lt;/code&gt; field is always searchable. All options are enabled by default.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:53.299300-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextArrayOptions {
  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_SOURCE_FIELDS = "SourceFields";
  @SerializedName(SERIALIZED_NAME_SOURCE_FIELDS)
  private String sourceFields;

  public static final String SERIALIZED_NAME_RETURN_ENABLED = "ReturnEnabled";
  @SerializedName(SERIALIZED_NAME_RETURN_ENABLED)
  private Boolean returnEnabled;

  public static final String SERIALIZED_NAME_HIGHLIGHT_ENABLED = "HighlightEnabled";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT_ENABLED)
  private Boolean highlightEnabled;

  public static final String SERIALIZED_NAME_ANALYSIS_SCHEME = "AnalysisScheme";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_SCHEME)
  private String analysisScheme;

  public TextArrayOptions() {
  }

  public TextArrayOptions defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public TextArrayOptions sourceFields(String sourceFields) {
    this.sourceFields = sourceFields;
    return this;
  }

  /**
   * Get sourceFields
   * @return sourceFields
   */
  @javax.annotation.Nullable
  public String getSourceFields() {
    return sourceFields;
  }

  public void setSourceFields(String sourceFields) {
    this.sourceFields = sourceFields;
  }


  public TextArrayOptions returnEnabled(Boolean returnEnabled) {
    this.returnEnabled = returnEnabled;
    return this;
  }

  /**
   * Get returnEnabled
   * @return returnEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReturnEnabled() {
    return returnEnabled;
  }

  public void setReturnEnabled(Boolean returnEnabled) {
    this.returnEnabled = returnEnabled;
  }


  public TextArrayOptions highlightEnabled(Boolean highlightEnabled) {
    this.highlightEnabled = highlightEnabled;
    return this;
  }

  /**
   * Get highlightEnabled
   * @return highlightEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHighlightEnabled() {
    return highlightEnabled;
  }

  public void setHighlightEnabled(Boolean highlightEnabled) {
    this.highlightEnabled = highlightEnabled;
  }


  public TextArrayOptions analysisScheme(String analysisScheme) {
    this.analysisScheme = analysisScheme;
    return this;
  }

  /**
   * Get analysisScheme
   * @return analysisScheme
   */
  @javax.annotation.Nullable
  public String getAnalysisScheme() {
    return analysisScheme;
  }

  public void setAnalysisScheme(String analysisScheme) {
    this.analysisScheme = analysisScheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextArrayOptions textArrayOptions = (TextArrayOptions) o;
    return Objects.equals(this.defaultValue, textArrayOptions.defaultValue) &&
        Objects.equals(this.sourceFields, textArrayOptions.sourceFields) &&
        Objects.equals(this.returnEnabled, textArrayOptions.returnEnabled) &&
        Objects.equals(this.highlightEnabled, textArrayOptions.highlightEnabled) &&
        Objects.equals(this.analysisScheme, textArrayOptions.analysisScheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultValue, sourceFields, returnEnabled, highlightEnabled, analysisScheme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextArrayOptions {\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    sourceFields: ").append(toIndentedString(sourceFields)).append("\n");
    sb.append("    returnEnabled: ").append(toIndentedString(returnEnabled)).append("\n");
    sb.append("    highlightEnabled: ").append(toIndentedString(highlightEnabled)).append("\n");
    sb.append("    analysisScheme: ").append(toIndentedString(analysisScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefaultValue");
    openapiFields.add("SourceFields");
    openapiFields.add("ReturnEnabled");
    openapiFields.add("HighlightEnabled");
    openapiFields.add("AnalysisScheme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextArrayOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextArrayOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextArrayOptions is not found in the empty JSON string", TextArrayOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextArrayOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextArrayOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DefaultValue`
      if (jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultValue"));
      }
      // validate the optional field `SourceFields`
      if (jsonObj.get("SourceFields") != null && !jsonObj.get("SourceFields").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceFields"));
      }
      // validate the optional field `ReturnEnabled`
      if (jsonObj.get("ReturnEnabled") != null && !jsonObj.get("ReturnEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ReturnEnabled"));
      }
      // validate the optional field `HighlightEnabled`
      if (jsonObj.get("HighlightEnabled") != null && !jsonObj.get("HighlightEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HighlightEnabled"));
      }
      // validate the optional field `AnalysisScheme`
      if (jsonObj.get("AnalysisScheme") != null && !jsonObj.get("AnalysisScheme").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AnalysisScheme"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextArrayOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextArrayOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextArrayOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextArrayOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<TextArrayOptions>() {
           @Override
           public void write(JsonWriter out, TextArrayOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextArrayOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextArrayOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextArrayOptions
   * @throws IOException if the JSON string is invalid with respect to TextArrayOptions
   */
  public static TextArrayOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextArrayOptions.class);
  }

  /**
   * Convert an instance of TextArrayOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

