/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OptionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateServiceAccessPoliciesResponseAccessPolicies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:53.299300-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateServiceAccessPoliciesResponseAccessPolicies {
  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private String options;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OptionStatus status;

  public UpdateServiceAccessPoliciesResponseAccessPolicies() {
  }

  public UpdateServiceAccessPoliciesResponseAccessPolicies options(String options) {
    this.options = options;
    return this;
  }

  /**
   * Access rules for a domain&#39;s document or search service endpoints. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Configuring Access for a Search Domain&lt;/a&gt; in the &lt;i&gt;Amazon CloudSearch Developer Guide&lt;/i&gt;. The maximum size of a policy document is 100 KB.
   * @return options
   */
  @javax.annotation.Nonnull
  public String getOptions() {
    return options;
  }

  public void setOptions(String options) {
    this.options = options;
  }


  public UpdateServiceAccessPoliciesResponseAccessPolicies status(OptionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public OptionStatus getStatus() {
    return status;
  }

  public void setStatus(OptionStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateServiceAccessPoliciesResponseAccessPolicies updateServiceAccessPoliciesResponseAccessPolicies = (UpdateServiceAccessPoliciesResponseAccessPolicies) o;
    return Objects.equals(this.options, updateServiceAccessPoliciesResponseAccessPolicies.options) &&
        Objects.equals(this.status, updateServiceAccessPoliciesResponseAccessPolicies.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(options, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateServiceAccessPoliciesResponseAccessPolicies {\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Options");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Options");
    openapiRequiredFields.add("Status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateServiceAccessPoliciesResponseAccessPolicies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateServiceAccessPoliciesResponseAccessPolicies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateServiceAccessPoliciesResponseAccessPolicies is not found in the empty JSON string", UpdateServiceAccessPoliciesResponseAccessPolicies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateServiceAccessPoliciesResponseAccessPolicies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateServiceAccessPoliciesResponseAccessPolicies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateServiceAccessPoliciesResponseAccessPolicies.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Options").toString()));
      }
      // validate the required field `Status`
      OptionStatus.validateJsonElement(jsonObj.get("Status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateServiceAccessPoliciesResponseAccessPolicies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateServiceAccessPoliciesResponseAccessPolicies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateServiceAccessPoliciesResponseAccessPolicies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateServiceAccessPoliciesResponseAccessPolicies.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateServiceAccessPoliciesResponseAccessPolicies>() {
           @Override
           public void write(JsonWriter out, UpdateServiceAccessPoliciesResponseAccessPolicies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateServiceAccessPoliciesResponseAccessPolicies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateServiceAccessPoliciesResponseAccessPolicies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateServiceAccessPoliciesResponseAccessPolicies
   * @throws IOException if the JSON string is invalid with respect to UpdateServiceAccessPoliciesResponseAccessPolicies
   */
  public static UpdateServiceAccessPoliciesResponseAccessPolicies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateServiceAccessPoliciesResponseAccessPolicies.class);
  }

  /**
   * Convert an instance of UpdateServiceAccessPoliciesResponseAccessPolicies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

