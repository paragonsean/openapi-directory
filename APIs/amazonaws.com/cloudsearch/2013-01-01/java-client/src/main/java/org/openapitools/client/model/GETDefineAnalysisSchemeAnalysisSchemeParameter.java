/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnalysisOptions;
import org.openapitools.client.model.AnalysisSchemeLanguage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration information for an analysis scheme. Each analysis scheme has a unique name and specifies the language of the text to be processed. The following options can be configured for an analysis scheme: &lt;code&gt;Synonyms&lt;/code&gt;, &lt;code&gt;Stopwords&lt;/code&gt;, &lt;code&gt;StemmingDictionary&lt;/code&gt;, &lt;code&gt;JapaneseTokenizationDictionary&lt;/code&gt; and &lt;code&gt;AlgorithmicStemming&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:53.299300-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETDefineAnalysisSchemeAnalysisSchemeParameter {
  public static final String SERIALIZED_NAME_ANALYSIS_SCHEME_NAME = "AnalysisSchemeName";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_SCHEME_NAME)
  private String analysisSchemeName;

  public static final String SERIALIZED_NAME_ANALYSIS_SCHEME_LANGUAGE = "AnalysisSchemeLanguage";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_SCHEME_LANGUAGE)
  private AnalysisSchemeLanguage analysisSchemeLanguage;

  public static final String SERIALIZED_NAME_ANALYSIS_OPTIONS = "AnalysisOptions";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_OPTIONS)
  private AnalysisOptions analysisOptions;

  public GETDefineAnalysisSchemeAnalysisSchemeParameter() {
  }

  public GETDefineAnalysisSchemeAnalysisSchemeParameter analysisSchemeName(String analysisSchemeName) {
    this.analysisSchemeName = analysisSchemeName;
    return this;
  }

  /**
   * Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).
   * @return analysisSchemeName
   */
  @javax.annotation.Nonnull
  public String getAnalysisSchemeName() {
    return analysisSchemeName;
  }

  public void setAnalysisSchemeName(String analysisSchemeName) {
    this.analysisSchemeName = analysisSchemeName;
  }


  public GETDefineAnalysisSchemeAnalysisSchemeParameter analysisSchemeLanguage(AnalysisSchemeLanguage analysisSchemeLanguage) {
    this.analysisSchemeLanguage = analysisSchemeLanguage;
    return this;
  }

  /**
   * Get analysisSchemeLanguage
   * @return analysisSchemeLanguage
   */
  @javax.annotation.Nonnull
  public AnalysisSchemeLanguage getAnalysisSchemeLanguage() {
    return analysisSchemeLanguage;
  }

  public void setAnalysisSchemeLanguage(AnalysisSchemeLanguage analysisSchemeLanguage) {
    this.analysisSchemeLanguage = analysisSchemeLanguage;
  }


  public GETDefineAnalysisSchemeAnalysisSchemeParameter analysisOptions(AnalysisOptions analysisOptions) {
    this.analysisOptions = analysisOptions;
    return this;
  }

  /**
   * Get analysisOptions
   * @return analysisOptions
   */
  @javax.annotation.Nullable
  public AnalysisOptions getAnalysisOptions() {
    return analysisOptions;
  }

  public void setAnalysisOptions(AnalysisOptions analysisOptions) {
    this.analysisOptions = analysisOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETDefineAnalysisSchemeAnalysisSchemeParameter geTDefineAnalysisSchemeAnalysisSchemeParameter = (GETDefineAnalysisSchemeAnalysisSchemeParameter) o;
    return Objects.equals(this.analysisSchemeName, geTDefineAnalysisSchemeAnalysisSchemeParameter.analysisSchemeName) &&
        Objects.equals(this.analysisSchemeLanguage, geTDefineAnalysisSchemeAnalysisSchemeParameter.analysisSchemeLanguage) &&
        Objects.equals(this.analysisOptions, geTDefineAnalysisSchemeAnalysisSchemeParameter.analysisOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisSchemeName, analysisSchemeLanguage, analysisOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETDefineAnalysisSchemeAnalysisSchemeParameter {\n");
    sb.append("    analysisSchemeName: ").append(toIndentedString(analysisSchemeName)).append("\n");
    sb.append("    analysisSchemeLanguage: ").append(toIndentedString(analysisSchemeLanguage)).append("\n");
    sb.append("    analysisOptions: ").append(toIndentedString(analysisOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnalysisSchemeName");
    openapiFields.add("AnalysisSchemeLanguage");
    openapiFields.add("AnalysisOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AnalysisSchemeName");
    openapiRequiredFields.add("AnalysisSchemeLanguage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETDefineAnalysisSchemeAnalysisSchemeParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETDefineAnalysisSchemeAnalysisSchemeParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETDefineAnalysisSchemeAnalysisSchemeParameter is not found in the empty JSON string", GETDefineAnalysisSchemeAnalysisSchemeParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETDefineAnalysisSchemeAnalysisSchemeParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETDefineAnalysisSchemeAnalysisSchemeParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GETDefineAnalysisSchemeAnalysisSchemeParameter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AnalysisSchemeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnalysisSchemeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnalysisSchemeName").toString()));
      }
      // validate the required field `AnalysisSchemeLanguage`
      AnalysisSchemeLanguage.validateJsonElement(jsonObj.get("AnalysisSchemeLanguage"));
      // validate the optional field `AnalysisOptions`
      if (jsonObj.get("AnalysisOptions") != null && !jsonObj.get("AnalysisOptions").isJsonNull()) {
        AnalysisOptions.validateJsonElement(jsonObj.get("AnalysisOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETDefineAnalysisSchemeAnalysisSchemeParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETDefineAnalysisSchemeAnalysisSchemeParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETDefineAnalysisSchemeAnalysisSchemeParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETDefineAnalysisSchemeAnalysisSchemeParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<GETDefineAnalysisSchemeAnalysisSchemeParameter>() {
           @Override
           public void write(JsonWriter out, GETDefineAnalysisSchemeAnalysisSchemeParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETDefineAnalysisSchemeAnalysisSchemeParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETDefineAnalysisSchemeAnalysisSchemeParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETDefineAnalysisSchemeAnalysisSchemeParameter
   * @throws IOException if the JSON string is invalid with respect to GETDefineAnalysisSchemeAnalysisSchemeParameter
   */
  public static GETDefineAnalysisSchemeAnalysisSchemeParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETDefineAnalysisSchemeAnalysisSchemeParameter.class);
  }

  /**
   * Convert an instance of GETDefineAnalysisSchemeAnalysisSchemeParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

