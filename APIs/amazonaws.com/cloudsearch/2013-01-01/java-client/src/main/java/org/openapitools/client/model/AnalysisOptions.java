/*
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlgorithmicStemming;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Synonyms, stopwords, and stemming options for an analysis scheme. Includes tokenization dictionary for Japanese.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:53.299300-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalysisOptions {
  public static final String SERIALIZED_NAME_SYNONYMS = "Synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private String synonyms;

  public static final String SERIALIZED_NAME_STOPWORDS = "Stopwords";
  @SerializedName(SERIALIZED_NAME_STOPWORDS)
  private String stopwords;

  public static final String SERIALIZED_NAME_STEMMING_DICTIONARY = "StemmingDictionary";
  @SerializedName(SERIALIZED_NAME_STEMMING_DICTIONARY)
  private String stemmingDictionary;

  public static final String SERIALIZED_NAME_JAPANESE_TOKENIZATION_DICTIONARY = "JapaneseTokenizationDictionary";
  @SerializedName(SERIALIZED_NAME_JAPANESE_TOKENIZATION_DICTIONARY)
  private String japaneseTokenizationDictionary;

  public static final String SERIALIZED_NAME_ALGORITHMIC_STEMMING = "AlgorithmicStemming";
  @SerializedName(SERIALIZED_NAME_ALGORITHMIC_STEMMING)
  private AlgorithmicStemming algorithmicStemming;

  public AnalysisOptions() {
  }

  public AnalysisOptions synonyms(String synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  /**
   * Get synonyms
   * @return synonyms
   */
  @javax.annotation.Nullable
  public String getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(String synonyms) {
    this.synonyms = synonyms;
  }


  public AnalysisOptions stopwords(String stopwords) {
    this.stopwords = stopwords;
    return this;
  }

  /**
   * Get stopwords
   * @return stopwords
   */
  @javax.annotation.Nullable
  public String getStopwords() {
    return stopwords;
  }

  public void setStopwords(String stopwords) {
    this.stopwords = stopwords;
  }


  public AnalysisOptions stemmingDictionary(String stemmingDictionary) {
    this.stemmingDictionary = stemmingDictionary;
    return this;
  }

  /**
   * Get stemmingDictionary
   * @return stemmingDictionary
   */
  @javax.annotation.Nullable
  public String getStemmingDictionary() {
    return stemmingDictionary;
  }

  public void setStemmingDictionary(String stemmingDictionary) {
    this.stemmingDictionary = stemmingDictionary;
  }


  public AnalysisOptions japaneseTokenizationDictionary(String japaneseTokenizationDictionary) {
    this.japaneseTokenizationDictionary = japaneseTokenizationDictionary;
    return this;
  }

  /**
   * Get japaneseTokenizationDictionary
   * @return japaneseTokenizationDictionary
   */
  @javax.annotation.Nullable
  public String getJapaneseTokenizationDictionary() {
    return japaneseTokenizationDictionary;
  }

  public void setJapaneseTokenizationDictionary(String japaneseTokenizationDictionary) {
    this.japaneseTokenizationDictionary = japaneseTokenizationDictionary;
  }


  public AnalysisOptions algorithmicStemming(AlgorithmicStemming algorithmicStemming) {
    this.algorithmicStemming = algorithmicStemming;
    return this;
  }

  /**
   * Get algorithmicStemming
   * @return algorithmicStemming
   */
  @javax.annotation.Nullable
  public AlgorithmicStemming getAlgorithmicStemming() {
    return algorithmicStemming;
  }

  public void setAlgorithmicStemming(AlgorithmicStemming algorithmicStemming) {
    this.algorithmicStemming = algorithmicStemming;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisOptions analysisOptions = (AnalysisOptions) o;
    return Objects.equals(this.synonyms, analysisOptions.synonyms) &&
        Objects.equals(this.stopwords, analysisOptions.stopwords) &&
        Objects.equals(this.stemmingDictionary, analysisOptions.stemmingDictionary) &&
        Objects.equals(this.japaneseTokenizationDictionary, analysisOptions.japaneseTokenizationDictionary) &&
        Objects.equals(this.algorithmicStemming, analysisOptions.algorithmicStemming);
  }

  @Override
  public int hashCode() {
    return Objects.hash(synonyms, stopwords, stemmingDictionary, japaneseTokenizationDictionary, algorithmicStemming);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisOptions {\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    stopwords: ").append(toIndentedString(stopwords)).append("\n");
    sb.append("    stemmingDictionary: ").append(toIndentedString(stemmingDictionary)).append("\n");
    sb.append("    japaneseTokenizationDictionary: ").append(toIndentedString(japaneseTokenizationDictionary)).append("\n");
    sb.append("    algorithmicStemming: ").append(toIndentedString(algorithmicStemming)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Synonyms");
    openapiFields.add("Stopwords");
    openapiFields.add("StemmingDictionary");
    openapiFields.add("JapaneseTokenizationDictionary");
    openapiFields.add("AlgorithmicStemming");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalysisOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisOptions is not found in the empty JSON string", AnalysisOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Synonyms`
      if (jsonObj.get("Synonyms") != null && !jsonObj.get("Synonyms").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Synonyms"));
      }
      // validate the optional field `Stopwords`
      if (jsonObj.get("Stopwords") != null && !jsonObj.get("Stopwords").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Stopwords"));
      }
      // validate the optional field `StemmingDictionary`
      if (jsonObj.get("StemmingDictionary") != null && !jsonObj.get("StemmingDictionary").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StemmingDictionary"));
      }
      // validate the optional field `JapaneseTokenizationDictionary`
      if (jsonObj.get("JapaneseTokenizationDictionary") != null && !jsonObj.get("JapaneseTokenizationDictionary").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JapaneseTokenizationDictionary"));
      }
      // validate the optional field `AlgorithmicStemming`
      if (jsonObj.get("AlgorithmicStemming") != null && !jsonObj.get("AlgorithmicStemming").isJsonNull()) {
        AlgorithmicStemming.validateJsonElement(jsonObj.get("AlgorithmicStemming"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisOptions>() {
           @Override
           public void write(JsonWriter out, AnalysisOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalysisOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalysisOptions
   * @throws IOException if the JSON string is invalid with respect to AnalysisOptions
   */
  public static AnalysisOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisOptions.class);
  }

  /**
   * Convert an instance of AnalysisOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

