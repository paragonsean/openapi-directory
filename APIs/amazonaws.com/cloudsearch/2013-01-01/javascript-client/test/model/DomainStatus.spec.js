/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudSearch);
  }
}(this, function(expect, AmazonCloudSearch) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudSearch.DomainStatus();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DomainStatus', function() {
    it('should create an instance of DomainStatus', function() {
      // uncomment below and update the code to test DomainStatus
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be.a(AmazonCloudSearch.DomainStatus);
    });

    it('should have the property domainId (base name: "DomainId")', function() {
      // uncomment below and update the code to test the property domainId
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "DomainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property ARN (base name: "ARN")', function() {
      // uncomment below and update the code to test the property ARN
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "Created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property deleted (base name: "Deleted")', function() {
      // uncomment below and update the code to test the property deleted
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property docService (base name: "DocService")', function() {
      // uncomment below and update the code to test the property docService
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property searchService (base name: "SearchService")', function() {
      // uncomment below and update the code to test the property searchService
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property requiresIndexDocuments (base name: "RequiresIndexDocuments")', function() {
      // uncomment below and update the code to test the property requiresIndexDocuments
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property processing (base name: "Processing")', function() {
      // uncomment below and update the code to test the property processing
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property searchInstanceType (base name: "SearchInstanceType")', function() {
      // uncomment below and update the code to test the property searchInstanceType
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property searchPartitionCount (base name: "SearchPartitionCount")', function() {
      // uncomment below and update the code to test the property searchPartitionCount
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property searchInstanceCount (base name: "SearchInstanceCount")', function() {
      // uncomment below and update the code to test the property searchInstanceCount
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property limits (base name: "Limits")', function() {
      // uncomment below and update the code to test the property limits
      //var instance = new AmazonCloudSearch.DomainStatus();
      //expect(instance).to.be();
    });

  });

}));
