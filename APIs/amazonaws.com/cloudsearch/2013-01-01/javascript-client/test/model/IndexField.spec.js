/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudSearch);
  }
}(this, function(expect, AmazonCloudSearch) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudSearch.IndexField();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IndexField', function() {
    it('should create an instance of IndexField', function() {
      // uncomment below and update the code to test IndexField
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be.a(AmazonCloudSearch.IndexField);
    });

    it('should have the property indexFieldName (base name: "IndexFieldName")', function() {
      // uncomment below and update the code to test the property indexFieldName
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property indexFieldType (base name: "IndexFieldType")', function() {
      // uncomment below and update the code to test the property indexFieldType
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property intOptions (base name: "IntOptions")', function() {
      // uncomment below and update the code to test the property intOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property doubleOptions (base name: "DoubleOptions")', function() {
      // uncomment below and update the code to test the property doubleOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property literalOptions (base name: "LiteralOptions")', function() {
      // uncomment below and update the code to test the property literalOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property textOptions (base name: "TextOptions")', function() {
      // uncomment below and update the code to test the property textOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property dateOptions (base name: "DateOptions")', function() {
      // uncomment below and update the code to test the property dateOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property latLonOptions (base name: "LatLonOptions")', function() {
      // uncomment below and update the code to test the property latLonOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property intArrayOptions (base name: "IntArrayOptions")', function() {
      // uncomment below and update the code to test the property intArrayOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property doubleArrayOptions (base name: "DoubleArrayOptions")', function() {
      // uncomment below and update the code to test the property doubleArrayOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property literalArrayOptions (base name: "LiteralArrayOptions")', function() {
      // uncomment below and update the code to test the property literalArrayOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property textArrayOptions (base name: "TextArrayOptions")', function() {
      // uncomment below and update the code to test the property textArrayOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

    it('should have the property dateArrayOptions (base name: "DateArrayOptions")', function() {
      // uncomment below and update the code to test the property dateArrayOptions
      //var instance = new AmazonCloudSearch.IndexField();
      //expect(instance).to.be();
    });

  });

}));
