/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiteralOptions model module.
 * @module model/LiteralOptions
 * @version 2013-01-01
 */
class LiteralOptions {
    /**
     * Constructs a new <code>LiteralOptions</code>.
     * Options for literal field. Present if &lt;code&gt;IndexFieldType&lt;/code&gt; specifies the field is of type &lt;code&gt;literal&lt;/code&gt;. All options are enabled by default.
     * @alias module:model/LiteralOptions
     */
    constructor() { 
        
        LiteralOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiteralOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiteralOptions} obj Optional instance to populate.
     * @return {module:model/LiteralOptions} The populated <code>LiteralOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiteralOptions();

            if (data.hasOwnProperty('DefaultValue')) {
                obj['DefaultValue'] = ApiClient.convertToType(data['DefaultValue'], 'String');
            }
            if (data.hasOwnProperty('SourceField')) {
                obj['SourceField'] = ApiClient.convertToType(data['SourceField'], 'String');
            }
            if (data.hasOwnProperty('FacetEnabled')) {
                obj['FacetEnabled'] = ApiClient.convertToType(data['FacetEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('SearchEnabled')) {
                obj['SearchEnabled'] = ApiClient.convertToType(data['SearchEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('ReturnEnabled')) {
                obj['ReturnEnabled'] = ApiClient.convertToType(data['ReturnEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('SortEnabled')) {
                obj['SortEnabled'] = ApiClient.convertToType(data['SortEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiteralOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiteralOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DefaultValue`
        if (data['DefaultValue']) { // data not null
          String.validateJSON(data['DefaultValue']);
        }
        // ensure the json data is a string
        if (data['SourceField'] && !(typeof data['SourceField'] === 'string' || data['SourceField'] instanceof String)) {
            throw new Error("Expected the field `SourceField` to be a primitive type in the JSON string but got " + data['SourceField']);
        }
        // validate the optional field `FacetEnabled`
        if (data['FacetEnabled']) { // data not null
          Boolean.validateJSON(data['FacetEnabled']);
        }
        // validate the optional field `SearchEnabled`
        if (data['SearchEnabled']) { // data not null
          Boolean.validateJSON(data['SearchEnabled']);
        }
        // validate the optional field `ReturnEnabled`
        if (data['ReturnEnabled']) { // data not null
          Boolean.validateJSON(data['ReturnEnabled']);
        }
        // validate the optional field `SortEnabled`
        if (data['SortEnabled']) { // data not null
          Boolean.validateJSON(data['SortEnabled']);
        }

        return true;
    }


}



/**
 * @member {String} DefaultValue
 */
LiteralOptions.prototype['DefaultValue'] = undefined;

/**
 * <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
 * @member {String} SourceField
 */
LiteralOptions.prototype['SourceField'] = undefined;

/**
 * @member {Boolean} FacetEnabled
 */
LiteralOptions.prototype['FacetEnabled'] = undefined;

/**
 * @member {Boolean} SearchEnabled
 */
LiteralOptions.prototype['SearchEnabled'] = undefined;

/**
 * @member {Boolean} ReturnEnabled
 */
LiteralOptions.prototype['ReturnEnabled'] = undefined;

/**
 * @member {Boolean} SortEnabled
 */
LiteralOptions.prototype['SortEnabled'] = undefined;






export default LiteralOptions;

