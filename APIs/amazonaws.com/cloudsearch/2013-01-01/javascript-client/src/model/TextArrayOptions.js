/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextArrayOptions model module.
 * @module model/TextArrayOptions
 * @version 2013-01-01
 */
class TextArrayOptions {
    /**
     * Constructs a new <code>TextArrayOptions</code>.
     * Options for a field that contains an array of text strings. Present if &lt;code&gt;IndexFieldType&lt;/code&gt; specifies the field is of type &lt;code&gt;text-array&lt;/code&gt;. A &lt;code&gt;text-array&lt;/code&gt; field is always searchable. All options are enabled by default.
     * @alias module:model/TextArrayOptions
     */
    constructor() { 
        
        TextArrayOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextArrayOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextArrayOptions} obj Optional instance to populate.
     * @return {module:model/TextArrayOptions} The populated <code>TextArrayOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextArrayOptions();

            if (data.hasOwnProperty('DefaultValue')) {
                obj['DefaultValue'] = ApiClient.convertToType(data['DefaultValue'], 'String');
            }
            if (data.hasOwnProperty('SourceFields')) {
                obj['SourceFields'] = ApiClient.convertToType(data['SourceFields'], 'String');
            }
            if (data.hasOwnProperty('ReturnEnabled')) {
                obj['ReturnEnabled'] = ApiClient.convertToType(data['ReturnEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('HighlightEnabled')) {
                obj['HighlightEnabled'] = ApiClient.convertToType(data['HighlightEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('AnalysisScheme')) {
                obj['AnalysisScheme'] = ApiClient.convertToType(data['AnalysisScheme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextArrayOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextArrayOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DefaultValue`
        if (data['DefaultValue']) { // data not null
          String.validateJSON(data['DefaultValue']);
        }
        // validate the optional field `SourceFields`
        if (data['SourceFields']) { // data not null
          String.validateJSON(data['SourceFields']);
        }
        // validate the optional field `ReturnEnabled`
        if (data['ReturnEnabled']) { // data not null
          Boolean.validateJSON(data['ReturnEnabled']);
        }
        // validate the optional field `HighlightEnabled`
        if (data['HighlightEnabled']) { // data not null
          Boolean.validateJSON(data['HighlightEnabled']);
        }
        // validate the optional field `AnalysisScheme`
        if (data['AnalysisScheme']) { // data not null
          String.validateJSON(data['AnalysisScheme']);
        }

        return true;
    }


}



/**
 * @member {String} DefaultValue
 */
TextArrayOptions.prototype['DefaultValue'] = undefined;

/**
 * @member {String} SourceFields
 */
TextArrayOptions.prototype['SourceFields'] = undefined;

/**
 * @member {Boolean} ReturnEnabled
 */
TextArrayOptions.prototype['ReturnEnabled'] = undefined;

/**
 * @member {Boolean} HighlightEnabled
 */
TextArrayOptions.prototype['HighlightEnabled'] = undefined;

/**
 * @member {String} AnalysisScheme
 */
TextArrayOptions.prototype['AnalysisScheme'] = undefined;






export default TextArrayOptions;

