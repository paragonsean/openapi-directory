/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DomainStatusDocService from './DomainStatusDocService';
import DomainStatusSearchService from './DomainStatusSearchService';
import Limits from './Limits';

/**
 * The DomainStatus model module.
 * @module model/DomainStatus
 * @version 2013-01-01
 */
class DomainStatus {
    /**
     * Constructs a new <code>DomainStatus</code>.
     * The current status of the search domain.
     * @alias module:model/DomainStatus
     * @param domainId {String} An internally generated unique identifier for a domain.
     * @param domainName {String} A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
     * @param requiresIndexDocuments {Boolean} 
     */
    constructor(domainId, domainName, requiresIndexDocuments) { 
        
        DomainStatus.initialize(this, domainId, domainName, requiresIndexDocuments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainId, domainName, requiresIndexDocuments) { 
        obj['DomainId'] = domainId;
        obj['DomainName'] = domainName;
        obj['RequiresIndexDocuments'] = requiresIndexDocuments;
    }

    /**
     * Constructs a <code>DomainStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainStatus} obj Optional instance to populate.
     * @return {module:model/DomainStatus} The populated <code>DomainStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainStatus();

            if (data.hasOwnProperty('DomainId')) {
                obj['DomainId'] = ApiClient.convertToType(data['DomainId'], 'String');
            }
            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
            if (data.hasOwnProperty('ARN')) {
                obj['ARN'] = ApiClient.convertToType(data['ARN'], 'String');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Boolean');
            }
            if (data.hasOwnProperty('Deleted')) {
                obj['Deleted'] = ApiClient.convertToType(data['Deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('DocService')) {
                obj['DocService'] = DomainStatusDocService.constructFromObject(data['DocService']);
            }
            if (data.hasOwnProperty('SearchService')) {
                obj['SearchService'] = DomainStatusSearchService.constructFromObject(data['SearchService']);
            }
            if (data.hasOwnProperty('RequiresIndexDocuments')) {
                obj['RequiresIndexDocuments'] = ApiClient.convertToType(data['RequiresIndexDocuments'], 'Boolean');
            }
            if (data.hasOwnProperty('Processing')) {
                obj['Processing'] = ApiClient.convertToType(data['Processing'], 'Boolean');
            }
            if (data.hasOwnProperty('SearchInstanceType')) {
                obj['SearchInstanceType'] = ApiClient.convertToType(data['SearchInstanceType'], 'String');
            }
            if (data.hasOwnProperty('SearchPartitionCount')) {
                obj['SearchPartitionCount'] = ApiClient.convertToType(data['SearchPartitionCount'], 'Number');
            }
            if (data.hasOwnProperty('SearchInstanceCount')) {
                obj['SearchInstanceCount'] = ApiClient.convertToType(data['SearchInstanceCount'], 'Number');
            }
            if (data.hasOwnProperty('Limits')) {
                obj['Limits'] = Limits.constructFromObject(data['Limits']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DomainStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DomainId'] && !(typeof data['DomainId'] === 'string' || data['DomainId'] instanceof String)) {
            throw new Error("Expected the field `DomainId` to be a primitive type in the JSON string but got " + data['DomainId']);
        }
        // ensure the json data is a string
        if (data['DomainName'] && !(typeof data['DomainName'] === 'string' || data['DomainName'] instanceof String)) {
            throw new Error("Expected the field `DomainName` to be a primitive type in the JSON string but got " + data['DomainName']);
        }
        // ensure the json data is a string
        if (data['ARN'] && !(typeof data['ARN'] === 'string' || data['ARN'] instanceof String)) {
            throw new Error("Expected the field `ARN` to be a primitive type in the JSON string but got " + data['ARN']);
        }
        // validate the optional field `Created`
        if (data['Created']) { // data not null
          Boolean.validateJSON(data['Created']);
        }
        // validate the optional field `Deleted`
        if (data['Deleted']) { // data not null
          Boolean.validateJSON(data['Deleted']);
        }
        // validate the optional field `DocService`
        if (data['DocService']) { // data not null
          DomainStatusDocService.validateJSON(data['DocService']);
        }
        // validate the optional field `SearchService`
        if (data['SearchService']) { // data not null
          DomainStatusSearchService.validateJSON(data['SearchService']);
        }
        // validate the optional field `RequiresIndexDocuments`
        if (data['RequiresIndexDocuments']) { // data not null
          Boolean.validateJSON(data['RequiresIndexDocuments']);
        }
        // validate the optional field `Processing`
        if (data['Processing']) { // data not null
          Boolean.validateJSON(data['Processing']);
        }
        // validate the optional field `SearchInstanceType`
        if (data['SearchInstanceType']) { // data not null
          String.validateJSON(data['SearchInstanceType']);
        }
        // validate the optional field `SearchPartitionCount`
        if (data['SearchPartitionCount']) { // data not null
          Number.validateJSON(data['SearchPartitionCount']);
        }
        // validate the optional field `SearchInstanceCount`
        if (data['SearchInstanceCount']) { // data not null
          Number.validateJSON(data['SearchInstanceCount']);
        }
        // validate the optional field `Limits`
        if (data['Limits']) { // data not null
          Limits.validateJSON(data['Limits']);
        }

        return true;
    }


}

DomainStatus.RequiredProperties = ["DomainId", "DomainName", "RequiresIndexDocuments"];

/**
 * An internally generated unique identifier for a domain.
 * @member {String} DomainId
 */
DomainStatus.prototype['DomainId'] = undefined;

/**
 * A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
 * @member {String} DomainName
 */
DomainStatus.prototype['DomainName'] = undefined;

/**
 * The Amazon Resource Name (ARN) of the search domain. See <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html\" target=\"_blank\">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.
 * @member {String} ARN
 */
DomainStatus.prototype['ARN'] = undefined;

/**
 * @member {Boolean} Created
 */
DomainStatus.prototype['Created'] = undefined;

/**
 * @member {Boolean} Deleted
 */
DomainStatus.prototype['Deleted'] = undefined;

/**
 * @member {module:model/DomainStatusDocService} DocService
 */
DomainStatus.prototype['DocService'] = undefined;

/**
 * @member {module:model/DomainStatusSearchService} SearchService
 */
DomainStatus.prototype['SearchService'] = undefined;

/**
 * @member {Boolean} RequiresIndexDocuments
 */
DomainStatus.prototype['RequiresIndexDocuments'] = undefined;

/**
 * @member {Boolean} Processing
 */
DomainStatus.prototype['Processing'] = undefined;

/**
 * @member {String} SearchInstanceType
 */
DomainStatus.prototype['SearchInstanceType'] = undefined;

/**
 * @member {Number} SearchPartitionCount
 */
DomainStatus.prototype['SearchPartitionCount'] = undefined;

/**
 * @member {Number} SearchInstanceCount
 */
DomainStatus.prototype['SearchInstanceCount'] = undefined;

/**
 * @member {module:model/Limits} Limits
 */
DomainStatus.prototype['Limits'] = undefined;






export default DomainStatus;

