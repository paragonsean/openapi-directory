/**
 * Amazon CloudSearch
 * <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use the Amazon CloudSearch configuration service to create, configure, and manage search domains. Configuration service requests are submitted using the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests submitted via HTTP GET or POST with a query parameter named Action.</p> <p>The endpoint for configuration service requests is region-specific: cloudsearch.<i>region</i>.amazonaws.com. For example, cloudsearch.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BuildSuggestersRequest from '../model/BuildSuggestersRequest';
import BuildSuggestersResponse from '../model/BuildSuggestersResponse';
import CreateDomainRequest from '../model/CreateDomainRequest';
import CreateDomainResponse from '../model/CreateDomainResponse';
import DefineAnalysisSchemeRequest from '../model/DefineAnalysisSchemeRequest';
import DefineAnalysisSchemeResponse from '../model/DefineAnalysisSchemeResponse';
import DefineExpressionRequest from '../model/DefineExpressionRequest';
import DefineExpressionResponse from '../model/DefineExpressionResponse';
import DefineIndexFieldRequest from '../model/DefineIndexFieldRequest';
import DefineIndexFieldResponse from '../model/DefineIndexFieldResponse';
import DefineSuggesterRequest from '../model/DefineSuggesterRequest';
import DefineSuggesterResponse from '../model/DefineSuggesterResponse';
import DeleteAnalysisSchemeRequest from '../model/DeleteAnalysisSchemeRequest';
import DeleteAnalysisSchemeResponse from '../model/DeleteAnalysisSchemeResponse';
import DeleteDomainRequest from '../model/DeleteDomainRequest';
import DeleteDomainResponse from '../model/DeleteDomainResponse';
import DeleteExpressionRequest from '../model/DeleteExpressionRequest';
import DeleteExpressionResponse from '../model/DeleteExpressionResponse';
import DeleteIndexFieldRequest from '../model/DeleteIndexFieldRequest';
import DeleteIndexFieldResponse from '../model/DeleteIndexFieldResponse';
import DeleteSuggesterRequest from '../model/DeleteSuggesterRequest';
import DeleteSuggesterResponse from '../model/DeleteSuggesterResponse';
import DescribeAnalysisSchemesRequest from '../model/DescribeAnalysisSchemesRequest';
import DescribeAnalysisSchemesResponse from '../model/DescribeAnalysisSchemesResponse';
import DescribeAvailabilityOptionsRequest from '../model/DescribeAvailabilityOptionsRequest';
import DescribeAvailabilityOptionsResponse from '../model/DescribeAvailabilityOptionsResponse';
import DescribeDomainEndpointOptionsRequest from '../model/DescribeDomainEndpointOptionsRequest';
import DescribeDomainEndpointOptionsResponse from '../model/DescribeDomainEndpointOptionsResponse';
import DescribeDomainsRequest from '../model/DescribeDomainsRequest';
import DescribeDomainsResponse from '../model/DescribeDomainsResponse';
import DescribeExpressionsRequest from '../model/DescribeExpressionsRequest';
import DescribeExpressionsResponse from '../model/DescribeExpressionsResponse';
import DescribeIndexFieldsRequest from '../model/DescribeIndexFieldsRequest';
import DescribeIndexFieldsResponse from '../model/DescribeIndexFieldsResponse';
import DescribeScalingParametersRequest from '../model/DescribeScalingParametersRequest';
import DescribeScalingParametersResponse from '../model/DescribeScalingParametersResponse';
import DescribeServiceAccessPoliciesRequest from '../model/DescribeServiceAccessPoliciesRequest';
import DescribeServiceAccessPoliciesResponse from '../model/DescribeServiceAccessPoliciesResponse';
import DescribeSuggestersRequest from '../model/DescribeSuggestersRequest';
import DescribeSuggestersResponse from '../model/DescribeSuggestersResponse';
import GETDefineAnalysisSchemeAnalysisSchemeParameter from '../model/GETDefineAnalysisSchemeAnalysisSchemeParameter';
import GETDefineExpressionExpressionParameter from '../model/GETDefineExpressionExpressionParameter';
import GETDefineIndexFieldIndexFieldParameter from '../model/GETDefineIndexFieldIndexFieldParameter';
import GETDefineSuggesterSuggesterParameter from '../model/GETDefineSuggesterSuggesterParameter';
import GETUpdateDomainEndpointOptionsDomainEndpointOptionsParameter from '../model/GETUpdateDomainEndpointOptionsDomainEndpointOptionsParameter';
import GETUpdateScalingParametersScalingParametersParameter from '../model/GETUpdateScalingParametersScalingParametersParameter';
import IndexDocumentsRequest from '../model/IndexDocumentsRequest';
import IndexDocumentsResponse from '../model/IndexDocumentsResponse';
import ListDomainNamesResponse from '../model/ListDomainNamesResponse';
import UpdateAvailabilityOptionsRequest from '../model/UpdateAvailabilityOptionsRequest';
import UpdateAvailabilityOptionsResponse from '../model/UpdateAvailabilityOptionsResponse';
import UpdateDomainEndpointOptionsRequest from '../model/UpdateDomainEndpointOptionsRequest';
import UpdateDomainEndpointOptionsResponse from '../model/UpdateDomainEndpointOptionsResponse';
import UpdateScalingParametersRequest from '../model/UpdateScalingParametersRequest';
import UpdateScalingParametersResponse from '../model/UpdateScalingParametersResponse';
import UpdateServiceAccessPoliciesRequest from '../model/UpdateServiceAccessPoliciesRequest';
import UpdateServiceAccessPoliciesResponse from '../model/UpdateServiceAccessPoliciesResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2013-01-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETBuildSuggesters operation.
     * @callback module:api/DefaultApi~gETBuildSuggestersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSuggestersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Indexes the search suggestions. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html#configuring-suggesters\">Configuring Suggesters</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETBuildSuggestersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSuggestersResponse}
     */
    gETBuildSuggesters(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETBuildSuggesters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETBuildSuggesters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETBuildSuggesters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = BuildSuggestersResponse;
      return this.apiClient.callApi(
        '/#Action=BuildSuggesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDomain operation.
     * @callback module:api/DefaultApi~gETCreateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new search domain. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/creating-domains.html\" target=\"_blank\">Creating a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName A name for the domain you are creating. Allowed characters are a-z (lower-case letters), 0-9, and hyphen (-). Domain names must start with a letter or number and be at least 3 and no more than 28 characters long.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETCreateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainResponse}
     */
    gETCreateDomain(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETCreateDomain");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDomainResponse;
      return this.apiClient.callApi(
        '/#Action=CreateDomain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDefineAnalysisScheme operation.
     * @callback module:api/DefaultApi~gETDefineAnalysisSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineAnalysisSchemeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures an analysis scheme that can be applied to a <code>text</code> or <code>text-array</code> field to define language-specific text processing options. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html\" target=\"_blank\">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {module:model/GETDefineAnalysisSchemeAnalysisSchemeParameter} analysisScheme 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDefineAnalysisSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineAnalysisSchemeResponse}
     */
    gETDefineAnalysisScheme(domainName, analysisScheme, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDefineAnalysisScheme");
      }
      // verify the required parameter 'analysisScheme' is set
      if (analysisScheme === undefined || analysisScheme === null) {
        throw new Error("Missing the required parameter 'analysisScheme' when calling gETDefineAnalysisScheme");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDefineAnalysisScheme");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDefineAnalysisScheme");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'AnalysisScheme': analysisScheme,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DefineAnalysisSchemeResponse;
      return this.apiClient.callApi(
        '/#Action=DefineAnalysisScheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDefineExpression operation.
     * @callback module:api/DefaultApi~gETDefineExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineExpressionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures an <code><a>Expression</a></code> for the search domain. Used to create new expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\" target=\"_blank\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {module:model/GETDefineExpressionExpressionParameter} expression 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDefineExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineExpressionResponse}
     */
    gETDefineExpression(domainName, expression, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDefineExpression");
      }
      // verify the required parameter 'expression' is set
      if (expression === undefined || expression === null) {
        throw new Error("Missing the required parameter 'expression' when calling gETDefineExpression");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDefineExpression");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDefineExpression");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Expression': expression,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DefineExpressionResponse;
      return this.apiClient.callApi(
        '/#Action=DefineExpression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDefineIndexField operation.
     * @callback module:api/DefaultApi~gETDefineIndexFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineIndexFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures an <code><a>IndexField</a></code> for the search domain. Used to create new fields and modify existing ones. You must specify the name of the domain you are configuring and an index field configuration. The index field configuration specifies a unique name, the index field type, and the options you want to configure for the field. The options you can specify depend on the <code><a>IndexFieldType</a></code>. If the field exists, the new configuration replaces the old one. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html\" target=\"_blank\">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>. 
     * @param {String} domainName 
     * @param {module:model/GETDefineIndexFieldIndexFieldParameter} indexField The index field and field options you want to configure. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDefineIndexFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineIndexFieldResponse}
     */
    gETDefineIndexField(domainName, indexField, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDefineIndexField");
      }
      // verify the required parameter 'indexField' is set
      if (indexField === undefined || indexField === null) {
        throw new Error("Missing the required parameter 'indexField' when calling gETDefineIndexField");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDefineIndexField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDefineIndexField");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'IndexField': indexField,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DefineIndexFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DefineIndexField', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDefineSuggester operation.
     * @callback module:api/DefaultApi~gETDefineSuggesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineSuggesterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures a suggester for a domain. A suggester enables you to display possible matches before users finish typing their queries. When you configure a suggester, you must specify the name of the text field you want to search for possible matches and a unique name for the suggester. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html\" target=\"_blank\">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {module:model/GETDefineSuggesterSuggesterParameter} suggester 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDefineSuggesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineSuggesterResponse}
     */
    gETDefineSuggester(domainName, suggester, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDefineSuggester");
      }
      // verify the required parameter 'suggester' is set
      if (suggester === undefined || suggester === null) {
        throw new Error("Missing the required parameter 'suggester' when calling gETDefineSuggester");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDefineSuggester");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDefineSuggester");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Suggester': suggester,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DefineSuggesterResponse;
      return this.apiClient.callApi(
        '/#Action=DefineSuggester', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteAnalysisScheme operation.
     * @callback module:api/DefaultApi~gETDeleteAnalysisSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAnalysisSchemeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an analysis scheme. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html\" target=\"_blank\">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>. 
     * @param {String} domainName 
     * @param {String} analysisSchemeName The name of the analysis scheme you want to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteAnalysisSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAnalysisSchemeResponse}
     */
    gETDeleteAnalysisScheme(domainName, analysisSchemeName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteAnalysisScheme");
      }
      // verify the required parameter 'analysisSchemeName' is set
      if (analysisSchemeName === undefined || analysisSchemeName === null) {
        throw new Error("Missing the required parameter 'analysisSchemeName' when calling gETDeleteAnalysisScheme");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteAnalysisScheme");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteAnalysisScheme");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'AnalysisSchemeName': analysisSchemeName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteAnalysisSchemeResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteAnalysisScheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDomain operation.
     * @callback module:api/DefaultApi~gETDeleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes a search domain and all of its data. Once a domain has been deleted, it cannot be recovered. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/deleting-domains.html\" target=\"_blank\">Deleting a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>. 
     * @param {String} domainName The name of the domain you want to permanently delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDomainResponse}
     */
    gETDeleteDomain(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteDomain");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteDomainResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteDomain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteExpression operation.
     * @callback module:api/DefaultApi~gETDeleteExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteExpressionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an <code><a>Expression</a></code> from the search domain. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\" target=\"_blank\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {String} expressionName The name of the <code><a>Expression</a></code> to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteExpressionResponse}
     */
    gETDeleteExpression(domainName, expressionName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteExpression");
      }
      // verify the required parameter 'expressionName' is set
      if (expressionName === undefined || expressionName === null) {
        throw new Error("Missing the required parameter 'expressionName' when calling gETDeleteExpression");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteExpression");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteExpression");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'ExpressionName': expressionName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteExpressionResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteExpression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteIndexField operation.
     * @callback module:api/DefaultApi~gETDeleteIndexFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteIndexFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an <code><a>IndexField</a></code> from the search domain. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html\" target=\"_blank\">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {String} indexFieldName The name of the index field your want to remove from the domain's indexing options.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteIndexFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteIndexFieldResponse}
     */
    gETDeleteIndexField(domainName, indexFieldName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteIndexField");
      }
      // verify the required parameter 'indexFieldName' is set
      if (indexFieldName === undefined || indexFieldName === null) {
        throw new Error("Missing the required parameter 'indexFieldName' when calling gETDeleteIndexField");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteIndexField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteIndexField");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'IndexFieldName': indexFieldName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteIndexFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteIndexField', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteSuggester operation.
     * @callback module:api/DefaultApi~gETDeleteSuggesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSuggesterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a suggester. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html\" target=\"_blank\">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {String} suggesterName Specifies the name of the suggester you want to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteSuggesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSuggesterResponse}
     */
    gETDeleteSuggester(domainName, suggesterName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteSuggester");
      }
      // verify the required parameter 'suggesterName' is set
      if (suggesterName === undefined || suggesterName === null) {
        throw new Error("Missing the required parameter 'suggesterName' when calling gETDeleteSuggester");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteSuggester");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteSuggester");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'SuggesterName': suggesterName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteSuggesterResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteSuggester', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeAnalysisSchemes operation.
     * @callback module:api/DefaultApi~gETDescribeAnalysisSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAnalysisSchemesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the analysis schemes configured for a domain. An analysis scheme defines language-specific text processing options for a <code>text</code> field. Can be limited to specific analysis schemes by name. By default, shows all analysis schemes and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html\" target=\"_blank\">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName The name of the domain you want to describe.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [analysisSchemeNames] The analysis schemes you want to describe.
     * @param {Boolean} [deployed] Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
     * @param {module:api/DefaultApi~gETDescribeAnalysisSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAnalysisSchemesResponse}
     */
    gETDescribeAnalysisSchemes(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeAnalysisSchemes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeAnalysisSchemes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeAnalysisSchemes");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'AnalysisSchemeNames': this.apiClient.buildCollectionParam(opts['analysisSchemeNames'], 'multi'),
        'Deployed': opts['deployed'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeAnalysisSchemesResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeAnalysisSchemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeAvailabilityOptions operation.
     * @callback module:api/DefaultApi~gETDescribeAvailabilityOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAvailabilityOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the availability options configured for a domain. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html\" target=\"_blank\">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName The name of the domain you want to describe.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [deployed] Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
     * @param {module:api/DefaultApi~gETDescribeAvailabilityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAvailabilityOptionsResponse}
     */
    gETDescribeAvailabilityOptions(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeAvailabilityOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeAvailabilityOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeAvailabilityOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Deployed': opts['deployed'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeAvailabilityOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeAvailabilityOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDomainEndpointOptions operation.
     * @callback module:api/DefaultApi~gETDescribeDomainEndpointOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainEndpointOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the domain's endpoint options, specifically whether all requests to the domain must arrive over HTTPS. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-domain-endpoint-options.html\" target=\"_blank\">Configuring Domain Endpoint Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName A string that represents the name of a domain.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [deployed] Whether to retrieve the latest configuration (which might be in a Processing state) or the current, active configuration. Defaults to <code>false</code>.
     * @param {module:api/DefaultApi~gETDescribeDomainEndpointOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainEndpointOptionsResponse}
     */
    gETDescribeDomainEndpointOptions(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeDomainEndpointOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDomainEndpointOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDomainEndpointOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Deployed': opts['deployed'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDomainEndpointOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeDomainEndpointOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDomains operation.
     * @callback module:api/DefaultApi~gETDescribeDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the search domains owned by this account. Can be limited to specific domains. Shows all domains by default. To get the number of searchable documents in a domain, use the console or submit a <code>matchall</code> request to your domain's search endpoint: <code>q=matchall&amp;amp;q.parser=structured&amp;amp;size=0</code>. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html\" target=\"_blank\">Getting Information about a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [domainNames] The names of the domains you want to include in the response.
     * @param {module:api/DefaultApi~gETDescribeDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainsResponse}
     */
    gETDescribeDomains(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDomains");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainNames': this.apiClient.buildCollectionParam(opts['domainNames'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDomainsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeDomains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeExpressions operation.
     * @callback module:api/DefaultApi~gETDescribeExpressionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExpressionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the expressions configured for the search domain. Can be limited to specific expressions by name. By default, shows all expressions and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\" target=\"_blank\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName The name of the domain you want to describe.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [expressionNames] Limits the <code><a>DescribeExpressions</a></code> response to the specified expressions. If not specified, all expressions are shown.
     * @param {Boolean} [deployed] Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
     * @param {module:api/DefaultApi~gETDescribeExpressionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExpressionsResponse}
     */
    gETDescribeExpressions(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeExpressions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeExpressions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeExpressions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'ExpressionNames': this.apiClient.buildCollectionParam(opts['expressionNames'], 'multi'),
        'Deployed': opts['deployed'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeExpressionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeExpressions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeIndexFields operation.
     * @callback module:api/DefaultApi~gETDescribeIndexFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIndexFieldsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the index fields configured for the search domain. Can be limited to specific fields by name. By default, shows all fields and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html\" target=\"_blank\">Getting Domain Information</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName The name of the domain you want to describe.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [fieldNames] A list of the index fields you want to describe. If not specified, information is returned for all configured index fields.
     * @param {Boolean} [deployed] Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
     * @param {module:api/DefaultApi~gETDescribeIndexFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIndexFieldsResponse}
     */
    gETDescribeIndexFields(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeIndexFields");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeIndexFields");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeIndexFields");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'FieldNames': this.apiClient.buildCollectionParam(opts['fieldNames'], 'multi'),
        'Deployed': opts['deployed'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeIndexFieldsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeIndexFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeScalingParameters operation.
     * @callback module:api/DefaultApi~gETDescribeScalingParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeScalingParametersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the scaling parameters configured for a domain. A domain's scaling parameters specify the desired search instance type and replication count. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html\" target=\"_blank\">Configuring Scaling Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeScalingParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeScalingParametersResponse}
     */
    gETDescribeScalingParameters(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeScalingParameters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeScalingParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeScalingParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeScalingParametersResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeScalingParameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeServiceAccessPolicies operation.
     * @callback module:api/DefaultApi~gETDescribeServiceAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the access policies that control access to the domain's document and search endpoints. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html\" target=\"_blank\">Configuring Access for a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName The name of the domain you want to describe.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [deployed] Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
     * @param {module:api/DefaultApi~gETDescribeServiceAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceAccessPoliciesResponse}
     */
    gETDescribeServiceAccessPolicies(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeServiceAccessPolicies");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeServiceAccessPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeServiceAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Deployed': opts['deployed'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeServiceAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeServiceAccessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeSuggesters operation.
     * @callback module:api/DefaultApi~gETDescribeSuggestersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSuggestersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the suggesters configured for a domain. A suggester enables you to display possible matches before users finish typing their queries. Can be limited to specific suggesters by name. By default, shows all suggesters and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html\" target=\"_blank\">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName The name of the domain you want to describe.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [suggesterNames] The suggesters you want to describe.
     * @param {Boolean} [deployed] Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
     * @param {module:api/DefaultApi~gETDescribeSuggestersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSuggestersResponse}
     */
    gETDescribeSuggesters(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDescribeSuggesters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeSuggesters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeSuggesters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'SuggesterNames': this.apiClient.buildCollectionParam(opts['suggesterNames'], 'multi'),
        'Deployed': opts['deployed'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeSuggestersResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeSuggesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETIndexDocuments operation.
     * @callback module:api/DefaultApi~gETIndexDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexDocumentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tells the search domain to start indexing its documents using the latest indexing options. This operation must be invoked to activate options whose <a>OptionStatus</a> is <code>RequiresIndexDocuments</code>.
     * @param {String} domainName 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETIndexDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexDocumentsResponse}
     */
    gETIndexDocuments(domainName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETIndexDocuments");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETIndexDocuments");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETIndexDocuments");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = IndexDocumentsResponse;
      return this.apiClient.callApi(
        '/#Action=IndexDocuments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETListDomainNames operation.
     * @callback module:api/DefaultApi~gETListDomainNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainNamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all search domains owned by an account.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETListDomainNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainNamesResponse}
     */
    gETListDomainNames(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETListDomainNames");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETListDomainNames");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDomainNamesResponse;
      return this.apiClient.callApi(
        '/#Action=ListDomainNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateAvailabilityOptions operation.
     * @callback module:api/DefaultApi~gETUpdateAvailabilityOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAvailabilityOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the availability options for a domain. Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability Zone in the same Region to increase fault tolerance in the event of a service disruption. Changes to the Multi-AZ option can take about half an hour to become active. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html\" target=\"_blank\">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName 
     * @param {Boolean} multiAZ You expand an existing search domain to a second Availability Zone by setting the Multi-AZ option to true. Similarly, you can turn off the Multi-AZ option to downgrade the domain to a single Availability Zone by setting the Multi-AZ option to <code>false</code>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateAvailabilityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAvailabilityOptionsResponse}
     */
    gETUpdateAvailabilityOptions(domainName, multiAZ, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateAvailabilityOptions");
      }
      // verify the required parameter 'multiAZ' is set
      if (multiAZ === undefined || multiAZ === null) {
        throw new Error("Missing the required parameter 'multiAZ' when calling gETUpdateAvailabilityOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateAvailabilityOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateAvailabilityOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'MultiAZ': multiAZ,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateAvailabilityOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateAvailabilityOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateDomainEndpointOptions operation.
     * @callback module:api/DefaultApi~gETUpdateDomainEndpointOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainEndpointOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the domain's endpoint options, specifically whether all requests to the domain must arrive over HTTPS. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-domain-endpoint-options.html\" target=\"_blank\">Configuring Domain Endpoint Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {String} domainName A string that represents the name of a domain.
     * @param {module:model/GETUpdateDomainEndpointOptionsDomainEndpointOptionsParameter} domainEndpointOptions Whether to require that all requests to the domain arrive over HTTPS. We recommend Policy-Min-TLS-1-2-2019-07 for TLSSecurityPolicy. For compatibility with older clients, the default is Policy-Min-TLS-1-0-2019-07. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateDomainEndpointOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainEndpointOptionsResponse}
     */
    gETUpdateDomainEndpointOptions(domainName, domainEndpointOptions, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateDomainEndpointOptions");
      }
      // verify the required parameter 'domainEndpointOptions' is set
      if (domainEndpointOptions === undefined || domainEndpointOptions === null) {
        throw new Error("Missing the required parameter 'domainEndpointOptions' when calling gETUpdateDomainEndpointOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateDomainEndpointOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateDomainEndpointOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'DomainEndpointOptions': domainEndpointOptions,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateDomainEndpointOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateDomainEndpointOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateScalingParameters operation.
     * @callback module:api/DefaultApi~gETUpdateScalingParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateScalingParametersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures scaling parameters for a domain. A domain's scaling parameters specify the desired search instance type and replication count. Amazon CloudSearch will still automatically scale your domain based on the volume of data and traffic, but not below the desired instance type and replication count. If the Multi-AZ option is enabled, these values control the resources used per Availability Zone. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html\" target=\"_blank\">Configuring Scaling Options</a> in the <i>Amazon CloudSearch Developer Guide</i>. 
     * @param {String} domainName 
     * @param {module:model/GETUpdateScalingParametersScalingParametersParameter} scalingParameters 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateScalingParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateScalingParametersResponse}
     */
    gETUpdateScalingParameters(domainName, scalingParameters, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateScalingParameters");
      }
      // verify the required parameter 'scalingParameters' is set
      if (scalingParameters === undefined || scalingParameters === null) {
        throw new Error("Missing the required parameter 'scalingParameters' when calling gETUpdateScalingParameters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateScalingParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateScalingParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'ScalingParameters': scalingParameters,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateScalingParametersResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateScalingParameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdateServiceAccessPolicies operation.
     * @callback module:api/DefaultApi~gETUpdateServiceAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the access rules that control access to the domain's document and search endpoints. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html\" target=\"_blank\"> Configuring Access for an Amazon CloudSearch Domain</a>.
     * @param {String} domainName 
     * @param {String} accessPolicies The access rules you want to configure. These rules replace any existing rules. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETUpdateServiceAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceAccessPoliciesResponse}
     */
    gETUpdateServiceAccessPolicies(domainName, accessPolicies, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETUpdateServiceAccessPolicies");
      }
      // verify the required parameter 'accessPolicies' is set
      if (accessPolicies === undefined || accessPolicies === null) {
        throw new Error("Missing the required parameter 'accessPolicies' when calling gETUpdateServiceAccessPolicies");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdateServiceAccessPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdateServiceAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'DomainName': domainName,
        'AccessPolicies': accessPolicies,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UpdateServiceAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateServiceAccessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTBuildSuggesters operation.
     * @callback module:api/DefaultApi~pOSTBuildSuggestersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSuggestersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Indexes the search suggestions. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html#configuring-suggesters\">Configuring Suggesters</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/BuildSuggestersRequest} [buildSuggestersRequest] 
     * @param {module:api/DefaultApi~pOSTBuildSuggestersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSuggestersResponse}
     */
    pOSTBuildSuggesters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['buildSuggestersRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTBuildSuggesters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTBuildSuggesters");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = BuildSuggestersResponse;
      return this.apiClient.callApi(
        '/#Action=BuildSuggesters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDomain operation.
     * @callback module:api/DefaultApi~pOSTCreateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new search domain. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/creating-domains.html\" target=\"_blank\">Creating a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDomainRequest} [createDomainRequest] 
     * @param {module:api/DefaultApi~pOSTCreateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainResponse}
     */
    pOSTCreateDomain(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDomainRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDomainResponse;
      return this.apiClient.callApi(
        '/#Action=CreateDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDefineAnalysisScheme operation.
     * @callback module:api/DefaultApi~pOSTDefineAnalysisSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineAnalysisSchemeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures an analysis scheme that can be applied to a <code>text</code> or <code>text-array</code> field to define language-specific text processing options. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html\" target=\"_blank\">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DefineAnalysisSchemeRequest} [defineAnalysisSchemeRequest] 
     * @param {module:api/DefaultApi~pOSTDefineAnalysisSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineAnalysisSchemeResponse}
     */
    pOSTDefineAnalysisScheme(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['defineAnalysisSchemeRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDefineAnalysisScheme");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDefineAnalysisScheme");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DefineAnalysisSchemeResponse;
      return this.apiClient.callApi(
        '/#Action=DefineAnalysisScheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDefineExpression operation.
     * @callback module:api/DefaultApi~pOSTDefineExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineExpressionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures an <code><a>Expression</a></code> for the search domain. Used to create new expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\" target=\"_blank\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DefineExpressionRequest} [defineExpressionRequest] 
     * @param {module:api/DefaultApi~pOSTDefineExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineExpressionResponse}
     */
    pOSTDefineExpression(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['defineExpressionRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDefineExpression");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDefineExpression");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DefineExpressionResponse;
      return this.apiClient.callApi(
        '/#Action=DefineExpression', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDefineIndexField operation.
     * @callback module:api/DefaultApi~pOSTDefineIndexFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineIndexFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures an <code><a>IndexField</a></code> for the search domain. Used to create new fields and modify existing ones. You must specify the name of the domain you are configuring and an index field configuration. The index field configuration specifies a unique name, the index field type, and the options you want to configure for the field. The options you can specify depend on the <code><a>IndexFieldType</a></code>. If the field exists, the new configuration replaces the old one. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html\" target=\"_blank\">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DefineIndexFieldRequest} [defineIndexFieldRequest] 
     * @param {module:api/DefaultApi~pOSTDefineIndexFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineIndexFieldResponse}
     */
    pOSTDefineIndexField(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['defineIndexFieldRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDefineIndexField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDefineIndexField");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DefineIndexFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DefineIndexField', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDefineSuggester operation.
     * @callback module:api/DefaultApi~pOSTDefineSuggesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefineSuggesterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures a suggester for a domain. A suggester enables you to display possible matches before users finish typing their queries. When you configure a suggester, you must specify the name of the text field you want to search for possible matches and a unique name for the suggester. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html\" target=\"_blank\">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DefineSuggesterRequest} [defineSuggesterRequest] 
     * @param {module:api/DefaultApi~pOSTDefineSuggesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefineSuggesterResponse}
     */
    pOSTDefineSuggester(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['defineSuggesterRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDefineSuggester");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDefineSuggester");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DefineSuggesterResponse;
      return this.apiClient.callApi(
        '/#Action=DefineSuggester', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteAnalysisScheme operation.
     * @callback module:api/DefaultApi~pOSTDeleteAnalysisSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAnalysisSchemeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an analysis scheme. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html\" target=\"_blank\">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteAnalysisSchemeRequest} [deleteAnalysisSchemeRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteAnalysisSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAnalysisSchemeResponse}
     */
    pOSTDeleteAnalysisScheme(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteAnalysisSchemeRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteAnalysisScheme");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteAnalysisScheme");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteAnalysisSchemeResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteAnalysisScheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDomain operation.
     * @callback module:api/DefaultApi~pOSTDeleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes a search domain and all of its data. Once a domain has been deleted, it cannot be recovered. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/deleting-domains.html\" target=\"_blank\">Deleting a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDomainRequest} [deleteDomainRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDomainResponse}
     */
    pOSTDeleteDomain(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDomainRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteDomainResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteExpression operation.
     * @callback module:api/DefaultApi~pOSTDeleteExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteExpressionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an <code><a>Expression</a></code> from the search domain. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\" target=\"_blank\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteExpressionRequest} [deleteExpressionRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteExpressionResponse}
     */
    pOSTDeleteExpression(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteExpressionRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteExpression");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteExpression");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteExpressionResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteExpression', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteIndexField operation.
     * @callback module:api/DefaultApi~pOSTDeleteIndexFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteIndexFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an <code><a>IndexField</a></code> from the search domain. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html\" target=\"_blank\">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteIndexFieldRequest} [deleteIndexFieldRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteIndexFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteIndexFieldResponse}
     */
    pOSTDeleteIndexField(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteIndexFieldRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteIndexField");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteIndexField");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteIndexFieldResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteIndexField', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteSuggester operation.
     * @callback module:api/DefaultApi~pOSTDeleteSuggesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSuggesterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a suggester. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html\" target=\"_blank\">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteSuggesterRequest} [deleteSuggesterRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteSuggesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSuggesterResponse}
     */
    pOSTDeleteSuggester(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteSuggesterRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteSuggester");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteSuggester");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteSuggesterResponse;
      return this.apiClient.callApi(
        '/#Action=DeleteSuggester', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeAnalysisSchemes operation.
     * @callback module:api/DefaultApi~pOSTDescribeAnalysisSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAnalysisSchemesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the analysis schemes configured for a domain. An analysis scheme defines language-specific text processing options for a <code>text</code> field. Can be limited to specific analysis schemes by name. By default, shows all analysis schemes and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html\" target=\"_blank\">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeAnalysisSchemesRequest} [describeAnalysisSchemesRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeAnalysisSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAnalysisSchemesResponse}
     */
    pOSTDescribeAnalysisSchemes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeAnalysisSchemesRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeAnalysisSchemes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeAnalysisSchemes");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeAnalysisSchemesResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeAnalysisSchemes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeAvailabilityOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeAvailabilityOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAvailabilityOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the availability options configured for a domain. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html\" target=\"_blank\">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeAvailabilityOptionsRequest} [describeAvailabilityOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeAvailabilityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAvailabilityOptionsResponse}
     */
    pOSTDescribeAvailabilityOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeAvailabilityOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeAvailabilityOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeAvailabilityOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeAvailabilityOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeAvailabilityOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDomainEndpointOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeDomainEndpointOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainEndpointOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the domain's endpoint options, specifically whether all requests to the domain must arrive over HTTPS. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-domain-endpoint-options.html\" target=\"_blank\">Configuring Domain Endpoint Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeDomainEndpointOptionsRequest} [describeDomainEndpointOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeDomainEndpointOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainEndpointOptionsResponse}
     */
    pOSTDescribeDomainEndpointOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDomainEndpointOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDomainEndpointOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDomainEndpointOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDomainEndpointOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeDomainEndpointOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDomains operation.
     * @callback module:api/DefaultApi~pOSTDescribeDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the search domains owned by this account. Can be limited to specific domains. Shows all domains by default. To get the number of searchable documents in a domain, use the console or submit a <code>matchall</code> request to your domain's search endpoint: <code>q=matchall&amp;amp;q.parser=structured&amp;amp;size=0</code>. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html\" target=\"_blank\">Getting Information about a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeDomainsRequest} [describeDomainsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainsResponse}
     */
    pOSTDescribeDomains(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDomainsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDomains");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDomainsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeExpressions operation.
     * @callback module:api/DefaultApi~pOSTDescribeExpressionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExpressionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the expressions configured for the search domain. Can be limited to specific expressions by name. By default, shows all expressions and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\" target=\"_blank\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeExpressionsRequest} [describeExpressionsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeExpressionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExpressionsResponse}
     */
    pOSTDescribeExpressions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeExpressionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeExpressions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeExpressions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeExpressionsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeExpressions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeIndexFields operation.
     * @callback module:api/DefaultApi~pOSTDescribeIndexFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIndexFieldsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the index fields configured for the search domain. Can be limited to specific fields by name. By default, shows all fields and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html\" target=\"_blank\">Getting Domain Information</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeIndexFieldsRequest} [describeIndexFieldsRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeIndexFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIndexFieldsResponse}
     */
    pOSTDescribeIndexFields(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeIndexFieldsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeIndexFields");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeIndexFields");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeIndexFieldsResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeIndexFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeScalingParameters operation.
     * @callback module:api/DefaultApi~pOSTDescribeScalingParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeScalingParametersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the scaling parameters configured for a domain. A domain's scaling parameters specify the desired search instance type and replication count. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html\" target=\"_blank\">Configuring Scaling Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeScalingParametersRequest} [describeScalingParametersRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeScalingParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeScalingParametersResponse}
     */
    pOSTDescribeScalingParameters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeScalingParametersRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeScalingParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeScalingParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeScalingParametersResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeScalingParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeServiceAccessPolicies operation.
     * @callback module:api/DefaultApi~pOSTDescribeServiceAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the access policies that control access to the domain's document and search endpoints. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html\" target=\"_blank\">Configuring Access for a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeServiceAccessPoliciesRequest} [describeServiceAccessPoliciesRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeServiceAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceAccessPoliciesResponse}
     */
    pOSTDescribeServiceAccessPolicies(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeServiceAccessPoliciesRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeServiceAccessPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeServiceAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeServiceAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeServiceAccessPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeSuggesters operation.
     * @callback module:api/DefaultApi~pOSTDescribeSuggestersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSuggestersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the suggesters configured for a domain. A suggester enables you to display possible matches before users finish typing their queries. Can be limited to specific suggesters by name. By default, shows all suggesters and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html\" target=\"_blank\">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeSuggestersRequest} [describeSuggestersRequest] 
     * @param {module:api/DefaultApi~pOSTDescribeSuggestersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSuggestersResponse}
     */
    pOSTDescribeSuggesters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeSuggestersRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeSuggesters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeSuggesters");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeSuggestersResponse;
      return this.apiClient.callApi(
        '/#Action=DescribeSuggesters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTIndexDocuments operation.
     * @callback module:api/DefaultApi~pOSTIndexDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexDocumentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tells the search domain to start indexing its documents using the latest indexing options. This operation must be invoked to activate options whose <a>OptionStatus</a> is <code>RequiresIndexDocuments</code>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/IndexDocumentsRequest} [indexDocumentsRequest] 
     * @param {module:api/DefaultApi~pOSTIndexDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexDocumentsResponse}
     */
    pOSTIndexDocuments(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['indexDocumentsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTIndexDocuments");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTIndexDocuments");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = IndexDocumentsResponse;
      return this.apiClient.callApi(
        '/#Action=IndexDocuments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTListDomainNames operation.
     * @callback module:api/DefaultApi~pOSTListDomainNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainNamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all search domains owned by an account.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~pOSTListDomainNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainNamesResponse}
     */
    pOSTListDomainNames(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTListDomainNames");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTListDomainNames");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDomainNamesResponse;
      return this.apiClient.callApi(
        '/#Action=ListDomainNames', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateAvailabilityOptions operation.
     * @callback module:api/DefaultApi~pOSTUpdateAvailabilityOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAvailabilityOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the availability options for a domain. Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability Zone in the same Region to increase fault tolerance in the event of a service disruption. Changes to the Multi-AZ option can take about half an hour to become active. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html\" target=\"_blank\">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateAvailabilityOptionsRequest} [updateAvailabilityOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateAvailabilityOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAvailabilityOptionsResponse}
     */
    pOSTUpdateAvailabilityOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAvailabilityOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateAvailabilityOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateAvailabilityOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateAvailabilityOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateAvailabilityOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateDomainEndpointOptions operation.
     * @callback module:api/DefaultApi~pOSTUpdateDomainEndpointOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainEndpointOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the domain's endpoint options, specifically whether all requests to the domain must arrive over HTTPS. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-domain-endpoint-options.html\" target=\"_blank\">Configuring Domain Endpoint Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateDomainEndpointOptionsRequest} [updateDomainEndpointOptionsRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateDomainEndpointOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainEndpointOptionsResponse}
     */
    pOSTUpdateDomainEndpointOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDomainEndpointOptionsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateDomainEndpointOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateDomainEndpointOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateDomainEndpointOptionsResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateDomainEndpointOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateScalingParameters operation.
     * @callback module:api/DefaultApi~pOSTUpdateScalingParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateScalingParametersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures scaling parameters for a domain. A domain's scaling parameters specify the desired search instance type and replication count. Amazon CloudSearch will still automatically scale your domain based on the volume of data and traffic, but not below the desired instance type and replication count. If the Multi-AZ option is enabled, these values control the resources used per Availability Zone. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html\" target=\"_blank\">Configuring Scaling Options</a> in the <i>Amazon CloudSearch Developer Guide</i>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateScalingParametersRequest} [updateScalingParametersRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateScalingParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateScalingParametersResponse}
     */
    pOSTUpdateScalingParameters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateScalingParametersRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateScalingParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateScalingParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateScalingParametersResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateScalingParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdateServiceAccessPolicies operation.
     * @callback module:api/DefaultApi~pOSTUpdateServiceAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the access rules that control access to the domain's document and search endpoints. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html\" target=\"_blank\"> Configuring Access for an Amazon CloudSearch Domain</a>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdateServiceAccessPoliciesRequest} [updateServiceAccessPoliciesRequest] 
     * @param {module:api/DefaultApi~pOSTUpdateServiceAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceAccessPoliciesResponse}
     */
    pOSTUpdateServiceAccessPolicies(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateServiceAccessPoliciesRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdateServiceAccessPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdateServiceAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateServiceAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#Action=UpdateServiceAccessPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
