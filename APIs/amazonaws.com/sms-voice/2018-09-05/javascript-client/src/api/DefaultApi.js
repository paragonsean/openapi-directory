/**
 * Amazon Pinpoint SMS and Voice Service
 * Pinpoint SMS and Voice Messaging public facing APIs
 *
 * The version of the OpenAPI document: 2018-09-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateConfigurationSetEventDestinationRequest from '../model/CreateConfigurationSetEventDestinationRequest';
import CreateConfigurationSetRequest from '../model/CreateConfigurationSetRequest';
import GetConfigurationSetEventDestinationsResponse from '../model/GetConfigurationSetEventDestinationsResponse';
import ListConfigurationSetsResponse from '../model/ListConfigurationSetsResponse';
import SendVoiceMessageRequest from '../model/SendVoiceMessageRequest';
import SendVoiceMessageResponse from '../model/SendVoiceMessageResponse';
import UpdateConfigurationSetEventDestinationRequest from '../model/UpdateConfigurationSetEventDestinationRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-09-05
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConfigurationSet operation.
     * @callback module:api/DefaultApi~createConfigurationSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new configuration set. After you create the configuration set, you can add one or more event destinations to it.
     * @param {module:model/CreateConfigurationSetRequest} createConfigurationSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigurationSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createConfigurationSet(createConfigurationSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigurationSetRequest;
      // verify the required parameter 'createConfigurationSetRequest' is set
      if (createConfigurationSetRequest === undefined || createConfigurationSetRequest === null) {
        throw new Error("Missing the required parameter 'createConfigurationSetRequest' when calling createConfigurationSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/sms-voice/configuration-sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~createConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new event destination in a configuration set.
     * @param {String} configurationSetName ConfigurationSetName
     * @param {module:model/CreateConfigurationSetEventDestinationRequest} createConfigurationSetEventDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createConfigurationSetEventDestination(configurationSetName, createConfigurationSetEventDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigurationSetEventDestinationRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling createConfigurationSetEventDestination");
      }
      // verify the required parameter 'createConfigurationSetEventDestinationRequest' is set
      if (createConfigurationSetEventDestinationRequest === undefined || createConfigurationSetEventDestinationRequest === null) {
        throw new Error("Missing the required parameter 'createConfigurationSetEventDestinationRequest' when calling createConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurationSet operation.
     * @callback module:api/DefaultApi~deleteConfigurationSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing configuration set.
     * @param {String} configurationSetName ConfigurationSetName
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfigurationSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfigurationSet(configurationSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling deleteConfigurationSet");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/sms-voice/configuration-sets/{ConfigurationSetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~deleteConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an event destination in a configuration set.
     * @param {String} configurationSetName ConfigurationSetName
     * @param {String} eventDestinationName EventDestinationName
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfigurationSetEventDestination(configurationSetName, eventDestinationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling deleteConfigurationSetEventDestination");
      }
      // verify the required parameter 'eventDestinationName' is set
      if (eventDestinationName === undefined || eventDestinationName === null) {
        throw new Error("Missing the required parameter 'eventDestinationName' when calling deleteConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName,
        'EventDestinationName': eventDestinationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurationSetEventDestinations operation.
     * @callback module:api/DefaultApi~getConfigurationSetEventDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigurationSetEventDestinationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain information about an event destination, including the types of events it reports, the Amazon Resource Name (ARN) of the destination, and the name of the event destination.
     * @param {String} configurationSetName ConfigurationSetName
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfigurationSetEventDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigurationSetEventDestinationsResponse}
     */
    getConfigurationSetEventDestinations(configurationSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling getConfigurationSetEventDestinations");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigurationSetEventDestinationsResponse;
      return this.apiClient.callApi(
        '/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigurationSets operation.
     * @callback module:api/DefaultApi~listConfigurationSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigurationSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of the configuration sets associated with your Amazon Pinpoint account in the current region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to the API that indicates the position in the list of results.
     * @param {String} [pageSize] Used to specify the number of items that should be returned in the response.
     * @param {module:api/DefaultApi~listConfigurationSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigurationSetsResponse}
     */
    listConfigurationSets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigurationSetsResponse;
      return this.apiClient.callApi(
        '/v1/sms-voice/configuration-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVoiceMessage operation.
     * @callback module:api/DefaultApi~sendVoiceMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendVoiceMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new voice message and send it to a recipient's phone number.
     * @param {module:model/SendVoiceMessageRequest} sendVoiceMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendVoiceMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendVoiceMessageResponse}
     */
    sendVoiceMessage(sendVoiceMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendVoiceMessageRequest;
      // verify the required parameter 'sendVoiceMessageRequest' is set
      if (sendVoiceMessageRequest === undefined || sendVoiceMessageRequest === null) {
        throw new Error("Missing the required parameter 'sendVoiceMessageRequest' when calling sendVoiceMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendVoiceMessageResponse;
      return this.apiClient.callApi(
        '/v1/sms-voice/voice/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~updateConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an event destination in a configuration set. An event destination is a location that you publish information about your voice calls to. For example, you can log an event to an Amazon CloudWatch destination when a call fails.
     * @param {String} configurationSetName ConfigurationSetName
     * @param {String} eventDestinationName EventDestinationName
     * @param {module:model/UpdateConfigurationSetEventDestinationRequest} updateConfigurationSetEventDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateConfigurationSetEventDestination(configurationSetName, eventDestinationName, updateConfigurationSetEventDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfigurationSetEventDestinationRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling updateConfigurationSetEventDestination");
      }
      // verify the required parameter 'eventDestinationName' is set
      if (eventDestinationName === undefined || eventDestinationName === null) {
        throw new Error("Missing the required parameter 'eventDestinationName' when calling updateConfigurationSetEventDestination");
      }
      // verify the required parameter 'updateConfigurationSetEventDestinationRequest' is set
      if (updateConfigurationSetEventDestinationRequest === undefined || updateConfigurationSetEventDestinationRequest === null) {
        throw new Error("Missing the required parameter 'updateConfigurationSetEventDestinationRequest' when calling updateConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName,
        'EventDestinationName': eventDestinationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
