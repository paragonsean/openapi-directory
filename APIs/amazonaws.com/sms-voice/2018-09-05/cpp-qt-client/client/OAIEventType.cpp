/**
 * Amazon Pinpoint SMS and Voice Service
 * Pinpoint SMS and Voice Messaging public facing APIs
 *
 * The version of the OpenAPI document: 2018-09-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventType::OAIEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventType::OAIEventType() {
    this->initializeModel();
}

OAIEventType::~OAIEventType() {}

void OAIEventType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INITIATED_CALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::INITIATED_CALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RINGING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::RINGING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANSWERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ANSWERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED_CALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::COMPLETED_CALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BUSY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::BUSY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_ANSWER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::NO_ANSWER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventType::INITIATED_CALL:
            val = "INITIATED_CALL";
            break;
        case eOAIEventType::RINGING:
            val = "RINGING";
            break;
        case eOAIEventType::ANSWERED:
            val = "ANSWERED";
            break;
        case eOAIEventType::COMPLETED_CALL:
            val = "COMPLETED_CALL";
            break;
        case eOAIEventType::BUSY:
            val = "BUSY";
            break;
        case eOAIEventType::FAILED:
            val = "FAILED";
            break;
        case eOAIEventType::NO_ANSWER:
            val = "NO_ANSWER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventType::eOAIEventType OAIEventType::getValue() const {
    return m_value;
}

void OAIEventType::setValue(const OAIEventType::eOAIEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
