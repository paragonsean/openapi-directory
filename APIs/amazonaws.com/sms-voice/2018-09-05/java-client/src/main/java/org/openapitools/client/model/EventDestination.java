/*
 * Amazon Pinpoint SMS and Voice Service
 * Pinpoint SMS and Voice Messaging public facing APIs
 *
 * The version of the OpenAPI document: 2018-09-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudWatchLogsDestination;
import org.openapitools.client.model.EventType;
import org.openapitools.client.model.KinesisFirehoseDestination;
import org.openapitools.client.model.SnsDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that defines an event destination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:17.597345-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventDestination {
  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGS_DESTINATION = "CloudWatchLogsDestination";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGS_DESTINATION)
  private CloudWatchLogsDestination cloudWatchLogsDestination;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_KINESIS_FIREHOSE_DESTINATION = "KinesisFirehoseDestination";
  @SerializedName(SERIALIZED_NAME_KINESIS_FIREHOSE_DESTINATION)
  private KinesisFirehoseDestination kinesisFirehoseDestination;

  public static final String SERIALIZED_NAME_MATCHING_EVENT_TYPES = "MatchingEventTypes";
  @SerializedName(SERIALIZED_NAME_MATCHING_EVENT_TYPES)
  private List<EventType> matchingEventTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SNS_DESTINATION = "SnsDestination";
  @SerializedName(SERIALIZED_NAME_SNS_DESTINATION)
  private SnsDestination snsDestination;

  public EventDestination() {
  }

  public EventDestination cloudWatchLogsDestination(CloudWatchLogsDestination cloudWatchLogsDestination) {
    this.cloudWatchLogsDestination = cloudWatchLogsDestination;
    return this;
  }

  /**
   * Get cloudWatchLogsDestination
   * @return cloudWatchLogsDestination
   */
  @javax.annotation.Nullable
  public CloudWatchLogsDestination getCloudWatchLogsDestination() {
    return cloudWatchLogsDestination;
  }

  public void setCloudWatchLogsDestination(CloudWatchLogsDestination cloudWatchLogsDestination) {
    this.cloudWatchLogsDestination = cloudWatchLogsDestination;
  }


  public EventDestination enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public EventDestination kinesisFirehoseDestination(KinesisFirehoseDestination kinesisFirehoseDestination) {
    this.kinesisFirehoseDestination = kinesisFirehoseDestination;
    return this;
  }

  /**
   * Get kinesisFirehoseDestination
   * @return kinesisFirehoseDestination
   */
  @javax.annotation.Nullable
  public KinesisFirehoseDestination getKinesisFirehoseDestination() {
    return kinesisFirehoseDestination;
  }

  public void setKinesisFirehoseDestination(KinesisFirehoseDestination kinesisFirehoseDestination) {
    this.kinesisFirehoseDestination = kinesisFirehoseDestination;
  }


  public EventDestination matchingEventTypes(List<EventType> matchingEventTypes) {
    this.matchingEventTypes = matchingEventTypes;
    return this;
  }

  public EventDestination addMatchingEventTypesItem(EventType matchingEventTypesItem) {
    if (this.matchingEventTypes == null) {
      this.matchingEventTypes = new ArrayList<>();
    }
    this.matchingEventTypes.add(matchingEventTypesItem);
    return this;
  }

  /**
   * An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
   * @return matchingEventTypes
   */
  @javax.annotation.Nullable
  public List<EventType> getMatchingEventTypes() {
    return matchingEventTypes;
  }

  public void setMatchingEventTypes(List<EventType> matchingEventTypes) {
    this.matchingEventTypes = matchingEventTypes;
  }


  public EventDestination name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventDestination snsDestination(SnsDestination snsDestination) {
    this.snsDestination = snsDestination;
    return this;
  }

  /**
   * Get snsDestination
   * @return snsDestination
   */
  @javax.annotation.Nullable
  public SnsDestination getSnsDestination() {
    return snsDestination;
  }

  public void setSnsDestination(SnsDestination snsDestination) {
    this.snsDestination = snsDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDestination eventDestination = (EventDestination) o;
    return Objects.equals(this.cloudWatchLogsDestination, eventDestination.cloudWatchLogsDestination) &&
        Objects.equals(this.enabled, eventDestination.enabled) &&
        Objects.equals(this.kinesisFirehoseDestination, eventDestination.kinesisFirehoseDestination) &&
        Objects.equals(this.matchingEventTypes, eventDestination.matchingEventTypes) &&
        Objects.equals(this.name, eventDestination.name) &&
        Objects.equals(this.snsDestination, eventDestination.snsDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudWatchLogsDestination, enabled, kinesisFirehoseDestination, matchingEventTypes, name, snsDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDestination {\n");
    sb.append("    cloudWatchLogsDestination: ").append(toIndentedString(cloudWatchLogsDestination)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    kinesisFirehoseDestination: ").append(toIndentedString(kinesisFirehoseDestination)).append("\n");
    sb.append("    matchingEventTypes: ").append(toIndentedString(matchingEventTypes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    snsDestination: ").append(toIndentedString(snsDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CloudWatchLogsDestination");
    openapiFields.add("Enabled");
    openapiFields.add("KinesisFirehoseDestination");
    openapiFields.add("MatchingEventTypes");
    openapiFields.add("Name");
    openapiFields.add("SnsDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDestination is not found in the empty JSON string", EventDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CloudWatchLogsDestination`
      if (jsonObj.get("CloudWatchLogsDestination") != null && !jsonObj.get("CloudWatchLogsDestination").isJsonNull()) {
        CloudWatchLogsDestination.validateJsonElement(jsonObj.get("CloudWatchLogsDestination"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
      // validate the optional field `KinesisFirehoseDestination`
      if (jsonObj.get("KinesisFirehoseDestination") != null && !jsonObj.get("KinesisFirehoseDestination").isJsonNull()) {
        KinesisFirehoseDestination.validateJsonElement(jsonObj.get("KinesisFirehoseDestination"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MatchingEventTypes") != null && !jsonObj.get("MatchingEventTypes").isJsonNull() && !jsonObj.get("MatchingEventTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MatchingEventTypes` to be an array in the JSON string but got `%s`", jsonObj.get("MatchingEventTypes").toString()));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `SnsDestination`
      if (jsonObj.get("SnsDestination") != null && !jsonObj.get("SnsDestination").isJsonNull()) {
        SnsDestination.validateJsonElement(jsonObj.get("SnsDestination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDestination>() {
           @Override
           public void write(JsonWriter out, EventDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventDestination
   * @throws IOException if the JSON string is invalid with respect to EventDestination
   */
  public static EventDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDestination.class);
  }

  /**
   * Convert an instance of EventDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

