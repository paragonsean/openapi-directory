/*
 * Amazon Pinpoint SMS and Voice Service
 * Pinpoint SMS and Voice Messaging public facing APIs
 *
 * The version of the OpenAPI document: 2018-09-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CallInstructionsMessageType;
import org.openapitools.client.model.PlainTextMessageType;
import org.openapitools.client.model.SSMLMessageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains a voice message and information about the recipient that you want to send it to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:17.597345-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VoiceMessageContent {
  public static final String SERIALIZED_NAME_CALL_INSTRUCTIONS_MESSAGE = "CallInstructionsMessage";
  @SerializedName(SERIALIZED_NAME_CALL_INSTRUCTIONS_MESSAGE)
  private CallInstructionsMessageType callInstructionsMessage;

  public static final String SERIALIZED_NAME_PLAIN_TEXT_MESSAGE = "PlainTextMessage";
  @SerializedName(SERIALIZED_NAME_PLAIN_TEXT_MESSAGE)
  private PlainTextMessageType plainTextMessage;

  public static final String SERIALIZED_NAME_SS_M_L_MESSAGE = "SSMLMessage";
  @SerializedName(SERIALIZED_NAME_SS_M_L_MESSAGE)
  private SSMLMessageType ssMLMessage;

  public VoiceMessageContent() {
  }

  public VoiceMessageContent callInstructionsMessage(CallInstructionsMessageType callInstructionsMessage) {
    this.callInstructionsMessage = callInstructionsMessage;
    return this;
  }

  /**
   * Get callInstructionsMessage
   * @return callInstructionsMessage
   */
  @javax.annotation.Nullable
  public CallInstructionsMessageType getCallInstructionsMessage() {
    return callInstructionsMessage;
  }

  public void setCallInstructionsMessage(CallInstructionsMessageType callInstructionsMessage) {
    this.callInstructionsMessage = callInstructionsMessage;
  }


  public VoiceMessageContent plainTextMessage(PlainTextMessageType plainTextMessage) {
    this.plainTextMessage = plainTextMessage;
    return this;
  }

  /**
   * Get plainTextMessage
   * @return plainTextMessage
   */
  @javax.annotation.Nullable
  public PlainTextMessageType getPlainTextMessage() {
    return plainTextMessage;
  }

  public void setPlainTextMessage(PlainTextMessageType plainTextMessage) {
    this.plainTextMessage = plainTextMessage;
  }


  public VoiceMessageContent ssMLMessage(SSMLMessageType ssMLMessage) {
    this.ssMLMessage = ssMLMessage;
    return this;
  }

  /**
   * Get ssMLMessage
   * @return ssMLMessage
   */
  @javax.annotation.Nullable
  public SSMLMessageType getSsMLMessage() {
    return ssMLMessage;
  }

  public void setSsMLMessage(SSMLMessageType ssMLMessage) {
    this.ssMLMessage = ssMLMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VoiceMessageContent voiceMessageContent = (VoiceMessageContent) o;
    return Objects.equals(this.callInstructionsMessage, voiceMessageContent.callInstructionsMessage) &&
        Objects.equals(this.plainTextMessage, voiceMessageContent.plainTextMessage) &&
        Objects.equals(this.ssMLMessage, voiceMessageContent.ssMLMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callInstructionsMessage, plainTextMessage, ssMLMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VoiceMessageContent {\n");
    sb.append("    callInstructionsMessage: ").append(toIndentedString(callInstructionsMessage)).append("\n");
    sb.append("    plainTextMessage: ").append(toIndentedString(plainTextMessage)).append("\n");
    sb.append("    ssMLMessage: ").append(toIndentedString(ssMLMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CallInstructionsMessage");
    openapiFields.add("PlainTextMessage");
    openapiFields.add("SSMLMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VoiceMessageContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VoiceMessageContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VoiceMessageContent is not found in the empty JSON string", VoiceMessageContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VoiceMessageContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VoiceMessageContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CallInstructionsMessage`
      if (jsonObj.get("CallInstructionsMessage") != null && !jsonObj.get("CallInstructionsMessage").isJsonNull()) {
        CallInstructionsMessageType.validateJsonElement(jsonObj.get("CallInstructionsMessage"));
      }
      // validate the optional field `PlainTextMessage`
      if (jsonObj.get("PlainTextMessage") != null && !jsonObj.get("PlainTextMessage").isJsonNull()) {
        PlainTextMessageType.validateJsonElement(jsonObj.get("PlainTextMessage"));
      }
      // validate the optional field `SSMLMessage`
      if (jsonObj.get("SSMLMessage") != null && !jsonObj.get("SSMLMessage").isJsonNull()) {
        SSMLMessageType.validateJsonElement(jsonObj.get("SSMLMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VoiceMessageContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VoiceMessageContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VoiceMessageContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VoiceMessageContent.class));

       return (TypeAdapter<T>) new TypeAdapter<VoiceMessageContent>() {
           @Override
           public void write(JsonWriter out, VoiceMessageContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VoiceMessageContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VoiceMessageContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VoiceMessageContent
   * @throws IOException if the JSON string is invalid with respect to VoiceMessageContent
   */
  public static VoiceMessageContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VoiceMessageContent.class);
  }

  /**
   * Convert an instance of VoiceMessageContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

