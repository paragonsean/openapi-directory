/**
 * AWS Data Pipeline
 * <p>AWS Data Pipeline configures and manages a data-driven workflow called a pipeline. AWS Data Pipeline handles the details of scheduling and ensuring that data dependencies are met so that your application can focus on processing the data.</p> <p>AWS Data Pipeline provides a JAR implementation of a task runner called AWS Data Pipeline Task Runner. AWS Data Pipeline Task Runner provides logic for common data management scenarios, such as performing database queries and running data analysis using Amazon Elastic MapReduce (Amazon EMR). You can use AWS Data Pipeline Task Runner as your task runner, or you can write your own task runner to provide custom data management.</p> <p>AWS Data Pipeline implements two main sets of functionality. Use the first set to create a pipeline and define data sources, schedules, dependencies, and the transforms to be performed on the data. Use the second set in your task runner application to receive the next task ready for processing. The logic for performing the task, such as querying the data, running data analysis, or converting the data from one format to another, is contained within the task runner. The task runner performs the task assigned to it by the web service, reporting progress to the web service as it does so. When the task is done, the task runner reports the final success or failure of the task to the web service.</p>
 *
 * The version of the OpenAPI document: 2012-10-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineDescription::OAIPipelineDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineDescription::OAIPipelineDescription() {
    this->initializeModel();
}

OAIPipelineDescription::~OAIPipelineDescription() {}

void OAIPipelineDescription::initializeModel() {

    m_pipeline_id_isSet = false;
    m_pipeline_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPipelineDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineDescription::fromJsonObject(QJsonObject json) {

    m_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_pipeline_id, json[QString("pipelineId")]);
    m_pipeline_id_isSet = !json[QString("pipelineId")].isNull() && m_pipeline_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIPipelineDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_id_isSet) {
        obj.insert(QString("pipelineId"), ::OpenAPI::toJsonValue(m_pipeline_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_fields.isSet()) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPipelineDescription::getPipelineId() const {
    return m_pipeline_id;
}
void OAIPipelineDescription::setPipelineId(const QString &pipeline_id) {
    m_pipeline_id = pipeline_id;
    m_pipeline_id_isSet = true;
}

bool OAIPipelineDescription::is_pipeline_id_Set() const{
    return m_pipeline_id_isSet;
}

bool OAIPipelineDescription::is_pipeline_id_Valid() const{
    return m_pipeline_id_isValid;
}

QString OAIPipelineDescription::getName() const {
    return m_name;
}
void OAIPipelineDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPipelineDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPipelineDescription::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIPipelineDescription::getFields() const {
    return m_fields;
}
void OAIPipelineDescription::setFields(const QList &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIPipelineDescription::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIPipelineDescription::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIPipelineDescription::getDescription() const {
    return m_description;
}
void OAIPipelineDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPipelineDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPipelineDescription::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIPipelineDescription::getTags() const {
    return m_tags;
}
void OAIPipelineDescription::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPipelineDescription::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPipelineDescription::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPipelineDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pipeline_id_isValid && m_name_isValid && m_fields_isValid && true;
}

} // namespace OpenAPI
