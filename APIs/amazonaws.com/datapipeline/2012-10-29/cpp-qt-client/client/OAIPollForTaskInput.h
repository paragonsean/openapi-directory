/**
 * AWS Data Pipeline
 * <p>AWS Data Pipeline configures and manages a data-driven workflow called a pipeline. AWS Data Pipeline handles the details of scheduling and ensuring that data dependencies are met so that your application can focus on processing the data.</p> <p>AWS Data Pipeline provides a JAR implementation of a task runner called AWS Data Pipeline Task Runner. AWS Data Pipeline Task Runner provides logic for common data management scenarios, such as performing database queries and running data analysis using Amazon Elastic MapReduce (Amazon EMR). You can use AWS Data Pipeline Task Runner as your task runner, or you can write your own task runner to provide custom data management.</p> <p>AWS Data Pipeline implements two main sets of functionality. Use the first set to create a pipeline and define data sources, schedules, dependencies, and the transforms to be performed on the data. Use the second set in your task runner application to receive the next task ready for processing. The logic for performing the task, such as querying the data, running data analysis, or converting the data from one format to another, is contained within the task runner. The task runner performs the task assigned to it by the web service, reporting progress to the web service as it does so. When the task is done, the task runner reports the final success or failure of the task to the web service.</p>
 *
 * The version of the OpenAPI document: 2012-10-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPollForTaskInput.h
 *
 * Contains the parameters for PollForTask.
 */

#ifndef OAIPollForTaskInput_H
#define OAIPollForTaskInput_H

#include <QJsonObject>

#include "OAIPollForTaskInput_instanceIdentity.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPollForTaskInput_instanceIdentity;

class OAIPollForTaskInput : public OAIObject {
public:
    OAIPollForTaskInput();
    OAIPollForTaskInput(QString json);
    ~OAIPollForTaskInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWorkerGroup() const;
    void setWorkerGroup(const QString &worker_group);
    bool is_worker_group_Set() const;
    bool is_worker_group_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    OAIPollForTaskInput_instanceIdentity getInstanceIdentity() const;
    void setInstanceIdentity(const OAIPollForTaskInput_instanceIdentity &instance_identity);
    bool is_instance_identity_Set() const;
    bool is_instance_identity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_worker_group;
    bool m_worker_group_isSet;
    bool m_worker_group_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    OAIPollForTaskInput_instanceIdentity m_instance_identity;
    bool m_instance_identity_isSet;
    bool m_instance_identity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPollForTaskInput)

#endif // OAIPollForTaskInput_H
