/**
 * AWS Data Pipeline
 * <p>AWS Data Pipeline configures and manages a data-driven workflow called a pipeline. AWS Data Pipeline handles the details of scheduling and ensuring that data dependencies are met so that your application can focus on processing the data.</p> <p>AWS Data Pipeline provides a JAR implementation of a task runner called AWS Data Pipeline Task Runner. AWS Data Pipeline Task Runner provides logic for common data management scenarios, such as performing database queries and running data analysis using Amazon Elastic MapReduce (Amazon EMR). You can use AWS Data Pipeline Task Runner as your task runner, or you can write your own task runner to provide custom data management.</p> <p>AWS Data Pipeline implements two main sets of functionality. Use the first set to create a pipeline and define data sources, schedules, dependencies, and the transforms to be performed on the data. Use the second set in your task runner application to receive the next task ready for processing. The logic for performing the task, such as querying the data, running data analysis, or converting the data from one format to another, is contained within the task runner. The task runner performs the task assigned to it by the web service, reporting progress to the web service as it does so. When the task is done, the task runner reports the final success or failure of the task to the web service.</p>
 *
 * The version of the OpenAPI document: 2012-10-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISetTaskStatusInput.h
 *
 * Contains the parameters for SetTaskStatus.
 */

#ifndef OAISetTaskStatusInput_H
#define OAISetTaskStatusInput_H

#include <QJsonObject>

#include "OAITaskStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISetTaskStatusInput : public OAIObject {
public:
    OAISetTaskStatusInput();
    OAISetTaskStatusInput(QString json);
    ~OAISetTaskStatusInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTaskId() const;
    void setTaskId(const QString &task_id);
    bool is_task_id_Set() const;
    bool is_task_id_Valid() const;

    OAITaskStatus getTaskStatus() const;
    void setTaskStatus(const OAITaskStatus &task_status);
    bool is_task_status_Set() const;
    bool is_task_status_Valid() const;

    QString getErrorId() const;
    void setErrorId(const QString &error_id);
    bool is_error_id_Set() const;
    bool is_error_id_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QString getErrorStackTrace() const;
    void setErrorStackTrace(const QString &error_stack_trace);
    bool is_error_stack_trace_Set() const;
    bool is_error_stack_trace_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_task_id;
    bool m_task_id_isSet;
    bool m_task_id_isValid;

    OAITaskStatus m_task_status;
    bool m_task_status_isSet;
    bool m_task_status_isValid;

    QString m_error_id;
    bool m_error_id_isSet;
    bool m_error_id_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QString m_error_stack_trace;
    bool m_error_stack_trace_isSet;
    bool m_error_stack_trace_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISetTaskStatusInput)

#endif // OAISetTaskStatusInput_H
