/**
 * AWS Data Pipeline
 * <p>AWS Data Pipeline configures and manages a data-driven workflow called a pipeline. AWS Data Pipeline handles the details of scheduling and ensuring that data dependencies are met so that your application can focus on processing the data.</p> <p>AWS Data Pipeline provides a JAR implementation of a task runner called AWS Data Pipeline Task Runner. AWS Data Pipeline Task Runner provides logic for common data management scenarios, such as performing database queries and running data analysis using Amazon Elastic MapReduce (Amazon EMR). You can use AWS Data Pipeline Task Runner as your task runner, or you can write your own task runner to provide custom data management.</p> <p>AWS Data Pipeline implements two main sets of functionality. Use the first set to create a pipeline and define data sources, schedules, dependencies, and the transforms to be performed on the data. Use the second set in your task runner application to receive the next task ready for processing. The logic for performing the task, such as querying the data, running data analysis, or converting the data from one format to another, is contained within the task runner. The task runner performs the task assigned to it by the web service, reporting progress to the web service as it does so. When the task is done, the task runner reports the final success or failure of the task to the web service.</p>
 *
 * The version of the OpenAPI document: 2012-10-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIField::OAIField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIField::OAIField() {
    this->initializeModel();
}

OAIField::~OAIField() {}

void OAIField::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_ref_value_isSet = false;
    m_ref_value_isValid = false;
}

void OAIField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIField::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;

    m_ref_value_isValid = ::OpenAPI::fromJsonValue(m_ref_value, json[QString("refValue")]);
    m_ref_value_isSet = !json[QString("refValue")].isNull() && m_ref_value_isValid;
}

QString OAIField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIField::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_ref_value_isSet) {
        obj.insert(QString("refValue"), ::OpenAPI::toJsonValue(m_ref_value));
    }
    return obj;
}

QString OAIField::getKey() const {
    return m_key;
}
void OAIField::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIField::is_key_Set() const{
    return m_key_isSet;
}

bool OAIField::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIField::getStringValue() const {
    return m_string_value;
}
void OAIField::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIField::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIField::is_string_value_Valid() const{
    return m_string_value_isValid;
}

QString OAIField::getRefValue() const {
    return m_ref_value;
}
void OAIField::setRefValue(const QString &ref_value) {
    m_ref_value = ref_value;
    m_ref_value_isSet = true;
}

bool OAIField::is_ref_value_Set() const{
    return m_ref_value_isSet;
}

bool OAIField::is_ref_value_Valid() const{
    return m_ref_value_isValid;
}

bool OAIField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && true;
}

} // namespace OpenAPI
