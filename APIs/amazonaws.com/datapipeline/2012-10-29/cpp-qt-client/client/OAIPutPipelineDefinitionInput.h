/**
 * AWS Data Pipeline
 * <p>AWS Data Pipeline configures and manages a data-driven workflow called a pipeline. AWS Data Pipeline handles the details of scheduling and ensuring that data dependencies are met so that your application can focus on processing the data.</p> <p>AWS Data Pipeline provides a JAR implementation of a task runner called AWS Data Pipeline Task Runner. AWS Data Pipeline Task Runner provides logic for common data management scenarios, such as performing database queries and running data analysis using Amazon Elastic MapReduce (Amazon EMR). You can use AWS Data Pipeline Task Runner as your task runner, or you can write your own task runner to provide custom data management.</p> <p>AWS Data Pipeline implements two main sets of functionality. Use the first set to create a pipeline and define data sources, schedules, dependencies, and the transforms to be performed on the data. Use the second set in your task runner application to receive the next task ready for processing. The logic for performing the task, such as querying the data, running data analysis, or converting the data from one format to another, is contained within the task runner. The task runner performs the task assigned to it by the web service, reporting progress to the web service as it does so. When the task is done, the task runner reports the final success or failure of the task to the web service.</p>
 *
 * The version of the OpenAPI document: 2012-10-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutPipelineDefinitionInput.h
 *
 * Contains the parameters for PutPipelineDefinition.
 */

#ifndef OAIPutPipelineDefinitionInput_H
#define OAIPutPipelineDefinitionInput_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutPipelineDefinitionInput : public OAIObject {
public:
    OAIPutPipelineDefinitionInput();
    OAIPutPipelineDefinitionInput(QString json);
    ~OAIPutPipelineDefinitionInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPipelineId() const;
    void setPipelineId(const QString &pipeline_id);
    bool is_pipeline_id_Set() const;
    bool is_pipeline_id_Valid() const;

    QList getPipelineObjects() const;
    void setPipelineObjects(const QList &pipeline_objects);
    bool is_pipeline_objects_Set() const;
    bool is_pipeline_objects_Valid() const;

    QList getParameterObjects() const;
    void setParameterObjects(const QList &parameter_objects);
    bool is_parameter_objects_Set() const;
    bool is_parameter_objects_Valid() const;

    QList getParameterValues() const;
    void setParameterValues(const QList &parameter_values);
    bool is_parameter_values_Set() const;
    bool is_parameter_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_pipeline_id;
    bool m_pipeline_id_isSet;
    bool m_pipeline_id_isValid;

    QList m_pipeline_objects;
    bool m_pipeline_objects_isSet;
    bool m_pipeline_objects_isValid;

    QList m_parameter_objects;
    bool m_parameter_objects_isSet;
    bool m_parameter_objects_isValid;

    QList m_parameter_values;
    bool m_parameter_values_isSet;
    bool m_parameter_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutPipelineDefinitionInput)

#endif // OAIPutPipelineDefinitionInput_H
