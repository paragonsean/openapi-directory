/*
 * AWS Data Pipeline
 * <p>AWS Data Pipeline configures and manages a data-driven workflow called a pipeline. AWS Data Pipeline handles the details of scheduling and ensuring that data dependencies are met so that your application can focus on processing the data.</p> <p>AWS Data Pipeline provides a JAR implementation of a task runner called AWS Data Pipeline Task Runner. AWS Data Pipeline Task Runner provides logic for common data management scenarios, such as performing database queries and running data analysis using Amazon Elastic MapReduce (Amazon EMR). You can use AWS Data Pipeline Task Runner as your task runner, or you can write your own task runner to provide custom data management.</p> <p>AWS Data Pipeline implements two main sets of functionality. Use the first set to create a pipeline and define data sources, schedules, dependencies, and the transforms to be performed on the data. Use the second set in your task runner application to receive the next task ready for processing. The logic for performing the task, such as querying the data, running data analysis, or converting the data from one format to another, is contained within the task runner. The task runner performs the task assigned to it by the web service, reporting progress to the web service as it does so. When the task is done, the task runner reports the final success or failure of the task to the web service.</p>
 *
 * The version of the OpenAPI document: 2012-10-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the parameters for DescribeObjects.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:47.095291-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeObjectsInput {
  public static final String SERIALIZED_NAME_PIPELINE_ID = "pipelineId";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ID)
  private String pipelineId;

  public static final String SERIALIZED_NAME_OBJECT_IDS = "objectIds";
  @SerializedName(SERIALIZED_NAME_OBJECT_IDS)
  private List objectIds;

  public static final String SERIALIZED_NAME_EVALUATE_EXPRESSIONS = "evaluateExpressions";
  @SerializedName(SERIALIZED_NAME_EVALUATE_EXPRESSIONS)
  private Boolean evaluateExpressions;

  public static final String SERIALIZED_NAME_MARKER = "marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  private String marker;

  public DescribeObjectsInput() {
  }

  public DescribeObjectsInput pipelineId(String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  /**
   * Get pipelineId
   * @return pipelineId
   */
  @javax.annotation.Nonnull
  public String getPipelineId() {
    return pipelineId;
  }

  public void setPipelineId(String pipelineId) {
    this.pipelineId = pipelineId;
  }


  public DescribeObjectsInput objectIds(List objectIds) {
    this.objectIds = objectIds;
    return this;
  }

  /**
   * Get objectIds
   * @return objectIds
   */
  @javax.annotation.Nonnull
  public List getObjectIds() {
    return objectIds;
  }

  public void setObjectIds(List objectIds) {
    this.objectIds = objectIds;
  }


  public DescribeObjectsInput evaluateExpressions(Boolean evaluateExpressions) {
    this.evaluateExpressions = evaluateExpressions;
    return this;
  }

  /**
   * Get evaluateExpressions
   * @return evaluateExpressions
   */
  @javax.annotation.Nullable
  public Boolean getEvaluateExpressions() {
    return evaluateExpressions;
  }

  public void setEvaluateExpressions(Boolean evaluateExpressions) {
    this.evaluateExpressions = evaluateExpressions;
  }


  public DescribeObjectsInput marker(String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Get marker
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(String marker) {
    this.marker = marker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeObjectsInput describeObjectsInput = (DescribeObjectsInput) o;
    return Objects.equals(this.pipelineId, describeObjectsInput.pipelineId) &&
        Objects.equals(this.objectIds, describeObjectsInput.objectIds) &&
        Objects.equals(this.evaluateExpressions, describeObjectsInput.evaluateExpressions) &&
        Objects.equals(this.marker, describeObjectsInput.marker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pipelineId, objectIds, evaluateExpressions, marker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeObjectsInput {\n");
    sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
    sb.append("    objectIds: ").append(toIndentedString(objectIds)).append("\n");
    sb.append("    evaluateExpressions: ").append(toIndentedString(evaluateExpressions)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pipelineId");
    openapiFields.add("objectIds");
    openapiFields.add("evaluateExpressions");
    openapiFields.add("marker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pipelineId");
    openapiRequiredFields.add("objectIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeObjectsInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeObjectsInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeObjectsInput is not found in the empty JSON string", DescribeObjectsInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeObjectsInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeObjectsInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeObjectsInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `pipelineId`
      String.validateJsonElement(jsonObj.get("pipelineId"));
      // validate the required field `objectIds`
      List.validateJsonElement(jsonObj.get("objectIds"));
      // validate the optional field `evaluateExpressions`
      if (jsonObj.get("evaluateExpressions") != null && !jsonObj.get("evaluateExpressions").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("evaluateExpressions"));
      }
      // validate the optional field `marker`
      if (jsonObj.get("marker") != null && !jsonObj.get("marker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("marker"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeObjectsInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeObjectsInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeObjectsInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeObjectsInput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeObjectsInput>() {
           @Override
           public void write(JsonWriter out, DescribeObjectsInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeObjectsInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeObjectsInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeObjectsInput
   * @throws IOException if the JSON string is invalid with respect to DescribeObjectsInput
   */
  public static DescribeObjectsInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeObjectsInput.class);
  }

  /**
   * Convert an instance of DescribeObjectsInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

