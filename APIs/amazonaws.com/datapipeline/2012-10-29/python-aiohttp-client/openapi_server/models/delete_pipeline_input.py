# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeletePipelineInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_id: str=None):
        """DeletePipelineInput - a model defined in OpenAPI

        :param pipeline_id: The pipeline_id of this DeletePipelineInput.
        """
        self.openapi_types = {
            'pipeline_id': str
        }

        self.attribute_map = {
            'pipeline_id': 'pipelineId'
        }

        self._pipeline_id = pipeline_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletePipelineInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletePipelineInput of this DeletePipelineInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this DeletePipelineInput.


        :return: The pipeline_id of this DeletePipelineInput.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this DeletePipelineInput.


        :param pipeline_id: The pipeline_id of this DeletePipelineInput.
        :type pipeline_id: str
        """
        if pipeline_id is None:
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")

        self._pipeline_id = pipeline_id
