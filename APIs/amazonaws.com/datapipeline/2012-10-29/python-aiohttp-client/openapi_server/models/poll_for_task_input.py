# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.poll_for_task_input_instance_identity import PollForTaskInputInstanceIdentity
from openapi_server import util


class PollForTaskInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, worker_group: str=None, hostname: str=None, instance_identity: PollForTaskInputInstanceIdentity=None):
        """PollForTaskInput - a model defined in OpenAPI

        :param worker_group: The worker_group of this PollForTaskInput.
        :param hostname: The hostname of this PollForTaskInput.
        :param instance_identity: The instance_identity of this PollForTaskInput.
        """
        self.openapi_types = {
            'worker_group': str,
            'hostname': str,
            'instance_identity': PollForTaskInputInstanceIdentity
        }

        self.attribute_map = {
            'worker_group': 'workerGroup',
            'hostname': 'hostname',
            'instance_identity': 'instanceIdentity'
        }

        self._worker_group = worker_group
        self._hostname = hostname
        self._instance_identity = instance_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollForTaskInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollForTaskInput of this PollForTaskInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def worker_group(self):
        """Gets the worker_group of this PollForTaskInput.


        :return: The worker_group of this PollForTaskInput.
        :rtype: str
        """
        return self._worker_group

    @worker_group.setter
    def worker_group(self, worker_group):
        """Sets the worker_group of this PollForTaskInput.


        :param worker_group: The worker_group of this PollForTaskInput.
        :type worker_group: str
        """
        if worker_group is None:
            raise ValueError("Invalid value for `worker_group`, must not be `None`")

        self._worker_group = worker_group

    @property
    def hostname(self):
        """Gets the hostname of this PollForTaskInput.


        :return: The hostname of this PollForTaskInput.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this PollForTaskInput.


        :param hostname: The hostname of this PollForTaskInput.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def instance_identity(self):
        """Gets the instance_identity of this PollForTaskInput.


        :return: The instance_identity of this PollForTaskInput.
        :rtype: PollForTaskInputInstanceIdentity
        """
        return self._instance_identity

    @instance_identity.setter
    def instance_identity(self, instance_identity):
        """Sets the instance_identity of this PollForTaskInput.


        :param instance_identity: The instance_identity of this PollForTaskInput.
        :type instance_identity: PollForTaskInputInstanceIdentity
        """

        self._instance_identity = instance_identity
