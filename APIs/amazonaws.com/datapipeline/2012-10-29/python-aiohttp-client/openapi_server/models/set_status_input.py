# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetStatusInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_id: str=None, object_ids: List=None, status: str=None):
        """SetStatusInput - a model defined in OpenAPI

        :param pipeline_id: The pipeline_id of this SetStatusInput.
        :param object_ids: The object_ids of this SetStatusInput.
        :param status: The status of this SetStatusInput.
        """
        self.openapi_types = {
            'pipeline_id': str,
            'object_ids': List,
            'status': str
        }

        self.attribute_map = {
            'pipeline_id': 'pipelineId',
            'object_ids': 'objectIds',
            'status': 'status'
        }

        self._pipeline_id = pipeline_id
        self._object_ids = object_ids
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetStatusInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetStatusInput of this SetStatusInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this SetStatusInput.


        :return: The pipeline_id of this SetStatusInput.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this SetStatusInput.


        :param pipeline_id: The pipeline_id of this SetStatusInput.
        :type pipeline_id: str
        """
        if pipeline_id is None:
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")

        self._pipeline_id = pipeline_id

    @property
    def object_ids(self):
        """Gets the object_ids of this SetStatusInput.


        :return: The object_ids of this SetStatusInput.
        :rtype: List
        """
        return self._object_ids

    @object_ids.setter
    def object_ids(self, object_ids):
        """Sets the object_ids of this SetStatusInput.


        :param object_ids: The object_ids of this SetStatusInput.
        :type object_ids: List
        """
        if object_ids is None:
            raise ValueError("Invalid value for `object_ids`, must not be `None`")

        self._object_ids = object_ids

    @property
    def status(self):
        """Gets the status of this SetStatusInput.


        :return: The status of this SetStatusInput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SetStatusInput.


        :param status: The status of this SetStatusInput.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
