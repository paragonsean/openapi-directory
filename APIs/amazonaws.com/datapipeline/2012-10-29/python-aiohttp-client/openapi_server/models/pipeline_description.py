# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PipelineDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_id: str=None, name: str=None, fields: List=None, description: str=None, tags: List=None):
        """PipelineDescription - a model defined in OpenAPI

        :param pipeline_id: The pipeline_id of this PipelineDescription.
        :param name: The name of this PipelineDescription.
        :param fields: The fields of this PipelineDescription.
        :param description: The description of this PipelineDescription.
        :param tags: The tags of this PipelineDescription.
        """
        self.openapi_types = {
            'pipeline_id': str,
            'name': str,
            'fields': List,
            'description': str,
            'tags': List
        }

        self.attribute_map = {
            'pipeline_id': 'pipelineId',
            'name': 'name',
            'fields': 'fields',
            'description': 'description',
            'tags': 'tags'
        }

        self._pipeline_id = pipeline_id
        self._name = name
        self._fields = fields
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineDescription of this PipelineDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this PipelineDescription.


        :return: The pipeline_id of this PipelineDescription.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this PipelineDescription.


        :param pipeline_id: The pipeline_id of this PipelineDescription.
        :type pipeline_id: str
        """
        if pipeline_id is None:
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")

        self._pipeline_id = pipeline_id

    @property
    def name(self):
        """Gets the name of this PipelineDescription.


        :return: The name of this PipelineDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelineDescription.


        :param name: The name of this PipelineDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def fields(self):
        """Gets the fields of this PipelineDescription.


        :return: The fields of this PipelineDescription.
        :rtype: List
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PipelineDescription.


        :param fields: The fields of this PipelineDescription.
        :type fields: List
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def description(self):
        """Gets the description of this PipelineDescription.


        :return: The description of this PipelineDescription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PipelineDescription.


        :param description: The description of this PipelineDescription.
        :type description: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this PipelineDescription.


        :return: The tags of this PipelineDescription.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PipelineDescription.


        :param tags: The tags of this PipelineDescription.
        :type tags: List
        """

        self._tags = tags
