# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_objects_input_query import QueryObjectsInputQuery
from openapi_server import util


class QueryObjectsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_id: str=None, query: QueryObjectsInputQuery=None, sphere: str=None, marker: str=None, limit: int=None):
        """QueryObjectsInput - a model defined in OpenAPI

        :param pipeline_id: The pipeline_id of this QueryObjectsInput.
        :param query: The query of this QueryObjectsInput.
        :param sphere: The sphere of this QueryObjectsInput.
        :param marker: The marker of this QueryObjectsInput.
        :param limit: The limit of this QueryObjectsInput.
        """
        self.openapi_types = {
            'pipeline_id': str,
            'query': QueryObjectsInputQuery,
            'sphere': str,
            'marker': str,
            'limit': int
        }

        self.attribute_map = {
            'pipeline_id': 'pipelineId',
            'query': 'query',
            'sphere': 'sphere',
            'marker': 'marker',
            'limit': 'limit'
        }

        self._pipeline_id = pipeline_id
        self._query = query
        self._sphere = sphere
        self._marker = marker
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryObjectsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryObjectsInput of this QueryObjectsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this QueryObjectsInput.


        :return: The pipeline_id of this QueryObjectsInput.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this QueryObjectsInput.


        :param pipeline_id: The pipeline_id of this QueryObjectsInput.
        :type pipeline_id: str
        """
        if pipeline_id is None:
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")

        self._pipeline_id = pipeline_id

    @property
    def query(self):
        """Gets the query of this QueryObjectsInput.


        :return: The query of this QueryObjectsInput.
        :rtype: QueryObjectsInputQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this QueryObjectsInput.


        :param query: The query of this QueryObjectsInput.
        :type query: QueryObjectsInputQuery
        """

        self._query = query

    @property
    def sphere(self):
        """Gets the sphere of this QueryObjectsInput.


        :return: The sphere of this QueryObjectsInput.
        :rtype: str
        """
        return self._sphere

    @sphere.setter
    def sphere(self, sphere):
        """Sets the sphere of this QueryObjectsInput.


        :param sphere: The sphere of this QueryObjectsInput.
        :type sphere: str
        """
        if sphere is None:
            raise ValueError("Invalid value for `sphere`, must not be `None`")

        self._sphere = sphere

    @property
    def marker(self):
        """Gets the marker of this QueryObjectsInput.


        :return: The marker of this QueryObjectsInput.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this QueryObjectsInput.


        :param marker: The marker of this QueryObjectsInput.
        :type marker: str
        """

        self._marker = marker

    @property
    def limit(self):
        """Gets the limit of this QueryObjectsInput.


        :return: The limit of this QueryObjectsInput.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryObjectsInput.


        :param limit: The limit of this QueryObjectsInput.
        :type limit: int
        """

        self._limit = limit
