# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluateExpressionOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluated_expression: str=None):
        """EvaluateExpressionOutput - a model defined in OpenAPI

        :param evaluated_expression: The evaluated_expression of this EvaluateExpressionOutput.
        """
        self.openapi_types = {
            'evaluated_expression': str
        }

        self.attribute_map = {
            'evaluated_expression': 'evaluatedExpression'
        }

        self._evaluated_expression = evaluated_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluateExpressionOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluateExpressionOutput of this EvaluateExpressionOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluated_expression(self):
        """Gets the evaluated_expression of this EvaluateExpressionOutput.


        :return: The evaluated_expression of this EvaluateExpressionOutput.
        :rtype: str
        """
        return self._evaluated_expression

    @evaluated_expression.setter
    def evaluated_expression(self, evaluated_expression):
        """Sets the evaluated_expression of this EvaluateExpressionOutput.


        :param evaluated_expression: The evaluated_expression of this EvaluateExpressionOutput.
        :type evaluated_expression: str
        """
        if evaluated_expression is None:
            raise ValueError("Invalid value for `evaluated_expression`, must not be `None`")

        self._evaluated_expression = evaluated_expression
