# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeObjectsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_objects: List=None, marker: str=None, has_more_results: bool=None):
        """DescribeObjectsOutput - a model defined in OpenAPI

        :param pipeline_objects: The pipeline_objects of this DescribeObjectsOutput.
        :param marker: The marker of this DescribeObjectsOutput.
        :param has_more_results: The has_more_results of this DescribeObjectsOutput.
        """
        self.openapi_types = {
            'pipeline_objects': List,
            'marker': str,
            'has_more_results': bool
        }

        self.attribute_map = {
            'pipeline_objects': 'pipelineObjects',
            'marker': 'marker',
            'has_more_results': 'hasMoreResults'
        }

        self._pipeline_objects = pipeline_objects
        self._marker = marker
        self._has_more_results = has_more_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeObjectsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeObjectsOutput of this DescribeObjectsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_objects(self):
        """Gets the pipeline_objects of this DescribeObjectsOutput.


        :return: The pipeline_objects of this DescribeObjectsOutput.
        :rtype: List
        """
        return self._pipeline_objects

    @pipeline_objects.setter
    def pipeline_objects(self, pipeline_objects):
        """Sets the pipeline_objects of this DescribeObjectsOutput.


        :param pipeline_objects: The pipeline_objects of this DescribeObjectsOutput.
        :type pipeline_objects: List
        """
        if pipeline_objects is None:
            raise ValueError("Invalid value for `pipeline_objects`, must not be `None`")

        self._pipeline_objects = pipeline_objects

    @property
    def marker(self):
        """Gets the marker of this DescribeObjectsOutput.


        :return: The marker of this DescribeObjectsOutput.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DescribeObjectsOutput.


        :param marker: The marker of this DescribeObjectsOutput.
        :type marker: str
        """

        self._marker = marker

    @property
    def has_more_results(self):
        """Gets the has_more_results of this DescribeObjectsOutput.


        :return: The has_more_results of this DescribeObjectsOutput.
        :rtype: bool
        """
        return self._has_more_results

    @has_more_results.setter
    def has_more_results(self, has_more_results):
        """Sets the has_more_results of this DescribeObjectsOutput.


        :param has_more_results: The has_more_results of this DescribeObjectsOutput.
        :type has_more_results: bool
        """

        self._has_more_results = has_more_results
