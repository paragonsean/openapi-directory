# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportTaskRunnerHeartbeatInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, taskrunner_id: str=None, worker_group: str=None, hostname: str=None):
        """ReportTaskRunnerHeartbeatInput - a model defined in OpenAPI

        :param taskrunner_id: The taskrunner_id of this ReportTaskRunnerHeartbeatInput.
        :param worker_group: The worker_group of this ReportTaskRunnerHeartbeatInput.
        :param hostname: The hostname of this ReportTaskRunnerHeartbeatInput.
        """
        self.openapi_types = {
            'taskrunner_id': str,
            'worker_group': str,
            'hostname': str
        }

        self.attribute_map = {
            'taskrunner_id': 'taskrunnerId',
            'worker_group': 'workerGroup',
            'hostname': 'hostname'
        }

        self._taskrunner_id = taskrunner_id
        self._worker_group = worker_group
        self._hostname = hostname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportTaskRunnerHeartbeatInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportTaskRunnerHeartbeatInput of this ReportTaskRunnerHeartbeatInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def taskrunner_id(self):
        """Gets the taskrunner_id of this ReportTaskRunnerHeartbeatInput.


        :return: The taskrunner_id of this ReportTaskRunnerHeartbeatInput.
        :rtype: str
        """
        return self._taskrunner_id

    @taskrunner_id.setter
    def taskrunner_id(self, taskrunner_id):
        """Sets the taskrunner_id of this ReportTaskRunnerHeartbeatInput.


        :param taskrunner_id: The taskrunner_id of this ReportTaskRunnerHeartbeatInput.
        :type taskrunner_id: str
        """
        if taskrunner_id is None:
            raise ValueError("Invalid value for `taskrunner_id`, must not be `None`")

        self._taskrunner_id = taskrunner_id

    @property
    def worker_group(self):
        """Gets the worker_group of this ReportTaskRunnerHeartbeatInput.


        :return: The worker_group of this ReportTaskRunnerHeartbeatInput.
        :rtype: str
        """
        return self._worker_group

    @worker_group.setter
    def worker_group(self, worker_group):
        """Sets the worker_group of this ReportTaskRunnerHeartbeatInput.


        :param worker_group: The worker_group of this ReportTaskRunnerHeartbeatInput.
        :type worker_group: str
        """

        self._worker_group = worker_group

    @property
    def hostname(self):
        """Gets the hostname of this ReportTaskRunnerHeartbeatInput.


        :return: The hostname of this ReportTaskRunnerHeartbeatInput.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ReportTaskRunnerHeartbeatInput.


        :param hostname: The hostname of this ReportTaskRunnerHeartbeatInput.
        :type hostname: str
        """

        self._hostname = hostname
