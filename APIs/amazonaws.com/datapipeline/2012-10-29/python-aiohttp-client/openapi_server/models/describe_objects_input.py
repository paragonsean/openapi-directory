# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeObjectsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_id: str=None, object_ids: List=None, evaluate_expressions: bool=None, marker: str=None):
        """DescribeObjectsInput - a model defined in OpenAPI

        :param pipeline_id: The pipeline_id of this DescribeObjectsInput.
        :param object_ids: The object_ids of this DescribeObjectsInput.
        :param evaluate_expressions: The evaluate_expressions of this DescribeObjectsInput.
        :param marker: The marker of this DescribeObjectsInput.
        """
        self.openapi_types = {
            'pipeline_id': str,
            'object_ids': List,
            'evaluate_expressions': bool,
            'marker': str
        }

        self.attribute_map = {
            'pipeline_id': 'pipelineId',
            'object_ids': 'objectIds',
            'evaluate_expressions': 'evaluateExpressions',
            'marker': 'marker'
        }

        self._pipeline_id = pipeline_id
        self._object_ids = object_ids
        self._evaluate_expressions = evaluate_expressions
        self._marker = marker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeObjectsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeObjectsInput of this DescribeObjectsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this DescribeObjectsInput.


        :return: The pipeline_id of this DescribeObjectsInput.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this DescribeObjectsInput.


        :param pipeline_id: The pipeline_id of this DescribeObjectsInput.
        :type pipeline_id: str
        """
        if pipeline_id is None:
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")

        self._pipeline_id = pipeline_id

    @property
    def object_ids(self):
        """Gets the object_ids of this DescribeObjectsInput.


        :return: The object_ids of this DescribeObjectsInput.
        :rtype: List
        """
        return self._object_ids

    @object_ids.setter
    def object_ids(self, object_ids):
        """Sets the object_ids of this DescribeObjectsInput.


        :param object_ids: The object_ids of this DescribeObjectsInput.
        :type object_ids: List
        """
        if object_ids is None:
            raise ValueError("Invalid value for `object_ids`, must not be `None`")

        self._object_ids = object_ids

    @property
    def evaluate_expressions(self):
        """Gets the evaluate_expressions of this DescribeObjectsInput.


        :return: The evaluate_expressions of this DescribeObjectsInput.
        :rtype: bool
        """
        return self._evaluate_expressions

    @evaluate_expressions.setter
    def evaluate_expressions(self, evaluate_expressions):
        """Sets the evaluate_expressions of this DescribeObjectsInput.


        :param evaluate_expressions: The evaluate_expressions of this DescribeObjectsInput.
        :type evaluate_expressions: bool
        """

        self._evaluate_expressions = evaluate_expressions

    @property
    def marker(self):
        """Gets the marker of this DescribeObjectsInput.


        :return: The marker of this DescribeObjectsInput.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DescribeObjectsInput.


        :param marker: The marker of this DescribeObjectsInput.
        :type marker: str
        """

        self._marker = marker
