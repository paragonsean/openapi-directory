# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateMapRunInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, map_run_arn: str=None, max_concurrency: int=None, tolerated_failure_percentage: float=None, tolerated_failure_count: int=None):
        """UpdateMapRunInput - a model defined in OpenAPI

        :param map_run_arn: The map_run_arn of this UpdateMapRunInput.
        :param max_concurrency: The max_concurrency of this UpdateMapRunInput.
        :param tolerated_failure_percentage: The tolerated_failure_percentage of this UpdateMapRunInput.
        :param tolerated_failure_count: The tolerated_failure_count of this UpdateMapRunInput.
        """
        self.openapi_types = {
            'map_run_arn': str,
            'max_concurrency': int,
            'tolerated_failure_percentage': float,
            'tolerated_failure_count': int
        }

        self.attribute_map = {
            'map_run_arn': 'mapRunArn',
            'max_concurrency': 'maxConcurrency',
            'tolerated_failure_percentage': 'toleratedFailurePercentage',
            'tolerated_failure_count': 'toleratedFailureCount'
        }

        self._map_run_arn = map_run_arn
        self._max_concurrency = max_concurrency
        self._tolerated_failure_percentage = tolerated_failure_percentage
        self._tolerated_failure_count = tolerated_failure_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMapRunInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMapRunInput of this UpdateMapRunInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def map_run_arn(self):
        """Gets the map_run_arn of this UpdateMapRunInput.


        :return: The map_run_arn of this UpdateMapRunInput.
        :rtype: str
        """
        return self._map_run_arn

    @map_run_arn.setter
    def map_run_arn(self, map_run_arn):
        """Sets the map_run_arn of this UpdateMapRunInput.


        :param map_run_arn: The map_run_arn of this UpdateMapRunInput.
        :type map_run_arn: str
        """
        if map_run_arn is None:
            raise ValueError("Invalid value for `map_run_arn`, must not be `None`")

        self._map_run_arn = map_run_arn

    @property
    def max_concurrency(self):
        """Gets the max_concurrency of this UpdateMapRunInput.


        :return: The max_concurrency of this UpdateMapRunInput.
        :rtype: int
        """
        return self._max_concurrency

    @max_concurrency.setter
    def max_concurrency(self, max_concurrency):
        """Sets the max_concurrency of this UpdateMapRunInput.


        :param max_concurrency: The max_concurrency of this UpdateMapRunInput.
        :type max_concurrency: int
        """

        self._max_concurrency = max_concurrency

    @property
    def tolerated_failure_percentage(self):
        """Gets the tolerated_failure_percentage of this UpdateMapRunInput.


        :return: The tolerated_failure_percentage of this UpdateMapRunInput.
        :rtype: float
        """
        return self._tolerated_failure_percentage

    @tolerated_failure_percentage.setter
    def tolerated_failure_percentage(self, tolerated_failure_percentage):
        """Sets the tolerated_failure_percentage of this UpdateMapRunInput.


        :param tolerated_failure_percentage: The tolerated_failure_percentage of this UpdateMapRunInput.
        :type tolerated_failure_percentage: float
        """

        self._tolerated_failure_percentage = tolerated_failure_percentage

    @property
    def tolerated_failure_count(self):
        """Gets the tolerated_failure_count of this UpdateMapRunInput.


        :return: The tolerated_failure_count of this UpdateMapRunInput.
        :rtype: int
        """
        return self._tolerated_failure_count

    @tolerated_failure_count.setter
    def tolerated_failure_count(self, tolerated_failure_count):
        """Sets the tolerated_failure_count of this UpdateMapRunInput.


        :param tolerated_failure_count: The tolerated_failure_count of this UpdateMapRunInput.
        :type tolerated_failure_count: int
        """

        self._tolerated_failure_count = tolerated_failure_count
