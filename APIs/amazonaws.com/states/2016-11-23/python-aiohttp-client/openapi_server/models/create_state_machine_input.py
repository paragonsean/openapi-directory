# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_state_machine_input_logging_configuration import CreateStateMachineInputLoggingConfiguration
from openapi_server.models.create_state_machine_input_tracing_configuration import CreateStateMachineInputTracingConfiguration
from openapi_server.models.state_machine_type import StateMachineType
from openapi_server import util


class CreateStateMachineInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, definition: str=None, role_arn: str=None, type: StateMachineType=None, logging_configuration: CreateStateMachineInputLoggingConfiguration=None, tags: List=None, tracing_configuration: CreateStateMachineInputTracingConfiguration=None, publish: bool=None, version_description: str=None):
        """CreateStateMachineInput - a model defined in OpenAPI

        :param name: The name of this CreateStateMachineInput.
        :param definition: The definition of this CreateStateMachineInput.
        :param role_arn: The role_arn of this CreateStateMachineInput.
        :param type: The type of this CreateStateMachineInput.
        :param logging_configuration: The logging_configuration of this CreateStateMachineInput.
        :param tags: The tags of this CreateStateMachineInput.
        :param tracing_configuration: The tracing_configuration of this CreateStateMachineInput.
        :param publish: The publish of this CreateStateMachineInput.
        :param version_description: The version_description of this CreateStateMachineInput.
        """
        self.openapi_types = {
            'name': str,
            'definition': str,
            'role_arn': str,
            'type': StateMachineType,
            'logging_configuration': CreateStateMachineInputLoggingConfiguration,
            'tags': List,
            'tracing_configuration': CreateStateMachineInputTracingConfiguration,
            'publish': bool,
            'version_description': str
        }

        self.attribute_map = {
            'name': 'name',
            'definition': 'definition',
            'role_arn': 'roleArn',
            'type': 'type',
            'logging_configuration': 'loggingConfiguration',
            'tags': 'tags',
            'tracing_configuration': 'tracingConfiguration',
            'publish': 'publish',
            'version_description': 'versionDescription'
        }

        self._name = name
        self._definition = definition
        self._role_arn = role_arn
        self._type = type
        self._logging_configuration = logging_configuration
        self._tags = tags
        self._tracing_configuration = tracing_configuration
        self._publish = publish
        self._version_description = version_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStateMachineInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStateMachineInput of this CreateStateMachineInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateStateMachineInput.


        :return: The name of this CreateStateMachineInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateStateMachineInput.


        :param name: The name of this CreateStateMachineInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def definition(self):
        """Gets the definition of this CreateStateMachineInput.


        :return: The definition of this CreateStateMachineInput.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this CreateStateMachineInput.


        :param definition: The definition of this CreateStateMachineInput.
        :type definition: str
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateStateMachineInput.


        :return: The role_arn of this CreateStateMachineInput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateStateMachineInput.


        :param role_arn: The role_arn of this CreateStateMachineInput.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def type(self):
        """Gets the type of this CreateStateMachineInput.


        :return: The type of this CreateStateMachineInput.
        :rtype: StateMachineType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateStateMachineInput.


        :param type: The type of this CreateStateMachineInput.
        :type type: StateMachineType
        """

        self._type = type

    @property
    def logging_configuration(self):
        """Gets the logging_configuration of this CreateStateMachineInput.


        :return: The logging_configuration of this CreateStateMachineInput.
        :rtype: CreateStateMachineInputLoggingConfiguration
        """
        return self._logging_configuration

    @logging_configuration.setter
    def logging_configuration(self, logging_configuration):
        """Sets the logging_configuration of this CreateStateMachineInput.


        :param logging_configuration: The logging_configuration of this CreateStateMachineInput.
        :type logging_configuration: CreateStateMachineInputLoggingConfiguration
        """

        self._logging_configuration = logging_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateStateMachineInput.


        :return: The tags of this CreateStateMachineInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStateMachineInput.


        :param tags: The tags of this CreateStateMachineInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def tracing_configuration(self):
        """Gets the tracing_configuration of this CreateStateMachineInput.


        :return: The tracing_configuration of this CreateStateMachineInput.
        :rtype: CreateStateMachineInputTracingConfiguration
        """
        return self._tracing_configuration

    @tracing_configuration.setter
    def tracing_configuration(self, tracing_configuration):
        """Sets the tracing_configuration of this CreateStateMachineInput.


        :param tracing_configuration: The tracing_configuration of this CreateStateMachineInput.
        :type tracing_configuration: CreateStateMachineInputTracingConfiguration
        """

        self._tracing_configuration = tracing_configuration

    @property
    def publish(self):
        """Gets the publish of this CreateStateMachineInput.


        :return: The publish of this CreateStateMachineInput.
        :rtype: bool
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this CreateStateMachineInput.


        :param publish: The publish of this CreateStateMachineInput.
        :type publish: bool
        """

        self._publish = publish

    @property
    def version_description(self):
        """Gets the version_description of this CreateStateMachineInput.


        :return: The version_description of this CreateStateMachineInput.
        :rtype: str
        """
        return self._version_description

    @version_description.setter
    def version_description(self, version_description):
        """Sets the version_description of this CreateStateMachineInput.


        :param version_description: The version_description of this CreateStateMachineInput.
        :type version_description: str
        """

        self._version_description = version_description
