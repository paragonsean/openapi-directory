# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_scheduled_event_details_input_details import ActivityScheduledEventDetailsInputDetails
from openapi_server import util


class StateEnteredEventDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, input: str=None, input_details: ActivityScheduledEventDetailsInputDetails=None):
        """StateEnteredEventDetails - a model defined in OpenAPI

        :param name: The name of this StateEnteredEventDetails.
        :param input: The input of this StateEnteredEventDetails.
        :param input_details: The input_details of this StateEnteredEventDetails.
        """
        self.openapi_types = {
            'name': str,
            'input': str,
            'input_details': ActivityScheduledEventDetailsInputDetails
        }

        self.attribute_map = {
            'name': 'name',
            'input': 'input',
            'input_details': 'inputDetails'
        }

        self._name = name
        self._input = input
        self._input_details = input_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StateEnteredEventDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StateEnteredEventDetails of this StateEnteredEventDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this StateEnteredEventDetails.


        :return: The name of this StateEnteredEventDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StateEnteredEventDetails.


        :param name: The name of this StateEnteredEventDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def input(self):
        """Gets the input of this StateEnteredEventDetails.


        :return: The input of this StateEnteredEventDetails.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this StateEnteredEventDetails.


        :param input: The input of this StateEnteredEventDetails.
        :type input: str
        """

        self._input = input

    @property
    def input_details(self):
        """Gets the input_details of this StateEnteredEventDetails.


        :return: The input_details of this StateEnteredEventDetails.
        :rtype: ActivityScheduledEventDetailsInputDetails
        """
        return self._input_details

    @input_details.setter
    def input_details(self, input_details):
        """Sets the input_details of this StateEnteredEventDetails.


        :param input_details: The input_details of this StateEnteredEventDetails.
        :type input_details: ActivityScheduledEventDetailsInputDetails
        """

        self._input_details = input_details
