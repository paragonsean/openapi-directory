# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateStateMachineAliasInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, routing_configuration: List=None):
        """CreateStateMachineAliasInput - a model defined in OpenAPI

        :param description: The description of this CreateStateMachineAliasInput.
        :param name: The name of this CreateStateMachineAliasInput.
        :param routing_configuration: The routing_configuration of this CreateStateMachineAliasInput.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'routing_configuration': List
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'routing_configuration': 'routingConfiguration'
        }

        self._description = description
        self._name = name
        self._routing_configuration = routing_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStateMachineAliasInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStateMachineAliasInput of this CreateStateMachineAliasInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateStateMachineAliasInput.


        :return: The description of this CreateStateMachineAliasInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateStateMachineAliasInput.


        :param description: The description of this CreateStateMachineAliasInput.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateStateMachineAliasInput.


        :return: The name of this CreateStateMachineAliasInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateStateMachineAliasInput.


        :param name: The name of this CreateStateMachineAliasInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def routing_configuration(self):
        """Gets the routing_configuration of this CreateStateMachineAliasInput.


        :return: The routing_configuration of this CreateStateMachineAliasInput.
        :rtype: List
        """
        return self._routing_configuration

    @routing_configuration.setter
    def routing_configuration(self, routing_configuration):
        """Sets the routing_configuration of this CreateStateMachineAliasInput.


        :param routing_configuration: The routing_configuration of this CreateStateMachineAliasInput.
        :type routing_configuration: List
        """
        if routing_configuration is None:
            raise ValueError("Invalid value for `routing_configuration`, must not be `None`")

        self._routing_configuration = routing_configuration
