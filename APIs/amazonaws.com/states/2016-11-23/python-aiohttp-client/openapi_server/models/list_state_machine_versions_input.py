# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListStateMachineVersionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state_machine_arn: str=None, next_token: str=None, max_results: int=None):
        """ListStateMachineVersionsInput - a model defined in OpenAPI

        :param state_machine_arn: The state_machine_arn of this ListStateMachineVersionsInput.
        :param next_token: The next_token of this ListStateMachineVersionsInput.
        :param max_results: The max_results of this ListStateMachineVersionsInput.
        """
        self.openapi_types = {
            'state_machine_arn': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'state_machine_arn': 'stateMachineArn',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._state_machine_arn = state_machine_arn
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListStateMachineVersionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListStateMachineVersionsInput of this ListStateMachineVersionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state_machine_arn(self):
        """Gets the state_machine_arn of this ListStateMachineVersionsInput.


        :return: The state_machine_arn of this ListStateMachineVersionsInput.
        :rtype: str
        """
        return self._state_machine_arn

    @state_machine_arn.setter
    def state_machine_arn(self, state_machine_arn):
        """Sets the state_machine_arn of this ListStateMachineVersionsInput.


        :param state_machine_arn: The state_machine_arn of this ListStateMachineVersionsInput.
        :type state_machine_arn: str
        """
        if state_machine_arn is None:
            raise ValueError("Invalid value for `state_machine_arn`, must not be `None`")

        self._state_machine_arn = state_machine_arn

    @property
    def next_token(self):
        """Gets the next_token of this ListStateMachineVersionsInput.


        :return: The next_token of this ListStateMachineVersionsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListStateMachineVersionsInput.


        :param next_token: The next_token of this ListStateMachineVersionsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListStateMachineVersionsInput.


        :return: The max_results of this ListStateMachineVersionsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListStateMachineVersionsInput.


        :param max_results: The max_results of this ListStateMachineVersionsInput.
        :type max_results: int
        """

        self._max_results = max_results
