# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_scheduled_event_details_task_credentials import TaskScheduledEventDetailsTaskCredentials
from openapi_server import util


class TaskScheduledEventDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_type: str=None, resource: str=None, region: str=None, parameters: str=None, timeout_in_seconds: int=None, heartbeat_in_seconds: int=None, task_credentials: TaskScheduledEventDetailsTaskCredentials=None):
        """TaskScheduledEventDetails - a model defined in OpenAPI

        :param resource_type: The resource_type of this TaskScheduledEventDetails.
        :param resource: The resource of this TaskScheduledEventDetails.
        :param region: The region of this TaskScheduledEventDetails.
        :param parameters: The parameters of this TaskScheduledEventDetails.
        :param timeout_in_seconds: The timeout_in_seconds of this TaskScheduledEventDetails.
        :param heartbeat_in_seconds: The heartbeat_in_seconds of this TaskScheduledEventDetails.
        :param task_credentials: The task_credentials of this TaskScheduledEventDetails.
        """
        self.openapi_types = {
            'resource_type': str,
            'resource': str,
            'region': str,
            'parameters': str,
            'timeout_in_seconds': int,
            'heartbeat_in_seconds': int,
            'task_credentials': TaskScheduledEventDetailsTaskCredentials
        }

        self.attribute_map = {
            'resource_type': 'resourceType',
            'resource': 'resource',
            'region': 'region',
            'parameters': 'parameters',
            'timeout_in_seconds': 'timeoutInSeconds',
            'heartbeat_in_seconds': 'heartbeatInSeconds',
            'task_credentials': 'taskCredentials'
        }

        self._resource_type = resource_type
        self._resource = resource
        self._region = region
        self._parameters = parameters
        self._timeout_in_seconds = timeout_in_seconds
        self._heartbeat_in_seconds = heartbeat_in_seconds
        self._task_credentials = task_credentials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskScheduledEventDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskScheduledEventDetails of this TaskScheduledEventDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self):
        """Gets the resource_type of this TaskScheduledEventDetails.


        :return: The resource_type of this TaskScheduledEventDetails.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TaskScheduledEventDetails.


        :param resource_type: The resource_type of this TaskScheduledEventDetails.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def resource(self):
        """Gets the resource of this TaskScheduledEventDetails.


        :return: The resource of this TaskScheduledEventDetails.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this TaskScheduledEventDetails.


        :param resource: The resource of this TaskScheduledEventDetails.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def region(self):
        """Gets the region of this TaskScheduledEventDetails.


        :return: The region of this TaskScheduledEventDetails.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TaskScheduledEventDetails.


        :param region: The region of this TaskScheduledEventDetails.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def parameters(self):
        """Gets the parameters of this TaskScheduledEventDetails.


        :return: The parameters of this TaskScheduledEventDetails.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TaskScheduledEventDetails.


        :param parameters: The parameters of this TaskScheduledEventDetails.
        :type parameters: str
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def timeout_in_seconds(self):
        """Gets the timeout_in_seconds of this TaskScheduledEventDetails.


        :return: The timeout_in_seconds of this TaskScheduledEventDetails.
        :rtype: int
        """
        return self._timeout_in_seconds

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, timeout_in_seconds):
        """Sets the timeout_in_seconds of this TaskScheduledEventDetails.


        :param timeout_in_seconds: The timeout_in_seconds of this TaskScheduledEventDetails.
        :type timeout_in_seconds: int
        """

        self._timeout_in_seconds = timeout_in_seconds

    @property
    def heartbeat_in_seconds(self):
        """Gets the heartbeat_in_seconds of this TaskScheduledEventDetails.


        :return: The heartbeat_in_seconds of this TaskScheduledEventDetails.
        :rtype: int
        """
        return self._heartbeat_in_seconds

    @heartbeat_in_seconds.setter
    def heartbeat_in_seconds(self, heartbeat_in_seconds):
        """Sets the heartbeat_in_seconds of this TaskScheduledEventDetails.


        :param heartbeat_in_seconds: The heartbeat_in_seconds of this TaskScheduledEventDetails.
        :type heartbeat_in_seconds: int
        """

        self._heartbeat_in_seconds = heartbeat_in_seconds

    @property
    def task_credentials(self):
        """Gets the task_credentials of this TaskScheduledEventDetails.


        :return: The task_credentials of this TaskScheduledEventDetails.
        :rtype: TaskScheduledEventDetailsTaskCredentials
        """
        return self._task_credentials

    @task_credentials.setter
    def task_credentials(self, task_credentials):
        """Sets the task_credentials of this TaskScheduledEventDetails.


        :param task_credentials: The task_credentials of this TaskScheduledEventDetails.
        :type task_credentials: TaskScheduledEventDetailsTaskCredentials
        """

        self._task_credentials = task_credentials
