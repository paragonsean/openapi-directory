# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskFailedEventDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_type: str=None, resource: str=None, error: str=None, cause: str=None):
        """TaskFailedEventDetails - a model defined in OpenAPI

        :param resource_type: The resource_type of this TaskFailedEventDetails.
        :param resource: The resource of this TaskFailedEventDetails.
        :param error: The error of this TaskFailedEventDetails.
        :param cause: The cause of this TaskFailedEventDetails.
        """
        self.openapi_types = {
            'resource_type': str,
            'resource': str,
            'error': str,
            'cause': str
        }

        self.attribute_map = {
            'resource_type': 'resourceType',
            'resource': 'resource',
            'error': 'error',
            'cause': 'cause'
        }

        self._resource_type = resource_type
        self._resource = resource
        self._error = error
        self._cause = cause

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskFailedEventDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskFailedEventDetails of this TaskFailedEventDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self):
        """Gets the resource_type of this TaskFailedEventDetails.


        :return: The resource_type of this TaskFailedEventDetails.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TaskFailedEventDetails.


        :param resource_type: The resource_type of this TaskFailedEventDetails.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def resource(self):
        """Gets the resource of this TaskFailedEventDetails.


        :return: The resource of this TaskFailedEventDetails.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this TaskFailedEventDetails.


        :param resource: The resource of this TaskFailedEventDetails.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def error(self):
        """Gets the error of this TaskFailedEventDetails.


        :return: The error of this TaskFailedEventDetails.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TaskFailedEventDetails.


        :param error: The error of this TaskFailedEventDetails.
        :type error: str
        """

        self._error = error

    @property
    def cause(self):
        """Gets the cause of this TaskFailedEventDetails.


        :return: The cause of this TaskFailedEventDetails.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this TaskFailedEventDetails.


        :param cause: The cause of this TaskFailedEventDetails.
        :type cause: str
        """

        self._cause = cause
