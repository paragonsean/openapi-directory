# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_map_run_output_execution_counts import DescribeMapRunOutputExecutionCounts
from openapi_server.models.describe_map_run_output_item_counts import DescribeMapRunOutputItemCounts
from openapi_server.models.map_run_status import MapRunStatus
from openapi_server import util


class DescribeMapRunOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, map_run_arn: str=None, execution_arn: str=None, status: MapRunStatus=None, start_date: datetime=None, stop_date: datetime=None, max_concurrency: int=None, tolerated_failure_percentage: float=None, tolerated_failure_count: int=None, item_counts: DescribeMapRunOutputItemCounts=None, execution_counts: DescribeMapRunOutputExecutionCounts=None):
        """DescribeMapRunOutput - a model defined in OpenAPI

        :param map_run_arn: The map_run_arn of this DescribeMapRunOutput.
        :param execution_arn: The execution_arn of this DescribeMapRunOutput.
        :param status: The status of this DescribeMapRunOutput.
        :param start_date: The start_date of this DescribeMapRunOutput.
        :param stop_date: The stop_date of this DescribeMapRunOutput.
        :param max_concurrency: The max_concurrency of this DescribeMapRunOutput.
        :param tolerated_failure_percentage: The tolerated_failure_percentage of this DescribeMapRunOutput.
        :param tolerated_failure_count: The tolerated_failure_count of this DescribeMapRunOutput.
        :param item_counts: The item_counts of this DescribeMapRunOutput.
        :param execution_counts: The execution_counts of this DescribeMapRunOutput.
        """
        self.openapi_types = {
            'map_run_arn': str,
            'execution_arn': str,
            'status': MapRunStatus,
            'start_date': datetime,
            'stop_date': datetime,
            'max_concurrency': int,
            'tolerated_failure_percentage': float,
            'tolerated_failure_count': int,
            'item_counts': DescribeMapRunOutputItemCounts,
            'execution_counts': DescribeMapRunOutputExecutionCounts
        }

        self.attribute_map = {
            'map_run_arn': 'mapRunArn',
            'execution_arn': 'executionArn',
            'status': 'status',
            'start_date': 'startDate',
            'stop_date': 'stopDate',
            'max_concurrency': 'maxConcurrency',
            'tolerated_failure_percentage': 'toleratedFailurePercentage',
            'tolerated_failure_count': 'toleratedFailureCount',
            'item_counts': 'itemCounts',
            'execution_counts': 'executionCounts'
        }

        self._map_run_arn = map_run_arn
        self._execution_arn = execution_arn
        self._status = status
        self._start_date = start_date
        self._stop_date = stop_date
        self._max_concurrency = max_concurrency
        self._tolerated_failure_percentage = tolerated_failure_percentage
        self._tolerated_failure_count = tolerated_failure_count
        self._item_counts = item_counts
        self._execution_counts = execution_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeMapRunOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeMapRunOutput of this DescribeMapRunOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def map_run_arn(self):
        """Gets the map_run_arn of this DescribeMapRunOutput.


        :return: The map_run_arn of this DescribeMapRunOutput.
        :rtype: str
        """
        return self._map_run_arn

    @map_run_arn.setter
    def map_run_arn(self, map_run_arn):
        """Sets the map_run_arn of this DescribeMapRunOutput.


        :param map_run_arn: The map_run_arn of this DescribeMapRunOutput.
        :type map_run_arn: str
        """
        if map_run_arn is None:
            raise ValueError("Invalid value for `map_run_arn`, must not be `None`")

        self._map_run_arn = map_run_arn

    @property
    def execution_arn(self):
        """Gets the execution_arn of this DescribeMapRunOutput.


        :return: The execution_arn of this DescribeMapRunOutput.
        :rtype: str
        """
        return self._execution_arn

    @execution_arn.setter
    def execution_arn(self, execution_arn):
        """Sets the execution_arn of this DescribeMapRunOutput.


        :param execution_arn: The execution_arn of this DescribeMapRunOutput.
        :type execution_arn: str
        """
        if execution_arn is None:
            raise ValueError("Invalid value for `execution_arn`, must not be `None`")

        self._execution_arn = execution_arn

    @property
    def status(self):
        """Gets the status of this DescribeMapRunOutput.


        :return: The status of this DescribeMapRunOutput.
        :rtype: MapRunStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeMapRunOutput.


        :param status: The status of this DescribeMapRunOutput.
        :type status: MapRunStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def start_date(self):
        """Gets the start_date of this DescribeMapRunOutput.


        :return: The start_date of this DescribeMapRunOutput.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DescribeMapRunOutput.


        :param start_date: The start_date of this DescribeMapRunOutput.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def stop_date(self):
        """Gets the stop_date of this DescribeMapRunOutput.


        :return: The stop_date of this DescribeMapRunOutput.
        :rtype: datetime
        """
        return self._stop_date

    @stop_date.setter
    def stop_date(self, stop_date):
        """Sets the stop_date of this DescribeMapRunOutput.


        :param stop_date: The stop_date of this DescribeMapRunOutput.
        :type stop_date: datetime
        """

        self._stop_date = stop_date

    @property
    def max_concurrency(self):
        """Gets the max_concurrency of this DescribeMapRunOutput.


        :return: The max_concurrency of this DescribeMapRunOutput.
        :rtype: int
        """
        return self._max_concurrency

    @max_concurrency.setter
    def max_concurrency(self, max_concurrency):
        """Sets the max_concurrency of this DescribeMapRunOutput.


        :param max_concurrency: The max_concurrency of this DescribeMapRunOutput.
        :type max_concurrency: int
        """
        if max_concurrency is None:
            raise ValueError("Invalid value for `max_concurrency`, must not be `None`")

        self._max_concurrency = max_concurrency

    @property
    def tolerated_failure_percentage(self):
        """Gets the tolerated_failure_percentage of this DescribeMapRunOutput.


        :return: The tolerated_failure_percentage of this DescribeMapRunOutput.
        :rtype: float
        """
        return self._tolerated_failure_percentage

    @tolerated_failure_percentage.setter
    def tolerated_failure_percentage(self, tolerated_failure_percentage):
        """Sets the tolerated_failure_percentage of this DescribeMapRunOutput.


        :param tolerated_failure_percentage: The tolerated_failure_percentage of this DescribeMapRunOutput.
        :type tolerated_failure_percentage: float
        """
        if tolerated_failure_percentage is None:
            raise ValueError("Invalid value for `tolerated_failure_percentage`, must not be `None`")

        self._tolerated_failure_percentage = tolerated_failure_percentage

    @property
    def tolerated_failure_count(self):
        """Gets the tolerated_failure_count of this DescribeMapRunOutput.


        :return: The tolerated_failure_count of this DescribeMapRunOutput.
        :rtype: int
        """
        return self._tolerated_failure_count

    @tolerated_failure_count.setter
    def tolerated_failure_count(self, tolerated_failure_count):
        """Sets the tolerated_failure_count of this DescribeMapRunOutput.


        :param tolerated_failure_count: The tolerated_failure_count of this DescribeMapRunOutput.
        :type tolerated_failure_count: int
        """
        if tolerated_failure_count is None:
            raise ValueError("Invalid value for `tolerated_failure_count`, must not be `None`")

        self._tolerated_failure_count = tolerated_failure_count

    @property
    def item_counts(self):
        """Gets the item_counts of this DescribeMapRunOutput.


        :return: The item_counts of this DescribeMapRunOutput.
        :rtype: DescribeMapRunOutputItemCounts
        """
        return self._item_counts

    @item_counts.setter
    def item_counts(self, item_counts):
        """Sets the item_counts of this DescribeMapRunOutput.


        :param item_counts: The item_counts of this DescribeMapRunOutput.
        :type item_counts: DescribeMapRunOutputItemCounts
        """
        if item_counts is None:
            raise ValueError("Invalid value for `item_counts`, must not be `None`")

        self._item_counts = item_counts

    @property
    def execution_counts(self):
        """Gets the execution_counts of this DescribeMapRunOutput.


        :return: The execution_counts of this DescribeMapRunOutput.
        :rtype: DescribeMapRunOutputExecutionCounts
        """
        return self._execution_counts

    @execution_counts.setter
    def execution_counts(self, execution_counts):
        """Sets the execution_counts of this DescribeMapRunOutput.


        :param execution_counts: The execution_counts of this DescribeMapRunOutput.
        :type execution_counts: DescribeMapRunOutputExecutionCounts
        """
        if execution_counts is None:
            raise ValueError("Invalid value for `execution_counts`, must not be `None`")

        self._execution_counts = execution_counts
