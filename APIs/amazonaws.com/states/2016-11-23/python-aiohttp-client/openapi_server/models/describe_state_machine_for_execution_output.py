# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_state_machine_input_tracing_configuration import CreateStateMachineInputTracingConfiguration
from openapi_server.models.logging_configuration import LoggingConfiguration
from openapi_server import util


class DescribeStateMachineForExecutionOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state_machine_arn: str=None, name: str=None, definition: str=None, role_arn: str=None, update_date: datetime=None, logging_configuration: LoggingConfiguration=None, tracing_configuration: CreateStateMachineInputTracingConfiguration=None, map_run_arn: str=None, label: str=None, revision_id: str=None):
        """DescribeStateMachineForExecutionOutput - a model defined in OpenAPI

        :param state_machine_arn: The state_machine_arn of this DescribeStateMachineForExecutionOutput.
        :param name: The name of this DescribeStateMachineForExecutionOutput.
        :param definition: The definition of this DescribeStateMachineForExecutionOutput.
        :param role_arn: The role_arn of this DescribeStateMachineForExecutionOutput.
        :param update_date: The update_date of this DescribeStateMachineForExecutionOutput.
        :param logging_configuration: The logging_configuration of this DescribeStateMachineForExecutionOutput.
        :param tracing_configuration: The tracing_configuration of this DescribeStateMachineForExecutionOutput.
        :param map_run_arn: The map_run_arn of this DescribeStateMachineForExecutionOutput.
        :param label: The label of this DescribeStateMachineForExecutionOutput.
        :param revision_id: The revision_id of this DescribeStateMachineForExecutionOutput.
        """
        self.openapi_types = {
            'state_machine_arn': str,
            'name': str,
            'definition': str,
            'role_arn': str,
            'update_date': datetime,
            'logging_configuration': LoggingConfiguration,
            'tracing_configuration': CreateStateMachineInputTracingConfiguration,
            'map_run_arn': str,
            'label': str,
            'revision_id': str
        }

        self.attribute_map = {
            'state_machine_arn': 'stateMachineArn',
            'name': 'name',
            'definition': 'definition',
            'role_arn': 'roleArn',
            'update_date': 'updateDate',
            'logging_configuration': 'loggingConfiguration',
            'tracing_configuration': 'tracingConfiguration',
            'map_run_arn': 'mapRunArn',
            'label': 'label',
            'revision_id': 'revisionId'
        }

        self._state_machine_arn = state_machine_arn
        self._name = name
        self._definition = definition
        self._role_arn = role_arn
        self._update_date = update_date
        self._logging_configuration = logging_configuration
        self._tracing_configuration = tracing_configuration
        self._map_run_arn = map_run_arn
        self._label = label
        self._revision_id = revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeStateMachineForExecutionOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeStateMachineForExecutionOutput of this DescribeStateMachineForExecutionOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state_machine_arn(self):
        """Gets the state_machine_arn of this DescribeStateMachineForExecutionOutput.


        :return: The state_machine_arn of this DescribeStateMachineForExecutionOutput.
        :rtype: str
        """
        return self._state_machine_arn

    @state_machine_arn.setter
    def state_machine_arn(self, state_machine_arn):
        """Sets the state_machine_arn of this DescribeStateMachineForExecutionOutput.


        :param state_machine_arn: The state_machine_arn of this DescribeStateMachineForExecutionOutput.
        :type state_machine_arn: str
        """
        if state_machine_arn is None:
            raise ValueError("Invalid value for `state_machine_arn`, must not be `None`")

        self._state_machine_arn = state_machine_arn

    @property
    def name(self):
        """Gets the name of this DescribeStateMachineForExecutionOutput.


        :return: The name of this DescribeStateMachineForExecutionOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeStateMachineForExecutionOutput.


        :param name: The name of this DescribeStateMachineForExecutionOutput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def definition(self):
        """Gets the definition of this DescribeStateMachineForExecutionOutput.


        :return: The definition of this DescribeStateMachineForExecutionOutput.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this DescribeStateMachineForExecutionOutput.


        :param definition: The definition of this DescribeStateMachineForExecutionOutput.
        :type definition: str
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def role_arn(self):
        """Gets the role_arn of this DescribeStateMachineForExecutionOutput.


        :return: The role_arn of this DescribeStateMachineForExecutionOutput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this DescribeStateMachineForExecutionOutput.


        :param role_arn: The role_arn of this DescribeStateMachineForExecutionOutput.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def update_date(self):
        """Gets the update_date of this DescribeStateMachineForExecutionOutput.


        :return: The update_date of this DescribeStateMachineForExecutionOutput.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this DescribeStateMachineForExecutionOutput.


        :param update_date: The update_date of this DescribeStateMachineForExecutionOutput.
        :type update_date: datetime
        """
        if update_date is None:
            raise ValueError("Invalid value for `update_date`, must not be `None`")

        self._update_date = update_date

    @property
    def logging_configuration(self):
        """Gets the logging_configuration of this DescribeStateMachineForExecutionOutput.


        :return: The logging_configuration of this DescribeStateMachineForExecutionOutput.
        :rtype: LoggingConfiguration
        """
        return self._logging_configuration

    @logging_configuration.setter
    def logging_configuration(self, logging_configuration):
        """Sets the logging_configuration of this DescribeStateMachineForExecutionOutput.


        :param logging_configuration: The logging_configuration of this DescribeStateMachineForExecutionOutput.
        :type logging_configuration: LoggingConfiguration
        """

        self._logging_configuration = logging_configuration

    @property
    def tracing_configuration(self):
        """Gets the tracing_configuration of this DescribeStateMachineForExecutionOutput.


        :return: The tracing_configuration of this DescribeStateMachineForExecutionOutput.
        :rtype: CreateStateMachineInputTracingConfiguration
        """
        return self._tracing_configuration

    @tracing_configuration.setter
    def tracing_configuration(self, tracing_configuration):
        """Sets the tracing_configuration of this DescribeStateMachineForExecutionOutput.


        :param tracing_configuration: The tracing_configuration of this DescribeStateMachineForExecutionOutput.
        :type tracing_configuration: CreateStateMachineInputTracingConfiguration
        """

        self._tracing_configuration = tracing_configuration

    @property
    def map_run_arn(self):
        """Gets the map_run_arn of this DescribeStateMachineForExecutionOutput.


        :return: The map_run_arn of this DescribeStateMachineForExecutionOutput.
        :rtype: str
        """
        return self._map_run_arn

    @map_run_arn.setter
    def map_run_arn(self, map_run_arn):
        """Sets the map_run_arn of this DescribeStateMachineForExecutionOutput.


        :param map_run_arn: The map_run_arn of this DescribeStateMachineForExecutionOutput.
        :type map_run_arn: str
        """

        self._map_run_arn = map_run_arn

    @property
    def label(self):
        """Gets the label of this DescribeStateMachineForExecutionOutput.


        :return: The label of this DescribeStateMachineForExecutionOutput.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DescribeStateMachineForExecutionOutput.


        :param label: The label of this DescribeStateMachineForExecutionOutput.
        :type label: str
        """

        self._label = label

    @property
    def revision_id(self):
        """Gets the revision_id of this DescribeStateMachineForExecutionOutput.


        :return: The revision_id of this DescribeStateMachineForExecutionOutput.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this DescribeStateMachineForExecutionOutput.


        :param revision_id: The revision_id of this DescribeStateMachineForExecutionOutput.
        :type revision_id: str
        """

        self._revision_id = revision_id
