# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MapRunItemCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pending: int=None, running: int=None, succeeded: int=None, failed: int=None, timed_out: int=None, aborted: int=None, total: int=None, results_written: int=None):
        """MapRunItemCounts - a model defined in OpenAPI

        :param pending: The pending of this MapRunItemCounts.
        :param running: The running of this MapRunItemCounts.
        :param succeeded: The succeeded of this MapRunItemCounts.
        :param failed: The failed of this MapRunItemCounts.
        :param timed_out: The timed_out of this MapRunItemCounts.
        :param aborted: The aborted of this MapRunItemCounts.
        :param total: The total of this MapRunItemCounts.
        :param results_written: The results_written of this MapRunItemCounts.
        """
        self.openapi_types = {
            'pending': int,
            'running': int,
            'succeeded': int,
            'failed': int,
            'timed_out': int,
            'aborted': int,
            'total': int,
            'results_written': int
        }

        self.attribute_map = {
            'pending': 'pending',
            'running': 'running',
            'succeeded': 'succeeded',
            'failed': 'failed',
            'timed_out': 'timedOut',
            'aborted': 'aborted',
            'total': 'total',
            'results_written': 'resultsWritten'
        }

        self._pending = pending
        self._running = running
        self._succeeded = succeeded
        self._failed = failed
        self._timed_out = timed_out
        self._aborted = aborted
        self._total = total
        self._results_written = results_written

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapRunItemCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MapRunItemCounts of this MapRunItemCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pending(self):
        """Gets the pending of this MapRunItemCounts.


        :return: The pending of this MapRunItemCounts.
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this MapRunItemCounts.


        :param pending: The pending of this MapRunItemCounts.
        :type pending: int
        """
        if pending is None:
            raise ValueError("Invalid value for `pending`, must not be `None`")

        self._pending = pending

    @property
    def running(self):
        """Gets the running of this MapRunItemCounts.


        :return: The running of this MapRunItemCounts.
        :rtype: int
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this MapRunItemCounts.


        :param running: The running of this MapRunItemCounts.
        :type running: int
        """
        if running is None:
            raise ValueError("Invalid value for `running`, must not be `None`")

        self._running = running

    @property
    def succeeded(self):
        """Gets the succeeded of this MapRunItemCounts.


        :return: The succeeded of this MapRunItemCounts.
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this MapRunItemCounts.


        :param succeeded: The succeeded of this MapRunItemCounts.
        :type succeeded: int
        """
        if succeeded is None:
            raise ValueError("Invalid value for `succeeded`, must not be `None`")

        self._succeeded = succeeded

    @property
    def failed(self):
        """Gets the failed of this MapRunItemCounts.


        :return: The failed of this MapRunItemCounts.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this MapRunItemCounts.


        :param failed: The failed of this MapRunItemCounts.
        :type failed: int
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")

        self._failed = failed

    @property
    def timed_out(self):
        """Gets the timed_out of this MapRunItemCounts.


        :return: The timed_out of this MapRunItemCounts.
        :rtype: int
        """
        return self._timed_out

    @timed_out.setter
    def timed_out(self, timed_out):
        """Sets the timed_out of this MapRunItemCounts.


        :param timed_out: The timed_out of this MapRunItemCounts.
        :type timed_out: int
        """
        if timed_out is None:
            raise ValueError("Invalid value for `timed_out`, must not be `None`")

        self._timed_out = timed_out

    @property
    def aborted(self):
        """Gets the aborted of this MapRunItemCounts.


        :return: The aborted of this MapRunItemCounts.
        :rtype: int
        """
        return self._aborted

    @aborted.setter
    def aborted(self, aborted):
        """Sets the aborted of this MapRunItemCounts.


        :param aborted: The aborted of this MapRunItemCounts.
        :type aborted: int
        """
        if aborted is None:
            raise ValueError("Invalid value for `aborted`, must not be `None`")

        self._aborted = aborted

    @property
    def total(self):
        """Gets the total of this MapRunItemCounts.


        :return: The total of this MapRunItemCounts.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MapRunItemCounts.


        :param total: The total of this MapRunItemCounts.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def results_written(self):
        """Gets the results_written of this MapRunItemCounts.


        :return: The results_written of this MapRunItemCounts.
        :rtype: int
        """
        return self._results_written

    @results_written.setter
    def results_written(self, results_written):
        """Sets the results_written of this MapRunItemCounts.


        :param results_written: The results_written of this MapRunItemCounts.
        :type results_written: int
        """
        if results_written is None:
            raise ValueError("Invalid value for `results_written`, must not be `None`")

        self._results_written = results_written
