# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_level import LogLevel
from openapi_server import util


class LoggingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, level: LogLevel=None, include_execution_data: bool=None, destinations: List=None):
        """LoggingConfiguration - a model defined in OpenAPI

        :param level: The level of this LoggingConfiguration.
        :param include_execution_data: The include_execution_data of this LoggingConfiguration.
        :param destinations: The destinations of this LoggingConfiguration.
        """
        self.openapi_types = {
            'level': LogLevel,
            'include_execution_data': bool,
            'destinations': List
        }

        self.attribute_map = {
            'level': 'level',
            'include_execution_data': 'includeExecutionData',
            'destinations': 'destinations'
        }

        self._level = level
        self._include_execution_data = include_execution_data
        self._destinations = destinations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingConfiguration of this LoggingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def level(self):
        """Gets the level of this LoggingConfiguration.


        :return: The level of this LoggingConfiguration.
        :rtype: LogLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this LoggingConfiguration.


        :param level: The level of this LoggingConfiguration.
        :type level: LogLevel
        """

        self._level = level

    @property
    def include_execution_data(self):
        """Gets the include_execution_data of this LoggingConfiguration.


        :return: The include_execution_data of this LoggingConfiguration.
        :rtype: bool
        """
        return self._include_execution_data

    @include_execution_data.setter
    def include_execution_data(self, include_execution_data):
        """Sets the include_execution_data of this LoggingConfiguration.


        :param include_execution_data: The include_execution_data of this LoggingConfiguration.
        :type include_execution_data: bool
        """

        self._include_execution_data = include_execution_data

    @property
    def destinations(self):
        """Gets the destinations of this LoggingConfiguration.


        :return: The destinations of this LoggingConfiguration.
        :rtype: List
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this LoggingConfiguration.


        :param destinations: The destinations of this LoggingConfiguration.
        :type destinations: List
        """

        self._destinations = destinations
