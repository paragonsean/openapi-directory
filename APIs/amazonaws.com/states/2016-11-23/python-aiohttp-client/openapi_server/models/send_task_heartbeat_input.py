# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendTaskHeartbeatInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_token: str=None):
        """SendTaskHeartbeatInput - a model defined in OpenAPI

        :param task_token: The task_token of this SendTaskHeartbeatInput.
        """
        self.openapi_types = {
            'task_token': str
        }

        self.attribute_map = {
            'task_token': 'taskToken'
        }

        self._task_token = task_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendTaskHeartbeatInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendTaskHeartbeatInput of this SendTaskHeartbeatInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_token(self):
        """Gets the task_token of this SendTaskHeartbeatInput.


        :return: The task_token of this SendTaskHeartbeatInput.
        :rtype: str
        """
        return self._task_token

    @task_token.setter
    def task_token(self, task_token):
        """Sets the task_token of this SendTaskHeartbeatInput.


        :param task_token: The task_token of this SendTaskHeartbeatInput.
        :type task_token: str
        """
        if task_token is None:
            raise ValueError("Invalid value for `task_token`, must not be `None`")

        self._task_token = task_token
