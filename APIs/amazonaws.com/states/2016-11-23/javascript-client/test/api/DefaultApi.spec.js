/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsStepFunctions);
  }
}(this, function(expect, AwsStepFunctions) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsStepFunctions.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createActivity', function() {
      it('should call createActivity successfully', function(done) {
        //uncomment below and update the code to test createActivity
        //instance.createActivity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStateMachine', function() {
      it('should call createStateMachine successfully', function(done) {
        //uncomment below and update the code to test createStateMachine
        //instance.createStateMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStateMachineAlias', function() {
      it('should call createStateMachineAlias successfully', function(done) {
        //uncomment below and update the code to test createStateMachineAlias
        //instance.createStateMachineAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteActivity', function() {
      it('should call deleteActivity successfully', function(done) {
        //uncomment below and update the code to test deleteActivity
        //instance.deleteActivity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStateMachine', function() {
      it('should call deleteStateMachine successfully', function(done) {
        //uncomment below and update the code to test deleteStateMachine
        //instance.deleteStateMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStateMachineAlias', function() {
      it('should call deleteStateMachineAlias successfully', function(done) {
        //uncomment below and update the code to test deleteStateMachineAlias
        //instance.deleteStateMachineAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStateMachineVersion', function() {
      it('should call deleteStateMachineVersion successfully', function(done) {
        //uncomment below and update the code to test deleteStateMachineVersion
        //instance.deleteStateMachineVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeActivity', function() {
      it('should call describeActivity successfully', function(done) {
        //uncomment below and update the code to test describeActivity
        //instance.describeActivity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeExecution', function() {
      it('should call describeExecution successfully', function(done) {
        //uncomment below and update the code to test describeExecution
        //instance.describeExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMapRun', function() {
      it('should call describeMapRun successfully', function(done) {
        //uncomment below and update the code to test describeMapRun
        //instance.describeMapRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeStateMachine', function() {
      it('should call describeStateMachine successfully', function(done) {
        //uncomment below and update the code to test describeStateMachine
        //instance.describeStateMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeStateMachineAlias', function() {
      it('should call describeStateMachineAlias successfully', function(done) {
        //uncomment below and update the code to test describeStateMachineAlias
        //instance.describeStateMachineAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeStateMachineForExecution', function() {
      it('should call describeStateMachineForExecution successfully', function(done) {
        //uncomment below and update the code to test describeStateMachineForExecution
        //instance.describeStateMachineForExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActivityTask', function() {
      it('should call getActivityTask successfully', function(done) {
        //uncomment below and update the code to test getActivityTask
        //instance.getActivityTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExecutionHistory', function() {
      it('should call getExecutionHistory successfully', function(done) {
        //uncomment below and update the code to test getExecutionHistory
        //instance.getExecutionHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listActivities', function() {
      it('should call listActivities successfully', function(done) {
        //uncomment below and update the code to test listActivities
        //instance.listActivities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExecutions', function() {
      it('should call listExecutions successfully', function(done) {
        //uncomment below and update the code to test listExecutions
        //instance.listExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMapRuns', function() {
      it('should call listMapRuns successfully', function(done) {
        //uncomment below and update the code to test listMapRuns
        //instance.listMapRuns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStateMachineAliases', function() {
      it('should call listStateMachineAliases successfully', function(done) {
        //uncomment below and update the code to test listStateMachineAliases
        //instance.listStateMachineAliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStateMachineVersions', function() {
      it('should call listStateMachineVersions successfully', function(done) {
        //uncomment below and update the code to test listStateMachineVersions
        //instance.listStateMachineVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStateMachines', function() {
      it('should call listStateMachines successfully', function(done) {
        //uncomment below and update the code to test listStateMachines
        //instance.listStateMachines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publishStateMachineVersion', function() {
      it('should call publishStateMachineVersion successfully', function(done) {
        //uncomment below and update the code to test publishStateMachineVersion
        //instance.publishStateMachineVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendTaskFailure', function() {
      it('should call sendTaskFailure successfully', function(done) {
        //uncomment below and update the code to test sendTaskFailure
        //instance.sendTaskFailure(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendTaskHeartbeat', function() {
      it('should call sendTaskHeartbeat successfully', function(done) {
        //uncomment below and update the code to test sendTaskHeartbeat
        //instance.sendTaskHeartbeat(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendTaskSuccess', function() {
      it('should call sendTaskSuccess successfully', function(done) {
        //uncomment below and update the code to test sendTaskSuccess
        //instance.sendTaskSuccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startExecution', function() {
      it('should call startExecution successfully', function(done) {
        //uncomment below and update the code to test startExecution
        //instance.startExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSyncExecution', function() {
      it('should call startSyncExecution successfully', function(done) {
        //uncomment below and update the code to test startSyncExecution
        //instance.startSyncExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopExecution', function() {
      it('should call stopExecution successfully', function(done) {
        //uncomment below and update the code to test stopExecution
        //instance.stopExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMapRun', function() {
      it('should call updateMapRun successfully', function(done) {
        //uncomment below and update the code to test updateMapRun
        //instance.updateMapRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStateMachine', function() {
      it('should call updateStateMachine successfully', function(done) {
        //uncomment below and update the code to test updateStateMachine
        //instance.updateStateMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStateMachineAlias', function() {
      it('should call updateStateMachineAlias successfully', function(done) {
        //uncomment below and update the code to test updateStateMachineAlias
        //instance.updateStateMachineAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
