/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsStepFunctions);
  }
}(this, function(expect, AwsStepFunctions) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsStepFunctions.CreateStateMachineInput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateStateMachineInput', function() {
    it('should create an instance of CreateStateMachineInput', function() {
      // uncomment below and update the code to test CreateStateMachineInput
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be.a(AwsStepFunctions.CreateStateMachineInput);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

    it('should have the property definition (base name: "definition")', function() {
      // uncomment below and update the code to test the property definition
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

    it('should have the property roleArn (base name: "roleArn")', function() {
      // uncomment below and update the code to test the property roleArn
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

    it('should have the property loggingConfiguration (base name: "loggingConfiguration")', function() {
      // uncomment below and update the code to test the property loggingConfiguration
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

    it('should have the property tracingConfiguration (base name: "tracingConfiguration")', function() {
      // uncomment below and update the code to test the property tracingConfiguration
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

    it('should have the property publish (base name: "publish")', function() {
      // uncomment below and update the code to test the property publish
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

    it('should have the property versionDescription (base name: "versionDescription")', function() {
      // uncomment below and update the code to test the property versionDescription
      //var instance = new AwsStepFunctions.CreateStateMachineInput();
      //expect(instance).to.be();
    });

  });

}));
