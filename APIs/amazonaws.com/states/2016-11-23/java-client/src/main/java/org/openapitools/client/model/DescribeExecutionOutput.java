/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CloudWatchEventsExecutionDataDetails;
import org.openapitools.client.model.ExecutionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeExecutionOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:37.123378-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeExecutionOutput {
  public static final String SERIALIZED_NAME_EXECUTION_ARN = "executionArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ARN)
  private String executionArn;

  public static final String SERIALIZED_NAME_STATE_MACHINE_ARN = "stateMachineArn";
  @SerializedName(SERIALIZED_NAME_STATE_MACHINE_ARN)
  private String stateMachineArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ExecutionStatus status;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STOP_DATE = "stopDate";
  @SerializedName(SERIALIZED_NAME_STOP_DATE)
  private OffsetDateTime stopDate;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_INPUT_DETAILS = "inputDetails";
  @SerializedName(SERIALIZED_NAME_INPUT_DETAILS)
  private CloudWatchEventsExecutionDataDetails inputDetails;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private String output;

  public static final String SERIALIZED_NAME_OUTPUT_DETAILS = "outputDetails";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DETAILS)
  private CloudWatchEventsExecutionDataDetails outputDetails;

  public static final String SERIALIZED_NAME_TRACE_HEADER = "traceHeader";
  @SerializedName(SERIALIZED_NAME_TRACE_HEADER)
  private String traceHeader;

  public static final String SERIALIZED_NAME_MAP_RUN_ARN = "mapRunArn";
  @SerializedName(SERIALIZED_NAME_MAP_RUN_ARN)
  private String mapRunArn;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_CAUSE = "cause";
  @SerializedName(SERIALIZED_NAME_CAUSE)
  private String cause;

  public static final String SERIALIZED_NAME_STATE_MACHINE_VERSION_ARN = "stateMachineVersionArn";
  @SerializedName(SERIALIZED_NAME_STATE_MACHINE_VERSION_ARN)
  private String stateMachineVersionArn;

  public static final String SERIALIZED_NAME_STATE_MACHINE_ALIAS_ARN = "stateMachineAliasArn";
  @SerializedName(SERIALIZED_NAME_STATE_MACHINE_ALIAS_ARN)
  private String stateMachineAliasArn;

  public DescribeExecutionOutput() {
  }

  public DescribeExecutionOutput executionArn(String executionArn) {
    this.executionArn = executionArn;
    return this;
  }

  /**
   * Get executionArn
   * @return executionArn
   */
  @javax.annotation.Nonnull
  public String getExecutionArn() {
    return executionArn;
  }

  public void setExecutionArn(String executionArn) {
    this.executionArn = executionArn;
  }


  public DescribeExecutionOutput stateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
    return this;
  }

  /**
   * Get stateMachineArn
   * @return stateMachineArn
   */
  @javax.annotation.Nonnull
  public String getStateMachineArn() {
    return stateMachineArn;
  }

  public void setStateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
  }


  public DescribeExecutionOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeExecutionOutput status(ExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(ExecutionStatus status) {
    this.status = status;
  }


  public DescribeExecutionOutput startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public DescribeExecutionOutput stopDate(OffsetDateTime stopDate) {
    this.stopDate = stopDate;
    return this;
  }

  /**
   * Get stopDate
   * @return stopDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopDate() {
    return stopDate;
  }

  public void setStopDate(OffsetDateTime stopDate) {
    this.stopDate = stopDate;
  }


  public DescribeExecutionOutput input(String input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public DescribeExecutionOutput inputDetails(CloudWatchEventsExecutionDataDetails inputDetails) {
    this.inputDetails = inputDetails;
    return this;
  }

  /**
   * Get inputDetails
   * @return inputDetails
   */
  @javax.annotation.Nullable
  public CloudWatchEventsExecutionDataDetails getInputDetails() {
    return inputDetails;
  }

  public void setInputDetails(CloudWatchEventsExecutionDataDetails inputDetails) {
    this.inputDetails = inputDetails;
  }


  public DescribeExecutionOutput output(String output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public String getOutput() {
    return output;
  }

  public void setOutput(String output) {
    this.output = output;
  }


  public DescribeExecutionOutput outputDetails(CloudWatchEventsExecutionDataDetails outputDetails) {
    this.outputDetails = outputDetails;
    return this;
  }

  /**
   * Get outputDetails
   * @return outputDetails
   */
  @javax.annotation.Nullable
  public CloudWatchEventsExecutionDataDetails getOutputDetails() {
    return outputDetails;
  }

  public void setOutputDetails(CloudWatchEventsExecutionDataDetails outputDetails) {
    this.outputDetails = outputDetails;
  }


  public DescribeExecutionOutput traceHeader(String traceHeader) {
    this.traceHeader = traceHeader;
    return this;
  }

  /**
   * Get traceHeader
   * @return traceHeader
   */
  @javax.annotation.Nullable
  public String getTraceHeader() {
    return traceHeader;
  }

  public void setTraceHeader(String traceHeader) {
    this.traceHeader = traceHeader;
  }


  public DescribeExecutionOutput mapRunArn(String mapRunArn) {
    this.mapRunArn = mapRunArn;
    return this;
  }

  /**
   * Get mapRunArn
   * @return mapRunArn
   */
  @javax.annotation.Nullable
  public String getMapRunArn() {
    return mapRunArn;
  }

  public void setMapRunArn(String mapRunArn) {
    this.mapRunArn = mapRunArn;
  }


  public DescribeExecutionOutput error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public DescribeExecutionOutput cause(String cause) {
    this.cause = cause;
    return this;
  }

  /**
   * Get cause
   * @return cause
   */
  @javax.annotation.Nullable
  public String getCause() {
    return cause;
  }

  public void setCause(String cause) {
    this.cause = cause;
  }


  public DescribeExecutionOutput stateMachineVersionArn(String stateMachineVersionArn) {
    this.stateMachineVersionArn = stateMachineVersionArn;
    return this;
  }

  /**
   * Get stateMachineVersionArn
   * @return stateMachineVersionArn
   */
  @javax.annotation.Nullable
  public String getStateMachineVersionArn() {
    return stateMachineVersionArn;
  }

  public void setStateMachineVersionArn(String stateMachineVersionArn) {
    this.stateMachineVersionArn = stateMachineVersionArn;
  }


  public DescribeExecutionOutput stateMachineAliasArn(String stateMachineAliasArn) {
    this.stateMachineAliasArn = stateMachineAliasArn;
    return this;
  }

  /**
   * Get stateMachineAliasArn
   * @return stateMachineAliasArn
   */
  @javax.annotation.Nullable
  public String getStateMachineAliasArn() {
    return stateMachineAliasArn;
  }

  public void setStateMachineAliasArn(String stateMachineAliasArn) {
    this.stateMachineAliasArn = stateMachineAliasArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeExecutionOutput describeExecutionOutput = (DescribeExecutionOutput) o;
    return Objects.equals(this.executionArn, describeExecutionOutput.executionArn) &&
        Objects.equals(this.stateMachineArn, describeExecutionOutput.stateMachineArn) &&
        Objects.equals(this.name, describeExecutionOutput.name) &&
        Objects.equals(this.status, describeExecutionOutput.status) &&
        Objects.equals(this.startDate, describeExecutionOutput.startDate) &&
        Objects.equals(this.stopDate, describeExecutionOutput.stopDate) &&
        Objects.equals(this.input, describeExecutionOutput.input) &&
        Objects.equals(this.inputDetails, describeExecutionOutput.inputDetails) &&
        Objects.equals(this.output, describeExecutionOutput.output) &&
        Objects.equals(this.outputDetails, describeExecutionOutput.outputDetails) &&
        Objects.equals(this.traceHeader, describeExecutionOutput.traceHeader) &&
        Objects.equals(this.mapRunArn, describeExecutionOutput.mapRunArn) &&
        Objects.equals(this.error, describeExecutionOutput.error) &&
        Objects.equals(this.cause, describeExecutionOutput.cause) &&
        Objects.equals(this.stateMachineVersionArn, describeExecutionOutput.stateMachineVersionArn) &&
        Objects.equals(this.stateMachineAliasArn, describeExecutionOutput.stateMachineAliasArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionArn, stateMachineArn, name, status, startDate, stopDate, input, inputDetails, output, outputDetails, traceHeader, mapRunArn, error, cause, stateMachineVersionArn, stateMachineAliasArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeExecutionOutput {\n");
    sb.append("    executionArn: ").append(toIndentedString(executionArn)).append("\n");
    sb.append("    stateMachineArn: ").append(toIndentedString(stateMachineArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    stopDate: ").append(toIndentedString(stopDate)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    inputDetails: ").append(toIndentedString(inputDetails)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    outputDetails: ").append(toIndentedString(outputDetails)).append("\n");
    sb.append("    traceHeader: ").append(toIndentedString(traceHeader)).append("\n");
    sb.append("    mapRunArn: ").append(toIndentedString(mapRunArn)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    stateMachineVersionArn: ").append(toIndentedString(stateMachineVersionArn)).append("\n");
    sb.append("    stateMachineAliasArn: ").append(toIndentedString(stateMachineAliasArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionArn");
    openapiFields.add("stateMachineArn");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("startDate");
    openapiFields.add("stopDate");
    openapiFields.add("input");
    openapiFields.add("inputDetails");
    openapiFields.add("output");
    openapiFields.add("outputDetails");
    openapiFields.add("traceHeader");
    openapiFields.add("mapRunArn");
    openapiFields.add("error");
    openapiFields.add("cause");
    openapiFields.add("stateMachineVersionArn");
    openapiFields.add("stateMachineAliasArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("executionArn");
    openapiRequiredFields.add("stateMachineArn");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("startDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeExecutionOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeExecutionOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeExecutionOutput is not found in the empty JSON string", DescribeExecutionOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeExecutionOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeExecutionOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeExecutionOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `executionArn`
      String.validateJsonElement(jsonObj.get("executionArn"));
      // validate the required field `stateMachineArn`
      String.validateJsonElement(jsonObj.get("stateMachineArn"));
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the required field `status`
      ExecutionStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `startDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("startDate"));
      // validate the optional field `stopDate`
      if (jsonObj.get("stopDate") != null && !jsonObj.get("stopDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("stopDate"));
      }
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("input"));
      }
      // validate the optional field `inputDetails`
      if (jsonObj.get("inputDetails") != null && !jsonObj.get("inputDetails").isJsonNull()) {
        CloudWatchEventsExecutionDataDetails.validateJsonElement(jsonObj.get("inputDetails"));
      }
      // validate the optional field `output`
      if (jsonObj.get("output") != null && !jsonObj.get("output").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("output"));
      }
      // validate the optional field `outputDetails`
      if (jsonObj.get("outputDetails") != null && !jsonObj.get("outputDetails").isJsonNull()) {
        CloudWatchEventsExecutionDataDetails.validateJsonElement(jsonObj.get("outputDetails"));
      }
      // validate the optional field `traceHeader`
      if (jsonObj.get("traceHeader") != null && !jsonObj.get("traceHeader").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("traceHeader"));
      }
      // validate the optional field `mapRunArn`
      if (jsonObj.get("mapRunArn") != null && !jsonObj.get("mapRunArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("mapRunArn"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `cause`
      if (jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cause"));
      }
      // validate the optional field `stateMachineVersionArn`
      if (jsonObj.get("stateMachineVersionArn") != null && !jsonObj.get("stateMachineVersionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stateMachineVersionArn"));
      }
      // validate the optional field `stateMachineAliasArn`
      if (jsonObj.get("stateMachineAliasArn") != null && !jsonObj.get("stateMachineAliasArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stateMachineAliasArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeExecutionOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeExecutionOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeExecutionOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeExecutionOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeExecutionOutput>() {
           @Override
           public void write(JsonWriter out, DescribeExecutionOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeExecutionOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeExecutionOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeExecutionOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeExecutionOutput
   */
  public static DescribeExecutionOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeExecutionOutput.class);
  }

  /**
   * Convert an instance of DescribeExecutionOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

