/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details about a specific Map Run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:37.123378-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MapRunListItem {
  public static final String SERIALIZED_NAME_EXECUTION_ARN = "executionArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ARN)
  private String executionArn;

  public static final String SERIALIZED_NAME_MAP_RUN_ARN = "mapRunArn";
  @SerializedName(SERIALIZED_NAME_MAP_RUN_ARN)
  private String mapRunArn;

  public static final String SERIALIZED_NAME_STATE_MACHINE_ARN = "stateMachineArn";
  @SerializedName(SERIALIZED_NAME_STATE_MACHINE_ARN)
  private String stateMachineArn;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STOP_DATE = "stopDate";
  @SerializedName(SERIALIZED_NAME_STOP_DATE)
  private OffsetDateTime stopDate;

  public MapRunListItem() {
  }

  public MapRunListItem executionArn(String executionArn) {
    this.executionArn = executionArn;
    return this;
  }

  /**
   * Get executionArn
   * @return executionArn
   */
  @javax.annotation.Nonnull
  public String getExecutionArn() {
    return executionArn;
  }

  public void setExecutionArn(String executionArn) {
    this.executionArn = executionArn;
  }


  public MapRunListItem mapRunArn(String mapRunArn) {
    this.mapRunArn = mapRunArn;
    return this;
  }

  /**
   * Get mapRunArn
   * @return mapRunArn
   */
  @javax.annotation.Nonnull
  public String getMapRunArn() {
    return mapRunArn;
  }

  public void setMapRunArn(String mapRunArn) {
    this.mapRunArn = mapRunArn;
  }


  public MapRunListItem stateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
    return this;
  }

  /**
   * Get stateMachineArn
   * @return stateMachineArn
   */
  @javax.annotation.Nonnull
  public String getStateMachineArn() {
    return stateMachineArn;
  }

  public void setStateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
  }


  public MapRunListItem startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public MapRunListItem stopDate(OffsetDateTime stopDate) {
    this.stopDate = stopDate;
    return this;
  }

  /**
   * Get stopDate
   * @return stopDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopDate() {
    return stopDate;
  }

  public void setStopDate(OffsetDateTime stopDate) {
    this.stopDate = stopDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MapRunListItem mapRunListItem = (MapRunListItem) o;
    return Objects.equals(this.executionArn, mapRunListItem.executionArn) &&
        Objects.equals(this.mapRunArn, mapRunListItem.mapRunArn) &&
        Objects.equals(this.stateMachineArn, mapRunListItem.stateMachineArn) &&
        Objects.equals(this.startDate, mapRunListItem.startDate) &&
        Objects.equals(this.stopDate, mapRunListItem.stopDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionArn, mapRunArn, stateMachineArn, startDate, stopDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MapRunListItem {\n");
    sb.append("    executionArn: ").append(toIndentedString(executionArn)).append("\n");
    sb.append("    mapRunArn: ").append(toIndentedString(mapRunArn)).append("\n");
    sb.append("    stateMachineArn: ").append(toIndentedString(stateMachineArn)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    stopDate: ").append(toIndentedString(stopDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionArn");
    openapiFields.add("mapRunArn");
    openapiFields.add("stateMachineArn");
    openapiFields.add("startDate");
    openapiFields.add("stopDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("executionArn");
    openapiRequiredFields.add("mapRunArn");
    openapiRequiredFields.add("stateMachineArn");
    openapiRequiredFields.add("startDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MapRunListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MapRunListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MapRunListItem is not found in the empty JSON string", MapRunListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MapRunListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MapRunListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MapRunListItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `executionArn`
      String.validateJsonElement(jsonObj.get("executionArn"));
      // validate the required field `mapRunArn`
      String.validateJsonElement(jsonObj.get("mapRunArn"));
      // validate the required field `stateMachineArn`
      String.validateJsonElement(jsonObj.get("stateMachineArn"));
      // validate the required field `startDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("startDate"));
      // validate the optional field `stopDate`
      if (jsonObj.get("stopDate") != null && !jsonObj.get("stopDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("stopDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MapRunListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MapRunListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MapRunListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MapRunListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MapRunListItem>() {
           @Override
           public void write(JsonWriter out, MapRunListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MapRunListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MapRunListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MapRunListItem
   * @throws IOException if the JSON string is invalid with respect to MapRunListItem
   */
  public static MapRunListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MapRunListItem.class);
  }

  /**
   * Convert an instance of MapRunListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

