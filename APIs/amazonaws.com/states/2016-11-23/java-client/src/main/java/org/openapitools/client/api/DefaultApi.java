/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateActivityInput;
import org.openapitools.client.model.CreateActivityOutput;
import org.openapitools.client.model.CreateStateMachineAliasInput;
import org.openapitools.client.model.CreateStateMachineAliasOutput;
import org.openapitools.client.model.CreateStateMachineInput;
import org.openapitools.client.model.CreateStateMachineOutput;
import org.openapitools.client.model.DeleteActivityInput;
import org.openapitools.client.model.DeleteStateMachineAliasInput;
import org.openapitools.client.model.DeleteStateMachineInput;
import org.openapitools.client.model.DeleteStateMachineVersionInput;
import org.openapitools.client.model.DescribeActivityInput;
import org.openapitools.client.model.DescribeActivityOutput;
import org.openapitools.client.model.DescribeExecutionInput;
import org.openapitools.client.model.DescribeExecutionOutput;
import org.openapitools.client.model.DescribeMapRunInput;
import org.openapitools.client.model.DescribeMapRunOutput;
import org.openapitools.client.model.DescribeStateMachineAliasInput;
import org.openapitools.client.model.DescribeStateMachineAliasOutput;
import org.openapitools.client.model.DescribeStateMachineForExecutionInput;
import org.openapitools.client.model.DescribeStateMachineForExecutionOutput;
import org.openapitools.client.model.DescribeStateMachineInput;
import org.openapitools.client.model.DescribeStateMachineOutput;
import org.openapitools.client.model.GetActivityTaskInput;
import org.openapitools.client.model.GetActivityTaskOutput;
import org.openapitools.client.model.GetExecutionHistoryInput;
import org.openapitools.client.model.GetExecutionHistoryOutput;
import org.openapitools.client.model.ListActivitiesInput;
import org.openapitools.client.model.ListActivitiesOutput;
import org.openapitools.client.model.ListExecutionsInput;
import org.openapitools.client.model.ListExecutionsOutput;
import org.openapitools.client.model.ListMapRunsInput;
import org.openapitools.client.model.ListMapRunsOutput;
import org.openapitools.client.model.ListStateMachineAliasesInput;
import org.openapitools.client.model.ListStateMachineAliasesOutput;
import org.openapitools.client.model.ListStateMachineVersionsInput;
import org.openapitools.client.model.ListStateMachineVersionsOutput;
import org.openapitools.client.model.ListStateMachinesInput;
import org.openapitools.client.model.ListStateMachinesOutput;
import org.openapitools.client.model.ListTagsForResourceInput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.PublishStateMachineVersionInput;
import org.openapitools.client.model.PublishStateMachineVersionOutput;
import org.openapitools.client.model.SendTaskFailureInput;
import org.openapitools.client.model.SendTaskHeartbeatInput;
import org.openapitools.client.model.SendTaskSuccessInput;
import org.openapitools.client.model.StartExecutionInput;
import org.openapitools.client.model.StartExecutionOutput;
import org.openapitools.client.model.StartSyncExecutionInput;
import org.openapitools.client.model.StartSyncExecutionOutput;
import org.openapitools.client.model.StopExecutionInput;
import org.openapitools.client.model.StopExecutionOutput;
import org.openapitools.client.model.TagResourceInput;
import org.openapitools.client.model.UntagResourceInput;
import org.openapitools.client.model.UpdateMapRunInput;
import org.openapitools.client.model.UpdateStateMachineAliasInput;
import org.openapitools.client.model.UpdateStateMachineAliasOutput;
import org.openapitools.client.model.UpdateStateMachineInput;
import org.openapitools.client.model.UpdateStateMachineOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createActivity
     * @param xAmzTarget  (required)
     * @param createActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createActivityCall(String xAmzTarget, CreateActivityInput createActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createActivityInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.CreateActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createActivityValidateBeforeCall(String xAmzTarget, CreateActivityInput createActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createActivity(Async)");
        }

        // verify the required parameter 'createActivityInput' is set
        if (createActivityInput == null) {
            throw new ApiException("Missing the required parameter 'createActivityInput' when calling createActivity(Async)");
        }

        return createActivityCall(xAmzTarget, createActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an activity. An activity is a task that you write in any programming language and host on any machine that has access to Step Functions. Activities must poll Step Functions using the &lt;code&gt;GetActivityTask&lt;/code&gt; API action and respond using &lt;code&gt;SendTask*&lt;/code&gt; API actions. This function lets Step Functions know the existence of your activity and returns an identifier for use in a state machine and when polling from the activity.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateActivity&lt;/code&gt; is an idempotent API. Subsequent requests won’t create a duplicate resource if it was already created. &lt;code&gt;CreateActivity&lt;/code&gt;&#39;s idempotency check is based on the activity &lt;code&gt;name&lt;/code&gt;. If a following request has different &lt;code&gt;tags&lt;/code&gt; values, Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, &lt;code&gt;tags&lt;/code&gt; will not be updated, even if they are different.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateActivityOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTags </td><td>  -  </td></tr>
     </table>
     */
    public CreateActivityOutput createActivity(String xAmzTarget, CreateActivityInput createActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateActivityOutput> localVarResp = createActivityWithHttpInfo(xAmzTarget, createActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an activity. An activity is a task that you write in any programming language and host on any machine that has access to Step Functions. Activities must poll Step Functions using the &lt;code&gt;GetActivityTask&lt;/code&gt; API action and respond using &lt;code&gt;SendTask*&lt;/code&gt; API actions. This function lets Step Functions know the existence of your activity and returns an identifier for use in a state machine and when polling from the activity.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateActivity&lt;/code&gt; is an idempotent API. Subsequent requests won’t create a duplicate resource if it was already created. &lt;code&gt;CreateActivity&lt;/code&gt;&#39;s idempotency check is based on the activity &lt;code&gt;name&lt;/code&gt;. If a following request has different &lt;code&gt;tags&lt;/code&gt; values, Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, &lt;code&gt;tags&lt;/code&gt; will not be updated, even if they are different.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateActivityOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateActivityOutput> createActivityWithHttpInfo(String xAmzTarget, CreateActivityInput createActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createActivityValidateBeforeCall(xAmzTarget, createActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateActivityOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an activity. An activity is a task that you write in any programming language and host on any machine that has access to Step Functions. Activities must poll Step Functions using the &lt;code&gt;GetActivityTask&lt;/code&gt; API action and respond using &lt;code&gt;SendTask*&lt;/code&gt; API actions. This function lets Step Functions know the existence of your activity and returns an identifier for use in a state machine and when polling from the activity.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateActivity&lt;/code&gt; is an idempotent API. Subsequent requests won’t create a duplicate resource if it was already created. &lt;code&gt;CreateActivity&lt;/code&gt;&#39;s idempotency check is based on the activity &lt;code&gt;name&lt;/code&gt;. If a following request has different &lt;code&gt;tags&lt;/code&gt; values, Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, &lt;code&gt;tags&lt;/code&gt; will not be updated, even if they are different.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createActivityAsync(String xAmzTarget, CreateActivityInput createActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateActivityOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createActivityValidateBeforeCall(xAmzTarget, createActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateActivityOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStateMachine
     * @param xAmzTarget  (required)
     * @param createStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDefinition </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidLoggingConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTracingConfiguration </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StateMachineLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTags </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStateMachineCall(String xAmzTarget, CreateStateMachineInput createStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStateMachineInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.CreateStateMachine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStateMachineValidateBeforeCall(String xAmzTarget, CreateStateMachineInput createStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createStateMachine(Async)");
        }

        // verify the required parameter 'createStateMachineInput' is set
        if (createStateMachineInput == null) {
            throw new ApiException("Missing the required parameter 'createStateMachineInput' when calling createStateMachine(Async)");
        }

        return createStateMachineCall(xAmzTarget, createStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a state machine. A state machine consists of a collection of states that can do work (&lt;code&gt;Task&lt;/code&gt; states), determine to which states to transition next (&lt;code&gt;Choice&lt;/code&gt; states), stop an execution with an error (&lt;code&gt;Fail&lt;/code&gt; states), and so on. State machines are specified using a JSON-based, structured language. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html\&quot;&gt;Amazon States Language&lt;/a&gt; in the Step Functions User Guide.&lt;/p&gt; &lt;p&gt;If you set the &lt;code&gt;publish&lt;/code&gt; parameter of this API action to &lt;code&gt;true&lt;/code&gt;, it publishes version &lt;code&gt;1&lt;/code&gt; as the first revision of the state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateStateMachine&lt;/code&gt; is an idempotent API. Subsequent requests won’t create a duplicate resource if it was already created. &lt;code&gt;CreateStateMachine&lt;/code&gt;&#39;s idempotency check is based on the state machine &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;definition&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;LoggingConfiguration&lt;/code&gt;, and &lt;code&gt;TracingConfiguration&lt;/code&gt;. The check is also based on the &lt;code&gt;publish&lt;/code&gt; and &lt;code&gt;versionDescription&lt;/code&gt; parameters. If a following request has a different &lt;code&gt;roleArn&lt;/code&gt; or &lt;code&gt;tags&lt;/code&gt;, Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, &lt;code&gt;roleArn&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; will not be updated, even if they are different.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStateMachineOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDefinition </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidLoggingConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTracingConfiguration </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StateMachineLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTags </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStateMachineOutput createStateMachine(String xAmzTarget, CreateStateMachineInput createStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStateMachineOutput> localVarResp = createStateMachineWithHttpInfo(xAmzTarget, createStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a state machine. A state machine consists of a collection of states that can do work (&lt;code&gt;Task&lt;/code&gt; states), determine to which states to transition next (&lt;code&gt;Choice&lt;/code&gt; states), stop an execution with an error (&lt;code&gt;Fail&lt;/code&gt; states), and so on. State machines are specified using a JSON-based, structured language. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html\&quot;&gt;Amazon States Language&lt;/a&gt; in the Step Functions User Guide.&lt;/p&gt; &lt;p&gt;If you set the &lt;code&gt;publish&lt;/code&gt; parameter of this API action to &lt;code&gt;true&lt;/code&gt;, it publishes version &lt;code&gt;1&lt;/code&gt; as the first revision of the state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateStateMachine&lt;/code&gt; is an idempotent API. Subsequent requests won’t create a duplicate resource if it was already created. &lt;code&gt;CreateStateMachine&lt;/code&gt;&#39;s idempotency check is based on the state machine &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;definition&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;LoggingConfiguration&lt;/code&gt;, and &lt;code&gt;TracingConfiguration&lt;/code&gt;. The check is also based on the &lt;code&gt;publish&lt;/code&gt; and &lt;code&gt;versionDescription&lt;/code&gt; parameters. If a following request has a different &lt;code&gt;roleArn&lt;/code&gt; or &lt;code&gt;tags&lt;/code&gt;, Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, &lt;code&gt;roleArn&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; will not be updated, even if they are different.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStateMachineOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDefinition </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidLoggingConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTracingConfiguration </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StateMachineLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTags </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStateMachineOutput> createStateMachineWithHttpInfo(String xAmzTarget, CreateStateMachineInput createStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStateMachineValidateBeforeCall(xAmzTarget, createStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStateMachineOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a state machine. A state machine consists of a collection of states that can do work (&lt;code&gt;Task&lt;/code&gt; states), determine to which states to transition next (&lt;code&gt;Choice&lt;/code&gt; states), stop an execution with an error (&lt;code&gt;Fail&lt;/code&gt; states), and so on. State machines are specified using a JSON-based, structured language. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html\&quot;&gt;Amazon States Language&lt;/a&gt; in the Step Functions User Guide.&lt;/p&gt; &lt;p&gt;If you set the &lt;code&gt;publish&lt;/code&gt; parameter of this API action to &lt;code&gt;true&lt;/code&gt;, it publishes version &lt;code&gt;1&lt;/code&gt; as the first revision of the state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateStateMachine&lt;/code&gt; is an idempotent API. Subsequent requests won’t create a duplicate resource if it was already created. &lt;code&gt;CreateStateMachine&lt;/code&gt;&#39;s idempotency check is based on the state machine &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;definition&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;LoggingConfiguration&lt;/code&gt;, and &lt;code&gt;TracingConfiguration&lt;/code&gt;. The check is also based on the &lt;code&gt;publish&lt;/code&gt; and &lt;code&gt;versionDescription&lt;/code&gt; parameters. If a following request has a different &lt;code&gt;roleArn&lt;/code&gt; or &lt;code&gt;tags&lt;/code&gt;, Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, &lt;code&gt;roleArn&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; will not be updated, even if they are different.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDefinition </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidLoggingConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTracingConfiguration </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StateMachineLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTags </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStateMachineAsync(String xAmzTarget, CreateStateMachineInput createStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStateMachineOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStateMachineValidateBeforeCall(xAmzTarget, createStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStateMachineOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStateMachineAlias
     * @param xAmzTarget  (required)
     * @param createStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStateMachineAliasCall(String xAmzTarget, CreateStateMachineAliasInput createStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStateMachineAliasInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.CreateStateMachineAlias";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStateMachineAliasValidateBeforeCall(String xAmzTarget, CreateStateMachineAliasInput createStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createStateMachineAlias(Async)");
        }

        // verify the required parameter 'createStateMachineAliasInput' is set
        if (createStateMachineAliasInput == null) {
            throw new ApiException("Missing the required parameter 'createStateMachineAliasInput' when calling createStateMachineAlias(Async)");
        }

        return createStateMachineAliasCall(xAmzTarget, createStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; for a state machine that points to one or two &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; of the same state machine. You can set your application to call &lt;a&gt;StartExecution&lt;/a&gt; with an alias and update the version the alias uses without changing the client&#39;s code.&lt;/p&gt; &lt;p&gt;You can also map an alias to split &lt;a&gt;StartExecution&lt;/a&gt; requests between two versions of a state machine. To do this, add a second &lt;code&gt;RoutingConfig&lt;/code&gt; object in the &lt;code&gt;routingConfiguration&lt;/code&gt; parameter. You must also specify the percentage of execution run requests each version should receive in both &lt;code&gt;RoutingConfig&lt;/code&gt; objects. Step Functions randomly chooses which version runs a given execution based on the percentage you specify.&lt;/p&gt; &lt;p&gt;To create an alias that points to a single version, specify a single &lt;code&gt;RoutingConfig&lt;/code&gt; object with a &lt;code&gt;weight&lt;/code&gt; set to 100.&lt;/p&gt; &lt;p&gt;You can create up to 100 aliases for each state machine. You must delete unused aliases using the &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; API action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateStateMachineAlias&lt;/code&gt; is an idempotent API. Step Functions bases the idempotency check on the &lt;code&gt;stateMachineArn&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;routingConfiguration&lt;/code&gt; parameters. Requests that contain the same values for these parameters return a successful idempotent response without creating a duplicate resource.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStateMachineAliasOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStateMachineAliasOutput createStateMachineAlias(String xAmzTarget, CreateStateMachineAliasInput createStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStateMachineAliasOutput> localVarResp = createStateMachineAliasWithHttpInfo(xAmzTarget, createStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; for a state machine that points to one or two &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; of the same state machine. You can set your application to call &lt;a&gt;StartExecution&lt;/a&gt; with an alias and update the version the alias uses without changing the client&#39;s code.&lt;/p&gt; &lt;p&gt;You can also map an alias to split &lt;a&gt;StartExecution&lt;/a&gt; requests between two versions of a state machine. To do this, add a second &lt;code&gt;RoutingConfig&lt;/code&gt; object in the &lt;code&gt;routingConfiguration&lt;/code&gt; parameter. You must also specify the percentage of execution run requests each version should receive in both &lt;code&gt;RoutingConfig&lt;/code&gt; objects. Step Functions randomly chooses which version runs a given execution based on the percentage you specify.&lt;/p&gt; &lt;p&gt;To create an alias that points to a single version, specify a single &lt;code&gt;RoutingConfig&lt;/code&gt; object with a &lt;code&gt;weight&lt;/code&gt; set to 100.&lt;/p&gt; &lt;p&gt;You can create up to 100 aliases for each state machine. You must delete unused aliases using the &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; API action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateStateMachineAlias&lt;/code&gt; is an idempotent API. Step Functions bases the idempotency check on the &lt;code&gt;stateMachineArn&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;routingConfiguration&lt;/code&gt; parameters. Requests that contain the same values for these parameters return a successful idempotent response without creating a duplicate resource.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStateMachineAliasOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStateMachineAliasOutput> createStateMachineAliasWithHttpInfo(String xAmzTarget, CreateStateMachineAliasInput createStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStateMachineAliasValidateBeforeCall(xAmzTarget, createStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStateMachineAliasOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; for a state machine that points to one or two &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; of the same state machine. You can set your application to call &lt;a&gt;StartExecution&lt;/a&gt; with an alias and update the version the alias uses without changing the client&#39;s code.&lt;/p&gt; &lt;p&gt;You can also map an alias to split &lt;a&gt;StartExecution&lt;/a&gt; requests between two versions of a state machine. To do this, add a second &lt;code&gt;RoutingConfig&lt;/code&gt; object in the &lt;code&gt;routingConfiguration&lt;/code&gt; parameter. You must also specify the percentage of execution run requests each version should receive in both &lt;code&gt;RoutingConfig&lt;/code&gt; objects. Step Functions randomly chooses which version runs a given execution based on the percentage you specify.&lt;/p&gt; &lt;p&gt;To create an alias that points to a single version, specify a single &lt;code&gt;RoutingConfig&lt;/code&gt; object with a &lt;code&gt;weight&lt;/code&gt; set to 100.&lt;/p&gt; &lt;p&gt;You can create up to 100 aliases for each state machine. You must delete unused aliases using the &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; API action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateStateMachineAlias&lt;/code&gt; is an idempotent API. Step Functions bases the idempotency check on the &lt;code&gt;stateMachineArn&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;routingConfiguration&lt;/code&gt; parameters. Requests that contain the same values for these parameters return a successful idempotent response without creating a duplicate resource.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStateMachineAliasAsync(String xAmzTarget, CreateStateMachineAliasInput createStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStateMachineAliasOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStateMachineAliasValidateBeforeCall(xAmzTarget, createStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStateMachineAliasOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteActivity
     * @param xAmzTarget  (required)
     * @param deleteActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteActivityCall(String xAmzTarget, DeleteActivityInput deleteActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteActivityInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DeleteActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteActivityValidateBeforeCall(String xAmzTarget, DeleteActivityInput deleteActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteActivity(Async)");
        }

        // verify the required parameter 'deleteActivityInput' is set
        if (deleteActivityInput == null) {
            throw new ApiException("Missing the required parameter 'deleteActivityInput' when calling deleteActivity(Async)");
        }

        return deleteActivityCall(xAmzTarget, deleteActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an activity.
     * @param xAmzTarget  (required)
     * @param deleteActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteActivity(String xAmzTarget, DeleteActivityInput deleteActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteActivityWithHttpInfo(xAmzTarget, deleteActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an activity.
     * @param xAmzTarget  (required)
     * @param deleteActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteActivityWithHttpInfo(String xAmzTarget, DeleteActivityInput deleteActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteActivityValidateBeforeCall(xAmzTarget, deleteActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an activity.
     * @param xAmzTarget  (required)
     * @param deleteActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteActivityAsync(String xAmzTarget, DeleteActivityInput deleteActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteActivityValidateBeforeCall(xAmzTarget, deleteActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStateMachine
     * @param xAmzTarget  (required)
     * @param deleteStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStateMachineCall(String xAmzTarget, DeleteStateMachineInput deleteStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStateMachineInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DeleteStateMachine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStateMachineValidateBeforeCall(String xAmzTarget, DeleteStateMachineInput deleteStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteStateMachine(Async)");
        }

        // verify the required parameter 'deleteStateMachineInput' is set
        if (deleteStateMachineInput == null) {
            throw new ApiException("Missing the required parameter 'deleteStateMachineInput' when calling deleteStateMachine(Async)");
        }

        return deleteStateMachineCall(xAmzTarget, deleteStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a state machine. This is an asynchronous operation: It sets the state machine&#39;s status to &lt;code&gt;DELETING&lt;/code&gt; and begins the deletion process. &lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This API action also deletes all &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;aliases&lt;/a&gt; associated with a state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For &lt;code&gt;EXPRESS&lt;/code&gt; state machines, the deletion happens eventually (usually in less than a minute). Running executions may emit logs after &lt;code&gt;DeleteStateMachine&lt;/code&gt; API is called.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteStateMachine(String xAmzTarget, DeleteStateMachineInput deleteStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteStateMachineWithHttpInfo(xAmzTarget, deleteStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a state machine. This is an asynchronous operation: It sets the state machine&#39;s status to &lt;code&gt;DELETING&lt;/code&gt; and begins the deletion process. &lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This API action also deletes all &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;aliases&lt;/a&gt; associated with a state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For &lt;code&gt;EXPRESS&lt;/code&gt; state machines, the deletion happens eventually (usually in less than a minute). Running executions may emit logs after &lt;code&gt;DeleteStateMachine&lt;/code&gt; API is called.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteStateMachineWithHttpInfo(String xAmzTarget, DeleteStateMachineInput deleteStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteStateMachineValidateBeforeCall(xAmzTarget, deleteStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a state machine. This is an asynchronous operation: It sets the state machine&#39;s status to &lt;code&gt;DELETING&lt;/code&gt; and begins the deletion process. &lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This API action also deletes all &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;aliases&lt;/a&gt; associated with a state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For &lt;code&gt;EXPRESS&lt;/code&gt; state machines, the deletion happens eventually (usually in less than a minute). Running executions may emit logs after &lt;code&gt;DeleteStateMachine&lt;/code&gt; API is called.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStateMachineAsync(String xAmzTarget, DeleteStateMachineInput deleteStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStateMachineValidateBeforeCall(xAmzTarget, deleteStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStateMachineAlias
     * @param xAmzTarget  (required)
     * @param deleteStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStateMachineAliasCall(String xAmzTarget, DeleteStateMachineAliasInput deleteStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStateMachineAliasInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DeleteStateMachineAlias";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStateMachineAliasValidateBeforeCall(String xAmzTarget, DeleteStateMachineAliasInput deleteStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteStateMachineAlias(Async)");
        }

        // verify the required parameter 'deleteStateMachineAliasInput' is set
        if (deleteStateMachineAliasInput == null) {
            throw new ApiException("Missing the required parameter 'deleteStateMachineAliasInput' when calling deleteStateMachineAlias(Async)");
        }

        return deleteStateMachineAliasCall(xAmzTarget, deleteStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After you delete a state machine alias, you can&#39;t use it to start executions. When you delete a state machine alias, Step Functions doesn&#39;t delete the state machine versions that alias references.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteStateMachineAlias(String xAmzTarget, DeleteStateMachineAliasInput deleteStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteStateMachineAliasWithHttpInfo(xAmzTarget, deleteStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After you delete a state machine alias, you can&#39;t use it to start executions. When you delete a state machine alias, Step Functions doesn&#39;t delete the state machine versions that alias references.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteStateMachineAliasWithHttpInfo(String xAmzTarget, DeleteStateMachineAliasInput deleteStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteStateMachineAliasValidateBeforeCall(xAmzTarget, deleteStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After you delete a state machine alias, you can&#39;t use it to start executions. When you delete a state machine alias, Step Functions doesn&#39;t delete the state machine versions that alias references.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStateMachineAliasAsync(String xAmzTarget, DeleteStateMachineAliasInput deleteStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStateMachineAliasValidateBeforeCall(xAmzTarget, deleteStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStateMachineVersion
     * @param xAmzTarget  (required)
     * @param deleteStateMachineVersionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStateMachineVersionCall(String xAmzTarget, DeleteStateMachineVersionInput deleteStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStateMachineVersionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DeleteStateMachineVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStateMachineVersionValidateBeforeCall(String xAmzTarget, DeleteStateMachineVersionInput deleteStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteStateMachineVersion(Async)");
        }

        // verify the required parameter 'deleteStateMachineVersionInput' is set
        if (deleteStateMachineVersionInput == null) {
            throw new ApiException("Missing the required parameter 'deleteStateMachineVersionInput' when calling deleteStateMachineVersion(Async)");
        }

        return deleteStateMachineVersionCall(xAmzTarget, deleteStateMachineVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;. After you delete a version, you can&#39;t call &lt;a&gt;StartExecution&lt;/a&gt; using that version&#39;s ARN or use the version with a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting a state machine version won&#39;t terminate its in-progress executions.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete a state machine version currently referenced by one or more aliases. Before you delete a version, you must either delete the aliases or update them to point to another state machine version.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;PublishStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineVersions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineVersionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteStateMachineVersion(String xAmzTarget, DeleteStateMachineVersionInput deleteStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteStateMachineVersionWithHttpInfo(xAmzTarget, deleteStateMachineVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;. After you delete a version, you can&#39;t call &lt;a&gt;StartExecution&lt;/a&gt; using that version&#39;s ARN or use the version with a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting a state machine version won&#39;t terminate its in-progress executions.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete a state machine version currently referenced by one or more aliases. Before you delete a version, you must either delete the aliases or update them to point to another state machine version.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;PublishStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineVersions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineVersionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteStateMachineVersionWithHttpInfo(String xAmzTarget, DeleteStateMachineVersionInput deleteStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteStateMachineVersionValidateBeforeCall(xAmzTarget, deleteStateMachineVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;. After you delete a version, you can&#39;t call &lt;a&gt;StartExecution&lt;/a&gt; using that version&#39;s ARN or use the version with a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting a state machine version won&#39;t terminate its in-progress executions.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete a state machine version currently referenced by one or more aliases. Before you delete a version, you must either delete the aliases or update them to point to another state machine version.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;PublishStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineVersions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deleteStateMachineVersionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStateMachineVersionAsync(String xAmzTarget, DeleteStateMachineVersionInput deleteStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStateMachineVersionValidateBeforeCall(xAmzTarget, deleteStateMachineVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeActivity
     * @param xAmzTarget  (required)
     * @param describeActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeActivityCall(String xAmzTarget, DescribeActivityInput describeActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeActivityInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DescribeActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeActivityValidateBeforeCall(String xAmzTarget, DescribeActivityInput describeActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeActivity(Async)");
        }

        // verify the required parameter 'describeActivityInput' is set
        if (describeActivityInput == null) {
            throw new ApiException("Missing the required parameter 'describeActivityInput' when calling describeActivity(Async)");
        }

        return describeActivityCall(xAmzTarget, describeActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes an activity.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeActivityOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public DescribeActivityOutput describeActivity(String xAmzTarget, DescribeActivityInput describeActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeActivityOutput> localVarResp = describeActivityWithHttpInfo(xAmzTarget, describeActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes an activity.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeActivityOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeActivityOutput> describeActivityWithHttpInfo(String xAmzTarget, DescribeActivityInput describeActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeActivityValidateBeforeCall(xAmzTarget, describeActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeActivityOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes an activity.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeActivityInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeActivityAsync(String xAmzTarget, DescribeActivityInput describeActivityInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeActivityOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeActivityValidateBeforeCall(xAmzTarget, describeActivityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeActivityOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeExecution
     * @param xAmzTarget  (required)
     * @param describeExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeExecutionCall(String xAmzTarget, DescribeExecutionInput describeExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeExecutionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DescribeExecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeExecutionValidateBeforeCall(String xAmzTarget, DescribeExecutionInput describeExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeExecution(Async)");
        }

        // verify the required parameter 'describeExecutionInput' is set
        if (describeExecutionInput == null) {
            throw new ApiException("Missing the required parameter 'describeExecutionInput' when calling describeExecution(Async)");
        }

        return describeExecutionCall(xAmzTarget, describeExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Provides information about a state machine execution, such as the state machine associated with the execution, the execution input and output, and relevant execution metadata. Use this API action to return the Map Run Amazon Resource Name (ARN) if the execution was dispatched by a Map Run.&lt;/p&gt; &lt;p&gt;If you specify a version or alias ARN when you call the &lt;a&gt;StartExecution&lt;/a&gt; API action, &lt;code&gt;DescribeExecution&lt;/code&gt; returns that ARN.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Executions of an &lt;code&gt;EXPRESS&lt;/code&gt; state machinearen&#39;t supported by &lt;code&gt;DescribeExecution&lt;/code&gt; unless a Map Run dispatched them.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeExecutionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public DescribeExecutionOutput describeExecution(String xAmzTarget, DescribeExecutionInput describeExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeExecutionOutput> localVarResp = describeExecutionWithHttpInfo(xAmzTarget, describeExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Provides information about a state machine execution, such as the state machine associated with the execution, the execution input and output, and relevant execution metadata. Use this API action to return the Map Run Amazon Resource Name (ARN) if the execution was dispatched by a Map Run.&lt;/p&gt; &lt;p&gt;If you specify a version or alias ARN when you call the &lt;a&gt;StartExecution&lt;/a&gt; API action, &lt;code&gt;DescribeExecution&lt;/code&gt; returns that ARN.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Executions of an &lt;code&gt;EXPRESS&lt;/code&gt; state machinearen&#39;t supported by &lt;code&gt;DescribeExecution&lt;/code&gt; unless a Map Run dispatched them.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeExecutionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeExecutionOutput> describeExecutionWithHttpInfo(String xAmzTarget, DescribeExecutionInput describeExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeExecutionValidateBeforeCall(xAmzTarget, describeExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeExecutionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Provides information about a state machine execution, such as the state machine associated with the execution, the execution input and output, and relevant execution metadata. Use this API action to return the Map Run Amazon Resource Name (ARN) if the execution was dispatched by a Map Run.&lt;/p&gt; &lt;p&gt;If you specify a version or alias ARN when you call the &lt;a&gt;StartExecution&lt;/a&gt; API action, &lt;code&gt;DescribeExecution&lt;/code&gt; returns that ARN.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Executions of an &lt;code&gt;EXPRESS&lt;/code&gt; state machinearen&#39;t supported by &lt;code&gt;DescribeExecution&lt;/code&gt; unless a Map Run dispatched them.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeExecutionAsync(String xAmzTarget, DescribeExecutionInput describeExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeExecutionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeExecutionValidateBeforeCall(xAmzTarget, describeExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeExecutionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeMapRun
     * @param xAmzTarget  (required)
     * @param describeMapRunInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeMapRunCall(String xAmzTarget, DescribeMapRunInput describeMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeMapRunInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DescribeMapRun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeMapRunValidateBeforeCall(String xAmzTarget, DescribeMapRunInput describeMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeMapRun(Async)");
        }

        // verify the required parameter 'describeMapRunInput' is set
        if (describeMapRunInput == null) {
            throw new ApiException("Missing the required parameter 'describeMapRunInput' when calling describeMapRun(Async)");
        }

        return describeMapRunCall(xAmzTarget, describeMapRunInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Provides information about a Map Run&#39;s configuration, progress, and results. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-examine-map-run.html\&quot;&gt;Examining Map Run&lt;/a&gt; in the &lt;i&gt;Step Functions Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param describeMapRunInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeMapRunOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public DescribeMapRunOutput describeMapRun(String xAmzTarget, DescribeMapRunInput describeMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeMapRunOutput> localVarResp = describeMapRunWithHttpInfo(xAmzTarget, describeMapRunInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides information about a Map Run&#39;s configuration, progress, and results. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-examine-map-run.html\&quot;&gt;Examining Map Run&lt;/a&gt; in the &lt;i&gt;Step Functions Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param describeMapRunInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeMapRunOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeMapRunOutput> describeMapRunWithHttpInfo(String xAmzTarget, DescribeMapRunInput describeMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeMapRunValidateBeforeCall(xAmzTarget, describeMapRunInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeMapRunOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides information about a Map Run&#39;s configuration, progress, and results. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-examine-map-run.html\&quot;&gt;Examining Map Run&lt;/a&gt; in the &lt;i&gt;Step Functions Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param describeMapRunInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeMapRunAsync(String xAmzTarget, DescribeMapRunInput describeMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeMapRunOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeMapRunValidateBeforeCall(xAmzTarget, describeMapRunInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeMapRunOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeStateMachine
     * @param xAmzTarget  (required)
     * @param describeStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeStateMachineCall(String xAmzTarget, DescribeStateMachineInput describeStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStateMachineInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DescribeStateMachine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeStateMachineValidateBeforeCall(String xAmzTarget, DescribeStateMachineInput describeStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeStateMachine(Async)");
        }

        // verify the required parameter 'describeStateMachineInput' is set
        if (describeStateMachineInput == null) {
            throw new ApiException("Missing the required parameter 'describeStateMachineInput' when calling describeStateMachine(Async)");
        }

        return describeStateMachineCall(xAmzTarget, describeStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Provides information about a state machine&#39;s definition, its IAM role Amazon Resource Name (ARN), and configuration.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This API action returns the details for a state machine version if the &lt;code&gt;stateMachineArn&lt;/code&gt; you specify is a state machine version ARN.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeStateMachineOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStateMachineOutput describeStateMachine(String xAmzTarget, DescribeStateMachineInput describeStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeStateMachineOutput> localVarResp = describeStateMachineWithHttpInfo(xAmzTarget, describeStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Provides information about a state machine&#39;s definition, its IAM role Amazon Resource Name (ARN), and configuration.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This API action returns the details for a state machine version if the &lt;code&gt;stateMachineArn&lt;/code&gt; you specify is a state machine version ARN.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeStateMachineOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStateMachineOutput> describeStateMachineWithHttpInfo(String xAmzTarget, DescribeStateMachineInput describeStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeStateMachineValidateBeforeCall(xAmzTarget, describeStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeStateMachineOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Provides information about a state machine&#39;s definition, its IAM role Amazon Resource Name (ARN), and configuration.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This API action returns the details for a state machine version if the &lt;code&gt;stateMachineArn&lt;/code&gt; you specify is a state machine version ARN.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeStateMachineAsync(String xAmzTarget, DescribeStateMachineInput describeStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeStateMachineOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeStateMachineValidateBeforeCall(xAmzTarget, describeStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeStateMachineOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeStateMachineAlias
     * @param xAmzTarget  (required)
     * @param describeStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeStateMachineAliasCall(String xAmzTarget, DescribeStateMachineAliasInput describeStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStateMachineAliasInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DescribeStateMachineAlias";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeStateMachineAliasValidateBeforeCall(String xAmzTarget, DescribeStateMachineAliasInput describeStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeStateMachineAlias(Async)");
        }

        // verify the required parameter 'describeStateMachineAliasInput' is set
        if (describeStateMachineAliasInput == null) {
            throw new ApiException("Missing the required parameter 'describeStateMachineAliasInput' when calling describeStateMachineAlias(Async)");
        }

        return describeStateMachineAliasCall(xAmzTarget, describeStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns details about a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeStateMachineAliasOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStateMachineAliasOutput describeStateMachineAlias(String xAmzTarget, DescribeStateMachineAliasInput describeStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeStateMachineAliasOutput> localVarResp = describeStateMachineAliasWithHttpInfo(xAmzTarget, describeStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns details about a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeStateMachineAliasOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStateMachineAliasOutput> describeStateMachineAliasWithHttpInfo(String xAmzTarget, DescribeStateMachineAliasInput describeStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeStateMachineAliasValidateBeforeCall(xAmzTarget, describeStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeStateMachineAliasOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns details about a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeStateMachineAliasAsync(String xAmzTarget, DescribeStateMachineAliasInput describeStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeStateMachineAliasOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeStateMachineAliasValidateBeforeCall(xAmzTarget, describeStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeStateMachineAliasOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeStateMachineForExecution
     * @param xAmzTarget  (required)
     * @param describeStateMachineForExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeStateMachineForExecutionCall(String xAmzTarget, DescribeStateMachineForExecutionInput describeStateMachineForExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStateMachineForExecutionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.DescribeStateMachineForExecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeStateMachineForExecutionValidateBeforeCall(String xAmzTarget, DescribeStateMachineForExecutionInput describeStateMachineForExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeStateMachineForExecution(Async)");
        }

        // verify the required parameter 'describeStateMachineForExecutionInput' is set
        if (describeStateMachineForExecutionInput == null) {
            throw new ApiException("Missing the required parameter 'describeStateMachineForExecutionInput' when calling describeStateMachineForExecution(Async)");
        }

        return describeStateMachineForExecutionCall(xAmzTarget, describeStateMachineForExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Provides information about a state machine&#39;s definition, its execution role ARN, and configuration. If a Map Run dispatched the execution, this action returns the Map Run Amazon Resource Name (ARN) in the response. The state machine returned is the state machine associated with the Map Run.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineForExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeStateMachineForExecutionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStateMachineForExecutionOutput describeStateMachineForExecution(String xAmzTarget, DescribeStateMachineForExecutionInput describeStateMachineForExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeStateMachineForExecutionOutput> localVarResp = describeStateMachineForExecutionWithHttpInfo(xAmzTarget, describeStateMachineForExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Provides information about a state machine&#39;s definition, its execution role ARN, and configuration. If a Map Run dispatched the execution, this action returns the Map Run Amazon Resource Name (ARN) in the response. The state machine returned is the state machine associated with the Map Run.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineForExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeStateMachineForExecutionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStateMachineForExecutionOutput> describeStateMachineForExecutionWithHttpInfo(String xAmzTarget, DescribeStateMachineForExecutionInput describeStateMachineForExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeStateMachineForExecutionValidateBeforeCall(xAmzTarget, describeStateMachineForExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeStateMachineForExecutionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Provides information about a state machine&#39;s definition, its execution role ARN, and configuration. If a Map Run dispatched the execution, this action returns the Map Run Amazon Resource Name (ARN) in the response. The state machine returned is the state machine associated with the Map Run.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeStateMachineForExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeStateMachineForExecutionAsync(String xAmzTarget, DescribeStateMachineForExecutionInput describeStateMachineForExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeStateMachineForExecutionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeStateMachineForExecutionValidateBeforeCall(xAmzTarget, describeStateMachineForExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeStateMachineForExecutionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActivityTask
     * @param xAmzTarget  (required)
     * @param getActivityTaskInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActivityWorkerLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivityTaskCall(String xAmzTarget, GetActivityTaskInput getActivityTaskInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getActivityTaskInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.GetActivityTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivityTaskValidateBeforeCall(String xAmzTarget, GetActivityTaskInput getActivityTaskInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getActivityTask(Async)");
        }

        // verify the required parameter 'getActivityTaskInput' is set
        if (getActivityTaskInput == null) {
            throw new ApiException("Missing the required parameter 'getActivityTaskInput' when calling getActivityTask(Async)");
        }

        return getActivityTaskCall(xAmzTarget, getActivityTaskInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Used by workers to retrieve a task (with the specified activity ARN) which has been scheduled for execution by a running state machine. This initiates a long poll, where the service holds the HTTP connection open and responds as soon as a task becomes available (i.e. an execution of a task of this type is needed.) The maximum time the service holds on to the request before responding is 60 seconds. If no task is available within 60 seconds, the poll returns a &lt;code&gt;taskToken&lt;/code&gt; with a null string.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API action isn&#39;t logged in CloudTrail.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Workers should set their client side socket timeout to at least 65 seconds (5 seconds higher than the maximum time the service may hold the poll request).&lt;/p&gt; &lt;p&gt;Polling with &lt;code&gt;GetActivityTask&lt;/code&gt; can cause latency in some implementations. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html\&quot;&gt;Avoid Latency When Polling for Activity Tasks&lt;/a&gt; in the Step Functions Developer Guide.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param getActivityTaskInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetActivityTaskOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActivityWorkerLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public GetActivityTaskOutput getActivityTask(String xAmzTarget, GetActivityTaskInput getActivityTaskInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetActivityTaskOutput> localVarResp = getActivityTaskWithHttpInfo(xAmzTarget, getActivityTaskInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Used by workers to retrieve a task (with the specified activity ARN) which has been scheduled for execution by a running state machine. This initiates a long poll, where the service holds the HTTP connection open and responds as soon as a task becomes available (i.e. an execution of a task of this type is needed.) The maximum time the service holds on to the request before responding is 60 seconds. If no task is available within 60 seconds, the poll returns a &lt;code&gt;taskToken&lt;/code&gt; with a null string.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API action isn&#39;t logged in CloudTrail.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Workers should set their client side socket timeout to at least 65 seconds (5 seconds higher than the maximum time the service may hold the poll request).&lt;/p&gt; &lt;p&gt;Polling with &lt;code&gt;GetActivityTask&lt;/code&gt; can cause latency in some implementations. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html\&quot;&gt;Avoid Latency When Polling for Activity Tasks&lt;/a&gt; in the Step Functions Developer Guide.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param getActivityTaskInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetActivityTaskOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActivityWorkerLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetActivityTaskOutput> getActivityTaskWithHttpInfo(String xAmzTarget, GetActivityTaskInput getActivityTaskInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getActivityTaskValidateBeforeCall(xAmzTarget, getActivityTaskInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetActivityTaskOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Used by workers to retrieve a task (with the specified activity ARN) which has been scheduled for execution by a running state machine. This initiates a long poll, where the service holds the HTTP connection open and responds as soon as a task becomes available (i.e. an execution of a task of this type is needed.) The maximum time the service holds on to the request before responding is 60 seconds. If no task is available within 60 seconds, the poll returns a &lt;code&gt;taskToken&lt;/code&gt; with a null string.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API action isn&#39;t logged in CloudTrail.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Workers should set their client side socket timeout to at least 65 seconds (5 seconds higher than the maximum time the service may hold the poll request).&lt;/p&gt; &lt;p&gt;Polling with &lt;code&gt;GetActivityTask&lt;/code&gt; can cause latency in some implementations. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html\&quot;&gt;Avoid Latency When Polling for Activity Tasks&lt;/a&gt; in the Step Functions Developer Guide.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param getActivityTaskInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActivityDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActivityWorkerLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivityTaskAsync(String xAmzTarget, GetActivityTaskInput getActivityTaskInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetActivityTaskOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActivityTaskValidateBeforeCall(xAmzTarget, getActivityTaskInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetActivityTaskOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExecutionHistory
     * @param xAmzTarget  (required)
     * @param getExecutionHistoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExecutionHistoryCall(String xAmzTarget, GetExecutionHistoryInput getExecutionHistoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getExecutionHistoryInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.GetExecutionHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExecutionHistoryValidateBeforeCall(String xAmzTarget, GetExecutionHistoryInput getExecutionHistoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getExecutionHistory(Async)");
        }

        // verify the required parameter 'getExecutionHistoryInput' is set
        if (getExecutionHistoryInput == null) {
            throw new ApiException("Missing the required parameter 'getExecutionHistoryInput' when calling getExecutionHistory(Async)");
        }

        return getExecutionHistoryCall(xAmzTarget, getExecutionHistoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the history of the specified execution as a list of events. By default, the results are returned in ascending order of the &lt;code&gt;timeStamp&lt;/code&gt; of the events. Use the &lt;code&gt;reverseOrder&lt;/code&gt; parameter to get the latest events first.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getExecutionHistoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return GetExecutionHistoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public GetExecutionHistoryOutput getExecutionHistory(String xAmzTarget, GetExecutionHistoryInput getExecutionHistoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<GetExecutionHistoryOutput> localVarResp = getExecutionHistoryWithHttpInfo(xAmzTarget, getExecutionHistoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the history of the specified execution as a list of events. By default, the results are returned in ascending order of the &lt;code&gt;timeStamp&lt;/code&gt; of the events. Use the &lt;code&gt;reverseOrder&lt;/code&gt; parameter to get the latest events first.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getExecutionHistoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;GetExecutionHistoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetExecutionHistoryOutput> getExecutionHistoryWithHttpInfo(String xAmzTarget, GetExecutionHistoryInput getExecutionHistoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getExecutionHistoryValidateBeforeCall(xAmzTarget, getExecutionHistoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<GetExecutionHistoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the history of the specified execution as a list of events. By default, the results are returned in ascending order of the &lt;code&gt;timeStamp&lt;/code&gt; of the events. Use the &lt;code&gt;reverseOrder&lt;/code&gt; parameter to get the latest events first.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getExecutionHistoryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExecutionHistoryAsync(String xAmzTarget, GetExecutionHistoryInput getExecutionHistoryInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<GetExecutionHistoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExecutionHistoryValidateBeforeCall(xAmzTarget, getExecutionHistoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<GetExecutionHistoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActivities
     * @param xAmzTarget  (required)
     * @param listActivitiesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActivitiesCall(String xAmzTarget, ListActivitiesInput listActivitiesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listActivitiesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.ListActivities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActivitiesValidateBeforeCall(String xAmzTarget, ListActivitiesInput listActivitiesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listActivities(Async)");
        }

        // verify the required parameter 'listActivitiesInput' is set
        if (listActivitiesInput == null) {
            throw new ApiException("Missing the required parameter 'listActivitiesInput' when calling listActivities(Async)");
        }

        return listActivitiesCall(xAmzTarget, listActivitiesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the existing activities.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listActivitiesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListActivitiesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ListActivitiesOutput listActivities(String xAmzTarget, ListActivitiesInput listActivitiesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListActivitiesOutput> localVarResp = listActivitiesWithHttpInfo(xAmzTarget, listActivitiesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the existing activities.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listActivitiesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListActivitiesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListActivitiesOutput> listActivitiesWithHttpInfo(String xAmzTarget, ListActivitiesInput listActivitiesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listActivitiesValidateBeforeCall(xAmzTarget, listActivitiesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListActivitiesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the existing activities.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listActivitiesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActivitiesAsync(String xAmzTarget, ListActivitiesInput listActivitiesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListActivitiesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActivitiesValidateBeforeCall(xAmzTarget, listActivitiesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListActivitiesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listExecutions
     * @param xAmzTarget  (required)
     * @param listExecutionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExecutionsCall(String xAmzTarget, ListExecutionsInput listExecutionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listExecutionsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.ListExecutions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExecutionsValidateBeforeCall(String xAmzTarget, ListExecutionsInput listExecutionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listExecutions(Async)");
        }

        // verify the required parameter 'listExecutionsInput' is set
        if (listExecutionsInput == null) {
            throw new ApiException("Missing the required parameter 'listExecutionsInput' when calling listExecutions(Async)");
        }

        return listExecutionsCall(xAmzTarget, listExecutionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all executions of a state machine or a Map Run. You can list all executions related to a state machine by specifying a state machine Amazon Resource Name (ARN), or those related to a Map Run by specifying a Map Run ARN.&lt;/p&gt; &lt;p&gt;You can also provide a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; ARN or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt; ARN to list the executions associated with a specific alias or version.&lt;/p&gt; &lt;p&gt;Results are sorted by time, with the most recent execution first.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listExecutionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListExecutionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ListExecutionsOutput listExecutions(String xAmzTarget, ListExecutionsInput listExecutionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListExecutionsOutput> localVarResp = listExecutionsWithHttpInfo(xAmzTarget, listExecutionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all executions of a state machine or a Map Run. You can list all executions related to a state machine by specifying a state machine Amazon Resource Name (ARN), or those related to a Map Run by specifying a Map Run ARN.&lt;/p&gt; &lt;p&gt;You can also provide a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; ARN or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt; ARN to list the executions associated with a specific alias or version.&lt;/p&gt; &lt;p&gt;Results are sorted by time, with the most recent execution first.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listExecutionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListExecutionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListExecutionsOutput> listExecutionsWithHttpInfo(String xAmzTarget, ListExecutionsInput listExecutionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listExecutionsValidateBeforeCall(xAmzTarget, listExecutionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListExecutionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all executions of a state machine or a Map Run. You can list all executions related to a state machine by specifying a state machine Amazon Resource Name (ARN), or those related to a Map Run by specifying a Map Run ARN.&lt;/p&gt; &lt;p&gt;You can also provide a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; ARN or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt; ARN to list the executions associated with a specific alias or version.&lt;/p&gt; &lt;p&gt;Results are sorted by time, with the most recent execution first.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listExecutionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExecutionsAsync(String xAmzTarget, ListExecutionsInput listExecutionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListExecutionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExecutionsValidateBeforeCall(xAmzTarget, listExecutionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListExecutionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMapRuns
     * @param xAmzTarget  (required)
     * @param listMapRunsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMapRunsCall(String xAmzTarget, ListMapRunsInput listMapRunsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listMapRunsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.ListMapRuns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMapRunsValidateBeforeCall(String xAmzTarget, ListMapRunsInput listMapRunsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listMapRuns(Async)");
        }

        // verify the required parameter 'listMapRunsInput' is set
        if (listMapRunsInput == null) {
            throw new ApiException("Missing the required parameter 'listMapRunsInput' when calling listMapRuns(Async)");
        }

        return listMapRunsCall(xAmzTarget, listMapRunsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists all Map Runs that were started by a given state machine execution. Use this API action to obtain Map Run ARNs, and then call &lt;code&gt;DescribeMapRun&lt;/code&gt; to obtain more information, if needed.
     * @param xAmzTarget  (required)
     * @param listMapRunsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListMapRunsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ListMapRunsOutput listMapRuns(String xAmzTarget, ListMapRunsInput listMapRunsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListMapRunsOutput> localVarResp = listMapRunsWithHttpInfo(xAmzTarget, listMapRunsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all Map Runs that were started by a given state machine execution. Use this API action to obtain Map Run ARNs, and then call &lt;code&gt;DescribeMapRun&lt;/code&gt; to obtain more information, if needed.
     * @param xAmzTarget  (required)
     * @param listMapRunsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListMapRunsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMapRunsOutput> listMapRunsWithHttpInfo(String xAmzTarget, ListMapRunsInput listMapRunsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listMapRunsValidateBeforeCall(xAmzTarget, listMapRunsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListMapRunsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all Map Runs that were started by a given state machine execution. Use this API action to obtain Map Run ARNs, and then call &lt;code&gt;DescribeMapRun&lt;/code&gt; to obtain more information, if needed.
     * @param xAmzTarget  (required)
     * @param listMapRunsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMapRunsAsync(String xAmzTarget, ListMapRunsInput listMapRunsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListMapRunsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMapRunsValidateBeforeCall(xAmzTarget, listMapRunsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListMapRunsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStateMachineAliases
     * @param xAmzTarget  (required)
     * @param listStateMachineAliasesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStateMachineAliasesCall(String xAmzTarget, ListStateMachineAliasesInput listStateMachineAliasesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStateMachineAliasesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.ListStateMachineAliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStateMachineAliasesValidateBeforeCall(String xAmzTarget, ListStateMachineAliasesInput listStateMachineAliasesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listStateMachineAliases(Async)");
        }

        // verify the required parameter 'listStateMachineAliasesInput' is set
        if (listStateMachineAliasesInput == null) {
            throw new ApiException("Missing the required parameter 'listStateMachineAliasesInput' when calling listStateMachineAliases(Async)");
        }

        return listStateMachineAliasesCall(xAmzTarget, listStateMachineAliasesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;aliases&lt;/a&gt; for a specified state machine ARN. Results are sorted by time, with the most recently created aliases listed first. &lt;/p&gt; &lt;p&gt;To list aliases that reference a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;, you can specify the version ARN in the &lt;code&gt;stateMachineArn&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachineAliasesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListStateMachineAliasesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
     </table>
     */
    public ListStateMachineAliasesOutput listStateMachineAliases(String xAmzTarget, ListStateMachineAliasesInput listStateMachineAliasesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListStateMachineAliasesOutput> localVarResp = listStateMachineAliasesWithHttpInfo(xAmzTarget, listStateMachineAliasesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;aliases&lt;/a&gt; for a specified state machine ARN. Results are sorted by time, with the most recently created aliases listed first. &lt;/p&gt; &lt;p&gt;To list aliases that reference a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;, you can specify the version ARN in the &lt;code&gt;stateMachineArn&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachineAliasesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListStateMachineAliasesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStateMachineAliasesOutput> listStateMachineAliasesWithHttpInfo(String xAmzTarget, ListStateMachineAliasesInput listStateMachineAliasesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listStateMachineAliasesValidateBeforeCall(xAmzTarget, listStateMachineAliasesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListStateMachineAliasesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;aliases&lt;/a&gt; for a specified state machine ARN. Results are sorted by time, with the most recently created aliases listed first. &lt;/p&gt; &lt;p&gt;To list aliases that reference a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;, you can specify the version ARN in the &lt;code&gt;stateMachineArn&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;UpdateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachineAliasesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStateMachineAliasesAsync(String xAmzTarget, ListStateMachineAliasesInput listStateMachineAliasesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListStateMachineAliasesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStateMachineAliasesValidateBeforeCall(xAmzTarget, listStateMachineAliasesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListStateMachineAliasesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStateMachineVersions
     * @param xAmzTarget  (required)
     * @param listStateMachineVersionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStateMachineVersionsCall(String xAmzTarget, ListStateMachineVersionsInput listStateMachineVersionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStateMachineVersionsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.ListStateMachineVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStateMachineVersionsValidateBeforeCall(String xAmzTarget, ListStateMachineVersionsInput listStateMachineVersionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listStateMachineVersions(Async)");
        }

        // verify the required parameter 'listStateMachineVersionsInput' is set
        if (listStateMachineVersionsInput == null) {
            throw new ApiException("Missing the required parameter 'listStateMachineVersionsInput' when calling listStateMachineVersions(Async)");
        }

        return listStateMachineVersionsCall(xAmzTarget, listStateMachineVersionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; for the specified state machine Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;The results are sorted in descending order of the version creation time.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;PublishStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachineVersionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListStateMachineVersionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ListStateMachineVersionsOutput listStateMachineVersions(String xAmzTarget, ListStateMachineVersionsInput listStateMachineVersionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListStateMachineVersionsOutput> localVarResp = listStateMachineVersionsWithHttpInfo(xAmzTarget, listStateMachineVersionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; for the specified state machine Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;The results are sorted in descending order of the version creation time.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;PublishStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachineVersionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListStateMachineVersionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStateMachineVersionsOutput> listStateMachineVersionsWithHttpInfo(String xAmzTarget, ListStateMachineVersionsInput listStateMachineVersionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listStateMachineVersionsValidateBeforeCall(xAmzTarget, listStateMachineVersionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListStateMachineVersionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;versions&lt;/a&gt; for the specified state machine Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;The results are sorted in descending order of the version creation time.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;PublishStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachineVersionsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStateMachineVersionsAsync(String xAmzTarget, ListStateMachineVersionsInput listStateMachineVersionsInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListStateMachineVersionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStateMachineVersionsValidateBeforeCall(xAmzTarget, listStateMachineVersionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListStateMachineVersionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStateMachines
     * @param xAmzTarget  (required)
     * @param listStateMachinesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStateMachinesCall(String xAmzTarget, ListStateMachinesInput listStateMachinesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStateMachinesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.ListStateMachines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStateMachinesValidateBeforeCall(String xAmzTarget, ListStateMachinesInput listStateMachinesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listStateMachines(Async)");
        }

        // verify the required parameter 'listStateMachinesInput' is set
        if (listStateMachinesInput == null) {
            throw new ApiException("Missing the required parameter 'listStateMachinesInput' when calling listStateMachines(Async)");
        }

        return listStateMachinesCall(xAmzTarget, listStateMachinesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the existing state machines.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachinesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListStateMachinesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ListStateMachinesOutput listStateMachines(String xAmzTarget, ListStateMachinesInput listStateMachinesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListStateMachinesOutput> localVarResp = listStateMachinesWithHttpInfo(xAmzTarget, listStateMachinesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the existing state machines.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachinesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListStateMachinesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStateMachinesOutput> listStateMachinesWithHttpInfo(String xAmzTarget, ListStateMachinesInput listStateMachinesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listStateMachinesValidateBeforeCall(xAmzTarget, listStateMachinesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListStateMachinesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the existing state machines.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;nextToken&lt;/code&gt; is returned, there are more results available. The value of &lt;code&gt;nextToken&lt;/code&gt; is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an &lt;i&gt;HTTP 400 InvalidToken&lt;/i&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listStateMachinesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStateMachinesAsync(String xAmzTarget, ListStateMachinesInput listStateMachinesInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListStateMachinesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStateMachinesValidateBeforeCall(xAmzTarget, listStateMachinesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListStateMachinesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceInput' is set
        if (listTagsForResourceInput == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceInput' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;List tags for a given resource.&lt;/p&gt; &lt;p&gt;Tags may only contain Unicode letters, digits, white space, or these symbols: &lt;code&gt;_ . : / &#x3D; + - @&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceOutput listTagsForResource(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceOutput> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List tags for a given resource.&lt;/p&gt; &lt;p&gt;Tags may only contain Unicode letters, digits, white space, or these symbols: &lt;code&gt;_ . : / &#x3D; + - @&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceOutput> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List tags for a given resource.&lt;/p&gt; &lt;p&gt;Tags may only contain Unicode letters, digits, white space, or these symbols: &lt;code&gt;_ . : / &#x3D; + - @&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceInput listTagsForResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishStateMachineVersion
     * @param xAmzTarget  (required)
     * @param publishStateMachineVersionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishStateMachineVersionCall(String xAmzTarget, PublishStateMachineVersionInput publishStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishStateMachineVersionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.PublishStateMachineVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishStateMachineVersionValidateBeforeCall(String xAmzTarget, PublishStateMachineVersionInput publishStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling publishStateMachineVersion(Async)");
        }

        // verify the required parameter 'publishStateMachineVersionInput' is set
        if (publishStateMachineVersionInput == null) {
            throw new ApiException("Missing the required parameter 'publishStateMachineVersionInput' when calling publishStateMachineVersion(Async)");
        }

        return publishStateMachineVersionCall(xAmzTarget, publishStateMachineVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt; from the current revision of a state machine. Use versions to create immutable snapshots of your state machine. You can start executions from versions either directly or with an alias. To create an alias, use &lt;a&gt;CreateStateMachineAlias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish up to 1000 versions for each state machine. You must manually delete unused versions using the &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; API action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PublishStateMachineVersion&lt;/code&gt; is an idempotent API. It doesn&#39;t create a duplicate state machine version if it already exists for the current revision. Step Functions bases &lt;code&gt;PublishStateMachineVersion&lt;/code&gt;&#39;s idempotency check on the &lt;code&gt;stateMachineArn&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;revisionId&lt;/code&gt; parameters. Requests with the same parameters return a successful idempotent response. If you don&#39;t specify a &lt;code&gt;revisionId&lt;/code&gt;, Step Functions checks for a previously published version of the state machine&#39;s current revision.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineVersions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param publishStateMachineVersionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PublishStateMachineVersionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public PublishStateMachineVersionOutput publishStateMachineVersion(String xAmzTarget, PublishStateMachineVersionInput publishStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PublishStateMachineVersionOutput> localVarResp = publishStateMachineVersionWithHttpInfo(xAmzTarget, publishStateMachineVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt; from the current revision of a state machine. Use versions to create immutable snapshots of your state machine. You can start executions from versions either directly or with an alias. To create an alias, use &lt;a&gt;CreateStateMachineAlias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish up to 1000 versions for each state machine. You must manually delete unused versions using the &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; API action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PublishStateMachineVersion&lt;/code&gt; is an idempotent API. It doesn&#39;t create a duplicate state machine version if it already exists for the current revision. Step Functions bases &lt;code&gt;PublishStateMachineVersion&lt;/code&gt;&#39;s idempotency check on the &lt;code&gt;stateMachineArn&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;revisionId&lt;/code&gt; parameters. Requests with the same parameters return a successful idempotent response. If you don&#39;t specify a &lt;code&gt;revisionId&lt;/code&gt;, Step Functions checks for a previously published version of the state machine&#39;s current revision.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineVersions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param publishStateMachineVersionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PublishStateMachineVersionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishStateMachineVersionOutput> publishStateMachineVersionWithHttpInfo(String xAmzTarget, PublishStateMachineVersionInput publishStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = publishStateMachineVersionValidateBeforeCall(xAmzTarget, publishStateMachineVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PublishStateMachineVersionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt; from the current revision of a state machine. Use versions to create immutable snapshots of your state machine. You can start executions from versions either directly or with an alias. To create an alias, use &lt;a&gt;CreateStateMachineAlias&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish up to 1000 versions for each state machine. You must manually delete unused versions using the &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; API action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PublishStateMachineVersion&lt;/code&gt; is an idempotent API. It doesn&#39;t create a duplicate state machine version if it already exists for the current revision. Step Functions bases &lt;code&gt;PublishStateMachineVersion&lt;/code&gt;&#39;s idempotency check on the &lt;code&gt;stateMachineArn&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;revisionId&lt;/code&gt; parameters. Requests with the same parameters return a successful idempotent response. If you don&#39;t specify a &lt;code&gt;revisionId&lt;/code&gt;, Step Functions checks for a previously published version of the state machine&#39;s current revision.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineVersion&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineVersions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param publishStateMachineVersionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidArn </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishStateMachineVersionAsync(String xAmzTarget, PublishStateMachineVersionInput publishStateMachineVersionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PublishStateMachineVersionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishStateMachineVersionValidateBeforeCall(xAmzTarget, publishStateMachineVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PublishStateMachineVersionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendTaskFailure
     * @param xAmzTarget  (required)
     * @param sendTaskFailureInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTaskFailureCall(String xAmzTarget, SendTaskFailureInput sendTaskFailureInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendTaskFailureInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.SendTaskFailure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTaskFailureValidateBeforeCall(String xAmzTarget, SendTaskFailureInput sendTaskFailureInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling sendTaskFailure(Async)");
        }

        // verify the required parameter 'sendTaskFailureInput' is set
        if (sendTaskFailureInput == null) {
            throw new ApiException("Missing the required parameter 'sendTaskFailureInput' when calling sendTaskFailure(Async)");
        }

        return sendTaskFailureCall(xAmzTarget, sendTaskFailureInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report that the task identified by the &lt;code&gt;taskToken&lt;/code&gt; failed.
     * @param xAmzTarget  (required)
     * @param sendTaskFailureInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public Object sendTaskFailure(String xAmzTarget, SendTaskFailureInput sendTaskFailureInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = sendTaskFailureWithHttpInfo(xAmzTarget, sendTaskFailureInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report that the task identified by the &lt;code&gt;taskToken&lt;/code&gt; failed.
     * @param xAmzTarget  (required)
     * @param sendTaskFailureInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sendTaskFailureWithHttpInfo(String xAmzTarget, SendTaskFailureInput sendTaskFailureInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = sendTaskFailureValidateBeforeCall(xAmzTarget, sendTaskFailureInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report that the task identified by the &lt;code&gt;taskToken&lt;/code&gt; failed.
     * @param xAmzTarget  (required)
     * @param sendTaskFailureInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTaskFailureAsync(String xAmzTarget, SendTaskFailureInput sendTaskFailureInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTaskFailureValidateBeforeCall(xAmzTarget, sendTaskFailureInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendTaskHeartbeat
     * @param xAmzTarget  (required)
     * @param sendTaskHeartbeatInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTaskHeartbeatCall(String xAmzTarget, SendTaskHeartbeatInput sendTaskHeartbeatInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendTaskHeartbeatInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.SendTaskHeartbeat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTaskHeartbeatValidateBeforeCall(String xAmzTarget, SendTaskHeartbeatInput sendTaskHeartbeatInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling sendTaskHeartbeat(Async)");
        }

        // verify the required parameter 'sendTaskHeartbeatInput' is set
        if (sendTaskHeartbeatInput == null) {
            throw new ApiException("Missing the required parameter 'sendTaskHeartbeatInput' when calling sendTaskHeartbeat(Async)");
        }

        return sendTaskHeartbeatCall(xAmzTarget, sendTaskHeartbeatInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report to Step Functions that the task represented by the specified &lt;code&gt;taskToken&lt;/code&gt; is still making progress. This action resets the &lt;code&gt;Heartbeat&lt;/code&gt; clock. The &lt;code&gt;Heartbeat&lt;/code&gt; threshold is specified in the state machine&#39;s Amazon States Language definition (&lt;code&gt;HeartbeatSeconds&lt;/code&gt;). This action does not in itself create an event in the execution history. However, if the task times out, the execution history contains an &lt;code&gt;ActivityTimedOut&lt;/code&gt; entry for activities, or a &lt;code&gt;TaskTimedOut&lt;/code&gt; entry for for tasks using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync\&quot;&gt;job run&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;Timeout&lt;/code&gt; of a task, defined in the state machine&#39;s Amazon States Language definition, is its maximum allowed duration, regardless of the number of &lt;a&gt;SendTaskHeartbeat&lt;/a&gt; requests received. Use &lt;code&gt;HeartbeatSeconds&lt;/code&gt; to configure the timeout interval for heartbeats.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param sendTaskHeartbeatInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public Object sendTaskHeartbeat(String xAmzTarget, SendTaskHeartbeatInput sendTaskHeartbeatInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = sendTaskHeartbeatWithHttpInfo(xAmzTarget, sendTaskHeartbeatInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report to Step Functions that the task represented by the specified &lt;code&gt;taskToken&lt;/code&gt; is still making progress. This action resets the &lt;code&gt;Heartbeat&lt;/code&gt; clock. The &lt;code&gt;Heartbeat&lt;/code&gt; threshold is specified in the state machine&#39;s Amazon States Language definition (&lt;code&gt;HeartbeatSeconds&lt;/code&gt;). This action does not in itself create an event in the execution history. However, if the task times out, the execution history contains an &lt;code&gt;ActivityTimedOut&lt;/code&gt; entry for activities, or a &lt;code&gt;TaskTimedOut&lt;/code&gt; entry for for tasks using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync\&quot;&gt;job run&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;Timeout&lt;/code&gt; of a task, defined in the state machine&#39;s Amazon States Language definition, is its maximum allowed duration, regardless of the number of &lt;a&gt;SendTaskHeartbeat&lt;/a&gt; requests received. Use &lt;code&gt;HeartbeatSeconds&lt;/code&gt; to configure the timeout interval for heartbeats.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param sendTaskHeartbeatInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sendTaskHeartbeatWithHttpInfo(String xAmzTarget, SendTaskHeartbeatInput sendTaskHeartbeatInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = sendTaskHeartbeatValidateBeforeCall(xAmzTarget, sendTaskHeartbeatInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report to Step Functions that the task represented by the specified &lt;code&gt;taskToken&lt;/code&gt; is still making progress. This action resets the &lt;code&gt;Heartbeat&lt;/code&gt; clock. The &lt;code&gt;Heartbeat&lt;/code&gt; threshold is specified in the state machine&#39;s Amazon States Language definition (&lt;code&gt;HeartbeatSeconds&lt;/code&gt;). This action does not in itself create an event in the execution history. However, if the task times out, the execution history contains an &lt;code&gt;ActivityTimedOut&lt;/code&gt; entry for activities, or a &lt;code&gt;TaskTimedOut&lt;/code&gt; entry for for tasks using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync\&quot;&gt;job run&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;Timeout&lt;/code&gt; of a task, defined in the state machine&#39;s Amazon States Language definition, is its maximum allowed duration, regardless of the number of &lt;a&gt;SendTaskHeartbeat&lt;/a&gt; requests received. Use &lt;code&gt;HeartbeatSeconds&lt;/code&gt; to configure the timeout interval for heartbeats.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param sendTaskHeartbeatInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTaskHeartbeatAsync(String xAmzTarget, SendTaskHeartbeatInput sendTaskHeartbeatInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTaskHeartbeatValidateBeforeCall(xAmzTarget, sendTaskHeartbeatInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendTaskSuccess
     * @param xAmzTarget  (required)
     * @param sendTaskSuccessInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOutput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTaskSuccessCall(String xAmzTarget, SendTaskSuccessInput sendTaskSuccessInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendTaskSuccessInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.SendTaskSuccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTaskSuccessValidateBeforeCall(String xAmzTarget, SendTaskSuccessInput sendTaskSuccessInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling sendTaskSuccess(Async)");
        }

        // verify the required parameter 'sendTaskSuccessInput' is set
        if (sendTaskSuccessInput == null) {
            throw new ApiException("Missing the required parameter 'sendTaskSuccessInput' when calling sendTaskSuccess(Async)");
        }

        return sendTaskSuccessCall(xAmzTarget, sendTaskSuccessInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report that the task identified by the &lt;code&gt;taskToken&lt;/code&gt; completed successfully.
     * @param xAmzTarget  (required)
     * @param sendTaskSuccessInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOutput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public Object sendTaskSuccess(String xAmzTarget, SendTaskSuccessInput sendTaskSuccessInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = sendTaskSuccessWithHttpInfo(xAmzTarget, sendTaskSuccessInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report that the task identified by the &lt;code&gt;taskToken&lt;/code&gt; completed successfully.
     * @param xAmzTarget  (required)
     * @param sendTaskSuccessInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOutput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sendTaskSuccessWithHttpInfo(String xAmzTarget, SendTaskSuccessInput sendTaskSuccessInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = sendTaskSuccessValidateBeforeCall(xAmzTarget, sendTaskSuccessInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Used by activity workers and task states using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\&quot;&gt;callback&lt;/a&gt; pattern to report that the task identified by the &lt;code&gt;taskToken&lt;/code&gt; completed successfully.
     * @param xAmzTarget  (required)
     * @param sendTaskSuccessInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TaskDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOutput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidToken </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TaskTimedOut </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTaskSuccessAsync(String xAmzTarget, SendTaskSuccessInput sendTaskSuccessInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTaskSuccessValidateBeforeCall(xAmzTarget, sendTaskSuccessInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startExecution
     * @param xAmzTarget  (required)
     * @param startExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExecutionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidExecutionInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startExecutionCall(String xAmzTarget, StartExecutionInput startExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startExecutionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.StartExecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startExecutionValidateBeforeCall(String xAmzTarget, StartExecutionInput startExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startExecution(Async)");
        }

        // verify the required parameter 'startExecutionInput' is set
        if (startExecutionInput == null) {
            throw new ApiException("Missing the required parameter 'startExecutionInput' when calling startExecution(Async)");
        }

        return startExecutionCall(xAmzTarget, startExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts a state machine execution.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you start an execution with an unqualified state machine ARN, Step Functions uses the latest revision of the state machine for the execution.&lt;/p&gt; &lt;p&gt;To start executions of a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;, call &lt;code&gt;StartExecution&lt;/code&gt; and provide the version ARN or the ARN of an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; that points to the version.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;StartExecution&lt;/code&gt; is idempotent for &lt;code&gt;STANDARD&lt;/code&gt; workflows. For a &lt;code&gt;STANDARD&lt;/code&gt; workflow, if you call &lt;code&gt;StartExecution&lt;/code&gt; with the same name and input as a running execution, the call succeeds and return the same response as the original request. If the execution is closed or if the input is different, it returns a &lt;code&gt;400 ExecutionAlreadyExists&lt;/code&gt; error. You can reuse names after 90 days. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExecution&lt;/code&gt; isn&#39;t idempotent for &lt;code&gt;EXPRESS&lt;/code&gt; workflows. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartExecutionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExecutionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidExecutionInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public StartExecutionOutput startExecution(String xAmzTarget, StartExecutionInput startExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartExecutionOutput> localVarResp = startExecutionWithHttpInfo(xAmzTarget, startExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts a state machine execution.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you start an execution with an unqualified state machine ARN, Step Functions uses the latest revision of the state machine for the execution.&lt;/p&gt; &lt;p&gt;To start executions of a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;, call &lt;code&gt;StartExecution&lt;/code&gt; and provide the version ARN or the ARN of an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; that points to the version.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;StartExecution&lt;/code&gt; is idempotent for &lt;code&gt;STANDARD&lt;/code&gt; workflows. For a &lt;code&gt;STANDARD&lt;/code&gt; workflow, if you call &lt;code&gt;StartExecution&lt;/code&gt; with the same name and input as a running execution, the call succeeds and return the same response as the original request. If the execution is closed or if the input is different, it returns a &lt;code&gt;400 ExecutionAlreadyExists&lt;/code&gt; error. You can reuse names after 90 days. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExecution&lt;/code&gt; isn&#39;t idempotent for &lt;code&gt;EXPRESS&lt;/code&gt; workflows. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartExecutionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExecutionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidExecutionInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartExecutionOutput> startExecutionWithHttpInfo(String xAmzTarget, StartExecutionInput startExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startExecutionValidateBeforeCall(xAmzTarget, startExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartExecutionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts a state machine execution.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you start an execution with an unqualified state machine ARN, Step Functions uses the latest revision of the state machine for the execution.&lt;/p&gt; &lt;p&gt;To start executions of a state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;, call &lt;code&gt;StartExecution&lt;/code&gt; and provide the version ARN or the ARN of an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; that points to the version.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;StartExecution&lt;/code&gt; is idempotent for &lt;code&gt;STANDARD&lt;/code&gt; workflows. For a &lt;code&gt;STANDARD&lt;/code&gt; workflow, if you call &lt;code&gt;StartExecution&lt;/code&gt; with the same name and input as a running execution, the call succeeds and return the same response as the original request. If the execution is closed or if the input is different, it returns a &lt;code&gt;400 ExecutionAlreadyExists&lt;/code&gt; error. You can reuse names after 90 days. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExecution&lt;/code&gt; isn&#39;t idempotent for &lt;code&gt;EXPRESS&lt;/code&gt; workflows. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExecutionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidExecutionInput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startExecutionAsync(String xAmzTarget, StartExecutionInput startExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartExecutionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = startExecutionValidateBeforeCall(xAmzTarget, startExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartExecutionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startSyncExecution
     * @param xAmzTarget  (required)
     * @param startSyncExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidExecutionInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSyncExecutionCall(String xAmzTarget, StartSyncExecutionInput startSyncExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startSyncExecutionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.StartSyncExecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startSyncExecutionValidateBeforeCall(String xAmzTarget, StartSyncExecutionInput startSyncExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startSyncExecution(Async)");
        }

        // verify the required parameter 'startSyncExecutionInput' is set
        if (startSyncExecutionInput == null) {
            throw new ApiException("Missing the required parameter 'startSyncExecutionInput' when calling startSyncExecution(Async)");
        }

        return startSyncExecutionCall(xAmzTarget, startSyncExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts a Synchronous Express state machine execution. &lt;code&gt;StartSyncExecution&lt;/code&gt; is not available for &lt;code&gt;STANDARD&lt;/code&gt; workflows.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;StartSyncExecution&lt;/code&gt; will return a &lt;code&gt;200 OK&lt;/code&gt; response, even if your execution fails, because the status code in the API response doesn&#39;t reflect function errors. Error codes are reserved for errors that prevent your execution from running, such as permissions errors, limit errors, or issues with your state machine code and configuration. &lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This API action isn&#39;t logged in CloudTrail.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startSyncExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartSyncExecutionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidExecutionInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
     </table>
     */
    public StartSyncExecutionOutput startSyncExecution(String xAmzTarget, StartSyncExecutionInput startSyncExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartSyncExecutionOutput> localVarResp = startSyncExecutionWithHttpInfo(xAmzTarget, startSyncExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts a Synchronous Express state machine execution. &lt;code&gt;StartSyncExecution&lt;/code&gt; is not available for &lt;code&gt;STANDARD&lt;/code&gt; workflows.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;StartSyncExecution&lt;/code&gt; will return a &lt;code&gt;200 OK&lt;/code&gt; response, even if your execution fails, because the status code in the API response doesn&#39;t reflect function errors. Error codes are reserved for errors that prevent your execution from running, such as permissions errors, limit errors, or issues with your state machine code and configuration. &lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This API action isn&#39;t logged in CloudTrail.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startSyncExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartSyncExecutionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidExecutionInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartSyncExecutionOutput> startSyncExecutionWithHttpInfo(String xAmzTarget, StartSyncExecutionInput startSyncExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startSyncExecutionValidateBeforeCall(xAmzTarget, startSyncExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartSyncExecutionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts a Synchronous Express state machine execution. &lt;code&gt;StartSyncExecution&lt;/code&gt; is not available for &lt;code&gt;STANDARD&lt;/code&gt; workflows.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;StartSyncExecution&lt;/code&gt; will return a &lt;code&gt;200 OK&lt;/code&gt; response, even if your execution fails, because the status code in the API response doesn&#39;t reflect function errors. Error codes are reserved for errors that prevent your execution from running, such as permissions errors, limit errors, or issues with your state machine code and configuration. &lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This API action isn&#39;t logged in CloudTrail.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startSyncExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidExecutionInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidName </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineTypeNotSupported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSyncExecutionAsync(String xAmzTarget, StartSyncExecutionInput startSyncExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartSyncExecutionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = startSyncExecutionValidateBeforeCall(xAmzTarget, startSyncExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartSyncExecutionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopExecution
     * @param xAmzTarget  (required)
     * @param stopExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopExecutionCall(String xAmzTarget, StopExecutionInput stopExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopExecutionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.StopExecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopExecutionValidateBeforeCall(String xAmzTarget, StopExecutionInput stopExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling stopExecution(Async)");
        }

        // verify the required parameter 'stopExecutionInput' is set
        if (stopExecutionInput == null) {
            throw new ApiException("Missing the required parameter 'stopExecutionInput' when calling stopExecution(Async)");
        }

        return stopExecutionCall(xAmzTarget, stopExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Stops an execution.&lt;/p&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param stopExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StopExecutionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public StopExecutionOutput stopExecution(String xAmzTarget, StopExecutionInput stopExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StopExecutionOutput> localVarResp = stopExecutionWithHttpInfo(xAmzTarget, stopExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Stops an execution.&lt;/p&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param stopExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StopExecutionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopExecutionOutput> stopExecutionWithHttpInfo(String xAmzTarget, StopExecutionInput stopExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = stopExecutionValidateBeforeCall(xAmzTarget, stopExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StopExecutionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Stops an execution.&lt;/p&gt; &lt;p&gt;This API action is not supported by &lt;code&gt;EXPRESS&lt;/code&gt; state machines.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param stopExecutionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExecutionDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopExecutionAsync(String xAmzTarget, StopExecutionInput stopExecutionInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StopExecutionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopExecutionValidateBeforeCall(xAmzTarget, stopExecutionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StopExecutionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceInput' is set
        if (tagResourceInput == null) {
            throw new ApiException("Missing the required parameter 'tagResourceInput' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Add a tag to a Step Functions resource.&lt;/p&gt; &lt;p&gt;An array of key-value pairs. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Billing and Cost Management User Guide&lt;/i&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html\&quot;&gt;Controlling Access Using IAM Tags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Tags may only contain Unicode letters, digits, white space, or these symbols: &lt;code&gt;_ . : / &#x3D; + - @&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTags </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Add a tag to a Step Functions resource.&lt;/p&gt; &lt;p&gt;An array of key-value pairs. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Billing and Cost Management User Guide&lt;/i&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html\&quot;&gt;Controlling Access Using IAM Tags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Tags may only contain Unicode letters, digits, white space, or these symbols: &lt;code&gt;_ . : / &#x3D; + - @&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Add a tag to a Step Functions resource.&lt;/p&gt; &lt;p&gt;An array of key-value pairs. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Billing and Cost Management User Guide&lt;/i&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html\&quot;&gt;Controlling Access Using IAM Tags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Tags may only contain Unicode letters, digits, white space, or these symbols: &lt;code&gt;_ . : / &#x3D; + - @&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceInput tagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceInput' is set
        if (untagResourceInput == null) {
            throw new ApiException("Missing the required parameter 'untagResourceInput' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Remove a tag from a Step Functions resource
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a tag from a Step Functions resource
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a tag from a Step Functions resource
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceInput untagResourceInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMapRun
     * @param xAmzTarget  (required)
     * @param updateMapRunInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMapRunCall(String xAmzTarget, UpdateMapRunInput updateMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMapRunInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.UpdateMapRun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMapRunValidateBeforeCall(String xAmzTarget, UpdateMapRunInput updateMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateMapRun(Async)");
        }

        // verify the required parameter 'updateMapRunInput' is set
        if (updateMapRunInput == null) {
            throw new ApiException("Missing the required parameter 'updateMapRunInput' when calling updateMapRun(Async)");
        }

        return updateMapRunCall(xAmzTarget, updateMapRunInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates an in-progress Map Run&#39;s configuration to include changes to the settings that control maximum concurrency and Map Run failure.
     * @param xAmzTarget  (required)
     * @param updateMapRunInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateMapRun(String xAmzTarget, UpdateMapRunInput updateMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateMapRunWithHttpInfo(xAmzTarget, updateMapRunInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an in-progress Map Run&#39;s configuration to include changes to the settings that control maximum concurrency and Map Run failure.
     * @param xAmzTarget  (required)
     * @param updateMapRunInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateMapRunWithHttpInfo(String xAmzTarget, UpdateMapRunInput updateMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateMapRunValidateBeforeCall(xAmzTarget, updateMapRunInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an in-progress Map Run&#39;s configuration to include changes to the settings that control maximum concurrency and Map Run failure.
     * @param xAmzTarget  (required)
     * @param updateMapRunInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMapRunAsync(String xAmzTarget, UpdateMapRunInput updateMapRunInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMapRunValidateBeforeCall(xAmzTarget, updateMapRunInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStateMachine
     * @param xAmzTarget  (required)
     * @param updateStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDefinition </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidLoggingConfiguration </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTracingConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingRequiredParameter </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateMachineCall(String xAmzTarget, UpdateStateMachineInput updateStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStateMachineInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.UpdateStateMachine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStateMachineValidateBeforeCall(String xAmzTarget, UpdateStateMachineInput updateStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateStateMachine(Async)");
        }

        // verify the required parameter 'updateStateMachineInput' is set
        if (updateStateMachineInput == null) {
            throw new ApiException("Missing the required parameter 'updateStateMachineInput' when calling updateStateMachine(Async)");
        }

        return updateStateMachineCall(xAmzTarget, updateStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates an existing state machine by modifying its &lt;code&gt;definition&lt;/code&gt;, &lt;code&gt;roleArn&lt;/code&gt;, or &lt;code&gt;loggingConfiguration&lt;/code&gt;. Running executions will continue to use the previous &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. You must include at least one of &lt;code&gt;definition&lt;/code&gt; or &lt;code&gt;roleArn&lt;/code&gt; or you will receive a &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine. For example, the qualified state machine ARN &lt;code&gt;arn:partition:states:region:account-id:stateMachine:stateMachineName/mapStateLabel&lt;/code&gt; refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in the state machine named &lt;code&gt;stateMachineName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you update your state machine, you can set the &lt;code&gt;publish&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; in the same action to publish a new &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;. This way, you can opt-in to strict versioning of your state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Step Functions assigns monotonically increasing integers for state machine versions, starting at version number 1.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;All &lt;code&gt;StartExecution&lt;/code&gt; calls within a few seconds use the updated &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. Executions started immediately after you call &lt;code&gt;UpdateStateMachine&lt;/code&gt; may use the previous state machine &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateStateMachineOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDefinition </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidLoggingConfiguration </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTracingConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingRequiredParameter </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStateMachineOutput updateStateMachine(String xAmzTarget, UpdateStateMachineInput updateStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateStateMachineOutput> localVarResp = updateStateMachineWithHttpInfo(xAmzTarget, updateStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates an existing state machine by modifying its &lt;code&gt;definition&lt;/code&gt;, &lt;code&gt;roleArn&lt;/code&gt;, or &lt;code&gt;loggingConfiguration&lt;/code&gt;. Running executions will continue to use the previous &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. You must include at least one of &lt;code&gt;definition&lt;/code&gt; or &lt;code&gt;roleArn&lt;/code&gt; or you will receive a &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine. For example, the qualified state machine ARN &lt;code&gt;arn:partition:states:region:account-id:stateMachine:stateMachineName/mapStateLabel&lt;/code&gt; refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in the state machine named &lt;code&gt;stateMachineName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you update your state machine, you can set the &lt;code&gt;publish&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; in the same action to publish a new &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;. This way, you can opt-in to strict versioning of your state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Step Functions assigns monotonically increasing integers for state machine versions, starting at version number 1.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;All &lt;code&gt;StartExecution&lt;/code&gt; calls within a few seconds use the updated &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. Executions started immediately after you call &lt;code&gt;UpdateStateMachine&lt;/code&gt; may use the previous state machine &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateStateMachineOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDefinition </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidLoggingConfiguration </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTracingConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingRequiredParameter </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStateMachineOutput> updateStateMachineWithHttpInfo(String xAmzTarget, UpdateStateMachineInput updateStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateStateMachineValidateBeforeCall(xAmzTarget, updateStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateStateMachineOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates an existing state machine by modifying its &lt;code&gt;definition&lt;/code&gt;, &lt;code&gt;roleArn&lt;/code&gt;, or &lt;code&gt;loggingConfiguration&lt;/code&gt;. Running executions will continue to use the previous &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. You must include at least one of &lt;code&gt;definition&lt;/code&gt; or &lt;code&gt;roleArn&lt;/code&gt; or you will receive a &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine. For example, the qualified state machine ARN &lt;code&gt;arn:partition:states:region:account-id:stateMachine:stateMachineName/mapStateLabel&lt;/code&gt; refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in the state machine named &lt;code&gt;stateMachineName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A qualified state machine ARN can either refer to a &lt;i&gt;Distributed Map state&lt;/i&gt; defined within a state machine, a version ARN, or an alias ARN.&lt;/p&gt; &lt;p&gt;The following are some examples of qualified and unqualified state machine ARNs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to a &lt;i&gt;Distributed Map state&lt;/i&gt; with a label &lt;code&gt;mapStateLabel&lt;/code&gt; in a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a &lt;i&gt;Distributed Map state&lt;/i&gt;, the request fails with &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following qualified state machine ARN refers to an alias named &lt;code&gt;PROD&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine:PROD&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following unqualified state machine ARN refers to a state machine named &lt;code&gt;myStateMachine&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:&amp;lt;partition&amp;gt;:states:&amp;lt;region&amp;gt;:&amp;lt;account-id&amp;gt;:stateMachine:&amp;lt;myStateMachine&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you update your state machine, you can set the &lt;code&gt;publish&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; in the same action to publish a new &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\&quot;&gt;version&lt;/a&gt;. This way, you can opt-in to strict versioning of your state machine.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Step Functions assigns monotonically increasing integers for state machine versions, starting at version number 1.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;All &lt;code&gt;StartExecution&lt;/code&gt; calls within a few seconds use the updated &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. Executions started immediately after you call &lt;code&gt;UpdateStateMachine&lt;/code&gt; may use the previous state machine &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;roleArn&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateStateMachineInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDefinition </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidLoggingConfiguration </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTracingConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingRequiredParameter </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StateMachineDeleting </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StateMachineDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateMachineAsync(String xAmzTarget, UpdateStateMachineInput updateStateMachineInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateStateMachineOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStateMachineValidateBeforeCall(xAmzTarget, updateStateMachineInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateStateMachineOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStateMachineAlias
     * @param xAmzTarget  (required)
     * @param updateStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateMachineAliasCall(String xAmzTarget, UpdateStateMachineAliasInput updateStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStateMachineAliasInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSStepFunctions.UpdateStateMachineAlias";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStateMachineAliasValidateBeforeCall(String xAmzTarget, UpdateStateMachineAliasInput updateStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateStateMachineAlias(Async)");
        }

        // verify the required parameter 'updateStateMachineAliasInput' is set
        if (updateStateMachineAliasInput == null) {
            throw new ApiException("Missing the required parameter 'updateStateMachineAliasInput' when calling updateStateMachineAlias(Async)");
        }

        return updateStateMachineAliasCall(xAmzTarget, updateStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the configuration of an existing state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; by modifying its &lt;code&gt;description&lt;/code&gt; or &lt;code&gt;routingConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You must specify at least one of the &lt;code&gt;description&lt;/code&gt; or &lt;code&gt;routingConfiguration&lt;/code&gt; parameters to update a state machine alias.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;UpdateStateMachineAlias&lt;/code&gt; is an idempotent API. Step Functions bases the idempotency check on the &lt;code&gt;stateMachineAliasArn&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;routingConfiguration&lt;/code&gt; parameters. Requests with the same parameters return an idempotent response.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. All &lt;a&gt;StartExecution&lt;/a&gt; requests made within a few seconds use the latest alias configuration. Executions started immediately after calling &lt;code&gt;UpdateStateMachineAlias&lt;/code&gt; may use the previous routing configuration.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateStateMachineAliasOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStateMachineAliasOutput updateStateMachineAlias(String xAmzTarget, UpdateStateMachineAliasInput updateStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateStateMachineAliasOutput> localVarResp = updateStateMachineAliasWithHttpInfo(xAmzTarget, updateStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the configuration of an existing state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; by modifying its &lt;code&gt;description&lt;/code&gt; or &lt;code&gt;routingConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You must specify at least one of the &lt;code&gt;description&lt;/code&gt; or &lt;code&gt;routingConfiguration&lt;/code&gt; parameters to update a state machine alias.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;UpdateStateMachineAlias&lt;/code&gt; is an idempotent API. Step Functions bases the idempotency check on the &lt;code&gt;stateMachineAliasArn&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;routingConfiguration&lt;/code&gt; parameters. Requests with the same parameters return an idempotent response.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. All &lt;a&gt;StartExecution&lt;/a&gt; requests made within a few seconds use the latest alias configuration. Executions started immediately after calling &lt;code&gt;UpdateStateMachineAlias&lt;/code&gt; may use the previous routing configuration.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateStateMachineAliasOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStateMachineAliasOutput> updateStateMachineAliasWithHttpInfo(String xAmzTarget, UpdateStateMachineAliasInput updateStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateStateMachineAliasValidateBeforeCall(xAmzTarget, updateStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateStateMachineAliasOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the configuration of an existing state machine &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html\&quot;&gt;alias&lt;/a&gt; by modifying its &lt;code&gt;description&lt;/code&gt; or &lt;code&gt;routingConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You must specify at least one of the &lt;code&gt;description&lt;/code&gt; or &lt;code&gt;routingConfiguration&lt;/code&gt; parameters to update a state machine alias.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;UpdateStateMachineAlias&lt;/code&gt; is an idempotent API. Step Functions bases the idempotency check on the &lt;code&gt;stateMachineAliasArn&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;routingConfiguration&lt;/code&gt; parameters. Requests with the same parameters return an idempotent response.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This operation is eventually consistent. All &lt;a&gt;StartExecution&lt;/a&gt; requests made within a few seconds use the latest alias configuration. Executions started immediately after calling &lt;code&gt;UpdateStateMachineAlias&lt;/code&gt; may use the previous routing configuration.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;Related operations:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListStateMachineAliases&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteStateMachineAlias&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateStateMachineAliasInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArn </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateMachineAliasAsync(String xAmzTarget, UpdateStateMachineAliasInput updateStateMachineAliasInput, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateStateMachineAliasOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStateMachineAliasValidateBeforeCall(xAmzTarget, updateStateMachineAliasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateStateMachineAliasOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
