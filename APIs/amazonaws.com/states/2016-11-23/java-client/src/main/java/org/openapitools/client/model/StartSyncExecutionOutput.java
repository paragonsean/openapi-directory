/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CloudWatchEventsExecutionDataDetails;
import org.openapitools.client.model.StartSyncExecutionOutputBillingDetails;
import org.openapitools.client.model.SyncExecutionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartSyncExecutionOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:37.123378-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartSyncExecutionOutput {
  public static final String SERIALIZED_NAME_EXECUTION_ARN = "executionArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ARN)
  private String executionArn;

  public static final String SERIALIZED_NAME_STATE_MACHINE_ARN = "stateMachineArn";
  @SerializedName(SERIALIZED_NAME_STATE_MACHINE_ARN)
  private String stateMachineArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STOP_DATE = "stopDate";
  @SerializedName(SERIALIZED_NAME_STOP_DATE)
  private OffsetDateTime stopDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SyncExecutionStatus status;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_CAUSE = "cause";
  @SerializedName(SERIALIZED_NAME_CAUSE)
  private String cause;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_INPUT_DETAILS = "inputDetails";
  @SerializedName(SERIALIZED_NAME_INPUT_DETAILS)
  private CloudWatchEventsExecutionDataDetails inputDetails;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private String output;

  public static final String SERIALIZED_NAME_OUTPUT_DETAILS = "outputDetails";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DETAILS)
  private CloudWatchEventsExecutionDataDetails outputDetails;

  public static final String SERIALIZED_NAME_TRACE_HEADER = "traceHeader";
  @SerializedName(SERIALIZED_NAME_TRACE_HEADER)
  private String traceHeader;

  public static final String SERIALIZED_NAME_BILLING_DETAILS = "billingDetails";
  @SerializedName(SERIALIZED_NAME_BILLING_DETAILS)
  private StartSyncExecutionOutputBillingDetails billingDetails;

  public StartSyncExecutionOutput() {
  }

  public StartSyncExecutionOutput executionArn(String executionArn) {
    this.executionArn = executionArn;
    return this;
  }

  /**
   * Get executionArn
   * @return executionArn
   */
  @javax.annotation.Nonnull
  public String getExecutionArn() {
    return executionArn;
  }

  public void setExecutionArn(String executionArn) {
    this.executionArn = executionArn;
  }


  public StartSyncExecutionOutput stateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
    return this;
  }

  /**
   * Get stateMachineArn
   * @return stateMachineArn
   */
  @javax.annotation.Nullable
  public String getStateMachineArn() {
    return stateMachineArn;
  }

  public void setStateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
  }


  public StartSyncExecutionOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartSyncExecutionOutput startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public StartSyncExecutionOutput stopDate(OffsetDateTime stopDate) {
    this.stopDate = stopDate;
    return this;
  }

  /**
   * Get stopDate
   * @return stopDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStopDate() {
    return stopDate;
  }

  public void setStopDate(OffsetDateTime stopDate) {
    this.stopDate = stopDate;
  }


  public StartSyncExecutionOutput status(SyncExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public SyncExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(SyncExecutionStatus status) {
    this.status = status;
  }


  public StartSyncExecutionOutput error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public StartSyncExecutionOutput cause(String cause) {
    this.cause = cause;
    return this;
  }

  /**
   * Get cause
   * @return cause
   */
  @javax.annotation.Nullable
  public String getCause() {
    return cause;
  }

  public void setCause(String cause) {
    this.cause = cause;
  }


  public StartSyncExecutionOutput input(String input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public StartSyncExecutionOutput inputDetails(CloudWatchEventsExecutionDataDetails inputDetails) {
    this.inputDetails = inputDetails;
    return this;
  }

  /**
   * Get inputDetails
   * @return inputDetails
   */
  @javax.annotation.Nullable
  public CloudWatchEventsExecutionDataDetails getInputDetails() {
    return inputDetails;
  }

  public void setInputDetails(CloudWatchEventsExecutionDataDetails inputDetails) {
    this.inputDetails = inputDetails;
  }


  public StartSyncExecutionOutput output(String output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public String getOutput() {
    return output;
  }

  public void setOutput(String output) {
    this.output = output;
  }


  public StartSyncExecutionOutput outputDetails(CloudWatchEventsExecutionDataDetails outputDetails) {
    this.outputDetails = outputDetails;
    return this;
  }

  /**
   * Get outputDetails
   * @return outputDetails
   */
  @javax.annotation.Nullable
  public CloudWatchEventsExecutionDataDetails getOutputDetails() {
    return outputDetails;
  }

  public void setOutputDetails(CloudWatchEventsExecutionDataDetails outputDetails) {
    this.outputDetails = outputDetails;
  }


  public StartSyncExecutionOutput traceHeader(String traceHeader) {
    this.traceHeader = traceHeader;
    return this;
  }

  /**
   * Get traceHeader
   * @return traceHeader
   */
  @javax.annotation.Nullable
  public String getTraceHeader() {
    return traceHeader;
  }

  public void setTraceHeader(String traceHeader) {
    this.traceHeader = traceHeader;
  }


  public StartSyncExecutionOutput billingDetails(StartSyncExecutionOutputBillingDetails billingDetails) {
    this.billingDetails = billingDetails;
    return this;
  }

  /**
   * Get billingDetails
   * @return billingDetails
   */
  @javax.annotation.Nullable
  public StartSyncExecutionOutputBillingDetails getBillingDetails() {
    return billingDetails;
  }

  public void setBillingDetails(StartSyncExecutionOutputBillingDetails billingDetails) {
    this.billingDetails = billingDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSyncExecutionOutput startSyncExecutionOutput = (StartSyncExecutionOutput) o;
    return Objects.equals(this.executionArn, startSyncExecutionOutput.executionArn) &&
        Objects.equals(this.stateMachineArn, startSyncExecutionOutput.stateMachineArn) &&
        Objects.equals(this.name, startSyncExecutionOutput.name) &&
        Objects.equals(this.startDate, startSyncExecutionOutput.startDate) &&
        Objects.equals(this.stopDate, startSyncExecutionOutput.stopDate) &&
        Objects.equals(this.status, startSyncExecutionOutput.status) &&
        Objects.equals(this.error, startSyncExecutionOutput.error) &&
        Objects.equals(this.cause, startSyncExecutionOutput.cause) &&
        Objects.equals(this.input, startSyncExecutionOutput.input) &&
        Objects.equals(this.inputDetails, startSyncExecutionOutput.inputDetails) &&
        Objects.equals(this.output, startSyncExecutionOutput.output) &&
        Objects.equals(this.outputDetails, startSyncExecutionOutput.outputDetails) &&
        Objects.equals(this.traceHeader, startSyncExecutionOutput.traceHeader) &&
        Objects.equals(this.billingDetails, startSyncExecutionOutput.billingDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionArn, stateMachineArn, name, startDate, stopDate, status, error, cause, input, inputDetails, output, outputDetails, traceHeader, billingDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSyncExecutionOutput {\n");
    sb.append("    executionArn: ").append(toIndentedString(executionArn)).append("\n");
    sb.append("    stateMachineArn: ").append(toIndentedString(stateMachineArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    stopDate: ").append(toIndentedString(stopDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    inputDetails: ").append(toIndentedString(inputDetails)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    outputDetails: ").append(toIndentedString(outputDetails)).append("\n");
    sb.append("    traceHeader: ").append(toIndentedString(traceHeader)).append("\n");
    sb.append("    billingDetails: ").append(toIndentedString(billingDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionArn");
    openapiFields.add("stateMachineArn");
    openapiFields.add("name");
    openapiFields.add("startDate");
    openapiFields.add("stopDate");
    openapiFields.add("status");
    openapiFields.add("error");
    openapiFields.add("cause");
    openapiFields.add("input");
    openapiFields.add("inputDetails");
    openapiFields.add("output");
    openapiFields.add("outputDetails");
    openapiFields.add("traceHeader");
    openapiFields.add("billingDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("executionArn");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("stopDate");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSyncExecutionOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSyncExecutionOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSyncExecutionOutput is not found in the empty JSON string", StartSyncExecutionOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSyncExecutionOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSyncExecutionOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartSyncExecutionOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `executionArn`
      String.validateJsonElement(jsonObj.get("executionArn"));
      // validate the optional field `stateMachineArn`
      if (jsonObj.get("stateMachineArn") != null && !jsonObj.get("stateMachineArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stateMachineArn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the required field `startDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("startDate"));
      // validate the required field `stopDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("stopDate"));
      // validate the required field `status`
      SyncExecutionStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `cause`
      if (jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cause"));
      }
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("input"));
      }
      // validate the optional field `inputDetails`
      if (jsonObj.get("inputDetails") != null && !jsonObj.get("inputDetails").isJsonNull()) {
        CloudWatchEventsExecutionDataDetails.validateJsonElement(jsonObj.get("inputDetails"));
      }
      // validate the optional field `output`
      if (jsonObj.get("output") != null && !jsonObj.get("output").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("output"));
      }
      // validate the optional field `outputDetails`
      if (jsonObj.get("outputDetails") != null && !jsonObj.get("outputDetails").isJsonNull()) {
        CloudWatchEventsExecutionDataDetails.validateJsonElement(jsonObj.get("outputDetails"));
      }
      // validate the optional field `traceHeader`
      if (jsonObj.get("traceHeader") != null && !jsonObj.get("traceHeader").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("traceHeader"));
      }
      // validate the optional field `billingDetails`
      if (jsonObj.get("billingDetails") != null && !jsonObj.get("billingDetails").isJsonNull()) {
        StartSyncExecutionOutputBillingDetails.validateJsonElement(jsonObj.get("billingDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSyncExecutionOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSyncExecutionOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSyncExecutionOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSyncExecutionOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSyncExecutionOutput>() {
           @Override
           public void write(JsonWriter out, StartSyncExecutionOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSyncExecutionOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSyncExecutionOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSyncExecutionOutput
   * @throws IOException if the JSON string is invalid with respect to StartSyncExecutionOutput
   */
  public static StartSyncExecutionOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSyncExecutionOutput.class);
  }

  /**
   * Convert an instance of StartSyncExecutionOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

