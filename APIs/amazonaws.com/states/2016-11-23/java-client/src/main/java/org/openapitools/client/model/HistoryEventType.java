/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets HistoryEventType
 */
@JsonAdapter(HistoryEventType.Adapter.class)
public enum HistoryEventType {
  
  ACTIVITY_FAILED("ActivityFailed"),
  
  ACTIVITY_SCHEDULED("ActivityScheduled"),
  
  ACTIVITY_SCHEDULE_FAILED("ActivityScheduleFailed"),
  
  ACTIVITY_STARTED("ActivityStarted"),
  
  ACTIVITY_SUCCEEDED("ActivitySucceeded"),
  
  ACTIVITY_TIMED_OUT("ActivityTimedOut"),
  
  CHOICE_STATE_ENTERED("ChoiceStateEntered"),
  
  CHOICE_STATE_EXITED("ChoiceStateExited"),
  
  EXECUTION_ABORTED("ExecutionAborted"),
  
  EXECUTION_FAILED("ExecutionFailed"),
  
  EXECUTION_STARTED("ExecutionStarted"),
  
  EXECUTION_SUCCEEDED("ExecutionSucceeded"),
  
  EXECUTION_TIMED_OUT("ExecutionTimedOut"),
  
  FAIL_STATE_ENTERED("FailStateEntered"),
  
  LAMBDA_FUNCTION_FAILED("LambdaFunctionFailed"),
  
  LAMBDA_FUNCTION_SCHEDULED("LambdaFunctionScheduled"),
  
  LAMBDA_FUNCTION_SCHEDULE_FAILED("LambdaFunctionScheduleFailed"),
  
  LAMBDA_FUNCTION_STARTED("LambdaFunctionStarted"),
  
  LAMBDA_FUNCTION_START_FAILED("LambdaFunctionStartFailed"),
  
  LAMBDA_FUNCTION_SUCCEEDED("LambdaFunctionSucceeded"),
  
  LAMBDA_FUNCTION_TIMED_OUT("LambdaFunctionTimedOut"),
  
  MAP_ITERATION_ABORTED("MapIterationAborted"),
  
  MAP_ITERATION_FAILED("MapIterationFailed"),
  
  MAP_ITERATION_STARTED("MapIterationStarted"),
  
  MAP_ITERATION_SUCCEEDED("MapIterationSucceeded"),
  
  MAP_STATE_ABORTED("MapStateAborted"),
  
  MAP_STATE_ENTERED("MapStateEntered"),
  
  MAP_STATE_EXITED("MapStateExited"),
  
  MAP_STATE_FAILED("MapStateFailed"),
  
  MAP_STATE_STARTED("MapStateStarted"),
  
  MAP_STATE_SUCCEEDED("MapStateSucceeded"),
  
  PARALLEL_STATE_ABORTED("ParallelStateAborted"),
  
  PARALLEL_STATE_ENTERED("ParallelStateEntered"),
  
  PARALLEL_STATE_EXITED("ParallelStateExited"),
  
  PARALLEL_STATE_FAILED("ParallelStateFailed"),
  
  PARALLEL_STATE_STARTED("ParallelStateStarted"),
  
  PARALLEL_STATE_SUCCEEDED("ParallelStateSucceeded"),
  
  PASS_STATE_ENTERED("PassStateEntered"),
  
  PASS_STATE_EXITED("PassStateExited"),
  
  SUCCEED_STATE_ENTERED("SucceedStateEntered"),
  
  SUCCEED_STATE_EXITED("SucceedStateExited"),
  
  TASK_FAILED("TaskFailed"),
  
  TASK_SCHEDULED("TaskScheduled"),
  
  TASK_STARTED("TaskStarted"),
  
  TASK_START_FAILED("TaskStartFailed"),
  
  TASK_STATE_ABORTED("TaskStateAborted"),
  
  TASK_STATE_ENTERED("TaskStateEntered"),
  
  TASK_STATE_EXITED("TaskStateExited"),
  
  TASK_SUBMIT_FAILED("TaskSubmitFailed"),
  
  TASK_SUBMITTED("TaskSubmitted"),
  
  TASK_SUCCEEDED("TaskSucceeded"),
  
  TASK_TIMED_OUT("TaskTimedOut"),
  
  WAIT_STATE_ABORTED("WaitStateAborted"),
  
  WAIT_STATE_ENTERED("WaitStateEntered"),
  
  WAIT_STATE_EXITED("WaitStateExited"),
  
  MAP_RUN_ABORTED("MapRunAborted"),
  
  MAP_RUN_FAILED("MapRunFailed"),
  
  MAP_RUN_STARTED("MapRunStarted"),
  
  MAP_RUN_SUCCEEDED("MapRunSucceeded");

  private String value;

  HistoryEventType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static HistoryEventType fromValue(String value) {
    for (HistoryEventType b : HistoryEventType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<HistoryEventType> {
    @Override
    public void write(final JsonWriter jsonWriter, final HistoryEventType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public HistoryEventType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return HistoryEventType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    HistoryEventType.fromValue(value);
  }
}

