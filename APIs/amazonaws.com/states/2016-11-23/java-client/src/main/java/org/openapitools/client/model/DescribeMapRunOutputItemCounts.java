/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeMapRunOutputItemCounts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:37.123378-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeMapRunOutputItemCounts {
  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Integer pending;

  public static final String SERIALIZED_NAME_RUNNING = "running";
  @SerializedName(SERIALIZED_NAME_RUNNING)
  private Integer running;

  public static final String SERIALIZED_NAME_SUCCEEDED = "succeeded";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED)
  private Integer succeeded;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Integer failed;

  public static final String SERIALIZED_NAME_TIMED_OUT = "timedOut";
  @SerializedName(SERIALIZED_NAME_TIMED_OUT)
  private Integer timedOut;

  public static final String SERIALIZED_NAME_ABORTED = "aborted";
  @SerializedName(SERIALIZED_NAME_ABORTED)
  private Integer aborted;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_RESULTS_WRITTEN = "resultsWritten";
  @SerializedName(SERIALIZED_NAME_RESULTS_WRITTEN)
  private Integer resultsWritten;

  public DescribeMapRunOutputItemCounts() {
  }

  public DescribeMapRunOutputItemCounts pending(Integer pending) {
    this.pending = pending;
    return this;
  }

  /**
   * Get pending
   * @return pending
   */
  @javax.annotation.Nonnull
  public Integer getPending() {
    return pending;
  }

  public void setPending(Integer pending) {
    this.pending = pending;
  }


  public DescribeMapRunOutputItemCounts running(Integer running) {
    this.running = running;
    return this;
  }

  /**
   * Get running
   * @return running
   */
  @javax.annotation.Nonnull
  public Integer getRunning() {
    return running;
  }

  public void setRunning(Integer running) {
    this.running = running;
  }


  public DescribeMapRunOutputItemCounts succeeded(Integer succeeded) {
    this.succeeded = succeeded;
    return this;
  }

  /**
   * Get succeeded
   * @return succeeded
   */
  @javax.annotation.Nonnull
  public Integer getSucceeded() {
    return succeeded;
  }

  public void setSucceeded(Integer succeeded) {
    this.succeeded = succeeded;
  }


  public DescribeMapRunOutputItemCounts failed(Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nonnull
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  public DescribeMapRunOutputItemCounts timedOut(Integer timedOut) {
    this.timedOut = timedOut;
    return this;
  }

  /**
   * Get timedOut
   * @return timedOut
   */
  @javax.annotation.Nonnull
  public Integer getTimedOut() {
    return timedOut;
  }

  public void setTimedOut(Integer timedOut) {
    this.timedOut = timedOut;
  }


  public DescribeMapRunOutputItemCounts aborted(Integer aborted) {
    this.aborted = aborted;
    return this;
  }

  /**
   * Get aborted
   * @return aborted
   */
  @javax.annotation.Nonnull
  public Integer getAborted() {
    return aborted;
  }

  public void setAborted(Integer aborted) {
    this.aborted = aborted;
  }


  public DescribeMapRunOutputItemCounts total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public DescribeMapRunOutputItemCounts resultsWritten(Integer resultsWritten) {
    this.resultsWritten = resultsWritten;
    return this;
  }

  /**
   * Get resultsWritten
   * @return resultsWritten
   */
  @javax.annotation.Nonnull
  public Integer getResultsWritten() {
    return resultsWritten;
  }

  public void setResultsWritten(Integer resultsWritten) {
    this.resultsWritten = resultsWritten;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeMapRunOutputItemCounts describeMapRunOutputItemCounts = (DescribeMapRunOutputItemCounts) o;
    return Objects.equals(this.pending, describeMapRunOutputItemCounts.pending) &&
        Objects.equals(this.running, describeMapRunOutputItemCounts.running) &&
        Objects.equals(this.succeeded, describeMapRunOutputItemCounts.succeeded) &&
        Objects.equals(this.failed, describeMapRunOutputItemCounts.failed) &&
        Objects.equals(this.timedOut, describeMapRunOutputItemCounts.timedOut) &&
        Objects.equals(this.aborted, describeMapRunOutputItemCounts.aborted) &&
        Objects.equals(this.total, describeMapRunOutputItemCounts.total) &&
        Objects.equals(this.resultsWritten, describeMapRunOutputItemCounts.resultsWritten);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pending, running, succeeded, failed, timedOut, aborted, total, resultsWritten);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeMapRunOutputItemCounts {\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    succeeded: ").append(toIndentedString(succeeded)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    timedOut: ").append(toIndentedString(timedOut)).append("\n");
    sb.append("    aborted: ").append(toIndentedString(aborted)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    resultsWritten: ").append(toIndentedString(resultsWritten)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pending");
    openapiFields.add("running");
    openapiFields.add("succeeded");
    openapiFields.add("failed");
    openapiFields.add("timedOut");
    openapiFields.add("aborted");
    openapiFields.add("total");
    openapiFields.add("resultsWritten");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pending");
    openapiRequiredFields.add("running");
    openapiRequiredFields.add("succeeded");
    openapiRequiredFields.add("failed");
    openapiRequiredFields.add("timedOut");
    openapiRequiredFields.add("aborted");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("resultsWritten");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeMapRunOutputItemCounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeMapRunOutputItemCounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeMapRunOutputItemCounts is not found in the empty JSON string", DescribeMapRunOutputItemCounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeMapRunOutputItemCounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeMapRunOutputItemCounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeMapRunOutputItemCounts.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `pending`
      Integer.validateJsonElement(jsonObj.get("pending"));
      // validate the required field `running`
      Integer.validateJsonElement(jsonObj.get("running"));
      // validate the required field `succeeded`
      Integer.validateJsonElement(jsonObj.get("succeeded"));
      // validate the required field `failed`
      Integer.validateJsonElement(jsonObj.get("failed"));
      // validate the required field `timedOut`
      Integer.validateJsonElement(jsonObj.get("timedOut"));
      // validate the required field `aborted`
      Integer.validateJsonElement(jsonObj.get("aborted"));
      // validate the required field `total`
      Integer.validateJsonElement(jsonObj.get("total"));
      // validate the required field `resultsWritten`
      Integer.validateJsonElement(jsonObj.get("resultsWritten"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeMapRunOutputItemCounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeMapRunOutputItemCounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeMapRunOutputItemCounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeMapRunOutputItemCounts.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeMapRunOutputItemCounts>() {
           @Override
           public void write(JsonWriter out, DescribeMapRunOutputItemCounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeMapRunOutputItemCounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeMapRunOutputItemCounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeMapRunOutputItemCounts
   * @throws IOException if the JSON string is invalid with respect to DescribeMapRunOutputItemCounts
   */
  public static DescribeMapRunOutputItemCounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeMapRunOutputItemCounts.class);
  }

  /**
   * Convert an instance of DescribeMapRunOutputItemCounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

