/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateStateMachineInputTracingConfiguration;
import org.openapitools.client.model.LoggingConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeStateMachineForExecutionOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:37.123378-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeStateMachineForExecutionOutput {
  public static final String SERIALIZED_NAME_STATE_MACHINE_ARN = "stateMachineArn";
  @SerializedName(SERIALIZED_NAME_STATE_MACHINE_ARN)
  private String stateMachineArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "updateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public static final String SERIALIZED_NAME_LOGGING_CONFIGURATION = "loggingConfiguration";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIGURATION)
  private LoggingConfiguration loggingConfiguration;

  public static final String SERIALIZED_NAME_TRACING_CONFIGURATION = "tracingConfiguration";
  @SerializedName(SERIALIZED_NAME_TRACING_CONFIGURATION)
  private CreateStateMachineInputTracingConfiguration tracingConfiguration;

  public static final String SERIALIZED_NAME_MAP_RUN_ARN = "mapRunArn";
  @SerializedName(SERIALIZED_NAME_MAP_RUN_ARN)
  private String mapRunArn;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public DescribeStateMachineForExecutionOutput() {
  }

  public DescribeStateMachineForExecutionOutput stateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
    return this;
  }

  /**
   * Get stateMachineArn
   * @return stateMachineArn
   */
  @javax.annotation.Nonnull
  public String getStateMachineArn() {
    return stateMachineArn;
  }

  public void setStateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
  }


  public DescribeStateMachineForExecutionOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeStateMachineForExecutionOutput definition(String definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nonnull
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(String definition) {
    this.definition = definition;
  }


  public DescribeStateMachineForExecutionOutput roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public DescribeStateMachineForExecutionOutput updateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Get updateDate
   * @return updateDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }


  public DescribeStateMachineForExecutionOutput loggingConfiguration(LoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
    return this;
  }

  /**
   * Get loggingConfiguration
   * @return loggingConfiguration
   */
  @javax.annotation.Nullable
  public LoggingConfiguration getLoggingConfiguration() {
    return loggingConfiguration;
  }

  public void setLoggingConfiguration(LoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
  }


  public DescribeStateMachineForExecutionOutput tracingConfiguration(CreateStateMachineInputTracingConfiguration tracingConfiguration) {
    this.tracingConfiguration = tracingConfiguration;
    return this;
  }

  /**
   * Get tracingConfiguration
   * @return tracingConfiguration
   */
  @javax.annotation.Nullable
  public CreateStateMachineInputTracingConfiguration getTracingConfiguration() {
    return tracingConfiguration;
  }

  public void setTracingConfiguration(CreateStateMachineInputTracingConfiguration tracingConfiguration) {
    this.tracingConfiguration = tracingConfiguration;
  }


  public DescribeStateMachineForExecutionOutput mapRunArn(String mapRunArn) {
    this.mapRunArn = mapRunArn;
    return this;
  }

  /**
   * Get mapRunArn
   * @return mapRunArn
   */
  @javax.annotation.Nullable
  public String getMapRunArn() {
    return mapRunArn;
  }

  public void setMapRunArn(String mapRunArn) {
    this.mapRunArn = mapRunArn;
  }


  public DescribeStateMachineForExecutionOutput label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public DescribeStateMachineForExecutionOutput revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  /**
   * Get revisionId
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeStateMachineForExecutionOutput describeStateMachineForExecutionOutput = (DescribeStateMachineForExecutionOutput) o;
    return Objects.equals(this.stateMachineArn, describeStateMachineForExecutionOutput.stateMachineArn) &&
        Objects.equals(this.name, describeStateMachineForExecutionOutput.name) &&
        Objects.equals(this.definition, describeStateMachineForExecutionOutput.definition) &&
        Objects.equals(this.roleArn, describeStateMachineForExecutionOutput.roleArn) &&
        Objects.equals(this.updateDate, describeStateMachineForExecutionOutput.updateDate) &&
        Objects.equals(this.loggingConfiguration, describeStateMachineForExecutionOutput.loggingConfiguration) &&
        Objects.equals(this.tracingConfiguration, describeStateMachineForExecutionOutput.tracingConfiguration) &&
        Objects.equals(this.mapRunArn, describeStateMachineForExecutionOutput.mapRunArn) &&
        Objects.equals(this.label, describeStateMachineForExecutionOutput.label) &&
        Objects.equals(this.revisionId, describeStateMachineForExecutionOutput.revisionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stateMachineArn, name, definition, roleArn, updateDate, loggingConfiguration, tracingConfiguration, mapRunArn, label, revisionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeStateMachineForExecutionOutput {\n");
    sb.append("    stateMachineArn: ").append(toIndentedString(stateMachineArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    loggingConfiguration: ").append(toIndentedString(loggingConfiguration)).append("\n");
    sb.append("    tracingConfiguration: ").append(toIndentedString(tracingConfiguration)).append("\n");
    sb.append("    mapRunArn: ").append(toIndentedString(mapRunArn)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stateMachineArn");
    openapiFields.add("name");
    openapiFields.add("definition");
    openapiFields.add("roleArn");
    openapiFields.add("updateDate");
    openapiFields.add("loggingConfiguration");
    openapiFields.add("tracingConfiguration");
    openapiFields.add("mapRunArn");
    openapiFields.add("label");
    openapiFields.add("revisionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stateMachineArn");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("definition");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("updateDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeStateMachineForExecutionOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeStateMachineForExecutionOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeStateMachineForExecutionOutput is not found in the empty JSON string", DescribeStateMachineForExecutionOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeStateMachineForExecutionOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeStateMachineForExecutionOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeStateMachineForExecutionOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `stateMachineArn`
      String.validateJsonElement(jsonObj.get("stateMachineArn"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `definition`
      String.validateJsonElement(jsonObj.get("definition"));
      // validate the required field `roleArn`
      String.validateJsonElement(jsonObj.get("roleArn"));
      // validate the required field `updateDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("updateDate"));
      // validate the optional field `loggingConfiguration`
      if (jsonObj.get("loggingConfiguration") != null && !jsonObj.get("loggingConfiguration").isJsonNull()) {
        LoggingConfiguration.validateJsonElement(jsonObj.get("loggingConfiguration"));
      }
      // validate the optional field `tracingConfiguration`
      if (jsonObj.get("tracingConfiguration") != null && !jsonObj.get("tracingConfiguration").isJsonNull()) {
        CreateStateMachineInputTracingConfiguration.validateJsonElement(jsonObj.get("tracingConfiguration"));
      }
      // validate the optional field `mapRunArn`
      if (jsonObj.get("mapRunArn") != null && !jsonObj.get("mapRunArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("mapRunArn"));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("label"));
      }
      // validate the optional field `revisionId`
      if (jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("revisionId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeStateMachineForExecutionOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeStateMachineForExecutionOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeStateMachineForExecutionOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeStateMachineForExecutionOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeStateMachineForExecutionOutput>() {
           @Override
           public void write(JsonWriter out, DescribeStateMachineForExecutionOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeStateMachineForExecutionOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeStateMachineForExecutionOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeStateMachineForExecutionOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeStateMachineForExecutionOutput
   */
  public static DescribeStateMachineForExecutionOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeStateMachineForExecutionOutput.class);
  }

  /**
   * Convert an instance of DescribeStateMachineForExecutionOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

