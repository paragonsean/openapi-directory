/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateStateMachineInputTracingConfiguration;
import org.openapitools.client.model.LoggingConfiguration;
import org.openapitools.client.model.StateMachineStatus;
import org.openapitools.client.model.StateMachineType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeStateMachineOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:37.123378-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeStateMachineOutput {
  public static final String SERIALIZED_NAME_STATE_MACHINE_ARN = "stateMachineArn";
  @SerializedName(SERIALIZED_NAME_STATE_MACHINE_ARN)
  private String stateMachineArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StateMachineStatus status;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private StateMachineType type;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LOGGING_CONFIGURATION = "loggingConfiguration";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIGURATION)
  private LoggingConfiguration loggingConfiguration;

  public static final String SERIALIZED_NAME_TRACING_CONFIGURATION = "tracingConfiguration";
  @SerializedName(SERIALIZED_NAME_TRACING_CONFIGURATION)
  private CreateStateMachineInputTracingConfiguration tracingConfiguration;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public DescribeStateMachineOutput() {
  }

  public DescribeStateMachineOutput stateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
    return this;
  }

  /**
   * Get stateMachineArn
   * @return stateMachineArn
   */
  @javax.annotation.Nonnull
  public String getStateMachineArn() {
    return stateMachineArn;
  }

  public void setStateMachineArn(String stateMachineArn) {
    this.stateMachineArn = stateMachineArn;
  }


  public DescribeStateMachineOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeStateMachineOutput status(StateMachineStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StateMachineStatus getStatus() {
    return status;
  }

  public void setStatus(StateMachineStatus status) {
    this.status = status;
  }


  public DescribeStateMachineOutput definition(String definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nonnull
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(String definition) {
    this.definition = definition;
  }


  public DescribeStateMachineOutput roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public DescribeStateMachineOutput type(StateMachineType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public StateMachineType getType() {
    return type;
  }

  public void setType(StateMachineType type) {
    this.type = type;
  }


  public DescribeStateMachineOutput creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public DescribeStateMachineOutput loggingConfiguration(LoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
    return this;
  }

  /**
   * Get loggingConfiguration
   * @return loggingConfiguration
   */
  @javax.annotation.Nullable
  public LoggingConfiguration getLoggingConfiguration() {
    return loggingConfiguration;
  }

  public void setLoggingConfiguration(LoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
  }


  public DescribeStateMachineOutput tracingConfiguration(CreateStateMachineInputTracingConfiguration tracingConfiguration) {
    this.tracingConfiguration = tracingConfiguration;
    return this;
  }

  /**
   * Get tracingConfiguration
   * @return tracingConfiguration
   */
  @javax.annotation.Nullable
  public CreateStateMachineInputTracingConfiguration getTracingConfiguration() {
    return tracingConfiguration;
  }

  public void setTracingConfiguration(CreateStateMachineInputTracingConfiguration tracingConfiguration) {
    this.tracingConfiguration = tracingConfiguration;
  }


  public DescribeStateMachineOutput label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public DescribeStateMachineOutput revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  /**
   * Get revisionId
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }


  public DescribeStateMachineOutput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeStateMachineOutput describeStateMachineOutput = (DescribeStateMachineOutput) o;
    return Objects.equals(this.stateMachineArn, describeStateMachineOutput.stateMachineArn) &&
        Objects.equals(this.name, describeStateMachineOutput.name) &&
        Objects.equals(this.status, describeStateMachineOutput.status) &&
        Objects.equals(this.definition, describeStateMachineOutput.definition) &&
        Objects.equals(this.roleArn, describeStateMachineOutput.roleArn) &&
        Objects.equals(this.type, describeStateMachineOutput.type) &&
        Objects.equals(this.creationDate, describeStateMachineOutput.creationDate) &&
        Objects.equals(this.loggingConfiguration, describeStateMachineOutput.loggingConfiguration) &&
        Objects.equals(this.tracingConfiguration, describeStateMachineOutput.tracingConfiguration) &&
        Objects.equals(this.label, describeStateMachineOutput.label) &&
        Objects.equals(this.revisionId, describeStateMachineOutput.revisionId) &&
        Objects.equals(this.description, describeStateMachineOutput.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stateMachineArn, name, status, definition, roleArn, type, creationDate, loggingConfiguration, tracingConfiguration, label, revisionId, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeStateMachineOutput {\n");
    sb.append("    stateMachineArn: ").append(toIndentedString(stateMachineArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    loggingConfiguration: ").append(toIndentedString(loggingConfiguration)).append("\n");
    sb.append("    tracingConfiguration: ").append(toIndentedString(tracingConfiguration)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stateMachineArn");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("definition");
    openapiFields.add("roleArn");
    openapiFields.add("type");
    openapiFields.add("creationDate");
    openapiFields.add("loggingConfiguration");
    openapiFields.add("tracingConfiguration");
    openapiFields.add("label");
    openapiFields.add("revisionId");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stateMachineArn");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("definition");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("creationDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeStateMachineOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeStateMachineOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeStateMachineOutput is not found in the empty JSON string", DescribeStateMachineOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeStateMachineOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeStateMachineOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeStateMachineOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `stateMachineArn`
      String.validateJsonElement(jsonObj.get("stateMachineArn"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StateMachineStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the required field `definition`
      String.validateJsonElement(jsonObj.get("definition"));
      // validate the required field `roleArn`
      String.validateJsonElement(jsonObj.get("roleArn"));
      // validate the required field `type`
      StateMachineType.validateJsonElement(jsonObj.get("type"));
      // validate the required field `creationDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("creationDate"));
      // validate the optional field `loggingConfiguration`
      if (jsonObj.get("loggingConfiguration") != null && !jsonObj.get("loggingConfiguration").isJsonNull()) {
        LoggingConfiguration.validateJsonElement(jsonObj.get("loggingConfiguration"));
      }
      // validate the optional field `tracingConfiguration`
      if (jsonObj.get("tracingConfiguration") != null && !jsonObj.get("tracingConfiguration").isJsonNull()) {
        CreateStateMachineInputTracingConfiguration.validateJsonElement(jsonObj.get("tracingConfiguration"));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("label"));
      }
      // validate the optional field `revisionId`
      if (jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("revisionId"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeStateMachineOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeStateMachineOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeStateMachineOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeStateMachineOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeStateMachineOutput>() {
           @Override
           public void write(JsonWriter out, DescribeStateMachineOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeStateMachineOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeStateMachineOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeStateMachineOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeStateMachineOutput
   */
  public static DescribeStateMachineOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeStateMachineOutput.class);
  }

  /**
   * Convert an instance of DescribeStateMachineOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

