/*
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateMapRunInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:37.123378-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateMapRunInput {
  public static final String SERIALIZED_NAME_MAP_RUN_ARN = "mapRunArn";
  @SerializedName(SERIALIZED_NAME_MAP_RUN_ARN)
  private String mapRunArn;

  public static final String SERIALIZED_NAME_MAX_CONCURRENCY = "maxConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENCY)
  private Integer maxConcurrency;

  public static final String SERIALIZED_NAME_TOLERATED_FAILURE_PERCENTAGE = "toleratedFailurePercentage";
  @SerializedName(SERIALIZED_NAME_TOLERATED_FAILURE_PERCENTAGE)
  private Float toleratedFailurePercentage;

  public static final String SERIALIZED_NAME_TOLERATED_FAILURE_COUNT = "toleratedFailureCount";
  @SerializedName(SERIALIZED_NAME_TOLERATED_FAILURE_COUNT)
  private Integer toleratedFailureCount;

  public UpdateMapRunInput() {
  }

  public UpdateMapRunInput mapRunArn(String mapRunArn) {
    this.mapRunArn = mapRunArn;
    return this;
  }

  /**
   * Get mapRunArn
   * @return mapRunArn
   */
  @javax.annotation.Nonnull
  public String getMapRunArn() {
    return mapRunArn;
  }

  public void setMapRunArn(String mapRunArn) {
    this.mapRunArn = mapRunArn;
  }


  public UpdateMapRunInput maxConcurrency(Integer maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
    return this;
  }

  /**
   * Get maxConcurrency
   * @return maxConcurrency
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrency() {
    return maxConcurrency;
  }

  public void setMaxConcurrency(Integer maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
  }


  public UpdateMapRunInput toleratedFailurePercentage(Float toleratedFailurePercentage) {
    this.toleratedFailurePercentage = toleratedFailurePercentage;
    return this;
  }

  /**
   * Get toleratedFailurePercentage
   * @return toleratedFailurePercentage
   */
  @javax.annotation.Nullable
  public Float getToleratedFailurePercentage() {
    return toleratedFailurePercentage;
  }

  public void setToleratedFailurePercentage(Float toleratedFailurePercentage) {
    this.toleratedFailurePercentage = toleratedFailurePercentage;
  }


  public UpdateMapRunInput toleratedFailureCount(Integer toleratedFailureCount) {
    this.toleratedFailureCount = toleratedFailureCount;
    return this;
  }

  /**
   * Get toleratedFailureCount
   * @return toleratedFailureCount
   */
  @javax.annotation.Nullable
  public Integer getToleratedFailureCount() {
    return toleratedFailureCount;
  }

  public void setToleratedFailureCount(Integer toleratedFailureCount) {
    this.toleratedFailureCount = toleratedFailureCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateMapRunInput updateMapRunInput = (UpdateMapRunInput) o;
    return Objects.equals(this.mapRunArn, updateMapRunInput.mapRunArn) &&
        Objects.equals(this.maxConcurrency, updateMapRunInput.maxConcurrency) &&
        Objects.equals(this.toleratedFailurePercentage, updateMapRunInput.toleratedFailurePercentage) &&
        Objects.equals(this.toleratedFailureCount, updateMapRunInput.toleratedFailureCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mapRunArn, maxConcurrency, toleratedFailurePercentage, toleratedFailureCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateMapRunInput {\n");
    sb.append("    mapRunArn: ").append(toIndentedString(mapRunArn)).append("\n");
    sb.append("    maxConcurrency: ").append(toIndentedString(maxConcurrency)).append("\n");
    sb.append("    toleratedFailurePercentage: ").append(toIndentedString(toleratedFailurePercentage)).append("\n");
    sb.append("    toleratedFailureCount: ").append(toIndentedString(toleratedFailureCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mapRunArn");
    openapiFields.add("maxConcurrency");
    openapiFields.add("toleratedFailurePercentage");
    openapiFields.add("toleratedFailureCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mapRunArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateMapRunInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateMapRunInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateMapRunInput is not found in the empty JSON string", UpdateMapRunInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateMapRunInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateMapRunInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateMapRunInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `mapRunArn`
      String.validateJsonElement(jsonObj.get("mapRunArn"));
      // validate the optional field `maxConcurrency`
      if (jsonObj.get("maxConcurrency") != null && !jsonObj.get("maxConcurrency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxConcurrency"));
      }
      // validate the optional field `toleratedFailurePercentage`
      if (jsonObj.get("toleratedFailurePercentage") != null && !jsonObj.get("toleratedFailurePercentage").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("toleratedFailurePercentage"));
      }
      // validate the optional field `toleratedFailureCount`
      if (jsonObj.get("toleratedFailureCount") != null && !jsonObj.get("toleratedFailureCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("toleratedFailureCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateMapRunInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateMapRunInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateMapRunInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateMapRunInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateMapRunInput>() {
           @Override
           public void write(JsonWriter out, UpdateMapRunInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateMapRunInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateMapRunInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateMapRunInput
   * @throws IOException if the JSON string is invalid with respect to UpdateMapRunInput
   */
  public static UpdateMapRunInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateMapRunInput.class);
  }

  /**
   * Convert an instance of UpdateMapRunInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

