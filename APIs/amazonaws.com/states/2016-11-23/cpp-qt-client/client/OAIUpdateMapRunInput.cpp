/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMapRunInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMapRunInput::OAIUpdateMapRunInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMapRunInput::OAIUpdateMapRunInput() {
    this->initializeModel();
}

OAIUpdateMapRunInput::~OAIUpdateMapRunInput() {}

void OAIUpdateMapRunInput::initializeModel() {

    m_map_run_arn_isSet = false;
    m_map_run_arn_isValid = false;

    m_max_concurrency_isSet = false;
    m_max_concurrency_isValid = false;

    m_tolerated_failure_percentage_isSet = false;
    m_tolerated_failure_percentage_isValid = false;

    m_tolerated_failure_count_isSet = false;
    m_tolerated_failure_count_isValid = false;
}

void OAIUpdateMapRunInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMapRunInput::fromJsonObject(QJsonObject json) {

    m_map_run_arn_isValid = ::OpenAPI::fromJsonValue(m_map_run_arn, json[QString("mapRunArn")]);
    m_map_run_arn_isSet = !json[QString("mapRunArn")].isNull() && m_map_run_arn_isValid;

    m_max_concurrency_isValid = ::OpenAPI::fromJsonValue(m_max_concurrency, json[QString("maxConcurrency")]);
    m_max_concurrency_isSet = !json[QString("maxConcurrency")].isNull() && m_max_concurrency_isValid;

    m_tolerated_failure_percentage_isValid = ::OpenAPI::fromJsonValue(m_tolerated_failure_percentage, json[QString("toleratedFailurePercentage")]);
    m_tolerated_failure_percentage_isSet = !json[QString("toleratedFailurePercentage")].isNull() && m_tolerated_failure_percentage_isValid;

    m_tolerated_failure_count_isValid = ::OpenAPI::fromJsonValue(m_tolerated_failure_count, json[QString("toleratedFailureCount")]);
    m_tolerated_failure_count_isSet = !json[QString("toleratedFailureCount")].isNull() && m_tolerated_failure_count_isValid;
}

QString OAIUpdateMapRunInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMapRunInput::asJsonObject() const {
    QJsonObject obj;
    if (m_map_run_arn_isSet) {
        obj.insert(QString("mapRunArn"), ::OpenAPI::toJsonValue(m_map_run_arn));
    }
    if (m_max_concurrency_isSet) {
        obj.insert(QString("maxConcurrency"), ::OpenAPI::toJsonValue(m_max_concurrency));
    }
    if (m_tolerated_failure_percentage_isSet) {
        obj.insert(QString("toleratedFailurePercentage"), ::OpenAPI::toJsonValue(m_tolerated_failure_percentage));
    }
    if (m_tolerated_failure_count_isSet) {
        obj.insert(QString("toleratedFailureCount"), ::OpenAPI::toJsonValue(m_tolerated_failure_count));
    }
    return obj;
}

QString OAIUpdateMapRunInput::getMapRunArn() const {
    return m_map_run_arn;
}
void OAIUpdateMapRunInput::setMapRunArn(const QString &map_run_arn) {
    m_map_run_arn = map_run_arn;
    m_map_run_arn_isSet = true;
}

bool OAIUpdateMapRunInput::is_map_run_arn_Set() const{
    return m_map_run_arn_isSet;
}

bool OAIUpdateMapRunInput::is_map_run_arn_Valid() const{
    return m_map_run_arn_isValid;
}

qint32 OAIUpdateMapRunInput::getMaxConcurrency() const {
    return m_max_concurrency;
}
void OAIUpdateMapRunInput::setMaxConcurrency(const qint32 &max_concurrency) {
    m_max_concurrency = max_concurrency;
    m_max_concurrency_isSet = true;
}

bool OAIUpdateMapRunInput::is_max_concurrency_Set() const{
    return m_max_concurrency_isSet;
}

bool OAIUpdateMapRunInput::is_max_concurrency_Valid() const{
    return m_max_concurrency_isValid;
}

float OAIUpdateMapRunInput::getToleratedFailurePercentage() const {
    return m_tolerated_failure_percentage;
}
void OAIUpdateMapRunInput::setToleratedFailurePercentage(const float &tolerated_failure_percentage) {
    m_tolerated_failure_percentage = tolerated_failure_percentage;
    m_tolerated_failure_percentage_isSet = true;
}

bool OAIUpdateMapRunInput::is_tolerated_failure_percentage_Set() const{
    return m_tolerated_failure_percentage_isSet;
}

bool OAIUpdateMapRunInput::is_tolerated_failure_percentage_Valid() const{
    return m_tolerated_failure_percentage_isValid;
}

qint32 OAIUpdateMapRunInput::getToleratedFailureCount() const {
    return m_tolerated_failure_count;
}
void OAIUpdateMapRunInput::setToleratedFailureCount(const qint32 &tolerated_failure_count) {
    m_tolerated_failure_count = tolerated_failure_count;
    m_tolerated_failure_count_isSet = true;
}

bool OAIUpdateMapRunInput::is_tolerated_failure_count_Set() const{
    return m_tolerated_failure_count_isSet;
}

bool OAIUpdateMapRunInput::is_tolerated_failure_count_Valid() const{
    return m_tolerated_failure_count_isValid;
}

bool OAIUpdateMapRunInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_map_run_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerated_failure_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerated_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMapRunInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_map_run_arn_isValid && true;
}

} // namespace OpenAPI
