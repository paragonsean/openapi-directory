/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSyncExecutionOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSyncExecutionOutput::OAIStartSyncExecutionOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSyncExecutionOutput::OAIStartSyncExecutionOutput() {
    this->initializeModel();
}

OAIStartSyncExecutionOutput::~OAIStartSyncExecutionOutput() {}

void OAIStartSyncExecutionOutput::initializeModel() {

    m_execution_arn_isSet = false;
    m_execution_arn_isValid = false;

    m_state_machine_arn_isSet = false;
    m_state_machine_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_stop_date_isSet = false;
    m_stop_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_input_details_isSet = false;
    m_input_details_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_output_details_isSet = false;
    m_output_details_isValid = false;

    m_trace_header_isSet = false;
    m_trace_header_isValid = false;

    m_billing_details_isSet = false;
    m_billing_details_isValid = false;
}

void OAIStartSyncExecutionOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSyncExecutionOutput::fromJsonObject(QJsonObject json) {

    m_execution_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_arn, json[QString("executionArn")]);
    m_execution_arn_isSet = !json[QString("executionArn")].isNull() && m_execution_arn_isValid;

    m_state_machine_arn_isValid = ::OpenAPI::fromJsonValue(m_state_machine_arn, json[QString("stateMachineArn")]);
    m_state_machine_arn_isSet = !json[QString("stateMachineArn")].isNull() && m_state_machine_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_stop_date_isValid = ::OpenAPI::fromJsonValue(m_stop_date, json[QString("stopDate")]);
    m_stop_date_isSet = !json[QString("stopDate")].isNull() && m_stop_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_input_details_isValid = ::OpenAPI::fromJsonValue(m_input_details, json[QString("inputDetails")]);
    m_input_details_isSet = !json[QString("inputDetails")].isNull() && m_input_details_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_output_details_isValid = ::OpenAPI::fromJsonValue(m_output_details, json[QString("outputDetails")]);
    m_output_details_isSet = !json[QString("outputDetails")].isNull() && m_output_details_isValid;

    m_trace_header_isValid = ::OpenAPI::fromJsonValue(m_trace_header, json[QString("traceHeader")]);
    m_trace_header_isSet = !json[QString("traceHeader")].isNull() && m_trace_header_isValid;

    m_billing_details_isValid = ::OpenAPI::fromJsonValue(m_billing_details, json[QString("billingDetails")]);
    m_billing_details_isSet = !json[QString("billingDetails")].isNull() && m_billing_details_isValid;
}

QString OAIStartSyncExecutionOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSyncExecutionOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_arn_isSet) {
        obj.insert(QString("executionArn"), ::OpenAPI::toJsonValue(m_execution_arn));
    }
    if (m_state_machine_arn_isSet) {
        obj.insert(QString("stateMachineArn"), ::OpenAPI::toJsonValue(m_state_machine_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_stop_date_isSet) {
        obj.insert(QString("stopDate"), ::OpenAPI::toJsonValue(m_stop_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_input_details.isSet()) {
        obj.insert(QString("inputDetails"), ::OpenAPI::toJsonValue(m_input_details));
    }
    if (m_output_isSet) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_output_details.isSet()) {
        obj.insert(QString("outputDetails"), ::OpenAPI::toJsonValue(m_output_details));
    }
    if (m_trace_header_isSet) {
        obj.insert(QString("traceHeader"), ::OpenAPI::toJsonValue(m_trace_header));
    }
    if (m_billing_details.isSet()) {
        obj.insert(QString("billingDetails"), ::OpenAPI::toJsonValue(m_billing_details));
    }
    return obj;
}

QString OAIStartSyncExecutionOutput::getExecutionArn() const {
    return m_execution_arn;
}
void OAIStartSyncExecutionOutput::setExecutionArn(const QString &execution_arn) {
    m_execution_arn = execution_arn;
    m_execution_arn_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_execution_arn_Set() const{
    return m_execution_arn_isSet;
}

bool OAIStartSyncExecutionOutput::is_execution_arn_Valid() const{
    return m_execution_arn_isValid;
}

QString OAIStartSyncExecutionOutput::getStateMachineArn() const {
    return m_state_machine_arn;
}
void OAIStartSyncExecutionOutput::setStateMachineArn(const QString &state_machine_arn) {
    m_state_machine_arn = state_machine_arn;
    m_state_machine_arn_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_state_machine_arn_Set() const{
    return m_state_machine_arn_isSet;
}

bool OAIStartSyncExecutionOutput::is_state_machine_arn_Valid() const{
    return m_state_machine_arn_isValid;
}

QString OAIStartSyncExecutionOutput::getName() const {
    return m_name;
}
void OAIStartSyncExecutionOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartSyncExecutionOutput::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIStartSyncExecutionOutput::getStartDate() const {
    return m_start_date;
}
void OAIStartSyncExecutionOutput::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIStartSyncExecutionOutput::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIStartSyncExecutionOutput::getStopDate() const {
    return m_stop_date;
}
void OAIStartSyncExecutionOutput::setStopDate(const QDateTime &stop_date) {
    m_stop_date = stop_date;
    m_stop_date_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_stop_date_Set() const{
    return m_stop_date_isSet;
}

bool OAIStartSyncExecutionOutput::is_stop_date_Valid() const{
    return m_stop_date_isValid;
}

OAISyncExecutionStatus OAIStartSyncExecutionOutput::getStatus() const {
    return m_status;
}
void OAIStartSyncExecutionOutput::setStatus(const OAISyncExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartSyncExecutionOutput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStartSyncExecutionOutput::getError() const {
    return m_error;
}
void OAIStartSyncExecutionOutput::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_error_Set() const{
    return m_error_isSet;
}

bool OAIStartSyncExecutionOutput::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIStartSyncExecutionOutput::getCause() const {
    return m_cause;
}
void OAIStartSyncExecutionOutput::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIStartSyncExecutionOutput::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAIStartSyncExecutionOutput::getInput() const {
    return m_input;
}
void OAIStartSyncExecutionOutput::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_input_Set() const{
    return m_input_isSet;
}

bool OAIStartSyncExecutionOutput::is_input_Valid() const{
    return m_input_isValid;
}

OAICloudWatchEventsExecutionDataDetails OAIStartSyncExecutionOutput::getInputDetails() const {
    return m_input_details;
}
void OAIStartSyncExecutionOutput::setInputDetails(const OAICloudWatchEventsExecutionDataDetails &input_details) {
    m_input_details = input_details;
    m_input_details_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_input_details_Set() const{
    return m_input_details_isSet;
}

bool OAIStartSyncExecutionOutput::is_input_details_Valid() const{
    return m_input_details_isValid;
}

QString OAIStartSyncExecutionOutput::getOutput() const {
    return m_output;
}
void OAIStartSyncExecutionOutput::setOutput(const QString &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_output_Set() const{
    return m_output_isSet;
}

bool OAIStartSyncExecutionOutput::is_output_Valid() const{
    return m_output_isValid;
}

OAICloudWatchEventsExecutionDataDetails OAIStartSyncExecutionOutput::getOutputDetails() const {
    return m_output_details;
}
void OAIStartSyncExecutionOutput::setOutputDetails(const OAICloudWatchEventsExecutionDataDetails &output_details) {
    m_output_details = output_details;
    m_output_details_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_output_details_Set() const{
    return m_output_details_isSet;
}

bool OAIStartSyncExecutionOutput::is_output_details_Valid() const{
    return m_output_details_isValid;
}

QString OAIStartSyncExecutionOutput::getTraceHeader() const {
    return m_trace_header;
}
void OAIStartSyncExecutionOutput::setTraceHeader(const QString &trace_header) {
    m_trace_header = trace_header;
    m_trace_header_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_trace_header_Set() const{
    return m_trace_header_isSet;
}

bool OAIStartSyncExecutionOutput::is_trace_header_Valid() const{
    return m_trace_header_isValid;
}

OAIStartSyncExecutionOutput_billingDetails OAIStartSyncExecutionOutput::getBillingDetails() const {
    return m_billing_details;
}
void OAIStartSyncExecutionOutput::setBillingDetails(const OAIStartSyncExecutionOutput_billingDetails &billing_details) {
    m_billing_details = billing_details;
    m_billing_details_isSet = true;
}

bool OAIStartSyncExecutionOutput::is_billing_details_Set() const{
    return m_billing_details_isSet;
}

bool OAIStartSyncExecutionOutput::is_billing_details_Valid() const{
    return m_billing_details_isValid;
}

bool OAIStartSyncExecutionOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_machine_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSyncExecutionOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_execution_arn_isValid && m_start_date_isValid && m_stop_date_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
