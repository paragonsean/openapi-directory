/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStateMachineInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStateMachineInput::OAICreateStateMachineInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStateMachineInput::OAICreateStateMachineInput() {
    this->initializeModel();
}

OAICreateStateMachineInput::~OAICreateStateMachineInput() {}

void OAICreateStateMachineInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_logging_configuration_isSet = false;
    m_logging_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tracing_configuration_isSet = false;
    m_tracing_configuration_isValid = false;

    m_publish_isSet = false;
    m_publish_isValid = false;

    m_version_description_isSet = false;
    m_version_description_isValid = false;
}

void OAICreateStateMachineInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStateMachineInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_logging_configuration_isValid = ::OpenAPI::fromJsonValue(m_logging_configuration, json[QString("loggingConfiguration")]);
    m_logging_configuration_isSet = !json[QString("loggingConfiguration")].isNull() && m_logging_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tracing_configuration_isValid = ::OpenAPI::fromJsonValue(m_tracing_configuration, json[QString("tracingConfiguration")]);
    m_tracing_configuration_isSet = !json[QString("tracingConfiguration")].isNull() && m_tracing_configuration_isValid;

    m_publish_isValid = ::OpenAPI::fromJsonValue(m_publish, json[QString("publish")]);
    m_publish_isSet = !json[QString("publish")].isNull() && m_publish_isValid;

    m_version_description_isValid = ::OpenAPI::fromJsonValue(m_version_description, json[QString("versionDescription")]);
    m_version_description_isSet = !json[QString("versionDescription")].isNull() && m_version_description_isValid;
}

QString OAICreateStateMachineInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStateMachineInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_logging_configuration.isSet()) {
        obj.insert(QString("loggingConfiguration"), ::OpenAPI::toJsonValue(m_logging_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tracing_configuration.isSet()) {
        obj.insert(QString("tracingConfiguration"), ::OpenAPI::toJsonValue(m_tracing_configuration));
    }
    if (m_publish_isSet) {
        obj.insert(QString("publish"), ::OpenAPI::toJsonValue(m_publish));
    }
    if (m_version_description_isSet) {
        obj.insert(QString("versionDescription"), ::OpenAPI::toJsonValue(m_version_description));
    }
    return obj;
}

QString OAICreateStateMachineInput::getName() const {
    return m_name;
}
void OAICreateStateMachineInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateStateMachineInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateStateMachineInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateStateMachineInput::getDefinition() const {
    return m_definition;
}
void OAICreateStateMachineInput::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICreateStateMachineInput::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICreateStateMachineInput::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAICreateStateMachineInput::getRoleArn() const {
    return m_role_arn;
}
void OAICreateStateMachineInput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateStateMachineInput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateStateMachineInput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIStateMachineType OAICreateStateMachineInput::getType() const {
    return m_type;
}
void OAICreateStateMachineInput::setType(const OAIStateMachineType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateStateMachineInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateStateMachineInput::is_type_Valid() const{
    return m_type_isValid;
}

OAICreateStateMachineInput_loggingConfiguration OAICreateStateMachineInput::getLoggingConfiguration() const {
    return m_logging_configuration;
}
void OAICreateStateMachineInput::setLoggingConfiguration(const OAICreateStateMachineInput_loggingConfiguration &logging_configuration) {
    m_logging_configuration = logging_configuration;
    m_logging_configuration_isSet = true;
}

bool OAICreateStateMachineInput::is_logging_configuration_Set() const{
    return m_logging_configuration_isSet;
}

bool OAICreateStateMachineInput::is_logging_configuration_Valid() const{
    return m_logging_configuration_isValid;
}

QList OAICreateStateMachineInput::getTags() const {
    return m_tags;
}
void OAICreateStateMachineInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStateMachineInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStateMachineInput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateStateMachineInput_tracingConfiguration OAICreateStateMachineInput::getTracingConfiguration() const {
    return m_tracing_configuration;
}
void OAICreateStateMachineInput::setTracingConfiguration(const OAICreateStateMachineInput_tracingConfiguration &tracing_configuration) {
    m_tracing_configuration = tracing_configuration;
    m_tracing_configuration_isSet = true;
}

bool OAICreateStateMachineInput::is_tracing_configuration_Set() const{
    return m_tracing_configuration_isSet;
}

bool OAICreateStateMachineInput::is_tracing_configuration_Valid() const{
    return m_tracing_configuration_isValid;
}

bool OAICreateStateMachineInput::getPublish() const {
    return m_publish;
}
void OAICreateStateMachineInput::setPublish(const bool &publish) {
    m_publish = publish;
    m_publish_isSet = true;
}

bool OAICreateStateMachineInput::is_publish_Set() const{
    return m_publish_isSet;
}

bool OAICreateStateMachineInput::is_publish_Valid() const{
    return m_publish_isValid;
}

QString OAICreateStateMachineInput::getVersionDescription() const {
    return m_version_description;
}
void OAICreateStateMachineInput::setVersionDescription(const QString &version_description) {
    m_version_description = version_description;
    m_version_description_isSet = true;
}

bool OAICreateStateMachineInput::is_version_description_Set() const{
    return m_version_description_isSet;
}

bool OAICreateStateMachineInput::is_version_description_Valid() const{
    return m_version_description_isValid;
}

bool OAICreateStateMachineInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStateMachineInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_definition_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
