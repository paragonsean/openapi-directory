/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryEvent::OAIHistoryEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryEvent::OAIHistoryEvent() {
    this->initializeModel();
}

OAIHistoryEvent::~OAIHistoryEvent() {}

void OAIHistoryEvent::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_previous_event_id_isSet = false;
    m_previous_event_id_isValid = false;

    m_activity_failed_event_details_isSet = false;
    m_activity_failed_event_details_isValid = false;

    m_activity_schedule_failed_event_details_isSet = false;
    m_activity_schedule_failed_event_details_isValid = false;

    m_activity_scheduled_event_details_isSet = false;
    m_activity_scheduled_event_details_isValid = false;

    m_activity_started_event_details_isSet = false;
    m_activity_started_event_details_isValid = false;

    m_activity_succeeded_event_details_isSet = false;
    m_activity_succeeded_event_details_isValid = false;

    m_activity_timed_out_event_details_isSet = false;
    m_activity_timed_out_event_details_isValid = false;

    m_task_failed_event_details_isSet = false;
    m_task_failed_event_details_isValid = false;

    m_task_scheduled_event_details_isSet = false;
    m_task_scheduled_event_details_isValid = false;

    m_task_start_failed_event_details_isSet = false;
    m_task_start_failed_event_details_isValid = false;

    m_task_started_event_details_isSet = false;
    m_task_started_event_details_isValid = false;

    m_task_submit_failed_event_details_isSet = false;
    m_task_submit_failed_event_details_isValid = false;

    m_task_submitted_event_details_isSet = false;
    m_task_submitted_event_details_isValid = false;

    m_task_succeeded_event_details_isSet = false;
    m_task_succeeded_event_details_isValid = false;

    m_task_timed_out_event_details_isSet = false;
    m_task_timed_out_event_details_isValid = false;

    m_execution_failed_event_details_isSet = false;
    m_execution_failed_event_details_isValid = false;

    m_execution_started_event_details_isSet = false;
    m_execution_started_event_details_isValid = false;

    m_execution_succeeded_event_details_isSet = false;
    m_execution_succeeded_event_details_isValid = false;

    m_execution_aborted_event_details_isSet = false;
    m_execution_aborted_event_details_isValid = false;

    m_execution_timed_out_event_details_isSet = false;
    m_execution_timed_out_event_details_isValid = false;

    m_map_state_started_event_details_isSet = false;
    m_map_state_started_event_details_isValid = false;

    m_map_iteration_started_event_details_isSet = false;
    m_map_iteration_started_event_details_isValid = false;

    m_map_iteration_succeeded_event_details_isSet = false;
    m_map_iteration_succeeded_event_details_isValid = false;

    m_map_iteration_failed_event_details_isSet = false;
    m_map_iteration_failed_event_details_isValid = false;

    m_map_iteration_aborted_event_details_isSet = false;
    m_map_iteration_aborted_event_details_isValid = false;

    m_lambda_function_failed_event_details_isSet = false;
    m_lambda_function_failed_event_details_isValid = false;

    m_lambda_function_schedule_failed_event_details_isSet = false;
    m_lambda_function_schedule_failed_event_details_isValid = false;

    m_lambda_function_scheduled_event_details_isSet = false;
    m_lambda_function_scheduled_event_details_isValid = false;

    m_lambda_function_start_failed_event_details_isSet = false;
    m_lambda_function_start_failed_event_details_isValid = false;

    m_lambda_function_succeeded_event_details_isSet = false;
    m_lambda_function_succeeded_event_details_isValid = false;

    m_lambda_function_timed_out_event_details_isSet = false;
    m_lambda_function_timed_out_event_details_isValid = false;

    m_state_entered_event_details_isSet = false;
    m_state_entered_event_details_isValid = false;

    m_state_exited_event_details_isSet = false;
    m_state_exited_event_details_isValid = false;

    m_map_run_started_event_details_isSet = false;
    m_map_run_started_event_details_isValid = false;

    m_map_run_failed_event_details_isSet = false;
    m_map_run_failed_event_details_isValid = false;
}

void OAIHistoryEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryEvent::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_previous_event_id_isValid = ::OpenAPI::fromJsonValue(m_previous_event_id, json[QString("previousEventId")]);
    m_previous_event_id_isSet = !json[QString("previousEventId")].isNull() && m_previous_event_id_isValid;

    m_activity_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_activity_failed_event_details, json[QString("activityFailedEventDetails")]);
    m_activity_failed_event_details_isSet = !json[QString("activityFailedEventDetails")].isNull() && m_activity_failed_event_details_isValid;

    m_activity_schedule_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_activity_schedule_failed_event_details, json[QString("activityScheduleFailedEventDetails")]);
    m_activity_schedule_failed_event_details_isSet = !json[QString("activityScheduleFailedEventDetails")].isNull() && m_activity_schedule_failed_event_details_isValid;

    m_activity_scheduled_event_details_isValid = ::OpenAPI::fromJsonValue(m_activity_scheduled_event_details, json[QString("activityScheduledEventDetails")]);
    m_activity_scheduled_event_details_isSet = !json[QString("activityScheduledEventDetails")].isNull() && m_activity_scheduled_event_details_isValid;

    m_activity_started_event_details_isValid = ::OpenAPI::fromJsonValue(m_activity_started_event_details, json[QString("activityStartedEventDetails")]);
    m_activity_started_event_details_isSet = !json[QString("activityStartedEventDetails")].isNull() && m_activity_started_event_details_isValid;

    m_activity_succeeded_event_details_isValid = ::OpenAPI::fromJsonValue(m_activity_succeeded_event_details, json[QString("activitySucceededEventDetails")]);
    m_activity_succeeded_event_details_isSet = !json[QString("activitySucceededEventDetails")].isNull() && m_activity_succeeded_event_details_isValid;

    m_activity_timed_out_event_details_isValid = ::OpenAPI::fromJsonValue(m_activity_timed_out_event_details, json[QString("activityTimedOutEventDetails")]);
    m_activity_timed_out_event_details_isSet = !json[QString("activityTimedOutEventDetails")].isNull() && m_activity_timed_out_event_details_isValid;

    m_task_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_task_failed_event_details, json[QString("taskFailedEventDetails")]);
    m_task_failed_event_details_isSet = !json[QString("taskFailedEventDetails")].isNull() && m_task_failed_event_details_isValid;

    m_task_scheduled_event_details_isValid = ::OpenAPI::fromJsonValue(m_task_scheduled_event_details, json[QString("taskScheduledEventDetails")]);
    m_task_scheduled_event_details_isSet = !json[QString("taskScheduledEventDetails")].isNull() && m_task_scheduled_event_details_isValid;

    m_task_start_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_task_start_failed_event_details, json[QString("taskStartFailedEventDetails")]);
    m_task_start_failed_event_details_isSet = !json[QString("taskStartFailedEventDetails")].isNull() && m_task_start_failed_event_details_isValid;

    m_task_started_event_details_isValid = ::OpenAPI::fromJsonValue(m_task_started_event_details, json[QString("taskStartedEventDetails")]);
    m_task_started_event_details_isSet = !json[QString("taskStartedEventDetails")].isNull() && m_task_started_event_details_isValid;

    m_task_submit_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_task_submit_failed_event_details, json[QString("taskSubmitFailedEventDetails")]);
    m_task_submit_failed_event_details_isSet = !json[QString("taskSubmitFailedEventDetails")].isNull() && m_task_submit_failed_event_details_isValid;

    m_task_submitted_event_details_isValid = ::OpenAPI::fromJsonValue(m_task_submitted_event_details, json[QString("taskSubmittedEventDetails")]);
    m_task_submitted_event_details_isSet = !json[QString("taskSubmittedEventDetails")].isNull() && m_task_submitted_event_details_isValid;

    m_task_succeeded_event_details_isValid = ::OpenAPI::fromJsonValue(m_task_succeeded_event_details, json[QString("taskSucceededEventDetails")]);
    m_task_succeeded_event_details_isSet = !json[QString("taskSucceededEventDetails")].isNull() && m_task_succeeded_event_details_isValid;

    m_task_timed_out_event_details_isValid = ::OpenAPI::fromJsonValue(m_task_timed_out_event_details, json[QString("taskTimedOutEventDetails")]);
    m_task_timed_out_event_details_isSet = !json[QString("taskTimedOutEventDetails")].isNull() && m_task_timed_out_event_details_isValid;

    m_execution_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_execution_failed_event_details, json[QString("executionFailedEventDetails")]);
    m_execution_failed_event_details_isSet = !json[QString("executionFailedEventDetails")].isNull() && m_execution_failed_event_details_isValid;

    m_execution_started_event_details_isValid = ::OpenAPI::fromJsonValue(m_execution_started_event_details, json[QString("executionStartedEventDetails")]);
    m_execution_started_event_details_isSet = !json[QString("executionStartedEventDetails")].isNull() && m_execution_started_event_details_isValid;

    m_execution_succeeded_event_details_isValid = ::OpenAPI::fromJsonValue(m_execution_succeeded_event_details, json[QString("executionSucceededEventDetails")]);
    m_execution_succeeded_event_details_isSet = !json[QString("executionSucceededEventDetails")].isNull() && m_execution_succeeded_event_details_isValid;

    m_execution_aborted_event_details_isValid = ::OpenAPI::fromJsonValue(m_execution_aborted_event_details, json[QString("executionAbortedEventDetails")]);
    m_execution_aborted_event_details_isSet = !json[QString("executionAbortedEventDetails")].isNull() && m_execution_aborted_event_details_isValid;

    m_execution_timed_out_event_details_isValid = ::OpenAPI::fromJsonValue(m_execution_timed_out_event_details, json[QString("executionTimedOutEventDetails")]);
    m_execution_timed_out_event_details_isSet = !json[QString("executionTimedOutEventDetails")].isNull() && m_execution_timed_out_event_details_isValid;

    m_map_state_started_event_details_isValid = ::OpenAPI::fromJsonValue(m_map_state_started_event_details, json[QString("mapStateStartedEventDetails")]);
    m_map_state_started_event_details_isSet = !json[QString("mapStateStartedEventDetails")].isNull() && m_map_state_started_event_details_isValid;

    m_map_iteration_started_event_details_isValid = ::OpenAPI::fromJsonValue(m_map_iteration_started_event_details, json[QString("mapIterationStartedEventDetails")]);
    m_map_iteration_started_event_details_isSet = !json[QString("mapIterationStartedEventDetails")].isNull() && m_map_iteration_started_event_details_isValid;

    m_map_iteration_succeeded_event_details_isValid = ::OpenAPI::fromJsonValue(m_map_iteration_succeeded_event_details, json[QString("mapIterationSucceededEventDetails")]);
    m_map_iteration_succeeded_event_details_isSet = !json[QString("mapIterationSucceededEventDetails")].isNull() && m_map_iteration_succeeded_event_details_isValid;

    m_map_iteration_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_map_iteration_failed_event_details, json[QString("mapIterationFailedEventDetails")]);
    m_map_iteration_failed_event_details_isSet = !json[QString("mapIterationFailedEventDetails")].isNull() && m_map_iteration_failed_event_details_isValid;

    m_map_iteration_aborted_event_details_isValid = ::OpenAPI::fromJsonValue(m_map_iteration_aborted_event_details, json[QString("mapIterationAbortedEventDetails")]);
    m_map_iteration_aborted_event_details_isSet = !json[QString("mapIterationAbortedEventDetails")].isNull() && m_map_iteration_aborted_event_details_isValid;

    m_lambda_function_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_failed_event_details, json[QString("lambdaFunctionFailedEventDetails")]);
    m_lambda_function_failed_event_details_isSet = !json[QString("lambdaFunctionFailedEventDetails")].isNull() && m_lambda_function_failed_event_details_isValid;

    m_lambda_function_schedule_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_schedule_failed_event_details, json[QString("lambdaFunctionScheduleFailedEventDetails")]);
    m_lambda_function_schedule_failed_event_details_isSet = !json[QString("lambdaFunctionScheduleFailedEventDetails")].isNull() && m_lambda_function_schedule_failed_event_details_isValid;

    m_lambda_function_scheduled_event_details_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_scheduled_event_details, json[QString("lambdaFunctionScheduledEventDetails")]);
    m_lambda_function_scheduled_event_details_isSet = !json[QString("lambdaFunctionScheduledEventDetails")].isNull() && m_lambda_function_scheduled_event_details_isValid;

    m_lambda_function_start_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_start_failed_event_details, json[QString("lambdaFunctionStartFailedEventDetails")]);
    m_lambda_function_start_failed_event_details_isSet = !json[QString("lambdaFunctionStartFailedEventDetails")].isNull() && m_lambda_function_start_failed_event_details_isValid;

    m_lambda_function_succeeded_event_details_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_succeeded_event_details, json[QString("lambdaFunctionSucceededEventDetails")]);
    m_lambda_function_succeeded_event_details_isSet = !json[QString("lambdaFunctionSucceededEventDetails")].isNull() && m_lambda_function_succeeded_event_details_isValid;

    m_lambda_function_timed_out_event_details_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_timed_out_event_details, json[QString("lambdaFunctionTimedOutEventDetails")]);
    m_lambda_function_timed_out_event_details_isSet = !json[QString("lambdaFunctionTimedOutEventDetails")].isNull() && m_lambda_function_timed_out_event_details_isValid;

    m_state_entered_event_details_isValid = ::OpenAPI::fromJsonValue(m_state_entered_event_details, json[QString("stateEnteredEventDetails")]);
    m_state_entered_event_details_isSet = !json[QString("stateEnteredEventDetails")].isNull() && m_state_entered_event_details_isValid;

    m_state_exited_event_details_isValid = ::OpenAPI::fromJsonValue(m_state_exited_event_details, json[QString("stateExitedEventDetails")]);
    m_state_exited_event_details_isSet = !json[QString("stateExitedEventDetails")].isNull() && m_state_exited_event_details_isValid;

    m_map_run_started_event_details_isValid = ::OpenAPI::fromJsonValue(m_map_run_started_event_details, json[QString("mapRunStartedEventDetails")]);
    m_map_run_started_event_details_isSet = !json[QString("mapRunStartedEventDetails")].isNull() && m_map_run_started_event_details_isValid;

    m_map_run_failed_event_details_isValid = ::OpenAPI::fromJsonValue(m_map_run_failed_event_details, json[QString("mapRunFailedEventDetails")]);
    m_map_run_failed_event_details_isSet = !json[QString("mapRunFailedEventDetails")].isNull() && m_map_run_failed_event_details_isValid;
}

QString OAIHistoryEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_previous_event_id_isSet) {
        obj.insert(QString("previousEventId"), ::OpenAPI::toJsonValue(m_previous_event_id));
    }
    if (m_activity_failed_event_details.isSet()) {
        obj.insert(QString("activityFailedEventDetails"), ::OpenAPI::toJsonValue(m_activity_failed_event_details));
    }
    if (m_activity_schedule_failed_event_details.isSet()) {
        obj.insert(QString("activityScheduleFailedEventDetails"), ::OpenAPI::toJsonValue(m_activity_schedule_failed_event_details));
    }
    if (m_activity_scheduled_event_details.isSet()) {
        obj.insert(QString("activityScheduledEventDetails"), ::OpenAPI::toJsonValue(m_activity_scheduled_event_details));
    }
    if (m_activity_started_event_details.isSet()) {
        obj.insert(QString("activityStartedEventDetails"), ::OpenAPI::toJsonValue(m_activity_started_event_details));
    }
    if (m_activity_succeeded_event_details.isSet()) {
        obj.insert(QString("activitySucceededEventDetails"), ::OpenAPI::toJsonValue(m_activity_succeeded_event_details));
    }
    if (m_activity_timed_out_event_details.isSet()) {
        obj.insert(QString("activityTimedOutEventDetails"), ::OpenAPI::toJsonValue(m_activity_timed_out_event_details));
    }
    if (m_task_failed_event_details.isSet()) {
        obj.insert(QString("taskFailedEventDetails"), ::OpenAPI::toJsonValue(m_task_failed_event_details));
    }
    if (m_task_scheduled_event_details.isSet()) {
        obj.insert(QString("taskScheduledEventDetails"), ::OpenAPI::toJsonValue(m_task_scheduled_event_details));
    }
    if (m_task_start_failed_event_details.isSet()) {
        obj.insert(QString("taskStartFailedEventDetails"), ::OpenAPI::toJsonValue(m_task_start_failed_event_details));
    }
    if (m_task_started_event_details.isSet()) {
        obj.insert(QString("taskStartedEventDetails"), ::OpenAPI::toJsonValue(m_task_started_event_details));
    }
    if (m_task_submit_failed_event_details.isSet()) {
        obj.insert(QString("taskSubmitFailedEventDetails"), ::OpenAPI::toJsonValue(m_task_submit_failed_event_details));
    }
    if (m_task_submitted_event_details.isSet()) {
        obj.insert(QString("taskSubmittedEventDetails"), ::OpenAPI::toJsonValue(m_task_submitted_event_details));
    }
    if (m_task_succeeded_event_details.isSet()) {
        obj.insert(QString("taskSucceededEventDetails"), ::OpenAPI::toJsonValue(m_task_succeeded_event_details));
    }
    if (m_task_timed_out_event_details.isSet()) {
        obj.insert(QString("taskTimedOutEventDetails"), ::OpenAPI::toJsonValue(m_task_timed_out_event_details));
    }
    if (m_execution_failed_event_details.isSet()) {
        obj.insert(QString("executionFailedEventDetails"), ::OpenAPI::toJsonValue(m_execution_failed_event_details));
    }
    if (m_execution_started_event_details.isSet()) {
        obj.insert(QString("executionStartedEventDetails"), ::OpenAPI::toJsonValue(m_execution_started_event_details));
    }
    if (m_execution_succeeded_event_details.isSet()) {
        obj.insert(QString("executionSucceededEventDetails"), ::OpenAPI::toJsonValue(m_execution_succeeded_event_details));
    }
    if (m_execution_aborted_event_details.isSet()) {
        obj.insert(QString("executionAbortedEventDetails"), ::OpenAPI::toJsonValue(m_execution_aborted_event_details));
    }
    if (m_execution_timed_out_event_details.isSet()) {
        obj.insert(QString("executionTimedOutEventDetails"), ::OpenAPI::toJsonValue(m_execution_timed_out_event_details));
    }
    if (m_map_state_started_event_details.isSet()) {
        obj.insert(QString("mapStateStartedEventDetails"), ::OpenAPI::toJsonValue(m_map_state_started_event_details));
    }
    if (m_map_iteration_started_event_details.isSet()) {
        obj.insert(QString("mapIterationStartedEventDetails"), ::OpenAPI::toJsonValue(m_map_iteration_started_event_details));
    }
    if (m_map_iteration_succeeded_event_details.isSet()) {
        obj.insert(QString("mapIterationSucceededEventDetails"), ::OpenAPI::toJsonValue(m_map_iteration_succeeded_event_details));
    }
    if (m_map_iteration_failed_event_details.isSet()) {
        obj.insert(QString("mapIterationFailedEventDetails"), ::OpenAPI::toJsonValue(m_map_iteration_failed_event_details));
    }
    if (m_map_iteration_aborted_event_details.isSet()) {
        obj.insert(QString("mapIterationAbortedEventDetails"), ::OpenAPI::toJsonValue(m_map_iteration_aborted_event_details));
    }
    if (m_lambda_function_failed_event_details.isSet()) {
        obj.insert(QString("lambdaFunctionFailedEventDetails"), ::OpenAPI::toJsonValue(m_lambda_function_failed_event_details));
    }
    if (m_lambda_function_schedule_failed_event_details.isSet()) {
        obj.insert(QString("lambdaFunctionScheduleFailedEventDetails"), ::OpenAPI::toJsonValue(m_lambda_function_schedule_failed_event_details));
    }
    if (m_lambda_function_scheduled_event_details.isSet()) {
        obj.insert(QString("lambdaFunctionScheduledEventDetails"), ::OpenAPI::toJsonValue(m_lambda_function_scheduled_event_details));
    }
    if (m_lambda_function_start_failed_event_details.isSet()) {
        obj.insert(QString("lambdaFunctionStartFailedEventDetails"), ::OpenAPI::toJsonValue(m_lambda_function_start_failed_event_details));
    }
    if (m_lambda_function_succeeded_event_details.isSet()) {
        obj.insert(QString("lambdaFunctionSucceededEventDetails"), ::OpenAPI::toJsonValue(m_lambda_function_succeeded_event_details));
    }
    if (m_lambda_function_timed_out_event_details.isSet()) {
        obj.insert(QString("lambdaFunctionTimedOutEventDetails"), ::OpenAPI::toJsonValue(m_lambda_function_timed_out_event_details));
    }
    if (m_state_entered_event_details.isSet()) {
        obj.insert(QString("stateEnteredEventDetails"), ::OpenAPI::toJsonValue(m_state_entered_event_details));
    }
    if (m_state_exited_event_details.isSet()) {
        obj.insert(QString("stateExitedEventDetails"), ::OpenAPI::toJsonValue(m_state_exited_event_details));
    }
    if (m_map_run_started_event_details.isSet()) {
        obj.insert(QString("mapRunStartedEventDetails"), ::OpenAPI::toJsonValue(m_map_run_started_event_details));
    }
    if (m_map_run_failed_event_details.isSet()) {
        obj.insert(QString("mapRunFailedEventDetails"), ::OpenAPI::toJsonValue(m_map_run_failed_event_details));
    }
    return obj;
}

QDateTime OAIHistoryEvent::getTimestamp() const {
    return m_timestamp;
}
void OAIHistoryEvent::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIHistoryEvent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIHistoryEvent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIHistoryEventType OAIHistoryEvent::getType() const {
    return m_type;
}
void OAIHistoryEvent::setType(const OAIHistoryEventType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHistoryEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHistoryEvent::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIHistoryEvent::getId() const {
    return m_id;
}
void OAIHistoryEvent::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHistoryEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHistoryEvent::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIHistoryEvent::getPreviousEventId() const {
    return m_previous_event_id;
}
void OAIHistoryEvent::setPreviousEventId(const qint32 &previous_event_id) {
    m_previous_event_id = previous_event_id;
    m_previous_event_id_isSet = true;
}

bool OAIHistoryEvent::is_previous_event_id_Set() const{
    return m_previous_event_id_isSet;
}

bool OAIHistoryEvent::is_previous_event_id_Valid() const{
    return m_previous_event_id_isValid;
}

OAIActivityFailedEventDetails OAIHistoryEvent::getActivityFailedEventDetails() const {
    return m_activity_failed_event_details;
}
void OAIHistoryEvent::setActivityFailedEventDetails(const OAIActivityFailedEventDetails &activity_failed_event_details) {
    m_activity_failed_event_details = activity_failed_event_details;
    m_activity_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_activity_failed_event_details_Set() const{
    return m_activity_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_activity_failed_event_details_Valid() const{
    return m_activity_failed_event_details_isValid;
}

OAIHistoryEvent_activityScheduleFailedEventDetails OAIHistoryEvent::getActivityScheduleFailedEventDetails() const {
    return m_activity_schedule_failed_event_details;
}
void OAIHistoryEvent::setActivityScheduleFailedEventDetails(const OAIHistoryEvent_activityScheduleFailedEventDetails &activity_schedule_failed_event_details) {
    m_activity_schedule_failed_event_details = activity_schedule_failed_event_details;
    m_activity_schedule_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_activity_schedule_failed_event_details_Set() const{
    return m_activity_schedule_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_activity_schedule_failed_event_details_Valid() const{
    return m_activity_schedule_failed_event_details_isValid;
}

OAIActivityScheduledEventDetails OAIHistoryEvent::getActivityScheduledEventDetails() const {
    return m_activity_scheduled_event_details;
}
void OAIHistoryEvent::setActivityScheduledEventDetails(const OAIActivityScheduledEventDetails &activity_scheduled_event_details) {
    m_activity_scheduled_event_details = activity_scheduled_event_details;
    m_activity_scheduled_event_details_isSet = true;
}

bool OAIHistoryEvent::is_activity_scheduled_event_details_Set() const{
    return m_activity_scheduled_event_details_isSet;
}

bool OAIHistoryEvent::is_activity_scheduled_event_details_Valid() const{
    return m_activity_scheduled_event_details_isValid;
}

OAIActivityStartedEventDetails OAIHistoryEvent::getActivityStartedEventDetails() const {
    return m_activity_started_event_details;
}
void OAIHistoryEvent::setActivityStartedEventDetails(const OAIActivityStartedEventDetails &activity_started_event_details) {
    m_activity_started_event_details = activity_started_event_details;
    m_activity_started_event_details_isSet = true;
}

bool OAIHistoryEvent::is_activity_started_event_details_Set() const{
    return m_activity_started_event_details_isSet;
}

bool OAIHistoryEvent::is_activity_started_event_details_Valid() const{
    return m_activity_started_event_details_isValid;
}

OAIActivitySucceededEventDetails OAIHistoryEvent::getActivitySucceededEventDetails() const {
    return m_activity_succeeded_event_details;
}
void OAIHistoryEvent::setActivitySucceededEventDetails(const OAIActivitySucceededEventDetails &activity_succeeded_event_details) {
    m_activity_succeeded_event_details = activity_succeeded_event_details;
    m_activity_succeeded_event_details_isSet = true;
}

bool OAIHistoryEvent::is_activity_succeeded_event_details_Set() const{
    return m_activity_succeeded_event_details_isSet;
}

bool OAIHistoryEvent::is_activity_succeeded_event_details_Valid() const{
    return m_activity_succeeded_event_details_isValid;
}

OAIActivityTimedOutEventDetails OAIHistoryEvent::getActivityTimedOutEventDetails() const {
    return m_activity_timed_out_event_details;
}
void OAIHistoryEvent::setActivityTimedOutEventDetails(const OAIActivityTimedOutEventDetails &activity_timed_out_event_details) {
    m_activity_timed_out_event_details = activity_timed_out_event_details;
    m_activity_timed_out_event_details_isSet = true;
}

bool OAIHistoryEvent::is_activity_timed_out_event_details_Set() const{
    return m_activity_timed_out_event_details_isSet;
}

bool OAIHistoryEvent::is_activity_timed_out_event_details_Valid() const{
    return m_activity_timed_out_event_details_isValid;
}

OAIHistoryEvent_taskFailedEventDetails OAIHistoryEvent::getTaskFailedEventDetails() const {
    return m_task_failed_event_details;
}
void OAIHistoryEvent::setTaskFailedEventDetails(const OAIHistoryEvent_taskFailedEventDetails &task_failed_event_details) {
    m_task_failed_event_details = task_failed_event_details;
    m_task_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_task_failed_event_details_Set() const{
    return m_task_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_task_failed_event_details_Valid() const{
    return m_task_failed_event_details_isValid;
}

OAIHistoryEvent_taskScheduledEventDetails OAIHistoryEvent::getTaskScheduledEventDetails() const {
    return m_task_scheduled_event_details;
}
void OAIHistoryEvent::setTaskScheduledEventDetails(const OAIHistoryEvent_taskScheduledEventDetails &task_scheduled_event_details) {
    m_task_scheduled_event_details = task_scheduled_event_details;
    m_task_scheduled_event_details_isSet = true;
}

bool OAIHistoryEvent::is_task_scheduled_event_details_Set() const{
    return m_task_scheduled_event_details_isSet;
}

bool OAIHistoryEvent::is_task_scheduled_event_details_Valid() const{
    return m_task_scheduled_event_details_isValid;
}

OAIHistoryEvent_taskStartFailedEventDetails OAIHistoryEvent::getTaskStartFailedEventDetails() const {
    return m_task_start_failed_event_details;
}
void OAIHistoryEvent::setTaskStartFailedEventDetails(const OAIHistoryEvent_taskStartFailedEventDetails &task_start_failed_event_details) {
    m_task_start_failed_event_details = task_start_failed_event_details;
    m_task_start_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_task_start_failed_event_details_Set() const{
    return m_task_start_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_task_start_failed_event_details_Valid() const{
    return m_task_start_failed_event_details_isValid;
}

OAIHistoryEvent_taskStartedEventDetails OAIHistoryEvent::getTaskStartedEventDetails() const {
    return m_task_started_event_details;
}
void OAIHistoryEvent::setTaskStartedEventDetails(const OAIHistoryEvent_taskStartedEventDetails &task_started_event_details) {
    m_task_started_event_details = task_started_event_details;
    m_task_started_event_details_isSet = true;
}

bool OAIHistoryEvent::is_task_started_event_details_Set() const{
    return m_task_started_event_details_isSet;
}

bool OAIHistoryEvent::is_task_started_event_details_Valid() const{
    return m_task_started_event_details_isValid;
}

OAIHistoryEvent_taskSubmitFailedEventDetails OAIHistoryEvent::getTaskSubmitFailedEventDetails() const {
    return m_task_submit_failed_event_details;
}
void OAIHistoryEvent::setTaskSubmitFailedEventDetails(const OAIHistoryEvent_taskSubmitFailedEventDetails &task_submit_failed_event_details) {
    m_task_submit_failed_event_details = task_submit_failed_event_details;
    m_task_submit_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_task_submit_failed_event_details_Set() const{
    return m_task_submit_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_task_submit_failed_event_details_Valid() const{
    return m_task_submit_failed_event_details_isValid;
}

OAIHistoryEvent_taskSubmittedEventDetails OAIHistoryEvent::getTaskSubmittedEventDetails() const {
    return m_task_submitted_event_details;
}
void OAIHistoryEvent::setTaskSubmittedEventDetails(const OAIHistoryEvent_taskSubmittedEventDetails &task_submitted_event_details) {
    m_task_submitted_event_details = task_submitted_event_details;
    m_task_submitted_event_details_isSet = true;
}

bool OAIHistoryEvent::is_task_submitted_event_details_Set() const{
    return m_task_submitted_event_details_isSet;
}

bool OAIHistoryEvent::is_task_submitted_event_details_Valid() const{
    return m_task_submitted_event_details_isValid;
}

OAIHistoryEvent_taskSucceededEventDetails OAIHistoryEvent::getTaskSucceededEventDetails() const {
    return m_task_succeeded_event_details;
}
void OAIHistoryEvent::setTaskSucceededEventDetails(const OAIHistoryEvent_taskSucceededEventDetails &task_succeeded_event_details) {
    m_task_succeeded_event_details = task_succeeded_event_details;
    m_task_succeeded_event_details_isSet = true;
}

bool OAIHistoryEvent::is_task_succeeded_event_details_Set() const{
    return m_task_succeeded_event_details_isSet;
}

bool OAIHistoryEvent::is_task_succeeded_event_details_Valid() const{
    return m_task_succeeded_event_details_isValid;
}

OAIHistoryEvent_taskTimedOutEventDetails OAIHistoryEvent::getTaskTimedOutEventDetails() const {
    return m_task_timed_out_event_details;
}
void OAIHistoryEvent::setTaskTimedOutEventDetails(const OAIHistoryEvent_taskTimedOutEventDetails &task_timed_out_event_details) {
    m_task_timed_out_event_details = task_timed_out_event_details;
    m_task_timed_out_event_details_isSet = true;
}

bool OAIHistoryEvent::is_task_timed_out_event_details_Set() const{
    return m_task_timed_out_event_details_isSet;
}

bool OAIHistoryEvent::is_task_timed_out_event_details_Valid() const{
    return m_task_timed_out_event_details_isValid;
}

OAIExecutionFailedEventDetails OAIHistoryEvent::getExecutionFailedEventDetails() const {
    return m_execution_failed_event_details;
}
void OAIHistoryEvent::setExecutionFailedEventDetails(const OAIExecutionFailedEventDetails &execution_failed_event_details) {
    m_execution_failed_event_details = execution_failed_event_details;
    m_execution_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_execution_failed_event_details_Set() const{
    return m_execution_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_execution_failed_event_details_Valid() const{
    return m_execution_failed_event_details_isValid;
}

OAIExecutionStartedEventDetails OAIHistoryEvent::getExecutionStartedEventDetails() const {
    return m_execution_started_event_details;
}
void OAIHistoryEvent::setExecutionStartedEventDetails(const OAIExecutionStartedEventDetails &execution_started_event_details) {
    m_execution_started_event_details = execution_started_event_details;
    m_execution_started_event_details_isSet = true;
}

bool OAIHistoryEvent::is_execution_started_event_details_Set() const{
    return m_execution_started_event_details_isSet;
}

bool OAIHistoryEvent::is_execution_started_event_details_Valid() const{
    return m_execution_started_event_details_isValid;
}

OAIExecutionSucceededEventDetails OAIHistoryEvent::getExecutionSucceededEventDetails() const {
    return m_execution_succeeded_event_details;
}
void OAIHistoryEvent::setExecutionSucceededEventDetails(const OAIExecutionSucceededEventDetails &execution_succeeded_event_details) {
    m_execution_succeeded_event_details = execution_succeeded_event_details;
    m_execution_succeeded_event_details_isSet = true;
}

bool OAIHistoryEvent::is_execution_succeeded_event_details_Set() const{
    return m_execution_succeeded_event_details_isSet;
}

bool OAIHistoryEvent::is_execution_succeeded_event_details_Valid() const{
    return m_execution_succeeded_event_details_isValid;
}

OAIExecutionAbortedEventDetails OAIHistoryEvent::getExecutionAbortedEventDetails() const {
    return m_execution_aborted_event_details;
}
void OAIHistoryEvent::setExecutionAbortedEventDetails(const OAIExecutionAbortedEventDetails &execution_aborted_event_details) {
    m_execution_aborted_event_details = execution_aborted_event_details;
    m_execution_aborted_event_details_isSet = true;
}

bool OAIHistoryEvent::is_execution_aborted_event_details_Set() const{
    return m_execution_aborted_event_details_isSet;
}

bool OAIHistoryEvent::is_execution_aborted_event_details_Valid() const{
    return m_execution_aborted_event_details_isValid;
}

OAIExecutionTimedOutEventDetails OAIHistoryEvent::getExecutionTimedOutEventDetails() const {
    return m_execution_timed_out_event_details;
}
void OAIHistoryEvent::setExecutionTimedOutEventDetails(const OAIExecutionTimedOutEventDetails &execution_timed_out_event_details) {
    m_execution_timed_out_event_details = execution_timed_out_event_details;
    m_execution_timed_out_event_details_isSet = true;
}

bool OAIHistoryEvent::is_execution_timed_out_event_details_Set() const{
    return m_execution_timed_out_event_details_isSet;
}

bool OAIHistoryEvent::is_execution_timed_out_event_details_Valid() const{
    return m_execution_timed_out_event_details_isValid;
}

OAIHistoryEvent_mapStateStartedEventDetails OAIHistoryEvent::getMapStateStartedEventDetails() const {
    return m_map_state_started_event_details;
}
void OAIHistoryEvent::setMapStateStartedEventDetails(const OAIHistoryEvent_mapStateStartedEventDetails &map_state_started_event_details) {
    m_map_state_started_event_details = map_state_started_event_details;
    m_map_state_started_event_details_isSet = true;
}

bool OAIHistoryEvent::is_map_state_started_event_details_Set() const{
    return m_map_state_started_event_details_isSet;
}

bool OAIHistoryEvent::is_map_state_started_event_details_Valid() const{
    return m_map_state_started_event_details_isValid;
}

OAIHistoryEvent_mapIterationStartedEventDetails OAIHistoryEvent::getMapIterationStartedEventDetails() const {
    return m_map_iteration_started_event_details;
}
void OAIHistoryEvent::setMapIterationStartedEventDetails(const OAIHistoryEvent_mapIterationStartedEventDetails &map_iteration_started_event_details) {
    m_map_iteration_started_event_details = map_iteration_started_event_details;
    m_map_iteration_started_event_details_isSet = true;
}

bool OAIHistoryEvent::is_map_iteration_started_event_details_Set() const{
    return m_map_iteration_started_event_details_isSet;
}

bool OAIHistoryEvent::is_map_iteration_started_event_details_Valid() const{
    return m_map_iteration_started_event_details_isValid;
}

OAIHistoryEvent_mapIterationSucceededEventDetails OAIHistoryEvent::getMapIterationSucceededEventDetails() const {
    return m_map_iteration_succeeded_event_details;
}
void OAIHistoryEvent::setMapIterationSucceededEventDetails(const OAIHistoryEvent_mapIterationSucceededEventDetails &map_iteration_succeeded_event_details) {
    m_map_iteration_succeeded_event_details = map_iteration_succeeded_event_details;
    m_map_iteration_succeeded_event_details_isSet = true;
}

bool OAIHistoryEvent::is_map_iteration_succeeded_event_details_Set() const{
    return m_map_iteration_succeeded_event_details_isSet;
}

bool OAIHistoryEvent::is_map_iteration_succeeded_event_details_Valid() const{
    return m_map_iteration_succeeded_event_details_isValid;
}

OAIHistoryEvent_mapIterationFailedEventDetails OAIHistoryEvent::getMapIterationFailedEventDetails() const {
    return m_map_iteration_failed_event_details;
}
void OAIHistoryEvent::setMapIterationFailedEventDetails(const OAIHistoryEvent_mapIterationFailedEventDetails &map_iteration_failed_event_details) {
    m_map_iteration_failed_event_details = map_iteration_failed_event_details;
    m_map_iteration_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_map_iteration_failed_event_details_Set() const{
    return m_map_iteration_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_map_iteration_failed_event_details_Valid() const{
    return m_map_iteration_failed_event_details_isValid;
}

OAIHistoryEvent_mapIterationAbortedEventDetails OAIHistoryEvent::getMapIterationAbortedEventDetails() const {
    return m_map_iteration_aborted_event_details;
}
void OAIHistoryEvent::setMapIterationAbortedEventDetails(const OAIHistoryEvent_mapIterationAbortedEventDetails &map_iteration_aborted_event_details) {
    m_map_iteration_aborted_event_details = map_iteration_aborted_event_details;
    m_map_iteration_aborted_event_details_isSet = true;
}

bool OAIHistoryEvent::is_map_iteration_aborted_event_details_Set() const{
    return m_map_iteration_aborted_event_details_isSet;
}

bool OAIHistoryEvent::is_map_iteration_aborted_event_details_Valid() const{
    return m_map_iteration_aborted_event_details_isValid;
}

OAILambdaFunctionFailedEventDetails OAIHistoryEvent::getLambdaFunctionFailedEventDetails() const {
    return m_lambda_function_failed_event_details;
}
void OAIHistoryEvent::setLambdaFunctionFailedEventDetails(const OAILambdaFunctionFailedEventDetails &lambda_function_failed_event_details) {
    m_lambda_function_failed_event_details = lambda_function_failed_event_details;
    m_lambda_function_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_failed_event_details_Set() const{
    return m_lambda_function_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_lambda_function_failed_event_details_Valid() const{
    return m_lambda_function_failed_event_details_isValid;
}

OAILambdaFunctionScheduleFailedEventDetails OAIHistoryEvent::getLambdaFunctionScheduleFailedEventDetails() const {
    return m_lambda_function_schedule_failed_event_details;
}
void OAIHistoryEvent::setLambdaFunctionScheduleFailedEventDetails(const OAILambdaFunctionScheduleFailedEventDetails &lambda_function_schedule_failed_event_details) {
    m_lambda_function_schedule_failed_event_details = lambda_function_schedule_failed_event_details;
    m_lambda_function_schedule_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_schedule_failed_event_details_Set() const{
    return m_lambda_function_schedule_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_lambda_function_schedule_failed_event_details_Valid() const{
    return m_lambda_function_schedule_failed_event_details_isValid;
}

OAILambdaFunctionScheduledEventDetails OAIHistoryEvent::getLambdaFunctionScheduledEventDetails() const {
    return m_lambda_function_scheduled_event_details;
}
void OAIHistoryEvent::setLambdaFunctionScheduledEventDetails(const OAILambdaFunctionScheduledEventDetails &lambda_function_scheduled_event_details) {
    m_lambda_function_scheduled_event_details = lambda_function_scheduled_event_details;
    m_lambda_function_scheduled_event_details_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_scheduled_event_details_Set() const{
    return m_lambda_function_scheduled_event_details_isSet;
}

bool OAIHistoryEvent::is_lambda_function_scheduled_event_details_Valid() const{
    return m_lambda_function_scheduled_event_details_isValid;
}

OAIHistoryEvent_lambdaFunctionStartFailedEventDetails OAIHistoryEvent::getLambdaFunctionStartFailedEventDetails() const {
    return m_lambda_function_start_failed_event_details;
}
void OAIHistoryEvent::setLambdaFunctionStartFailedEventDetails(const OAIHistoryEvent_lambdaFunctionStartFailedEventDetails &lambda_function_start_failed_event_details) {
    m_lambda_function_start_failed_event_details = lambda_function_start_failed_event_details;
    m_lambda_function_start_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_start_failed_event_details_Set() const{
    return m_lambda_function_start_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_lambda_function_start_failed_event_details_Valid() const{
    return m_lambda_function_start_failed_event_details_isValid;
}

OAIHistoryEvent_lambdaFunctionSucceededEventDetails OAIHistoryEvent::getLambdaFunctionSucceededEventDetails() const {
    return m_lambda_function_succeeded_event_details;
}
void OAIHistoryEvent::setLambdaFunctionSucceededEventDetails(const OAIHistoryEvent_lambdaFunctionSucceededEventDetails &lambda_function_succeeded_event_details) {
    m_lambda_function_succeeded_event_details = lambda_function_succeeded_event_details;
    m_lambda_function_succeeded_event_details_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_succeeded_event_details_Set() const{
    return m_lambda_function_succeeded_event_details_isSet;
}

bool OAIHistoryEvent::is_lambda_function_succeeded_event_details_Valid() const{
    return m_lambda_function_succeeded_event_details_isValid;
}

OAILambdaFunctionTimedOutEventDetails OAIHistoryEvent::getLambdaFunctionTimedOutEventDetails() const {
    return m_lambda_function_timed_out_event_details;
}
void OAIHistoryEvent::setLambdaFunctionTimedOutEventDetails(const OAILambdaFunctionTimedOutEventDetails &lambda_function_timed_out_event_details) {
    m_lambda_function_timed_out_event_details = lambda_function_timed_out_event_details;
    m_lambda_function_timed_out_event_details_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_timed_out_event_details_Set() const{
    return m_lambda_function_timed_out_event_details_isSet;
}

bool OAIHistoryEvent::is_lambda_function_timed_out_event_details_Valid() const{
    return m_lambda_function_timed_out_event_details_isValid;
}

OAIStateEnteredEventDetails OAIHistoryEvent::getStateEnteredEventDetails() const {
    return m_state_entered_event_details;
}
void OAIHistoryEvent::setStateEnteredEventDetails(const OAIStateEnteredEventDetails &state_entered_event_details) {
    m_state_entered_event_details = state_entered_event_details;
    m_state_entered_event_details_isSet = true;
}

bool OAIHistoryEvent::is_state_entered_event_details_Set() const{
    return m_state_entered_event_details_isSet;
}

bool OAIHistoryEvent::is_state_entered_event_details_Valid() const{
    return m_state_entered_event_details_isValid;
}

OAIStateExitedEventDetails OAIHistoryEvent::getStateExitedEventDetails() const {
    return m_state_exited_event_details;
}
void OAIHistoryEvent::setStateExitedEventDetails(const OAIStateExitedEventDetails &state_exited_event_details) {
    m_state_exited_event_details = state_exited_event_details;
    m_state_exited_event_details_isSet = true;
}

bool OAIHistoryEvent::is_state_exited_event_details_Set() const{
    return m_state_exited_event_details_isSet;
}

bool OAIHistoryEvent::is_state_exited_event_details_Valid() const{
    return m_state_exited_event_details_isValid;
}

OAIHistoryEvent_mapRunStartedEventDetails OAIHistoryEvent::getMapRunStartedEventDetails() const {
    return m_map_run_started_event_details;
}
void OAIHistoryEvent::setMapRunStartedEventDetails(const OAIHistoryEvent_mapRunStartedEventDetails &map_run_started_event_details) {
    m_map_run_started_event_details = map_run_started_event_details;
    m_map_run_started_event_details_isSet = true;
}

bool OAIHistoryEvent::is_map_run_started_event_details_Set() const{
    return m_map_run_started_event_details_isSet;
}

bool OAIHistoryEvent::is_map_run_started_event_details_Valid() const{
    return m_map_run_started_event_details_isValid;
}

OAIHistoryEvent_mapRunFailedEventDetails OAIHistoryEvent::getMapRunFailedEventDetails() const {
    return m_map_run_failed_event_details;
}
void OAIHistoryEvent::setMapRunFailedEventDetails(const OAIHistoryEvent_mapRunFailedEventDetails &map_run_failed_event_details) {
    m_map_run_failed_event_details = map_run_failed_event_details;
    m_map_run_failed_event_details_isSet = true;
}

bool OAIHistoryEvent::is_map_run_failed_event_details_Set() const{
    return m_map_run_failed_event_details_isSet;
}

bool OAIHistoryEvent::is_map_run_failed_event_details_Valid() const{
    return m_map_run_failed_event_details_isValid;
}

bool OAIHistoryEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_schedule_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_scheduled_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_started_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_succeeded_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_timed_out_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_scheduled_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_start_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_started_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_submit_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_submitted_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_succeeded_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_timed_out_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_started_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_succeeded_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_aborted_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_timed_out_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_state_started_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_iteration_started_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_iteration_succeeded_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_iteration_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_iteration_aborted_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_schedule_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_scheduled_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_start_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_succeeded_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_timed_out_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_entered_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_exited_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_run_started_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_run_failed_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamp_isValid && m_type_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
