/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStateMachineForExecutionOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStateMachineForExecutionOutput::OAIDescribeStateMachineForExecutionOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStateMachineForExecutionOutput::OAIDescribeStateMachineForExecutionOutput() {
    this->initializeModel();
}

OAIDescribeStateMachineForExecutionOutput::~OAIDescribeStateMachineForExecutionOutput() {}

void OAIDescribeStateMachineForExecutionOutput::initializeModel() {

    m_state_machine_arn_isSet = false;
    m_state_machine_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_logging_configuration_isSet = false;
    m_logging_configuration_isValid = false;

    m_tracing_configuration_isSet = false;
    m_tracing_configuration_isValid = false;

    m_map_run_arn_isSet = false;
    m_map_run_arn_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;
}

void OAIDescribeStateMachineForExecutionOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStateMachineForExecutionOutput::fromJsonObject(QJsonObject json) {

    m_state_machine_arn_isValid = ::OpenAPI::fromJsonValue(m_state_machine_arn, json[QString("stateMachineArn")]);
    m_state_machine_arn_isSet = !json[QString("stateMachineArn")].isNull() && m_state_machine_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("updateDate")]);
    m_update_date_isSet = !json[QString("updateDate")].isNull() && m_update_date_isValid;

    m_logging_configuration_isValid = ::OpenAPI::fromJsonValue(m_logging_configuration, json[QString("loggingConfiguration")]);
    m_logging_configuration_isSet = !json[QString("loggingConfiguration")].isNull() && m_logging_configuration_isValid;

    m_tracing_configuration_isValid = ::OpenAPI::fromJsonValue(m_tracing_configuration, json[QString("tracingConfiguration")]);
    m_tracing_configuration_isSet = !json[QString("tracingConfiguration")].isNull() && m_tracing_configuration_isValid;

    m_map_run_arn_isValid = ::OpenAPI::fromJsonValue(m_map_run_arn, json[QString("mapRunArn")]);
    m_map_run_arn_isSet = !json[QString("mapRunArn")].isNull() && m_map_run_arn_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;
}

QString OAIDescribeStateMachineForExecutionOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStateMachineForExecutionOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_state_machine_arn_isSet) {
        obj.insert(QString("stateMachineArn"), ::OpenAPI::toJsonValue(m_state_machine_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("updateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_logging_configuration.isSet()) {
        obj.insert(QString("loggingConfiguration"), ::OpenAPI::toJsonValue(m_logging_configuration));
    }
    if (m_tracing_configuration.isSet()) {
        obj.insert(QString("tracingConfiguration"), ::OpenAPI::toJsonValue(m_tracing_configuration));
    }
    if (m_map_run_arn_isSet) {
        obj.insert(QString("mapRunArn"), ::OpenAPI::toJsonValue(m_map_run_arn));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    return obj;
}

QString OAIDescribeStateMachineForExecutionOutput::getStateMachineArn() const {
    return m_state_machine_arn;
}
void OAIDescribeStateMachineForExecutionOutput::setStateMachineArn(const QString &state_machine_arn) {
    m_state_machine_arn = state_machine_arn;
    m_state_machine_arn_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_state_machine_arn_Set() const{
    return m_state_machine_arn_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_state_machine_arn_Valid() const{
    return m_state_machine_arn_isValid;
}

QString OAIDescribeStateMachineForExecutionOutput::getName() const {
    return m_name;
}
void OAIDescribeStateMachineForExecutionOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeStateMachineForExecutionOutput::getDefinition() const {
    return m_definition;
}
void OAIDescribeStateMachineForExecutionOutput::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIDescribeStateMachineForExecutionOutput::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeStateMachineForExecutionOutput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIDescribeStateMachineForExecutionOutput::getUpdateDate() const {
    return m_update_date;
}
void OAIDescribeStateMachineForExecutionOutput::setUpdateDate(const QDateTime &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_update_date_Valid() const{
    return m_update_date_isValid;
}

OAILoggingConfiguration OAIDescribeStateMachineForExecutionOutput::getLoggingConfiguration() const {
    return m_logging_configuration;
}
void OAIDescribeStateMachineForExecutionOutput::setLoggingConfiguration(const OAILoggingConfiguration &logging_configuration) {
    m_logging_configuration = logging_configuration;
    m_logging_configuration_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_logging_configuration_Set() const{
    return m_logging_configuration_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_logging_configuration_Valid() const{
    return m_logging_configuration_isValid;
}

OAICreateStateMachineInput_tracingConfiguration OAIDescribeStateMachineForExecutionOutput::getTracingConfiguration() const {
    return m_tracing_configuration;
}
void OAIDescribeStateMachineForExecutionOutput::setTracingConfiguration(const OAICreateStateMachineInput_tracingConfiguration &tracing_configuration) {
    m_tracing_configuration = tracing_configuration;
    m_tracing_configuration_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_tracing_configuration_Set() const{
    return m_tracing_configuration_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_tracing_configuration_Valid() const{
    return m_tracing_configuration_isValid;
}

QString OAIDescribeStateMachineForExecutionOutput::getMapRunArn() const {
    return m_map_run_arn;
}
void OAIDescribeStateMachineForExecutionOutput::setMapRunArn(const QString &map_run_arn) {
    m_map_run_arn = map_run_arn;
    m_map_run_arn_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_map_run_arn_Set() const{
    return m_map_run_arn_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_map_run_arn_Valid() const{
    return m_map_run_arn_isValid;
}

QString OAIDescribeStateMachineForExecutionOutput::getLabel() const {
    return m_label;
}
void OAIDescribeStateMachineForExecutionOutput::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_label_Set() const{
    return m_label_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIDescribeStateMachineForExecutionOutput::getRevisionId() const {
    return m_revision_id;
}
void OAIDescribeStateMachineForExecutionOutput::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIDescribeStateMachineForExecutionOutput::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIDescribeStateMachineForExecutionOutput::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

bool OAIDescribeStateMachineForExecutionOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_machine_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_run_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStateMachineForExecutionOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_machine_arn_isValid && m_name_isValid && m_definition_isValid && m_role_arn_isValid && m_update_date_isValid && true;
}

} // namespace OpenAPI
