/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHistoryEvent_taskSubmitFailedEventDetails.h
 *
 * 
 */

#ifndef OAIHistoryEvent_taskSubmitFailedEventDetails_H
#define OAIHistoryEvent_taskSubmitFailedEventDetails_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHistoryEvent_taskSubmitFailedEventDetails : public OAIObject {
public:
    OAIHistoryEvent_taskSubmitFailedEventDetails();
    OAIHistoryEvent_taskSubmitFailedEventDetails(QString json);
    ~OAIHistoryEvent_taskSubmitFailedEventDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QString getResource() const;
    void setResource(const QString &resource);
    bool is_resource_Set() const;
    bool is_resource_Valid() const;

    QString getError() const;
    void setError(const QString &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    QString getCause() const;
    void setCause(const QString &cause);
    bool is_cause_Set() const;
    bool is_cause_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QString m_resource;
    bool m_resource_isSet;
    bool m_resource_isValid;

    QString m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    QString m_cause;
    bool m_cause_isSet;
    bool m_cause_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHistoryEvent_taskSubmitFailedEventDetails)

#endif // OAIHistoryEvent_taskSubmitFailedEventDetails_H
