/**
 * AWS Step Functions
 * <fullname>Step Functions</fullname> <p>Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.</p> <p>You can use Step Functions to build applications from individual components, each of which performs a discrete function, or <i>task</i>, allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.</p> <p>Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on Amazon Web Services, your own servers, or any system that has access to Amazon Web Services. You can access and use Step Functions using the console, the Amazon Web Services SDKs, or an HTTP API. For more information about Step Functions, see the <i> <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\">Step Functions Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeMapRunOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeMapRunOutput::OAIDescribeMapRunOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeMapRunOutput::OAIDescribeMapRunOutput() {
    this->initializeModel();
}

OAIDescribeMapRunOutput::~OAIDescribeMapRunOutput() {}

void OAIDescribeMapRunOutput::initializeModel() {

    m_map_run_arn_isSet = false;
    m_map_run_arn_isValid = false;

    m_execution_arn_isSet = false;
    m_execution_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_stop_date_isSet = false;
    m_stop_date_isValid = false;

    m_max_concurrency_isSet = false;
    m_max_concurrency_isValid = false;

    m_tolerated_failure_percentage_isSet = false;
    m_tolerated_failure_percentage_isValid = false;

    m_tolerated_failure_count_isSet = false;
    m_tolerated_failure_count_isValid = false;

    m_item_counts_isSet = false;
    m_item_counts_isValid = false;

    m_execution_counts_isSet = false;
    m_execution_counts_isValid = false;
}

void OAIDescribeMapRunOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeMapRunOutput::fromJsonObject(QJsonObject json) {

    m_map_run_arn_isValid = ::OpenAPI::fromJsonValue(m_map_run_arn, json[QString("mapRunArn")]);
    m_map_run_arn_isSet = !json[QString("mapRunArn")].isNull() && m_map_run_arn_isValid;

    m_execution_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_arn, json[QString("executionArn")]);
    m_execution_arn_isSet = !json[QString("executionArn")].isNull() && m_execution_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_stop_date_isValid = ::OpenAPI::fromJsonValue(m_stop_date, json[QString("stopDate")]);
    m_stop_date_isSet = !json[QString("stopDate")].isNull() && m_stop_date_isValid;

    m_max_concurrency_isValid = ::OpenAPI::fromJsonValue(m_max_concurrency, json[QString("maxConcurrency")]);
    m_max_concurrency_isSet = !json[QString("maxConcurrency")].isNull() && m_max_concurrency_isValid;

    m_tolerated_failure_percentage_isValid = ::OpenAPI::fromJsonValue(m_tolerated_failure_percentage, json[QString("toleratedFailurePercentage")]);
    m_tolerated_failure_percentage_isSet = !json[QString("toleratedFailurePercentage")].isNull() && m_tolerated_failure_percentage_isValid;

    m_tolerated_failure_count_isValid = ::OpenAPI::fromJsonValue(m_tolerated_failure_count, json[QString("toleratedFailureCount")]);
    m_tolerated_failure_count_isSet = !json[QString("toleratedFailureCount")].isNull() && m_tolerated_failure_count_isValid;

    m_item_counts_isValid = ::OpenAPI::fromJsonValue(m_item_counts, json[QString("itemCounts")]);
    m_item_counts_isSet = !json[QString("itemCounts")].isNull() && m_item_counts_isValid;

    m_execution_counts_isValid = ::OpenAPI::fromJsonValue(m_execution_counts, json[QString("executionCounts")]);
    m_execution_counts_isSet = !json[QString("executionCounts")].isNull() && m_execution_counts_isValid;
}

QString OAIDescribeMapRunOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeMapRunOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_map_run_arn_isSet) {
        obj.insert(QString("mapRunArn"), ::OpenAPI::toJsonValue(m_map_run_arn));
    }
    if (m_execution_arn_isSet) {
        obj.insert(QString("executionArn"), ::OpenAPI::toJsonValue(m_execution_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_stop_date_isSet) {
        obj.insert(QString("stopDate"), ::OpenAPI::toJsonValue(m_stop_date));
    }
    if (m_max_concurrency_isSet) {
        obj.insert(QString("maxConcurrency"), ::OpenAPI::toJsonValue(m_max_concurrency));
    }
    if (m_tolerated_failure_percentage_isSet) {
        obj.insert(QString("toleratedFailurePercentage"), ::OpenAPI::toJsonValue(m_tolerated_failure_percentage));
    }
    if (m_tolerated_failure_count_isSet) {
        obj.insert(QString("toleratedFailureCount"), ::OpenAPI::toJsonValue(m_tolerated_failure_count));
    }
    if (m_item_counts.isSet()) {
        obj.insert(QString("itemCounts"), ::OpenAPI::toJsonValue(m_item_counts));
    }
    if (m_execution_counts.isSet()) {
        obj.insert(QString("executionCounts"), ::OpenAPI::toJsonValue(m_execution_counts));
    }
    return obj;
}

QString OAIDescribeMapRunOutput::getMapRunArn() const {
    return m_map_run_arn;
}
void OAIDescribeMapRunOutput::setMapRunArn(const QString &map_run_arn) {
    m_map_run_arn = map_run_arn;
    m_map_run_arn_isSet = true;
}

bool OAIDescribeMapRunOutput::is_map_run_arn_Set() const{
    return m_map_run_arn_isSet;
}

bool OAIDescribeMapRunOutput::is_map_run_arn_Valid() const{
    return m_map_run_arn_isValid;
}

QString OAIDescribeMapRunOutput::getExecutionArn() const {
    return m_execution_arn;
}
void OAIDescribeMapRunOutput::setExecutionArn(const QString &execution_arn) {
    m_execution_arn = execution_arn;
    m_execution_arn_isSet = true;
}

bool OAIDescribeMapRunOutput::is_execution_arn_Set() const{
    return m_execution_arn_isSet;
}

bool OAIDescribeMapRunOutput::is_execution_arn_Valid() const{
    return m_execution_arn_isValid;
}

OAIMapRunStatus OAIDescribeMapRunOutput::getStatus() const {
    return m_status;
}
void OAIDescribeMapRunOutput::setStatus(const OAIMapRunStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeMapRunOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeMapRunOutput::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeMapRunOutput::getStartDate() const {
    return m_start_date;
}
void OAIDescribeMapRunOutput::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDescribeMapRunOutput::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDescribeMapRunOutput::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIDescribeMapRunOutput::getStopDate() const {
    return m_stop_date;
}
void OAIDescribeMapRunOutput::setStopDate(const QDateTime &stop_date) {
    m_stop_date = stop_date;
    m_stop_date_isSet = true;
}

bool OAIDescribeMapRunOutput::is_stop_date_Set() const{
    return m_stop_date_isSet;
}

bool OAIDescribeMapRunOutput::is_stop_date_Valid() const{
    return m_stop_date_isValid;
}

qint32 OAIDescribeMapRunOutput::getMaxConcurrency() const {
    return m_max_concurrency;
}
void OAIDescribeMapRunOutput::setMaxConcurrency(const qint32 &max_concurrency) {
    m_max_concurrency = max_concurrency;
    m_max_concurrency_isSet = true;
}

bool OAIDescribeMapRunOutput::is_max_concurrency_Set() const{
    return m_max_concurrency_isSet;
}

bool OAIDescribeMapRunOutput::is_max_concurrency_Valid() const{
    return m_max_concurrency_isValid;
}

float OAIDescribeMapRunOutput::getToleratedFailurePercentage() const {
    return m_tolerated_failure_percentage;
}
void OAIDescribeMapRunOutput::setToleratedFailurePercentage(const float &tolerated_failure_percentage) {
    m_tolerated_failure_percentage = tolerated_failure_percentage;
    m_tolerated_failure_percentage_isSet = true;
}

bool OAIDescribeMapRunOutput::is_tolerated_failure_percentage_Set() const{
    return m_tolerated_failure_percentage_isSet;
}

bool OAIDescribeMapRunOutput::is_tolerated_failure_percentage_Valid() const{
    return m_tolerated_failure_percentage_isValid;
}

qint32 OAIDescribeMapRunOutput::getToleratedFailureCount() const {
    return m_tolerated_failure_count;
}
void OAIDescribeMapRunOutput::setToleratedFailureCount(const qint32 &tolerated_failure_count) {
    m_tolerated_failure_count = tolerated_failure_count;
    m_tolerated_failure_count_isSet = true;
}

bool OAIDescribeMapRunOutput::is_tolerated_failure_count_Set() const{
    return m_tolerated_failure_count_isSet;
}

bool OAIDescribeMapRunOutput::is_tolerated_failure_count_Valid() const{
    return m_tolerated_failure_count_isValid;
}

OAIDescribeMapRunOutput_itemCounts OAIDescribeMapRunOutput::getItemCounts() const {
    return m_item_counts;
}
void OAIDescribeMapRunOutput::setItemCounts(const OAIDescribeMapRunOutput_itemCounts &item_counts) {
    m_item_counts = item_counts;
    m_item_counts_isSet = true;
}

bool OAIDescribeMapRunOutput::is_item_counts_Set() const{
    return m_item_counts_isSet;
}

bool OAIDescribeMapRunOutput::is_item_counts_Valid() const{
    return m_item_counts_isValid;
}

OAIDescribeMapRunOutput_executionCounts OAIDescribeMapRunOutput::getExecutionCounts() const {
    return m_execution_counts;
}
void OAIDescribeMapRunOutput::setExecutionCounts(const OAIDescribeMapRunOutput_executionCounts &execution_counts) {
    m_execution_counts = execution_counts;
    m_execution_counts_isSet = true;
}

bool OAIDescribeMapRunOutput::is_execution_counts_Set() const{
    return m_execution_counts_isSet;
}

bool OAIDescribeMapRunOutput::is_execution_counts_Valid() const{
    return m_execution_counts_isValid;
}

bool OAIDescribeMapRunOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_map_run_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerated_failure_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerated_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeMapRunOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_map_run_arn_isValid && m_execution_arn_isValid && m_status_isValid && m_start_date_isValid && m_max_concurrency_isValid && m_tolerated_failure_percentage_isValid && m_tolerated_failure_count_isValid && m_item_counts_isValid && m_execution_counts_isValid && true;
}

} // namespace OpenAPI
