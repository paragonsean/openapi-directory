/*
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DescribeJobExecutionResponse;
import org.openapitools.client.model.GetPendingJobExecutionsResponse;
import org.openapitools.client.model.StartNextPendingJobExecutionRequest;
import org.openapitools.client.model.StartNextPendingJobExecutionResponse;
import org.openapitools.client.model.UpdateJobExecutionRequest;
import org.openapitools.client.model.UpdateJobExecutionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Gets details of a job execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeJobExecutionTest() throws ApiException {
        String jobId = null;
        String thingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean includeJobDocument = null;
        Integer executionNumber = null;
        DescribeJobExecutionResponse response = api.describeJobExecution(jobId, thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeJobDocument, executionNumber);
        // TODO: test validations
    }

    /**
     * Gets the list of all jobs for a thing that are not in a terminal status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPendingJobExecutionsTest() throws ApiException {
        String thingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPendingJobExecutionsResponse response = api.getPendingJobExecutions(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets and starts the next pending (status IN_PROGRESS or QUEUED) job execution for a thing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startNextPendingJobExecutionTest() throws ApiException {
        String thingName = null;
        StartNextPendingJobExecutionRequest startNextPendingJobExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartNextPendingJobExecutionResponse response = api.startNextPendingJobExecution(thingName, startNextPendingJobExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the status of a job execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobExecutionTest() throws ApiException {
        String jobId = null;
        String thingName = null;
        UpdateJobExecutionRequest updateJobExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateJobExecutionResponse response = api.updateJobExecution(jobId, thingName, updateJobExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
