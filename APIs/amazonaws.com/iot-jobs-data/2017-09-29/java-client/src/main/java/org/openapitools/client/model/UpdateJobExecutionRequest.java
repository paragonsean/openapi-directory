/*
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateJobExecutionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:58.037690-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateJobExecutionRequest {
  /**
   * The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("QUEUED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    TIMED_OUT("TIMED_OUT"),
    
    REJECTED("REJECTED"),
    
    REMOVED("REMOVED"),
    
    CANCELED("CANCELED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private Map<String, String> statusDetails = new HashMap<>();

  public static final String SERIALIZED_NAME_STEP_TIMEOUT_IN_MINUTES = "stepTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_STEP_TIMEOUT_IN_MINUTES)
  private Integer stepTimeoutInMinutes;

  public static final String SERIALIZED_NAME_EXPECTED_VERSION = "expectedVersion";
  @SerializedName(SERIALIZED_NAME_EXPECTED_VERSION)
  private Integer expectedVersion;

  public static final String SERIALIZED_NAME_INCLUDE_JOB_EXECUTION_STATE = "includeJobExecutionState";
  @SerializedName(SERIALIZED_NAME_INCLUDE_JOB_EXECUTION_STATE)
  private Boolean includeJobExecutionState;

  public static final String SERIALIZED_NAME_INCLUDE_JOB_DOCUMENT = "includeJobDocument";
  @SerializedName(SERIALIZED_NAME_INCLUDE_JOB_DOCUMENT)
  private Boolean includeJobDocument;

  public static final String SERIALIZED_NAME_EXECUTION_NUMBER = "executionNumber";
  @SerializedName(SERIALIZED_NAME_EXECUTION_NUMBER)
  private Integer executionNumber;

  public UpdateJobExecutionRequest() {
  }

  public UpdateJobExecutionRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public UpdateJobExecutionRequest statusDetails(Map<String, String> statusDetails) {
    this.statusDetails = statusDetails;
    return this;
  }

  public UpdateJobExecutionRequest putStatusDetailsItem(String key, String statusDetailsItem) {
    if (this.statusDetails == null) {
      this.statusDetails = new HashMap<>();
    }
    this.statusDetails.put(key, statusDetailsItem);
    return this;
  }

  /**
   *  Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public Map<String, String> getStatusDetails() {
    return statusDetails;
  }

  public void setStatusDetails(Map<String, String> statusDetails) {
    this.statusDetails = statusDetails;
  }


  public UpdateJobExecutionRequest stepTimeoutInMinutes(Integer stepTimeoutInMinutes) {
    this.stepTimeoutInMinutes = stepTimeoutInMinutes;
    return this;
  }

  /**
   * Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling &lt;code&gt;UpdateJobExecution&lt;/code&gt;, setting the status to &lt;code&gt;IN_PROGRESS&lt;/code&gt; and specifying a new timeout value in this field) the job execution status will be automatically set to &lt;code&gt;TIMED_OUT&lt;/code&gt;. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (&lt;code&gt;CreateJob&lt;/code&gt; using field &lt;code&gt;timeoutConfig&lt;/code&gt;).
   * @return stepTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getStepTimeoutInMinutes() {
    return stepTimeoutInMinutes;
  }

  public void setStepTimeoutInMinutes(Integer stepTimeoutInMinutes) {
    this.stepTimeoutInMinutes = stepTimeoutInMinutes;
  }


  public UpdateJobExecutionRequest expectedVersion(Integer expectedVersion) {
    this.expectedVersion = expectedVersion;
    return this;
  }

  /**
   * Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
   * @return expectedVersion
   */
  @javax.annotation.Nullable
  public Integer getExpectedVersion() {
    return expectedVersion;
  }

  public void setExpectedVersion(Integer expectedVersion) {
    this.expectedVersion = expectedVersion;
  }


  public UpdateJobExecutionRequest includeJobExecutionState(Boolean includeJobExecutionState) {
    this.includeJobExecutionState = includeJobExecutionState;
    return this;
  }

  /**
   * Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
   * @return includeJobExecutionState
   */
  @javax.annotation.Nullable
  public Boolean getIncludeJobExecutionState() {
    return includeJobExecutionState;
  }

  public void setIncludeJobExecutionState(Boolean includeJobExecutionState) {
    this.includeJobExecutionState = includeJobExecutionState;
  }


  public UpdateJobExecutionRequest includeJobDocument(Boolean includeJobDocument) {
    this.includeJobDocument = includeJobDocument;
    return this;
  }

  /**
   * Optional. When set to true, the response contains the job document. The default is false.
   * @return includeJobDocument
   */
  @javax.annotation.Nullable
  public Boolean getIncludeJobDocument() {
    return includeJobDocument;
  }

  public void setIncludeJobDocument(Boolean includeJobDocument) {
    this.includeJobDocument = includeJobDocument;
  }


  public UpdateJobExecutionRequest executionNumber(Integer executionNumber) {
    this.executionNumber = executionNumber;
    return this;
  }

  /**
   * Optional. A number that identifies a particular job execution on a particular device.
   * @return executionNumber
   */
  @javax.annotation.Nullable
  public Integer getExecutionNumber() {
    return executionNumber;
  }

  public void setExecutionNumber(Integer executionNumber) {
    this.executionNumber = executionNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateJobExecutionRequest updateJobExecutionRequest = (UpdateJobExecutionRequest) o;
    return Objects.equals(this.status, updateJobExecutionRequest.status) &&
        Objects.equals(this.statusDetails, updateJobExecutionRequest.statusDetails) &&
        Objects.equals(this.stepTimeoutInMinutes, updateJobExecutionRequest.stepTimeoutInMinutes) &&
        Objects.equals(this.expectedVersion, updateJobExecutionRequest.expectedVersion) &&
        Objects.equals(this.includeJobExecutionState, updateJobExecutionRequest.includeJobExecutionState) &&
        Objects.equals(this.includeJobDocument, updateJobExecutionRequest.includeJobDocument) &&
        Objects.equals(this.executionNumber, updateJobExecutionRequest.executionNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, statusDetails, stepTimeoutInMinutes, expectedVersion, includeJobExecutionState, includeJobDocument, executionNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateJobExecutionRequest {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    stepTimeoutInMinutes: ").append(toIndentedString(stepTimeoutInMinutes)).append("\n");
    sb.append("    expectedVersion: ").append(toIndentedString(expectedVersion)).append("\n");
    sb.append("    includeJobExecutionState: ").append(toIndentedString(includeJobExecutionState)).append("\n");
    sb.append("    includeJobDocument: ").append(toIndentedString(includeJobDocument)).append("\n");
    sb.append("    executionNumber: ").append(toIndentedString(executionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("statusDetails");
    openapiFields.add("stepTimeoutInMinutes");
    openapiFields.add("expectedVersion");
    openapiFields.add("includeJobExecutionState");
    openapiFields.add("includeJobDocument");
    openapiFields.add("executionNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateJobExecutionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateJobExecutionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateJobExecutionRequest is not found in the empty JSON string", UpdateJobExecutionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateJobExecutionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateJobExecutionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateJobExecutionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateJobExecutionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateJobExecutionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateJobExecutionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateJobExecutionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateJobExecutionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateJobExecutionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateJobExecutionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateJobExecutionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateJobExecutionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateJobExecutionRequest
   */
  public static UpdateJobExecutionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateJobExecutionRequest.class);
  }

  /**
   * Convert an instance of UpdateJobExecutionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

