/*
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets JobExecutionStatus
 */
@JsonAdapter(JobExecutionStatus.Adapter.class)
public enum JobExecutionStatus {
  
  QUEUED("QUEUED"),
  
  IN_PROGRESS("IN_PROGRESS"),
  
  SUCCEEDED("SUCCEEDED"),
  
  FAILED("FAILED"),
  
  TIMED_OUT("TIMED_OUT"),
  
  REJECTED("REJECTED"),
  
  REMOVED("REMOVED"),
  
  CANCELED("CANCELED");

  private String value;

  JobExecutionStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static JobExecutionStatus fromValue(String value) {
    for (JobExecutionStatus b : JobExecutionStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<JobExecutionStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final JobExecutionStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public JobExecutionStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return JobExecutionStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    JobExecutionStatus.fromValue(value);
  }
}

