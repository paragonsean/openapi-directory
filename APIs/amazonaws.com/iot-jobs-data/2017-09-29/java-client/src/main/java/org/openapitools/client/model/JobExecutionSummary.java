/*
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a subset of information about a job execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:58.037690-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobExecutionSummary {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_QUEUED_AT = "queuedAt";
  @SerializedName(SERIALIZED_NAME_QUEUED_AT)
  private Integer queuedAt;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private Integer startedAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "lastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private Integer lastUpdatedAt;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "versionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private Integer versionNumber;

  public static final String SERIALIZED_NAME_EXECUTION_NUMBER = "executionNumber";
  @SerializedName(SERIALIZED_NAME_EXECUTION_NUMBER)
  private Integer executionNumber;

  public JobExecutionSummary() {
  }

  public JobExecutionSummary jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public JobExecutionSummary queuedAt(Integer queuedAt) {
    this.queuedAt = queuedAt;
    return this;
  }

  /**
   * Get queuedAt
   * @return queuedAt
   */
  @javax.annotation.Nullable
  public Integer getQueuedAt() {
    return queuedAt;
  }

  public void setQueuedAt(Integer queuedAt) {
    this.queuedAt = queuedAt;
  }


  public JobExecutionSummary startedAt(Integer startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Get startedAt
   * @return startedAt
   */
  @javax.annotation.Nullable
  public Integer getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(Integer startedAt) {
    this.startedAt = startedAt;
  }


  public JobExecutionSummary lastUpdatedAt(Integer lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public Integer getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(Integer lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public JobExecutionSummary versionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

  /**
   * Get versionNumber
   * @return versionNumber
   */
  @javax.annotation.Nullable
  public Integer getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }


  public JobExecutionSummary executionNumber(Integer executionNumber) {
    this.executionNumber = executionNumber;
    return this;
  }

  /**
   * Get executionNumber
   * @return executionNumber
   */
  @javax.annotation.Nullable
  public Integer getExecutionNumber() {
    return executionNumber;
  }

  public void setExecutionNumber(Integer executionNumber) {
    this.executionNumber = executionNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobExecutionSummary jobExecutionSummary = (JobExecutionSummary) o;
    return Objects.equals(this.jobId, jobExecutionSummary.jobId) &&
        Objects.equals(this.queuedAt, jobExecutionSummary.queuedAt) &&
        Objects.equals(this.startedAt, jobExecutionSummary.startedAt) &&
        Objects.equals(this.lastUpdatedAt, jobExecutionSummary.lastUpdatedAt) &&
        Objects.equals(this.versionNumber, jobExecutionSummary.versionNumber) &&
        Objects.equals(this.executionNumber, jobExecutionSummary.executionNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, queuedAt, startedAt, lastUpdatedAt, versionNumber, executionNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobExecutionSummary {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    queuedAt: ").append(toIndentedString(queuedAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    executionNumber: ").append(toIndentedString(executionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("queuedAt");
    openapiFields.add("startedAt");
    openapiFields.add("lastUpdatedAt");
    openapiFields.add("versionNumber");
    openapiFields.add("executionNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobExecutionSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobExecutionSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobExecutionSummary is not found in the empty JSON string", JobExecutionSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobExecutionSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobExecutionSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `jobId`
      if (jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobId"));
      }
      // validate the optional field `queuedAt`
      if (jsonObj.get("queuedAt") != null && !jsonObj.get("queuedAt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("queuedAt"));
      }
      // validate the optional field `startedAt`
      if (jsonObj.get("startedAt") != null && !jsonObj.get("startedAt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("startedAt"));
      }
      // validate the optional field `lastUpdatedAt`
      if (jsonObj.get("lastUpdatedAt") != null && !jsonObj.get("lastUpdatedAt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("lastUpdatedAt"));
      }
      // validate the optional field `versionNumber`
      if (jsonObj.get("versionNumber") != null && !jsonObj.get("versionNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("versionNumber"));
      }
      // validate the optional field `executionNumber`
      if (jsonObj.get("executionNumber") != null && !jsonObj.get("executionNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("executionNumber"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobExecutionSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobExecutionSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobExecutionSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobExecutionSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<JobExecutionSummary>() {
           @Override
           public void write(JsonWriter out, JobExecutionSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobExecutionSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobExecutionSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobExecutionSummary
   * @throws IOException if the JSON string is invalid with respect to JobExecutionSummary
   */
  public static JobExecutionSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobExecutionSummary.class);
  }

  /**
   * Convert an instance of JobExecutionSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

