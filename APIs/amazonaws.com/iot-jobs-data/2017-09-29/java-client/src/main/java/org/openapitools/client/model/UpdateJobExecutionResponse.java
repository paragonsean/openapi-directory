/*
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateJobExecutionResponseExecutionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateJobExecutionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:58.037690-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateJobExecutionResponse {
  public static final String SERIALIZED_NAME_EXECUTION_STATE = "executionState";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STATE)
  private UpdateJobExecutionResponseExecutionState executionState;

  public static final String SERIALIZED_NAME_JOB_DOCUMENT = "jobDocument";
  @SerializedName(SERIALIZED_NAME_JOB_DOCUMENT)
  private String jobDocument;

  public UpdateJobExecutionResponse() {
  }

  public UpdateJobExecutionResponse executionState(UpdateJobExecutionResponseExecutionState executionState) {
    this.executionState = executionState;
    return this;
  }

  /**
   * Get executionState
   * @return executionState
   */
  @javax.annotation.Nullable
  public UpdateJobExecutionResponseExecutionState getExecutionState() {
    return executionState;
  }

  public void setExecutionState(UpdateJobExecutionResponseExecutionState executionState) {
    this.executionState = executionState;
  }


  public UpdateJobExecutionResponse jobDocument(String jobDocument) {
    this.jobDocument = jobDocument;
    return this;
  }

  /**
   * Get jobDocument
   * @return jobDocument
   */
  @javax.annotation.Nullable
  public String getJobDocument() {
    return jobDocument;
  }

  public void setJobDocument(String jobDocument) {
    this.jobDocument = jobDocument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateJobExecutionResponse updateJobExecutionResponse = (UpdateJobExecutionResponse) o;
    return Objects.equals(this.executionState, updateJobExecutionResponse.executionState) &&
        Objects.equals(this.jobDocument, updateJobExecutionResponse.jobDocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionState, jobDocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateJobExecutionResponse {\n");
    sb.append("    executionState: ").append(toIndentedString(executionState)).append("\n");
    sb.append("    jobDocument: ").append(toIndentedString(jobDocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionState");
    openapiFields.add("jobDocument");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateJobExecutionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateJobExecutionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateJobExecutionResponse is not found in the empty JSON string", UpdateJobExecutionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateJobExecutionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateJobExecutionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `executionState`
      if (jsonObj.get("executionState") != null && !jsonObj.get("executionState").isJsonNull()) {
        UpdateJobExecutionResponseExecutionState.validateJsonElement(jsonObj.get("executionState"));
      }
      // validate the optional field `jobDocument`
      if (jsonObj.get("jobDocument") != null && !jsonObj.get("jobDocument").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobDocument"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateJobExecutionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateJobExecutionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateJobExecutionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateJobExecutionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateJobExecutionResponse>() {
           @Override
           public void write(JsonWriter out, UpdateJobExecutionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateJobExecutionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateJobExecutionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateJobExecutionResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateJobExecutionResponse
   */
  public static UpdateJobExecutionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateJobExecutionResponse.class);
  }

  /**
   * Convert an instance of UpdateJobExecutionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

