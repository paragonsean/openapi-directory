/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateJobExecutionRequest model module.
 * @module model/UpdateJobExecutionRequest
 * @version 2017-09-29
 */
class UpdateJobExecutionRequest {
    /**
     * Constructs a new <code>UpdateJobExecutionRequest</code>.
     * @alias module:model/UpdateJobExecutionRequest
     * @param status {module:model/UpdateJobExecutionRequest.StatusEnum} The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
     */
    constructor(status) { 
        
        UpdateJobExecutionRequest.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>UpdateJobExecutionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateJobExecutionRequest} obj Optional instance to populate.
     * @return {module:model/UpdateJobExecutionRequest} The populated <code>UpdateJobExecutionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateJobExecutionRequest();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusDetails')) {
                obj['statusDetails'] = ApiClient.convertToType(data['statusDetails'], {'String': 'String'});
            }
            if (data.hasOwnProperty('stepTimeoutInMinutes')) {
                obj['stepTimeoutInMinutes'] = ApiClient.convertToType(data['stepTimeoutInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('expectedVersion')) {
                obj['expectedVersion'] = ApiClient.convertToType(data['expectedVersion'], 'Number');
            }
            if (data.hasOwnProperty('includeJobExecutionState')) {
                obj['includeJobExecutionState'] = ApiClient.convertToType(data['includeJobExecutionState'], 'Boolean');
            }
            if (data.hasOwnProperty('includeJobDocument')) {
                obj['includeJobDocument'] = ApiClient.convertToType(data['includeJobDocument'], 'Boolean');
            }
            if (data.hasOwnProperty('executionNumber')) {
                obj['executionNumber'] = ApiClient.convertToType(data['executionNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateJobExecutionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateJobExecutionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateJobExecutionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

UpdateJobExecutionRequest.RequiredProperties = ["status"];

/**
 * The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
 * @member {module:model/UpdateJobExecutionRequest.StatusEnum} status
 */
UpdateJobExecutionRequest.prototype['status'] = undefined;

/**
 *  Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
 * @member {Object.<String, String>} statusDetails
 */
UpdateJobExecutionRequest.prototype['statusDetails'] = undefined;

/**
 * Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).
 * @member {Number} stepTimeoutInMinutes
 */
UpdateJobExecutionRequest.prototype['stepTimeoutInMinutes'] = undefined;

/**
 * Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
 * @member {Number} expectedVersion
 */
UpdateJobExecutionRequest.prototype['expectedVersion'] = undefined;

/**
 * Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
 * @member {Boolean} includeJobExecutionState
 */
UpdateJobExecutionRequest.prototype['includeJobExecutionState'] = undefined;

/**
 * Optional. When set to true, the response contains the job document. The default is false.
 * @member {Boolean} includeJobDocument
 */
UpdateJobExecutionRequest.prototype['includeJobDocument'] = undefined;

/**
 * Optional. A number that identifies a particular job execution on a particular device.
 * @member {Number} executionNumber
 */
UpdateJobExecutionRequest.prototype['executionNumber'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UpdateJobExecutionRequest['StatusEnum'] = {

    /**
     * value: "QUEUED"
     * @const
     */
    "QUEUED": "QUEUED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "TIMED_OUT"
     * @const
     */
    "TIMED_OUT": "TIMED_OUT",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "REMOVED"
     * @const
     */
    "REMOVED": "REMOVED",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED"
};



export default UpdateJobExecutionRequest;

