/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DescribeJobExecutionResponse from '../model/DescribeJobExecutionResponse';
import GetPendingJobExecutionsResponse from '../model/GetPendingJobExecutionsResponse';
import StartNextPendingJobExecutionRequest from '../model/StartNextPendingJobExecutionRequest';
import StartNextPendingJobExecutionResponse from '../model/StartNextPendingJobExecutionResponse';
import UpdateJobExecutionRequest from '../model/UpdateJobExecutionRequest';
import UpdateJobExecutionResponse from '../model/UpdateJobExecutionResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-09-29
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the describeJobExecution operation.
     * @callback module:api/DefaultApi~describeJobExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeJobExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details of a job execution.
     * @param {String} jobId The unique identifier assigned to this job when it was created.
     * @param {String} thingName The thing name associated with the device the job execution is running on.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [includeJobDocument] Optional. When set to true, the response contains the job document. The default is false.
     * @param {Number} [executionNumber] Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.
     * @param {module:api/DefaultApi~describeJobExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeJobExecutionResponse}
     */
    describeJobExecution(jobId, thingName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling describeJobExecution");
      }
      // verify the required parameter 'thingName' is set
      if (thingName === undefined || thingName === null) {
        throw new Error("Missing the required parameter 'thingName' when calling describeJobExecution");
      }

      let pathParams = {
        'jobId': jobId,
        'thingName': thingName
      };
      let queryParams = {
        'includeJobDocument': opts['includeJobDocument'],
        'executionNumber': opts['executionNumber']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeJobExecutionResponse;
      return this.apiClient.callApi(
        '/things/{thingName}/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingJobExecutions operation.
     * @callback module:api/DefaultApi~getPendingJobExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPendingJobExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all jobs for a thing that are not in a terminal status.
     * @param {String} thingName The name of the thing that is executing the job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPendingJobExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPendingJobExecutionsResponse}
     */
    getPendingJobExecutions(thingName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'thingName' is set
      if (thingName === undefined || thingName === null) {
        throw new Error("Missing the required parameter 'thingName' when calling getPendingJobExecutions");
      }

      let pathParams = {
        'thingName': thingName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPendingJobExecutionsResponse;
      return this.apiClient.callApi(
        '/things/{thingName}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startNextPendingJobExecution operation.
     * @callback module:api/DefaultApi~startNextPendingJobExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartNextPendingJobExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets and starts the next pending (status IN_PROGRESS or QUEUED) job execution for a thing.
     * @param {String} thingName The name of the thing associated with the device.
     * @param {module:model/StartNextPendingJobExecutionRequest} startNextPendingJobExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startNextPendingJobExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartNextPendingJobExecutionResponse}
     */
    startNextPendingJobExecution(thingName, startNextPendingJobExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = startNextPendingJobExecutionRequest;
      // verify the required parameter 'thingName' is set
      if (thingName === undefined || thingName === null) {
        throw new Error("Missing the required parameter 'thingName' when calling startNextPendingJobExecution");
      }
      // verify the required parameter 'startNextPendingJobExecutionRequest' is set
      if (startNextPendingJobExecutionRequest === undefined || startNextPendingJobExecutionRequest === null) {
        throw new Error("Missing the required parameter 'startNextPendingJobExecutionRequest' when calling startNextPendingJobExecution");
      }

      let pathParams = {
        'thingName': thingName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartNextPendingJobExecutionResponse;
      return this.apiClient.callApi(
        '/things/{thingName}/jobs/$next', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJobExecution operation.
     * @callback module:api/DefaultApi~updateJobExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateJobExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the status of a job execution.
     * @param {String} jobId The unique identifier assigned to this job when it was created.
     * @param {String} thingName The name of the thing associated with the device.
     * @param {module:model/UpdateJobExecutionRequest} updateJobExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateJobExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateJobExecutionResponse}
     */
    updateJobExecution(jobId, thingName, updateJobExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateJobExecutionRequest;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling updateJobExecution");
      }
      // verify the required parameter 'thingName' is set
      if (thingName === undefined || thingName === null) {
        throw new Error("Missing the required parameter 'thingName' when calling updateJobExecution");
      }
      // verify the required parameter 'updateJobExecutionRequest' is set
      if (updateJobExecutionRequest === undefined || updateJobExecutionRequest === null) {
        throw new Error("Missing the required parameter 'updateJobExecutionRequest' when calling updateJobExecution");
      }

      let pathParams = {
        'jobId': jobId,
        'thingName': thingName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateJobExecutionResponse;
      return this.apiClient.callApi(
        '/things/{thingName}/jobs/{jobId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
