/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs — remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DescribeJobExecutionResponse from './model/DescribeJobExecutionResponse';
import DescribeJobExecutionResponseExecution from './model/DescribeJobExecutionResponseExecution';
import GetPendingJobExecutionsResponse from './model/GetPendingJobExecutionsResponse';
import JobExecution from './model/JobExecution';
import JobExecutionState from './model/JobExecutionState';
import JobExecutionStatus from './model/JobExecutionStatus';
import JobExecutionSummary from './model/JobExecutionSummary';
import StartNextPendingJobExecutionRequest from './model/StartNextPendingJobExecutionRequest';
import StartNextPendingJobExecutionResponse from './model/StartNextPendingJobExecutionResponse';
import StartNextPendingJobExecutionResponseExecution from './model/StartNextPendingJobExecutionResponseExecution';
import UpdateJobExecutionRequest from './model/UpdateJobExecutionRequest';
import UpdateJobExecutionResponse from './model/UpdateJobExecutionResponse';
import UpdateJobExecutionResponseExecutionState from './model/UpdateJobExecutionResponseExecutionState';
import DefaultApi from './api/DefaultApi';


/**
* &lt;p&gt;AWS IoT Jobs is a service that allows you to define a set of jobs — remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.&lt;/p&gt; &lt;p&gt; To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.&lt;/p&gt; &lt;p&gt; AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job&lt;/p&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AwsIoTJobsDataPlane = require('index'); // See note below*.
* var xxxSvc = new AwsIoTJobsDataPlane.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AwsIoTJobsDataPlane.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AwsIoTJobsDataPlane.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AwsIoTJobsDataPlane.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2017-09-29
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DescribeJobExecutionResponse model constructor.
     * @property {module:model/DescribeJobExecutionResponse}
     */
    DescribeJobExecutionResponse,

    /**
     * The DescribeJobExecutionResponseExecution model constructor.
     * @property {module:model/DescribeJobExecutionResponseExecution}
     */
    DescribeJobExecutionResponseExecution,

    /**
     * The GetPendingJobExecutionsResponse model constructor.
     * @property {module:model/GetPendingJobExecutionsResponse}
     */
    GetPendingJobExecutionsResponse,

    /**
     * The JobExecution model constructor.
     * @property {module:model/JobExecution}
     */
    JobExecution,

    /**
     * The JobExecutionState model constructor.
     * @property {module:model/JobExecutionState}
     */
    JobExecutionState,

    /**
     * The JobExecutionStatus model constructor.
     * @property {module:model/JobExecutionStatus}
     */
    JobExecutionStatus,

    /**
     * The JobExecutionSummary model constructor.
     * @property {module:model/JobExecutionSummary}
     */
    JobExecutionSummary,

    /**
     * The StartNextPendingJobExecutionRequest model constructor.
     * @property {module:model/StartNextPendingJobExecutionRequest}
     */
    StartNextPendingJobExecutionRequest,

    /**
     * The StartNextPendingJobExecutionResponse model constructor.
     * @property {module:model/StartNextPendingJobExecutionResponse}
     */
    StartNextPendingJobExecutionResponse,

    /**
     * The StartNextPendingJobExecutionResponseExecution model constructor.
     * @property {module:model/StartNextPendingJobExecutionResponseExecution}
     */
    StartNextPendingJobExecutionResponseExecution,

    /**
     * The UpdateJobExecutionRequest model constructor.
     * @property {module:model/UpdateJobExecutionRequest}
     */
    UpdateJobExecutionRequest,

    /**
     * The UpdateJobExecutionResponse model constructor.
     * @property {module:model/UpdateJobExecutionResponse}
     */
    UpdateJobExecutionResponse,

    /**
     * The UpdateJobExecutionResponseExecutionState model constructor.
     * @property {module:model/UpdateJobExecutionResponseExecutionState}
     */
    UpdateJobExecutionResponseExecutionState,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
