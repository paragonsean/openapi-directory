/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTJobsDataPlane);
  }
}(this, function(expect, AwsIoTJobsDataPlane) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTJobsDataPlane.JobExecution();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('JobExecution', function() {
    it('should create an instance of JobExecution', function() {
      // uncomment below and update the code to test JobExecution
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be.a(AwsIoTJobsDataPlane.JobExecution);
    });

    it('should have the property jobId (base name: "jobId")', function() {
      // uncomment below and update the code to test the property jobId
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property thingName (base name: "thingName")', function() {
      // uncomment below and update the code to test the property thingName
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property statusDetails (base name: "statusDetails")', function() {
      // uncomment below and update the code to test the property statusDetails
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property queuedAt (base name: "queuedAt")', function() {
      // uncomment below and update the code to test the property queuedAt
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property startedAt (base name: "startedAt")', function() {
      // uncomment below and update the code to test the property startedAt
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdatedAt (base name: "lastUpdatedAt")', function() {
      // uncomment below and update the code to test the property lastUpdatedAt
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property approximateSecondsBeforeTimedOut (base name: "approximateSecondsBeforeTimedOut")', function() {
      // uncomment below and update the code to test the property approximateSecondsBeforeTimedOut
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property versionNumber (base name: "versionNumber")', function() {
      // uncomment below and update the code to test the property versionNumber
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property executionNumber (base name: "executionNumber")', function() {
      // uncomment below and update the code to test the property executionNumber
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

    it('should have the property jobDocument (base name: "jobDocument")', function() {
      // uncomment below and update the code to test the property jobDocument
      //var instance = new AwsIoTJobsDataPlane.JobExecution();
      //expect(instance).to.be();
    });

  });

}));
