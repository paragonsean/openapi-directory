# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateJobExecutionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, status_details: Dict[str, str]=None, step_timeout_in_minutes: int=None, expected_version: int=None, include_job_execution_state: bool=None, include_job_document: bool=None, execution_number: int=None):
        """UpdateJobExecutionRequest - a model defined in OpenAPI

        :param status: The status of this UpdateJobExecutionRequest.
        :param status_details: The status_details of this UpdateJobExecutionRequest.
        :param step_timeout_in_minutes: The step_timeout_in_minutes of this UpdateJobExecutionRequest.
        :param expected_version: The expected_version of this UpdateJobExecutionRequest.
        :param include_job_execution_state: The include_job_execution_state of this UpdateJobExecutionRequest.
        :param include_job_document: The include_job_document of this UpdateJobExecutionRequest.
        :param execution_number: The execution_number of this UpdateJobExecutionRequest.
        """
        self.openapi_types = {
            'status': str,
            'status_details': Dict[str, str],
            'step_timeout_in_minutes': int,
            'expected_version': int,
            'include_job_execution_state': bool,
            'include_job_document': bool,
            'execution_number': int
        }

        self.attribute_map = {
            'status': 'status',
            'status_details': 'statusDetails',
            'step_timeout_in_minutes': 'stepTimeoutInMinutes',
            'expected_version': 'expectedVersion',
            'include_job_execution_state': 'includeJobExecutionState',
            'include_job_document': 'includeJobDocument',
            'execution_number': 'executionNumber'
        }

        self._status = status
        self._status_details = status_details
        self._step_timeout_in_minutes = step_timeout_in_minutes
        self._expected_version = expected_version
        self._include_job_execution_state = include_job_execution_state
        self._include_job_document = include_job_document
        self._execution_number = execution_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateJobExecutionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateJobExecution_request of this UpdateJobExecutionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this UpdateJobExecutionRequest.

        The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.

        :return: The status of this UpdateJobExecutionRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateJobExecutionRequest.

        The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.

        :param status: The status of this UpdateJobExecutionRequest.
        :type status: str
        """
        allowed_values = ["QUEUED", "IN_PROGRESS", "SUCCEEDED", "FAILED", "TIMED_OUT", "REJECTED", "REMOVED", "CANCELED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this UpdateJobExecutionRequest.

         Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.

        :return: The status_details of this UpdateJobExecutionRequest.
        :rtype: Dict[str, str]
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this UpdateJobExecutionRequest.

         Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.

        :param status_details: The status_details of this UpdateJobExecutionRequest.
        :type status_details: Dict[str, str]
        """

        self._status_details = status_details

    @property
    def step_timeout_in_minutes(self):
        """Gets the step_timeout_in_minutes of this UpdateJobExecutionRequest.

        Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).

        :return: The step_timeout_in_minutes of this UpdateJobExecutionRequest.
        :rtype: int
        """
        return self._step_timeout_in_minutes

    @step_timeout_in_minutes.setter
    def step_timeout_in_minutes(self, step_timeout_in_minutes):
        """Sets the step_timeout_in_minutes of this UpdateJobExecutionRequest.

        Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).

        :param step_timeout_in_minutes: The step_timeout_in_minutes of this UpdateJobExecutionRequest.
        :type step_timeout_in_minutes: int
        """

        self._step_timeout_in_minutes = step_timeout_in_minutes

    @property
    def expected_version(self):
        """Gets the expected_version of this UpdateJobExecutionRequest.

        Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)

        :return: The expected_version of this UpdateJobExecutionRequest.
        :rtype: int
        """
        return self._expected_version

    @expected_version.setter
    def expected_version(self, expected_version):
        """Sets the expected_version of this UpdateJobExecutionRequest.

        Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)

        :param expected_version: The expected_version of this UpdateJobExecutionRequest.
        :type expected_version: int
        """

        self._expected_version = expected_version

    @property
    def include_job_execution_state(self):
        """Gets the include_job_execution_state of this UpdateJobExecutionRequest.

        Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.

        :return: The include_job_execution_state of this UpdateJobExecutionRequest.
        :rtype: bool
        """
        return self._include_job_execution_state

    @include_job_execution_state.setter
    def include_job_execution_state(self, include_job_execution_state):
        """Sets the include_job_execution_state of this UpdateJobExecutionRequest.

        Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.

        :param include_job_execution_state: The include_job_execution_state of this UpdateJobExecutionRequest.
        :type include_job_execution_state: bool
        """

        self._include_job_execution_state = include_job_execution_state

    @property
    def include_job_document(self):
        """Gets the include_job_document of this UpdateJobExecutionRequest.

        Optional. When set to true, the response contains the job document. The default is false.

        :return: The include_job_document of this UpdateJobExecutionRequest.
        :rtype: bool
        """
        return self._include_job_document

    @include_job_document.setter
    def include_job_document(self, include_job_document):
        """Sets the include_job_document of this UpdateJobExecutionRequest.

        Optional. When set to true, the response contains the job document. The default is false.

        :param include_job_document: The include_job_document of this UpdateJobExecutionRequest.
        :type include_job_document: bool
        """

        self._include_job_document = include_job_document

    @property
    def execution_number(self):
        """Gets the execution_number of this UpdateJobExecutionRequest.

        Optional. A number that identifies a particular job execution on a particular device.

        :return: The execution_number of this UpdateJobExecutionRequest.
        :rtype: int
        """
        return self._execution_number

    @execution_number.setter
    def execution_number(self, execution_number):
        """Sets the execution_number of this UpdateJobExecutionRequest.

        Optional. A number that identifies a particular job execution on a particular device.

        :param execution_number: The execution_number of this UpdateJobExecutionRequest.
        :type execution_number: int
        """

        self._execution_number = execution_number
