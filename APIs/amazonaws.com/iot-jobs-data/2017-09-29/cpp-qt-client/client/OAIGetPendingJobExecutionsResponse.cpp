/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPendingJobExecutionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPendingJobExecutionsResponse::OAIGetPendingJobExecutionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPendingJobExecutionsResponse::OAIGetPendingJobExecutionsResponse() {
    this->initializeModel();
}

OAIGetPendingJobExecutionsResponse::~OAIGetPendingJobExecutionsResponse() {}

void OAIGetPendingJobExecutionsResponse::initializeModel() {

    m_in_progress_jobs_isSet = false;
    m_in_progress_jobs_isValid = false;

    m_queued_jobs_isSet = false;
    m_queued_jobs_isValid = false;
}

void OAIGetPendingJobExecutionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPendingJobExecutionsResponse::fromJsonObject(QJsonObject json) {

    m_in_progress_jobs_isValid = ::OpenAPI::fromJsonValue(m_in_progress_jobs, json[QString("inProgressJobs")]);
    m_in_progress_jobs_isSet = !json[QString("inProgressJobs")].isNull() && m_in_progress_jobs_isValid;

    m_queued_jobs_isValid = ::OpenAPI::fromJsonValue(m_queued_jobs, json[QString("queuedJobs")]);
    m_queued_jobs_isSet = !json[QString("queuedJobs")].isNull() && m_queued_jobs_isValid;
}

QString OAIGetPendingJobExecutionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPendingJobExecutionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_in_progress_jobs.isSet()) {
        obj.insert(QString("inProgressJobs"), ::OpenAPI::toJsonValue(m_in_progress_jobs));
    }
    if (m_queued_jobs.isSet()) {
        obj.insert(QString("queuedJobs"), ::OpenAPI::toJsonValue(m_queued_jobs));
    }
    return obj;
}

QList OAIGetPendingJobExecutionsResponse::getInProgressJobs() const {
    return m_in_progress_jobs;
}
void OAIGetPendingJobExecutionsResponse::setInProgressJobs(const QList &in_progress_jobs) {
    m_in_progress_jobs = in_progress_jobs;
    m_in_progress_jobs_isSet = true;
}

bool OAIGetPendingJobExecutionsResponse::is_in_progress_jobs_Set() const{
    return m_in_progress_jobs_isSet;
}

bool OAIGetPendingJobExecutionsResponse::is_in_progress_jobs_Valid() const{
    return m_in_progress_jobs_isValid;
}

QList OAIGetPendingJobExecutionsResponse::getQueuedJobs() const {
    return m_queued_jobs;
}
void OAIGetPendingJobExecutionsResponse::setQueuedJobs(const QList &queued_jobs) {
    m_queued_jobs = queued_jobs;
    m_queued_jobs_isSet = true;
}

bool OAIGetPendingJobExecutionsResponse::is_queued_jobs_Set() const{
    return m_queued_jobs_isSet;
}

bool OAIGetPendingJobExecutionsResponse::is_queued_jobs_Valid() const{
    return m_queued_jobs_isValid;
}

bool OAIGetPendingJobExecutionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_progress_jobs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_jobs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPendingJobExecutionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
