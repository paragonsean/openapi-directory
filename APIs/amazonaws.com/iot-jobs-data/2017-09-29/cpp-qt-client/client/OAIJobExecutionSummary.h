/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobExecutionSummary.h
 *
 * Contains a subset of information about a job execution.
 */

#ifndef OAIJobExecutionSummary_H
#define OAIJobExecutionSummary_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIJobExecutionSummary : public OAIObject {
public:
    OAIJobExecutionSummary();
    OAIJobExecutionSummary(QString json);
    ~OAIJobExecutionSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getJobId() const;
    void setJobId(const QString &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    qint32 getQueuedAt() const;
    void setQueuedAt(const qint32 &queued_at);
    bool is_queued_at_Set() const;
    bool is_queued_at_Valid() const;

    qint32 getStartedAt() const;
    void setStartedAt(const qint32 &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    qint32 getLastUpdatedAt() const;
    void setLastUpdatedAt(const qint32 &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    qint32 getVersionNumber() const;
    void setVersionNumber(const qint32 &version_number);
    bool is_version_number_Set() const;
    bool is_version_number_Valid() const;

    qint32 getExecutionNumber() const;
    void setExecutionNumber(const qint32 &execution_number);
    bool is_execution_number_Set() const;
    bool is_execution_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    qint32 m_queued_at;
    bool m_queued_at_isSet;
    bool m_queued_at_isValid;

    qint32 m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;

    qint32 m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    qint32 m_version_number;
    bool m_version_number_isSet;
    bool m_version_number_isValid;

    qint32 m_execution_number;
    bool m_execution_number_isSet;
    bool m_execution_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobExecutionSummary)

#endif // OAIJobExecutionSummary_H
