/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateJobExecution_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateJobExecution_request::OAIUpdateJobExecution_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateJobExecution_request::OAIUpdateJobExecution_request() {
    this->initializeModel();
}

OAIUpdateJobExecution_request::~OAIUpdateJobExecution_request() {}

void OAIUpdateJobExecution_request::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_step_timeout_in_minutes_isSet = false;
    m_step_timeout_in_minutes_isValid = false;

    m_expected_version_isSet = false;
    m_expected_version_isValid = false;

    m_include_job_execution_state_isSet = false;
    m_include_job_execution_state_isValid = false;

    m_include_job_document_isSet = false;
    m_include_job_document_isValid = false;

    m_execution_number_isSet = false;
    m_execution_number_isValid = false;
}

void OAIUpdateJobExecution_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateJobExecution_request::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_step_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_step_timeout_in_minutes, json[QString("stepTimeoutInMinutes")]);
    m_step_timeout_in_minutes_isSet = !json[QString("stepTimeoutInMinutes")].isNull() && m_step_timeout_in_minutes_isValid;

    m_expected_version_isValid = ::OpenAPI::fromJsonValue(m_expected_version, json[QString("expectedVersion")]);
    m_expected_version_isSet = !json[QString("expectedVersion")].isNull() && m_expected_version_isValid;

    m_include_job_execution_state_isValid = ::OpenAPI::fromJsonValue(m_include_job_execution_state, json[QString("includeJobExecutionState")]);
    m_include_job_execution_state_isSet = !json[QString("includeJobExecutionState")].isNull() && m_include_job_execution_state_isValid;

    m_include_job_document_isValid = ::OpenAPI::fromJsonValue(m_include_job_document, json[QString("includeJobDocument")]);
    m_include_job_document_isSet = !json[QString("includeJobDocument")].isNull() && m_include_job_document_isValid;

    m_execution_number_isValid = ::OpenAPI::fromJsonValue(m_execution_number, json[QString("executionNumber")]);
    m_execution_number_isSet = !json[QString("executionNumber")].isNull() && m_execution_number_isValid;
}

QString OAIUpdateJobExecution_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateJobExecution_request::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details.size() > 0) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_step_timeout_in_minutes_isSet) {
        obj.insert(QString("stepTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_step_timeout_in_minutes));
    }
    if (m_expected_version_isSet) {
        obj.insert(QString("expectedVersion"), ::OpenAPI::toJsonValue(m_expected_version));
    }
    if (m_include_job_execution_state_isSet) {
        obj.insert(QString("includeJobExecutionState"), ::OpenAPI::toJsonValue(m_include_job_execution_state));
    }
    if (m_include_job_document_isSet) {
        obj.insert(QString("includeJobDocument"), ::OpenAPI::toJsonValue(m_include_job_document));
    }
    if (m_execution_number_isSet) {
        obj.insert(QString("executionNumber"), ::OpenAPI::toJsonValue(m_execution_number));
    }
    return obj;
}

QString OAIUpdateJobExecution_request::getStatus() const {
    return m_status;
}
void OAIUpdateJobExecution_request::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateJobExecution_request::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateJobExecution_request::is_status_Valid() const{
    return m_status_isValid;
}

QMap<QString, QString> OAIUpdateJobExecution_request::getStatusDetails() const {
    return m_status_details;
}
void OAIUpdateJobExecution_request::setStatusDetails(const QMap<QString, QString> &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIUpdateJobExecution_request::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIUpdateJobExecution_request::is_status_details_Valid() const{
    return m_status_details_isValid;
}

qint32 OAIUpdateJobExecution_request::getStepTimeoutInMinutes() const {
    return m_step_timeout_in_minutes;
}
void OAIUpdateJobExecution_request::setStepTimeoutInMinutes(const qint32 &step_timeout_in_minutes) {
    m_step_timeout_in_minutes = step_timeout_in_minutes;
    m_step_timeout_in_minutes_isSet = true;
}

bool OAIUpdateJobExecution_request::is_step_timeout_in_minutes_Set() const{
    return m_step_timeout_in_minutes_isSet;
}

bool OAIUpdateJobExecution_request::is_step_timeout_in_minutes_Valid() const{
    return m_step_timeout_in_minutes_isValid;
}

qint32 OAIUpdateJobExecution_request::getExpectedVersion() const {
    return m_expected_version;
}
void OAIUpdateJobExecution_request::setExpectedVersion(const qint32 &expected_version) {
    m_expected_version = expected_version;
    m_expected_version_isSet = true;
}

bool OAIUpdateJobExecution_request::is_expected_version_Set() const{
    return m_expected_version_isSet;
}

bool OAIUpdateJobExecution_request::is_expected_version_Valid() const{
    return m_expected_version_isValid;
}

bool OAIUpdateJobExecution_request::isIncludeJobExecutionState() const {
    return m_include_job_execution_state;
}
void OAIUpdateJobExecution_request::setIncludeJobExecutionState(const bool &include_job_execution_state) {
    m_include_job_execution_state = include_job_execution_state;
    m_include_job_execution_state_isSet = true;
}

bool OAIUpdateJobExecution_request::is_include_job_execution_state_Set() const{
    return m_include_job_execution_state_isSet;
}

bool OAIUpdateJobExecution_request::is_include_job_execution_state_Valid() const{
    return m_include_job_execution_state_isValid;
}

bool OAIUpdateJobExecution_request::isIncludeJobDocument() const {
    return m_include_job_document;
}
void OAIUpdateJobExecution_request::setIncludeJobDocument(const bool &include_job_document) {
    m_include_job_document = include_job_document;
    m_include_job_document_isSet = true;
}

bool OAIUpdateJobExecution_request::is_include_job_document_Set() const{
    return m_include_job_document_isSet;
}

bool OAIUpdateJobExecution_request::is_include_job_document_Valid() const{
    return m_include_job_document_isValid;
}

qint32 OAIUpdateJobExecution_request::getExecutionNumber() const {
    return m_execution_number;
}
void OAIUpdateJobExecution_request::setExecutionNumber(const qint32 &execution_number) {
    m_execution_number = execution_number;
    m_execution_number_isSet = true;
}

bool OAIUpdateJobExecution_request::is_execution_number_Set() const{
    return m_execution_number_isSet;
}

bool OAIUpdateJobExecution_request::is_execution_number_Valid() const{
    return m_execution_number_isValid;
}

bool OAIUpdateJobExecution_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_job_execution_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_job_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateJobExecution_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
