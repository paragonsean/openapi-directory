/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobExecutionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobExecutionSummary::OAIJobExecutionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobExecutionSummary::OAIJobExecutionSummary() {
    this->initializeModel();
}

OAIJobExecutionSummary::~OAIJobExecutionSummary() {}

void OAIJobExecutionSummary::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_queued_at_isSet = false;
    m_queued_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_execution_number_isSet = false;
    m_execution_number_isValid = false;
}

void OAIJobExecutionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobExecutionSummary::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_queued_at_isValid = ::OpenAPI::fromJsonValue(m_queued_at, json[QString("queuedAt")]);
    m_queued_at_isSet = !json[QString("queuedAt")].isNull() && m_queued_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("versionNumber")]);
    m_version_number_isSet = !json[QString("versionNumber")].isNull() && m_version_number_isValid;

    m_execution_number_isValid = ::OpenAPI::fromJsonValue(m_execution_number, json[QString("executionNumber")]);
    m_execution_number_isSet = !json[QString("executionNumber")].isNull() && m_execution_number_isValid;
}

QString OAIJobExecutionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobExecutionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_queued_at_isSet) {
        obj.insert(QString("queuedAt"), ::OpenAPI::toJsonValue(m_queued_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("versionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_execution_number_isSet) {
        obj.insert(QString("executionNumber"), ::OpenAPI::toJsonValue(m_execution_number));
    }
    return obj;
}

QString OAIJobExecutionSummary::getJobId() const {
    return m_job_id;
}
void OAIJobExecutionSummary::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobExecutionSummary::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobExecutionSummary::is_job_id_Valid() const{
    return m_job_id_isValid;
}

qint32 OAIJobExecutionSummary::getQueuedAt() const {
    return m_queued_at;
}
void OAIJobExecutionSummary::setQueuedAt(const qint32 &queued_at) {
    m_queued_at = queued_at;
    m_queued_at_isSet = true;
}

bool OAIJobExecutionSummary::is_queued_at_Set() const{
    return m_queued_at_isSet;
}

bool OAIJobExecutionSummary::is_queued_at_Valid() const{
    return m_queued_at_isValid;
}

qint32 OAIJobExecutionSummary::getStartedAt() const {
    return m_started_at;
}
void OAIJobExecutionSummary::setStartedAt(const qint32 &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIJobExecutionSummary::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIJobExecutionSummary::is_started_at_Valid() const{
    return m_started_at_isValid;
}

qint32 OAIJobExecutionSummary::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIJobExecutionSummary::setLastUpdatedAt(const qint32 &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIJobExecutionSummary::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIJobExecutionSummary::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

qint32 OAIJobExecutionSummary::getVersionNumber() const {
    return m_version_number;
}
void OAIJobExecutionSummary::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIJobExecutionSummary::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIJobExecutionSummary::is_version_number_Valid() const{
    return m_version_number_isValid;
}

qint32 OAIJobExecutionSummary::getExecutionNumber() const {
    return m_execution_number;
}
void OAIJobExecutionSummary::setExecutionNumber(const qint32 &execution_number) {
    m_execution_number = execution_number;
    m_execution_number_isSet = true;
}

bool OAIJobExecutionSummary::is_execution_number_Set() const{
    return m_execution_number_isSet;
}

bool OAIJobExecutionSummary::is_execution_number_Valid() const{
    return m_execution_number_isValid;
}

bool OAIJobExecutionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobExecutionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
