/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateJobExecutionResponse_executionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateJobExecutionResponse_executionState::OAIUpdateJobExecutionResponse_executionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateJobExecutionResponse_executionState::OAIUpdateJobExecutionResponse_executionState() {
    this->initializeModel();
}

OAIUpdateJobExecutionResponse_executionState::~OAIUpdateJobExecutionResponse_executionState() {}

void OAIUpdateJobExecutionResponse_executionState::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;
}

void OAIUpdateJobExecutionResponse_executionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateJobExecutionResponse_executionState::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("versionNumber")]);
    m_version_number_isSet = !json[QString("versionNumber")].isNull() && m_version_number_isValid;
}

QString OAIUpdateJobExecutionResponse_executionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateJobExecutionResponse_executionState::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details.isSet()) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("versionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    return obj;
}

OAIJobExecutionStatus OAIUpdateJobExecutionResponse_executionState::getStatus() const {
    return m_status;
}
void OAIUpdateJobExecutionResponse_executionState::setStatus(const OAIJobExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateJobExecutionResponse_executionState::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateJobExecutionResponse_executionState::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIUpdateJobExecutionResponse_executionState::getStatusDetails() const {
    return m_status_details;
}
void OAIUpdateJobExecutionResponse_executionState::setStatusDetails(const QMap &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIUpdateJobExecutionResponse_executionState::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIUpdateJobExecutionResponse_executionState::is_status_details_Valid() const{
    return m_status_details_isValid;
}

qint32 OAIUpdateJobExecutionResponse_executionState::getVersionNumber() const {
    return m_version_number;
}
void OAIUpdateJobExecutionResponse_executionState::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIUpdateJobExecutionResponse_executionState::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIUpdateJobExecutionResponse_executionState::is_version_number_Valid() const{
    return m_version_number_isValid;
}

bool OAIUpdateJobExecutionResponse_executionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateJobExecutionResponse_executionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
