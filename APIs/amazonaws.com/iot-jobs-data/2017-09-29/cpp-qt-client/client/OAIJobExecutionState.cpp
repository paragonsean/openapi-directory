/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobExecutionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobExecutionState::OAIJobExecutionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobExecutionState::OAIJobExecutionState() {
    this->initializeModel();
}

OAIJobExecutionState::~OAIJobExecutionState() {}

void OAIJobExecutionState::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;
}

void OAIJobExecutionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobExecutionState::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("versionNumber")]);
    m_version_number_isSet = !json[QString("versionNumber")].isNull() && m_version_number_isValid;
}

QString OAIJobExecutionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobExecutionState::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details.isSet()) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("versionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    return obj;
}

OAIJobExecutionStatus OAIJobExecutionState::getStatus() const {
    return m_status;
}
void OAIJobExecutionState::setStatus(const OAIJobExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobExecutionState::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobExecutionState::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIJobExecutionState::getStatusDetails() const {
    return m_status_details;
}
void OAIJobExecutionState::setStatusDetails(const QMap &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIJobExecutionState::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIJobExecutionState::is_status_details_Valid() const{
    return m_status_details_isValid;
}

qint32 OAIJobExecutionState::getVersionNumber() const {
    return m_version_number;
}
void OAIJobExecutionState::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIJobExecutionState::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIJobExecutionState::is_version_number_Valid() const{
    return m_version_number_isValid;
}

bool OAIJobExecutionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobExecutionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
