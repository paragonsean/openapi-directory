/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartNextPendingJobExecutionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartNextPendingJobExecutionRequest::OAIStartNextPendingJobExecutionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartNextPendingJobExecutionRequest::OAIStartNextPendingJobExecutionRequest() {
    this->initializeModel();
}

OAIStartNextPendingJobExecutionRequest::~OAIStartNextPendingJobExecutionRequest() {}

void OAIStartNextPendingJobExecutionRequest::initializeModel() {

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_step_timeout_in_minutes_isSet = false;
    m_step_timeout_in_minutes_isValid = false;
}

void OAIStartNextPendingJobExecutionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartNextPendingJobExecutionRequest::fromJsonObject(QJsonObject json) {

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_step_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_step_timeout_in_minutes, json[QString("stepTimeoutInMinutes")]);
    m_step_timeout_in_minutes_isSet = !json[QString("stepTimeoutInMinutes")].isNull() && m_step_timeout_in_minutes_isValid;
}

QString OAIStartNextPendingJobExecutionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartNextPendingJobExecutionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_status_details.isSet()) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_step_timeout_in_minutes_isSet) {
        obj.insert(QString("stepTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_step_timeout_in_minutes));
    }
    return obj;
}

QMap OAIStartNextPendingJobExecutionRequest::getStatusDetails() const {
    return m_status_details;
}
void OAIStartNextPendingJobExecutionRequest::setStatusDetails(const QMap &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIStartNextPendingJobExecutionRequest::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIStartNextPendingJobExecutionRequest::is_status_details_Valid() const{
    return m_status_details_isValid;
}

qint32 OAIStartNextPendingJobExecutionRequest::getStepTimeoutInMinutes() const {
    return m_step_timeout_in_minutes;
}
void OAIStartNextPendingJobExecutionRequest::setStepTimeoutInMinutes(const qint32 &step_timeout_in_minutes) {
    m_step_timeout_in_minutes = step_timeout_in_minutes;
    m_step_timeout_in_minutes_isSet = true;
}

bool OAIStartNextPendingJobExecutionRequest::is_step_timeout_in_minutes_Set() const{
    return m_step_timeout_in_minutes_isSet;
}

bool OAIStartNextPendingJobExecutionRequest::is_step_timeout_in_minutes_Valid() const{
    return m_step_timeout_in_minutes_isValid;
}

bool OAIStartNextPendingJobExecutionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartNextPendingJobExecutionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
