/**
 * AWS IoT Jobs Data Plane
 * <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations.</p> <p> To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job</p>
 *
 * The version of the OpenAPI document: 2017-09-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartNextPendingJobExecutionResponse_execution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartNextPendingJobExecutionResponse_execution::OAIStartNextPendingJobExecutionResponse_execution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartNextPendingJobExecutionResponse_execution::OAIStartNextPendingJobExecutionResponse_execution() {
    this->initializeModel();
}

OAIStartNextPendingJobExecutionResponse_execution::~OAIStartNextPendingJobExecutionResponse_execution() {}

void OAIStartNextPendingJobExecutionResponse_execution::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_thing_name_isSet = false;
    m_thing_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_queued_at_isSet = false;
    m_queued_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_approximate_seconds_before_timed_out_isSet = false;
    m_approximate_seconds_before_timed_out_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_execution_number_isSet = false;
    m_execution_number_isValid = false;

    m_job_document_isSet = false;
    m_job_document_isValid = false;
}

void OAIStartNextPendingJobExecutionResponse_execution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartNextPendingJobExecutionResponse_execution::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_thing_name_isValid = ::OpenAPI::fromJsonValue(m_thing_name, json[QString("thingName")]);
    m_thing_name_isSet = !json[QString("thingName")].isNull() && m_thing_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_queued_at_isValid = ::OpenAPI::fromJsonValue(m_queued_at, json[QString("queuedAt")]);
    m_queued_at_isSet = !json[QString("queuedAt")].isNull() && m_queued_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_approximate_seconds_before_timed_out_isValid = ::OpenAPI::fromJsonValue(m_approximate_seconds_before_timed_out, json[QString("approximateSecondsBeforeTimedOut")]);
    m_approximate_seconds_before_timed_out_isSet = !json[QString("approximateSecondsBeforeTimedOut")].isNull() && m_approximate_seconds_before_timed_out_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("versionNumber")]);
    m_version_number_isSet = !json[QString("versionNumber")].isNull() && m_version_number_isValid;

    m_execution_number_isValid = ::OpenAPI::fromJsonValue(m_execution_number, json[QString("executionNumber")]);
    m_execution_number_isSet = !json[QString("executionNumber")].isNull() && m_execution_number_isValid;

    m_job_document_isValid = ::OpenAPI::fromJsonValue(m_job_document, json[QString("jobDocument")]);
    m_job_document_isSet = !json[QString("jobDocument")].isNull() && m_job_document_isValid;
}

QString OAIStartNextPendingJobExecutionResponse_execution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartNextPendingJobExecutionResponse_execution::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_thing_name_isSet) {
        obj.insert(QString("thingName"), ::OpenAPI::toJsonValue(m_thing_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details.isSet()) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_queued_at_isSet) {
        obj.insert(QString("queuedAt"), ::OpenAPI::toJsonValue(m_queued_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_approximate_seconds_before_timed_out_isSet) {
        obj.insert(QString("approximateSecondsBeforeTimedOut"), ::OpenAPI::toJsonValue(m_approximate_seconds_before_timed_out));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("versionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_execution_number_isSet) {
        obj.insert(QString("executionNumber"), ::OpenAPI::toJsonValue(m_execution_number));
    }
    if (m_job_document_isSet) {
        obj.insert(QString("jobDocument"), ::OpenAPI::toJsonValue(m_job_document));
    }
    return obj;
}

QString OAIStartNextPendingJobExecutionResponse_execution::getJobId() const {
    return m_job_id;
}
void OAIStartNextPendingJobExecutionResponse_execution::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIStartNextPendingJobExecutionResponse_execution::getThingName() const {
    return m_thing_name;
}
void OAIStartNextPendingJobExecutionResponse_execution::setThingName(const QString &thing_name) {
    m_thing_name = thing_name;
    m_thing_name_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_thing_name_Set() const{
    return m_thing_name_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_thing_name_Valid() const{
    return m_thing_name_isValid;
}

OAIJobExecutionStatus OAIStartNextPendingJobExecutionResponse_execution::getStatus() const {
    return m_status;
}
void OAIStartNextPendingJobExecutionResponse_execution::setStatus(const OAIJobExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIStartNextPendingJobExecutionResponse_execution::getStatusDetails() const {
    return m_status_details;
}
void OAIStartNextPendingJobExecutionResponse_execution::setStatusDetails(const QMap &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_status_details_Valid() const{
    return m_status_details_isValid;
}

qint32 OAIStartNextPendingJobExecutionResponse_execution::getQueuedAt() const {
    return m_queued_at;
}
void OAIStartNextPendingJobExecutionResponse_execution::setQueuedAt(const qint32 &queued_at) {
    m_queued_at = queued_at;
    m_queued_at_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_queued_at_Set() const{
    return m_queued_at_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_queued_at_Valid() const{
    return m_queued_at_isValid;
}

qint32 OAIStartNextPendingJobExecutionResponse_execution::getStartedAt() const {
    return m_started_at;
}
void OAIStartNextPendingJobExecutionResponse_execution::setStartedAt(const qint32 &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_started_at_Valid() const{
    return m_started_at_isValid;
}

qint32 OAIStartNextPendingJobExecutionResponse_execution::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIStartNextPendingJobExecutionResponse_execution::setLastUpdatedAt(const qint32 &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

qint32 OAIStartNextPendingJobExecutionResponse_execution::getApproximateSecondsBeforeTimedOut() const {
    return m_approximate_seconds_before_timed_out;
}
void OAIStartNextPendingJobExecutionResponse_execution::setApproximateSecondsBeforeTimedOut(const qint32 &approximate_seconds_before_timed_out) {
    m_approximate_seconds_before_timed_out = approximate_seconds_before_timed_out;
    m_approximate_seconds_before_timed_out_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_approximate_seconds_before_timed_out_Set() const{
    return m_approximate_seconds_before_timed_out_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_approximate_seconds_before_timed_out_Valid() const{
    return m_approximate_seconds_before_timed_out_isValid;
}

qint32 OAIStartNextPendingJobExecutionResponse_execution::getVersionNumber() const {
    return m_version_number;
}
void OAIStartNextPendingJobExecutionResponse_execution::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_version_number_Valid() const{
    return m_version_number_isValid;
}

qint32 OAIStartNextPendingJobExecutionResponse_execution::getExecutionNumber() const {
    return m_execution_number;
}
void OAIStartNextPendingJobExecutionResponse_execution::setExecutionNumber(const qint32 &execution_number) {
    m_execution_number = execution_number;
    m_execution_number_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_execution_number_Set() const{
    return m_execution_number_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_execution_number_Valid() const{
    return m_execution_number_isValid;
}

QString OAIStartNextPendingJobExecutionResponse_execution::getJobDocument() const {
    return m_job_document;
}
void OAIStartNextPendingJobExecutionResponse_execution::setJobDocument(const QString &job_document) {
    m_job_document = job_document;
    m_job_document_isSet = true;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_job_document_Set() const{
    return m_job_document_isSet;
}

bool OAIStartNextPendingJobExecutionResponse_execution::is_job_document_Valid() const{
    return m_job_document_isValid;
}

bool OAIStartNextPendingJobExecutionResponse_execution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thing_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_seconds_before_timed_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_document_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartNextPendingJobExecutionResponse_execution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
