/*
 * AWS Resource Groups
 * <p>Resource Groups lets you organize Amazon Web Services resources such as Amazon Elastic Compute Cloud instances, Amazon Relational Database Service databases, and Amazon Simple Storage Service buckets into groups using criteria that you define as tags. A resource group is a collection of resources that match the resource types specified in a query, and share one or more tags or portions of tags. You can create a group of resources based on their roles in your cloud infrastructure, lifecycle stages, regions, application layers, or virtually any criteria. Resource Groups enable you to automate management tasks, such as those in Amazon Web Services Systems Manager Automation documents, on tag-related resources in Amazon Web Services Systems Manager. Groups of tagged resources also let you quickly view a custom console in Amazon Web Services Systems Manager that shows Config compliance and other monitoring data about member resources.</p> <p>To create a resource group, build a resource query, and specify tags that identify the criteria that members of the group have in common. Tags are key-value pairs.</p> <p>For more information about Resource Groups, see the <a href=\"https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html\">Resource Groups User Guide</a>.</p> <p>Resource Groups uses a REST-compliant API that you can use to perform the following types of operations.</p> <ul> <li> <p>Create, Read, Update, and Delete (CRUD) operations on resource groups and resource query entities</p> </li> <li> <p>Applying, editing, and removing tags from resource groups</p> </li> <li> <p>Resolving resource group member ARNs so they can be returned as search results</p> </li> <li> <p>Getting data about resources that are members of a group</p> </li> <li> <p>Searching Amazon Web Services resources based on a resource query</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupResourcesOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:32.903454-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupResourcesOutput {
  public static final String SERIALIZED_NAME_SUCCEEDED = "Succeeded";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED)
  private List succeeded;

  public static final String SERIALIZED_NAME_FAILED = "Failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private List failed;

  public static final String SERIALIZED_NAME_PENDING = "Pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private List pending;

  public GroupResourcesOutput() {
  }

  public GroupResourcesOutput succeeded(List succeeded) {
    this.succeeded = succeeded;
    return this;
  }

  /**
   * Get succeeded
   * @return succeeded
   */
  @javax.annotation.Nullable
  public List getSucceeded() {
    return succeeded;
  }

  public void setSucceeded(List succeeded) {
    this.succeeded = succeeded;
  }


  public GroupResourcesOutput failed(List failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nullable
  public List getFailed() {
    return failed;
  }

  public void setFailed(List failed) {
    this.failed = failed;
  }


  public GroupResourcesOutput pending(List pending) {
    this.pending = pending;
    return this;
  }

  /**
   * Get pending
   * @return pending
   */
  @javax.annotation.Nullable
  public List getPending() {
    return pending;
  }

  public void setPending(List pending) {
    this.pending = pending;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupResourcesOutput groupResourcesOutput = (GroupResourcesOutput) o;
    return Objects.equals(this.succeeded, groupResourcesOutput.succeeded) &&
        Objects.equals(this.failed, groupResourcesOutput.failed) &&
        Objects.equals(this.pending, groupResourcesOutput.pending);
  }

  @Override
  public int hashCode() {
    return Objects.hash(succeeded, failed, pending);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupResourcesOutput {\n");
    sb.append("    succeeded: ").append(toIndentedString(succeeded)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Succeeded");
    openapiFields.add("Failed");
    openapiFields.add("Pending");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupResourcesOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupResourcesOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupResourcesOutput is not found in the empty JSON string", GroupResourcesOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupResourcesOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupResourcesOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Succeeded`
      if (jsonObj.get("Succeeded") != null && !jsonObj.get("Succeeded").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Succeeded"));
      }
      // validate the optional field `Failed`
      if (jsonObj.get("Failed") != null && !jsonObj.get("Failed").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Failed"));
      }
      // validate the optional field `Pending`
      if (jsonObj.get("Pending") != null && !jsonObj.get("Pending").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Pending"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupResourcesOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupResourcesOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupResourcesOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupResourcesOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupResourcesOutput>() {
           @Override
           public void write(JsonWriter out, GroupResourcesOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupResourcesOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupResourcesOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupResourcesOutput
   * @throws IOException if the JSON string is invalid with respect to GroupResourcesOutput
   */
  public static GroupResourcesOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupResourcesOutput.class);
  }

  /**
   * Convert an instance of GroupResourcesOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

