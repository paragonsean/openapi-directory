/**
 * AWS Resource Groups
 * <p>Resource Groups lets you organize Amazon Web Services resources such as Amazon Elastic Compute Cloud instances, Amazon Relational Database Service databases, and Amazon Simple Storage Service buckets into groups using criteria that you define as tags. A resource group is a collection of resources that match the resource types specified in a query, and share one or more tags or portions of tags. You can create a group of resources based on their roles in your cloud infrastructure, lifecycle stages, regions, application layers, or virtually any criteria. Resource Groups enable you to automate management tasks, such as those in Amazon Web Services Systems Manager Automation documents, on tag-related resources in Amazon Web Services Systems Manager. Groups of tagged resources also let you quickly view a custom console in Amazon Web Services Systems Manager that shows Config compliance and other monitoring data about member resources.</p> <p>To create a resource group, build a resource query, and specify tags that identify the criteria that members of the group have in common. Tags are key-value pairs.</p> <p>For more information about Resource Groups, see the <a href=\"https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html\">Resource Groups User Guide</a>.</p> <p>Resource Groups uses a REST-compliant API that you can use to perform the following types of operations.</p> <ul> <li> <p>Create, Read, Update, and Delete (CRUD) operations on resource groups and resource query entities</p> </li> <li> <p>Applying, editing, and removing tags from resource groups</p> </li> <li> <p>Resolving resource group member ARNs so they can be returned as search results</p> </li> <li> <p>Getting data about resources that are members of a group</p> </li> <li> <p>Searching Amazon Web Services resources based on a resource query</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListGroupResourcesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListGroupResourcesOutput::OAIListGroupResourcesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListGroupResourcesOutput::OAIListGroupResourcesOutput() {
    this->initializeModel();
}

OAIListGroupResourcesOutput::~OAIListGroupResourcesOutput() {}

void OAIListGroupResourcesOutput::initializeModel() {

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_resource_identifiers_isSet = false;
    m_resource_identifiers_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_query_errors_isSet = false;
    m_query_errors_isValid = false;
}

void OAIListGroupResourcesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListGroupResourcesOutput::fromJsonObject(QJsonObject json) {

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_resource_identifiers_isValid = ::OpenAPI::fromJsonValue(m_resource_identifiers, json[QString("ResourceIdentifiers")]);
    m_resource_identifiers_isSet = !json[QString("ResourceIdentifiers")].isNull() && m_resource_identifiers_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_query_errors_isValid = ::OpenAPI::fromJsonValue(m_query_errors, json[QString("QueryErrors")]);
    m_query_errors_isSet = !json[QString("QueryErrors")].isNull() && m_query_errors_isValid;
}

QString OAIListGroupResourcesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListGroupResourcesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_resource_identifiers.isSet()) {
        obj.insert(QString("ResourceIdentifiers"), ::OpenAPI::toJsonValue(m_resource_identifiers));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_query_errors.isSet()) {
        obj.insert(QString("QueryErrors"), ::OpenAPI::toJsonValue(m_query_errors));
    }
    return obj;
}

QList OAIListGroupResourcesOutput::getResources() const {
    return m_resources;
}
void OAIListGroupResourcesOutput::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIListGroupResourcesOutput::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIListGroupResourcesOutput::is_resources_Valid() const{
    return m_resources_isValid;
}

QList OAIListGroupResourcesOutput::getResourceIdentifiers() const {
    return m_resource_identifiers;
}
void OAIListGroupResourcesOutput::setResourceIdentifiers(const QList &resource_identifiers) {
    m_resource_identifiers = resource_identifiers;
    m_resource_identifiers_isSet = true;
}

bool OAIListGroupResourcesOutput::is_resource_identifiers_Set() const{
    return m_resource_identifiers_isSet;
}

bool OAIListGroupResourcesOutput::is_resource_identifiers_Valid() const{
    return m_resource_identifiers_isValid;
}

QString OAIListGroupResourcesOutput::getNextToken() const {
    return m_next_token;
}
void OAIListGroupResourcesOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListGroupResourcesOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListGroupResourcesOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListGroupResourcesOutput::getQueryErrors() const {
    return m_query_errors;
}
void OAIListGroupResourcesOutput::setQueryErrors(const QList &query_errors) {
    m_query_errors = query_errors;
    m_query_errors_isSet = true;
}

bool OAIListGroupResourcesOutput::is_query_errors_Set() const{
    return m_query_errors_isSet;
}

bool OAIListGroupResourcesOutput::is_query_errors_Valid() const{
    return m_query_errors_isValid;
}

bool OAIListGroupResourcesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListGroupResourcesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
