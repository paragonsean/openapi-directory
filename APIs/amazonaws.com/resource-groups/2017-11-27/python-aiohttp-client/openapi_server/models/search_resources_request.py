# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_group_request_resource_query import CreateGroupRequestResourceQuery
import re
from openapi_server import util


class SearchResourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_query: CreateGroupRequestResourceQuery=None, max_results: int=None, next_token: str=None):
        """SearchResourcesRequest - a model defined in OpenAPI

        :param resource_query: The resource_query of this SearchResourcesRequest.
        :param max_results: The max_results of this SearchResourcesRequest.
        :param next_token: The next_token of this SearchResourcesRequest.
        """
        self.openapi_types = {
            'resource_query': CreateGroupRequestResourceQuery,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'resource_query': 'ResourceQuery',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._resource_query = resource_query
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResources_request of this SearchResourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_query(self):
        """Gets the resource_query of this SearchResourcesRequest.


        :return: The resource_query of this SearchResourcesRequest.
        :rtype: CreateGroupRequestResourceQuery
        """
        return self._resource_query

    @resource_query.setter
    def resource_query(self, resource_query):
        """Sets the resource_query of this SearchResourcesRequest.


        :param resource_query: The resource_query of this SearchResourcesRequest.
        :type resource_query: CreateGroupRequestResourceQuery
        """
        if resource_query is None:
            raise ValueError("Invalid value for `resource_query`, must not be `None`")

        self._resource_query = resource_query

    @property
    def max_results(self):
        """Gets the max_results of this SearchResourcesRequest.

        The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :return: The max_results of this SearchResourcesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchResourcesRequest.

        The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :param max_results: The max_results of this SearchResourcesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this SearchResourcesRequest.

        The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.

        :return: The next_token of this SearchResourcesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchResourcesRequest.

        The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.

        :param next_token: The next_token of this SearchResourcesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 8192:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `8192`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'^[a-zA-Z0-9+\/]*={0,2}$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9+\/]*={0,2}$/`")

        self._next_token = next_token
