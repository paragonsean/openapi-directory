# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_type import QueryType
from openapi_server import util


class ResourceQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: QueryType=None, query: str=None):
        """ResourceQuery - a model defined in OpenAPI

        :param type: The type of this ResourceQuery.
        :param query: The query of this ResourceQuery.
        """
        self.openapi_types = {
            'type': QueryType,
            'query': str
        }

        self.attribute_map = {
            'type': 'Type',
            'query': 'Query'
        }

        self._type = type
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceQuery of this ResourceQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ResourceQuery.


        :return: The type of this ResourceQuery.
        :rtype: QueryType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResourceQuery.


        :param type: The type of this ResourceQuery.
        :type type: QueryType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def query(self):
        """Gets the query of this ResourceQuery.


        :return: The query of this ResourceQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ResourceQuery.


        :param query: The query of this ResourceQuery.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query
