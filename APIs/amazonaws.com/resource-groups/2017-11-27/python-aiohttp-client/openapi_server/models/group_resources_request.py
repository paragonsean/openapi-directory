# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GroupResourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: str=None, resource_arns: List[str]=None):
        """GroupResourcesRequest - a model defined in OpenAPI

        :param group: The group of this GroupResourcesRequest.
        :param resource_arns: The resource_arns of this GroupResourcesRequest.
        """
        self.openapi_types = {
            'group': str,
            'resource_arns': List[str]
        }

        self.attribute_map = {
            'group': 'Group',
            'resource_arns': 'ResourceArns'
        }

        self._group = group
        self._resource_arns = resource_arns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupResourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupResources_request of this GroupResourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this GroupResourcesRequest.

        The name or the ARN of the resource group to add resources to.

        :return: The group of this GroupResourcesRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GroupResourcesRequest.

        The name or the ARN of the resource group to add resources to.

        :param group: The group of this GroupResourcesRequest.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")
        if group is not None and len(group) > 1600:
            raise ValueError("Invalid value for `group`, length must be less than or equal to `1600`")
        if group is not None and len(group) < 1:
            raise ValueError("Invalid value for `group`, length must be greater than or equal to `1`")
        if group is not None and not re.search(r'(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\d{1}:[0-9]{12}:group\/)?[a-zA-Z0-9_\.-]{1,300}', group):
            raise ValueError("Invalid value for `group`, must be a follow pattern or equal to `/(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\d{1}:[0-9]{12}:group\/)?[a-zA-Z0-9_\.-]{1,300}/`")

        self._group = group

    @property
    def resource_arns(self):
        """Gets the resource_arns of this GroupResourcesRequest.

        The list of ARNs of the resources to be added to the group. 

        :return: The resource_arns of this GroupResourcesRequest.
        :rtype: List[str]
        """
        return self._resource_arns

    @resource_arns.setter
    def resource_arns(self, resource_arns):
        """Sets the resource_arns of this GroupResourcesRequest.

        The list of ARNs of the resources to be added to the group. 

        :param resource_arns: The resource_arns of this GroupResourcesRequest.
        :type resource_arns: List[str]
        """
        if resource_arns is None:
            raise ValueError("Invalid value for `resource_arns`, must not be `None`")
        if resource_arns is not None and len(resource_arns) > 10:
            raise ValueError("Invalid value for `resource_arns`, number of items must be less than or equal to `10`")
        if resource_arns is not None and len(resource_arns) < 1:
            raise ValueError("Invalid value for `resource_arns`, number of items must be greater than or equal to `1`")

        self._resource_arns = resource_arns
