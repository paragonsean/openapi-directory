# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_filter import ResourceFilter
import re
from openapi_server import util


class ListGroupResourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, group: str=None, filters: List[ResourceFilter]=None, max_results: int=None, next_token: str=None):
        """ListGroupResourcesRequest - a model defined in OpenAPI

        :param group_name: The group_name of this ListGroupResourcesRequest.
        :param group: The group of this ListGroupResourcesRequest.
        :param filters: The filters of this ListGroupResourcesRequest.
        :param max_results: The max_results of this ListGroupResourcesRequest.
        :param next_token: The next_token of this ListGroupResourcesRequest.
        """
        self.openapi_types = {
            'group_name': str,
            'group': str,
            'filters': List[ResourceFilter],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'group': 'Group',
            'filters': 'Filters',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._group_name = group_name
        self._group = group
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListGroupResourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListGroupResources_request of this ListGroupResourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this ListGroupResourcesRequest.

        <important> <p> <i> <b>Deprecated - don't use this parameter. Use the <code>Group</code> request field instead.</b> </i> </p> </important>

        :return: The group_name of this ListGroupResourcesRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ListGroupResourcesRequest.

        <important> <p> <i> <b>Deprecated - don't use this parameter. Use the <code>Group</code> request field instead.</b> </i> </p> </important>

        :param group_name: The group_name of this ListGroupResourcesRequest.
        :type group_name: str
        """
        if group_name is not None and len(group_name) > 300:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `300`")
        if group_name is not None and len(group_name) < 1:
            raise ValueError("Invalid value for `group_name`, length must be greater than or equal to `1`")
        if group_name is not None and not re.search(r'[a-zA-Z0-9_\.-]+', group_name):
            raise ValueError("Invalid value for `group_name`, must be a follow pattern or equal to `/[a-zA-Z0-9_\.-]+/`")

        self._group_name = group_name

    @property
    def group(self):
        """Gets the group of this ListGroupResourcesRequest.

        The name or the ARN of the resource group

        :return: The group of this ListGroupResourcesRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ListGroupResourcesRequest.

        The name or the ARN of the resource group

        :param group: The group of this ListGroupResourcesRequest.
        :type group: str
        """
        if group is not None and len(group) > 1600:
            raise ValueError("Invalid value for `group`, length must be less than or equal to `1600`")
        if group is not None and len(group) < 1:
            raise ValueError("Invalid value for `group`, length must be greater than or equal to `1`")
        if group is not None and not re.search(r'(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\d{1}:[0-9]{12}:group\/)?[a-zA-Z0-9_\.-]{1,300}', group):
            raise ValueError("Invalid value for `group`, must be a follow pattern or equal to `/(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\d{1}:[0-9]{12}:group\/)?[a-zA-Z0-9_\.-]{1,300}/`")

        self._group = group

    @property
    def filters(self):
        """Gets the filters of this ListGroupResourcesRequest.

        <p>Filters, formatted as <a>ResourceFilter</a> objects, that you want to apply to a <code>ListGroupResources</code> operation. Filters the results to include only those of the specified resource types.</p> <ul> <li> <p> <code>resource-type</code> - Filter resources by their type. Specify up to five resource types in the format <code>AWS::ServiceCode::ResourceType</code>. For example, <code>AWS::EC2::Instance</code>, or <code>AWS::S3::Bucket</code>. </p> </li> </ul> <p>When you specify a <code>resource-type</code> filter for <code>ListGroupResources</code>, Resource Groups validates your filter resource types against the types that are defined in the query associated with the group. For example, if a group contains only S3 buckets because its query specifies only that resource type, but your <code>resource-type</code> filter includes EC2 instances, AWS Resource Groups does not filter for EC2 instances. In this case, a <code>ListGroupResources</code> request returns a <code>BadRequestException</code> error with a message similar to the following:</p> <p> <code>The resource types specified as filters in the request are not valid.</code> </p> <p>The error includes a list of resource types that failed the validation because they are not part of the query associated with the group. This validation doesn't occur when the group query specifies <code>AWS::AllSupported</code>, because a group based on such a query can contain any of the allowed resource types for the query type (tag-based or Amazon CloudFront stack-based queries).</p>

        :return: The filters of this ListGroupResourcesRequest.
        :rtype: List[ResourceFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListGroupResourcesRequest.

        <p>Filters, formatted as <a>ResourceFilter</a> objects, that you want to apply to a <code>ListGroupResources</code> operation. Filters the results to include only those of the specified resource types.</p> <ul> <li> <p> <code>resource-type</code> - Filter resources by their type. Specify up to five resource types in the format <code>AWS::ServiceCode::ResourceType</code>. For example, <code>AWS::EC2::Instance</code>, or <code>AWS::S3::Bucket</code>. </p> </li> </ul> <p>When you specify a <code>resource-type</code> filter for <code>ListGroupResources</code>, Resource Groups validates your filter resource types against the types that are defined in the query associated with the group. For example, if a group contains only S3 buckets because its query specifies only that resource type, but your <code>resource-type</code> filter includes EC2 instances, AWS Resource Groups does not filter for EC2 instances. In this case, a <code>ListGroupResources</code> request returns a <code>BadRequestException</code> error with a message similar to the following:</p> <p> <code>The resource types specified as filters in the request are not valid.</code> </p> <p>The error includes a list of resource types that failed the validation because they are not part of the query associated with the group. This validation doesn't occur when the group query specifies <code>AWS::AllSupported</code>, because a group based on such a query can contain any of the allowed resource types for the query type (tag-based or Amazon CloudFront stack-based queries).</p>

        :param filters: The filters of this ListGroupResourcesRequest.
        :type filters: List[ResourceFilter]
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListGroupResourcesRequest.

        The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :return: The max_results of this ListGroupResourcesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListGroupResourcesRequest.

        The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :param max_results: The max_results of this ListGroupResourcesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListGroupResourcesRequest.

        The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.

        :return: The next_token of this ListGroupResourcesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListGroupResourcesRequest.

        The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.

        :param next_token: The next_token of this ListGroupResourcesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 8192:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `8192`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'^[a-zA-Z0-9+\/]*={0,2}$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9+\/]*={0,2}$/`")

        self._next_token = next_token
