# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_group_input_resource_query import CreateGroupInputResourceQuery
from openapi_server import util


class CreateGroupInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, resource_query: CreateGroupInputResourceQuery=None, tags: Dict=None, configuration: List=None):
        """CreateGroupInput - a model defined in OpenAPI

        :param name: The name of this CreateGroupInput.
        :param description: The description of this CreateGroupInput.
        :param resource_query: The resource_query of this CreateGroupInput.
        :param tags: The tags of this CreateGroupInput.
        :param configuration: The configuration of this CreateGroupInput.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'resource_query': CreateGroupInputResourceQuery,
            'tags': Dict,
            'configuration': List
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'resource_query': 'ResourceQuery',
            'tags': 'Tags',
            'configuration': 'Configuration'
        }

        self._name = name
        self._description = description
        self._resource_query = resource_query
        self._tags = tags
        self._configuration = configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGroupInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGroupInput of this CreateGroupInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateGroupInput.


        :return: The name of this CreateGroupInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateGroupInput.


        :param name: The name of this CreateGroupInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateGroupInput.


        :return: The description of this CreateGroupInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateGroupInput.


        :param description: The description of this CreateGroupInput.
        :type description: str
        """

        self._description = description

    @property
    def resource_query(self):
        """Gets the resource_query of this CreateGroupInput.


        :return: The resource_query of this CreateGroupInput.
        :rtype: CreateGroupInputResourceQuery
        """
        return self._resource_query

    @resource_query.setter
    def resource_query(self, resource_query):
        """Sets the resource_query of this CreateGroupInput.


        :param resource_query: The resource_query of this CreateGroupInput.
        :type resource_query: CreateGroupInputResourceQuery
        """

        self._resource_query = resource_query

    @property
    def tags(self):
        """Gets the tags of this CreateGroupInput.


        :return: The tags of this CreateGroupInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateGroupInput.


        :param tags: The tags of this CreateGroupInput.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def configuration(self):
        """Gets the configuration of this CreateGroupInput.


        :return: The configuration of this CreateGroupInput.
        :rtype: List
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateGroupInput.


        :param configuration: The configuration of this CreateGroupInput.
        :type configuration: List
        """

        self._configuration = configuration
