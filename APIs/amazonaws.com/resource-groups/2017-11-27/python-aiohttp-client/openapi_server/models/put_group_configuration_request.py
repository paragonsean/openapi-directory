# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_configuration_item import GroupConfigurationItem
import re
from openapi_server import util


class PutGroupConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: str=None, configuration: List[GroupConfigurationItem]=None):
        """PutGroupConfigurationRequest - a model defined in OpenAPI

        :param group: The group of this PutGroupConfigurationRequest.
        :param configuration: The configuration of this PutGroupConfigurationRequest.
        """
        self.openapi_types = {
            'group': str,
            'configuration': List[GroupConfigurationItem]
        }

        self.attribute_map = {
            'group': 'Group',
            'configuration': 'Configuration'
        }

        self._group = group
        self._configuration = configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutGroupConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutGroupConfiguration_request of this PutGroupConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this PutGroupConfigurationRequest.

        The name or ARN of the resource group with the configuration that you want to update.

        :return: The group of this PutGroupConfigurationRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PutGroupConfigurationRequest.

        The name or ARN of the resource group with the configuration that you want to update.

        :param group: The group of this PutGroupConfigurationRequest.
        :type group: str
        """
        if group is not None and len(group) > 1600:
            raise ValueError("Invalid value for `group`, length must be less than or equal to `1600`")
        if group is not None and len(group) < 1:
            raise ValueError("Invalid value for `group`, length must be greater than or equal to `1`")
        if group is not None and not re.search(r'(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\d{1}:[0-9]{12}:group\/)?[a-zA-Z0-9_\.-]{1,300}', group):
            raise ValueError("Invalid value for `group`, must be a follow pattern or equal to `/(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\d{1}:[0-9]{12}:group\/)?[a-zA-Z0-9_\.-]{1,300}/`")

        self._group = group

    @property
    def configuration(self):
        """Gets the configuration of this PutGroupConfigurationRequest.

        <p>The new configuration to associate with the specified group. A configuration associates the resource group with an Amazon Web Services service and specifies how the service can interact with the resources in the group. A configuration is an array of <a>GroupConfigurationItem</a> elements.</p> <p>For information about the syntax of a service configuration, see <a href=\"https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html\">Service configurations for Resource Groups</a>.</p> <note> <p>A resource group can contain either a <code>Configuration</code> or a <code>ResourceQuery</code>, but not both.</p> </note>

        :return: The configuration of this PutGroupConfigurationRequest.
        :rtype: List[GroupConfigurationItem]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this PutGroupConfigurationRequest.

        <p>The new configuration to associate with the specified group. A configuration associates the resource group with an Amazon Web Services service and specifies how the service can interact with the resources in the group. A configuration is an array of <a>GroupConfigurationItem</a> elements.</p> <p>For information about the syntax of a service configuration, see <a href=\"https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html\">Service configurations for Resource Groups</a>.</p> <note> <p>A resource group can contain either a <code>Configuration</code> or a <code>ResourceQuery</code>, but not both.</p> </note>

        :param configuration: The configuration of this PutGroupConfigurationRequest.
        :type configuration: List[GroupConfigurationItem]
        """
        if configuration is not None and len(configuration) > 2:
            raise ValueError("Invalid value for `configuration`, number of items must be less than or equal to `2`")

        self._configuration = configuration
