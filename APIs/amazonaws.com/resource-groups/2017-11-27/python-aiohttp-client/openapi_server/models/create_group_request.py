# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_group_request_resource_query import CreateGroupRequestResourceQuery
from openapi_server.models.group_configuration_item import GroupConfigurationItem
import re
from openapi_server import util


class CreateGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, resource_query: CreateGroupRequestResourceQuery=None, tags: Dict[str, str]=None, configuration: List[GroupConfigurationItem]=None):
        """CreateGroupRequest - a model defined in OpenAPI

        :param name: The name of this CreateGroupRequest.
        :param description: The description of this CreateGroupRequest.
        :param resource_query: The resource_query of this CreateGroupRequest.
        :param tags: The tags of this CreateGroupRequest.
        :param configuration: The configuration of this CreateGroupRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'resource_query': CreateGroupRequestResourceQuery,
            'tags': Dict[str, str],
            'configuration': List[GroupConfigurationItem]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'resource_query': 'ResourceQuery',
            'tags': 'Tags',
            'configuration': 'Configuration'
        }

        self._name = name
        self._description = description
        self._resource_query = resource_query
        self._tags = tags
        self._configuration = configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGroup_request of this CreateGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateGroupRequest.

        The name of the group, which is the identifier of the group in other operations. You can't change the name of a resource group after you create it. A resource group name can consist of letters, numbers, hyphens, periods, and underscores. The name cannot start with <code>AWS</code> or <code>aws</code>; these are reserved. A resource group name must be unique within each Amazon Web Services Region in your Amazon Web Services account.

        :return: The name of this CreateGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateGroupRequest.

        The name of the group, which is the identifier of the group in other operations. You can't change the name of a resource group after you create it. A resource group name can consist of letters, numbers, hyphens, periods, and underscores. The name cannot start with <code>AWS</code> or <code>aws</code>; these are reserved. A resource group name must be unique within each Amazon Web Services Region in your Amazon Web Services account.

        :param name: The name of this CreateGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[a-zA-Z0-9_\.-]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9_\.-]+/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateGroupRequest.

        The description of the resource group. Descriptions can consist of letters, numbers, hyphens, underscores, periods, and spaces.

        :return: The description of this CreateGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateGroupRequest.

        The description of the resource group. Descriptions can consist of letters, numbers, hyphens, underscores, periods, and spaces.

        :param description: The description of this CreateGroupRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and not re.search(r'[\sa-zA-Z0-9_\.-]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\sa-zA-Z0-9_\.-]*/`")

        self._description = description

    @property
    def resource_query(self):
        """Gets the resource_query of this CreateGroupRequest.


        :return: The resource_query of this CreateGroupRequest.
        :rtype: CreateGroupRequestResourceQuery
        """
        return self._resource_query

    @resource_query.setter
    def resource_query(self, resource_query):
        """Sets the resource_query of this CreateGroupRequest.


        :param resource_query: The resource_query of this CreateGroupRequest.
        :type resource_query: CreateGroupRequestResourceQuery
        """

        self._resource_query = resource_query

    @property
    def tags(self):
        """Gets the tags of this CreateGroupRequest.

        The tags to add to the group. A tag is key-value pair string.

        :return: The tags of this CreateGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateGroupRequest.

        The tags to add to the group. A tag is key-value pair string.

        :param tags: The tags of this CreateGroupRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def configuration(self):
        """Gets the configuration of this CreateGroupRequest.

        <p>A configuration associates the resource group with an Amazon Web Services service and specifies how the service can interact with the resources in the group. A configuration is an array of <a>GroupConfigurationItem</a> elements. For details about the syntax of service configurations, see <a href=\"https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html\">Service configurations for Resource Groups</a>.</p> <note> <p>A resource group can contain either a <code>Configuration</code> or a <code>ResourceQuery</code>, but not both.</p> </note>

        :return: The configuration of this CreateGroupRequest.
        :rtype: List[GroupConfigurationItem]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateGroupRequest.

        <p>A configuration associates the resource group with an Amazon Web Services service and specifies how the service can interact with the resources in the group. A configuration is an array of <a>GroupConfigurationItem</a> elements. For details about the syntax of service configurations, see <a href=\"https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html\">Service configurations for Resource Groups</a>.</p> <note> <p>A resource group can contain either a <code>Configuration</code> or a <code>ResourceQuery</code>, but not both.</p> </note>

        :param configuration: The configuration of this CreateGroupRequest.
        :type configuration: List[GroupConfigurationItem]
        """
        if configuration is not None and len(configuration) > 2:
            raise ValueError("Invalid value for `configuration`, number of items must be less than or equal to `2`")

        self._configuration = configuration
