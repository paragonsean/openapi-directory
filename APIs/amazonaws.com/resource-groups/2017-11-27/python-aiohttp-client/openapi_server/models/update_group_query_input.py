# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_group_query_input_resource_query import UpdateGroupQueryInputResourceQuery
from openapi_server import util


class UpdateGroupQueryInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, group: str=None, resource_query: UpdateGroupQueryInputResourceQuery=None):
        """UpdateGroupQueryInput - a model defined in OpenAPI

        :param group_name: The group_name of this UpdateGroupQueryInput.
        :param group: The group of this UpdateGroupQueryInput.
        :param resource_query: The resource_query of this UpdateGroupQueryInput.
        """
        self.openapi_types = {
            'group_name': str,
            'group': str,
            'resource_query': UpdateGroupQueryInputResourceQuery
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'group': 'Group',
            'resource_query': 'ResourceQuery'
        }

        self._group_name = group_name
        self._group = group
        self._resource_query = resource_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateGroupQueryInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateGroupQueryInput of this UpdateGroupQueryInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this UpdateGroupQueryInput.


        :return: The group_name of this UpdateGroupQueryInput.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this UpdateGroupQueryInput.


        :param group_name: The group_name of this UpdateGroupQueryInput.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def group(self):
        """Gets the group of this UpdateGroupQueryInput.


        :return: The group of this UpdateGroupQueryInput.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this UpdateGroupQueryInput.


        :param group: The group of this UpdateGroupQueryInput.
        :type group: str
        """

        self._group = group

    @property
    def resource_query(self):
        """Gets the resource_query of this UpdateGroupQueryInput.


        :return: The resource_query of this UpdateGroupQueryInput.
        :rtype: UpdateGroupQueryInputResourceQuery
        """
        return self._resource_query

    @resource_query.setter
    def resource_query(self, resource_query):
        """Sets the resource_query of this UpdateGroupQueryInput.


        :param resource_query: The resource_query of this UpdateGroupQueryInput.
        :type resource_query: UpdateGroupQueryInputResourceQuery
        """
        if resource_query is None:
            raise ValueError("Invalid value for `resource_query`, must not be `None`")

        self._resource_query = resource_query
