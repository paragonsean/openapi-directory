# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_configuration_status import GroupConfigurationStatus
from openapi_server import util


class GroupConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: List=None, proposed_configuration: List=None, status: GroupConfigurationStatus=None, failure_reason: str=None):
        """GroupConfiguration - a model defined in OpenAPI

        :param configuration: The configuration of this GroupConfiguration.
        :param proposed_configuration: The proposed_configuration of this GroupConfiguration.
        :param status: The status of this GroupConfiguration.
        :param failure_reason: The failure_reason of this GroupConfiguration.
        """
        self.openapi_types = {
            'configuration': List,
            'proposed_configuration': List,
            'status': GroupConfigurationStatus,
            'failure_reason': str
        }

        self.attribute_map = {
            'configuration': 'Configuration',
            'proposed_configuration': 'ProposedConfiguration',
            'status': 'Status',
            'failure_reason': 'FailureReason'
        }

        self._configuration = configuration
        self._proposed_configuration = proposed_configuration
        self._status = status
        self._failure_reason = failure_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupConfiguration of this GroupConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this GroupConfiguration.


        :return: The configuration of this GroupConfiguration.
        :rtype: List
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this GroupConfiguration.


        :param configuration: The configuration of this GroupConfiguration.
        :type configuration: List
        """

        self._configuration = configuration

    @property
    def proposed_configuration(self):
        """Gets the proposed_configuration of this GroupConfiguration.


        :return: The proposed_configuration of this GroupConfiguration.
        :rtype: List
        """
        return self._proposed_configuration

    @proposed_configuration.setter
    def proposed_configuration(self, proposed_configuration):
        """Sets the proposed_configuration of this GroupConfiguration.


        :param proposed_configuration: The proposed_configuration of this GroupConfiguration.
        :type proposed_configuration: List
        """

        self._proposed_configuration = proposed_configuration

    @property
    def status(self):
        """Gets the status of this GroupConfiguration.


        :return: The status of this GroupConfiguration.
        :rtype: GroupConfigurationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GroupConfiguration.


        :param status: The status of this GroupConfiguration.
        :type status: GroupConfigurationStatus
        """

        self._status = status

    @property
    def failure_reason(self):
        """Gets the failure_reason of this GroupConfiguration.


        :return: The failure_reason of this GroupConfiguration.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this GroupConfiguration.


        :param failure_reason: The failure_reason of this GroupConfiguration.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason
