# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, group: str=None, description: str=None):
        """UpdateGroupRequest - a model defined in OpenAPI

        :param group_name: The group_name of this UpdateGroupRequest.
        :param group: The group of this UpdateGroupRequest.
        :param description: The description of this UpdateGroupRequest.
        """
        self.openapi_types = {
            'group_name': str,
            'group': str,
            'description': str
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'group': 'Group',
            'description': 'Description'
        }

        self._group_name = group_name
        self._group = group
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateGroup_request of this UpdateGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this UpdateGroupRequest.

        Don't use this parameter. Use <code>Group</code> instead.

        :return: The group_name of this UpdateGroupRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this UpdateGroupRequest.

        Don't use this parameter. Use <code>Group</code> instead.

        :param group_name: The group_name of this UpdateGroupRequest.
        :type group_name: str
        """
        if group_name is not None and len(group_name) > 300:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `300`")
        if group_name is not None and len(group_name) < 1:
            raise ValueError("Invalid value for `group_name`, length must be greater than or equal to `1`")
        if group_name is not None and not re.search(r'[a-zA-Z0-9_\.-]+', group_name):
            raise ValueError("Invalid value for `group_name`, must be a follow pattern or equal to `/[a-zA-Z0-9_\.-]+/`")

        self._group_name = group_name

    @property
    def group(self):
        """Gets the group of this UpdateGroupRequest.

        The name or the ARN of the resource group to modify.

        :return: The group of this UpdateGroupRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this UpdateGroupRequest.

        The name or the ARN of the resource group to modify.

        :param group: The group of this UpdateGroupRequest.
        :type group: str
        """
        if group is not None and len(group) > 1600:
            raise ValueError("Invalid value for `group`, length must be less than or equal to `1600`")
        if group is not None and len(group) < 1:
            raise ValueError("Invalid value for `group`, length must be greater than or equal to `1`")
        if group is not None and not re.search(r'(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\d{1}:[0-9]{12}:group\/)?[a-zA-Z0-9_\.-]{1,300}', group):
            raise ValueError("Invalid value for `group`, must be a follow pattern or equal to `/(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\d{1}:[0-9]{12}:group\/)?[a-zA-Z0-9_\.-]{1,300}/`")

        self._group = group

    @property
    def description(self):
        """Gets the description of this UpdateGroupRequest.

        The new description that you want to update the resource group with. Descriptions can contain letters, numbers, hyphens, underscores, periods, and spaces.

        :return: The description of this UpdateGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateGroupRequest.

        The new description that you want to update the resource group with. Descriptions can contain letters, numbers, hyphens, underscores, periods, and spaces.

        :param description: The description of this UpdateGroupRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and not re.search(r'[\sa-zA-Z0-9_\.-]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\sa-zA-Z0-9_\.-]*/`")

        self._description = description
