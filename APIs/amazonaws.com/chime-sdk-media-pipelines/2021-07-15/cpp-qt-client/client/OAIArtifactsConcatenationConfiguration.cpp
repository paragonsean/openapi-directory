/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactsConcatenationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactsConcatenationConfiguration::OAIArtifactsConcatenationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactsConcatenationConfiguration::OAIArtifactsConcatenationConfiguration() {
    this->initializeModel();
}

OAIArtifactsConcatenationConfiguration::~OAIArtifactsConcatenationConfiguration() {}

void OAIArtifactsConcatenationConfiguration::initializeModel() {

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_data_channel_isSet = false;
    m_data_channel_isValid = false;

    m_transcription_messages_isSet = false;
    m_transcription_messages_isValid = false;

    m_meeting_events_isSet = false;
    m_meeting_events_isValid = false;

    m_composited_video_isSet = false;
    m_composited_video_isValid = false;
}

void OAIArtifactsConcatenationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactsConcatenationConfiguration::fromJsonObject(QJsonObject json) {

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("Audio")]);
    m_audio_isSet = !json[QString("Audio")].isNull() && m_audio_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("Video")]);
    m_video_isSet = !json[QString("Video")].isNull() && m_video_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_data_channel_isValid = ::OpenAPI::fromJsonValue(m_data_channel, json[QString("DataChannel")]);
    m_data_channel_isSet = !json[QString("DataChannel")].isNull() && m_data_channel_isValid;

    m_transcription_messages_isValid = ::OpenAPI::fromJsonValue(m_transcription_messages, json[QString("TranscriptionMessages")]);
    m_transcription_messages_isSet = !json[QString("TranscriptionMessages")].isNull() && m_transcription_messages_isValid;

    m_meeting_events_isValid = ::OpenAPI::fromJsonValue(m_meeting_events, json[QString("MeetingEvents")]);
    m_meeting_events_isSet = !json[QString("MeetingEvents")].isNull() && m_meeting_events_isValid;

    m_composited_video_isValid = ::OpenAPI::fromJsonValue(m_composited_video, json[QString("CompositedVideo")]);
    m_composited_video_isSet = !json[QString("CompositedVideo")].isNull() && m_composited_video_isValid;
}

QString OAIArtifactsConcatenationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactsConcatenationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_audio.isSet()) {
        obj.insert(QString("Audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_video.isSet()) {
        obj.insert(QString("Video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_content.isSet()) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_data_channel.isSet()) {
        obj.insert(QString("DataChannel"), ::OpenAPI::toJsonValue(m_data_channel));
    }
    if (m_transcription_messages.isSet()) {
        obj.insert(QString("TranscriptionMessages"), ::OpenAPI::toJsonValue(m_transcription_messages));
    }
    if (m_meeting_events.isSet()) {
        obj.insert(QString("MeetingEvents"), ::OpenAPI::toJsonValue(m_meeting_events));
    }
    if (m_composited_video.isSet()) {
        obj.insert(QString("CompositedVideo"), ::OpenAPI::toJsonValue(m_composited_video));
    }
    return obj;
}

OAIArtifactsConcatenationConfiguration_Audio OAIArtifactsConcatenationConfiguration::getAudio() const {
    return m_audio;
}
void OAIArtifactsConcatenationConfiguration::setAudio(const OAIArtifactsConcatenationConfiguration_Audio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIArtifactsConcatenationConfiguration::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIArtifactsConcatenationConfiguration::is_audio_Valid() const{
    return m_audio_isValid;
}

OAIArtifactsConcatenationConfiguration_Video OAIArtifactsConcatenationConfiguration::getVideo() const {
    return m_video;
}
void OAIArtifactsConcatenationConfiguration::setVideo(const OAIArtifactsConcatenationConfiguration_Video &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIArtifactsConcatenationConfiguration::is_video_Set() const{
    return m_video_isSet;
}

bool OAIArtifactsConcatenationConfiguration::is_video_Valid() const{
    return m_video_isValid;
}

OAIArtifactsConcatenationConfiguration_Content OAIArtifactsConcatenationConfiguration::getContent() const {
    return m_content;
}
void OAIArtifactsConcatenationConfiguration::setContent(const OAIArtifactsConcatenationConfiguration_Content &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIArtifactsConcatenationConfiguration::is_content_Set() const{
    return m_content_isSet;
}

bool OAIArtifactsConcatenationConfiguration::is_content_Valid() const{
    return m_content_isValid;
}

OAIArtifactsConcatenationConfiguration_DataChannel OAIArtifactsConcatenationConfiguration::getDataChannel() const {
    return m_data_channel;
}
void OAIArtifactsConcatenationConfiguration::setDataChannel(const OAIArtifactsConcatenationConfiguration_DataChannel &data_channel) {
    m_data_channel = data_channel;
    m_data_channel_isSet = true;
}

bool OAIArtifactsConcatenationConfiguration::is_data_channel_Set() const{
    return m_data_channel_isSet;
}

bool OAIArtifactsConcatenationConfiguration::is_data_channel_Valid() const{
    return m_data_channel_isValid;
}

OAIArtifactsConcatenationConfiguration_TranscriptionMessages OAIArtifactsConcatenationConfiguration::getTranscriptionMessages() const {
    return m_transcription_messages;
}
void OAIArtifactsConcatenationConfiguration::setTranscriptionMessages(const OAIArtifactsConcatenationConfiguration_TranscriptionMessages &transcription_messages) {
    m_transcription_messages = transcription_messages;
    m_transcription_messages_isSet = true;
}

bool OAIArtifactsConcatenationConfiguration::is_transcription_messages_Set() const{
    return m_transcription_messages_isSet;
}

bool OAIArtifactsConcatenationConfiguration::is_transcription_messages_Valid() const{
    return m_transcription_messages_isValid;
}

OAIArtifactsConcatenationConfiguration_MeetingEvents OAIArtifactsConcatenationConfiguration::getMeetingEvents() const {
    return m_meeting_events;
}
void OAIArtifactsConcatenationConfiguration::setMeetingEvents(const OAIArtifactsConcatenationConfiguration_MeetingEvents &meeting_events) {
    m_meeting_events = meeting_events;
    m_meeting_events_isSet = true;
}

bool OAIArtifactsConcatenationConfiguration::is_meeting_events_Set() const{
    return m_meeting_events_isSet;
}

bool OAIArtifactsConcatenationConfiguration::is_meeting_events_Valid() const{
    return m_meeting_events_isValid;
}

OAIArtifactsConcatenationConfiguration_CompositedVideo OAIArtifactsConcatenationConfiguration::getCompositedVideo() const {
    return m_composited_video;
}
void OAIArtifactsConcatenationConfiguration::setCompositedVideo(const OAIArtifactsConcatenationConfiguration_CompositedVideo &composited_video) {
    m_composited_video = composited_video;
    m_composited_video_isSet = true;
}

bool OAIArtifactsConcatenationConfiguration::is_composited_video_Set() const{
    return m_composited_video_isSet;
}

bool OAIArtifactsConcatenationConfiguration::is_composited_video_Valid() const{
    return m_composited_video_isValid;
}

bool OAIArtifactsConcatenationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcription_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_composited_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactsConcatenationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_isValid && m_video_isValid && m_content_isValid && m_data_channel_isValid && m_transcription_messages_isValid && m_meeting_events_isValid && m_composited_video_isValid && true;
}

} // namespace OpenAPI
