/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentArtifactsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentArtifactsConfiguration::OAIContentArtifactsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentArtifactsConfiguration::OAIContentArtifactsConfiguration() {
    this->initializeModel();
}

OAIContentArtifactsConfiguration::~OAIContentArtifactsConfiguration() {}

void OAIContentArtifactsConfiguration::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;

    m_mux_type_isSet = false;
    m_mux_type_isValid = false;
}

void OAIContentArtifactsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentArtifactsConfiguration::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_mux_type_isValid = ::OpenAPI::fromJsonValue(m_mux_type, json[QString("MuxType")]);
    m_mux_type_isSet = !json[QString("MuxType")].isNull() && m_mux_type_isValid;
}

QString OAIContentArtifactsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentArtifactsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_mux_type.isSet()) {
        obj.insert(QString("MuxType"), ::OpenAPI::toJsonValue(m_mux_type));
    }
    return obj;
}

OAIArtifactsState OAIContentArtifactsConfiguration::getState() const {
    return m_state;
}
void OAIContentArtifactsConfiguration::setState(const OAIArtifactsState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIContentArtifactsConfiguration::is_state_Set() const{
    return m_state_isSet;
}

bool OAIContentArtifactsConfiguration::is_state_Valid() const{
    return m_state_isValid;
}

OAIContentMuxType OAIContentArtifactsConfiguration::getMuxType() const {
    return m_mux_type;
}
void OAIContentArtifactsConfiguration::setMuxType(const OAIContentMuxType &mux_type) {
    m_mux_type = mux_type;
    m_mux_type_isSet = true;
}

bool OAIContentArtifactsConfiguration::is_mux_type_Set() const{
    return m_mux_type_isSet;
}

bool OAIContentArtifactsConfiguration::is_mux_type_Valid() const{
    return m_mux_type_isValid;
}

bool OAIContentArtifactsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mux_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentArtifactsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
