/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcatenationSink_S3BucketSinkConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcatenationSink_S3BucketSinkConfiguration::OAIConcatenationSink_S3BucketSinkConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcatenationSink_S3BucketSinkConfiguration::OAIConcatenationSink_S3BucketSinkConfiguration() {
    this->initializeModel();
}

OAIConcatenationSink_S3BucketSinkConfiguration::~OAIConcatenationSink_S3BucketSinkConfiguration() {}

void OAIConcatenationSink_S3BucketSinkConfiguration::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;
}

void OAIConcatenationSink_S3BucketSinkConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcatenationSink_S3BucketSinkConfiguration::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;
}

QString OAIConcatenationSink_S3BucketSinkConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcatenationSink_S3BucketSinkConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    return obj;
}

QString OAIConcatenationSink_S3BucketSinkConfiguration::getDestination() const {
    return m_destination;
}
void OAIConcatenationSink_S3BucketSinkConfiguration::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIConcatenationSink_S3BucketSinkConfiguration::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIConcatenationSink_S3BucketSinkConfiguration::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIConcatenationSink_S3BucketSinkConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcatenationSink_S3BucketSinkConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && true;
}

} // namespace OpenAPI
