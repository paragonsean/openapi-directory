/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaInsightsPipelineConfigurationElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaInsightsPipelineConfigurationElement::OAIMediaInsightsPipelineConfigurationElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaInsightsPipelineConfigurationElement::OAIMediaInsightsPipelineConfigurationElement() {
    this->initializeModel();
}

OAIMediaInsightsPipelineConfigurationElement::~OAIMediaInsightsPipelineConfigurationElement() {}

void OAIMediaInsightsPipelineConfigurationElement::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_amazon_transcribe_call_analytics_processor_configuration_isSet = false;
    m_amazon_transcribe_call_analytics_processor_configuration_isValid = false;

    m_amazon_transcribe_processor_configuration_isSet = false;
    m_amazon_transcribe_processor_configuration_isValid = false;

    m_kinesis_data_stream_sink_configuration_isSet = false;
    m_kinesis_data_stream_sink_configuration_isValid = false;

    m_s3_recording_sink_configuration_isSet = false;
    m_s3_recording_sink_configuration_isValid = false;

    m_voice_analytics_processor_configuration_isSet = false;
    m_voice_analytics_processor_configuration_isValid = false;

    m_lambda_function_sink_configuration_isSet = false;
    m_lambda_function_sink_configuration_isValid = false;

    m_sqs_queue_sink_configuration_isSet = false;
    m_sqs_queue_sink_configuration_isValid = false;

    m_sns_topic_sink_configuration_isSet = false;
    m_sns_topic_sink_configuration_isValid = false;
}

void OAIMediaInsightsPipelineConfigurationElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaInsightsPipelineConfigurationElement::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_amazon_transcribe_call_analytics_processor_configuration_isValid = ::OpenAPI::fromJsonValue(m_amazon_transcribe_call_analytics_processor_configuration, json[QString("AmazonTranscribeCallAnalyticsProcessorConfiguration")]);
    m_amazon_transcribe_call_analytics_processor_configuration_isSet = !json[QString("AmazonTranscribeCallAnalyticsProcessorConfiguration")].isNull() && m_amazon_transcribe_call_analytics_processor_configuration_isValid;

    m_amazon_transcribe_processor_configuration_isValid = ::OpenAPI::fromJsonValue(m_amazon_transcribe_processor_configuration, json[QString("AmazonTranscribeProcessorConfiguration")]);
    m_amazon_transcribe_processor_configuration_isSet = !json[QString("AmazonTranscribeProcessorConfiguration")].isNull() && m_amazon_transcribe_processor_configuration_isValid;

    m_kinesis_data_stream_sink_configuration_isValid = ::OpenAPI::fromJsonValue(m_kinesis_data_stream_sink_configuration, json[QString("KinesisDataStreamSinkConfiguration")]);
    m_kinesis_data_stream_sink_configuration_isSet = !json[QString("KinesisDataStreamSinkConfiguration")].isNull() && m_kinesis_data_stream_sink_configuration_isValid;

    m_s3_recording_sink_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_recording_sink_configuration, json[QString("S3RecordingSinkConfiguration")]);
    m_s3_recording_sink_configuration_isSet = !json[QString("S3RecordingSinkConfiguration")].isNull() && m_s3_recording_sink_configuration_isValid;

    m_voice_analytics_processor_configuration_isValid = ::OpenAPI::fromJsonValue(m_voice_analytics_processor_configuration, json[QString("VoiceAnalyticsProcessorConfiguration")]);
    m_voice_analytics_processor_configuration_isSet = !json[QString("VoiceAnalyticsProcessorConfiguration")].isNull() && m_voice_analytics_processor_configuration_isValid;

    m_lambda_function_sink_configuration_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_sink_configuration, json[QString("LambdaFunctionSinkConfiguration")]);
    m_lambda_function_sink_configuration_isSet = !json[QString("LambdaFunctionSinkConfiguration")].isNull() && m_lambda_function_sink_configuration_isValid;

    m_sqs_queue_sink_configuration_isValid = ::OpenAPI::fromJsonValue(m_sqs_queue_sink_configuration, json[QString("SqsQueueSinkConfiguration")]);
    m_sqs_queue_sink_configuration_isSet = !json[QString("SqsQueueSinkConfiguration")].isNull() && m_sqs_queue_sink_configuration_isValid;

    m_sns_topic_sink_configuration_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_sink_configuration, json[QString("SnsTopicSinkConfiguration")]);
    m_sns_topic_sink_configuration_isSet = !json[QString("SnsTopicSinkConfiguration")].isNull() && m_sns_topic_sink_configuration_isValid;
}

QString OAIMediaInsightsPipelineConfigurationElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaInsightsPipelineConfigurationElement::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_amazon_transcribe_call_analytics_processor_configuration.isSet()) {
        obj.insert(QString("AmazonTranscribeCallAnalyticsProcessorConfiguration"), ::OpenAPI::toJsonValue(m_amazon_transcribe_call_analytics_processor_configuration));
    }
    if (m_amazon_transcribe_processor_configuration.isSet()) {
        obj.insert(QString("AmazonTranscribeProcessorConfiguration"), ::OpenAPI::toJsonValue(m_amazon_transcribe_processor_configuration));
    }
    if (m_kinesis_data_stream_sink_configuration.isSet()) {
        obj.insert(QString("KinesisDataStreamSinkConfiguration"), ::OpenAPI::toJsonValue(m_kinesis_data_stream_sink_configuration));
    }
    if (m_s3_recording_sink_configuration.isSet()) {
        obj.insert(QString("S3RecordingSinkConfiguration"), ::OpenAPI::toJsonValue(m_s3_recording_sink_configuration));
    }
    if (m_voice_analytics_processor_configuration.isSet()) {
        obj.insert(QString("VoiceAnalyticsProcessorConfiguration"), ::OpenAPI::toJsonValue(m_voice_analytics_processor_configuration));
    }
    if (m_lambda_function_sink_configuration.isSet()) {
        obj.insert(QString("LambdaFunctionSinkConfiguration"), ::OpenAPI::toJsonValue(m_lambda_function_sink_configuration));
    }
    if (m_sqs_queue_sink_configuration.isSet()) {
        obj.insert(QString("SqsQueueSinkConfiguration"), ::OpenAPI::toJsonValue(m_sqs_queue_sink_configuration));
    }
    if (m_sns_topic_sink_configuration.isSet()) {
        obj.insert(QString("SnsTopicSinkConfiguration"), ::OpenAPI::toJsonValue(m_sns_topic_sink_configuration));
    }
    return obj;
}

OAIMediaInsightsPipelineConfigurationElementType OAIMediaInsightsPipelineConfigurationElement::getType() const {
    return m_type;
}
void OAIMediaInsightsPipelineConfigurationElement::setType(const OAIMediaInsightsPipelineConfigurationElementType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_type_Valid() const{
    return m_type_isValid;
}

OAIMediaInsightsPipelineConfigurationElement_AmazonTranscribeCallAnalyticsProcessorConfiguration OAIMediaInsightsPipelineConfigurationElement::getAmazonTranscribeCallAnalyticsProcessorConfiguration() const {
    return m_amazon_transcribe_call_analytics_processor_configuration;
}
void OAIMediaInsightsPipelineConfigurationElement::setAmazonTranscribeCallAnalyticsProcessorConfiguration(const OAIMediaInsightsPipelineConfigurationElement_AmazonTranscribeCallAnalyticsProcessorConfiguration &amazon_transcribe_call_analytics_processor_configuration) {
    m_amazon_transcribe_call_analytics_processor_configuration = amazon_transcribe_call_analytics_processor_configuration;
    m_amazon_transcribe_call_analytics_processor_configuration_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_amazon_transcribe_call_analytics_processor_configuration_Set() const{
    return m_amazon_transcribe_call_analytics_processor_configuration_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_amazon_transcribe_call_analytics_processor_configuration_Valid() const{
    return m_amazon_transcribe_call_analytics_processor_configuration_isValid;
}

OAIMediaInsightsPipelineConfigurationElement_AmazonTranscribeProcessorConfiguration OAIMediaInsightsPipelineConfigurationElement::getAmazonTranscribeProcessorConfiguration() const {
    return m_amazon_transcribe_processor_configuration;
}
void OAIMediaInsightsPipelineConfigurationElement::setAmazonTranscribeProcessorConfiguration(const OAIMediaInsightsPipelineConfigurationElement_AmazonTranscribeProcessorConfiguration &amazon_transcribe_processor_configuration) {
    m_amazon_transcribe_processor_configuration = amazon_transcribe_processor_configuration;
    m_amazon_transcribe_processor_configuration_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_amazon_transcribe_processor_configuration_Set() const{
    return m_amazon_transcribe_processor_configuration_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_amazon_transcribe_processor_configuration_Valid() const{
    return m_amazon_transcribe_processor_configuration_isValid;
}

OAIMediaInsightsPipelineConfigurationElement_KinesisDataStreamSinkConfiguration OAIMediaInsightsPipelineConfigurationElement::getKinesisDataStreamSinkConfiguration() const {
    return m_kinesis_data_stream_sink_configuration;
}
void OAIMediaInsightsPipelineConfigurationElement::setKinesisDataStreamSinkConfiguration(const OAIMediaInsightsPipelineConfigurationElement_KinesisDataStreamSinkConfiguration &kinesis_data_stream_sink_configuration) {
    m_kinesis_data_stream_sink_configuration = kinesis_data_stream_sink_configuration;
    m_kinesis_data_stream_sink_configuration_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_kinesis_data_stream_sink_configuration_Set() const{
    return m_kinesis_data_stream_sink_configuration_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_kinesis_data_stream_sink_configuration_Valid() const{
    return m_kinesis_data_stream_sink_configuration_isValid;
}

OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration OAIMediaInsightsPipelineConfigurationElement::getS3RecordingSinkConfiguration() const {
    return m_s3_recording_sink_configuration;
}
void OAIMediaInsightsPipelineConfigurationElement::setS3RecordingSinkConfiguration(const OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration &s3_recording_sink_configuration) {
    m_s3_recording_sink_configuration = s3_recording_sink_configuration;
    m_s3_recording_sink_configuration_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_s3_recording_sink_configuration_Set() const{
    return m_s3_recording_sink_configuration_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_s3_recording_sink_configuration_Valid() const{
    return m_s3_recording_sink_configuration_isValid;
}

OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration OAIMediaInsightsPipelineConfigurationElement::getVoiceAnalyticsProcessorConfiguration() const {
    return m_voice_analytics_processor_configuration;
}
void OAIMediaInsightsPipelineConfigurationElement::setVoiceAnalyticsProcessorConfiguration(const OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration &voice_analytics_processor_configuration) {
    m_voice_analytics_processor_configuration = voice_analytics_processor_configuration;
    m_voice_analytics_processor_configuration_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_voice_analytics_processor_configuration_Set() const{
    return m_voice_analytics_processor_configuration_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_voice_analytics_processor_configuration_Valid() const{
    return m_voice_analytics_processor_configuration_isValid;
}

OAIMediaInsightsPipelineConfigurationElement_LambdaFunctionSinkConfiguration OAIMediaInsightsPipelineConfigurationElement::getLambdaFunctionSinkConfiguration() const {
    return m_lambda_function_sink_configuration;
}
void OAIMediaInsightsPipelineConfigurationElement::setLambdaFunctionSinkConfiguration(const OAIMediaInsightsPipelineConfigurationElement_LambdaFunctionSinkConfiguration &lambda_function_sink_configuration) {
    m_lambda_function_sink_configuration = lambda_function_sink_configuration;
    m_lambda_function_sink_configuration_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_lambda_function_sink_configuration_Set() const{
    return m_lambda_function_sink_configuration_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_lambda_function_sink_configuration_Valid() const{
    return m_lambda_function_sink_configuration_isValid;
}

OAIMediaInsightsPipelineConfigurationElement_SqsQueueSinkConfiguration OAIMediaInsightsPipelineConfigurationElement::getSqsQueueSinkConfiguration() const {
    return m_sqs_queue_sink_configuration;
}
void OAIMediaInsightsPipelineConfigurationElement::setSqsQueueSinkConfiguration(const OAIMediaInsightsPipelineConfigurationElement_SqsQueueSinkConfiguration &sqs_queue_sink_configuration) {
    m_sqs_queue_sink_configuration = sqs_queue_sink_configuration;
    m_sqs_queue_sink_configuration_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_sqs_queue_sink_configuration_Set() const{
    return m_sqs_queue_sink_configuration_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_sqs_queue_sink_configuration_Valid() const{
    return m_sqs_queue_sink_configuration_isValid;
}

OAIMediaInsightsPipelineConfigurationElement_SnsTopicSinkConfiguration OAIMediaInsightsPipelineConfigurationElement::getSnsTopicSinkConfiguration() const {
    return m_sns_topic_sink_configuration;
}
void OAIMediaInsightsPipelineConfigurationElement::setSnsTopicSinkConfiguration(const OAIMediaInsightsPipelineConfigurationElement_SnsTopicSinkConfiguration &sns_topic_sink_configuration) {
    m_sns_topic_sink_configuration = sns_topic_sink_configuration;
    m_sns_topic_sink_configuration_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_sns_topic_sink_configuration_Set() const{
    return m_sns_topic_sink_configuration_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement::is_sns_topic_sink_configuration_Valid() const{
    return m_sns_topic_sink_configuration_isValid;
}

bool OAIMediaInsightsPipelineConfigurationElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_transcribe_call_analytics_processor_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_transcribe_processor_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_data_stream_sink_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_recording_sink_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_analytics_processor_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_sink_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_queue_sink_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_sink_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaInsightsPipelineConfigurationElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
