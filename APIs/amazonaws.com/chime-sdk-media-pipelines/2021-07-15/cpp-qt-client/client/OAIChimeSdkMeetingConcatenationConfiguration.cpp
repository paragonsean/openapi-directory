/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChimeSdkMeetingConcatenationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChimeSdkMeetingConcatenationConfiguration::OAIChimeSdkMeetingConcatenationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChimeSdkMeetingConcatenationConfiguration::OAIChimeSdkMeetingConcatenationConfiguration() {
    this->initializeModel();
}

OAIChimeSdkMeetingConcatenationConfiguration::~OAIChimeSdkMeetingConcatenationConfiguration() {}

void OAIChimeSdkMeetingConcatenationConfiguration::initializeModel() {

    m_artifacts_configuration_isSet = false;
    m_artifacts_configuration_isValid = false;
}

void OAIChimeSdkMeetingConcatenationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChimeSdkMeetingConcatenationConfiguration::fromJsonObject(QJsonObject json) {

    m_artifacts_configuration_isValid = ::OpenAPI::fromJsonValue(m_artifacts_configuration, json[QString("ArtifactsConfiguration")]);
    m_artifacts_configuration_isSet = !json[QString("ArtifactsConfiguration")].isNull() && m_artifacts_configuration_isValid;
}

QString OAIChimeSdkMeetingConcatenationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChimeSdkMeetingConcatenationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_artifacts_configuration.isSet()) {
        obj.insert(QString("ArtifactsConfiguration"), ::OpenAPI::toJsonValue(m_artifacts_configuration));
    }
    return obj;
}

OAIChimeSdkMeetingConcatenationConfiguration_ArtifactsConfiguration OAIChimeSdkMeetingConcatenationConfiguration::getArtifactsConfiguration() const {
    return m_artifacts_configuration;
}
void OAIChimeSdkMeetingConcatenationConfiguration::setArtifactsConfiguration(const OAIChimeSdkMeetingConcatenationConfiguration_ArtifactsConfiguration &artifacts_configuration) {
    m_artifacts_configuration = artifacts_configuration;
    m_artifacts_configuration_isSet = true;
}

bool OAIChimeSdkMeetingConcatenationConfiguration::is_artifacts_configuration_Set() const{
    return m_artifacts_configuration_isSet;
}

bool OAIChimeSdkMeetingConcatenationConfiguration::is_artifacts_configuration_Valid() const{
    return m_artifacts_configuration_isValid;
}

bool OAIChimeSdkMeetingConcatenationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifacts_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChimeSdkMeetingConcatenationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_artifacts_configuration_isValid && true;
}

} // namespace OpenAPI
