/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaInsightsPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaInsightsPipeline::OAIMediaInsightsPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaInsightsPipeline::OAIMediaInsightsPipeline() {
    this->initializeModel();
}

OAIMediaInsightsPipeline::~OAIMediaInsightsPipeline() {}

void OAIMediaInsightsPipeline::initializeModel() {

    m_media_pipeline_id_isSet = false;
    m_media_pipeline_id_isValid = false;

    m_media_pipeline_arn_isSet = false;
    m_media_pipeline_arn_isValid = false;

    m_media_insights_pipeline_configuration_arn_isSet = false;
    m_media_insights_pipeline_configuration_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_kinesis_video_stream_source_runtime_configuration_isSet = false;
    m_kinesis_video_stream_source_runtime_configuration_isValid = false;

    m_media_insights_runtime_metadata_isSet = false;
    m_media_insights_runtime_metadata_isValid = false;

    m_kinesis_video_stream_recording_source_runtime_configuration_isSet = false;
    m_kinesis_video_stream_recording_source_runtime_configuration_isValid = false;

    m_s3_recording_sink_runtime_configuration_isSet = false;
    m_s3_recording_sink_runtime_configuration_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;
}

void OAIMediaInsightsPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaInsightsPipeline::fromJsonObject(QJsonObject json) {

    m_media_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_id, json[QString("MediaPipelineId")]);
    m_media_pipeline_id_isSet = !json[QString("MediaPipelineId")].isNull() && m_media_pipeline_id_isValid;

    m_media_pipeline_arn_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_arn, json[QString("MediaPipelineArn")]);
    m_media_pipeline_arn_isSet = !json[QString("MediaPipelineArn")].isNull() && m_media_pipeline_arn_isValid;

    m_media_insights_pipeline_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline_configuration_arn, json[QString("MediaInsightsPipelineConfigurationArn")]);
    m_media_insights_pipeline_configuration_arn_isSet = !json[QString("MediaInsightsPipelineConfigurationArn")].isNull() && m_media_insights_pipeline_configuration_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_kinesis_video_stream_source_runtime_configuration_isValid = ::OpenAPI::fromJsonValue(m_kinesis_video_stream_source_runtime_configuration, json[QString("KinesisVideoStreamSourceRuntimeConfiguration")]);
    m_kinesis_video_stream_source_runtime_configuration_isSet = !json[QString("KinesisVideoStreamSourceRuntimeConfiguration")].isNull() && m_kinesis_video_stream_source_runtime_configuration_isValid;

    m_media_insights_runtime_metadata_isValid = ::OpenAPI::fromJsonValue(m_media_insights_runtime_metadata, json[QString("MediaInsightsRuntimeMetadata")]);
    m_media_insights_runtime_metadata_isSet = !json[QString("MediaInsightsRuntimeMetadata")].isNull() && m_media_insights_runtime_metadata_isValid;

    m_kinesis_video_stream_recording_source_runtime_configuration_isValid = ::OpenAPI::fromJsonValue(m_kinesis_video_stream_recording_source_runtime_configuration, json[QString("KinesisVideoStreamRecordingSourceRuntimeConfiguration")]);
    m_kinesis_video_stream_recording_source_runtime_configuration_isSet = !json[QString("KinesisVideoStreamRecordingSourceRuntimeConfiguration")].isNull() && m_kinesis_video_stream_recording_source_runtime_configuration_isValid;

    m_s3_recording_sink_runtime_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_recording_sink_runtime_configuration, json[QString("S3RecordingSinkRuntimeConfiguration")]);
    m_s3_recording_sink_runtime_configuration_isSet = !json[QString("S3RecordingSinkRuntimeConfiguration")].isNull() && m_s3_recording_sink_runtime_configuration_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;
}

QString OAIMediaInsightsPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaInsightsPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_media_pipeline_id_isSet) {
        obj.insert(QString("MediaPipelineId"), ::OpenAPI::toJsonValue(m_media_pipeline_id));
    }
    if (m_media_pipeline_arn_isSet) {
        obj.insert(QString("MediaPipelineArn"), ::OpenAPI::toJsonValue(m_media_pipeline_arn));
    }
    if (m_media_insights_pipeline_configuration_arn_isSet) {
        obj.insert(QString("MediaInsightsPipelineConfigurationArn"), ::OpenAPI::toJsonValue(m_media_insights_pipeline_configuration_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_kinesis_video_stream_source_runtime_configuration.isSet()) {
        obj.insert(QString("KinesisVideoStreamSourceRuntimeConfiguration"), ::OpenAPI::toJsonValue(m_kinesis_video_stream_source_runtime_configuration));
    }
    if (m_media_insights_runtime_metadata.isSet()) {
        obj.insert(QString("MediaInsightsRuntimeMetadata"), ::OpenAPI::toJsonValue(m_media_insights_runtime_metadata));
    }
    if (m_kinesis_video_stream_recording_source_runtime_configuration.isSet()) {
        obj.insert(QString("KinesisVideoStreamRecordingSourceRuntimeConfiguration"), ::OpenAPI::toJsonValue(m_kinesis_video_stream_recording_source_runtime_configuration));
    }
    if (m_s3_recording_sink_runtime_configuration.isSet()) {
        obj.insert(QString("S3RecordingSinkRuntimeConfiguration"), ::OpenAPI::toJsonValue(m_s3_recording_sink_runtime_configuration));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    return obj;
}

QString OAIMediaInsightsPipeline::getMediaPipelineId() const {
    return m_media_pipeline_id;
}
void OAIMediaInsightsPipeline::setMediaPipelineId(const QString &media_pipeline_id) {
    m_media_pipeline_id = media_pipeline_id;
    m_media_pipeline_id_isSet = true;
}

bool OAIMediaInsightsPipeline::is_media_pipeline_id_Set() const{
    return m_media_pipeline_id_isSet;
}

bool OAIMediaInsightsPipeline::is_media_pipeline_id_Valid() const{
    return m_media_pipeline_id_isValid;
}

QString OAIMediaInsightsPipeline::getMediaPipelineArn() const {
    return m_media_pipeline_arn;
}
void OAIMediaInsightsPipeline::setMediaPipelineArn(const QString &media_pipeline_arn) {
    m_media_pipeline_arn = media_pipeline_arn;
    m_media_pipeline_arn_isSet = true;
}

bool OAIMediaInsightsPipeline::is_media_pipeline_arn_Set() const{
    return m_media_pipeline_arn_isSet;
}

bool OAIMediaInsightsPipeline::is_media_pipeline_arn_Valid() const{
    return m_media_pipeline_arn_isValid;
}

QString OAIMediaInsightsPipeline::getMediaInsightsPipelineConfigurationArn() const {
    return m_media_insights_pipeline_configuration_arn;
}
void OAIMediaInsightsPipeline::setMediaInsightsPipelineConfigurationArn(const QString &media_insights_pipeline_configuration_arn) {
    m_media_insights_pipeline_configuration_arn = media_insights_pipeline_configuration_arn;
    m_media_insights_pipeline_configuration_arn_isSet = true;
}

bool OAIMediaInsightsPipeline::is_media_insights_pipeline_configuration_arn_Set() const{
    return m_media_insights_pipeline_configuration_arn_isSet;
}

bool OAIMediaInsightsPipeline::is_media_insights_pipeline_configuration_arn_Valid() const{
    return m_media_insights_pipeline_configuration_arn_isValid;
}

OAIMediaPipelineStatus OAIMediaInsightsPipeline::getStatus() const {
    return m_status;
}
void OAIMediaInsightsPipeline::setStatus(const OAIMediaPipelineStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMediaInsightsPipeline::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMediaInsightsPipeline::is_status_Valid() const{
    return m_status_isValid;
}

OAIMediaInsightsPipeline_KinesisVideoStreamSourceRuntimeConfiguration OAIMediaInsightsPipeline::getKinesisVideoStreamSourceRuntimeConfiguration() const {
    return m_kinesis_video_stream_source_runtime_configuration;
}
void OAIMediaInsightsPipeline::setKinesisVideoStreamSourceRuntimeConfiguration(const OAIMediaInsightsPipeline_KinesisVideoStreamSourceRuntimeConfiguration &kinesis_video_stream_source_runtime_configuration) {
    m_kinesis_video_stream_source_runtime_configuration = kinesis_video_stream_source_runtime_configuration;
    m_kinesis_video_stream_source_runtime_configuration_isSet = true;
}

bool OAIMediaInsightsPipeline::is_kinesis_video_stream_source_runtime_configuration_Set() const{
    return m_kinesis_video_stream_source_runtime_configuration_isSet;
}

bool OAIMediaInsightsPipeline::is_kinesis_video_stream_source_runtime_configuration_Valid() const{
    return m_kinesis_video_stream_source_runtime_configuration_isValid;
}

QMap OAIMediaInsightsPipeline::getMediaInsightsRuntimeMetadata() const {
    return m_media_insights_runtime_metadata;
}
void OAIMediaInsightsPipeline::setMediaInsightsRuntimeMetadata(const QMap &media_insights_runtime_metadata) {
    m_media_insights_runtime_metadata = media_insights_runtime_metadata;
    m_media_insights_runtime_metadata_isSet = true;
}

bool OAIMediaInsightsPipeline::is_media_insights_runtime_metadata_Set() const{
    return m_media_insights_runtime_metadata_isSet;
}

bool OAIMediaInsightsPipeline::is_media_insights_runtime_metadata_Valid() const{
    return m_media_insights_runtime_metadata_isValid;
}

OAIMediaInsightsPipeline_KinesisVideoStreamRecordingSourceRuntimeConfiguration OAIMediaInsightsPipeline::getKinesisVideoStreamRecordingSourceRuntimeConfiguration() const {
    return m_kinesis_video_stream_recording_source_runtime_configuration;
}
void OAIMediaInsightsPipeline::setKinesisVideoStreamRecordingSourceRuntimeConfiguration(const OAIMediaInsightsPipeline_KinesisVideoStreamRecordingSourceRuntimeConfiguration &kinesis_video_stream_recording_source_runtime_configuration) {
    m_kinesis_video_stream_recording_source_runtime_configuration = kinesis_video_stream_recording_source_runtime_configuration;
    m_kinesis_video_stream_recording_source_runtime_configuration_isSet = true;
}

bool OAIMediaInsightsPipeline::is_kinesis_video_stream_recording_source_runtime_configuration_Set() const{
    return m_kinesis_video_stream_recording_source_runtime_configuration_isSet;
}

bool OAIMediaInsightsPipeline::is_kinesis_video_stream_recording_source_runtime_configuration_Valid() const{
    return m_kinesis_video_stream_recording_source_runtime_configuration_isValid;
}

OAIMediaInsightsPipeline_S3RecordingSinkRuntimeConfiguration OAIMediaInsightsPipeline::getS3RecordingSinkRuntimeConfiguration() const {
    return m_s3_recording_sink_runtime_configuration;
}
void OAIMediaInsightsPipeline::setS3RecordingSinkRuntimeConfiguration(const OAIMediaInsightsPipeline_S3RecordingSinkRuntimeConfiguration &s3_recording_sink_runtime_configuration) {
    m_s3_recording_sink_runtime_configuration = s3_recording_sink_runtime_configuration;
    m_s3_recording_sink_runtime_configuration_isSet = true;
}

bool OAIMediaInsightsPipeline::is_s3_recording_sink_runtime_configuration_Set() const{
    return m_s3_recording_sink_runtime_configuration_isSet;
}

bool OAIMediaInsightsPipeline::is_s3_recording_sink_runtime_configuration_Valid() const{
    return m_s3_recording_sink_runtime_configuration_isValid;
}

QDateTime OAIMediaInsightsPipeline::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIMediaInsightsPipeline::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIMediaInsightsPipeline::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIMediaInsightsPipeline::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

bool OAIMediaInsightsPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_pipeline_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_insights_pipeline_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_video_stream_source_runtime_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_insights_runtime_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_video_stream_recording_source_runtime_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_recording_sink_runtime_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaInsightsPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
