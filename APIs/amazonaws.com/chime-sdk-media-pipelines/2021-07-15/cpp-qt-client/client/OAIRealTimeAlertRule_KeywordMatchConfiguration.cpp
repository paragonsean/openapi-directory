/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealTimeAlertRule_KeywordMatchConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealTimeAlertRule_KeywordMatchConfiguration::OAIRealTimeAlertRule_KeywordMatchConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealTimeAlertRule_KeywordMatchConfiguration::OAIRealTimeAlertRule_KeywordMatchConfiguration() {
    this->initializeModel();
}

OAIRealTimeAlertRule_KeywordMatchConfiguration::~OAIRealTimeAlertRule_KeywordMatchConfiguration() {}

void OAIRealTimeAlertRule_KeywordMatchConfiguration::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_negate_isSet = false;
    m_negate_isValid = false;
}

void OAIRealTimeAlertRule_KeywordMatchConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealTimeAlertRule_KeywordMatchConfiguration::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("Keywords")]);
    m_keywords_isSet = !json[QString("Keywords")].isNull() && m_keywords_isValid;

    m_negate_isValid = ::OpenAPI::fromJsonValue(m_negate, json[QString("Negate")]);
    m_negate_isSet = !json[QString("Negate")].isNull() && m_negate_isValid;
}

QString OAIRealTimeAlertRule_KeywordMatchConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealTimeAlertRule_KeywordMatchConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_keywords.isSet()) {
        obj.insert(QString("Keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_negate_isSet) {
        obj.insert(QString("Negate"), ::OpenAPI::toJsonValue(m_negate));
    }
    return obj;
}

QString OAIRealTimeAlertRule_KeywordMatchConfiguration::getRuleName() const {
    return m_rule_name;
}
void OAIRealTimeAlertRule_KeywordMatchConfiguration::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QList OAIRealTimeAlertRule_KeywordMatchConfiguration::getKeywords() const {
    return m_keywords;
}
void OAIRealTimeAlertRule_KeywordMatchConfiguration::setKeywords(const QList &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::is_keywords_Valid() const{
    return m_keywords_isValid;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::getNegate() const {
    return m_negate;
}
void OAIRealTimeAlertRule_KeywordMatchConfiguration::setNegate(const bool &negate) {
    m_negate = negate;
    m_negate_isSet = true;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::is_negate_Set() const{
    return m_negate_isSet;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::is_negate_Valid() const{
    return m_negate_isValid;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealTimeAlertRule_KeywordMatchConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_name_isValid && m_keywords_isValid && true;
}

} // namespace OpenAPI
