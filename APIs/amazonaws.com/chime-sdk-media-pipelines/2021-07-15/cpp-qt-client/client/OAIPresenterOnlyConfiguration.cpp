/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresenterOnlyConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresenterOnlyConfiguration::OAIPresenterOnlyConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresenterOnlyConfiguration::OAIPresenterOnlyConfiguration() {
    this->initializeModel();
}

OAIPresenterOnlyConfiguration::~OAIPresenterOnlyConfiguration() {}

void OAIPresenterOnlyConfiguration::initializeModel() {

    m_presenter_position_isSet = false;
    m_presenter_position_isValid = false;
}

void OAIPresenterOnlyConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresenterOnlyConfiguration::fromJsonObject(QJsonObject json) {

    m_presenter_position_isValid = ::OpenAPI::fromJsonValue(m_presenter_position, json[QString("PresenterPosition")]);
    m_presenter_position_isSet = !json[QString("PresenterPosition")].isNull() && m_presenter_position_isValid;
}

QString OAIPresenterOnlyConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresenterOnlyConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_presenter_position.isSet()) {
        obj.insert(QString("PresenterPosition"), ::OpenAPI::toJsonValue(m_presenter_position));
    }
    return obj;
}

OAIPresenterPosition OAIPresenterOnlyConfiguration::getPresenterPosition() const {
    return m_presenter_position;
}
void OAIPresenterOnlyConfiguration::setPresenterPosition(const OAIPresenterPosition &presenter_position) {
    m_presenter_position = presenter_position;
    m_presenter_position_isSet = true;
}

bool OAIPresenterOnlyConfiguration::is_presenter_position_Set() const{
    return m_presenter_position_isSet;
}

bool OAIPresenterOnlyConfiguration::is_presenter_position_Valid() const{
    return m_presenter_position_isValid;
}

bool OAIPresenterOnlyConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_presenter_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresenterOnlyConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
