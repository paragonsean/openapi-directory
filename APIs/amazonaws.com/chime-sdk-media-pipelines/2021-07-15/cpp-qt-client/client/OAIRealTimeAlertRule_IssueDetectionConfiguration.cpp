/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealTimeAlertRule_IssueDetectionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealTimeAlertRule_IssueDetectionConfiguration::OAIRealTimeAlertRule_IssueDetectionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealTimeAlertRule_IssueDetectionConfiguration::OAIRealTimeAlertRule_IssueDetectionConfiguration() {
    this->initializeModel();
}

OAIRealTimeAlertRule_IssueDetectionConfiguration::~OAIRealTimeAlertRule_IssueDetectionConfiguration() {}

void OAIRealTimeAlertRule_IssueDetectionConfiguration::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;
}

void OAIRealTimeAlertRule_IssueDetectionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealTimeAlertRule_IssueDetectionConfiguration::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;
}

QString OAIRealTimeAlertRule_IssueDetectionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealTimeAlertRule_IssueDetectionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    return obj;
}

QString OAIRealTimeAlertRule_IssueDetectionConfiguration::getRuleName() const {
    return m_rule_name;
}
void OAIRealTimeAlertRule_IssueDetectionConfiguration::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIRealTimeAlertRule_IssueDetectionConfiguration::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIRealTimeAlertRule_IssueDetectionConfiguration::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

bool OAIRealTimeAlertRule_IssueDetectionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealTimeAlertRule_IssueDetectionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_name_isValid && true;
}

} // namespace OpenAPI
