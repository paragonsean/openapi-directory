/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallAnalyticsLanguageCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallAnalyticsLanguageCode::OAICallAnalyticsLanguageCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallAnalyticsLanguageCode::OAICallAnalyticsLanguageCode() {
    this->initializeModel();
}

OAICallAnalyticsLanguageCode::~OAICallAnalyticsLanguageCode() {}

void OAICallAnalyticsLanguageCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICallAnalyticsLanguageCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICallAnalyticsLanguageCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("en-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::EN_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::EN_GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::ES_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-CA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::FR_CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::FR_FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-AU", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::EN_AU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it-IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::IT_IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de-DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::DE_DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt-BR", Qt::CaseInsensitive) == 0) {
        m_value = eOAICallAnalyticsLanguageCode::PT_BR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICallAnalyticsLanguageCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICallAnalyticsLanguageCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICallAnalyticsLanguageCode::EN_US:
            val = "en-US";
            break;
        case eOAICallAnalyticsLanguageCode::EN_GB:
            val = "en-GB";
            break;
        case eOAICallAnalyticsLanguageCode::ES_US:
            val = "es-US";
            break;
        case eOAICallAnalyticsLanguageCode::FR_CA:
            val = "fr-CA";
            break;
        case eOAICallAnalyticsLanguageCode::FR_FR:
            val = "fr-FR";
            break;
        case eOAICallAnalyticsLanguageCode::EN_AU:
            val = "en-AU";
            break;
        case eOAICallAnalyticsLanguageCode::IT_IT:
            val = "it-IT";
            break;
        case eOAICallAnalyticsLanguageCode::DE_DE:
            val = "de-DE";
            break;
        case eOAICallAnalyticsLanguageCode::PT_BR:
            val = "pt-BR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICallAnalyticsLanguageCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICallAnalyticsLanguageCode::eOAICallAnalyticsLanguageCode OAICallAnalyticsLanguageCode::getValue() const {
    return m_value;
}

void OAICallAnalyticsLanguageCode::setValue(const OAICallAnalyticsLanguageCode::eOAICallAnalyticsLanguageCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICallAnalyticsLanguageCode::isSet() const {
    
    return m_value_isSet;
}

bool OAICallAnalyticsLanguageCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
