/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcatenationSink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcatenationSink::OAIConcatenationSink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcatenationSink::OAIConcatenationSink() {
    this->initializeModel();
}

OAIConcatenationSink::~OAIConcatenationSink() {}

void OAIConcatenationSink::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_s3_bucket_sink_configuration_isSet = false;
    m_s3_bucket_sink_configuration_isValid = false;
}

void OAIConcatenationSink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcatenationSink::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_s3_bucket_sink_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_sink_configuration, json[QString("S3BucketSinkConfiguration")]);
    m_s3_bucket_sink_configuration_isSet = !json[QString("S3BucketSinkConfiguration")].isNull() && m_s3_bucket_sink_configuration_isValid;
}

QString OAIConcatenationSink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcatenationSink::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_s3_bucket_sink_configuration.isSet()) {
        obj.insert(QString("S3BucketSinkConfiguration"), ::OpenAPI::toJsonValue(m_s3_bucket_sink_configuration));
    }
    return obj;
}

OAIConcatenationSinkType OAIConcatenationSink::getType() const {
    return m_type;
}
void OAIConcatenationSink::setType(const OAIConcatenationSinkType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConcatenationSink::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConcatenationSink::is_type_Valid() const{
    return m_type_isValid;
}

OAIConcatenationSink_S3BucketSinkConfiguration OAIConcatenationSink::getS3BucketSinkConfiguration() const {
    return m_s3_bucket_sink_configuration;
}
void OAIConcatenationSink::setS3BucketSinkConfiguration(const OAIConcatenationSink_S3BucketSinkConfiguration &s3_bucket_sink_configuration) {
    m_s3_bucket_sink_configuration = s3_bucket_sink_configuration;
    m_s3_bucket_sink_configuration_isSet = true;
}

bool OAIConcatenationSink::is_s3_bucket_sink_configuration_Set() const{
    return m_s3_bucket_sink_configuration_isSet;
}

bool OAIConcatenationSink::is_s3_bucket_sink_configuration_Valid() const{
    return m_s3_bucket_sink_configuration_isValid;
}

bool OAIConcatenationSink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_sink_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcatenationSink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_s3_bucket_sink_configuration_isValid && true;
}

} // namespace OpenAPI
