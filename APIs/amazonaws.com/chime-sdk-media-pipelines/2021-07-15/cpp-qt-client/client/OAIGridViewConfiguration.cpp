/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridViewConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridViewConfiguration::OAIGridViewConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridViewConfiguration::OAIGridViewConfiguration() {
    this->initializeModel();
}

OAIGridViewConfiguration::~OAIGridViewConfiguration() {}

void OAIGridViewConfiguration::initializeModel() {

    m_content_share_layout_isSet = false;
    m_content_share_layout_isValid = false;

    m_presenter_only_configuration_isSet = false;
    m_presenter_only_configuration_isValid = false;

    m_active_speaker_only_configuration_isSet = false;
    m_active_speaker_only_configuration_isValid = false;

    m_horizontal_layout_configuration_isSet = false;
    m_horizontal_layout_configuration_isValid = false;

    m_vertical_layout_configuration_isSet = false;
    m_vertical_layout_configuration_isValid = false;

    m_video_attribute_isSet = false;
    m_video_attribute_isValid = false;

    m_canvas_orientation_isSet = false;
    m_canvas_orientation_isValid = false;
}

void OAIGridViewConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridViewConfiguration::fromJsonObject(QJsonObject json) {

    m_content_share_layout_isValid = ::OpenAPI::fromJsonValue(m_content_share_layout, json[QString("ContentShareLayout")]);
    m_content_share_layout_isSet = !json[QString("ContentShareLayout")].isNull() && m_content_share_layout_isValid;

    m_presenter_only_configuration_isValid = ::OpenAPI::fromJsonValue(m_presenter_only_configuration, json[QString("PresenterOnlyConfiguration")]);
    m_presenter_only_configuration_isSet = !json[QString("PresenterOnlyConfiguration")].isNull() && m_presenter_only_configuration_isValid;

    m_active_speaker_only_configuration_isValid = ::OpenAPI::fromJsonValue(m_active_speaker_only_configuration, json[QString("ActiveSpeakerOnlyConfiguration")]);
    m_active_speaker_only_configuration_isSet = !json[QString("ActiveSpeakerOnlyConfiguration")].isNull() && m_active_speaker_only_configuration_isValid;

    m_horizontal_layout_configuration_isValid = ::OpenAPI::fromJsonValue(m_horizontal_layout_configuration, json[QString("HorizontalLayoutConfiguration")]);
    m_horizontal_layout_configuration_isSet = !json[QString("HorizontalLayoutConfiguration")].isNull() && m_horizontal_layout_configuration_isValid;

    m_vertical_layout_configuration_isValid = ::OpenAPI::fromJsonValue(m_vertical_layout_configuration, json[QString("VerticalLayoutConfiguration")]);
    m_vertical_layout_configuration_isSet = !json[QString("VerticalLayoutConfiguration")].isNull() && m_vertical_layout_configuration_isValid;

    m_video_attribute_isValid = ::OpenAPI::fromJsonValue(m_video_attribute, json[QString("VideoAttribute")]);
    m_video_attribute_isSet = !json[QString("VideoAttribute")].isNull() && m_video_attribute_isValid;

    m_canvas_orientation_isValid = ::OpenAPI::fromJsonValue(m_canvas_orientation, json[QString("CanvasOrientation")]);
    m_canvas_orientation_isSet = !json[QString("CanvasOrientation")].isNull() && m_canvas_orientation_isValid;
}

QString OAIGridViewConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridViewConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_content_share_layout.isSet()) {
        obj.insert(QString("ContentShareLayout"), ::OpenAPI::toJsonValue(m_content_share_layout));
    }
    if (m_presenter_only_configuration.isSet()) {
        obj.insert(QString("PresenterOnlyConfiguration"), ::OpenAPI::toJsonValue(m_presenter_only_configuration));
    }
    if (m_active_speaker_only_configuration.isSet()) {
        obj.insert(QString("ActiveSpeakerOnlyConfiguration"), ::OpenAPI::toJsonValue(m_active_speaker_only_configuration));
    }
    if (m_horizontal_layout_configuration.isSet()) {
        obj.insert(QString("HorizontalLayoutConfiguration"), ::OpenAPI::toJsonValue(m_horizontal_layout_configuration));
    }
    if (m_vertical_layout_configuration.isSet()) {
        obj.insert(QString("VerticalLayoutConfiguration"), ::OpenAPI::toJsonValue(m_vertical_layout_configuration));
    }
    if (m_video_attribute.isSet()) {
        obj.insert(QString("VideoAttribute"), ::OpenAPI::toJsonValue(m_video_attribute));
    }
    if (m_canvas_orientation.isSet()) {
        obj.insert(QString("CanvasOrientation"), ::OpenAPI::toJsonValue(m_canvas_orientation));
    }
    return obj;
}

OAIContentShareLayoutOption OAIGridViewConfiguration::getContentShareLayout() const {
    return m_content_share_layout;
}
void OAIGridViewConfiguration::setContentShareLayout(const OAIContentShareLayoutOption &content_share_layout) {
    m_content_share_layout = content_share_layout;
    m_content_share_layout_isSet = true;
}

bool OAIGridViewConfiguration::is_content_share_layout_Set() const{
    return m_content_share_layout_isSet;
}

bool OAIGridViewConfiguration::is_content_share_layout_Valid() const{
    return m_content_share_layout_isValid;
}

OAIGridViewConfiguration_PresenterOnlyConfiguration OAIGridViewConfiguration::getPresenterOnlyConfiguration() const {
    return m_presenter_only_configuration;
}
void OAIGridViewConfiguration::setPresenterOnlyConfiguration(const OAIGridViewConfiguration_PresenterOnlyConfiguration &presenter_only_configuration) {
    m_presenter_only_configuration = presenter_only_configuration;
    m_presenter_only_configuration_isSet = true;
}

bool OAIGridViewConfiguration::is_presenter_only_configuration_Set() const{
    return m_presenter_only_configuration_isSet;
}

bool OAIGridViewConfiguration::is_presenter_only_configuration_Valid() const{
    return m_presenter_only_configuration_isValid;
}

OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration OAIGridViewConfiguration::getActiveSpeakerOnlyConfiguration() const {
    return m_active_speaker_only_configuration;
}
void OAIGridViewConfiguration::setActiveSpeakerOnlyConfiguration(const OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration &active_speaker_only_configuration) {
    m_active_speaker_only_configuration = active_speaker_only_configuration;
    m_active_speaker_only_configuration_isSet = true;
}

bool OAIGridViewConfiguration::is_active_speaker_only_configuration_Set() const{
    return m_active_speaker_only_configuration_isSet;
}

bool OAIGridViewConfiguration::is_active_speaker_only_configuration_Valid() const{
    return m_active_speaker_only_configuration_isValid;
}

OAIGridViewConfiguration_HorizontalLayoutConfiguration OAIGridViewConfiguration::getHorizontalLayoutConfiguration() const {
    return m_horizontal_layout_configuration;
}
void OAIGridViewConfiguration::setHorizontalLayoutConfiguration(const OAIGridViewConfiguration_HorizontalLayoutConfiguration &horizontal_layout_configuration) {
    m_horizontal_layout_configuration = horizontal_layout_configuration;
    m_horizontal_layout_configuration_isSet = true;
}

bool OAIGridViewConfiguration::is_horizontal_layout_configuration_Set() const{
    return m_horizontal_layout_configuration_isSet;
}

bool OAIGridViewConfiguration::is_horizontal_layout_configuration_Valid() const{
    return m_horizontal_layout_configuration_isValid;
}

OAIGridViewConfiguration_VerticalLayoutConfiguration OAIGridViewConfiguration::getVerticalLayoutConfiguration() const {
    return m_vertical_layout_configuration;
}
void OAIGridViewConfiguration::setVerticalLayoutConfiguration(const OAIGridViewConfiguration_VerticalLayoutConfiguration &vertical_layout_configuration) {
    m_vertical_layout_configuration = vertical_layout_configuration;
    m_vertical_layout_configuration_isSet = true;
}

bool OAIGridViewConfiguration::is_vertical_layout_configuration_Set() const{
    return m_vertical_layout_configuration_isSet;
}

bool OAIGridViewConfiguration::is_vertical_layout_configuration_Valid() const{
    return m_vertical_layout_configuration_isValid;
}

OAIGridViewConfiguration_VideoAttribute OAIGridViewConfiguration::getVideoAttribute() const {
    return m_video_attribute;
}
void OAIGridViewConfiguration::setVideoAttribute(const OAIGridViewConfiguration_VideoAttribute &video_attribute) {
    m_video_attribute = video_attribute;
    m_video_attribute_isSet = true;
}

bool OAIGridViewConfiguration::is_video_attribute_Set() const{
    return m_video_attribute_isSet;
}

bool OAIGridViewConfiguration::is_video_attribute_Valid() const{
    return m_video_attribute_isValid;
}

OAICanvasOrientation OAIGridViewConfiguration::getCanvasOrientation() const {
    return m_canvas_orientation;
}
void OAIGridViewConfiguration::setCanvasOrientation(const OAICanvasOrientation &canvas_orientation) {
    m_canvas_orientation = canvas_orientation;
    m_canvas_orientation_isSet = true;
}

bool OAIGridViewConfiguration::is_canvas_orientation_Set() const{
    return m_canvas_orientation_isSet;
}

bool OAIGridViewConfiguration::is_canvas_orientation_Valid() const{
    return m_canvas_orientation_isValid;
}

bool OAIGridViewConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_share_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presenter_only_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_speaker_only_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_layout_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_layout_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canvas_orientation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridViewConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_share_layout_isValid && true;
}

} // namespace OpenAPI
