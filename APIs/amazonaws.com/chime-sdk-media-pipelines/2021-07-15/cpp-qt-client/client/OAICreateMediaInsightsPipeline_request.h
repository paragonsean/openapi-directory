/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateMediaInsightsPipeline_request.h
 *
 * 
 */

#ifndef OAICreateMediaInsightsPipeline_request_H
#define OAICreateMediaInsightsPipeline_request_H

#include <QJsonObject>

#include "OAICreateMediaInsightsPipeline_request_KinesisVideoStreamRecordingSourceRuntimeConfiguration.h"
#include "OAICreateMediaInsightsPipeline_request_KinesisVideoStreamSourceRuntimeConfiguration.h"
#include "OAICreateMediaInsightsPipeline_request_S3RecordingSinkRuntimeConfiguration.h"
#include "OAITag.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateMediaInsightsPipeline_request_KinesisVideoStreamSourceRuntimeConfiguration;
class OAICreateMediaInsightsPipeline_request_KinesisVideoStreamRecordingSourceRuntimeConfiguration;
class OAICreateMediaInsightsPipeline_request_S3RecordingSinkRuntimeConfiguration;
class OAITag;

class OAICreateMediaInsightsPipeline_request : public OAIObject {
public:
    OAICreateMediaInsightsPipeline_request();
    OAICreateMediaInsightsPipeline_request(QString json);
    ~OAICreateMediaInsightsPipeline_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMediaInsightsPipelineConfigurationArn() const;
    void setMediaInsightsPipelineConfigurationArn(const QString &media_insights_pipeline_configuration_arn);
    bool is_media_insights_pipeline_configuration_arn_Set() const;
    bool is_media_insights_pipeline_configuration_arn_Valid() const;

    OAICreateMediaInsightsPipeline_request_KinesisVideoStreamSourceRuntimeConfiguration getKinesisVideoStreamSourceRuntimeConfiguration() const;
    void setKinesisVideoStreamSourceRuntimeConfiguration(const OAICreateMediaInsightsPipeline_request_KinesisVideoStreamSourceRuntimeConfiguration &kinesis_video_stream_source_runtime_configuration);
    bool is_kinesis_video_stream_source_runtime_configuration_Set() const;
    bool is_kinesis_video_stream_source_runtime_configuration_Valid() const;

    QMap<QString, QString> getMediaInsightsRuntimeMetadata() const;
    void setMediaInsightsRuntimeMetadata(const QMap<QString, QString> &media_insights_runtime_metadata);
    bool is_media_insights_runtime_metadata_Set() const;
    bool is_media_insights_runtime_metadata_Valid() const;

    OAICreateMediaInsightsPipeline_request_KinesisVideoStreamRecordingSourceRuntimeConfiguration getKinesisVideoStreamRecordingSourceRuntimeConfiguration() const;
    void setKinesisVideoStreamRecordingSourceRuntimeConfiguration(const OAICreateMediaInsightsPipeline_request_KinesisVideoStreamRecordingSourceRuntimeConfiguration &kinesis_video_stream_recording_source_runtime_configuration);
    bool is_kinesis_video_stream_recording_source_runtime_configuration_Set() const;
    bool is_kinesis_video_stream_recording_source_runtime_configuration_Valid() const;

    OAICreateMediaInsightsPipeline_request_S3RecordingSinkRuntimeConfiguration getS3RecordingSinkRuntimeConfiguration() const;
    void setS3RecordingSinkRuntimeConfiguration(const OAICreateMediaInsightsPipeline_request_S3RecordingSinkRuntimeConfiguration &s3_recording_sink_runtime_configuration);
    bool is_s3_recording_sink_runtime_configuration_Set() const;
    bool is_s3_recording_sink_runtime_configuration_Valid() const;

    QList<OAITag> getTags() const;
    void setTags(const QList<OAITag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_media_insights_pipeline_configuration_arn;
    bool m_media_insights_pipeline_configuration_arn_isSet;
    bool m_media_insights_pipeline_configuration_arn_isValid;

    OAICreateMediaInsightsPipeline_request_KinesisVideoStreamSourceRuntimeConfiguration m_kinesis_video_stream_source_runtime_configuration;
    bool m_kinesis_video_stream_source_runtime_configuration_isSet;
    bool m_kinesis_video_stream_source_runtime_configuration_isValid;

    QMap<QString, QString> m_media_insights_runtime_metadata;
    bool m_media_insights_runtime_metadata_isSet;
    bool m_media_insights_runtime_metadata_isValid;

    OAICreateMediaInsightsPipeline_request_KinesisVideoStreamRecordingSourceRuntimeConfiguration m_kinesis_video_stream_recording_source_runtime_configuration;
    bool m_kinesis_video_stream_recording_source_runtime_configuration_isSet;
    bool m_kinesis_video_stream_recording_source_runtime_configuration_isValid;

    OAICreateMediaInsightsPipeline_request_S3RecordingSinkRuntimeConfiguration m_s3_recording_sink_runtime_configuration;
    bool m_s3_recording_sink_runtime_configuration_isSet;
    bool m_s3_recording_sink_runtime_configuration_isValid;

    QList<OAITag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateMediaInsightsPipeline_request)

#endif // OAICreateMediaInsightsPipeline_request_H
