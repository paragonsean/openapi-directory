/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceConfiguration_SelectedVideoStreams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceConfiguration_SelectedVideoStreams::OAISourceConfiguration_SelectedVideoStreams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceConfiguration_SelectedVideoStreams::OAISourceConfiguration_SelectedVideoStreams() {
    this->initializeModel();
}

OAISourceConfiguration_SelectedVideoStreams::~OAISourceConfiguration_SelectedVideoStreams() {}

void OAISourceConfiguration_SelectedVideoStreams::initializeModel() {

    m_attendee_ids_isSet = false;
    m_attendee_ids_isValid = false;

    m_external_user_ids_isSet = false;
    m_external_user_ids_isValid = false;
}

void OAISourceConfiguration_SelectedVideoStreams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceConfiguration_SelectedVideoStreams::fromJsonObject(QJsonObject json) {

    m_attendee_ids_isValid = ::OpenAPI::fromJsonValue(m_attendee_ids, json[QString("AttendeeIds")]);
    m_attendee_ids_isSet = !json[QString("AttendeeIds")].isNull() && m_attendee_ids_isValid;

    m_external_user_ids_isValid = ::OpenAPI::fromJsonValue(m_external_user_ids, json[QString("ExternalUserIds")]);
    m_external_user_ids_isSet = !json[QString("ExternalUserIds")].isNull() && m_external_user_ids_isValid;
}

QString OAISourceConfiguration_SelectedVideoStreams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceConfiguration_SelectedVideoStreams::asJsonObject() const {
    QJsonObject obj;
    if (m_attendee_ids.isSet()) {
        obj.insert(QString("AttendeeIds"), ::OpenAPI::toJsonValue(m_attendee_ids));
    }
    if (m_external_user_ids.isSet()) {
        obj.insert(QString("ExternalUserIds"), ::OpenAPI::toJsonValue(m_external_user_ids));
    }
    return obj;
}

QList OAISourceConfiguration_SelectedVideoStreams::getAttendeeIds() const {
    return m_attendee_ids;
}
void OAISourceConfiguration_SelectedVideoStreams::setAttendeeIds(const QList &attendee_ids) {
    m_attendee_ids = attendee_ids;
    m_attendee_ids_isSet = true;
}

bool OAISourceConfiguration_SelectedVideoStreams::is_attendee_ids_Set() const{
    return m_attendee_ids_isSet;
}

bool OAISourceConfiguration_SelectedVideoStreams::is_attendee_ids_Valid() const{
    return m_attendee_ids_isValid;
}

QList OAISourceConfiguration_SelectedVideoStreams::getExternalUserIds() const {
    return m_external_user_ids;
}
void OAISourceConfiguration_SelectedVideoStreams::setExternalUserIds(const QList &external_user_ids) {
    m_external_user_ids = external_user_ids;
    m_external_user_ids_isSet = true;
}

bool OAISourceConfiguration_SelectedVideoStreams::is_external_user_ids_Set() const{
    return m_external_user_ids_isSet;
}

bool OAISourceConfiguration_SelectedVideoStreams::is_external_user_ids_Valid() const{
    return m_external_user_ids_isValid;
}

bool OAISourceConfiguration_SelectedVideoStreams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendee_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceConfiguration_SelectedVideoStreams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
