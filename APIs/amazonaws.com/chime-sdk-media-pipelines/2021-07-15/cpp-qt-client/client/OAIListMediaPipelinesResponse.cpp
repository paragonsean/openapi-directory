/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMediaPipelinesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMediaPipelinesResponse::OAIListMediaPipelinesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMediaPipelinesResponse::OAIListMediaPipelinesResponse() {
    this->initializeModel();
}

OAIListMediaPipelinesResponse::~OAIListMediaPipelinesResponse() {}

void OAIListMediaPipelinesResponse::initializeModel() {

    m_media_pipelines_isSet = false;
    m_media_pipelines_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListMediaPipelinesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMediaPipelinesResponse::fromJsonObject(QJsonObject json) {

    m_media_pipelines_isValid = ::OpenAPI::fromJsonValue(m_media_pipelines, json[QString("MediaPipelines")]);
    m_media_pipelines_isSet = !json[QString("MediaPipelines")].isNull() && m_media_pipelines_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListMediaPipelinesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMediaPipelinesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_pipelines.isSet()) {
        obj.insert(QString("MediaPipelines"), ::OpenAPI::toJsonValue(m_media_pipelines));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListMediaPipelinesResponse::getMediaPipelines() const {
    return m_media_pipelines;
}
void OAIListMediaPipelinesResponse::setMediaPipelines(const QList &media_pipelines) {
    m_media_pipelines = media_pipelines;
    m_media_pipelines_isSet = true;
}

bool OAIListMediaPipelinesResponse::is_media_pipelines_Set() const{
    return m_media_pipelines_isSet;
}

bool OAIListMediaPipelinesResponse::is_media_pipelines_Valid() const{
    return m_media_pipelines_isValid;
}

QString OAIListMediaPipelinesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListMediaPipelinesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListMediaPipelinesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListMediaPipelinesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListMediaPipelinesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_pipelines.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMediaPipelinesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
