/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMediaInsightsPipelineStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMediaInsightsPipelineStatusRequest::OAIUpdateMediaInsightsPipelineStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMediaInsightsPipelineStatusRequest::OAIUpdateMediaInsightsPipelineStatusRequest() {
    this->initializeModel();
}

OAIUpdateMediaInsightsPipelineStatusRequest::~OAIUpdateMediaInsightsPipelineStatusRequest() {}

void OAIUpdateMediaInsightsPipelineStatusRequest::initializeModel() {

    m_update_status_isSet = false;
    m_update_status_isValid = false;
}

void OAIUpdateMediaInsightsPipelineStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMediaInsightsPipelineStatusRequest::fromJsonObject(QJsonObject json) {

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("UpdateStatus")]);
    m_update_status_isSet = !json[QString("UpdateStatus")].isNull() && m_update_status_isValid;
}

QString OAIUpdateMediaInsightsPipelineStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMediaInsightsPipelineStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_update_status.isSet()) {
        obj.insert(QString("UpdateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    return obj;
}

OAIMediaPipelineStatusUpdate OAIUpdateMediaInsightsPipelineStatusRequest::getUpdateStatus() const {
    return m_update_status;
}
void OAIUpdateMediaInsightsPipelineStatusRequest::setUpdateStatus(const OAIMediaPipelineStatusUpdate &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAIUpdateMediaInsightsPipelineStatusRequest::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAIUpdateMediaInsightsPipelineStatusRequest::is_update_status_Valid() const{
    return m_update_status_isValid;
}

bool OAIUpdateMediaInsightsPipelineStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMediaInsightsPipelineStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_update_status_isValid && true;
}

} // namespace OpenAPI
