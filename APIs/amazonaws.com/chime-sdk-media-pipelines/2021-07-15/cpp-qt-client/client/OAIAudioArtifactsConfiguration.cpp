/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioArtifactsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioArtifactsConfiguration::OAIAudioArtifactsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioArtifactsConfiguration::OAIAudioArtifactsConfiguration() {
    this->initializeModel();
}

OAIAudioArtifactsConfiguration::~OAIAudioArtifactsConfiguration() {}

void OAIAudioArtifactsConfiguration::initializeModel() {

    m_mux_type_isSet = false;
    m_mux_type_isValid = false;
}

void OAIAudioArtifactsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioArtifactsConfiguration::fromJsonObject(QJsonObject json) {

    m_mux_type_isValid = ::OpenAPI::fromJsonValue(m_mux_type, json[QString("MuxType")]);
    m_mux_type_isSet = !json[QString("MuxType")].isNull() && m_mux_type_isValid;
}

QString OAIAudioArtifactsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioArtifactsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_mux_type.isSet()) {
        obj.insert(QString("MuxType"), ::OpenAPI::toJsonValue(m_mux_type));
    }
    return obj;
}

OAIAudioMuxType OAIAudioArtifactsConfiguration::getMuxType() const {
    return m_mux_type;
}
void OAIAudioArtifactsConfiguration::setMuxType(const OAIAudioMuxType &mux_type) {
    m_mux_type = mux_type;
    m_mux_type_isSet = true;
}

bool OAIAudioArtifactsConfiguration::is_mux_type_Set() const{
    return m_mux_type_isSet;
}

bool OAIAudioArtifactsConfiguration::is_mux_type_Valid() const{
    return m_mux_type_isValid;
}

bool OAIAudioArtifactsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mux_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioArtifactsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mux_type_isValid && true;
}

} // namespace OpenAPI
