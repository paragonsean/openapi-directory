/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaCapturePipelineSourceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaCapturePipelineSourceConfiguration::OAIMediaCapturePipelineSourceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaCapturePipelineSourceConfiguration::OAIMediaCapturePipelineSourceConfiguration() {
    this->initializeModel();
}

OAIMediaCapturePipelineSourceConfiguration::~OAIMediaCapturePipelineSourceConfiguration() {}

void OAIMediaCapturePipelineSourceConfiguration::initializeModel() {

    m_media_pipeline_arn_isSet = false;
    m_media_pipeline_arn_isValid = false;

    m_chime_sdk_meeting_configuration_isSet = false;
    m_chime_sdk_meeting_configuration_isValid = false;
}

void OAIMediaCapturePipelineSourceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaCapturePipelineSourceConfiguration::fromJsonObject(QJsonObject json) {

    m_media_pipeline_arn_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_arn, json[QString("MediaPipelineArn")]);
    m_media_pipeline_arn_isSet = !json[QString("MediaPipelineArn")].isNull() && m_media_pipeline_arn_isValid;

    m_chime_sdk_meeting_configuration_isValid = ::OpenAPI::fromJsonValue(m_chime_sdk_meeting_configuration, json[QString("ChimeSdkMeetingConfiguration")]);
    m_chime_sdk_meeting_configuration_isSet = !json[QString("ChimeSdkMeetingConfiguration")].isNull() && m_chime_sdk_meeting_configuration_isValid;
}

QString OAIMediaCapturePipelineSourceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaCapturePipelineSourceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_media_pipeline_arn_isSet) {
        obj.insert(QString("MediaPipelineArn"), ::OpenAPI::toJsonValue(m_media_pipeline_arn));
    }
    if (m_chime_sdk_meeting_configuration.isSet()) {
        obj.insert(QString("ChimeSdkMeetingConfiguration"), ::OpenAPI::toJsonValue(m_chime_sdk_meeting_configuration));
    }
    return obj;
}

QString OAIMediaCapturePipelineSourceConfiguration::getMediaPipelineArn() const {
    return m_media_pipeline_arn;
}
void OAIMediaCapturePipelineSourceConfiguration::setMediaPipelineArn(const QString &media_pipeline_arn) {
    m_media_pipeline_arn = media_pipeline_arn;
    m_media_pipeline_arn_isSet = true;
}

bool OAIMediaCapturePipelineSourceConfiguration::is_media_pipeline_arn_Set() const{
    return m_media_pipeline_arn_isSet;
}

bool OAIMediaCapturePipelineSourceConfiguration::is_media_pipeline_arn_Valid() const{
    return m_media_pipeline_arn_isValid;
}

OAIMediaCapturePipelineSourceConfiguration_ChimeSdkMeetingConfiguration OAIMediaCapturePipelineSourceConfiguration::getChimeSdkMeetingConfiguration() const {
    return m_chime_sdk_meeting_configuration;
}
void OAIMediaCapturePipelineSourceConfiguration::setChimeSdkMeetingConfiguration(const OAIMediaCapturePipelineSourceConfiguration_ChimeSdkMeetingConfiguration &chime_sdk_meeting_configuration) {
    m_chime_sdk_meeting_configuration = chime_sdk_meeting_configuration;
    m_chime_sdk_meeting_configuration_isSet = true;
}

bool OAIMediaCapturePipelineSourceConfiguration::is_chime_sdk_meeting_configuration_Set() const{
    return m_chime_sdk_meeting_configuration_isSet;
}

bool OAIMediaCapturePipelineSourceConfiguration::is_chime_sdk_meeting_configuration_Valid() const{
    return m_chime_sdk_meeting_configuration_isValid;
}

bool OAIMediaCapturePipelineSourceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_pipeline_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chime_sdk_meeting_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaCapturePipelineSourceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_pipeline_arn_isValid && m_chime_sdk_meeting_configuration_isValid && true;
}

} // namespace OpenAPI
