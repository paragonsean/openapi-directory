/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBorderColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBorderColor::OAIBorderColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBorderColor::OAIBorderColor() {
    this->initializeModel();
}

OAIBorderColor::~OAIBorderColor() {}

void OAIBorderColor::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBorderColor::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBorderColor::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Black", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBorderColor::BLACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Blue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBorderColor::BLUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Red", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBorderColor::RED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Green", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBorderColor::GREEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("White", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBorderColor::WHITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Yellow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBorderColor::YELLOW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBorderColor::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBorderColor::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBorderColor::BLACK:
            val = "Black";
            break;
        case eOAIBorderColor::BLUE:
            val = "Blue";
            break;
        case eOAIBorderColor::RED:
            val = "Red";
            break;
        case eOAIBorderColor::GREEN:
            val = "Green";
            break;
        case eOAIBorderColor::WHITE:
            val = "White";
            break;
        case eOAIBorderColor::YELLOW:
            val = "Yellow";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBorderColor::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBorderColor::eOAIBorderColor OAIBorderColor::getValue() const {
    return m_value;
}

void OAIBorderColor::setValue(const OAIBorderColor::eOAIBorderColor& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBorderColor::isSet() const {
    
    return m_value_isSet;
}

bool OAIBorderColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
