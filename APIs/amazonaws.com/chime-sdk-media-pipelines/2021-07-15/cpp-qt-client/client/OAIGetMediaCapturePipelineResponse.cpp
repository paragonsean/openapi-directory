/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMediaCapturePipelineResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMediaCapturePipelineResponse::OAIGetMediaCapturePipelineResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMediaCapturePipelineResponse::OAIGetMediaCapturePipelineResponse() {
    this->initializeModel();
}

OAIGetMediaCapturePipelineResponse::~OAIGetMediaCapturePipelineResponse() {}

void OAIGetMediaCapturePipelineResponse::initializeModel() {

    m_media_capture_pipeline_isSet = false;
    m_media_capture_pipeline_isValid = false;
}

void OAIGetMediaCapturePipelineResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMediaCapturePipelineResponse::fromJsonObject(QJsonObject json) {

    m_media_capture_pipeline_isValid = ::OpenAPI::fromJsonValue(m_media_capture_pipeline, json[QString("MediaCapturePipeline")]);
    m_media_capture_pipeline_isSet = !json[QString("MediaCapturePipeline")].isNull() && m_media_capture_pipeline_isValid;
}

QString OAIGetMediaCapturePipelineResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMediaCapturePipelineResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_capture_pipeline.isSet()) {
        obj.insert(QString("MediaCapturePipeline"), ::OpenAPI::toJsonValue(m_media_capture_pipeline));
    }
    return obj;
}

OAIGetMediaCapturePipelineResponse_MediaCapturePipeline OAIGetMediaCapturePipelineResponse::getMediaCapturePipeline() const {
    return m_media_capture_pipeline;
}
void OAIGetMediaCapturePipelineResponse::setMediaCapturePipeline(const OAIGetMediaCapturePipelineResponse_MediaCapturePipeline &media_capture_pipeline) {
    m_media_capture_pipeline = media_capture_pipeline;
    m_media_capture_pipeline_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse::is_media_capture_pipeline_Set() const{
    return m_media_capture_pipeline_isSet;
}

bool OAIGetMediaCapturePipelineResponse::is_media_capture_pipeline_Valid() const{
    return m_media_capture_pipeline_isValid;
}

bool OAIGetMediaCapturePipelineResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_capture_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMediaCapturePipelineResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
