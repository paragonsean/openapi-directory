/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelDefinition::OAIChannelDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelDefinition::OAIChannelDefinition() {
    this->initializeModel();
}

OAIChannelDefinition::~OAIChannelDefinition() {}

void OAIChannelDefinition::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_participant_role_isSet = false;
    m_participant_role_isValid = false;
}

void OAIChannelDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelDefinition::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("ChannelId")]);
    m_channel_id_isSet = !json[QString("ChannelId")].isNull() && m_channel_id_isValid;

    m_participant_role_isValid = ::OpenAPI::fromJsonValue(m_participant_role, json[QString("ParticipantRole")]);
    m_participant_role_isSet = !json[QString("ParticipantRole")].isNull() && m_participant_role_isValid;
}

QString OAIChannelDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("ChannelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_participant_role.isSet()) {
        obj.insert(QString("ParticipantRole"), ::OpenAPI::toJsonValue(m_participant_role));
    }
    return obj;
}

qint32 OAIChannelDefinition::getChannelId() const {
    return m_channel_id;
}
void OAIChannelDefinition::setChannelId(const qint32 &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChannelDefinition::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChannelDefinition::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

OAIParticipantRole OAIChannelDefinition::getParticipantRole() const {
    return m_participant_role;
}
void OAIChannelDefinition::setParticipantRole(const OAIParticipantRole &participant_role) {
    m_participant_role = participant_role;
    m_participant_role_isSet = true;
}

bool OAIChannelDefinition::is_participant_role_Set() const{
    return m_participant_role_isSet;
}

bool OAIChannelDefinition::is_participant_role_Valid() const{
    return m_participant_role_isValid;
}

bool OAIChannelDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_role.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && true;
}

} // namespace OpenAPI
