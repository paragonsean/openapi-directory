/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMediaCapturePipelineRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMediaCapturePipelineRequest::OAICreateMediaCapturePipelineRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMediaCapturePipelineRequest::OAICreateMediaCapturePipelineRequest() {
    this->initializeModel();
}

OAICreateMediaCapturePipelineRequest::~OAICreateMediaCapturePipelineRequest() {}

void OAICreateMediaCapturePipelineRequest::initializeModel() {

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_sink_type_isSet = false;
    m_sink_type_isValid = false;

    m_sink_arn_isSet = false;
    m_sink_arn_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_chime_sdk_meeting_configuration_isSet = false;
    m_chime_sdk_meeting_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMediaCapturePipelineRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMediaCapturePipelineRequest::fromJsonObject(QJsonObject json) {

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_sink_type_isValid = ::OpenAPI::fromJsonValue(m_sink_type, json[QString("SinkType")]);
    m_sink_type_isSet = !json[QString("SinkType")].isNull() && m_sink_type_isValid;

    m_sink_arn_isValid = ::OpenAPI::fromJsonValue(m_sink_arn, json[QString("SinkArn")]);
    m_sink_arn_isSet = !json[QString("SinkArn")].isNull() && m_sink_arn_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_chime_sdk_meeting_configuration_isValid = ::OpenAPI::fromJsonValue(m_chime_sdk_meeting_configuration, json[QString("ChimeSdkMeetingConfiguration")]);
    m_chime_sdk_meeting_configuration_isSet = !json[QString("ChimeSdkMeetingConfiguration")].isNull() && m_chime_sdk_meeting_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateMediaCapturePipelineRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMediaCapturePipelineRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_sink_type.isSet()) {
        obj.insert(QString("SinkType"), ::OpenAPI::toJsonValue(m_sink_type));
    }
    if (m_sink_arn_isSet) {
        obj.insert(QString("SinkArn"), ::OpenAPI::toJsonValue(m_sink_arn));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_chime_sdk_meeting_configuration.isSet()) {
        obj.insert(QString("ChimeSdkMeetingConfiguration"), ::OpenAPI::toJsonValue(m_chime_sdk_meeting_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIMediaPipelineSourceType OAICreateMediaCapturePipelineRequest::getSourceType() const {
    return m_source_type;
}
void OAICreateMediaCapturePipelineRequest::setSourceType(const OAIMediaPipelineSourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAICreateMediaCapturePipelineRequest::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAICreateMediaCapturePipelineRequest::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAICreateMediaCapturePipelineRequest::getSourceArn() const {
    return m_source_arn;
}
void OAICreateMediaCapturePipelineRequest::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAICreateMediaCapturePipelineRequest::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAICreateMediaCapturePipelineRequest::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

OAIMediaPipelineSinkType OAICreateMediaCapturePipelineRequest::getSinkType() const {
    return m_sink_type;
}
void OAICreateMediaCapturePipelineRequest::setSinkType(const OAIMediaPipelineSinkType &sink_type) {
    m_sink_type = sink_type;
    m_sink_type_isSet = true;
}

bool OAICreateMediaCapturePipelineRequest::is_sink_type_Set() const{
    return m_sink_type_isSet;
}

bool OAICreateMediaCapturePipelineRequest::is_sink_type_Valid() const{
    return m_sink_type_isValid;
}

QString OAICreateMediaCapturePipelineRequest::getSinkArn() const {
    return m_sink_arn;
}
void OAICreateMediaCapturePipelineRequest::setSinkArn(const QString &sink_arn) {
    m_sink_arn = sink_arn;
    m_sink_arn_isSet = true;
}

bool OAICreateMediaCapturePipelineRequest::is_sink_arn_Set() const{
    return m_sink_arn_isSet;
}

bool OAICreateMediaCapturePipelineRequest::is_sink_arn_Valid() const{
    return m_sink_arn_isValid;
}

QString OAICreateMediaCapturePipelineRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateMediaCapturePipelineRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateMediaCapturePipelineRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateMediaCapturePipelineRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAICreateMediaCapturePipelineRequest_ChimeSdkMeetingConfiguration OAICreateMediaCapturePipelineRequest::getChimeSdkMeetingConfiguration() const {
    return m_chime_sdk_meeting_configuration;
}
void OAICreateMediaCapturePipelineRequest::setChimeSdkMeetingConfiguration(const OAICreateMediaCapturePipelineRequest_ChimeSdkMeetingConfiguration &chime_sdk_meeting_configuration) {
    m_chime_sdk_meeting_configuration = chime_sdk_meeting_configuration;
    m_chime_sdk_meeting_configuration_isSet = true;
}

bool OAICreateMediaCapturePipelineRequest::is_chime_sdk_meeting_configuration_Set() const{
    return m_chime_sdk_meeting_configuration_isSet;
}

bool OAICreateMediaCapturePipelineRequest::is_chime_sdk_meeting_configuration_Valid() const{
    return m_chime_sdk_meeting_configuration_isValid;
}

QList OAICreateMediaCapturePipelineRequest::getTags() const {
    return m_tags;
}
void OAICreateMediaCapturePipelineRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMediaCapturePipelineRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMediaCapturePipelineRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMediaCapturePipelineRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chime_sdk_meeting_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMediaCapturePipelineRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_type_isValid && m_source_arn_isValid && m_sink_type_isValid && m_sink_arn_isValid && true;
}

} // namespace OpenAPI
