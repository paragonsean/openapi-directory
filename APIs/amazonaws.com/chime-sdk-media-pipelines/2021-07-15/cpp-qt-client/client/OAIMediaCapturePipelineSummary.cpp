/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaCapturePipelineSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaCapturePipelineSummary::OAIMediaCapturePipelineSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaCapturePipelineSummary::OAIMediaCapturePipelineSummary() {
    this->initializeModel();
}

OAIMediaCapturePipelineSummary::~OAIMediaCapturePipelineSummary() {}

void OAIMediaCapturePipelineSummary::initializeModel() {

    m_media_pipeline_id_isSet = false;
    m_media_pipeline_id_isValid = false;

    m_media_pipeline_arn_isSet = false;
    m_media_pipeline_arn_isValid = false;
}

void OAIMediaCapturePipelineSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaCapturePipelineSummary::fromJsonObject(QJsonObject json) {

    m_media_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_id, json[QString("MediaPipelineId")]);
    m_media_pipeline_id_isSet = !json[QString("MediaPipelineId")].isNull() && m_media_pipeline_id_isValid;

    m_media_pipeline_arn_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_arn, json[QString("MediaPipelineArn")]);
    m_media_pipeline_arn_isSet = !json[QString("MediaPipelineArn")].isNull() && m_media_pipeline_arn_isValid;
}

QString OAIMediaCapturePipelineSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaCapturePipelineSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_media_pipeline_id_isSet) {
        obj.insert(QString("MediaPipelineId"), ::OpenAPI::toJsonValue(m_media_pipeline_id));
    }
    if (m_media_pipeline_arn_isSet) {
        obj.insert(QString("MediaPipelineArn"), ::OpenAPI::toJsonValue(m_media_pipeline_arn));
    }
    return obj;
}

QString OAIMediaCapturePipelineSummary::getMediaPipelineId() const {
    return m_media_pipeline_id;
}
void OAIMediaCapturePipelineSummary::setMediaPipelineId(const QString &media_pipeline_id) {
    m_media_pipeline_id = media_pipeline_id;
    m_media_pipeline_id_isSet = true;
}

bool OAIMediaCapturePipelineSummary::is_media_pipeline_id_Set() const{
    return m_media_pipeline_id_isSet;
}

bool OAIMediaCapturePipelineSummary::is_media_pipeline_id_Valid() const{
    return m_media_pipeline_id_isValid;
}

QString OAIMediaCapturePipelineSummary::getMediaPipelineArn() const {
    return m_media_pipeline_arn;
}
void OAIMediaCapturePipelineSummary::setMediaPipelineArn(const QString &media_pipeline_arn) {
    m_media_pipeline_arn = media_pipeline_arn;
    m_media_pipeline_arn_isSet = true;
}

bool OAIMediaCapturePipelineSummary::is_media_pipeline_arn_Set() const{
    return m_media_pipeline_arn_isSet;
}

bool OAIMediaCapturePipelineSummary::is_media_pipeline_arn_Valid() const{
    return m_media_pipeline_arn_isValid;
}

bool OAIMediaCapturePipelineSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_pipeline_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaCapturePipelineSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
