/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVocabularyFilterMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVocabularyFilterMethod::OAIVocabularyFilterMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVocabularyFilterMethod::OAIVocabularyFilterMethod() {
    this->initializeModel();
}

OAIVocabularyFilterMethod::~OAIVocabularyFilterMethod() {}

void OAIVocabularyFilterMethod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVocabularyFilterMethod::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVocabularyFilterMethod::fromJson(QString jsonString) {
    
    if ( jsonString.compare("remove", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVocabularyFilterMethod::REMOVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mask", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVocabularyFilterMethod::MASK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tag", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVocabularyFilterMethod::TAG;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVocabularyFilterMethod::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVocabularyFilterMethod::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVocabularyFilterMethod::REMOVE:
            val = "remove";
            break;
        case eOAIVocabularyFilterMethod::MASK:
            val = "mask";
            break;
        case eOAIVocabularyFilterMethod::TAG:
            val = "tag";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVocabularyFilterMethod::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVocabularyFilterMethod::eOAIVocabularyFilterMethod OAIVocabularyFilterMethod::getValue() const {
    return m_value;
}

void OAIVocabularyFilterMethod::setValue(const OAIVocabularyFilterMethod::eOAIVocabularyFilterMethod& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVocabularyFilterMethod::isSet() const {
    
    return m_value_isSet;
}

bool OAIVocabularyFilterMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
