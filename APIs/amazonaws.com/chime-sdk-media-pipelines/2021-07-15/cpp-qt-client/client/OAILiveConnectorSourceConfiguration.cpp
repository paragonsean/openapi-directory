/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveConnectorSourceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveConnectorSourceConfiguration::OAILiveConnectorSourceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveConnectorSourceConfiguration::OAILiveConnectorSourceConfiguration() {
    this->initializeModel();
}

OAILiveConnectorSourceConfiguration::~OAILiveConnectorSourceConfiguration() {}

void OAILiveConnectorSourceConfiguration::initializeModel() {

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_chime_sdk_meeting_live_connector_configuration_isSet = false;
    m_chime_sdk_meeting_live_connector_configuration_isValid = false;
}

void OAILiveConnectorSourceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveConnectorSourceConfiguration::fromJsonObject(QJsonObject json) {

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_chime_sdk_meeting_live_connector_configuration_isValid = ::OpenAPI::fromJsonValue(m_chime_sdk_meeting_live_connector_configuration, json[QString("ChimeSdkMeetingLiveConnectorConfiguration")]);
    m_chime_sdk_meeting_live_connector_configuration_isSet = !json[QString("ChimeSdkMeetingLiveConnectorConfiguration")].isNull() && m_chime_sdk_meeting_live_connector_configuration_isValid;
}

QString OAILiveConnectorSourceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveConnectorSourceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_chime_sdk_meeting_live_connector_configuration.isSet()) {
        obj.insert(QString("ChimeSdkMeetingLiveConnectorConfiguration"), ::OpenAPI::toJsonValue(m_chime_sdk_meeting_live_connector_configuration));
    }
    return obj;
}

OAILiveConnectorSourceType OAILiveConnectorSourceConfiguration::getSourceType() const {
    return m_source_type;
}
void OAILiveConnectorSourceConfiguration::setSourceType(const OAILiveConnectorSourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAILiveConnectorSourceConfiguration::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAILiveConnectorSourceConfiguration::is_source_type_Valid() const{
    return m_source_type_isValid;
}

OAILiveConnectorSourceConfiguration_ChimeSdkMeetingLiveConnectorConfiguration OAILiveConnectorSourceConfiguration::getChimeSdkMeetingLiveConnectorConfiguration() const {
    return m_chime_sdk_meeting_live_connector_configuration;
}
void OAILiveConnectorSourceConfiguration::setChimeSdkMeetingLiveConnectorConfiguration(const OAILiveConnectorSourceConfiguration_ChimeSdkMeetingLiveConnectorConfiguration &chime_sdk_meeting_live_connector_configuration) {
    m_chime_sdk_meeting_live_connector_configuration = chime_sdk_meeting_live_connector_configuration;
    m_chime_sdk_meeting_live_connector_configuration_isSet = true;
}

bool OAILiveConnectorSourceConfiguration::is_chime_sdk_meeting_live_connector_configuration_Set() const{
    return m_chime_sdk_meeting_live_connector_configuration_isSet;
}

bool OAILiveConnectorSourceConfiguration::is_chime_sdk_meeting_live_connector_configuration_Valid() const{
    return m_chime_sdk_meeting_live_connector_configuration_isValid;
}

bool OAILiveConnectorSourceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chime_sdk_meeting_live_connector_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveConnectorSourceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_type_isValid && m_chime_sdk_meeting_live_connector_configuration_isValid && true;
}

} // namespace OpenAPI
