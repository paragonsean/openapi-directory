/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMediaInsightsPipelineConfiguration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMediaInsightsPipelineConfiguration_request::OAIUpdateMediaInsightsPipelineConfiguration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMediaInsightsPipelineConfiguration_request::OAIUpdateMediaInsightsPipelineConfiguration_request() {
    this->initializeModel();
}

OAIUpdateMediaInsightsPipelineConfiguration_request::~OAIUpdateMediaInsightsPipelineConfiguration_request() {}

void OAIUpdateMediaInsightsPipelineConfiguration_request::initializeModel() {

    m_resource_access_role_arn_isSet = false;
    m_resource_access_role_arn_isValid = false;

    m_real_time_alert_configuration_isSet = false;
    m_real_time_alert_configuration_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;
}

void OAIUpdateMediaInsightsPipelineConfiguration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMediaInsightsPipelineConfiguration_request::fromJsonObject(QJsonObject json) {

    m_resource_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_access_role_arn, json[QString("ResourceAccessRoleArn")]);
    m_resource_access_role_arn_isSet = !json[QString("ResourceAccessRoleArn")].isNull() && m_resource_access_role_arn_isValid;

    m_real_time_alert_configuration_isValid = ::OpenAPI::fromJsonValue(m_real_time_alert_configuration, json[QString("RealTimeAlertConfiguration")]);
    m_real_time_alert_configuration_isSet = !json[QString("RealTimeAlertConfiguration")].isNull() && m_real_time_alert_configuration_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("Elements")]);
    m_elements_isSet = !json[QString("Elements")].isNull() && m_elements_isValid;
}

QString OAIUpdateMediaInsightsPipelineConfiguration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMediaInsightsPipelineConfiguration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_access_role_arn_isSet) {
        obj.insert(QString("ResourceAccessRoleArn"), ::OpenAPI::toJsonValue(m_resource_access_role_arn));
    }
    if (m_real_time_alert_configuration.isSet()) {
        obj.insert(QString("RealTimeAlertConfiguration"), ::OpenAPI::toJsonValue(m_real_time_alert_configuration));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("Elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    return obj;
}

QString OAIUpdateMediaInsightsPipelineConfiguration_request::getResourceAccessRoleArn() const {
    return m_resource_access_role_arn;
}
void OAIUpdateMediaInsightsPipelineConfiguration_request::setResourceAccessRoleArn(const QString &resource_access_role_arn) {
    m_resource_access_role_arn = resource_access_role_arn;
    m_resource_access_role_arn_isSet = true;
}

bool OAIUpdateMediaInsightsPipelineConfiguration_request::is_resource_access_role_arn_Set() const{
    return m_resource_access_role_arn_isSet;
}

bool OAIUpdateMediaInsightsPipelineConfiguration_request::is_resource_access_role_arn_Valid() const{
    return m_resource_access_role_arn_isValid;
}

OAICreateMediaInsightsPipelineConfiguration_request_RealTimeAlertConfiguration OAIUpdateMediaInsightsPipelineConfiguration_request::getRealTimeAlertConfiguration() const {
    return m_real_time_alert_configuration;
}
void OAIUpdateMediaInsightsPipelineConfiguration_request::setRealTimeAlertConfiguration(const OAICreateMediaInsightsPipelineConfiguration_request_RealTimeAlertConfiguration &real_time_alert_configuration) {
    m_real_time_alert_configuration = real_time_alert_configuration;
    m_real_time_alert_configuration_isSet = true;
}

bool OAIUpdateMediaInsightsPipelineConfiguration_request::is_real_time_alert_configuration_Set() const{
    return m_real_time_alert_configuration_isSet;
}

bool OAIUpdateMediaInsightsPipelineConfiguration_request::is_real_time_alert_configuration_Valid() const{
    return m_real_time_alert_configuration_isValid;
}

QList<OAIMediaInsightsPipelineConfigurationElement> OAIUpdateMediaInsightsPipelineConfiguration_request::getElements() const {
    return m_elements;
}
void OAIUpdateMediaInsightsPipelineConfiguration_request::setElements(const QList<OAIMediaInsightsPipelineConfigurationElement> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIUpdateMediaInsightsPipelineConfiguration_request::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIUpdateMediaInsightsPipelineConfiguration_request::is_elements_Valid() const{
    return m_elements_isValid;
}

bool OAIUpdateMediaInsightsPipelineConfiguration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_time_alert_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMediaInsightsPipelineConfiguration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_access_role_arn_isValid && m_elements_isValid && true;
}

} // namespace OpenAPI
