/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridViewConfiguration_VideoAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridViewConfiguration_VideoAttribute::OAIGridViewConfiguration_VideoAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridViewConfiguration_VideoAttribute::OAIGridViewConfiguration_VideoAttribute() {
    this->initializeModel();
}

OAIGridViewConfiguration_VideoAttribute::~OAIGridViewConfiguration_VideoAttribute() {}

void OAIGridViewConfiguration_VideoAttribute::initializeModel() {

    m_corner_radius_isSet = false;
    m_corner_radius_isValid = false;

    m_border_color_isSet = false;
    m_border_color_isValid = false;

    m_highlight_color_isSet = false;
    m_highlight_color_isValid = false;

    m_border_thickness_isSet = false;
    m_border_thickness_isValid = false;
}

void OAIGridViewConfiguration_VideoAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridViewConfiguration_VideoAttribute::fromJsonObject(QJsonObject json) {

    m_corner_radius_isValid = ::OpenAPI::fromJsonValue(m_corner_radius, json[QString("CornerRadius")]);
    m_corner_radius_isSet = !json[QString("CornerRadius")].isNull() && m_corner_radius_isValid;

    m_border_color_isValid = ::OpenAPI::fromJsonValue(m_border_color, json[QString("BorderColor")]);
    m_border_color_isSet = !json[QString("BorderColor")].isNull() && m_border_color_isValid;

    m_highlight_color_isValid = ::OpenAPI::fromJsonValue(m_highlight_color, json[QString("HighlightColor")]);
    m_highlight_color_isSet = !json[QString("HighlightColor")].isNull() && m_highlight_color_isValid;

    m_border_thickness_isValid = ::OpenAPI::fromJsonValue(m_border_thickness, json[QString("BorderThickness")]);
    m_border_thickness_isSet = !json[QString("BorderThickness")].isNull() && m_border_thickness_isValid;
}

QString OAIGridViewConfiguration_VideoAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridViewConfiguration_VideoAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_corner_radius_isSet) {
        obj.insert(QString("CornerRadius"), ::OpenAPI::toJsonValue(m_corner_radius));
    }
    if (m_border_color.isSet()) {
        obj.insert(QString("BorderColor"), ::OpenAPI::toJsonValue(m_border_color));
    }
    if (m_highlight_color.isSet()) {
        obj.insert(QString("HighlightColor"), ::OpenAPI::toJsonValue(m_highlight_color));
    }
    if (m_border_thickness_isSet) {
        obj.insert(QString("BorderThickness"), ::OpenAPI::toJsonValue(m_border_thickness));
    }
    return obj;
}

qint32 OAIGridViewConfiguration_VideoAttribute::getCornerRadius() const {
    return m_corner_radius;
}
void OAIGridViewConfiguration_VideoAttribute::setCornerRadius(const qint32 &corner_radius) {
    m_corner_radius = corner_radius;
    m_corner_radius_isSet = true;
}

bool OAIGridViewConfiguration_VideoAttribute::is_corner_radius_Set() const{
    return m_corner_radius_isSet;
}

bool OAIGridViewConfiguration_VideoAttribute::is_corner_radius_Valid() const{
    return m_corner_radius_isValid;
}

OAIBorderColor OAIGridViewConfiguration_VideoAttribute::getBorderColor() const {
    return m_border_color;
}
void OAIGridViewConfiguration_VideoAttribute::setBorderColor(const OAIBorderColor &border_color) {
    m_border_color = border_color;
    m_border_color_isSet = true;
}

bool OAIGridViewConfiguration_VideoAttribute::is_border_color_Set() const{
    return m_border_color_isSet;
}

bool OAIGridViewConfiguration_VideoAttribute::is_border_color_Valid() const{
    return m_border_color_isValid;
}

OAIHighlightColor OAIGridViewConfiguration_VideoAttribute::getHighlightColor() const {
    return m_highlight_color;
}
void OAIGridViewConfiguration_VideoAttribute::setHighlightColor(const OAIHighlightColor &highlight_color) {
    m_highlight_color = highlight_color;
    m_highlight_color_isSet = true;
}

bool OAIGridViewConfiguration_VideoAttribute::is_highlight_color_Set() const{
    return m_highlight_color_isSet;
}

bool OAIGridViewConfiguration_VideoAttribute::is_highlight_color_Valid() const{
    return m_highlight_color_isValid;
}

qint32 OAIGridViewConfiguration_VideoAttribute::getBorderThickness() const {
    return m_border_thickness;
}
void OAIGridViewConfiguration_VideoAttribute::setBorderThickness(const qint32 &border_thickness) {
    m_border_thickness = border_thickness;
    m_border_thickness_isSet = true;
}

bool OAIGridViewConfiguration_VideoAttribute::is_border_thickness_Set() const{
    return m_border_thickness_isSet;
}

bool OAIGridViewConfiguration_VideoAttribute::is_border_thickness_Valid() const{
    return m_border_thickness_isValid;
}

bool OAIGridViewConfiguration_VideoAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corner_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_thickness_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridViewConfiguration_VideoAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
