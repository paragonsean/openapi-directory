/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMediaPipelineResponse_MediaPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMediaPipelineResponse_MediaPipeline::OAIGetMediaPipelineResponse_MediaPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMediaPipelineResponse_MediaPipeline::OAIGetMediaPipelineResponse_MediaPipeline() {
    this->initializeModel();
}

OAIGetMediaPipelineResponse_MediaPipeline::~OAIGetMediaPipelineResponse_MediaPipeline() {}

void OAIGetMediaPipelineResponse_MediaPipeline::initializeModel() {

    m_media_capture_pipeline_isSet = false;
    m_media_capture_pipeline_isValid = false;

    m_media_live_connector_pipeline_isSet = false;
    m_media_live_connector_pipeline_isValid = false;

    m_media_concatenation_pipeline_isSet = false;
    m_media_concatenation_pipeline_isValid = false;

    m_media_insights_pipeline_isSet = false;
    m_media_insights_pipeline_isValid = false;
}

void OAIGetMediaPipelineResponse_MediaPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMediaPipelineResponse_MediaPipeline::fromJsonObject(QJsonObject json) {

    m_media_capture_pipeline_isValid = ::OpenAPI::fromJsonValue(m_media_capture_pipeline, json[QString("MediaCapturePipeline")]);
    m_media_capture_pipeline_isSet = !json[QString("MediaCapturePipeline")].isNull() && m_media_capture_pipeline_isValid;

    m_media_live_connector_pipeline_isValid = ::OpenAPI::fromJsonValue(m_media_live_connector_pipeline, json[QString("MediaLiveConnectorPipeline")]);
    m_media_live_connector_pipeline_isSet = !json[QString("MediaLiveConnectorPipeline")].isNull() && m_media_live_connector_pipeline_isValid;

    m_media_concatenation_pipeline_isValid = ::OpenAPI::fromJsonValue(m_media_concatenation_pipeline, json[QString("MediaConcatenationPipeline")]);
    m_media_concatenation_pipeline_isSet = !json[QString("MediaConcatenationPipeline")].isNull() && m_media_concatenation_pipeline_isValid;

    m_media_insights_pipeline_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline, json[QString("MediaInsightsPipeline")]);
    m_media_insights_pipeline_isSet = !json[QString("MediaInsightsPipeline")].isNull() && m_media_insights_pipeline_isValid;
}

QString OAIGetMediaPipelineResponse_MediaPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMediaPipelineResponse_MediaPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_media_capture_pipeline.isSet()) {
        obj.insert(QString("MediaCapturePipeline"), ::OpenAPI::toJsonValue(m_media_capture_pipeline));
    }
    if (m_media_live_connector_pipeline.isSet()) {
        obj.insert(QString("MediaLiveConnectorPipeline"), ::OpenAPI::toJsonValue(m_media_live_connector_pipeline));
    }
    if (m_media_concatenation_pipeline.isSet()) {
        obj.insert(QString("MediaConcatenationPipeline"), ::OpenAPI::toJsonValue(m_media_concatenation_pipeline));
    }
    if (m_media_insights_pipeline.isSet()) {
        obj.insert(QString("MediaInsightsPipeline"), ::OpenAPI::toJsonValue(m_media_insights_pipeline));
    }
    return obj;
}

OAIMediaPipeline_MediaCapturePipeline OAIGetMediaPipelineResponse_MediaPipeline::getMediaCapturePipeline() const {
    return m_media_capture_pipeline;
}
void OAIGetMediaPipelineResponse_MediaPipeline::setMediaCapturePipeline(const OAIMediaPipeline_MediaCapturePipeline &media_capture_pipeline) {
    m_media_capture_pipeline = media_capture_pipeline;
    m_media_capture_pipeline_isSet = true;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::is_media_capture_pipeline_Set() const{
    return m_media_capture_pipeline_isSet;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::is_media_capture_pipeline_Valid() const{
    return m_media_capture_pipeline_isValid;
}

OAIMediaPipeline_MediaLiveConnectorPipeline OAIGetMediaPipelineResponse_MediaPipeline::getMediaLiveConnectorPipeline() const {
    return m_media_live_connector_pipeline;
}
void OAIGetMediaPipelineResponse_MediaPipeline::setMediaLiveConnectorPipeline(const OAIMediaPipeline_MediaLiveConnectorPipeline &media_live_connector_pipeline) {
    m_media_live_connector_pipeline = media_live_connector_pipeline;
    m_media_live_connector_pipeline_isSet = true;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::is_media_live_connector_pipeline_Set() const{
    return m_media_live_connector_pipeline_isSet;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::is_media_live_connector_pipeline_Valid() const{
    return m_media_live_connector_pipeline_isValid;
}

OAIMediaPipeline_MediaConcatenationPipeline OAIGetMediaPipelineResponse_MediaPipeline::getMediaConcatenationPipeline() const {
    return m_media_concatenation_pipeline;
}
void OAIGetMediaPipelineResponse_MediaPipeline::setMediaConcatenationPipeline(const OAIMediaPipeline_MediaConcatenationPipeline &media_concatenation_pipeline) {
    m_media_concatenation_pipeline = media_concatenation_pipeline;
    m_media_concatenation_pipeline_isSet = true;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::is_media_concatenation_pipeline_Set() const{
    return m_media_concatenation_pipeline_isSet;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::is_media_concatenation_pipeline_Valid() const{
    return m_media_concatenation_pipeline_isValid;
}

OAIMediaPipeline_MediaInsightsPipeline OAIGetMediaPipelineResponse_MediaPipeline::getMediaInsightsPipeline() const {
    return m_media_insights_pipeline;
}
void OAIGetMediaPipelineResponse_MediaPipeline::setMediaInsightsPipeline(const OAIMediaPipeline_MediaInsightsPipeline &media_insights_pipeline) {
    m_media_insights_pipeline = media_insights_pipeline;
    m_media_insights_pipeline_isSet = true;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::is_media_insights_pipeline_Set() const{
    return m_media_insights_pipeline_isSet;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::is_media_insights_pipeline_Valid() const{
    return m_media_insights_pipeline_isValid;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_capture_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_live_connector_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_concatenation_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_insights_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMediaPipelineResponse_MediaPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
