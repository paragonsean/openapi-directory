/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration() {
    this->initializeModel();
}

OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::~OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration() {}

void OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::initializeModel() {

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_composited_video_isSet = false;
    m_composited_video_isValid = false;
}

void OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::fromJsonObject(QJsonObject json) {

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("Audio")]);
    m_audio_isSet = !json[QString("Audio")].isNull() && m_audio_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("Video")]);
    m_video_isSet = !json[QString("Video")].isNull() && m_video_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_composited_video_isValid = ::OpenAPI::fromJsonValue(m_composited_video, json[QString("CompositedVideo")]);
    m_composited_video_isSet = !json[QString("CompositedVideo")].isNull() && m_composited_video_isValid;
}

QString OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_audio.isSet()) {
        obj.insert(QString("Audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_video.isSet()) {
        obj.insert(QString("Video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_content.isSet()) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_composited_video.isSet()) {
        obj.insert(QString("CompositedVideo"), ::OpenAPI::toJsonValue(m_composited_video));
    }
    return obj;
}

OAIArtifactsConfiguration_Audio OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::getAudio() const {
    return m_audio;
}
void OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::setAudio(const OAIArtifactsConfiguration_Audio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::is_audio_Valid() const{
    return m_audio_isValid;
}

OAIArtifactsConfiguration_Video OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::getVideo() const {
    return m_video;
}
void OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::setVideo(const OAIArtifactsConfiguration_Video &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::is_video_Set() const{
    return m_video_isSet;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::is_video_Valid() const{
    return m_video_isValid;
}

OAIArtifactsConfiguration_Content OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::getContent() const {
    return m_content;
}
void OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::setContent(const OAIArtifactsConfiguration_Content &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::is_content_Set() const{
    return m_content_isSet;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::is_content_Valid() const{
    return m_content_isValid;
}

OAIArtifactsConfiguration_CompositedVideo OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::getCompositedVideo() const {
    return m_composited_video;
}
void OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::setCompositedVideo(const OAIArtifactsConfiguration_CompositedVideo &composited_video) {
    m_composited_video = composited_video;
    m_composited_video_isSet = true;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::is_composited_video_Set() const{
    return m_composited_video_isSet;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::is_composited_video_Valid() const{
    return m_composited_video_isValid;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_composited_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_isValid && m_video_isValid && m_content_isValid && true;
}

} // namespace OpenAPI
