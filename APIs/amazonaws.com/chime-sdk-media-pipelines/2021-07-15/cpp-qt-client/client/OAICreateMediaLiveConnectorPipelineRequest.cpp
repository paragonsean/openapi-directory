/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMediaLiveConnectorPipelineRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMediaLiveConnectorPipelineRequest::OAICreateMediaLiveConnectorPipelineRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMediaLiveConnectorPipelineRequest::OAICreateMediaLiveConnectorPipelineRequest() {
    this->initializeModel();
}

OAICreateMediaLiveConnectorPipelineRequest::~OAICreateMediaLiveConnectorPipelineRequest() {}

void OAICreateMediaLiveConnectorPipelineRequest::initializeModel() {

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_sinks_isSet = false;
    m_sinks_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMediaLiveConnectorPipelineRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMediaLiveConnectorPipelineRequest::fromJsonObject(QJsonObject json) {

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("Sources")]);
    m_sources_isSet = !json[QString("Sources")].isNull() && m_sources_isValid;

    m_sinks_isValid = ::OpenAPI::fromJsonValue(m_sinks, json[QString("Sinks")]);
    m_sinks_isSet = !json[QString("Sinks")].isNull() && m_sinks_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateMediaLiveConnectorPipelineRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMediaLiveConnectorPipelineRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_sources.isSet()) {
        obj.insert(QString("Sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_sinks.isSet()) {
        obj.insert(QString("Sinks"), ::OpenAPI::toJsonValue(m_sinks));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList OAICreateMediaLiveConnectorPipelineRequest::getSources() const {
    return m_sources;
}
void OAICreateMediaLiveConnectorPipelineRequest::setSources(const QList &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICreateMediaLiveConnectorPipelineRequest::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICreateMediaLiveConnectorPipelineRequest::is_sources_Valid() const{
    return m_sources_isValid;
}

QList OAICreateMediaLiveConnectorPipelineRequest::getSinks() const {
    return m_sinks;
}
void OAICreateMediaLiveConnectorPipelineRequest::setSinks(const QList &sinks) {
    m_sinks = sinks;
    m_sinks_isSet = true;
}

bool OAICreateMediaLiveConnectorPipelineRequest::is_sinks_Set() const{
    return m_sinks_isSet;
}

bool OAICreateMediaLiveConnectorPipelineRequest::is_sinks_Valid() const{
    return m_sinks_isValid;
}

QString OAICreateMediaLiveConnectorPipelineRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateMediaLiveConnectorPipelineRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateMediaLiveConnectorPipelineRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateMediaLiveConnectorPipelineRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList OAICreateMediaLiveConnectorPipelineRequest::getTags() const {
    return m_tags;
}
void OAICreateMediaLiveConnectorPipelineRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMediaLiveConnectorPipelineRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMediaLiveConnectorPipelineRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMediaLiveConnectorPipelineRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sinks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMediaLiveConnectorPipelineRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sources_isValid && m_sinks_isValid && true;
}

} // namespace OpenAPI
