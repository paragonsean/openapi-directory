/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealTimeAlertRuleType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealTimeAlertRuleType::OAIRealTimeAlertRuleType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealTimeAlertRuleType::OAIRealTimeAlertRuleType() {
    this->initializeModel();
}

OAIRealTimeAlertRuleType::~OAIRealTimeAlertRuleType() {}

void OAIRealTimeAlertRuleType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRealTimeAlertRuleType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRealTimeAlertRuleType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("KeywordMatch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRealTimeAlertRuleType::KEYWORDMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sentiment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRealTimeAlertRuleType::SENTIMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IssueDetection", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRealTimeAlertRuleType::ISSUEDETECTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRealTimeAlertRuleType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRealTimeAlertRuleType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRealTimeAlertRuleType::KEYWORDMATCH:
            val = "KeywordMatch";
            break;
        case eOAIRealTimeAlertRuleType::SENTIMENT:
            val = "Sentiment";
            break;
        case eOAIRealTimeAlertRuleType::ISSUEDETECTION:
            val = "IssueDetection";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRealTimeAlertRuleType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRealTimeAlertRuleType::eOAIRealTimeAlertRuleType OAIRealTimeAlertRuleType::getValue() const {
    return m_value;
}

void OAIRealTimeAlertRuleType::setValue(const OAIRealTimeAlertRuleType::eOAIRealTimeAlertRuleType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRealTimeAlertRuleType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRealTimeAlertRuleType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
