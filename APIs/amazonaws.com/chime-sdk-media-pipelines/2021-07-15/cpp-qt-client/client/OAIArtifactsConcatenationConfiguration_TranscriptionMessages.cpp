/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactsConcatenationConfiguration_TranscriptionMessages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactsConcatenationConfiguration_TranscriptionMessages::OAIArtifactsConcatenationConfiguration_TranscriptionMessages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactsConcatenationConfiguration_TranscriptionMessages::OAIArtifactsConcatenationConfiguration_TranscriptionMessages() {
    this->initializeModel();
}

OAIArtifactsConcatenationConfiguration_TranscriptionMessages::~OAIArtifactsConcatenationConfiguration_TranscriptionMessages() {}

void OAIArtifactsConcatenationConfiguration_TranscriptionMessages::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIArtifactsConcatenationConfiguration_TranscriptionMessages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactsConcatenationConfiguration_TranscriptionMessages::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIArtifactsConcatenationConfiguration_TranscriptionMessages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactsConcatenationConfiguration_TranscriptionMessages::asJsonObject() const {
    QJsonObject obj;
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIArtifactsConcatenationState OAIArtifactsConcatenationConfiguration_TranscriptionMessages::getState() const {
    return m_state;
}
void OAIArtifactsConcatenationConfiguration_TranscriptionMessages::setState(const OAIArtifactsConcatenationState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIArtifactsConcatenationConfiguration_TranscriptionMessages::is_state_Set() const{
    return m_state_isSet;
}

bool OAIArtifactsConcatenationConfiguration_TranscriptionMessages::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIArtifactsConcatenationConfiguration_TranscriptionMessages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactsConcatenationConfiguration_TranscriptionMessages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
