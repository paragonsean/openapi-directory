/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMediaInsightsPipelineResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMediaInsightsPipelineResponse::OAICreateMediaInsightsPipelineResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMediaInsightsPipelineResponse::OAICreateMediaInsightsPipelineResponse() {
    this->initializeModel();
}

OAICreateMediaInsightsPipelineResponse::~OAICreateMediaInsightsPipelineResponse() {}

void OAICreateMediaInsightsPipelineResponse::initializeModel() {

    m_media_insights_pipeline_isSet = false;
    m_media_insights_pipeline_isValid = false;
}

void OAICreateMediaInsightsPipelineResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMediaInsightsPipelineResponse::fromJsonObject(QJsonObject json) {

    m_media_insights_pipeline_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline, json[QString("MediaInsightsPipeline")]);
    m_media_insights_pipeline_isSet = !json[QString("MediaInsightsPipeline")].isNull() && m_media_insights_pipeline_isValid;
}

QString OAICreateMediaInsightsPipelineResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMediaInsightsPipelineResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_insights_pipeline.isSet()) {
        obj.insert(QString("MediaInsightsPipeline"), ::OpenAPI::toJsonValue(m_media_insights_pipeline));
    }
    return obj;
}

OAICreateMediaInsightsPipelineResponse_MediaInsightsPipeline OAICreateMediaInsightsPipelineResponse::getMediaInsightsPipeline() const {
    return m_media_insights_pipeline;
}
void OAICreateMediaInsightsPipelineResponse::setMediaInsightsPipeline(const OAICreateMediaInsightsPipelineResponse_MediaInsightsPipeline &media_insights_pipeline) {
    m_media_insights_pipeline = media_insights_pipeline;
    m_media_insights_pipeline_isSet = true;
}

bool OAICreateMediaInsightsPipelineResponse::is_media_insights_pipeline_Set() const{
    return m_media_insights_pipeline_isSet;
}

bool OAICreateMediaInsightsPipelineResponse::is_media_insights_pipeline_Valid() const{
    return m_media_insights_pipeline_isValid;
}

bool OAICreateMediaInsightsPipelineResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_insights_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMediaInsightsPipelineResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_insights_pipeline_isValid && true;
}

} // namespace OpenAPI
