/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMediaConcatenationPipelineResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMediaConcatenationPipelineResponse::OAICreateMediaConcatenationPipelineResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMediaConcatenationPipelineResponse::OAICreateMediaConcatenationPipelineResponse() {
    this->initializeModel();
}

OAICreateMediaConcatenationPipelineResponse::~OAICreateMediaConcatenationPipelineResponse() {}

void OAICreateMediaConcatenationPipelineResponse::initializeModel() {

    m_media_concatenation_pipeline_isSet = false;
    m_media_concatenation_pipeline_isValid = false;
}

void OAICreateMediaConcatenationPipelineResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMediaConcatenationPipelineResponse::fromJsonObject(QJsonObject json) {

    m_media_concatenation_pipeline_isValid = ::OpenAPI::fromJsonValue(m_media_concatenation_pipeline, json[QString("MediaConcatenationPipeline")]);
    m_media_concatenation_pipeline_isSet = !json[QString("MediaConcatenationPipeline")].isNull() && m_media_concatenation_pipeline_isValid;
}

QString OAICreateMediaConcatenationPipelineResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMediaConcatenationPipelineResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_concatenation_pipeline.isSet()) {
        obj.insert(QString("MediaConcatenationPipeline"), ::OpenAPI::toJsonValue(m_media_concatenation_pipeline));
    }
    return obj;
}

OAICreateMediaConcatenationPipelineResponse_MediaConcatenationPipeline OAICreateMediaConcatenationPipelineResponse::getMediaConcatenationPipeline() const {
    return m_media_concatenation_pipeline;
}
void OAICreateMediaConcatenationPipelineResponse::setMediaConcatenationPipeline(const OAICreateMediaConcatenationPipelineResponse_MediaConcatenationPipeline &media_concatenation_pipeline) {
    m_media_concatenation_pipeline = media_concatenation_pipeline;
    m_media_concatenation_pipeline_isSet = true;
}

bool OAICreateMediaConcatenationPipelineResponse::is_media_concatenation_pipeline_Set() const{
    return m_media_concatenation_pipeline_isSet;
}

bool OAICreateMediaConcatenationPipelineResponse::is_media_concatenation_pipeline_Valid() const{
    return m_media_concatenation_pipeline_isValid;
}

bool OAICreateMediaConcatenationPipelineResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_concatenation_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMediaConcatenationPipelineResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
