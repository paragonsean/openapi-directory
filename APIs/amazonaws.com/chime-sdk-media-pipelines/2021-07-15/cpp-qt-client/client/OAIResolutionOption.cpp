/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResolutionOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResolutionOption::OAIResolutionOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResolutionOption::OAIResolutionOption() {
    this->initializeModel();
}

OAIResolutionOption::~OAIResolutionOption() {}

void OAIResolutionOption::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIResolutionOption::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIResolutionOption::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResolutionOption::HD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FHD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResolutionOption::FHD;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIResolutionOption::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIResolutionOption::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIResolutionOption::HD:
            val = "HD";
            break;
        case eOAIResolutionOption::FHD:
            val = "FHD";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIResolutionOption::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIResolutionOption::eOAIResolutionOption OAIResolutionOption::getValue() const {
    return m_value;
}

void OAIResolutionOption::setValue(const OAIResolutionOption::eOAIResolutionOption& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIResolutionOption::isSet() const {
    
    return m_value_isSet;
}

bool OAIResolutionOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
