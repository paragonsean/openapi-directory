/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration() {
    this->initializeModel();
}

OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::~OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration() {}

void OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::initializeModel() {

    m_selected_video_streams_isSet = false;
    m_selected_video_streams_isValid = false;
}

void OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::fromJsonObject(QJsonObject json) {

    m_selected_video_streams_isValid = ::OpenAPI::fromJsonValue(m_selected_video_streams, json[QString("SelectedVideoStreams")]);
    m_selected_video_streams_isSet = !json[QString("SelectedVideoStreams")].isNull() && m_selected_video_streams_isValid;
}

QString OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_video_streams.isSet()) {
        obj.insert(QString("SelectedVideoStreams"), ::OpenAPI::toJsonValue(m_selected_video_streams));
    }
    return obj;
}

OAISourceConfiguration_SelectedVideoStreams OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::getSelectedVideoStreams() const {
    return m_selected_video_streams;
}
void OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::setSelectedVideoStreams(const OAISourceConfiguration_SelectedVideoStreams &selected_video_streams) {
    m_selected_video_streams = selected_video_streams;
    m_selected_video_streams_isSet = true;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::is_selected_video_streams_Set() const{
    return m_selected_video_streams_isSet;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::is_selected_video_streams_Valid() const{
    return m_selected_video_streams_isValid;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_video_streams.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
