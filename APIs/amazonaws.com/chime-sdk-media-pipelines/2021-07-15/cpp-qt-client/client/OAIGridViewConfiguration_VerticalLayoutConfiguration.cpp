/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridViewConfiguration_VerticalLayoutConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridViewConfiguration_VerticalLayoutConfiguration::OAIGridViewConfiguration_VerticalLayoutConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridViewConfiguration_VerticalLayoutConfiguration::OAIGridViewConfiguration_VerticalLayoutConfiguration() {
    this->initializeModel();
}

OAIGridViewConfiguration_VerticalLayoutConfiguration::~OAIGridViewConfiguration_VerticalLayoutConfiguration() {}

void OAIGridViewConfiguration_VerticalLayoutConfiguration::initializeModel() {

    m_tile_order_isSet = false;
    m_tile_order_isValid = false;

    m_tile_position_isSet = false;
    m_tile_position_isValid = false;

    m_tile_count_isSet = false;
    m_tile_count_isValid = false;

    m_tile_aspect_ratio_isSet = false;
    m_tile_aspect_ratio_isValid = false;
}

void OAIGridViewConfiguration_VerticalLayoutConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridViewConfiguration_VerticalLayoutConfiguration::fromJsonObject(QJsonObject json) {

    m_tile_order_isValid = ::OpenAPI::fromJsonValue(m_tile_order, json[QString("TileOrder")]);
    m_tile_order_isSet = !json[QString("TileOrder")].isNull() && m_tile_order_isValid;

    m_tile_position_isValid = ::OpenAPI::fromJsonValue(m_tile_position, json[QString("TilePosition")]);
    m_tile_position_isSet = !json[QString("TilePosition")].isNull() && m_tile_position_isValid;

    m_tile_count_isValid = ::OpenAPI::fromJsonValue(m_tile_count, json[QString("TileCount")]);
    m_tile_count_isSet = !json[QString("TileCount")].isNull() && m_tile_count_isValid;

    m_tile_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_tile_aspect_ratio, json[QString("TileAspectRatio")]);
    m_tile_aspect_ratio_isSet = !json[QString("TileAspectRatio")].isNull() && m_tile_aspect_ratio_isValid;
}

QString OAIGridViewConfiguration_VerticalLayoutConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridViewConfiguration_VerticalLayoutConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_tile_order.isSet()) {
        obj.insert(QString("TileOrder"), ::OpenAPI::toJsonValue(m_tile_order));
    }
    if (m_tile_position.isSet()) {
        obj.insert(QString("TilePosition"), ::OpenAPI::toJsonValue(m_tile_position));
    }
    if (m_tile_count_isSet) {
        obj.insert(QString("TileCount"), ::OpenAPI::toJsonValue(m_tile_count));
    }
    if (m_tile_aspect_ratio_isSet) {
        obj.insert(QString("TileAspectRatio"), ::OpenAPI::toJsonValue(m_tile_aspect_ratio));
    }
    return obj;
}

OAITileOrder OAIGridViewConfiguration_VerticalLayoutConfiguration::getTileOrder() const {
    return m_tile_order;
}
void OAIGridViewConfiguration_VerticalLayoutConfiguration::setTileOrder(const OAITileOrder &tile_order) {
    m_tile_order = tile_order;
    m_tile_order_isSet = true;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::is_tile_order_Set() const{
    return m_tile_order_isSet;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::is_tile_order_Valid() const{
    return m_tile_order_isValid;
}

OAIVerticalTilePosition OAIGridViewConfiguration_VerticalLayoutConfiguration::getTilePosition() const {
    return m_tile_position;
}
void OAIGridViewConfiguration_VerticalLayoutConfiguration::setTilePosition(const OAIVerticalTilePosition &tile_position) {
    m_tile_position = tile_position;
    m_tile_position_isSet = true;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::is_tile_position_Set() const{
    return m_tile_position_isSet;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::is_tile_position_Valid() const{
    return m_tile_position_isValid;
}

qint32 OAIGridViewConfiguration_VerticalLayoutConfiguration::getTileCount() const {
    return m_tile_count;
}
void OAIGridViewConfiguration_VerticalLayoutConfiguration::setTileCount(const qint32 &tile_count) {
    m_tile_count = tile_count;
    m_tile_count_isSet = true;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::is_tile_count_Set() const{
    return m_tile_count_isSet;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::is_tile_count_Valid() const{
    return m_tile_count_isValid;
}

QString OAIGridViewConfiguration_VerticalLayoutConfiguration::getTileAspectRatio() const {
    return m_tile_aspect_ratio;
}
void OAIGridViewConfiguration_VerticalLayoutConfiguration::setTileAspectRatio(const QString &tile_aspect_ratio) {
    m_tile_aspect_ratio = tile_aspect_ratio;
    m_tile_aspect_ratio_isSet = true;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::is_tile_aspect_ratio_Set() const{
    return m_tile_aspect_ratio_isSet;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::is_tile_aspect_ratio_Valid() const{
    return m_tile_aspect_ratio_isValid;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tile_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridViewConfiguration_VerticalLayoutConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
