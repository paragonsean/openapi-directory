/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresenterPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresenterPosition::OAIPresenterPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresenterPosition::OAIPresenterPosition() {
    this->initializeModel();
}

OAIPresenterPosition::~OAIPresenterPosition() {}

void OAIPresenterPosition::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPresenterPosition::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPresenterPosition::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TopLeft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPresenterPosition::TOPLEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TopRight", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPresenterPosition::TOPRIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BottomLeft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPresenterPosition::BOTTOMLEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BottomRight", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPresenterPosition::BOTTOMRIGHT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPresenterPosition::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPresenterPosition::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPresenterPosition::TOPLEFT:
            val = "TopLeft";
            break;
        case eOAIPresenterPosition::TOPRIGHT:
            val = "TopRight";
            break;
        case eOAIPresenterPosition::BOTTOMLEFT:
            val = "BottomLeft";
            break;
        case eOAIPresenterPosition::BOTTOMRIGHT:
            val = "BottomRight";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPresenterPosition::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPresenterPosition::eOAIPresenterPosition OAIPresenterPosition::getValue() const {
    return m_value;
}

void OAIPresenterPosition::setValue(const OAIPresenterPosition::eOAIPresenterPosition& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPresenterPosition::isSet() const {
    
    return m_value_isSet;
}

bool OAIPresenterPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
