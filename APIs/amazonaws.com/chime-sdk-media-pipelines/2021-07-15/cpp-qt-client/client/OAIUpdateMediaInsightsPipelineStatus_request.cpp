/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMediaInsightsPipelineStatus_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMediaInsightsPipelineStatus_request::OAIUpdateMediaInsightsPipelineStatus_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMediaInsightsPipelineStatus_request::OAIUpdateMediaInsightsPipelineStatus_request() {
    this->initializeModel();
}

OAIUpdateMediaInsightsPipelineStatus_request::~OAIUpdateMediaInsightsPipelineStatus_request() {}

void OAIUpdateMediaInsightsPipelineStatus_request::initializeModel() {

    m_update_status_isSet = false;
    m_update_status_isValid = false;
}

void OAIUpdateMediaInsightsPipelineStatus_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMediaInsightsPipelineStatus_request::fromJsonObject(QJsonObject json) {

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("UpdateStatus")]);
    m_update_status_isSet = !json[QString("UpdateStatus")].isNull() && m_update_status_isValid;
}

QString OAIUpdateMediaInsightsPipelineStatus_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMediaInsightsPipelineStatus_request::asJsonObject() const {
    QJsonObject obj;
    if (m_update_status_isSet) {
        obj.insert(QString("UpdateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    return obj;
}

QString OAIUpdateMediaInsightsPipelineStatus_request::getUpdateStatus() const {
    return m_update_status;
}
void OAIUpdateMediaInsightsPipelineStatus_request::setUpdateStatus(const QString &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAIUpdateMediaInsightsPipelineStatus_request::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAIUpdateMediaInsightsPipelineStatus_request::is_update_status_Valid() const{
    return m_update_status_isValid;
}

bool OAIUpdateMediaInsightsPipelineStatus_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMediaInsightsPipelineStatus_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_update_status_isValid && true;
}

} // namespace OpenAPI
