/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveConnectorRTMPConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveConnectorRTMPConfiguration::OAILiveConnectorRTMPConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveConnectorRTMPConfiguration::OAILiveConnectorRTMPConfiguration() {
    this->initializeModel();
}

OAILiveConnectorRTMPConfiguration::~OAILiveConnectorRTMPConfiguration() {}

void OAILiveConnectorRTMPConfiguration::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_audio_channels_isSet = false;
    m_audio_channels_isValid = false;

    m_audio_sample_rate_isSet = false;
    m_audio_sample_rate_isValid = false;
}

void OAILiveConnectorRTMPConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveConnectorRTMPConfiguration::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_audio_channels_isValid = ::OpenAPI::fromJsonValue(m_audio_channels, json[QString("AudioChannels")]);
    m_audio_channels_isSet = !json[QString("AudioChannels")].isNull() && m_audio_channels_isValid;

    m_audio_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_audio_sample_rate, json[QString("AudioSampleRate")]);
    m_audio_sample_rate_isSet = !json[QString("AudioSampleRate")].isNull() && m_audio_sample_rate_isValid;
}

QString OAILiveConnectorRTMPConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveConnectorRTMPConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_audio_channels.isSet()) {
        obj.insert(QString("AudioChannels"), ::OpenAPI::toJsonValue(m_audio_channels));
    }
    if (m_audio_sample_rate_isSet) {
        obj.insert(QString("AudioSampleRate"), ::OpenAPI::toJsonValue(m_audio_sample_rate));
    }
    return obj;
}

QString OAILiveConnectorRTMPConfiguration::getUrl() const {
    return m_url;
}
void OAILiveConnectorRTMPConfiguration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILiveConnectorRTMPConfiguration::is_url_Set() const{
    return m_url_isSet;
}

bool OAILiveConnectorRTMPConfiguration::is_url_Valid() const{
    return m_url_isValid;
}

OAIAudioChannelsOption OAILiveConnectorRTMPConfiguration::getAudioChannels() const {
    return m_audio_channels;
}
void OAILiveConnectorRTMPConfiguration::setAudioChannels(const OAIAudioChannelsOption &audio_channels) {
    m_audio_channels = audio_channels;
    m_audio_channels_isSet = true;
}

bool OAILiveConnectorRTMPConfiguration::is_audio_channels_Set() const{
    return m_audio_channels_isSet;
}

bool OAILiveConnectorRTMPConfiguration::is_audio_channels_Valid() const{
    return m_audio_channels_isValid;
}

QString OAILiveConnectorRTMPConfiguration::getAudioSampleRate() const {
    return m_audio_sample_rate;
}
void OAILiveConnectorRTMPConfiguration::setAudioSampleRate(const QString &audio_sample_rate) {
    m_audio_sample_rate = audio_sample_rate;
    m_audio_sample_rate_isSet = true;
}

bool OAILiveConnectorRTMPConfiguration::is_audio_sample_rate_Set() const{
    return m_audio_sample_rate_isSet;
}

bool OAILiveConnectorRTMPConfiguration::is_audio_sample_rate_Valid() const{
    return m_audio_sample_rate_isValid;
}

bool OAILiveConnectorRTMPConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveConnectorRTMPConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
