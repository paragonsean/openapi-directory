/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRealTimeAlertRule.h
 *
 * Specifies the words or phrases that trigger an alert.
 */

#ifndef OAIRealTimeAlertRule_H
#define OAIRealTimeAlertRule_H

#include <QJsonObject>

#include "OAIRealTimeAlertRuleType.h"
#include "OAIRealTimeAlertRule_IssueDetectionConfiguration.h"
#include "OAIRealTimeAlertRule_KeywordMatchConfiguration.h"
#include "OAIRealTimeAlertRule_SentimentConfiguration.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRealTimeAlertRule_KeywordMatchConfiguration;
class OAIRealTimeAlertRule_SentimentConfiguration;
class OAIRealTimeAlertRule_IssueDetectionConfiguration;

class OAIRealTimeAlertRule : public OAIObject {
public:
    OAIRealTimeAlertRule();
    OAIRealTimeAlertRule(QString json);
    ~OAIRealTimeAlertRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRealTimeAlertRuleType getType() const;
    void setType(const OAIRealTimeAlertRuleType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIRealTimeAlertRule_KeywordMatchConfiguration getKeywordMatchConfiguration() const;
    void setKeywordMatchConfiguration(const OAIRealTimeAlertRule_KeywordMatchConfiguration &keyword_match_configuration);
    bool is_keyword_match_configuration_Set() const;
    bool is_keyword_match_configuration_Valid() const;

    OAIRealTimeAlertRule_SentimentConfiguration getSentimentConfiguration() const;
    void setSentimentConfiguration(const OAIRealTimeAlertRule_SentimentConfiguration &sentiment_configuration);
    bool is_sentiment_configuration_Set() const;
    bool is_sentiment_configuration_Valid() const;

    OAIRealTimeAlertRule_IssueDetectionConfiguration getIssueDetectionConfiguration() const;
    void setIssueDetectionConfiguration(const OAIRealTimeAlertRule_IssueDetectionConfiguration &issue_detection_configuration);
    bool is_issue_detection_configuration_Set() const;
    bool is_issue_detection_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRealTimeAlertRuleType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIRealTimeAlertRule_KeywordMatchConfiguration m_keyword_match_configuration;
    bool m_keyword_match_configuration_isSet;
    bool m_keyword_match_configuration_isValid;

    OAIRealTimeAlertRule_SentimentConfiguration m_sentiment_configuration;
    bool m_sentiment_configuration_isSet;
    bool m_sentiment_configuration_isValid;

    OAIRealTimeAlertRule_IssueDetectionConfiguration m_issue_detection_configuration;
    bool m_issue_detection_configuration_isSet;
    bool m_issue_detection_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRealTimeAlertRule)

#endif // OAIRealTimeAlertRule_H
