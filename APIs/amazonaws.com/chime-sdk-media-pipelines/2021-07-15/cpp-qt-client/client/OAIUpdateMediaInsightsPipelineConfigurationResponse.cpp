/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMediaInsightsPipelineConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMediaInsightsPipelineConfigurationResponse::OAIUpdateMediaInsightsPipelineConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMediaInsightsPipelineConfigurationResponse::OAIUpdateMediaInsightsPipelineConfigurationResponse() {
    this->initializeModel();
}

OAIUpdateMediaInsightsPipelineConfigurationResponse::~OAIUpdateMediaInsightsPipelineConfigurationResponse() {}

void OAIUpdateMediaInsightsPipelineConfigurationResponse::initializeModel() {

    m_media_insights_pipeline_configuration_isSet = false;
    m_media_insights_pipeline_configuration_isValid = false;
}

void OAIUpdateMediaInsightsPipelineConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMediaInsightsPipelineConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_media_insights_pipeline_configuration_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline_configuration, json[QString("MediaInsightsPipelineConfiguration")]);
    m_media_insights_pipeline_configuration_isSet = !json[QString("MediaInsightsPipelineConfiguration")].isNull() && m_media_insights_pipeline_configuration_isValid;
}

QString OAIUpdateMediaInsightsPipelineConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMediaInsightsPipelineConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_insights_pipeline_configuration.isSet()) {
        obj.insert(QString("MediaInsightsPipelineConfiguration"), ::OpenAPI::toJsonValue(m_media_insights_pipeline_configuration));
    }
    return obj;
}

OAIUpdateMediaInsightsPipelineConfigurationResponse_MediaInsightsPipelineConfiguration OAIUpdateMediaInsightsPipelineConfigurationResponse::getMediaInsightsPipelineConfiguration() const {
    return m_media_insights_pipeline_configuration;
}
void OAIUpdateMediaInsightsPipelineConfigurationResponse::setMediaInsightsPipelineConfiguration(const OAIUpdateMediaInsightsPipelineConfigurationResponse_MediaInsightsPipelineConfiguration &media_insights_pipeline_configuration) {
    m_media_insights_pipeline_configuration = media_insights_pipeline_configuration;
    m_media_insights_pipeline_configuration_isSet = true;
}

bool OAIUpdateMediaInsightsPipelineConfigurationResponse::is_media_insights_pipeline_configuration_Set() const{
    return m_media_insights_pipeline_configuration_isSet;
}

bool OAIUpdateMediaInsightsPipelineConfigurationResponse::is_media_insights_pipeline_configuration_Valid() const{
    return m_media_insights_pipeline_configuration_isValid;
}

bool OAIUpdateMediaInsightsPipelineConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_insights_pipeline_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMediaInsightsPipelineConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
