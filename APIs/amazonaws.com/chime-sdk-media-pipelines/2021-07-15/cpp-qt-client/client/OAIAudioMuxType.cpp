/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioMuxType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioMuxType::OAIAudioMuxType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioMuxType::OAIAudioMuxType() {
    this->initializeModel();
}

OAIAudioMuxType::~OAIAudioMuxType() {}

void OAIAudioMuxType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAudioMuxType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAudioMuxType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AudioOnly", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioMuxType::AUDIOONLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioWithActiveSpeakerVideo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioMuxType::AUDIOWITHACTIVESPEAKERVIDEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioWithCompositedVideo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioMuxType::AUDIOWITHCOMPOSITEDVIDEO;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAudioMuxType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAudioMuxType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAudioMuxType::AUDIOONLY:
            val = "AudioOnly";
            break;
        case eOAIAudioMuxType::AUDIOWITHACTIVESPEAKERVIDEO:
            val = "AudioWithActiveSpeakerVideo";
            break;
        case eOAIAudioMuxType::AUDIOWITHCOMPOSITEDVIDEO:
            val = "AudioWithCompositedVideo";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAudioMuxType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAudioMuxType::eOAIAudioMuxType OAIAudioMuxType::getValue() const {
    return m_value;
}

void OAIAudioMuxType::setValue(const OAIAudioMuxType::eOAIAudioMuxType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAudioMuxType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAudioMuxType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
