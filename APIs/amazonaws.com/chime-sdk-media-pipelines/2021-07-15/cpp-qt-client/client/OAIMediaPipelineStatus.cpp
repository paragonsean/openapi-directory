/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaPipelineStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaPipelineStatus::OAIMediaPipelineStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaPipelineStatus::OAIMediaPipelineStatus() {
    this->initializeModel();
}

OAIMediaPipelineStatus::~OAIMediaPipelineStatus() {}

void OAIMediaPipelineStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMediaPipelineStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMediaPipelineStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Initializing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaPipelineStatus::INITIALIZING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaPipelineStatus::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaPipelineStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopping", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaPipelineStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaPipelineStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Paused", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaPipelineStatus::PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMediaPipelineStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMediaPipelineStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMediaPipelineStatus::INITIALIZING:
            val = "Initializing";
            break;
        case eOAIMediaPipelineStatus::INPROGRESS:
            val = "InProgress";
            break;
        case eOAIMediaPipelineStatus::FAILED:
            val = "Failed";
            break;
        case eOAIMediaPipelineStatus::STOPPING:
            val = "Stopping";
            break;
        case eOAIMediaPipelineStatus::STOPPED:
            val = "Stopped";
            break;
        case eOAIMediaPipelineStatus::PAUSED:
            val = "Paused";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMediaPipelineStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMediaPipelineStatus::eOAIMediaPipelineStatus OAIMediaPipelineStatus::getValue() const {
    return m_value;
}

void OAIMediaPipelineStatus::setValue(const OAIMediaPipelineStatus::eOAIMediaPipelineStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMediaPipelineStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIMediaPipelineStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
