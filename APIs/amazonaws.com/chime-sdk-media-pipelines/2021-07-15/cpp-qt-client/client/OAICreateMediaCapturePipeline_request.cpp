/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMediaCapturePipeline_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMediaCapturePipeline_request::OAICreateMediaCapturePipeline_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMediaCapturePipeline_request::OAICreateMediaCapturePipeline_request() {
    this->initializeModel();
}

OAICreateMediaCapturePipeline_request::~OAICreateMediaCapturePipeline_request() {}

void OAICreateMediaCapturePipeline_request::initializeModel() {

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_sink_type_isSet = false;
    m_sink_type_isValid = false;

    m_sink_arn_isSet = false;
    m_sink_arn_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_chime_sdk_meeting_configuration_isSet = false;
    m_chime_sdk_meeting_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMediaCapturePipeline_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMediaCapturePipeline_request::fromJsonObject(QJsonObject json) {

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_sink_type_isValid = ::OpenAPI::fromJsonValue(m_sink_type, json[QString("SinkType")]);
    m_sink_type_isSet = !json[QString("SinkType")].isNull() && m_sink_type_isValid;

    m_sink_arn_isValid = ::OpenAPI::fromJsonValue(m_sink_arn, json[QString("SinkArn")]);
    m_sink_arn_isSet = !json[QString("SinkArn")].isNull() && m_sink_arn_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_chime_sdk_meeting_configuration_isValid = ::OpenAPI::fromJsonValue(m_chime_sdk_meeting_configuration, json[QString("ChimeSdkMeetingConfiguration")]);
    m_chime_sdk_meeting_configuration_isSet = !json[QString("ChimeSdkMeetingConfiguration")].isNull() && m_chime_sdk_meeting_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateMediaCapturePipeline_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMediaCapturePipeline_request::asJsonObject() const {
    QJsonObject obj;
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_sink_type_isSet) {
        obj.insert(QString("SinkType"), ::OpenAPI::toJsonValue(m_sink_type));
    }
    if (m_sink_arn_isSet) {
        obj.insert(QString("SinkArn"), ::OpenAPI::toJsonValue(m_sink_arn));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_chime_sdk_meeting_configuration.isSet()) {
        obj.insert(QString("ChimeSdkMeetingConfiguration"), ::OpenAPI::toJsonValue(m_chime_sdk_meeting_configuration));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateMediaCapturePipeline_request::getSourceType() const {
    return m_source_type;
}
void OAICreateMediaCapturePipeline_request::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAICreateMediaCapturePipeline_request::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAICreateMediaCapturePipeline_request::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAICreateMediaCapturePipeline_request::getSourceArn() const {
    return m_source_arn;
}
void OAICreateMediaCapturePipeline_request::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAICreateMediaCapturePipeline_request::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAICreateMediaCapturePipeline_request::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

QString OAICreateMediaCapturePipeline_request::getSinkType() const {
    return m_sink_type;
}
void OAICreateMediaCapturePipeline_request::setSinkType(const QString &sink_type) {
    m_sink_type = sink_type;
    m_sink_type_isSet = true;
}

bool OAICreateMediaCapturePipeline_request::is_sink_type_Set() const{
    return m_sink_type_isSet;
}

bool OAICreateMediaCapturePipeline_request::is_sink_type_Valid() const{
    return m_sink_type_isValid;
}

QString OAICreateMediaCapturePipeline_request::getSinkArn() const {
    return m_sink_arn;
}
void OAICreateMediaCapturePipeline_request::setSinkArn(const QString &sink_arn) {
    m_sink_arn = sink_arn;
    m_sink_arn_isSet = true;
}

bool OAICreateMediaCapturePipeline_request::is_sink_arn_Set() const{
    return m_sink_arn_isSet;
}

bool OAICreateMediaCapturePipeline_request::is_sink_arn_Valid() const{
    return m_sink_arn_isValid;
}

QString OAICreateMediaCapturePipeline_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateMediaCapturePipeline_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateMediaCapturePipeline_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateMediaCapturePipeline_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration OAICreateMediaCapturePipeline_request::getChimeSdkMeetingConfiguration() const {
    return m_chime_sdk_meeting_configuration;
}
void OAICreateMediaCapturePipeline_request::setChimeSdkMeetingConfiguration(const OAICreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration &chime_sdk_meeting_configuration) {
    m_chime_sdk_meeting_configuration = chime_sdk_meeting_configuration;
    m_chime_sdk_meeting_configuration_isSet = true;
}

bool OAICreateMediaCapturePipeline_request::is_chime_sdk_meeting_configuration_Set() const{
    return m_chime_sdk_meeting_configuration_isSet;
}

bool OAICreateMediaCapturePipeline_request::is_chime_sdk_meeting_configuration_Valid() const{
    return m_chime_sdk_meeting_configuration_isValid;
}

QList<OAITag> OAICreateMediaCapturePipeline_request::getTags() const {
    return m_tags;
}
void OAICreateMediaCapturePipeline_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMediaCapturePipeline_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMediaCapturePipeline_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMediaCapturePipeline_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chime_sdk_meeting_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMediaCapturePipeline_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_type_isValid && m_source_arn_isValid && m_sink_type_isValid && m_sink_arn_isValid && true;
}

} // namespace OpenAPI
