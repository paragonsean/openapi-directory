/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaInsightsPipelineConfigurationElementType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaInsightsPipelineConfigurationElementType::OAIMediaInsightsPipelineConfigurationElementType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaInsightsPipelineConfigurationElementType::OAIMediaInsightsPipelineConfigurationElementType() {
    this->initializeModel();
}

OAIMediaInsightsPipelineConfigurationElementType::~OAIMediaInsightsPipelineConfigurationElementType() {}

void OAIMediaInsightsPipelineConfigurationElementType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMediaInsightsPipelineConfigurationElementType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMediaInsightsPipelineConfigurationElementType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AmazonTranscribeCallAnalyticsProcessor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaInsightsPipelineConfigurationElementType::AMAZONTRANSCRIBECALLANALYTICSPROCESSOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VoiceAnalyticsProcessor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaInsightsPipelineConfigurationElementType::VOICEANALYTICSPROCESSOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AmazonTranscribeProcessor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaInsightsPipelineConfigurationElementType::AMAZONTRANSCRIBEPROCESSOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KinesisDataStreamSink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaInsightsPipelineConfigurationElementType::KINESISDATASTREAMSINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LambdaFunctionSink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaInsightsPipelineConfigurationElementType::LAMBDAFUNCTIONSINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SqsQueueSink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaInsightsPipelineConfigurationElementType::SQSQUEUESINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SnsTopicSink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaInsightsPipelineConfigurationElementType::SNSTOPICSINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3RecordingSink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaInsightsPipelineConfigurationElementType::S3RECORDINGSINK;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMediaInsightsPipelineConfigurationElementType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMediaInsightsPipelineConfigurationElementType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMediaInsightsPipelineConfigurationElementType::AMAZONTRANSCRIBECALLANALYTICSPROCESSOR:
            val = "AmazonTranscribeCallAnalyticsProcessor";
            break;
        case eOAIMediaInsightsPipelineConfigurationElementType::VOICEANALYTICSPROCESSOR:
            val = "VoiceAnalyticsProcessor";
            break;
        case eOAIMediaInsightsPipelineConfigurationElementType::AMAZONTRANSCRIBEPROCESSOR:
            val = "AmazonTranscribeProcessor";
            break;
        case eOAIMediaInsightsPipelineConfigurationElementType::KINESISDATASTREAMSINK:
            val = "KinesisDataStreamSink";
            break;
        case eOAIMediaInsightsPipelineConfigurationElementType::LAMBDAFUNCTIONSINK:
            val = "LambdaFunctionSink";
            break;
        case eOAIMediaInsightsPipelineConfigurationElementType::SQSQUEUESINK:
            val = "SqsQueueSink";
            break;
        case eOAIMediaInsightsPipelineConfigurationElementType::SNSTOPICSINK:
            val = "SnsTopicSink";
            break;
        case eOAIMediaInsightsPipelineConfigurationElementType::S3RECORDINGSINK:
            val = "S3RecordingSink";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMediaInsightsPipelineConfigurationElementType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMediaInsightsPipelineConfigurationElementType::eOAIMediaInsightsPipelineConfigurationElementType OAIMediaInsightsPipelineConfigurationElementType::getValue() const {
    return m_value;
}

void OAIMediaInsightsPipelineConfigurationElementType::setValue(const OAIMediaInsightsPipelineConfigurationElementType::eOAIMediaInsightsPipelineConfigurationElementType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMediaInsightsPipelineConfigurationElementType::isSet() const {
    
    return m_value_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElementType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
