/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaConcatenationPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaConcatenationPipeline::OAIMediaConcatenationPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaConcatenationPipeline::OAIMediaConcatenationPipeline() {
    this->initializeModel();
}

OAIMediaConcatenationPipeline::~OAIMediaConcatenationPipeline() {}

void OAIMediaConcatenationPipeline::initializeModel() {

    m_media_pipeline_id_isSet = false;
    m_media_pipeline_id_isValid = false;

    m_media_pipeline_arn_isSet = false;
    m_media_pipeline_arn_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_sinks_isSet = false;
    m_sinks_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIMediaConcatenationPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaConcatenationPipeline::fromJsonObject(QJsonObject json) {

    m_media_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_id, json[QString("MediaPipelineId")]);
    m_media_pipeline_id_isSet = !json[QString("MediaPipelineId")].isNull() && m_media_pipeline_id_isValid;

    m_media_pipeline_arn_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_arn, json[QString("MediaPipelineArn")]);
    m_media_pipeline_arn_isSet = !json[QString("MediaPipelineArn")].isNull() && m_media_pipeline_arn_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("Sources")]);
    m_sources_isSet = !json[QString("Sources")].isNull() && m_sources_isValid;

    m_sinks_isValid = ::OpenAPI::fromJsonValue(m_sinks, json[QString("Sinks")]);
    m_sinks_isSet = !json[QString("Sinks")].isNull() && m_sinks_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("UpdatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("UpdatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIMediaConcatenationPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaConcatenationPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_media_pipeline_id_isSet) {
        obj.insert(QString("MediaPipelineId"), ::OpenAPI::toJsonValue(m_media_pipeline_id));
    }
    if (m_media_pipeline_arn_isSet) {
        obj.insert(QString("MediaPipelineArn"), ::OpenAPI::toJsonValue(m_media_pipeline_arn));
    }
    if (m_sources.isSet()) {
        obj.insert(QString("Sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_sinks.isSet()) {
        obj.insert(QString("Sinks"), ::OpenAPI::toJsonValue(m_sinks));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("UpdatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

QString OAIMediaConcatenationPipeline::getMediaPipelineId() const {
    return m_media_pipeline_id;
}
void OAIMediaConcatenationPipeline::setMediaPipelineId(const QString &media_pipeline_id) {
    m_media_pipeline_id = media_pipeline_id;
    m_media_pipeline_id_isSet = true;
}

bool OAIMediaConcatenationPipeline::is_media_pipeline_id_Set() const{
    return m_media_pipeline_id_isSet;
}

bool OAIMediaConcatenationPipeline::is_media_pipeline_id_Valid() const{
    return m_media_pipeline_id_isValid;
}

QString OAIMediaConcatenationPipeline::getMediaPipelineArn() const {
    return m_media_pipeline_arn;
}
void OAIMediaConcatenationPipeline::setMediaPipelineArn(const QString &media_pipeline_arn) {
    m_media_pipeline_arn = media_pipeline_arn;
    m_media_pipeline_arn_isSet = true;
}

bool OAIMediaConcatenationPipeline::is_media_pipeline_arn_Set() const{
    return m_media_pipeline_arn_isSet;
}

bool OAIMediaConcatenationPipeline::is_media_pipeline_arn_Valid() const{
    return m_media_pipeline_arn_isValid;
}

QList OAIMediaConcatenationPipeline::getSources() const {
    return m_sources;
}
void OAIMediaConcatenationPipeline::setSources(const QList &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIMediaConcatenationPipeline::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIMediaConcatenationPipeline::is_sources_Valid() const{
    return m_sources_isValid;
}

QList OAIMediaConcatenationPipeline::getSinks() const {
    return m_sinks;
}
void OAIMediaConcatenationPipeline::setSinks(const QList &sinks) {
    m_sinks = sinks;
    m_sinks_isSet = true;
}

bool OAIMediaConcatenationPipeline::is_sinks_Set() const{
    return m_sinks_isSet;
}

bool OAIMediaConcatenationPipeline::is_sinks_Valid() const{
    return m_sinks_isValid;
}

OAIMediaPipelineStatus OAIMediaConcatenationPipeline::getStatus() const {
    return m_status;
}
void OAIMediaConcatenationPipeline::setStatus(const OAIMediaPipelineStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMediaConcatenationPipeline::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMediaConcatenationPipeline::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIMediaConcatenationPipeline::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIMediaConcatenationPipeline::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIMediaConcatenationPipeline::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIMediaConcatenationPipeline::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIMediaConcatenationPipeline::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIMediaConcatenationPipeline::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIMediaConcatenationPipeline::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIMediaConcatenationPipeline::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIMediaConcatenationPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_pipeline_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sinks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaConcatenationPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
