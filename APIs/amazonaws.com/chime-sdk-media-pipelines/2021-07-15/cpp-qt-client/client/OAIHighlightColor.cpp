/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHighlightColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHighlightColor::OAIHighlightColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHighlightColor::OAIHighlightColor() {
    this->initializeModel();
}

OAIHighlightColor::~OAIHighlightColor() {}

void OAIHighlightColor::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHighlightColor::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHighlightColor::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Black", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHighlightColor::BLACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Blue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHighlightColor::BLUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Red", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHighlightColor::RED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Green", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHighlightColor::GREEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("White", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHighlightColor::WHITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Yellow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHighlightColor::YELLOW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHighlightColor::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHighlightColor::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHighlightColor::BLACK:
            val = "Black";
            break;
        case eOAIHighlightColor::BLUE:
            val = "Blue";
            break;
        case eOAIHighlightColor::RED:
            val = "Red";
            break;
        case eOAIHighlightColor::GREEN:
            val = "Green";
            break;
        case eOAIHighlightColor::WHITE:
            val = "White";
            break;
        case eOAIHighlightColor::YELLOW:
            val = "Yellow";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHighlightColor::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHighlightColor::eOAIHighlightColor OAIHighlightColor::getValue() const {
    return m_value;
}

void OAIHighlightColor::setValue(const OAIHighlightColor::eOAIHighlightColor& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHighlightColor::isSet() const {
    
    return m_value_isSet;
}

bool OAIHighlightColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
