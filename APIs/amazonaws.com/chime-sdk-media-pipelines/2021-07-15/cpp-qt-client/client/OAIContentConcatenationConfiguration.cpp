/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentConcatenationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentConcatenationConfiguration::OAIContentConcatenationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentConcatenationConfiguration::OAIContentConcatenationConfiguration() {
    this->initializeModel();
}

OAIContentConcatenationConfiguration::~OAIContentConcatenationConfiguration() {}

void OAIContentConcatenationConfiguration::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIContentConcatenationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentConcatenationConfiguration::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIContentConcatenationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentConcatenationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIArtifactsConcatenationState OAIContentConcatenationConfiguration::getState() const {
    return m_state;
}
void OAIContentConcatenationConfiguration::setState(const OAIArtifactsConcatenationState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIContentConcatenationConfiguration::is_state_Set() const{
    return m_state_isSet;
}

bool OAIContentConcatenationConfiguration::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIContentConcatenationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentConcatenationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
