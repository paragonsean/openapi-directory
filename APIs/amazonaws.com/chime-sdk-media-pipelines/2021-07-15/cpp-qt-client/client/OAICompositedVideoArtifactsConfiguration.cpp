/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompositedVideoArtifactsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompositedVideoArtifactsConfiguration::OAICompositedVideoArtifactsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompositedVideoArtifactsConfiguration::OAICompositedVideoArtifactsConfiguration() {
    this->initializeModel();
}

OAICompositedVideoArtifactsConfiguration::~OAICompositedVideoArtifactsConfiguration() {}

void OAICompositedVideoArtifactsConfiguration::initializeModel() {

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_grid_view_configuration_isSet = false;
    m_grid_view_configuration_isValid = false;
}

void OAICompositedVideoArtifactsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompositedVideoArtifactsConfiguration::fromJsonObject(QJsonObject json) {

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("Layout")]);
    m_layout_isSet = !json[QString("Layout")].isNull() && m_layout_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("Resolution")]);
    m_resolution_isSet = !json[QString("Resolution")].isNull() && m_resolution_isValid;

    m_grid_view_configuration_isValid = ::OpenAPI::fromJsonValue(m_grid_view_configuration, json[QString("GridViewConfiguration")]);
    m_grid_view_configuration_isSet = !json[QString("GridViewConfiguration")].isNull() && m_grid_view_configuration_isValid;
}

QString OAICompositedVideoArtifactsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompositedVideoArtifactsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_layout.isSet()) {
        obj.insert(QString("Layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("Resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_grid_view_configuration.isSet()) {
        obj.insert(QString("GridViewConfiguration"), ::OpenAPI::toJsonValue(m_grid_view_configuration));
    }
    return obj;
}

OAILayoutOption OAICompositedVideoArtifactsConfiguration::getLayout() const {
    return m_layout;
}
void OAICompositedVideoArtifactsConfiguration::setLayout(const OAILayoutOption &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAICompositedVideoArtifactsConfiguration::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAICompositedVideoArtifactsConfiguration::is_layout_Valid() const{
    return m_layout_isValid;
}

OAIResolutionOption OAICompositedVideoArtifactsConfiguration::getResolution() const {
    return m_resolution;
}
void OAICompositedVideoArtifactsConfiguration::setResolution(const OAIResolutionOption &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAICompositedVideoArtifactsConfiguration::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAICompositedVideoArtifactsConfiguration::is_resolution_Valid() const{
    return m_resolution_isValid;
}

OAICompositedVideoArtifactsConfiguration_GridViewConfiguration OAICompositedVideoArtifactsConfiguration::getGridViewConfiguration() const {
    return m_grid_view_configuration;
}
void OAICompositedVideoArtifactsConfiguration::setGridViewConfiguration(const OAICompositedVideoArtifactsConfiguration_GridViewConfiguration &grid_view_configuration) {
    m_grid_view_configuration = grid_view_configuration;
    m_grid_view_configuration_isSet = true;
}

bool OAICompositedVideoArtifactsConfiguration::is_grid_view_configuration_Set() const{
    return m_grid_view_configuration_isSet;
}

bool OAICompositedVideoArtifactsConfiguration::is_grid_view_configuration_Valid() const{
    return m_grid_view_configuration_isValid;
}

bool OAICompositedVideoArtifactsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_view_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompositedVideoArtifactsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_grid_view_configuration_isValid && true;
}

} // namespace OpenAPI
