/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordingStreamConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordingStreamConfiguration::OAIRecordingStreamConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordingStreamConfiguration::OAIRecordingStreamConfiguration() {
    this->initializeModel();
}

OAIRecordingStreamConfiguration::~OAIRecordingStreamConfiguration() {}

void OAIRecordingStreamConfiguration::initializeModel() {

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;
}

void OAIRecordingStreamConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordingStreamConfiguration::fromJsonObject(QJsonObject json) {

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamArn")]);
    m_stream_arn_isSet = !json[QString("StreamArn")].isNull() && m_stream_arn_isValid;
}

QString OAIRecordingStreamConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordingStreamConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamArn"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    return obj;
}

QString OAIRecordingStreamConfiguration::getStreamArn() const {
    return m_stream_arn;
}
void OAIRecordingStreamConfiguration::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIRecordingStreamConfiguration::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIRecordingStreamConfiguration::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

bool OAIRecordingStreamConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordingStreamConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
