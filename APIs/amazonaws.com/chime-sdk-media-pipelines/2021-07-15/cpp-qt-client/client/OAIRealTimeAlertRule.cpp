/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealTimeAlertRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealTimeAlertRule::OAIRealTimeAlertRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealTimeAlertRule::OAIRealTimeAlertRule() {
    this->initializeModel();
}

OAIRealTimeAlertRule::~OAIRealTimeAlertRule() {}

void OAIRealTimeAlertRule::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_keyword_match_configuration_isSet = false;
    m_keyword_match_configuration_isValid = false;

    m_sentiment_configuration_isSet = false;
    m_sentiment_configuration_isValid = false;

    m_issue_detection_configuration_isSet = false;
    m_issue_detection_configuration_isValid = false;
}

void OAIRealTimeAlertRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealTimeAlertRule::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_keyword_match_configuration_isValid = ::OpenAPI::fromJsonValue(m_keyword_match_configuration, json[QString("KeywordMatchConfiguration")]);
    m_keyword_match_configuration_isSet = !json[QString("KeywordMatchConfiguration")].isNull() && m_keyword_match_configuration_isValid;

    m_sentiment_configuration_isValid = ::OpenAPI::fromJsonValue(m_sentiment_configuration, json[QString("SentimentConfiguration")]);
    m_sentiment_configuration_isSet = !json[QString("SentimentConfiguration")].isNull() && m_sentiment_configuration_isValid;

    m_issue_detection_configuration_isValid = ::OpenAPI::fromJsonValue(m_issue_detection_configuration, json[QString("IssueDetectionConfiguration")]);
    m_issue_detection_configuration_isSet = !json[QString("IssueDetectionConfiguration")].isNull() && m_issue_detection_configuration_isValid;
}

QString OAIRealTimeAlertRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealTimeAlertRule::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_keyword_match_configuration.isSet()) {
        obj.insert(QString("KeywordMatchConfiguration"), ::OpenAPI::toJsonValue(m_keyword_match_configuration));
    }
    if (m_sentiment_configuration.isSet()) {
        obj.insert(QString("SentimentConfiguration"), ::OpenAPI::toJsonValue(m_sentiment_configuration));
    }
    if (m_issue_detection_configuration.isSet()) {
        obj.insert(QString("IssueDetectionConfiguration"), ::OpenAPI::toJsonValue(m_issue_detection_configuration));
    }
    return obj;
}

OAIRealTimeAlertRuleType OAIRealTimeAlertRule::getType() const {
    return m_type;
}
void OAIRealTimeAlertRule::setType(const OAIRealTimeAlertRuleType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRealTimeAlertRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRealTimeAlertRule::is_type_Valid() const{
    return m_type_isValid;
}

OAIRealTimeAlertRule_KeywordMatchConfiguration OAIRealTimeAlertRule::getKeywordMatchConfiguration() const {
    return m_keyword_match_configuration;
}
void OAIRealTimeAlertRule::setKeywordMatchConfiguration(const OAIRealTimeAlertRule_KeywordMatchConfiguration &keyword_match_configuration) {
    m_keyword_match_configuration = keyword_match_configuration;
    m_keyword_match_configuration_isSet = true;
}

bool OAIRealTimeAlertRule::is_keyword_match_configuration_Set() const{
    return m_keyword_match_configuration_isSet;
}

bool OAIRealTimeAlertRule::is_keyword_match_configuration_Valid() const{
    return m_keyword_match_configuration_isValid;
}

OAIRealTimeAlertRule_SentimentConfiguration OAIRealTimeAlertRule::getSentimentConfiguration() const {
    return m_sentiment_configuration;
}
void OAIRealTimeAlertRule::setSentimentConfiguration(const OAIRealTimeAlertRule_SentimentConfiguration &sentiment_configuration) {
    m_sentiment_configuration = sentiment_configuration;
    m_sentiment_configuration_isSet = true;
}

bool OAIRealTimeAlertRule::is_sentiment_configuration_Set() const{
    return m_sentiment_configuration_isSet;
}

bool OAIRealTimeAlertRule::is_sentiment_configuration_Valid() const{
    return m_sentiment_configuration_isValid;
}

OAIRealTimeAlertRule_IssueDetectionConfiguration OAIRealTimeAlertRule::getIssueDetectionConfiguration() const {
    return m_issue_detection_configuration;
}
void OAIRealTimeAlertRule::setIssueDetectionConfiguration(const OAIRealTimeAlertRule_IssueDetectionConfiguration &issue_detection_configuration) {
    m_issue_detection_configuration = issue_detection_configuration;
    m_issue_detection_configuration_isSet = true;
}

bool OAIRealTimeAlertRule::is_issue_detection_configuration_Set() const{
    return m_issue_detection_configuration_isSet;
}

bool OAIRealTimeAlertRule::is_issue_detection_configuration_Valid() const{
    return m_issue_detection_configuration_isValid;
}

bool OAIRealTimeAlertRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_match_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_detection_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealTimeAlertRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
