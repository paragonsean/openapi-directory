/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveConnectorSinkConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveConnectorSinkConfiguration::OAILiveConnectorSinkConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveConnectorSinkConfiguration::OAILiveConnectorSinkConfiguration() {
    this->initializeModel();
}

OAILiveConnectorSinkConfiguration::~OAILiveConnectorSinkConfiguration() {}

void OAILiveConnectorSinkConfiguration::initializeModel() {

    m_sink_type_isSet = false;
    m_sink_type_isValid = false;

    m_rtmp_configuration_isSet = false;
    m_rtmp_configuration_isValid = false;
}

void OAILiveConnectorSinkConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveConnectorSinkConfiguration::fromJsonObject(QJsonObject json) {

    m_sink_type_isValid = ::OpenAPI::fromJsonValue(m_sink_type, json[QString("SinkType")]);
    m_sink_type_isSet = !json[QString("SinkType")].isNull() && m_sink_type_isValid;

    m_rtmp_configuration_isValid = ::OpenAPI::fromJsonValue(m_rtmp_configuration, json[QString("RTMPConfiguration")]);
    m_rtmp_configuration_isSet = !json[QString("RTMPConfiguration")].isNull() && m_rtmp_configuration_isValid;
}

QString OAILiveConnectorSinkConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveConnectorSinkConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_sink_type.isSet()) {
        obj.insert(QString("SinkType"), ::OpenAPI::toJsonValue(m_sink_type));
    }
    if (m_rtmp_configuration.isSet()) {
        obj.insert(QString("RTMPConfiguration"), ::OpenAPI::toJsonValue(m_rtmp_configuration));
    }
    return obj;
}

OAILiveConnectorSinkType OAILiveConnectorSinkConfiguration::getSinkType() const {
    return m_sink_type;
}
void OAILiveConnectorSinkConfiguration::setSinkType(const OAILiveConnectorSinkType &sink_type) {
    m_sink_type = sink_type;
    m_sink_type_isSet = true;
}

bool OAILiveConnectorSinkConfiguration::is_sink_type_Set() const{
    return m_sink_type_isSet;
}

bool OAILiveConnectorSinkConfiguration::is_sink_type_Valid() const{
    return m_sink_type_isValid;
}

OAILiveConnectorSinkConfiguration_RTMPConfiguration OAILiveConnectorSinkConfiguration::getRtmpConfiguration() const {
    return m_rtmp_configuration;
}
void OAILiveConnectorSinkConfiguration::setRtmpConfiguration(const OAILiveConnectorSinkConfiguration_RTMPConfiguration &rtmp_configuration) {
    m_rtmp_configuration = rtmp_configuration;
    m_rtmp_configuration_isSet = true;
}

bool OAILiveConnectorSinkConfiguration::is_rtmp_configuration_Set() const{
    return m_rtmp_configuration_isSet;
}

bool OAILiveConnectorSinkConfiguration::is_rtmp_configuration_Valid() const{
    return m_rtmp_configuration_isValid;
}

bool OAILiveConnectorSinkConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sink_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtmp_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveConnectorSinkConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sink_type_isValid && m_rtmp_configuration_isValid && true;
}

} // namespace OpenAPI
