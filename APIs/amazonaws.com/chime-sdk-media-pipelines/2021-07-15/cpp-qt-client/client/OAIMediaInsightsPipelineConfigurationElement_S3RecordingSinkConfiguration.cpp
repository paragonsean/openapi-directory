/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration() {
    this->initializeModel();
}

OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::~OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration() {}

void OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_recording_file_format_isSet = false;
    m_recording_file_format_isValid = false;
}

void OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_recording_file_format_isValid = ::OpenAPI::fromJsonValue(m_recording_file_format, json[QString("RecordingFileFormat")]);
    m_recording_file_format_isSet = !json[QString("RecordingFileFormat")].isNull() && m_recording_file_format_isValid;
}

QString OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_recording_file_format.isSet()) {
        obj.insert(QString("RecordingFileFormat"), ::OpenAPI::toJsonValue(m_recording_file_format));
    }
    return obj;
}

QString OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::getDestination() const {
    return m_destination;
}
void OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIRecordingFileFormat OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::getRecordingFileFormat() const {
    return m_recording_file_format;
}
void OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::setRecordingFileFormat(const OAIRecordingFileFormat &recording_file_format) {
    m_recording_file_format = recording_file_format;
    m_recording_file_format_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::is_recording_file_format_Set() const{
    return m_recording_file_format_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::is_recording_file_format_Valid() const{
    return m_recording_file_format_isValid;
}

bool OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_file_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaInsightsPipelineConfigurationElement_S3RecordingSinkConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
