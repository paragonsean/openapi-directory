/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMediaInsightsPipelineConfigurationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMediaInsightsPipelineConfigurationsResponse::OAIListMediaInsightsPipelineConfigurationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMediaInsightsPipelineConfigurationsResponse::OAIListMediaInsightsPipelineConfigurationsResponse() {
    this->initializeModel();
}

OAIListMediaInsightsPipelineConfigurationsResponse::~OAIListMediaInsightsPipelineConfigurationsResponse() {}

void OAIListMediaInsightsPipelineConfigurationsResponse::initializeModel() {

    m_media_insights_pipeline_configurations_isSet = false;
    m_media_insights_pipeline_configurations_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListMediaInsightsPipelineConfigurationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMediaInsightsPipelineConfigurationsResponse::fromJsonObject(QJsonObject json) {

    m_media_insights_pipeline_configurations_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline_configurations, json[QString("MediaInsightsPipelineConfigurations")]);
    m_media_insights_pipeline_configurations_isSet = !json[QString("MediaInsightsPipelineConfigurations")].isNull() && m_media_insights_pipeline_configurations_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListMediaInsightsPipelineConfigurationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMediaInsightsPipelineConfigurationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_insights_pipeline_configurations.isSet()) {
        obj.insert(QString("MediaInsightsPipelineConfigurations"), ::OpenAPI::toJsonValue(m_media_insights_pipeline_configurations));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListMediaInsightsPipelineConfigurationsResponse::getMediaInsightsPipelineConfigurations() const {
    return m_media_insights_pipeline_configurations;
}
void OAIListMediaInsightsPipelineConfigurationsResponse::setMediaInsightsPipelineConfigurations(const QList &media_insights_pipeline_configurations) {
    m_media_insights_pipeline_configurations = media_insights_pipeline_configurations;
    m_media_insights_pipeline_configurations_isSet = true;
}

bool OAIListMediaInsightsPipelineConfigurationsResponse::is_media_insights_pipeline_configurations_Set() const{
    return m_media_insights_pipeline_configurations_isSet;
}

bool OAIListMediaInsightsPipelineConfigurationsResponse::is_media_insights_pipeline_configurations_Valid() const{
    return m_media_insights_pipeline_configurations_isValid;
}

QString OAIListMediaInsightsPipelineConfigurationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListMediaInsightsPipelineConfigurationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListMediaInsightsPipelineConfigurationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListMediaInsightsPipelineConfigurationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListMediaInsightsPipelineConfigurationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_insights_pipeline_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMediaInsightsPipelineConfigurationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
