/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration() {
    this->initializeModel();
}

OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::~OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration() {}

void OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::initializeModel() {

    m_speaker_search_status_isSet = false;
    m_speaker_search_status_isValid = false;

    m_voice_tone_analysis_status_isSet = false;
    m_voice_tone_analysis_status_isValid = false;
}

void OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::fromJsonObject(QJsonObject json) {

    m_speaker_search_status_isValid = ::OpenAPI::fromJsonValue(m_speaker_search_status, json[QString("SpeakerSearchStatus")]);
    m_speaker_search_status_isSet = !json[QString("SpeakerSearchStatus")].isNull() && m_speaker_search_status_isValid;

    m_voice_tone_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_voice_tone_analysis_status, json[QString("VoiceToneAnalysisStatus")]);
    m_voice_tone_analysis_status_isSet = !json[QString("VoiceToneAnalysisStatus")].isNull() && m_voice_tone_analysis_status_isValid;
}

QString OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_speaker_search_status.isSet()) {
        obj.insert(QString("SpeakerSearchStatus"), ::OpenAPI::toJsonValue(m_speaker_search_status));
    }
    if (m_voice_tone_analysis_status.isSet()) {
        obj.insert(QString("VoiceToneAnalysisStatus"), ::OpenAPI::toJsonValue(m_voice_tone_analysis_status));
    }
    return obj;
}

OAIVoiceAnalyticsConfigurationStatus OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::getSpeakerSearchStatus() const {
    return m_speaker_search_status;
}
void OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::setSpeakerSearchStatus(const OAIVoiceAnalyticsConfigurationStatus &speaker_search_status) {
    m_speaker_search_status = speaker_search_status;
    m_speaker_search_status_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::is_speaker_search_status_Set() const{
    return m_speaker_search_status_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::is_speaker_search_status_Valid() const{
    return m_speaker_search_status_isValid;
}

OAIVoiceAnalyticsConfigurationStatus OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::getVoiceToneAnalysisStatus() const {
    return m_voice_tone_analysis_status;
}
void OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::setVoiceToneAnalysisStatus(const OAIVoiceAnalyticsConfigurationStatus &voice_tone_analysis_status) {
    m_voice_tone_analysis_status = voice_tone_analysis_status;
    m_voice_tone_analysis_status_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::is_voice_tone_analysis_status_Set() const{
    return m_voice_tone_analysis_status_isSet;
}

bool OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::is_voice_tone_analysis_status_Valid() const{
    return m_voice_tone_analysis_status_isValid;
}

bool OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_speaker_search_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_tone_analysis_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaInsightsPipelineConfigurationElement_VoiceAnalyticsProcessorConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
