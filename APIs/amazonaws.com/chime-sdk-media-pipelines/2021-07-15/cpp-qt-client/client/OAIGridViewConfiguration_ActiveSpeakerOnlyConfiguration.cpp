/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration() {
    this->initializeModel();
}

OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::~OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration() {}

void OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::initializeModel() {

    m_active_speaker_position_isSet = false;
    m_active_speaker_position_isValid = false;
}

void OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::fromJsonObject(QJsonObject json) {

    m_active_speaker_position_isValid = ::OpenAPI::fromJsonValue(m_active_speaker_position, json[QString("ActiveSpeakerPosition")]);
    m_active_speaker_position_isSet = !json[QString("ActiveSpeakerPosition")].isNull() && m_active_speaker_position_isValid;
}

QString OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_active_speaker_position.isSet()) {
        obj.insert(QString("ActiveSpeakerPosition"), ::OpenAPI::toJsonValue(m_active_speaker_position));
    }
    return obj;
}

OAIActiveSpeakerPosition OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::getActiveSpeakerPosition() const {
    return m_active_speaker_position;
}
void OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::setActiveSpeakerPosition(const OAIActiveSpeakerPosition &active_speaker_position) {
    m_active_speaker_position = active_speaker_position;
    m_active_speaker_position_isSet = true;
}

bool OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::is_active_speaker_position_Set() const{
    return m_active_speaker_position_isSet;
}

bool OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::is_active_speaker_position_Valid() const{
    return m_active_speaker_position_isValid;
}

bool OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_speaker_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridViewConfiguration_ActiveSpeakerOnlyConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
