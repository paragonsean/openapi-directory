/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelectedVideoStreams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelectedVideoStreams::OAISelectedVideoStreams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelectedVideoStreams::OAISelectedVideoStreams() {
    this->initializeModel();
}

OAISelectedVideoStreams::~OAISelectedVideoStreams() {}

void OAISelectedVideoStreams::initializeModel() {

    m_attendee_ids_isSet = false;
    m_attendee_ids_isValid = false;

    m_external_user_ids_isSet = false;
    m_external_user_ids_isValid = false;
}

void OAISelectedVideoStreams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelectedVideoStreams::fromJsonObject(QJsonObject json) {

    m_attendee_ids_isValid = ::OpenAPI::fromJsonValue(m_attendee_ids, json[QString("AttendeeIds")]);
    m_attendee_ids_isSet = !json[QString("AttendeeIds")].isNull() && m_attendee_ids_isValid;

    m_external_user_ids_isValid = ::OpenAPI::fromJsonValue(m_external_user_ids, json[QString("ExternalUserIds")]);
    m_external_user_ids_isSet = !json[QString("ExternalUserIds")].isNull() && m_external_user_ids_isValid;
}

QString OAISelectedVideoStreams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelectedVideoStreams::asJsonObject() const {
    QJsonObject obj;
    if (m_attendee_ids.isSet()) {
        obj.insert(QString("AttendeeIds"), ::OpenAPI::toJsonValue(m_attendee_ids));
    }
    if (m_external_user_ids.isSet()) {
        obj.insert(QString("ExternalUserIds"), ::OpenAPI::toJsonValue(m_external_user_ids));
    }
    return obj;
}

QList OAISelectedVideoStreams::getAttendeeIds() const {
    return m_attendee_ids;
}
void OAISelectedVideoStreams::setAttendeeIds(const QList &attendee_ids) {
    m_attendee_ids = attendee_ids;
    m_attendee_ids_isSet = true;
}

bool OAISelectedVideoStreams::is_attendee_ids_Set() const{
    return m_attendee_ids_isSet;
}

bool OAISelectedVideoStreams::is_attendee_ids_Valid() const{
    return m_attendee_ids_isValid;
}

QList OAISelectedVideoStreams::getExternalUserIds() const {
    return m_external_user_ids;
}
void OAISelectedVideoStreams::setExternalUserIds(const QList &external_user_ids) {
    m_external_user_ids = external_user_ids;
    m_external_user_ids_isSet = true;
}

bool OAISelectedVideoStreams::is_external_user_ids_Set() const{
    return m_external_user_ids_isSet;
}

bool OAISelectedVideoStreams::is_external_user_ids_Valid() const{
    return m_external_user_ids_isValid;
}

bool OAISelectedVideoStreams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendee_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelectedVideoStreams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
