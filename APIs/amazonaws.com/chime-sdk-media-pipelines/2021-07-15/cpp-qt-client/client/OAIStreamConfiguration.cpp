/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamConfiguration::OAIStreamConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamConfiguration::OAIStreamConfiguration() {
    this->initializeModel();
}

OAIStreamConfiguration::~OAIStreamConfiguration() {}

void OAIStreamConfiguration::initializeModel() {

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_fragment_number_isSet = false;
    m_fragment_number_isValid = false;

    m_stream_channel_definition_isSet = false;
    m_stream_channel_definition_isValid = false;
}

void OAIStreamConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamConfiguration::fromJsonObject(QJsonObject json) {

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamArn")]);
    m_stream_arn_isSet = !json[QString("StreamArn")].isNull() && m_stream_arn_isValid;

    m_fragment_number_isValid = ::OpenAPI::fromJsonValue(m_fragment_number, json[QString("FragmentNumber")]);
    m_fragment_number_isSet = !json[QString("FragmentNumber")].isNull() && m_fragment_number_isValid;

    m_stream_channel_definition_isValid = ::OpenAPI::fromJsonValue(m_stream_channel_definition, json[QString("StreamChannelDefinition")]);
    m_stream_channel_definition_isSet = !json[QString("StreamChannelDefinition")].isNull() && m_stream_channel_definition_isValid;
}

QString OAIStreamConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamArn"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_fragment_number_isSet) {
        obj.insert(QString("FragmentNumber"), ::OpenAPI::toJsonValue(m_fragment_number));
    }
    if (m_stream_channel_definition.isSet()) {
        obj.insert(QString("StreamChannelDefinition"), ::OpenAPI::toJsonValue(m_stream_channel_definition));
    }
    return obj;
}

QString OAIStreamConfiguration::getStreamArn() const {
    return m_stream_arn;
}
void OAIStreamConfiguration::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIStreamConfiguration::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIStreamConfiguration::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

QString OAIStreamConfiguration::getFragmentNumber() const {
    return m_fragment_number;
}
void OAIStreamConfiguration::setFragmentNumber(const QString &fragment_number) {
    m_fragment_number = fragment_number;
    m_fragment_number_isSet = true;
}

bool OAIStreamConfiguration::is_fragment_number_Set() const{
    return m_fragment_number_isSet;
}

bool OAIStreamConfiguration::is_fragment_number_Valid() const{
    return m_fragment_number_isValid;
}

OAIStreamConfiguration_StreamChannelDefinition OAIStreamConfiguration::getStreamChannelDefinition() const {
    return m_stream_channel_definition;
}
void OAIStreamConfiguration::setStreamChannelDefinition(const OAIStreamConfiguration_StreamChannelDefinition &stream_channel_definition) {
    m_stream_channel_definition = stream_channel_definition;
    m_stream_channel_definition_isSet = true;
}

bool OAIStreamConfiguration::is_stream_channel_definition_Set() const{
    return m_stream_channel_definition_isSet;
}

bool OAIStreamConfiguration::is_stream_channel_definition_Valid() const{
    return m_stream_channel_definition_isValid;
}

bool OAIStreamConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_channel_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stream_arn_isValid && m_stream_channel_definition_isValid && true;
}

} // namespace OpenAPI
