/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveSpeakerPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveSpeakerPosition::OAIActiveSpeakerPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveSpeakerPosition::OAIActiveSpeakerPosition() {
    this->initializeModel();
}

OAIActiveSpeakerPosition::~OAIActiveSpeakerPosition() {}

void OAIActiveSpeakerPosition::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIActiveSpeakerPosition::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIActiveSpeakerPosition::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TopLeft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActiveSpeakerPosition::TOPLEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TopRight", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActiveSpeakerPosition::TOPRIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BottomLeft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActiveSpeakerPosition::BOTTOMLEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BottomRight", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActiveSpeakerPosition::BOTTOMRIGHT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIActiveSpeakerPosition::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIActiveSpeakerPosition::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIActiveSpeakerPosition::TOPLEFT:
            val = "TopLeft";
            break;
        case eOAIActiveSpeakerPosition::TOPRIGHT:
            val = "TopRight";
            break;
        case eOAIActiveSpeakerPosition::BOTTOMLEFT:
            val = "BottomLeft";
            break;
        case eOAIActiveSpeakerPosition::BOTTOMRIGHT:
            val = "BottomRight";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIActiveSpeakerPosition::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIActiveSpeakerPosition::eOAIActiveSpeakerPosition OAIActiveSpeakerPosition::getValue() const {
    return m_value;
}

void OAIActiveSpeakerPosition::setValue(const OAIActiveSpeakerPosition::eOAIActiveSpeakerPosition& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIActiveSpeakerPosition::isSet() const {
    
    return m_value_isSet;
}

bool OAIActiveSpeakerPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
