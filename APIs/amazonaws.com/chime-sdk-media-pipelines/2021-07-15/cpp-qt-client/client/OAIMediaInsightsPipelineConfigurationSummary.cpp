/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaInsightsPipelineConfigurationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaInsightsPipelineConfigurationSummary::OAIMediaInsightsPipelineConfigurationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaInsightsPipelineConfigurationSummary::OAIMediaInsightsPipelineConfigurationSummary() {
    this->initializeModel();
}

OAIMediaInsightsPipelineConfigurationSummary::~OAIMediaInsightsPipelineConfigurationSummary() {}

void OAIMediaInsightsPipelineConfigurationSummary::initializeModel() {

    m_media_insights_pipeline_configuration_name_isSet = false;
    m_media_insights_pipeline_configuration_name_isValid = false;

    m_media_insights_pipeline_configuration_id_isSet = false;
    m_media_insights_pipeline_configuration_id_isValid = false;

    m_media_insights_pipeline_configuration_arn_isSet = false;
    m_media_insights_pipeline_configuration_arn_isValid = false;
}

void OAIMediaInsightsPipelineConfigurationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaInsightsPipelineConfigurationSummary::fromJsonObject(QJsonObject json) {

    m_media_insights_pipeline_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline_configuration_name, json[QString("MediaInsightsPipelineConfigurationName")]);
    m_media_insights_pipeline_configuration_name_isSet = !json[QString("MediaInsightsPipelineConfigurationName")].isNull() && m_media_insights_pipeline_configuration_name_isValid;

    m_media_insights_pipeline_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline_configuration_id, json[QString("MediaInsightsPipelineConfigurationId")]);
    m_media_insights_pipeline_configuration_id_isSet = !json[QString("MediaInsightsPipelineConfigurationId")].isNull() && m_media_insights_pipeline_configuration_id_isValid;

    m_media_insights_pipeline_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline_configuration_arn, json[QString("MediaInsightsPipelineConfigurationArn")]);
    m_media_insights_pipeline_configuration_arn_isSet = !json[QString("MediaInsightsPipelineConfigurationArn")].isNull() && m_media_insights_pipeline_configuration_arn_isValid;
}

QString OAIMediaInsightsPipelineConfigurationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaInsightsPipelineConfigurationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_media_insights_pipeline_configuration_name_isSet) {
        obj.insert(QString("MediaInsightsPipelineConfigurationName"), ::OpenAPI::toJsonValue(m_media_insights_pipeline_configuration_name));
    }
    if (m_media_insights_pipeline_configuration_id_isSet) {
        obj.insert(QString("MediaInsightsPipelineConfigurationId"), ::OpenAPI::toJsonValue(m_media_insights_pipeline_configuration_id));
    }
    if (m_media_insights_pipeline_configuration_arn_isSet) {
        obj.insert(QString("MediaInsightsPipelineConfigurationArn"), ::OpenAPI::toJsonValue(m_media_insights_pipeline_configuration_arn));
    }
    return obj;
}

QString OAIMediaInsightsPipelineConfigurationSummary::getMediaInsightsPipelineConfigurationName() const {
    return m_media_insights_pipeline_configuration_name;
}
void OAIMediaInsightsPipelineConfigurationSummary::setMediaInsightsPipelineConfigurationName(const QString &media_insights_pipeline_configuration_name) {
    m_media_insights_pipeline_configuration_name = media_insights_pipeline_configuration_name;
    m_media_insights_pipeline_configuration_name_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationSummary::is_media_insights_pipeline_configuration_name_Set() const{
    return m_media_insights_pipeline_configuration_name_isSet;
}

bool OAIMediaInsightsPipelineConfigurationSummary::is_media_insights_pipeline_configuration_name_Valid() const{
    return m_media_insights_pipeline_configuration_name_isValid;
}

QString OAIMediaInsightsPipelineConfigurationSummary::getMediaInsightsPipelineConfigurationId() const {
    return m_media_insights_pipeline_configuration_id;
}
void OAIMediaInsightsPipelineConfigurationSummary::setMediaInsightsPipelineConfigurationId(const QString &media_insights_pipeline_configuration_id) {
    m_media_insights_pipeline_configuration_id = media_insights_pipeline_configuration_id;
    m_media_insights_pipeline_configuration_id_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationSummary::is_media_insights_pipeline_configuration_id_Set() const{
    return m_media_insights_pipeline_configuration_id_isSet;
}

bool OAIMediaInsightsPipelineConfigurationSummary::is_media_insights_pipeline_configuration_id_Valid() const{
    return m_media_insights_pipeline_configuration_id_isValid;
}

QString OAIMediaInsightsPipelineConfigurationSummary::getMediaInsightsPipelineConfigurationArn() const {
    return m_media_insights_pipeline_configuration_arn;
}
void OAIMediaInsightsPipelineConfigurationSummary::setMediaInsightsPipelineConfigurationArn(const QString &media_insights_pipeline_configuration_arn) {
    m_media_insights_pipeline_configuration_arn = media_insights_pipeline_configuration_arn;
    m_media_insights_pipeline_configuration_arn_isSet = true;
}

bool OAIMediaInsightsPipelineConfigurationSummary::is_media_insights_pipeline_configuration_arn_Set() const{
    return m_media_insights_pipeline_configuration_arn_isSet;
}

bool OAIMediaInsightsPipelineConfigurationSummary::is_media_insights_pipeline_configuration_arn_Valid() const{
    return m_media_insights_pipeline_configuration_arn_isValid;
}

bool OAIMediaInsightsPipelineConfigurationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_insights_pipeline_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_insights_pipeline_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_insights_pipeline_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaInsightsPipelineConfigurationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
