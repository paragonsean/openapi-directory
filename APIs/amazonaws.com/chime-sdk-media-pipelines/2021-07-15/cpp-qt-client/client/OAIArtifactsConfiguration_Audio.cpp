/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactsConfiguration_Audio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactsConfiguration_Audio::OAIArtifactsConfiguration_Audio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactsConfiguration_Audio::OAIArtifactsConfiguration_Audio() {
    this->initializeModel();
}

OAIArtifactsConfiguration_Audio::~OAIArtifactsConfiguration_Audio() {}

void OAIArtifactsConfiguration_Audio::initializeModel() {

    m_mux_type_isSet = false;
    m_mux_type_isValid = false;
}

void OAIArtifactsConfiguration_Audio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactsConfiguration_Audio::fromJsonObject(QJsonObject json) {

    m_mux_type_isValid = ::OpenAPI::fromJsonValue(m_mux_type, json[QString("MuxType")]);
    m_mux_type_isSet = !json[QString("MuxType")].isNull() && m_mux_type_isValid;
}

QString OAIArtifactsConfiguration_Audio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactsConfiguration_Audio::asJsonObject() const {
    QJsonObject obj;
    if (m_mux_type.isSet()) {
        obj.insert(QString("MuxType"), ::OpenAPI::toJsonValue(m_mux_type));
    }
    return obj;
}

OAIAudioMuxType OAIArtifactsConfiguration_Audio::getMuxType() const {
    return m_mux_type;
}
void OAIArtifactsConfiguration_Audio::setMuxType(const OAIAudioMuxType &mux_type) {
    m_mux_type = mux_type;
    m_mux_type_isSet = true;
}

bool OAIArtifactsConfiguration_Audio::is_mux_type_Set() const{
    return m_mux_type_isSet;
}

bool OAIArtifactsConfiguration_Audio::is_mux_type_Valid() const{
    return m_mux_type_isValid;
}

bool OAIArtifactsConfiguration_Audio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mux_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactsConfiguration_Audio::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mux_type_isValid && true;
}

} // namespace OpenAPI
