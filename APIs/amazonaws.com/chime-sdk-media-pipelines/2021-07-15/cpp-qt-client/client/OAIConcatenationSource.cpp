/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcatenationSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcatenationSource::OAIConcatenationSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcatenationSource::OAIConcatenationSource() {
    this->initializeModel();
}

OAIConcatenationSource::~OAIConcatenationSource() {}

void OAIConcatenationSource::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_media_capture_pipeline_source_configuration_isSet = false;
    m_media_capture_pipeline_source_configuration_isValid = false;
}

void OAIConcatenationSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcatenationSource::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_media_capture_pipeline_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_media_capture_pipeline_source_configuration, json[QString("MediaCapturePipelineSourceConfiguration")]);
    m_media_capture_pipeline_source_configuration_isSet = !json[QString("MediaCapturePipelineSourceConfiguration")].isNull() && m_media_capture_pipeline_source_configuration_isValid;
}

QString OAIConcatenationSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcatenationSource::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_media_capture_pipeline_source_configuration.isSet()) {
        obj.insert(QString("MediaCapturePipelineSourceConfiguration"), ::OpenAPI::toJsonValue(m_media_capture_pipeline_source_configuration));
    }
    return obj;
}

OAIConcatenationSourceType OAIConcatenationSource::getType() const {
    return m_type;
}
void OAIConcatenationSource::setType(const OAIConcatenationSourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConcatenationSource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConcatenationSource::is_type_Valid() const{
    return m_type_isValid;
}

OAIConcatenationSource_MediaCapturePipelineSourceConfiguration OAIConcatenationSource::getMediaCapturePipelineSourceConfiguration() const {
    return m_media_capture_pipeline_source_configuration;
}
void OAIConcatenationSource::setMediaCapturePipelineSourceConfiguration(const OAIConcatenationSource_MediaCapturePipelineSourceConfiguration &media_capture_pipeline_source_configuration) {
    m_media_capture_pipeline_source_configuration = media_capture_pipeline_source_configuration;
    m_media_capture_pipeline_source_configuration_isSet = true;
}

bool OAIConcatenationSource::is_media_capture_pipeline_source_configuration_Set() const{
    return m_media_capture_pipeline_source_configuration_isSet;
}

bool OAIConcatenationSource::is_media_capture_pipeline_source_configuration_Valid() const{
    return m_media_capture_pipeline_source_configuration_isValid;
}

bool OAIConcatenationSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_capture_pipeline_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcatenationSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_media_capture_pipeline_source_configuration_isValid && true;
}

} // namespace OpenAPI
