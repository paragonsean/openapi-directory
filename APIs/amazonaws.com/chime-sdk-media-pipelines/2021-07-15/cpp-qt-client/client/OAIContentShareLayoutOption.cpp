/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentShareLayoutOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentShareLayoutOption::OAIContentShareLayoutOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentShareLayoutOption::OAIContentShareLayoutOption() {
    this->initializeModel();
}

OAIContentShareLayoutOption::~OAIContentShareLayoutOption() {}

void OAIContentShareLayoutOption::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIContentShareLayoutOption::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIContentShareLayoutOption::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PresenterOnly", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentShareLayoutOption::PRESENTERONLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Horizontal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentShareLayoutOption::HORIZONTAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vertical", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentShareLayoutOption::VERTICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActiveSpeakerOnly", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentShareLayoutOption::ACTIVESPEAKERONLY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIContentShareLayoutOption::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIContentShareLayoutOption::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIContentShareLayoutOption::PRESENTERONLY:
            val = "PresenterOnly";
            break;
        case eOAIContentShareLayoutOption::HORIZONTAL:
            val = "Horizontal";
            break;
        case eOAIContentShareLayoutOption::VERTICAL:
            val = "Vertical";
            break;
        case eOAIContentShareLayoutOption::ACTIVESPEAKERONLY:
            val = "ActiveSpeakerOnly";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIContentShareLayoutOption::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIContentShareLayoutOption::eOAIContentShareLayoutOption OAIContentShareLayoutOption::getValue() const {
    return m_value;
}

void OAIContentShareLayoutOption::setValue(const OAIContentShareLayoutOption::eOAIContentShareLayoutOption& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIContentShareLayoutOption::isSet() const {
    
    return m_value_isSet;
}

bool OAIContentShareLayoutOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
