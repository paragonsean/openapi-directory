/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMediaCapturePipelinesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMediaCapturePipelinesResponse::OAIListMediaCapturePipelinesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMediaCapturePipelinesResponse::OAIListMediaCapturePipelinesResponse() {
    this->initializeModel();
}

OAIListMediaCapturePipelinesResponse::~OAIListMediaCapturePipelinesResponse() {}

void OAIListMediaCapturePipelinesResponse::initializeModel() {

    m_media_capture_pipelines_isSet = false;
    m_media_capture_pipelines_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListMediaCapturePipelinesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMediaCapturePipelinesResponse::fromJsonObject(QJsonObject json) {

    m_media_capture_pipelines_isValid = ::OpenAPI::fromJsonValue(m_media_capture_pipelines, json[QString("MediaCapturePipelines")]);
    m_media_capture_pipelines_isSet = !json[QString("MediaCapturePipelines")].isNull() && m_media_capture_pipelines_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListMediaCapturePipelinesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMediaCapturePipelinesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_capture_pipelines.isSet()) {
        obj.insert(QString("MediaCapturePipelines"), ::OpenAPI::toJsonValue(m_media_capture_pipelines));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListMediaCapturePipelinesResponse::getMediaCapturePipelines() const {
    return m_media_capture_pipelines;
}
void OAIListMediaCapturePipelinesResponse::setMediaCapturePipelines(const QList &media_capture_pipelines) {
    m_media_capture_pipelines = media_capture_pipelines;
    m_media_capture_pipelines_isSet = true;
}

bool OAIListMediaCapturePipelinesResponse::is_media_capture_pipelines_Set() const{
    return m_media_capture_pipelines_isSet;
}

bool OAIListMediaCapturePipelinesResponse::is_media_capture_pipelines_Valid() const{
    return m_media_capture_pipelines_isValid;
}

QString OAIListMediaCapturePipelinesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListMediaCapturePipelinesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListMediaCapturePipelinesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListMediaCapturePipelinesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListMediaCapturePipelinesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_capture_pipelines.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMediaCapturePipelinesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
