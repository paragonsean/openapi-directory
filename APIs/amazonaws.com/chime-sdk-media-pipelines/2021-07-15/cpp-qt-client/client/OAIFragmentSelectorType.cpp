/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFragmentSelectorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFragmentSelectorType::OAIFragmentSelectorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFragmentSelectorType::OAIFragmentSelectorType() {
    this->initializeModel();
}

OAIFragmentSelectorType::~OAIFragmentSelectorType() {}

void OAIFragmentSelectorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFragmentSelectorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFragmentSelectorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ProducerTimestamp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFragmentSelectorType::PRODUCERTIMESTAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServerTimestamp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFragmentSelectorType::SERVERTIMESTAMP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFragmentSelectorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFragmentSelectorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFragmentSelectorType::PRODUCERTIMESTAMP:
            val = "ProducerTimestamp";
            break;
        case eOAIFragmentSelectorType::SERVERTIMESTAMP:
            val = "ServerTimestamp";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFragmentSelectorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFragmentSelectorType::eOAIFragmentSelectorType OAIFragmentSelectorType::getValue() const {
    return m_value;
}

void OAIFragmentSelectorType::setValue(const OAIFragmentSelectorType::eOAIFragmentSelectorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFragmentSelectorType::isSet() const {
    
    return m_value_isSet;
}

bool OAIFragmentSelectorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
