/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFragmentSelector_TimestampRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFragmentSelector_TimestampRange::OAIFragmentSelector_TimestampRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFragmentSelector_TimestampRange::OAIFragmentSelector_TimestampRange() {
    this->initializeModel();
}

OAIFragmentSelector_TimestampRange::~OAIFragmentSelector_TimestampRange() {}

void OAIFragmentSelector_TimestampRange::initializeModel() {

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;

    m_end_timestamp_isSet = false;
    m_end_timestamp_isValid = false;
}

void OAIFragmentSelector_TimestampRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFragmentSelector_TimestampRange::fromJsonObject(QJsonObject json) {

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("StartTimestamp")]);
    m_start_timestamp_isSet = !json[QString("StartTimestamp")].isNull() && m_start_timestamp_isValid;

    m_end_timestamp_isValid = ::OpenAPI::fromJsonValue(m_end_timestamp, json[QString("EndTimestamp")]);
    m_end_timestamp_isSet = !json[QString("EndTimestamp")].isNull() && m_end_timestamp_isValid;
}

QString OAIFragmentSelector_TimestampRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFragmentSelector_TimestampRange::asJsonObject() const {
    QJsonObject obj;
    if (m_start_timestamp_isSet) {
        obj.insert(QString("StartTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    if (m_end_timestamp_isSet) {
        obj.insert(QString("EndTimestamp"), ::OpenAPI::toJsonValue(m_end_timestamp));
    }
    return obj;
}

QDateTime OAIFragmentSelector_TimestampRange::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIFragmentSelector_TimestampRange::setStartTimestamp(const QDateTime &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIFragmentSelector_TimestampRange::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIFragmentSelector_TimestampRange::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

QDateTime OAIFragmentSelector_TimestampRange::getEndTimestamp() const {
    return m_end_timestamp;
}
void OAIFragmentSelector_TimestampRange::setEndTimestamp(const QDateTime &end_timestamp) {
    m_end_timestamp = end_timestamp;
    m_end_timestamp_isSet = true;
}

bool OAIFragmentSelector_TimestampRange::is_end_timestamp_Set() const{
    return m_end_timestamp_isSet;
}

bool OAIFragmentSelector_TimestampRange::is_end_timestamp_Valid() const{
    return m_end_timestamp_isValid;
}

bool OAIFragmentSelector_TimestampRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFragmentSelector_TimestampRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_timestamp_isValid && m_end_timestamp_isValid && true;
}

} // namespace OpenAPI
