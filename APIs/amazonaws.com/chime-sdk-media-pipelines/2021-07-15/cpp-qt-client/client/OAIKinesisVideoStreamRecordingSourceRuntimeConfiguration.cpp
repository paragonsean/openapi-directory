/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration() {
    this->initializeModel();
}

OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::~OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration() {}

void OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::initializeModel() {

    m_streams_isSet = false;
    m_streams_isValid = false;

    m_fragment_selector_isSet = false;
    m_fragment_selector_isValid = false;
}

void OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::fromJsonObject(QJsonObject json) {

    m_streams_isValid = ::OpenAPI::fromJsonValue(m_streams, json[QString("Streams")]);
    m_streams_isSet = !json[QString("Streams")].isNull() && m_streams_isValid;

    m_fragment_selector_isValid = ::OpenAPI::fromJsonValue(m_fragment_selector, json[QString("FragmentSelector")]);
    m_fragment_selector_isSet = !json[QString("FragmentSelector")].isNull() && m_fragment_selector_isValid;
}

QString OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_streams.isSet()) {
        obj.insert(QString("Streams"), ::OpenAPI::toJsonValue(m_streams));
    }
    if (m_fragment_selector.isSet()) {
        obj.insert(QString("FragmentSelector"), ::OpenAPI::toJsonValue(m_fragment_selector));
    }
    return obj;
}

QList OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::getStreams() const {
    return m_streams;
}
void OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::setStreams(const QList &streams) {
    m_streams = streams;
    m_streams_isSet = true;
}

bool OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::is_streams_Set() const{
    return m_streams_isSet;
}

bool OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::is_streams_Valid() const{
    return m_streams_isValid;
}

OAICreateMediaInsightsPipeline_request_KinesisVideoStreamRecordingSourceRuntimeConfiguration_FragmentSelector OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::getFragmentSelector() const {
    return m_fragment_selector;
}
void OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::setFragmentSelector(const OAICreateMediaInsightsPipeline_request_KinesisVideoStreamRecordingSourceRuntimeConfiguration_FragmentSelector &fragment_selector) {
    m_fragment_selector = fragment_selector;
    m_fragment_selector_isSet = true;
}

bool OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::is_fragment_selector_Set() const{
    return m_fragment_selector_isSet;
}

bool OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::is_fragment_selector_Valid() const{
    return m_fragment_selector_isValid;
}

bool OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_streams.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKinesisVideoStreamRecordingSourceRuntimeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_streams_isValid && m_fragment_selector_isValid && true;
}

} // namespace OpenAPI
