/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMediaInsightsPipelineRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMediaInsightsPipelineRequest::OAICreateMediaInsightsPipelineRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMediaInsightsPipelineRequest::OAICreateMediaInsightsPipelineRequest() {
    this->initializeModel();
}

OAICreateMediaInsightsPipelineRequest::~OAICreateMediaInsightsPipelineRequest() {}

void OAICreateMediaInsightsPipelineRequest::initializeModel() {

    m_media_insights_pipeline_configuration_arn_isSet = false;
    m_media_insights_pipeline_configuration_arn_isValid = false;

    m_kinesis_video_stream_source_runtime_configuration_isSet = false;
    m_kinesis_video_stream_source_runtime_configuration_isValid = false;

    m_media_insights_runtime_metadata_isSet = false;
    m_media_insights_runtime_metadata_isValid = false;

    m_kinesis_video_stream_recording_source_runtime_configuration_isSet = false;
    m_kinesis_video_stream_recording_source_runtime_configuration_isValid = false;

    m_s3_recording_sink_runtime_configuration_isSet = false;
    m_s3_recording_sink_runtime_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAICreateMediaInsightsPipelineRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMediaInsightsPipelineRequest::fromJsonObject(QJsonObject json) {

    m_media_insights_pipeline_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_media_insights_pipeline_configuration_arn, json[QString("MediaInsightsPipelineConfigurationArn")]);
    m_media_insights_pipeline_configuration_arn_isSet = !json[QString("MediaInsightsPipelineConfigurationArn")].isNull() && m_media_insights_pipeline_configuration_arn_isValid;

    m_kinesis_video_stream_source_runtime_configuration_isValid = ::OpenAPI::fromJsonValue(m_kinesis_video_stream_source_runtime_configuration, json[QString("KinesisVideoStreamSourceRuntimeConfiguration")]);
    m_kinesis_video_stream_source_runtime_configuration_isSet = !json[QString("KinesisVideoStreamSourceRuntimeConfiguration")].isNull() && m_kinesis_video_stream_source_runtime_configuration_isValid;

    m_media_insights_runtime_metadata_isValid = ::OpenAPI::fromJsonValue(m_media_insights_runtime_metadata, json[QString("MediaInsightsRuntimeMetadata")]);
    m_media_insights_runtime_metadata_isSet = !json[QString("MediaInsightsRuntimeMetadata")].isNull() && m_media_insights_runtime_metadata_isValid;

    m_kinesis_video_stream_recording_source_runtime_configuration_isValid = ::OpenAPI::fromJsonValue(m_kinesis_video_stream_recording_source_runtime_configuration, json[QString("KinesisVideoStreamRecordingSourceRuntimeConfiguration")]);
    m_kinesis_video_stream_recording_source_runtime_configuration_isSet = !json[QString("KinesisVideoStreamRecordingSourceRuntimeConfiguration")].isNull() && m_kinesis_video_stream_recording_source_runtime_configuration_isValid;

    m_s3_recording_sink_runtime_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_recording_sink_runtime_configuration, json[QString("S3RecordingSinkRuntimeConfiguration")]);
    m_s3_recording_sink_runtime_configuration_isSet = !json[QString("S3RecordingSinkRuntimeConfiguration")].isNull() && m_s3_recording_sink_runtime_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAICreateMediaInsightsPipelineRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMediaInsightsPipelineRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_media_insights_pipeline_configuration_arn_isSet) {
        obj.insert(QString("MediaInsightsPipelineConfigurationArn"), ::OpenAPI::toJsonValue(m_media_insights_pipeline_configuration_arn));
    }
    if (m_kinesis_video_stream_source_runtime_configuration.isSet()) {
        obj.insert(QString("KinesisVideoStreamSourceRuntimeConfiguration"), ::OpenAPI::toJsonValue(m_kinesis_video_stream_source_runtime_configuration));
    }
    if (m_media_insights_runtime_metadata.isSet()) {
        obj.insert(QString("MediaInsightsRuntimeMetadata"), ::OpenAPI::toJsonValue(m_media_insights_runtime_metadata));
    }
    if (m_kinesis_video_stream_recording_source_runtime_configuration.isSet()) {
        obj.insert(QString("KinesisVideoStreamRecordingSourceRuntimeConfiguration"), ::OpenAPI::toJsonValue(m_kinesis_video_stream_recording_source_runtime_configuration));
    }
    if (m_s3_recording_sink_runtime_configuration.isSet()) {
        obj.insert(QString("S3RecordingSinkRuntimeConfiguration"), ::OpenAPI::toJsonValue(m_s3_recording_sink_runtime_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QString OAICreateMediaInsightsPipelineRequest::getMediaInsightsPipelineConfigurationArn() const {
    return m_media_insights_pipeline_configuration_arn;
}
void OAICreateMediaInsightsPipelineRequest::setMediaInsightsPipelineConfigurationArn(const QString &media_insights_pipeline_configuration_arn) {
    m_media_insights_pipeline_configuration_arn = media_insights_pipeline_configuration_arn;
    m_media_insights_pipeline_configuration_arn_isSet = true;
}

bool OAICreateMediaInsightsPipelineRequest::is_media_insights_pipeline_configuration_arn_Set() const{
    return m_media_insights_pipeline_configuration_arn_isSet;
}

bool OAICreateMediaInsightsPipelineRequest::is_media_insights_pipeline_configuration_arn_Valid() const{
    return m_media_insights_pipeline_configuration_arn_isValid;
}

OAICreateMediaInsightsPipelineRequest_KinesisVideoStreamSourceRuntimeConfiguration OAICreateMediaInsightsPipelineRequest::getKinesisVideoStreamSourceRuntimeConfiguration() const {
    return m_kinesis_video_stream_source_runtime_configuration;
}
void OAICreateMediaInsightsPipelineRequest::setKinesisVideoStreamSourceRuntimeConfiguration(const OAICreateMediaInsightsPipelineRequest_KinesisVideoStreamSourceRuntimeConfiguration &kinesis_video_stream_source_runtime_configuration) {
    m_kinesis_video_stream_source_runtime_configuration = kinesis_video_stream_source_runtime_configuration;
    m_kinesis_video_stream_source_runtime_configuration_isSet = true;
}

bool OAICreateMediaInsightsPipelineRequest::is_kinesis_video_stream_source_runtime_configuration_Set() const{
    return m_kinesis_video_stream_source_runtime_configuration_isSet;
}

bool OAICreateMediaInsightsPipelineRequest::is_kinesis_video_stream_source_runtime_configuration_Valid() const{
    return m_kinesis_video_stream_source_runtime_configuration_isValid;
}

QMap OAICreateMediaInsightsPipelineRequest::getMediaInsightsRuntimeMetadata() const {
    return m_media_insights_runtime_metadata;
}
void OAICreateMediaInsightsPipelineRequest::setMediaInsightsRuntimeMetadata(const QMap &media_insights_runtime_metadata) {
    m_media_insights_runtime_metadata = media_insights_runtime_metadata;
    m_media_insights_runtime_metadata_isSet = true;
}

bool OAICreateMediaInsightsPipelineRequest::is_media_insights_runtime_metadata_Set() const{
    return m_media_insights_runtime_metadata_isSet;
}

bool OAICreateMediaInsightsPipelineRequest::is_media_insights_runtime_metadata_Valid() const{
    return m_media_insights_runtime_metadata_isValid;
}

OAICreateMediaInsightsPipelineRequest_KinesisVideoStreamRecordingSourceRuntimeConfiguration OAICreateMediaInsightsPipelineRequest::getKinesisVideoStreamRecordingSourceRuntimeConfiguration() const {
    return m_kinesis_video_stream_recording_source_runtime_configuration;
}
void OAICreateMediaInsightsPipelineRequest::setKinesisVideoStreamRecordingSourceRuntimeConfiguration(const OAICreateMediaInsightsPipelineRequest_KinesisVideoStreamRecordingSourceRuntimeConfiguration &kinesis_video_stream_recording_source_runtime_configuration) {
    m_kinesis_video_stream_recording_source_runtime_configuration = kinesis_video_stream_recording_source_runtime_configuration;
    m_kinesis_video_stream_recording_source_runtime_configuration_isSet = true;
}

bool OAICreateMediaInsightsPipelineRequest::is_kinesis_video_stream_recording_source_runtime_configuration_Set() const{
    return m_kinesis_video_stream_recording_source_runtime_configuration_isSet;
}

bool OAICreateMediaInsightsPipelineRequest::is_kinesis_video_stream_recording_source_runtime_configuration_Valid() const{
    return m_kinesis_video_stream_recording_source_runtime_configuration_isValid;
}

OAICreateMediaInsightsPipelineRequest_S3RecordingSinkRuntimeConfiguration OAICreateMediaInsightsPipelineRequest::getS3RecordingSinkRuntimeConfiguration() const {
    return m_s3_recording_sink_runtime_configuration;
}
void OAICreateMediaInsightsPipelineRequest::setS3RecordingSinkRuntimeConfiguration(const OAICreateMediaInsightsPipelineRequest_S3RecordingSinkRuntimeConfiguration &s3_recording_sink_runtime_configuration) {
    m_s3_recording_sink_runtime_configuration = s3_recording_sink_runtime_configuration;
    m_s3_recording_sink_runtime_configuration_isSet = true;
}

bool OAICreateMediaInsightsPipelineRequest::is_s3_recording_sink_runtime_configuration_Set() const{
    return m_s3_recording_sink_runtime_configuration_isSet;
}

bool OAICreateMediaInsightsPipelineRequest::is_s3_recording_sink_runtime_configuration_Valid() const{
    return m_s3_recording_sink_runtime_configuration_isValid;
}

QList OAICreateMediaInsightsPipelineRequest::getTags() const {
    return m_tags;
}
void OAICreateMediaInsightsPipelineRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMediaInsightsPipelineRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMediaInsightsPipelineRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateMediaInsightsPipelineRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateMediaInsightsPipelineRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateMediaInsightsPipelineRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateMediaInsightsPipelineRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAICreateMediaInsightsPipelineRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_insights_pipeline_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_video_stream_source_runtime_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_insights_runtime_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_video_stream_recording_source_runtime_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_recording_sink_runtime_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMediaInsightsPipelineRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_insights_pipeline_configuration_arn_isValid && true;
}

} // namespace OpenAPI
