/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMediaLiveConnectorPipelineResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMediaLiveConnectorPipelineResponse::OAICreateMediaLiveConnectorPipelineResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMediaLiveConnectorPipelineResponse::OAICreateMediaLiveConnectorPipelineResponse() {
    this->initializeModel();
}

OAICreateMediaLiveConnectorPipelineResponse::~OAICreateMediaLiveConnectorPipelineResponse() {}

void OAICreateMediaLiveConnectorPipelineResponse::initializeModel() {

    m_media_live_connector_pipeline_isSet = false;
    m_media_live_connector_pipeline_isValid = false;
}

void OAICreateMediaLiveConnectorPipelineResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMediaLiveConnectorPipelineResponse::fromJsonObject(QJsonObject json) {

    m_media_live_connector_pipeline_isValid = ::OpenAPI::fromJsonValue(m_media_live_connector_pipeline, json[QString("MediaLiveConnectorPipeline")]);
    m_media_live_connector_pipeline_isSet = !json[QString("MediaLiveConnectorPipeline")].isNull() && m_media_live_connector_pipeline_isValid;
}

QString OAICreateMediaLiveConnectorPipelineResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMediaLiveConnectorPipelineResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_live_connector_pipeline.isSet()) {
        obj.insert(QString("MediaLiveConnectorPipeline"), ::OpenAPI::toJsonValue(m_media_live_connector_pipeline));
    }
    return obj;
}

OAICreateMediaLiveConnectorPipelineResponse_MediaLiveConnectorPipeline OAICreateMediaLiveConnectorPipelineResponse::getMediaLiveConnectorPipeline() const {
    return m_media_live_connector_pipeline;
}
void OAICreateMediaLiveConnectorPipelineResponse::setMediaLiveConnectorPipeline(const OAICreateMediaLiveConnectorPipelineResponse_MediaLiveConnectorPipeline &media_live_connector_pipeline) {
    m_media_live_connector_pipeline = media_live_connector_pipeline;
    m_media_live_connector_pipeline_isSet = true;
}

bool OAICreateMediaLiveConnectorPipelineResponse::is_media_live_connector_pipeline_Set() const{
    return m_media_live_connector_pipeline_isSet;
}

bool OAICreateMediaLiveConnectorPipelineResponse::is_media_live_connector_pipeline_Valid() const{
    return m_media_live_connector_pipeline_isValid;
}

bool OAICreateMediaLiveConnectorPipelineResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_live_connector_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMediaLiveConnectorPipelineResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
