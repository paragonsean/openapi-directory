/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChimeSdkMeetingLiveConnectorConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChimeSdkMeetingLiveConnectorConfiguration::OAIChimeSdkMeetingLiveConnectorConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChimeSdkMeetingLiveConnectorConfiguration::OAIChimeSdkMeetingLiveConnectorConfiguration() {
    this->initializeModel();
}

OAIChimeSdkMeetingLiveConnectorConfiguration::~OAIChimeSdkMeetingLiveConnectorConfiguration() {}

void OAIChimeSdkMeetingLiveConnectorConfiguration::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_mux_type_isSet = false;
    m_mux_type_isValid = false;

    m_composited_video_isSet = false;
    m_composited_video_isValid = false;

    m_source_configuration_isSet = false;
    m_source_configuration_isValid = false;
}

void OAIChimeSdkMeetingLiveConnectorConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChimeSdkMeetingLiveConnectorConfiguration::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_mux_type_isValid = ::OpenAPI::fromJsonValue(m_mux_type, json[QString("MuxType")]);
    m_mux_type_isSet = !json[QString("MuxType")].isNull() && m_mux_type_isValid;

    m_composited_video_isValid = ::OpenAPI::fromJsonValue(m_composited_video, json[QString("CompositedVideo")]);
    m_composited_video_isSet = !json[QString("CompositedVideo")].isNull() && m_composited_video_isValid;

    m_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_source_configuration, json[QString("SourceConfiguration")]);
    m_source_configuration_isSet = !json[QString("SourceConfiguration")].isNull() && m_source_configuration_isValid;
}

QString OAIChimeSdkMeetingLiveConnectorConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChimeSdkMeetingLiveConnectorConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_mux_type.isSet()) {
        obj.insert(QString("MuxType"), ::OpenAPI::toJsonValue(m_mux_type));
    }
    if (m_composited_video.isSet()) {
        obj.insert(QString("CompositedVideo"), ::OpenAPI::toJsonValue(m_composited_video));
    }
    if (m_source_configuration.isSet()) {
        obj.insert(QString("SourceConfiguration"), ::OpenAPI::toJsonValue(m_source_configuration));
    }
    return obj;
}

QString OAIChimeSdkMeetingLiveConnectorConfiguration::getArn() const {
    return m_arn;
}
void OAIChimeSdkMeetingLiveConnectorConfiguration::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::is_arn_Valid() const{
    return m_arn_isValid;
}

OAILiveConnectorMuxType OAIChimeSdkMeetingLiveConnectorConfiguration::getMuxType() const {
    return m_mux_type;
}
void OAIChimeSdkMeetingLiveConnectorConfiguration::setMuxType(const OAILiveConnectorMuxType &mux_type) {
    m_mux_type = mux_type;
    m_mux_type_isSet = true;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::is_mux_type_Set() const{
    return m_mux_type_isSet;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::is_mux_type_Valid() const{
    return m_mux_type_isValid;
}

OAIChimeSdkMeetingLiveConnectorConfiguration_CompositedVideo OAIChimeSdkMeetingLiveConnectorConfiguration::getCompositedVideo() const {
    return m_composited_video;
}
void OAIChimeSdkMeetingLiveConnectorConfiguration::setCompositedVideo(const OAIChimeSdkMeetingLiveConnectorConfiguration_CompositedVideo &composited_video) {
    m_composited_video = composited_video;
    m_composited_video_isSet = true;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::is_composited_video_Set() const{
    return m_composited_video_isSet;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::is_composited_video_Valid() const{
    return m_composited_video_isValid;
}

OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration OAIChimeSdkMeetingLiveConnectorConfiguration::getSourceConfiguration() const {
    return m_source_configuration;
}
void OAIChimeSdkMeetingLiveConnectorConfiguration::setSourceConfiguration(const OAIChimeSdkMeetingLiveConnectorConfiguration_SourceConfiguration &source_configuration) {
    m_source_configuration = source_configuration;
    m_source_configuration_isSet = true;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::is_source_configuration_Set() const{
    return m_source_configuration_isSet;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::is_source_configuration_Valid() const{
    return m_source_configuration_isValid;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mux_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_composited_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChimeSdkMeetingLiveConnectorConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_mux_type_isValid && true;
}

} // namespace OpenAPI
