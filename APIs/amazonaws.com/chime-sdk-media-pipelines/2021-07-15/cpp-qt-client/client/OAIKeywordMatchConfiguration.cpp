/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeywordMatchConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeywordMatchConfiguration::OAIKeywordMatchConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeywordMatchConfiguration::OAIKeywordMatchConfiguration() {
    this->initializeModel();
}

OAIKeywordMatchConfiguration::~OAIKeywordMatchConfiguration() {}

void OAIKeywordMatchConfiguration::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_negate_isSet = false;
    m_negate_isValid = false;
}

void OAIKeywordMatchConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeywordMatchConfiguration::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("Keywords")]);
    m_keywords_isSet = !json[QString("Keywords")].isNull() && m_keywords_isValid;

    m_negate_isValid = ::OpenAPI::fromJsonValue(m_negate, json[QString("Negate")]);
    m_negate_isSet = !json[QString("Negate")].isNull() && m_negate_isValid;
}

QString OAIKeywordMatchConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeywordMatchConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_keywords.isSet()) {
        obj.insert(QString("Keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_negate_isSet) {
        obj.insert(QString("Negate"), ::OpenAPI::toJsonValue(m_negate));
    }
    return obj;
}

QString OAIKeywordMatchConfiguration::getRuleName() const {
    return m_rule_name;
}
void OAIKeywordMatchConfiguration::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIKeywordMatchConfiguration::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIKeywordMatchConfiguration::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QList OAIKeywordMatchConfiguration::getKeywords() const {
    return m_keywords;
}
void OAIKeywordMatchConfiguration::setKeywords(const QList &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIKeywordMatchConfiguration::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIKeywordMatchConfiguration::is_keywords_Valid() const{
    return m_keywords_isValid;
}

bool OAIKeywordMatchConfiguration::getNegate() const {
    return m_negate;
}
void OAIKeywordMatchConfiguration::setNegate(const bool &negate) {
    m_negate = negate;
    m_negate_isSet = true;
}

bool OAIKeywordMatchConfiguration::is_negate_Set() const{
    return m_negate_isSet;
}

bool OAIKeywordMatchConfiguration::is_negate_Valid() const{
    return m_negate_isValid;
}

bool OAIKeywordMatchConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeywordMatchConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_name_isValid && m_keywords_isValid && true;
}

} // namespace OpenAPI
