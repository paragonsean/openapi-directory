/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMediaCapturePipelineResponse_MediaCapturePipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::OAIGetMediaCapturePipelineResponse_MediaCapturePipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::OAIGetMediaCapturePipelineResponse_MediaCapturePipeline() {
    this->initializeModel();
}

OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::~OAIGetMediaCapturePipelineResponse_MediaCapturePipeline() {}

void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::initializeModel() {

    m_media_pipeline_id_isSet = false;
    m_media_pipeline_id_isValid = false;

    m_media_pipeline_arn_isSet = false;
    m_media_pipeline_arn_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sink_type_isSet = false;
    m_sink_type_isValid = false;

    m_sink_arn_isSet = false;
    m_sink_arn_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;

    m_chime_sdk_meeting_configuration_isSet = false;
    m_chime_sdk_meeting_configuration_isValid = false;
}

void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::fromJsonObject(QJsonObject json) {

    m_media_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_id, json[QString("MediaPipelineId")]);
    m_media_pipeline_id_isSet = !json[QString("MediaPipelineId")].isNull() && m_media_pipeline_id_isValid;

    m_media_pipeline_arn_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_arn, json[QString("MediaPipelineArn")]);
    m_media_pipeline_arn_isSet = !json[QString("MediaPipelineArn")].isNull() && m_media_pipeline_arn_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sink_type_isValid = ::OpenAPI::fromJsonValue(m_sink_type, json[QString("SinkType")]);
    m_sink_type_isSet = !json[QString("SinkType")].isNull() && m_sink_type_isValid;

    m_sink_arn_isValid = ::OpenAPI::fromJsonValue(m_sink_arn, json[QString("SinkArn")]);
    m_sink_arn_isSet = !json[QString("SinkArn")].isNull() && m_sink_arn_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("UpdatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("UpdatedTimestamp")].isNull() && m_updated_timestamp_isValid;

    m_chime_sdk_meeting_configuration_isValid = ::OpenAPI::fromJsonValue(m_chime_sdk_meeting_configuration, json[QString("ChimeSdkMeetingConfiguration")]);
    m_chime_sdk_meeting_configuration_isSet = !json[QString("ChimeSdkMeetingConfiguration")].isNull() && m_chime_sdk_meeting_configuration_isValid;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_media_pipeline_id_isSet) {
        obj.insert(QString("MediaPipelineId"), ::OpenAPI::toJsonValue(m_media_pipeline_id));
    }
    if (m_media_pipeline_arn_isSet) {
        obj.insert(QString("MediaPipelineArn"), ::OpenAPI::toJsonValue(m_media_pipeline_arn));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sink_type.isSet()) {
        obj.insert(QString("SinkType"), ::OpenAPI::toJsonValue(m_sink_type));
    }
    if (m_sink_arn_isSet) {
        obj.insert(QString("SinkArn"), ::OpenAPI::toJsonValue(m_sink_arn));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("UpdatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    if (m_chime_sdk_meeting_configuration.isSet()) {
        obj.insert(QString("ChimeSdkMeetingConfiguration"), ::OpenAPI::toJsonValue(m_chime_sdk_meeting_configuration));
    }
    return obj;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getMediaPipelineId() const {
    return m_media_pipeline_id;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setMediaPipelineId(const QString &media_pipeline_id) {
    m_media_pipeline_id = media_pipeline_id;
    m_media_pipeline_id_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_media_pipeline_id_Set() const{
    return m_media_pipeline_id_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_media_pipeline_id_Valid() const{
    return m_media_pipeline_id_isValid;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getMediaPipelineArn() const {
    return m_media_pipeline_arn;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setMediaPipelineArn(const QString &media_pipeline_arn) {
    m_media_pipeline_arn = media_pipeline_arn;
    m_media_pipeline_arn_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_media_pipeline_arn_Set() const{
    return m_media_pipeline_arn_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_media_pipeline_arn_Valid() const{
    return m_media_pipeline_arn_isValid;
}

OAIMediaPipelineSourceType OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getSourceType() const {
    return m_source_type;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setSourceType(const OAIMediaPipelineSourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getSourceArn() const {
    return m_source_arn;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

OAIMediaPipelineStatus OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getStatus() const {
    return m_status;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setStatus(const OAIMediaPipelineStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_status_Valid() const{
    return m_status_isValid;
}

OAIMediaPipelineSinkType OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getSinkType() const {
    return m_sink_type;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setSinkType(const OAIMediaPipelineSinkType &sink_type) {
    m_sink_type = sink_type;
    m_sink_type_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_sink_type_Set() const{
    return m_sink_type_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_sink_type_Valid() const{
    return m_sink_type_isValid;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getSinkArn() const {
    return m_sink_arn;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setSinkArn(const QString &sink_arn) {
    m_sink_arn = sink_arn;
    m_sink_arn_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_sink_arn_Set() const{
    return m_sink_arn_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_sink_arn_Valid() const{
    return m_sink_arn_isValid;
}

QDateTime OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

OAICreateMediaCapturePipelineRequest_ChimeSdkMeetingConfiguration OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getChimeSdkMeetingConfiguration() const {
    return m_chime_sdk_meeting_configuration;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setChimeSdkMeetingConfiguration(const OAICreateMediaCapturePipelineRequest_ChimeSdkMeetingConfiguration &chime_sdk_meeting_configuration) {
    m_chime_sdk_meeting_configuration = chime_sdk_meeting_configuration;
    m_chime_sdk_meeting_configuration_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_chime_sdk_meeting_configuration_Set() const{
    return m_chime_sdk_meeting_configuration_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_chime_sdk_meeting_configuration_Valid() const{
    return m_chime_sdk_meeting_configuration_isValid;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_pipeline_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chime_sdk_meeting_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
