/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnsTopicSinkConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnsTopicSinkConfiguration::OAISnsTopicSinkConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnsTopicSinkConfiguration::OAISnsTopicSinkConfiguration() {
    this->initializeModel();
}

OAISnsTopicSinkConfiguration::~OAISnsTopicSinkConfiguration() {}

void OAISnsTopicSinkConfiguration::initializeModel() {

    m_insights_target_isSet = false;
    m_insights_target_isValid = false;
}

void OAISnsTopicSinkConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnsTopicSinkConfiguration::fromJsonObject(QJsonObject json) {

    m_insights_target_isValid = ::OpenAPI::fromJsonValue(m_insights_target, json[QString("InsightsTarget")]);
    m_insights_target_isSet = !json[QString("InsightsTarget")].isNull() && m_insights_target_isValid;
}

QString OAISnsTopicSinkConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnsTopicSinkConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_insights_target_isSet) {
        obj.insert(QString("InsightsTarget"), ::OpenAPI::toJsonValue(m_insights_target));
    }
    return obj;
}

QString OAISnsTopicSinkConfiguration::getInsightsTarget() const {
    return m_insights_target;
}
void OAISnsTopicSinkConfiguration::setInsightsTarget(const QString &insights_target) {
    m_insights_target = insights_target;
    m_insights_target_isSet = true;
}

bool OAISnsTopicSinkConfiguration::is_insights_target_Set() const{
    return m_insights_target_isSet;
}

bool OAISnsTopicSinkConfiguration::is_insights_target_Valid() const{
    return m_insights_target_isValid;
}

bool OAISnsTopicSinkConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insights_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnsTopicSinkConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
