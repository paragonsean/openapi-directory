/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMediaCapturePipelineRequest from '../model/CreateMediaCapturePipelineRequest';
import CreateMediaCapturePipelineResponse from '../model/CreateMediaCapturePipelineResponse';
import CreateMediaConcatenationPipelineRequest from '../model/CreateMediaConcatenationPipelineRequest';
import CreateMediaConcatenationPipelineResponse from '../model/CreateMediaConcatenationPipelineResponse';
import CreateMediaInsightsPipelineConfigurationRequest from '../model/CreateMediaInsightsPipelineConfigurationRequest';
import CreateMediaInsightsPipelineConfigurationResponse from '../model/CreateMediaInsightsPipelineConfigurationResponse';
import CreateMediaInsightsPipelineRequest from '../model/CreateMediaInsightsPipelineRequest';
import CreateMediaInsightsPipelineResponse from '../model/CreateMediaInsightsPipelineResponse';
import CreateMediaLiveConnectorPipelineRequest from '../model/CreateMediaLiveConnectorPipelineRequest';
import CreateMediaLiveConnectorPipelineResponse from '../model/CreateMediaLiveConnectorPipelineResponse';
import GetMediaCapturePipelineResponse from '../model/GetMediaCapturePipelineResponse';
import GetMediaInsightsPipelineConfigurationResponse from '../model/GetMediaInsightsPipelineConfigurationResponse';
import GetMediaPipelineResponse from '../model/GetMediaPipelineResponse';
import ListMediaCapturePipelinesResponse from '../model/ListMediaCapturePipelinesResponse';
import ListMediaInsightsPipelineConfigurationsResponse from '../model/ListMediaInsightsPipelineConfigurationsResponse';
import ListMediaPipelinesResponse from '../model/ListMediaPipelinesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateMediaInsightsPipelineConfigurationRequest from '../model/UpdateMediaInsightsPipelineConfigurationRequest';
import UpdateMediaInsightsPipelineConfigurationResponse from '../model/UpdateMediaInsightsPipelineConfigurationResponse';
import UpdateMediaInsightsPipelineStatusRequest from '../model/UpdateMediaInsightsPipelineStatusRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-07-15
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMediaCapturePipeline operation.
     * @callback module:api/DefaultApi~createMediaCapturePipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMediaCapturePipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a media pipeline.
     * @param {module:model/CreateMediaCapturePipelineRequest} createMediaCapturePipelineRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMediaCapturePipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMediaCapturePipelineResponse}
     */
    createMediaCapturePipeline(createMediaCapturePipelineRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMediaCapturePipelineRequest;
      // verify the required parameter 'createMediaCapturePipelineRequest' is set
      if (createMediaCapturePipelineRequest === undefined || createMediaCapturePipelineRequest === null) {
        throw new Error("Missing the required parameter 'createMediaCapturePipelineRequest' when calling createMediaCapturePipeline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMediaCapturePipelineResponse;
      return this.apiClient.callApi(
        '/sdk-media-capture-pipelines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMediaConcatenationPipeline operation.
     * @callback module:api/DefaultApi~createMediaConcatenationPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMediaConcatenationPipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a media concatenation pipeline.
     * @param {module:model/CreateMediaConcatenationPipelineRequest} createMediaConcatenationPipelineRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMediaConcatenationPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMediaConcatenationPipelineResponse}
     */
    createMediaConcatenationPipeline(createMediaConcatenationPipelineRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMediaConcatenationPipelineRequest;
      // verify the required parameter 'createMediaConcatenationPipelineRequest' is set
      if (createMediaConcatenationPipelineRequest === undefined || createMediaConcatenationPipelineRequest === null) {
        throw new Error("Missing the required parameter 'createMediaConcatenationPipelineRequest' when calling createMediaConcatenationPipeline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMediaConcatenationPipelineResponse;
      return this.apiClient.callApi(
        '/sdk-media-concatenation-pipelines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMediaInsightsPipeline operation.
     * @callback module:api/DefaultApi~createMediaInsightsPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMediaInsightsPipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a media insights pipeline.
     * @param {module:model/CreateMediaInsightsPipelineRequest} createMediaInsightsPipelineRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMediaInsightsPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMediaInsightsPipelineResponse}
     */
    createMediaInsightsPipeline(createMediaInsightsPipelineRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMediaInsightsPipelineRequest;
      // verify the required parameter 'createMediaInsightsPipelineRequest' is set
      if (createMediaInsightsPipelineRequest === undefined || createMediaInsightsPipelineRequest === null) {
        throw new Error("Missing the required parameter 'createMediaInsightsPipelineRequest' when calling createMediaInsightsPipeline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMediaInsightsPipelineResponse;
      return this.apiClient.callApi(
        '/media-insights-pipelines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMediaInsightsPipelineConfiguration operation.
     * @callback module:api/DefaultApi~createMediaInsightsPipelineConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMediaInsightsPipelineConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A structure that contains the static configurations for a media insights pipeline.
     * @param {module:model/CreateMediaInsightsPipelineConfigurationRequest} createMediaInsightsPipelineConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMediaInsightsPipelineConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMediaInsightsPipelineConfigurationResponse}
     */
    createMediaInsightsPipelineConfiguration(createMediaInsightsPipelineConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMediaInsightsPipelineConfigurationRequest;
      // verify the required parameter 'createMediaInsightsPipelineConfigurationRequest' is set
      if (createMediaInsightsPipelineConfigurationRequest === undefined || createMediaInsightsPipelineConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createMediaInsightsPipelineConfigurationRequest' when calling createMediaInsightsPipelineConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMediaInsightsPipelineConfigurationResponse;
      return this.apiClient.callApi(
        '/media-insights-pipeline-configurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMediaLiveConnectorPipeline operation.
     * @callback module:api/DefaultApi~createMediaLiveConnectorPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMediaLiveConnectorPipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a media live connector pipeline in an Amazon Chime SDK meeting.
     * @param {module:model/CreateMediaLiveConnectorPipelineRequest} createMediaLiveConnectorPipelineRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMediaLiveConnectorPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMediaLiveConnectorPipelineResponse}
     */
    createMediaLiveConnectorPipeline(createMediaLiveConnectorPipelineRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMediaLiveConnectorPipelineRequest;
      // verify the required parameter 'createMediaLiveConnectorPipelineRequest' is set
      if (createMediaLiveConnectorPipelineRequest === undefined || createMediaLiveConnectorPipelineRequest === null) {
        throw new Error("Missing the required parameter 'createMediaLiveConnectorPipelineRequest' when calling createMediaLiveConnectorPipeline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMediaLiveConnectorPipelineResponse;
      return this.apiClient.callApi(
        '/sdk-media-live-connector-pipelines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMediaCapturePipeline operation.
     * @callback module:api/DefaultApi~deleteMediaCapturePipelineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the media pipeline.
     * @param {String} mediaPipelineId The ID of the media pipeline being deleted. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMediaCapturePipelineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMediaCapturePipeline(mediaPipelineId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mediaPipelineId' is set
      if (mediaPipelineId === undefined || mediaPipelineId === null) {
        throw new Error("Missing the required parameter 'mediaPipelineId' when calling deleteMediaCapturePipeline");
      }

      let pathParams = {
        'mediaPipelineId': mediaPipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sdk-media-capture-pipelines/{mediaPipelineId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMediaInsightsPipelineConfiguration operation.
     * @callback module:api/DefaultApi~deleteMediaInsightsPipelineConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified configuration settings.
     * @param {String} identifier The unique identifier of the resource to be deleted. Valid values include the name and ARN of the media insights pipeline configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMediaInsightsPipelineConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMediaInsightsPipelineConfiguration(identifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling deleteMediaInsightsPipelineConfiguration");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/media-insights-pipeline-configurations/{identifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMediaPipeline operation.
     * @callback module:api/DefaultApi~deleteMediaPipelineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the media pipeline.
     * @param {String} mediaPipelineId The ID of the media pipeline to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMediaPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMediaPipeline(mediaPipelineId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mediaPipelineId' is set
      if (mediaPipelineId === undefined || mediaPipelineId === null) {
        throw new Error("Missing the required parameter 'mediaPipelineId' when calling deleteMediaPipeline");
      }

      let pathParams = {
        'mediaPipelineId': mediaPipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sdk-media-pipelines/{mediaPipelineId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaCapturePipeline operation.
     * @callback module:api/DefaultApi~getMediaCapturePipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMediaCapturePipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing media pipeline.
     * @param {String} mediaPipelineId The ID of the pipeline that you want to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMediaCapturePipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMediaCapturePipelineResponse}
     */
    getMediaCapturePipeline(mediaPipelineId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mediaPipelineId' is set
      if (mediaPipelineId === undefined || mediaPipelineId === null) {
        throw new Error("Missing the required parameter 'mediaPipelineId' when calling getMediaCapturePipeline");
      }

      let pathParams = {
        'mediaPipelineId': mediaPipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMediaCapturePipelineResponse;
      return this.apiClient.callApi(
        '/sdk-media-capture-pipelines/{mediaPipelineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaInsightsPipelineConfiguration operation.
     * @callback module:api/DefaultApi~getMediaInsightsPipelineConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMediaInsightsPipelineConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration settings for a media insights pipeline.
     * @param {String} identifier The unique identifier of the requested resource. Valid values include the name and ARN of the media insights pipeline configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMediaInsightsPipelineConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMediaInsightsPipelineConfigurationResponse}
     */
    getMediaInsightsPipelineConfiguration(identifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getMediaInsightsPipelineConfiguration");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMediaInsightsPipelineConfigurationResponse;
      return this.apiClient.callApi(
        '/media-insights-pipeline-configurations/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaPipeline operation.
     * @callback module:api/DefaultApi~getMediaPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMediaPipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing media pipeline.
     * @param {String} mediaPipelineId The ID of the pipeline that you want to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMediaPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMediaPipelineResponse}
     */
    getMediaPipeline(mediaPipelineId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mediaPipelineId' is set
      if (mediaPipelineId === undefined || mediaPipelineId === null) {
        throw new Error("Missing the required parameter 'mediaPipelineId' when calling getMediaPipeline");
      }

      let pathParams = {
        'mediaPipelineId': mediaPipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMediaPipelineResponse;
      return this.apiClient.callApi(
        '/sdk-media-pipelines/{mediaPipelineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMediaCapturePipelines operation.
     * @callback module:api/DefaultApi~listMediaCapturePipelinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMediaCapturePipelinesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of media pipelines.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token used to retrieve the next page of results.
     * @param {Number} [maxResults] The maximum number of results to return in a single call. Valid Range: 1 - 99.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listMediaCapturePipelinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMediaCapturePipelinesResponse}
     */
    listMediaCapturePipelines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMediaCapturePipelinesResponse;
      return this.apiClient.callApi(
        '/sdk-media-capture-pipelines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMediaInsightsPipelineConfigurations operation.
     * @callback module:api/DefaultApi~listMediaInsightsPipelineConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMediaInsightsPipelineConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the available media insights pipeline configurations.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token used to return the next page of results.
     * @param {Number} [maxResults] The maximum number of results to return in a single call.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listMediaInsightsPipelineConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMediaInsightsPipelineConfigurationsResponse}
     */
    listMediaInsightsPipelineConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMediaInsightsPipelineConfigurationsResponse;
      return this.apiClient.callApi(
        '/media-insights-pipeline-configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMediaPipelines operation.
     * @callback module:api/DefaultApi~listMediaPipelinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMediaPipelinesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of media pipelines.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token used to retrieve the next page of results.
     * @param {Number} [maxResults] The maximum number of results to return in a single call. Valid Range: 1 - 99.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listMediaPipelinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMediaPipelinesResponse}
     */
    listMediaPipelines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMediaPipelinesResponse;
      return this.apiClient.callApi(
        '/sdk-media-pipelines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags available for a media pipeline.
     * @param {String} arn The ARN of the media pipeline associated with any tags. The ARN consists of the pipeline's region, resource ID, and pipeline ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'arn': arn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags#arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The ARN of the media pipeline that you want to tag. Consists of the pipeline's endpoint region, resource ID, and pipeline ID.
     * @param {module:model/String} operation 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(operation, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags#operation=tag-resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes any tags from a media pipeline.
     * @param {module:model/String} operation 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(operation, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags#operation=untag-resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMediaInsightsPipelineConfiguration operation.
     * @callback module:api/DefaultApi~updateMediaInsightsPipelineConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMediaInsightsPipelineConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the media insights pipeline's configuration settings.
     * @param {String} identifier The unique identifier for the resource to be updated. Valid values include the name and ARN of the media insights pipeline configuration.
     * @param {module:model/UpdateMediaInsightsPipelineConfigurationRequest} updateMediaInsightsPipelineConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMediaInsightsPipelineConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMediaInsightsPipelineConfigurationResponse}
     */
    updateMediaInsightsPipelineConfiguration(identifier, updateMediaInsightsPipelineConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMediaInsightsPipelineConfigurationRequest;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling updateMediaInsightsPipelineConfiguration");
      }
      // verify the required parameter 'updateMediaInsightsPipelineConfigurationRequest' is set
      if (updateMediaInsightsPipelineConfigurationRequest === undefined || updateMediaInsightsPipelineConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateMediaInsightsPipelineConfigurationRequest' when calling updateMediaInsightsPipelineConfiguration");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMediaInsightsPipelineConfigurationResponse;
      return this.apiClient.callApi(
        '/media-insights-pipeline-configurations/{identifier}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMediaInsightsPipelineStatus operation.
     * @callback module:api/DefaultApi~updateMediaInsightsPipelineStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the status of a media insights pipeline.
     * @param {String} identifier The unique identifier of the resource to be updated. Valid values include the ID and ARN of the media insights pipeline.
     * @param {module:model/UpdateMediaInsightsPipelineStatusRequest} updateMediaInsightsPipelineStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMediaInsightsPipelineStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMediaInsightsPipelineStatus(identifier, updateMediaInsightsPipelineStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMediaInsightsPipelineStatusRequest;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling updateMediaInsightsPipelineStatus");
      }
      // verify the required parameter 'updateMediaInsightsPipelineStatusRequest' is set
      if (updateMediaInsightsPipelineStatusRequest === undefined || updateMediaInsightsPipelineStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateMediaInsightsPipelineStatusRequest' when calling updateMediaInsightsPipelineStatus");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/media-insights-pipeline-status/{identifier}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
