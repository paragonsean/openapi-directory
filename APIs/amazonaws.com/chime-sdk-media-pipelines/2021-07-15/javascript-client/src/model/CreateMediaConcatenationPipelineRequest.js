/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConcatenationSink from './ConcatenationSink';
import ConcatenationSource from './ConcatenationSource';
import Tag from './Tag';

/**
 * The CreateMediaConcatenationPipelineRequest model module.
 * @module model/CreateMediaConcatenationPipelineRequest
 * @version 2021-07-15
 */
class CreateMediaConcatenationPipelineRequest {
    /**
     * Constructs a new <code>CreateMediaConcatenationPipelineRequest</code>.
     * @alias module:model/CreateMediaConcatenationPipelineRequest
     * @param sources {Array.<module:model/ConcatenationSource>} An object that specifies the sources for the media concatenation pipeline.
     * @param sinks {Array.<module:model/ConcatenationSink>} An object that specifies the data sinks for the media concatenation pipeline.
     */
    constructor(sources, sinks) { 
        
        CreateMediaConcatenationPipelineRequest.initialize(this, sources, sinks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sources, sinks) { 
        obj['Sources'] = sources;
        obj['Sinks'] = sinks;
    }

    /**
     * Constructs a <code>CreateMediaConcatenationPipelineRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateMediaConcatenationPipelineRequest} obj Optional instance to populate.
     * @return {module:model/CreateMediaConcatenationPipelineRequest} The populated <code>CreateMediaConcatenationPipelineRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateMediaConcatenationPipelineRequest();

            if (data.hasOwnProperty('Sources')) {
                obj['Sources'] = ApiClient.convertToType(data['Sources'], [ConcatenationSource]);
            }
            if (data.hasOwnProperty('Sinks')) {
                obj['Sinks'] = ApiClient.convertToType(data['Sinks'], [ConcatenationSink]);
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateMediaConcatenationPipelineRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateMediaConcatenationPipelineRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateMediaConcatenationPipelineRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Sources'])) {
                throw new Error("Expected the field `Sources` to be an array in the JSON data but got " + data['Sources']);
            }
            // validate the optional field `Sources` (array)
            for (const item of data['Sources']) {
                ConcatenationSource.validateJSON(item);
            };
        }
        if (data['Sinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Sinks'])) {
                throw new Error("Expected the field `Sinks` to be an array in the JSON data but got " + data['Sinks']);
            }
            // validate the optional field `Sinks` (array)
            for (const item of data['Sinks']) {
                ConcatenationSink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ClientRequestToken'] && !(typeof data['ClientRequestToken'] === 'string' || data['ClientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got " + data['ClientRequestToken']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}

CreateMediaConcatenationPipelineRequest.RequiredProperties = ["Sources", "Sinks"];

/**
 * An object that specifies the sources for the media concatenation pipeline.
 * @member {Array.<module:model/ConcatenationSource>} Sources
 */
CreateMediaConcatenationPipelineRequest.prototype['Sources'] = undefined;

/**
 * An object that specifies the data sinks for the media concatenation pipeline.
 * @member {Array.<module:model/ConcatenationSink>} Sinks
 */
CreateMediaConcatenationPipelineRequest.prototype['Sinks'] = undefined;

/**
 * The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.
 * @member {String} ClientRequestToken
 */
CreateMediaConcatenationPipelineRequest.prototype['ClientRequestToken'] = undefined;

/**
 * The tags associated with the media concatenation pipeline.
 * @member {Array.<module:model/Tag>} Tags
 */
CreateMediaConcatenationPipelineRequest.prototype['Tags'] = undefined;






export default CreateMediaConcatenationPipelineRequest;

