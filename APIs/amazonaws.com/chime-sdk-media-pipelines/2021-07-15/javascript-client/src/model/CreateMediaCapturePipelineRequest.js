/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration from './CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration';
import Tag from './Tag';

/**
 * The CreateMediaCapturePipelineRequest model module.
 * @module model/CreateMediaCapturePipelineRequest
 * @version 2021-07-15
 */
class CreateMediaCapturePipelineRequest {
    /**
     * Constructs a new <code>CreateMediaCapturePipelineRequest</code>.
     * @alias module:model/CreateMediaCapturePipelineRequest
     * @param sourceType {module:model/CreateMediaCapturePipelineRequest.SourceTypeEnum} Source type from which the media artifacts are captured. A Chime SDK Meeting is the only supported source.
     * @param sourceArn {String} ARN of the source from which the media artifacts are captured.
     * @param sinkType {module:model/CreateMediaCapturePipelineRequest.SinkTypeEnum} Destination type to which the media artifacts are saved. You must use an S3 bucket.
     * @param sinkArn {String} The ARN of the sink type.
     */
    constructor(sourceType, sourceArn, sinkType, sinkArn) { 
        
        CreateMediaCapturePipelineRequest.initialize(this, sourceType, sourceArn, sinkType, sinkArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sourceType, sourceArn, sinkType, sinkArn) { 
        obj['SourceType'] = sourceType;
        obj['SourceArn'] = sourceArn;
        obj['SinkType'] = sinkType;
        obj['SinkArn'] = sinkArn;
    }

    /**
     * Constructs a <code>CreateMediaCapturePipelineRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateMediaCapturePipelineRequest} obj Optional instance to populate.
     * @return {module:model/CreateMediaCapturePipelineRequest} The populated <code>CreateMediaCapturePipelineRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateMediaCapturePipelineRequest();

            if (data.hasOwnProperty('SourceType')) {
                obj['SourceType'] = ApiClient.convertToType(data['SourceType'], 'String');
            }
            if (data.hasOwnProperty('SourceArn')) {
                obj['SourceArn'] = ApiClient.convertToType(data['SourceArn'], 'String');
            }
            if (data.hasOwnProperty('SinkType')) {
                obj['SinkType'] = ApiClient.convertToType(data['SinkType'], 'String');
            }
            if (data.hasOwnProperty('SinkArn')) {
                obj['SinkArn'] = ApiClient.convertToType(data['SinkArn'], 'String');
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('ChimeSdkMeetingConfiguration')) {
                obj['ChimeSdkMeetingConfiguration'] = CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration.constructFromObject(data['ChimeSdkMeetingConfiguration']);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateMediaCapturePipelineRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateMediaCapturePipelineRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateMediaCapturePipelineRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['SourceType'] && !(typeof data['SourceType'] === 'string' || data['SourceType'] instanceof String)) {
            throw new Error("Expected the field `SourceType` to be a primitive type in the JSON string but got " + data['SourceType']);
        }
        // ensure the json data is a string
        if (data['SourceArn'] && !(typeof data['SourceArn'] === 'string' || data['SourceArn'] instanceof String)) {
            throw new Error("Expected the field `SourceArn` to be a primitive type in the JSON string but got " + data['SourceArn']);
        }
        // ensure the json data is a string
        if (data['SinkType'] && !(typeof data['SinkType'] === 'string' || data['SinkType'] instanceof String)) {
            throw new Error("Expected the field `SinkType` to be a primitive type in the JSON string but got " + data['SinkType']);
        }
        // ensure the json data is a string
        if (data['SinkArn'] && !(typeof data['SinkArn'] === 'string' || data['SinkArn'] instanceof String)) {
            throw new Error("Expected the field `SinkArn` to be a primitive type in the JSON string but got " + data['SinkArn']);
        }
        // ensure the json data is a string
        if (data['ClientRequestToken'] && !(typeof data['ClientRequestToken'] === 'string' || data['ClientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got " + data['ClientRequestToken']);
        }
        // validate the optional field `ChimeSdkMeetingConfiguration`
        if (data['ChimeSdkMeetingConfiguration']) { // data not null
          CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration.validateJSON(data['ChimeSdkMeetingConfiguration']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}

CreateMediaCapturePipelineRequest.RequiredProperties = ["SourceType", "SourceArn", "SinkType", "SinkArn"];

/**
 * Source type from which the media artifacts are captured. A Chime SDK Meeting is the only supported source.
 * @member {module:model/CreateMediaCapturePipelineRequest.SourceTypeEnum} SourceType
 */
CreateMediaCapturePipelineRequest.prototype['SourceType'] = undefined;

/**
 * ARN of the source from which the media artifacts are captured.
 * @member {String} SourceArn
 */
CreateMediaCapturePipelineRequest.prototype['SourceArn'] = undefined;

/**
 * Destination type to which the media artifacts are saved. You must use an S3 bucket.
 * @member {module:model/CreateMediaCapturePipelineRequest.SinkTypeEnum} SinkType
 */
CreateMediaCapturePipelineRequest.prototype['SinkType'] = undefined;

/**
 * The ARN of the sink type.
 * @member {String} SinkArn
 */
CreateMediaCapturePipelineRequest.prototype['SinkArn'] = undefined;

/**
 * The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media pipeline request.
 * @member {String} ClientRequestToken
 */
CreateMediaCapturePipelineRequest.prototype['ClientRequestToken'] = undefined;

/**
 * @member {module:model/CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration} ChimeSdkMeetingConfiguration
 */
CreateMediaCapturePipelineRequest.prototype['ChimeSdkMeetingConfiguration'] = undefined;

/**
 * The tag key-value pairs.
 * @member {Array.<module:model/Tag>} Tags
 */
CreateMediaCapturePipelineRequest.prototype['Tags'] = undefined;





/**
 * Allowed values for the <code>SourceType</code> property.
 * @enum {String}
 * @readonly
 */
CreateMediaCapturePipelineRequest['SourceTypeEnum'] = {

    /**
     * value: "ChimeSdkMeeting"
     * @const
     */
    "ChimeSdkMeeting": "ChimeSdkMeeting"
};


/**
 * Allowed values for the <code>SinkType</code> property.
 * @enum {String}
 * @readonly
 */
CreateMediaCapturePipelineRequest['SinkTypeEnum'] = {

    /**
     * value: "S3Bucket"
     * @const
     */
    "S3Bucket": "S3Bucket"
};



export default CreateMediaCapturePipelineRequest;

