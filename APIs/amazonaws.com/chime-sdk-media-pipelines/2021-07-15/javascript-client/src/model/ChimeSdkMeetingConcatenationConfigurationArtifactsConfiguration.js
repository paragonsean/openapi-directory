/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArtifactsConcatenationConfiguration from './ArtifactsConcatenationConfiguration';
import ArtifactsConcatenationConfigurationAudio from './ArtifactsConcatenationConfigurationAudio';
import ArtifactsConcatenationConfigurationCompositedVideo from './ArtifactsConcatenationConfigurationCompositedVideo';
import ArtifactsConcatenationConfigurationContent from './ArtifactsConcatenationConfigurationContent';
import ArtifactsConcatenationConfigurationDataChannel from './ArtifactsConcatenationConfigurationDataChannel';
import ArtifactsConcatenationConfigurationMeetingEvents from './ArtifactsConcatenationConfigurationMeetingEvents';
import ArtifactsConcatenationConfigurationTranscriptionMessages from './ArtifactsConcatenationConfigurationTranscriptionMessages';
import ArtifactsConcatenationConfigurationVideo from './ArtifactsConcatenationConfigurationVideo';

/**
 * The ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration model module.
 * @module model/ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration
 * @version 2021-07-15
 */
class ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration {
    /**
     * Constructs a new <code>ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration</code>.
     * @alias module:model/ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration
     * @implements module:model/ArtifactsConcatenationConfiguration
     * @param audio {module:model/ArtifactsConcatenationConfigurationAudio} 
     * @param video {module:model/ArtifactsConcatenationConfigurationVideo} 
     * @param content {module:model/ArtifactsConcatenationConfigurationContent} 
     * @param dataChannel {module:model/ArtifactsConcatenationConfigurationDataChannel} 
     * @param transcriptionMessages {module:model/ArtifactsConcatenationConfigurationTranscriptionMessages} 
     * @param meetingEvents {module:model/ArtifactsConcatenationConfigurationMeetingEvents} 
     * @param compositedVideo {module:model/ArtifactsConcatenationConfigurationCompositedVideo} 
     */
    constructor(audio, video, content, dataChannel, transcriptionMessages, meetingEvents, compositedVideo) { 
        ArtifactsConcatenationConfiguration.initialize(this, audio, video, content, dataChannel, transcriptionMessages, meetingEvents, compositedVideo);
        ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.initialize(this, audio, video, content, dataChannel, transcriptionMessages, meetingEvents, compositedVideo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audio, video, content, dataChannel, transcriptionMessages, meetingEvents, compositedVideo) { 
        obj['Audio'] = audio;
        obj['Video'] = video;
        obj['Content'] = content;
        obj['DataChannel'] = dataChannel;
        obj['TranscriptionMessages'] = transcriptionMessages;
        obj['MeetingEvents'] = meetingEvents;
        obj['CompositedVideo'] = compositedVideo;
    }

    /**
     * Constructs a <code>ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration} obj Optional instance to populate.
     * @return {module:model/ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration} The populated <code>ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration();
            ArtifactsConcatenationConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('Audio')) {
                obj['Audio'] = ArtifactsConcatenationConfigurationAudio.constructFromObject(data['Audio']);
            }
            if (data.hasOwnProperty('Video')) {
                obj['Video'] = ArtifactsConcatenationConfigurationVideo.constructFromObject(data['Video']);
            }
            if (data.hasOwnProperty('Content')) {
                obj['Content'] = ArtifactsConcatenationConfigurationContent.constructFromObject(data['Content']);
            }
            if (data.hasOwnProperty('DataChannel')) {
                obj['DataChannel'] = ArtifactsConcatenationConfigurationDataChannel.constructFromObject(data['DataChannel']);
            }
            if (data.hasOwnProperty('TranscriptionMessages')) {
                obj['TranscriptionMessages'] = ArtifactsConcatenationConfigurationTranscriptionMessages.constructFromObject(data['TranscriptionMessages']);
            }
            if (data.hasOwnProperty('MeetingEvents')) {
                obj['MeetingEvents'] = ArtifactsConcatenationConfigurationMeetingEvents.constructFromObject(data['MeetingEvents']);
            }
            if (data.hasOwnProperty('CompositedVideo')) {
                obj['CompositedVideo'] = ArtifactsConcatenationConfigurationCompositedVideo.constructFromObject(data['CompositedVideo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Audio`
        if (data['Audio']) { // data not null
          ArtifactsConcatenationConfigurationAudio.validateJSON(data['Audio']);
        }
        // validate the optional field `Video`
        if (data['Video']) { // data not null
          ArtifactsConcatenationConfigurationVideo.validateJSON(data['Video']);
        }
        // validate the optional field `Content`
        if (data['Content']) { // data not null
          ArtifactsConcatenationConfigurationContent.validateJSON(data['Content']);
        }
        // validate the optional field `DataChannel`
        if (data['DataChannel']) { // data not null
          ArtifactsConcatenationConfigurationDataChannel.validateJSON(data['DataChannel']);
        }
        // validate the optional field `TranscriptionMessages`
        if (data['TranscriptionMessages']) { // data not null
          ArtifactsConcatenationConfigurationTranscriptionMessages.validateJSON(data['TranscriptionMessages']);
        }
        // validate the optional field `MeetingEvents`
        if (data['MeetingEvents']) { // data not null
          ArtifactsConcatenationConfigurationMeetingEvents.validateJSON(data['MeetingEvents']);
        }
        // validate the optional field `CompositedVideo`
        if (data['CompositedVideo']) { // data not null
          ArtifactsConcatenationConfigurationCompositedVideo.validateJSON(data['CompositedVideo']);
        }

        return true;
    }


}

ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.RequiredProperties = ["Audio", "Video", "Content", "DataChannel", "TranscriptionMessages", "MeetingEvents", "CompositedVideo"];

/**
 * @member {module:model/ArtifactsConcatenationConfigurationAudio} Audio
 */
ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.prototype['Audio'] = undefined;

/**
 * @member {module:model/ArtifactsConcatenationConfigurationVideo} Video
 */
ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.prototype['Video'] = undefined;

/**
 * @member {module:model/ArtifactsConcatenationConfigurationContent} Content
 */
ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.prototype['Content'] = undefined;

/**
 * @member {module:model/ArtifactsConcatenationConfigurationDataChannel} DataChannel
 */
ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.prototype['DataChannel'] = undefined;

/**
 * @member {module:model/ArtifactsConcatenationConfigurationTranscriptionMessages} TranscriptionMessages
 */
ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.prototype['TranscriptionMessages'] = undefined;

/**
 * @member {module:model/ArtifactsConcatenationConfigurationMeetingEvents} MeetingEvents
 */
ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.prototype['MeetingEvents'] = undefined;

/**
 * @member {module:model/ArtifactsConcatenationConfigurationCompositedVideo} CompositedVideo
 */
ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration.prototype['CompositedVideo'] = undefined;


// Implement ArtifactsConcatenationConfiguration interface:
/**
 * @member {module:model/ArtifactsConcatenationConfigurationAudio} Audio
 */
ArtifactsConcatenationConfiguration.prototype['Audio'] = undefined;
/**
 * @member {module:model/ArtifactsConcatenationConfigurationVideo} Video
 */
ArtifactsConcatenationConfiguration.prototype['Video'] = undefined;
/**
 * @member {module:model/ArtifactsConcatenationConfigurationContent} Content
 */
ArtifactsConcatenationConfiguration.prototype['Content'] = undefined;
/**
 * @member {module:model/ArtifactsConcatenationConfigurationDataChannel} DataChannel
 */
ArtifactsConcatenationConfiguration.prototype['DataChannel'] = undefined;
/**
 * @member {module:model/ArtifactsConcatenationConfigurationTranscriptionMessages} TranscriptionMessages
 */
ArtifactsConcatenationConfiguration.prototype['TranscriptionMessages'] = undefined;
/**
 * @member {module:model/ArtifactsConcatenationConfigurationMeetingEvents} MeetingEvents
 */
ArtifactsConcatenationConfiguration.prototype['MeetingEvents'] = undefined;
/**
 * @member {module:model/ArtifactsConcatenationConfigurationCompositedVideo} CompositedVideo
 */
ArtifactsConcatenationConfiguration.prototype['CompositedVideo'] = undefined;




export default ChimeSdkMeetingConcatenationConfigurationArtifactsConfiguration;

