/**
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonChimeSdkMediaPipelines);
  }
}(this, function(expect, AmazonChimeSdkMediaPipelines) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonChimeSdkMediaPipelines.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createMediaCapturePipeline', function() {
      it('should call createMediaCapturePipeline successfully', function(done) {
        //uncomment below and update the code to test createMediaCapturePipeline
        //instance.createMediaCapturePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMediaConcatenationPipeline', function() {
      it('should call createMediaConcatenationPipeline successfully', function(done) {
        //uncomment below and update the code to test createMediaConcatenationPipeline
        //instance.createMediaConcatenationPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMediaInsightsPipeline', function() {
      it('should call createMediaInsightsPipeline successfully', function(done) {
        //uncomment below and update the code to test createMediaInsightsPipeline
        //instance.createMediaInsightsPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMediaInsightsPipelineConfiguration', function() {
      it('should call createMediaInsightsPipelineConfiguration successfully', function(done) {
        //uncomment below and update the code to test createMediaInsightsPipelineConfiguration
        //instance.createMediaInsightsPipelineConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMediaLiveConnectorPipeline', function() {
      it('should call createMediaLiveConnectorPipeline successfully', function(done) {
        //uncomment below and update the code to test createMediaLiveConnectorPipeline
        //instance.createMediaLiveConnectorPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMediaCapturePipeline', function() {
      it('should call deleteMediaCapturePipeline successfully', function(done) {
        //uncomment below and update the code to test deleteMediaCapturePipeline
        //instance.deleteMediaCapturePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMediaInsightsPipelineConfiguration', function() {
      it('should call deleteMediaInsightsPipelineConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteMediaInsightsPipelineConfiguration
        //instance.deleteMediaInsightsPipelineConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMediaPipeline', function() {
      it('should call deleteMediaPipeline successfully', function(done) {
        //uncomment below and update the code to test deleteMediaPipeline
        //instance.deleteMediaPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMediaCapturePipeline', function() {
      it('should call getMediaCapturePipeline successfully', function(done) {
        //uncomment below and update the code to test getMediaCapturePipeline
        //instance.getMediaCapturePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMediaInsightsPipelineConfiguration', function() {
      it('should call getMediaInsightsPipelineConfiguration successfully', function(done) {
        //uncomment below and update the code to test getMediaInsightsPipelineConfiguration
        //instance.getMediaInsightsPipelineConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMediaPipeline', function() {
      it('should call getMediaPipeline successfully', function(done) {
        //uncomment below and update the code to test getMediaPipeline
        //instance.getMediaPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMediaCapturePipelines', function() {
      it('should call listMediaCapturePipelines successfully', function(done) {
        //uncomment below and update the code to test listMediaCapturePipelines
        //instance.listMediaCapturePipelines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMediaInsightsPipelineConfigurations', function() {
      it('should call listMediaInsightsPipelineConfigurations successfully', function(done) {
        //uncomment below and update the code to test listMediaInsightsPipelineConfigurations
        //instance.listMediaInsightsPipelineConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMediaPipelines', function() {
      it('should call listMediaPipelines successfully', function(done) {
        //uncomment below and update the code to test listMediaPipelines
        //instance.listMediaPipelines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMediaInsightsPipelineConfiguration', function() {
      it('should call updateMediaInsightsPipelineConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateMediaInsightsPipelineConfiguration
        //instance.updateMediaInsightsPipelineConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMediaInsightsPipelineStatus', function() {
      it('should call updateMediaInsightsPipelineStatus successfully', function(done) {
        //uncomment below and update the code to test updateMediaInsightsPipelineStatus
        //instance.updateMediaInsightsPipelineStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
