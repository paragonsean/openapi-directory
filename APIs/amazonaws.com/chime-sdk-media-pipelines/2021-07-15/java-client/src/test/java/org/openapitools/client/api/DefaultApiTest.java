/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateMediaCapturePipelineRequest;
import org.openapitools.client.model.CreateMediaCapturePipelineResponse;
import org.openapitools.client.model.CreateMediaConcatenationPipelineRequest;
import org.openapitools.client.model.CreateMediaConcatenationPipelineResponse;
import org.openapitools.client.model.CreateMediaInsightsPipelineConfigurationRequest;
import org.openapitools.client.model.CreateMediaInsightsPipelineConfigurationResponse;
import org.openapitools.client.model.CreateMediaInsightsPipelineRequest;
import org.openapitools.client.model.CreateMediaInsightsPipelineResponse;
import org.openapitools.client.model.CreateMediaLiveConnectorPipelineRequest;
import org.openapitools.client.model.CreateMediaLiveConnectorPipelineResponse;
import org.openapitools.client.model.GetMediaCapturePipelineResponse;
import org.openapitools.client.model.GetMediaInsightsPipelineConfigurationResponse;
import org.openapitools.client.model.GetMediaPipelineResponse;
import org.openapitools.client.model.ListMediaCapturePipelinesResponse;
import org.openapitools.client.model.ListMediaInsightsPipelineConfigurationsResponse;
import org.openapitools.client.model.ListMediaPipelinesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateMediaInsightsPipelineConfigurationRequest;
import org.openapitools.client.model.UpdateMediaInsightsPipelineConfigurationResponse;
import org.openapitools.client.model.UpdateMediaInsightsPipelineStatusRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a media pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMediaCapturePipelineTest() throws ApiException {
        CreateMediaCapturePipelineRequest createMediaCapturePipelineRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMediaCapturePipelineResponse response = api.createMediaCapturePipeline(createMediaCapturePipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a media concatenation pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMediaConcatenationPipelineTest() throws ApiException {
        CreateMediaConcatenationPipelineRequest createMediaConcatenationPipelineRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMediaConcatenationPipelineResponse response = api.createMediaConcatenationPipeline(createMediaConcatenationPipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a media insights pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMediaInsightsPipelineTest() throws ApiException {
        CreateMediaInsightsPipelineRequest createMediaInsightsPipelineRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMediaInsightsPipelineResponse response = api.createMediaInsightsPipeline(createMediaInsightsPipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A structure that contains the static configurations for a media insights pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMediaInsightsPipelineConfigurationTest() throws ApiException {
        CreateMediaInsightsPipelineConfigurationRequest createMediaInsightsPipelineConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMediaInsightsPipelineConfigurationResponse response = api.createMediaInsightsPipelineConfiguration(createMediaInsightsPipelineConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a media live connector pipeline in an Amazon Chime SDK meeting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMediaLiveConnectorPipelineTest() throws ApiException {
        CreateMediaLiveConnectorPipelineRequest createMediaLiveConnectorPipelineRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMediaLiveConnectorPipelineResponse response = api.createMediaLiveConnectorPipeline(createMediaLiveConnectorPipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the media pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMediaCapturePipelineTest() throws ApiException {
        String mediaPipelineId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteMediaCapturePipeline(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified configuration settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMediaInsightsPipelineConfigurationTest() throws ApiException {
        String identifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteMediaInsightsPipelineConfiguration(identifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the media pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMediaPipelineTest() throws ApiException {
        String mediaPipelineId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteMediaPipeline(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets an existing media pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaCapturePipelineTest() throws ApiException {
        String mediaPipelineId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMediaCapturePipelineResponse response = api.getMediaCapturePipeline(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the configuration settings for a media insights pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaInsightsPipelineConfigurationTest() throws ApiException {
        String identifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMediaInsightsPipelineConfigurationResponse response = api.getMediaInsightsPipelineConfiguration(identifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets an existing media pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaPipelineTest() throws ApiException {
        String mediaPipelineId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMediaPipelineResponse response = api.getMediaPipeline(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of media pipelines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMediaCapturePipelinesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListMediaCapturePipelinesResponse response = api.listMediaCapturePipelines(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the available media insights pipeline configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMediaInsightsPipelineConfigurationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListMediaInsightsPipelineConfigurationsResponse response = api.listMediaInsightsPipelineConfigurations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of media pipelines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMediaPipelinesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListMediaPipelinesResponse response = api.listMediaPipelines(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the tags available for a media pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The ARN of the media pipeline that you want to tag. Consists of the pipeline&#39;s endpoint region, resource ID, and pipeline ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String operation = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes any tags from a media pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String operation = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the media insights pipeline&#39;s configuration settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMediaInsightsPipelineConfigurationTest() throws ApiException {
        String identifier = null;
        UpdateMediaInsightsPipelineConfigurationRequest updateMediaInsightsPipelineConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMediaInsightsPipelineConfigurationResponse response = api.updateMediaInsightsPipelineConfiguration(identifier, updateMediaInsightsPipelineConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the status of a media insights pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMediaInsightsPipelineStatusTest() throws ApiException {
        String identifier = null;
        UpdateMediaInsightsPipelineStatusRequest updateMediaInsightsPipelineStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateMediaInsightsPipelineStatus(identifier, updateMediaInsightsPipelineStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
