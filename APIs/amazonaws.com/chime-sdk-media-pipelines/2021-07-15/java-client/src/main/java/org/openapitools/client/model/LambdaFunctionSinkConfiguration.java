/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structure that contains the configuration settings for an AWS Lambda function&#39;s data sink.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LambdaFunctionSinkConfiguration {
  public static final String SERIALIZED_NAME_INSIGHTS_TARGET = "InsightsTarget";
  @SerializedName(SERIALIZED_NAME_INSIGHTS_TARGET)
  private String insightsTarget;

  public LambdaFunctionSinkConfiguration() {
  }

  public LambdaFunctionSinkConfiguration insightsTarget(String insightsTarget) {
    this.insightsTarget = insightsTarget;
    return this;
  }

  /**
   * Get insightsTarget
   * @return insightsTarget
   */
  @javax.annotation.Nullable
  public String getInsightsTarget() {
    return insightsTarget;
  }

  public void setInsightsTarget(String insightsTarget) {
    this.insightsTarget = insightsTarget;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LambdaFunctionSinkConfiguration lambdaFunctionSinkConfiguration = (LambdaFunctionSinkConfiguration) o;
    return Objects.equals(this.insightsTarget, lambdaFunctionSinkConfiguration.insightsTarget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insightsTarget);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LambdaFunctionSinkConfiguration {\n");
    sb.append("    insightsTarget: ").append(toIndentedString(insightsTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InsightsTarget");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LambdaFunctionSinkConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LambdaFunctionSinkConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LambdaFunctionSinkConfiguration is not found in the empty JSON string", LambdaFunctionSinkConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LambdaFunctionSinkConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LambdaFunctionSinkConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InsightsTarget`
      if (jsonObj.get("InsightsTarget") != null && !jsonObj.get("InsightsTarget").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InsightsTarget"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LambdaFunctionSinkConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LambdaFunctionSinkConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LambdaFunctionSinkConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LambdaFunctionSinkConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LambdaFunctionSinkConfiguration>() {
           @Override
           public void write(JsonWriter out, LambdaFunctionSinkConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LambdaFunctionSinkConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LambdaFunctionSinkConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LambdaFunctionSinkConfiguration
   * @throws IOException if the JSON string is invalid with respect to LambdaFunctionSinkConfiguration
   */
  public static LambdaFunctionSinkConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LambdaFunctionSinkConfiguration.class);
  }

  /**
   * Convert an instance of LambdaFunctionSinkConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

