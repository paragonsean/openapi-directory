/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RealTimeAlertRuleIssueDetectionConfiguration;
import org.openapitools.client.model.RealTimeAlertRuleKeywordMatchConfiguration;
import org.openapitools.client.model.RealTimeAlertRuleSentimentConfiguration;
import org.openapitools.client.model.RealTimeAlertRuleType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the words or phrases that trigger an alert.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RealTimeAlertRule {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RealTimeAlertRuleType type;

  public static final String SERIALIZED_NAME_KEYWORD_MATCH_CONFIGURATION = "KeywordMatchConfiguration";
  @SerializedName(SERIALIZED_NAME_KEYWORD_MATCH_CONFIGURATION)
  private RealTimeAlertRuleKeywordMatchConfiguration keywordMatchConfiguration;

  public static final String SERIALIZED_NAME_SENTIMENT_CONFIGURATION = "SentimentConfiguration";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_CONFIGURATION)
  private RealTimeAlertRuleSentimentConfiguration sentimentConfiguration;

  public static final String SERIALIZED_NAME_ISSUE_DETECTION_CONFIGURATION = "IssueDetectionConfiguration";
  @SerializedName(SERIALIZED_NAME_ISSUE_DETECTION_CONFIGURATION)
  private RealTimeAlertRuleIssueDetectionConfiguration issueDetectionConfiguration;

  public RealTimeAlertRule() {
  }

  public RealTimeAlertRule type(RealTimeAlertRuleType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public RealTimeAlertRuleType getType() {
    return type;
  }

  public void setType(RealTimeAlertRuleType type) {
    this.type = type;
  }


  public RealTimeAlertRule keywordMatchConfiguration(RealTimeAlertRuleKeywordMatchConfiguration keywordMatchConfiguration) {
    this.keywordMatchConfiguration = keywordMatchConfiguration;
    return this;
  }

  /**
   * Get keywordMatchConfiguration
   * @return keywordMatchConfiguration
   */
  @javax.annotation.Nullable
  public RealTimeAlertRuleKeywordMatchConfiguration getKeywordMatchConfiguration() {
    return keywordMatchConfiguration;
  }

  public void setKeywordMatchConfiguration(RealTimeAlertRuleKeywordMatchConfiguration keywordMatchConfiguration) {
    this.keywordMatchConfiguration = keywordMatchConfiguration;
  }


  public RealTimeAlertRule sentimentConfiguration(RealTimeAlertRuleSentimentConfiguration sentimentConfiguration) {
    this.sentimentConfiguration = sentimentConfiguration;
    return this;
  }

  /**
   * Get sentimentConfiguration
   * @return sentimentConfiguration
   */
  @javax.annotation.Nullable
  public RealTimeAlertRuleSentimentConfiguration getSentimentConfiguration() {
    return sentimentConfiguration;
  }

  public void setSentimentConfiguration(RealTimeAlertRuleSentimentConfiguration sentimentConfiguration) {
    this.sentimentConfiguration = sentimentConfiguration;
  }


  public RealTimeAlertRule issueDetectionConfiguration(RealTimeAlertRuleIssueDetectionConfiguration issueDetectionConfiguration) {
    this.issueDetectionConfiguration = issueDetectionConfiguration;
    return this;
  }

  /**
   * Get issueDetectionConfiguration
   * @return issueDetectionConfiguration
   */
  @javax.annotation.Nullable
  public RealTimeAlertRuleIssueDetectionConfiguration getIssueDetectionConfiguration() {
    return issueDetectionConfiguration;
  }

  public void setIssueDetectionConfiguration(RealTimeAlertRuleIssueDetectionConfiguration issueDetectionConfiguration) {
    this.issueDetectionConfiguration = issueDetectionConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealTimeAlertRule realTimeAlertRule = (RealTimeAlertRule) o;
    return Objects.equals(this.type, realTimeAlertRule.type) &&
        Objects.equals(this.keywordMatchConfiguration, realTimeAlertRule.keywordMatchConfiguration) &&
        Objects.equals(this.sentimentConfiguration, realTimeAlertRule.sentimentConfiguration) &&
        Objects.equals(this.issueDetectionConfiguration, realTimeAlertRule.issueDetectionConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, keywordMatchConfiguration, sentimentConfiguration, issueDetectionConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealTimeAlertRule {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    keywordMatchConfiguration: ").append(toIndentedString(keywordMatchConfiguration)).append("\n");
    sb.append("    sentimentConfiguration: ").append(toIndentedString(sentimentConfiguration)).append("\n");
    sb.append("    issueDetectionConfiguration: ").append(toIndentedString(issueDetectionConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("KeywordMatchConfiguration");
    openapiFields.add("SentimentConfiguration");
    openapiFields.add("IssueDetectionConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RealTimeAlertRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealTimeAlertRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealTimeAlertRule is not found in the empty JSON string", RealTimeAlertRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealTimeAlertRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealTimeAlertRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RealTimeAlertRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Type`
      RealTimeAlertRuleType.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `KeywordMatchConfiguration`
      if (jsonObj.get("KeywordMatchConfiguration") != null && !jsonObj.get("KeywordMatchConfiguration").isJsonNull()) {
        RealTimeAlertRuleKeywordMatchConfiguration.validateJsonElement(jsonObj.get("KeywordMatchConfiguration"));
      }
      // validate the optional field `SentimentConfiguration`
      if (jsonObj.get("SentimentConfiguration") != null && !jsonObj.get("SentimentConfiguration").isJsonNull()) {
        RealTimeAlertRuleSentimentConfiguration.validateJsonElement(jsonObj.get("SentimentConfiguration"));
      }
      // validate the optional field `IssueDetectionConfiguration`
      if (jsonObj.get("IssueDetectionConfiguration") != null && !jsonObj.get("IssueDetectionConfiguration").isJsonNull()) {
        RealTimeAlertRuleIssueDetectionConfiguration.validateJsonElement(jsonObj.get("IssueDetectionConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealTimeAlertRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealTimeAlertRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealTimeAlertRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealTimeAlertRule.class));

       return (TypeAdapter<T>) new TypeAdapter<RealTimeAlertRule>() {
           @Override
           public void write(JsonWriter out, RealTimeAlertRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealTimeAlertRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RealTimeAlertRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RealTimeAlertRule
   * @throws IOException if the JSON string is invalid with respect to RealTimeAlertRule
   */
  public static RealTimeAlertRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealTimeAlertRule.class);
  }

  /**
   * Convert an instance of RealTimeAlertRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

