/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MediaPipelineStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline {
  public static final String SERIALIZED_NAME_SOURCES = "Sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List sources;

  public static final String SERIALIZED_NAME_SINKS = "Sinks";
  @SerializedName(SERIALIZED_NAME_SINKS)
  private List sinks;

  public static final String SERIALIZED_NAME_MEDIA_PIPELINE_ID = "MediaPipelineId";
  @SerializedName(SERIALIZED_NAME_MEDIA_PIPELINE_ID)
  private String mediaPipelineId;

  public static final String SERIALIZED_NAME_MEDIA_PIPELINE_ARN = "MediaPipelineArn";
  @SerializedName(SERIALIZED_NAME_MEDIA_PIPELINE_ARN)
  private String mediaPipelineArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MediaPipelineStatus status;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "UpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline() {
  }

  public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline sources(List sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List getSources() {
    return sources;
  }

  public void setSources(List sources) {
    this.sources = sources;
  }


  public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline sinks(List sinks) {
    this.sinks = sinks;
    return this;
  }

  /**
   * Get sinks
   * @return sinks
   */
  @javax.annotation.Nullable
  public List getSinks() {
    return sinks;
  }

  public void setSinks(List sinks) {
    this.sinks = sinks;
  }


  public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline mediaPipelineId(String mediaPipelineId) {
    this.mediaPipelineId = mediaPipelineId;
    return this;
  }

  /**
   * Get mediaPipelineId
   * @return mediaPipelineId
   */
  @javax.annotation.Nullable
  public String getMediaPipelineId() {
    return mediaPipelineId;
  }

  public void setMediaPipelineId(String mediaPipelineId) {
    this.mediaPipelineId = mediaPipelineId;
  }


  public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline mediaPipelineArn(String mediaPipelineArn) {
    this.mediaPipelineArn = mediaPipelineArn;
    return this;
  }

  /**
   * Get mediaPipelineArn
   * @return mediaPipelineArn
   */
  @javax.annotation.Nullable
  public String getMediaPipelineArn() {
    return mediaPipelineArn;
  }

  public void setMediaPipelineArn(String mediaPipelineArn) {
    this.mediaPipelineArn = mediaPipelineArn;
  }


  public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline status(MediaPipelineStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public MediaPipelineStatus getStatus() {
    return status;
  }

  public void setStatus(MediaPipelineStatus status) {
    this.status = status;
  }


  public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline updatedTimestamp(OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

  /**
   * Get updatedTimestamp
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline createMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline = (CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline) o;
    return Objects.equals(this.sources, createMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.sources) &&
        Objects.equals(this.sinks, createMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.sinks) &&
        Objects.equals(this.mediaPipelineId, createMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.mediaPipelineId) &&
        Objects.equals(this.mediaPipelineArn, createMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.mediaPipelineArn) &&
        Objects.equals(this.status, createMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.status) &&
        Objects.equals(this.createdTimestamp, createMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, createMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.updatedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sources, sinks, mediaPipelineId, mediaPipelineArn, status, createdTimestamp, updatedTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline {\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    sinks: ").append(toIndentedString(sinks)).append("\n");
    sb.append("    mediaPipelineId: ").append(toIndentedString(mediaPipelineId)).append("\n");
    sb.append("    mediaPipelineArn: ").append(toIndentedString(mediaPipelineArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Sources");
    openapiFields.add("Sinks");
    openapiFields.add("MediaPipelineId");
    openapiFields.add("MediaPipelineArn");
    openapiFields.add("Status");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("UpdatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline is not found in the empty JSON string", CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Sources`
      if (jsonObj.get("Sources") != null && !jsonObj.get("Sources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Sources"));
      }
      // validate the optional field `Sinks`
      if (jsonObj.get("Sinks") != null && !jsonObj.get("Sinks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Sinks"));
      }
      // validate the optional field `MediaPipelineId`
      if (jsonObj.get("MediaPipelineId") != null && !jsonObj.get("MediaPipelineId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaPipelineId"));
      }
      // validate the optional field `MediaPipelineArn`
      if (jsonObj.get("MediaPipelineArn") != null && !jsonObj.get("MediaPipelineArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaPipelineArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MediaPipelineStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `UpdatedTimestamp`
      if (jsonObj.get("UpdatedTimestamp") != null && !jsonObj.get("UpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline>() {
           @Override
           public void write(JsonWriter out, CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline
   * @throws IOException if the JSON string is invalid with respect to CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline
   */
  public static CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline.class);
  }

  /**
   * Convert an instance of CreateMediaLiveConnectorPipelineResponseMediaLiveConnectorPipeline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

