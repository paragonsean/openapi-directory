/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CanvasOrientation;
import org.openapitools.client.model.ContentShareLayoutOption;
import org.openapitools.client.model.GridViewConfigurationActiveSpeakerOnlyConfiguration;
import org.openapitools.client.model.GridViewConfigurationHorizontalLayoutConfiguration;
import org.openapitools.client.model.GridViewConfigurationPresenterOnlyConfiguration;
import org.openapitools.client.model.GridViewConfigurationVerticalLayoutConfiguration;
import org.openapitools.client.model.GridViewConfigurationVideoAttribute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompositedVideoArtifactsConfigurationGridViewConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompositedVideoArtifactsConfigurationGridViewConfiguration {
  public static final String SERIALIZED_NAME_CONTENT_SHARE_LAYOUT = "ContentShareLayout";
  @SerializedName(SERIALIZED_NAME_CONTENT_SHARE_LAYOUT)
  private ContentShareLayoutOption contentShareLayout;

  public static final String SERIALIZED_NAME_PRESENTER_ONLY_CONFIGURATION = "PresenterOnlyConfiguration";
  @SerializedName(SERIALIZED_NAME_PRESENTER_ONLY_CONFIGURATION)
  private GridViewConfigurationPresenterOnlyConfiguration presenterOnlyConfiguration;

  public static final String SERIALIZED_NAME_ACTIVE_SPEAKER_ONLY_CONFIGURATION = "ActiveSpeakerOnlyConfiguration";
  @SerializedName(SERIALIZED_NAME_ACTIVE_SPEAKER_ONLY_CONFIGURATION)
  private GridViewConfigurationActiveSpeakerOnlyConfiguration activeSpeakerOnlyConfiguration;

  public static final String SERIALIZED_NAME_HORIZONTAL_LAYOUT_CONFIGURATION = "HorizontalLayoutConfiguration";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_LAYOUT_CONFIGURATION)
  private GridViewConfigurationHorizontalLayoutConfiguration horizontalLayoutConfiguration;

  public static final String SERIALIZED_NAME_VERTICAL_LAYOUT_CONFIGURATION = "VerticalLayoutConfiguration";
  @SerializedName(SERIALIZED_NAME_VERTICAL_LAYOUT_CONFIGURATION)
  private GridViewConfigurationVerticalLayoutConfiguration verticalLayoutConfiguration;

  public static final String SERIALIZED_NAME_VIDEO_ATTRIBUTE = "VideoAttribute";
  @SerializedName(SERIALIZED_NAME_VIDEO_ATTRIBUTE)
  private GridViewConfigurationVideoAttribute videoAttribute;

  public static final String SERIALIZED_NAME_CANVAS_ORIENTATION = "CanvasOrientation";
  @SerializedName(SERIALIZED_NAME_CANVAS_ORIENTATION)
  private CanvasOrientation canvasOrientation;

  public CompositedVideoArtifactsConfigurationGridViewConfiguration() {
  }

  public CompositedVideoArtifactsConfigurationGridViewConfiguration contentShareLayout(ContentShareLayoutOption contentShareLayout) {
    this.contentShareLayout = contentShareLayout;
    return this;
  }

  /**
   * Get contentShareLayout
   * @return contentShareLayout
   */
  @javax.annotation.Nonnull
  public ContentShareLayoutOption getContentShareLayout() {
    return contentShareLayout;
  }

  public void setContentShareLayout(ContentShareLayoutOption contentShareLayout) {
    this.contentShareLayout = contentShareLayout;
  }


  public CompositedVideoArtifactsConfigurationGridViewConfiguration presenterOnlyConfiguration(GridViewConfigurationPresenterOnlyConfiguration presenterOnlyConfiguration) {
    this.presenterOnlyConfiguration = presenterOnlyConfiguration;
    return this;
  }

  /**
   * Get presenterOnlyConfiguration
   * @return presenterOnlyConfiguration
   */
  @javax.annotation.Nullable
  public GridViewConfigurationPresenterOnlyConfiguration getPresenterOnlyConfiguration() {
    return presenterOnlyConfiguration;
  }

  public void setPresenterOnlyConfiguration(GridViewConfigurationPresenterOnlyConfiguration presenterOnlyConfiguration) {
    this.presenterOnlyConfiguration = presenterOnlyConfiguration;
  }


  public CompositedVideoArtifactsConfigurationGridViewConfiguration activeSpeakerOnlyConfiguration(GridViewConfigurationActiveSpeakerOnlyConfiguration activeSpeakerOnlyConfiguration) {
    this.activeSpeakerOnlyConfiguration = activeSpeakerOnlyConfiguration;
    return this;
  }

  /**
   * Get activeSpeakerOnlyConfiguration
   * @return activeSpeakerOnlyConfiguration
   */
  @javax.annotation.Nullable
  public GridViewConfigurationActiveSpeakerOnlyConfiguration getActiveSpeakerOnlyConfiguration() {
    return activeSpeakerOnlyConfiguration;
  }

  public void setActiveSpeakerOnlyConfiguration(GridViewConfigurationActiveSpeakerOnlyConfiguration activeSpeakerOnlyConfiguration) {
    this.activeSpeakerOnlyConfiguration = activeSpeakerOnlyConfiguration;
  }


  public CompositedVideoArtifactsConfigurationGridViewConfiguration horizontalLayoutConfiguration(GridViewConfigurationHorizontalLayoutConfiguration horizontalLayoutConfiguration) {
    this.horizontalLayoutConfiguration = horizontalLayoutConfiguration;
    return this;
  }

  /**
   * Get horizontalLayoutConfiguration
   * @return horizontalLayoutConfiguration
   */
  @javax.annotation.Nullable
  public GridViewConfigurationHorizontalLayoutConfiguration getHorizontalLayoutConfiguration() {
    return horizontalLayoutConfiguration;
  }

  public void setHorizontalLayoutConfiguration(GridViewConfigurationHorizontalLayoutConfiguration horizontalLayoutConfiguration) {
    this.horizontalLayoutConfiguration = horizontalLayoutConfiguration;
  }


  public CompositedVideoArtifactsConfigurationGridViewConfiguration verticalLayoutConfiguration(GridViewConfigurationVerticalLayoutConfiguration verticalLayoutConfiguration) {
    this.verticalLayoutConfiguration = verticalLayoutConfiguration;
    return this;
  }

  /**
   * Get verticalLayoutConfiguration
   * @return verticalLayoutConfiguration
   */
  @javax.annotation.Nullable
  public GridViewConfigurationVerticalLayoutConfiguration getVerticalLayoutConfiguration() {
    return verticalLayoutConfiguration;
  }

  public void setVerticalLayoutConfiguration(GridViewConfigurationVerticalLayoutConfiguration verticalLayoutConfiguration) {
    this.verticalLayoutConfiguration = verticalLayoutConfiguration;
  }


  public CompositedVideoArtifactsConfigurationGridViewConfiguration videoAttribute(GridViewConfigurationVideoAttribute videoAttribute) {
    this.videoAttribute = videoAttribute;
    return this;
  }

  /**
   * Get videoAttribute
   * @return videoAttribute
   */
  @javax.annotation.Nullable
  public GridViewConfigurationVideoAttribute getVideoAttribute() {
    return videoAttribute;
  }

  public void setVideoAttribute(GridViewConfigurationVideoAttribute videoAttribute) {
    this.videoAttribute = videoAttribute;
  }


  public CompositedVideoArtifactsConfigurationGridViewConfiguration canvasOrientation(CanvasOrientation canvasOrientation) {
    this.canvasOrientation = canvasOrientation;
    return this;
  }

  /**
   * Get canvasOrientation
   * @return canvasOrientation
   */
  @javax.annotation.Nullable
  public CanvasOrientation getCanvasOrientation() {
    return canvasOrientation;
  }

  public void setCanvasOrientation(CanvasOrientation canvasOrientation) {
    this.canvasOrientation = canvasOrientation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompositedVideoArtifactsConfigurationGridViewConfiguration compositedVideoArtifactsConfigurationGridViewConfiguration = (CompositedVideoArtifactsConfigurationGridViewConfiguration) o;
    return Objects.equals(this.contentShareLayout, compositedVideoArtifactsConfigurationGridViewConfiguration.contentShareLayout) &&
        Objects.equals(this.presenterOnlyConfiguration, compositedVideoArtifactsConfigurationGridViewConfiguration.presenterOnlyConfiguration) &&
        Objects.equals(this.activeSpeakerOnlyConfiguration, compositedVideoArtifactsConfigurationGridViewConfiguration.activeSpeakerOnlyConfiguration) &&
        Objects.equals(this.horizontalLayoutConfiguration, compositedVideoArtifactsConfigurationGridViewConfiguration.horizontalLayoutConfiguration) &&
        Objects.equals(this.verticalLayoutConfiguration, compositedVideoArtifactsConfigurationGridViewConfiguration.verticalLayoutConfiguration) &&
        Objects.equals(this.videoAttribute, compositedVideoArtifactsConfigurationGridViewConfiguration.videoAttribute) &&
        Objects.equals(this.canvasOrientation, compositedVideoArtifactsConfigurationGridViewConfiguration.canvasOrientation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentShareLayout, presenterOnlyConfiguration, activeSpeakerOnlyConfiguration, horizontalLayoutConfiguration, verticalLayoutConfiguration, videoAttribute, canvasOrientation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompositedVideoArtifactsConfigurationGridViewConfiguration {\n");
    sb.append("    contentShareLayout: ").append(toIndentedString(contentShareLayout)).append("\n");
    sb.append("    presenterOnlyConfiguration: ").append(toIndentedString(presenterOnlyConfiguration)).append("\n");
    sb.append("    activeSpeakerOnlyConfiguration: ").append(toIndentedString(activeSpeakerOnlyConfiguration)).append("\n");
    sb.append("    horizontalLayoutConfiguration: ").append(toIndentedString(horizontalLayoutConfiguration)).append("\n");
    sb.append("    verticalLayoutConfiguration: ").append(toIndentedString(verticalLayoutConfiguration)).append("\n");
    sb.append("    videoAttribute: ").append(toIndentedString(videoAttribute)).append("\n");
    sb.append("    canvasOrientation: ").append(toIndentedString(canvasOrientation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContentShareLayout");
    openapiFields.add("PresenterOnlyConfiguration");
    openapiFields.add("ActiveSpeakerOnlyConfiguration");
    openapiFields.add("HorizontalLayoutConfiguration");
    openapiFields.add("VerticalLayoutConfiguration");
    openapiFields.add("VideoAttribute");
    openapiFields.add("CanvasOrientation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ContentShareLayout");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompositedVideoArtifactsConfigurationGridViewConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompositedVideoArtifactsConfigurationGridViewConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompositedVideoArtifactsConfigurationGridViewConfiguration is not found in the empty JSON string", CompositedVideoArtifactsConfigurationGridViewConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompositedVideoArtifactsConfigurationGridViewConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompositedVideoArtifactsConfigurationGridViewConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompositedVideoArtifactsConfigurationGridViewConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ContentShareLayout`
      ContentShareLayoutOption.validateJsonElement(jsonObj.get("ContentShareLayout"));
      // validate the optional field `PresenterOnlyConfiguration`
      if (jsonObj.get("PresenterOnlyConfiguration") != null && !jsonObj.get("PresenterOnlyConfiguration").isJsonNull()) {
        GridViewConfigurationPresenterOnlyConfiguration.validateJsonElement(jsonObj.get("PresenterOnlyConfiguration"));
      }
      // validate the optional field `ActiveSpeakerOnlyConfiguration`
      if (jsonObj.get("ActiveSpeakerOnlyConfiguration") != null && !jsonObj.get("ActiveSpeakerOnlyConfiguration").isJsonNull()) {
        GridViewConfigurationActiveSpeakerOnlyConfiguration.validateJsonElement(jsonObj.get("ActiveSpeakerOnlyConfiguration"));
      }
      // validate the optional field `HorizontalLayoutConfiguration`
      if (jsonObj.get("HorizontalLayoutConfiguration") != null && !jsonObj.get("HorizontalLayoutConfiguration").isJsonNull()) {
        GridViewConfigurationHorizontalLayoutConfiguration.validateJsonElement(jsonObj.get("HorizontalLayoutConfiguration"));
      }
      // validate the optional field `VerticalLayoutConfiguration`
      if (jsonObj.get("VerticalLayoutConfiguration") != null && !jsonObj.get("VerticalLayoutConfiguration").isJsonNull()) {
        GridViewConfigurationVerticalLayoutConfiguration.validateJsonElement(jsonObj.get("VerticalLayoutConfiguration"));
      }
      // validate the optional field `VideoAttribute`
      if (jsonObj.get("VideoAttribute") != null && !jsonObj.get("VideoAttribute").isJsonNull()) {
        GridViewConfigurationVideoAttribute.validateJsonElement(jsonObj.get("VideoAttribute"));
      }
      // validate the optional field `CanvasOrientation`
      if (jsonObj.get("CanvasOrientation") != null && !jsonObj.get("CanvasOrientation").isJsonNull()) {
        CanvasOrientation.validateJsonElement(jsonObj.get("CanvasOrientation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompositedVideoArtifactsConfigurationGridViewConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompositedVideoArtifactsConfigurationGridViewConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompositedVideoArtifactsConfigurationGridViewConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompositedVideoArtifactsConfigurationGridViewConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CompositedVideoArtifactsConfigurationGridViewConfiguration>() {
           @Override
           public void write(JsonWriter out, CompositedVideoArtifactsConfigurationGridViewConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompositedVideoArtifactsConfigurationGridViewConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompositedVideoArtifactsConfigurationGridViewConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompositedVideoArtifactsConfigurationGridViewConfiguration
   * @throws IOException if the JSON string is invalid with respect to CompositedVideoArtifactsConfigurationGridViewConfiguration
   */
  public static CompositedVideoArtifactsConfigurationGridViewConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompositedVideoArtifactsConfigurationGridViewConfiguration.class);
  }

  /**
   * Convert an instance of CompositedVideoArtifactsConfigurationGridViewConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

