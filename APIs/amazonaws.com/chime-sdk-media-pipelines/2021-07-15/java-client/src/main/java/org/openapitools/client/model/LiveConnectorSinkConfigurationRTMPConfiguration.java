/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioChannelsOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveConnectorSinkConfigurationRTMPConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveConnectorSinkConfigurationRTMPConfiguration {
  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_AUDIO_CHANNELS = "AudioChannels";
  @SerializedName(SERIALIZED_NAME_AUDIO_CHANNELS)
  private AudioChannelsOption audioChannels;

  public static final String SERIALIZED_NAME_AUDIO_SAMPLE_RATE = "AudioSampleRate";
  @SerializedName(SERIALIZED_NAME_AUDIO_SAMPLE_RATE)
  private String audioSampleRate;

  public LiveConnectorSinkConfigurationRTMPConfiguration() {
  }

  public LiveConnectorSinkConfigurationRTMPConfiguration url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public LiveConnectorSinkConfigurationRTMPConfiguration audioChannels(AudioChannelsOption audioChannels) {
    this.audioChannels = audioChannels;
    return this;
  }

  /**
   * Get audioChannels
   * @return audioChannels
   */
  @javax.annotation.Nullable
  public AudioChannelsOption getAudioChannels() {
    return audioChannels;
  }

  public void setAudioChannels(AudioChannelsOption audioChannels) {
    this.audioChannels = audioChannels;
  }


  public LiveConnectorSinkConfigurationRTMPConfiguration audioSampleRate(String audioSampleRate) {
    this.audioSampleRate = audioSampleRate;
    return this;
  }

  /**
   * Get audioSampleRate
   * @return audioSampleRate
   */
  @javax.annotation.Nullable
  public String getAudioSampleRate() {
    return audioSampleRate;
  }

  public void setAudioSampleRate(String audioSampleRate) {
    this.audioSampleRate = audioSampleRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveConnectorSinkConfigurationRTMPConfiguration liveConnectorSinkConfigurationRTMPConfiguration = (LiveConnectorSinkConfigurationRTMPConfiguration) o;
    return Objects.equals(this.url, liveConnectorSinkConfigurationRTMPConfiguration.url) &&
        Objects.equals(this.audioChannels, liveConnectorSinkConfigurationRTMPConfiguration.audioChannels) &&
        Objects.equals(this.audioSampleRate, liveConnectorSinkConfigurationRTMPConfiguration.audioSampleRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, audioChannels, audioSampleRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveConnectorSinkConfigurationRTMPConfiguration {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    audioChannels: ").append(toIndentedString(audioChannels)).append("\n");
    sb.append("    audioSampleRate: ").append(toIndentedString(audioSampleRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Url");
    openapiFields.add("AudioChannels");
    openapiFields.add("AudioSampleRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveConnectorSinkConfigurationRTMPConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveConnectorSinkConfigurationRTMPConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveConnectorSinkConfigurationRTMPConfiguration is not found in the empty JSON string", LiveConnectorSinkConfigurationRTMPConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveConnectorSinkConfigurationRTMPConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveConnectorSinkConfigurationRTMPConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveConnectorSinkConfigurationRTMPConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Url`
      String.validateJsonElement(jsonObj.get("Url"));
      // validate the optional field `AudioChannels`
      if (jsonObj.get("AudioChannels") != null && !jsonObj.get("AudioChannels").isJsonNull()) {
        AudioChannelsOption.validateJsonElement(jsonObj.get("AudioChannels"));
      }
      // validate the optional field `AudioSampleRate`
      if (jsonObj.get("AudioSampleRate") != null && !jsonObj.get("AudioSampleRate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AudioSampleRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveConnectorSinkConfigurationRTMPConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveConnectorSinkConfigurationRTMPConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveConnectorSinkConfigurationRTMPConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveConnectorSinkConfigurationRTMPConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveConnectorSinkConfigurationRTMPConfiguration>() {
           @Override
           public void write(JsonWriter out, LiveConnectorSinkConfigurationRTMPConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveConnectorSinkConfigurationRTMPConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveConnectorSinkConfigurationRTMPConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveConnectorSinkConfigurationRTMPConfiguration
   * @throws IOException if the JSON string is invalid with respect to LiveConnectorSinkConfigurationRTMPConfiguration
   */
  public static LiveConnectorSinkConfigurationRTMPConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveConnectorSinkConfigurationRTMPConfiguration.class);
  }

  /**
   * Convert an instance of LiveConnectorSinkConfigurationRTMPConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

