/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration;
import org.openapitools.client.model.CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration;
import org.openapitools.client.model.CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMediaInsightsPipelineRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMediaInsightsPipelineRequest {
  public static final String SERIALIZED_NAME_MEDIA_INSIGHTS_PIPELINE_CONFIGURATION_ARN = "MediaInsightsPipelineConfigurationArn";
  @SerializedName(SERIALIZED_NAME_MEDIA_INSIGHTS_PIPELINE_CONFIGURATION_ARN)
  private String mediaInsightsPipelineConfigurationArn;

  public static final String SERIALIZED_NAME_KINESIS_VIDEO_STREAM_SOURCE_RUNTIME_CONFIGURATION = "KinesisVideoStreamSourceRuntimeConfiguration";
  @SerializedName(SERIALIZED_NAME_KINESIS_VIDEO_STREAM_SOURCE_RUNTIME_CONFIGURATION)
  private CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration kinesisVideoStreamSourceRuntimeConfiguration;

  public static final String SERIALIZED_NAME_MEDIA_INSIGHTS_RUNTIME_METADATA = "MediaInsightsRuntimeMetadata";
  @SerializedName(SERIALIZED_NAME_MEDIA_INSIGHTS_RUNTIME_METADATA)
  private Map<String, String> mediaInsightsRuntimeMetadata = new HashMap<>();

  public static final String SERIALIZED_NAME_KINESIS_VIDEO_STREAM_RECORDING_SOURCE_RUNTIME_CONFIGURATION = "KinesisVideoStreamRecordingSourceRuntimeConfiguration";
  @SerializedName(SERIALIZED_NAME_KINESIS_VIDEO_STREAM_RECORDING_SOURCE_RUNTIME_CONFIGURATION)
  private CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration kinesisVideoStreamRecordingSourceRuntimeConfiguration;

  public static final String SERIALIZED_NAME_S3_RECORDING_SINK_RUNTIME_CONFIGURATION = "S3RecordingSinkRuntimeConfiguration";
  @SerializedName(SERIALIZED_NAME_S3_RECORDING_SINK_RUNTIME_CONFIGURATION)
  private CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration s3RecordingSinkRuntimeConfiguration;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public CreateMediaInsightsPipelineRequest() {
  }

  public CreateMediaInsightsPipelineRequest mediaInsightsPipelineConfigurationArn(String mediaInsightsPipelineConfigurationArn) {
    this.mediaInsightsPipelineConfigurationArn = mediaInsightsPipelineConfigurationArn;
    return this;
  }

  /**
   * The ARN of the pipeline&#39;s configuration.
   * @return mediaInsightsPipelineConfigurationArn
   */
  @javax.annotation.Nonnull
  public String getMediaInsightsPipelineConfigurationArn() {
    return mediaInsightsPipelineConfigurationArn;
  }

  public void setMediaInsightsPipelineConfigurationArn(String mediaInsightsPipelineConfigurationArn) {
    this.mediaInsightsPipelineConfigurationArn = mediaInsightsPipelineConfigurationArn;
  }


  public CreateMediaInsightsPipelineRequest kinesisVideoStreamSourceRuntimeConfiguration(CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration kinesisVideoStreamSourceRuntimeConfiguration) {
    this.kinesisVideoStreamSourceRuntimeConfiguration = kinesisVideoStreamSourceRuntimeConfiguration;
    return this;
  }

  /**
   * Get kinesisVideoStreamSourceRuntimeConfiguration
   * @return kinesisVideoStreamSourceRuntimeConfiguration
   */
  @javax.annotation.Nullable
  public CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration getKinesisVideoStreamSourceRuntimeConfiguration() {
    return kinesisVideoStreamSourceRuntimeConfiguration;
  }

  public void setKinesisVideoStreamSourceRuntimeConfiguration(CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration kinesisVideoStreamSourceRuntimeConfiguration) {
    this.kinesisVideoStreamSourceRuntimeConfiguration = kinesisVideoStreamSourceRuntimeConfiguration;
  }


  public CreateMediaInsightsPipelineRequest mediaInsightsRuntimeMetadata(Map<String, String> mediaInsightsRuntimeMetadata) {
    this.mediaInsightsRuntimeMetadata = mediaInsightsRuntimeMetadata;
    return this;
  }

  public CreateMediaInsightsPipelineRequest putMediaInsightsRuntimeMetadataItem(String key, String mediaInsightsRuntimeMetadataItem) {
    if (this.mediaInsightsRuntimeMetadata == null) {
      this.mediaInsightsRuntimeMetadata = new HashMap<>();
    }
    this.mediaInsightsRuntimeMetadata.put(key, mediaInsightsRuntimeMetadataItem);
    return this;
  }

  /**
   * The runtime metadata for the media insights pipeline. Consists of a key-value map of strings.
   * @return mediaInsightsRuntimeMetadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMediaInsightsRuntimeMetadata() {
    return mediaInsightsRuntimeMetadata;
  }

  public void setMediaInsightsRuntimeMetadata(Map<String, String> mediaInsightsRuntimeMetadata) {
    this.mediaInsightsRuntimeMetadata = mediaInsightsRuntimeMetadata;
  }


  public CreateMediaInsightsPipelineRequest kinesisVideoStreamRecordingSourceRuntimeConfiguration(CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration kinesisVideoStreamRecordingSourceRuntimeConfiguration) {
    this.kinesisVideoStreamRecordingSourceRuntimeConfiguration = kinesisVideoStreamRecordingSourceRuntimeConfiguration;
    return this;
  }

  /**
   * Get kinesisVideoStreamRecordingSourceRuntimeConfiguration
   * @return kinesisVideoStreamRecordingSourceRuntimeConfiguration
   */
  @javax.annotation.Nullable
  public CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration getKinesisVideoStreamRecordingSourceRuntimeConfiguration() {
    return kinesisVideoStreamRecordingSourceRuntimeConfiguration;
  }

  public void setKinesisVideoStreamRecordingSourceRuntimeConfiguration(CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration kinesisVideoStreamRecordingSourceRuntimeConfiguration) {
    this.kinesisVideoStreamRecordingSourceRuntimeConfiguration = kinesisVideoStreamRecordingSourceRuntimeConfiguration;
  }


  public CreateMediaInsightsPipelineRequest s3RecordingSinkRuntimeConfiguration(CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration s3RecordingSinkRuntimeConfiguration) {
    this.s3RecordingSinkRuntimeConfiguration = s3RecordingSinkRuntimeConfiguration;
    return this;
  }

  /**
   * Get s3RecordingSinkRuntimeConfiguration
   * @return s3RecordingSinkRuntimeConfiguration
   */
  @javax.annotation.Nullable
  public CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration getS3RecordingSinkRuntimeConfiguration() {
    return s3RecordingSinkRuntimeConfiguration;
  }

  public void setS3RecordingSinkRuntimeConfiguration(CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration s3RecordingSinkRuntimeConfiguration) {
    this.s3RecordingSinkRuntimeConfiguration = s3RecordingSinkRuntimeConfiguration;
  }


  public CreateMediaInsightsPipelineRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateMediaInsightsPipelineRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The tags assigned to the media insights pipeline.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateMediaInsightsPipelineRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * The unique identifier for the media insights pipeline request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMediaInsightsPipelineRequest createMediaInsightsPipelineRequest = (CreateMediaInsightsPipelineRequest) o;
    return Objects.equals(this.mediaInsightsPipelineConfigurationArn, createMediaInsightsPipelineRequest.mediaInsightsPipelineConfigurationArn) &&
        Objects.equals(this.kinesisVideoStreamSourceRuntimeConfiguration, createMediaInsightsPipelineRequest.kinesisVideoStreamSourceRuntimeConfiguration) &&
        Objects.equals(this.mediaInsightsRuntimeMetadata, createMediaInsightsPipelineRequest.mediaInsightsRuntimeMetadata) &&
        Objects.equals(this.kinesisVideoStreamRecordingSourceRuntimeConfiguration, createMediaInsightsPipelineRequest.kinesisVideoStreamRecordingSourceRuntimeConfiguration) &&
        Objects.equals(this.s3RecordingSinkRuntimeConfiguration, createMediaInsightsPipelineRequest.s3RecordingSinkRuntimeConfiguration) &&
        Objects.equals(this.tags, createMediaInsightsPipelineRequest.tags) &&
        Objects.equals(this.clientRequestToken, createMediaInsightsPipelineRequest.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaInsightsPipelineConfigurationArn, kinesisVideoStreamSourceRuntimeConfiguration, mediaInsightsRuntimeMetadata, kinesisVideoStreamRecordingSourceRuntimeConfiguration, s3RecordingSinkRuntimeConfiguration, tags, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMediaInsightsPipelineRequest {\n");
    sb.append("    mediaInsightsPipelineConfigurationArn: ").append("*").append("\n");
    sb.append("    kinesisVideoStreamSourceRuntimeConfiguration: ").append(toIndentedString(kinesisVideoStreamSourceRuntimeConfiguration)).append("\n");
    sb.append("    mediaInsightsRuntimeMetadata: ").append(toIndentedString(mediaInsightsRuntimeMetadata)).append("\n");
    sb.append("    kinesisVideoStreamRecordingSourceRuntimeConfiguration: ").append(toIndentedString(kinesisVideoStreamRecordingSourceRuntimeConfiguration)).append("\n");
    sb.append("    s3RecordingSinkRuntimeConfiguration: ").append(toIndentedString(s3RecordingSinkRuntimeConfiguration)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    clientRequestToken: ").append("*").append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MediaInsightsPipelineConfigurationArn");
    openapiFields.add("KinesisVideoStreamSourceRuntimeConfiguration");
    openapiFields.add("MediaInsightsRuntimeMetadata");
    openapiFields.add("KinesisVideoStreamRecordingSourceRuntimeConfiguration");
    openapiFields.add("S3RecordingSinkRuntimeConfiguration");
    openapiFields.add("Tags");
    openapiFields.add("ClientRequestToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MediaInsightsPipelineConfigurationArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMediaInsightsPipelineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMediaInsightsPipelineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMediaInsightsPipelineRequest is not found in the empty JSON string", CreateMediaInsightsPipelineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMediaInsightsPipelineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMediaInsightsPipelineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMediaInsightsPipelineRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("MediaInsightsPipelineConfigurationArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MediaInsightsPipelineConfigurationArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MediaInsightsPipelineConfigurationArn").toString()));
      }
      // validate the optional field `KinesisVideoStreamSourceRuntimeConfiguration`
      if (jsonObj.get("KinesisVideoStreamSourceRuntimeConfiguration") != null && !jsonObj.get("KinesisVideoStreamSourceRuntimeConfiguration").isJsonNull()) {
        CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration.validateJsonElement(jsonObj.get("KinesisVideoStreamSourceRuntimeConfiguration"));
      }
      // validate the optional field `KinesisVideoStreamRecordingSourceRuntimeConfiguration`
      if (jsonObj.get("KinesisVideoStreamRecordingSourceRuntimeConfiguration") != null && !jsonObj.get("KinesisVideoStreamRecordingSourceRuntimeConfiguration").isJsonNull()) {
        CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration.validateJsonElement(jsonObj.get("KinesisVideoStreamRecordingSourceRuntimeConfiguration"));
      }
      // validate the optional field `S3RecordingSinkRuntimeConfiguration`
      if (jsonObj.get("S3RecordingSinkRuntimeConfiguration") != null && !jsonObj.get("S3RecordingSinkRuntimeConfiguration").isJsonNull()) {
        CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration.validateJsonElement(jsonObj.get("S3RecordingSinkRuntimeConfiguration"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMediaInsightsPipelineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMediaInsightsPipelineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMediaInsightsPipelineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMediaInsightsPipelineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMediaInsightsPipelineRequest>() {
           @Override
           public void write(JsonWriter out, CreateMediaInsightsPipelineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMediaInsightsPipelineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMediaInsightsPipelineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMediaInsightsPipelineRequest
   * @throws IOException if the JSON string is invalid with respect to CreateMediaInsightsPipelineRequest
   */
  public static CreateMediaInsightsPipelineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMediaInsightsPipelineRequest.class);
  }

  /**
   * Convert an instance of CreateMediaInsightsPipelineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

