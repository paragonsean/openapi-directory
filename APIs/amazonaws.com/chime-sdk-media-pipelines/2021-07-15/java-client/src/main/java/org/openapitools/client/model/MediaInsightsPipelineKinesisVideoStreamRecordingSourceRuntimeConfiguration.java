/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration {
  public static final String SERIALIZED_NAME_STREAMS = "Streams";
  @SerializedName(SERIALIZED_NAME_STREAMS)
  private List streams;

  public static final String SERIALIZED_NAME_FRAGMENT_SELECTOR = "FragmentSelector";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_SELECTOR)
  private CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector fragmentSelector;

  public MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration() {
  }

  public MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration streams(List streams) {
    this.streams = streams;
    return this;
  }

  /**
   * Get streams
   * @return streams
   */
  @javax.annotation.Nonnull
  public List getStreams() {
    return streams;
  }

  public void setStreams(List streams) {
    this.streams = streams;
  }


  public MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration fragmentSelector(CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector fragmentSelector) {
    this.fragmentSelector = fragmentSelector;
    return this;
  }

  /**
   * Get fragmentSelector
   * @return fragmentSelector
   */
  @javax.annotation.Nonnull
  public CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector getFragmentSelector() {
    return fragmentSelector;
  }

  public void setFragmentSelector(CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector fragmentSelector) {
    this.fragmentSelector = fragmentSelector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration mediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration = (MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration) o;
    return Objects.equals(this.streams, mediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.streams) &&
        Objects.equals(this.fragmentSelector, mediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.fragmentSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streams, fragmentSelector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration {\n");
    sb.append("    streams: ").append(toIndentedString(streams)).append("\n");
    sb.append("    fragmentSelector: ").append(toIndentedString(fragmentSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Streams");
    openapiFields.add("FragmentSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Streams");
    openapiRequiredFields.add("FragmentSelector");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration is not found in the empty JSON string", MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Streams`
      List.validateJsonElement(jsonObj.get("Streams"));
      // validate the required field `FragmentSelector`
      CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector.validateJsonElement(jsonObj.get("FragmentSelector"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration>() {
           @Override
           public void write(JsonWriter out, MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration
   * @throws IOException if the JSON string is invalid with respect to MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration
   */
  public static MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.class);
  }

  /**
   * Convert an instance of MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

