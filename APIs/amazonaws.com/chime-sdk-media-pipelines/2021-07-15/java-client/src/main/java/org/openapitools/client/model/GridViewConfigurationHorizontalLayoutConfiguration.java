/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HorizontalTilePosition;
import org.openapitools.client.model.TileOrder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GridViewConfigurationHorizontalLayoutConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GridViewConfigurationHorizontalLayoutConfiguration {
  public static final String SERIALIZED_NAME_TILE_ORDER = "TileOrder";
  @SerializedName(SERIALIZED_NAME_TILE_ORDER)
  private TileOrder tileOrder;

  public static final String SERIALIZED_NAME_TILE_POSITION = "TilePosition";
  @SerializedName(SERIALIZED_NAME_TILE_POSITION)
  private HorizontalTilePosition tilePosition;

  public static final String SERIALIZED_NAME_TILE_COUNT = "TileCount";
  @SerializedName(SERIALIZED_NAME_TILE_COUNT)
  private Integer tileCount;

  public static final String SERIALIZED_NAME_TILE_ASPECT_RATIO = "TileAspectRatio";
  @SerializedName(SERIALIZED_NAME_TILE_ASPECT_RATIO)
  private String tileAspectRatio;

  public GridViewConfigurationHorizontalLayoutConfiguration() {
  }

  public GridViewConfigurationHorizontalLayoutConfiguration tileOrder(TileOrder tileOrder) {
    this.tileOrder = tileOrder;
    return this;
  }

  /**
   * Get tileOrder
   * @return tileOrder
   */
  @javax.annotation.Nullable
  public TileOrder getTileOrder() {
    return tileOrder;
  }

  public void setTileOrder(TileOrder tileOrder) {
    this.tileOrder = tileOrder;
  }


  public GridViewConfigurationHorizontalLayoutConfiguration tilePosition(HorizontalTilePosition tilePosition) {
    this.tilePosition = tilePosition;
    return this;
  }

  /**
   * Get tilePosition
   * @return tilePosition
   */
  @javax.annotation.Nullable
  public HorizontalTilePosition getTilePosition() {
    return tilePosition;
  }

  public void setTilePosition(HorizontalTilePosition tilePosition) {
    this.tilePosition = tilePosition;
  }


  public GridViewConfigurationHorizontalLayoutConfiguration tileCount(Integer tileCount) {
    this.tileCount = tileCount;
    return this;
  }

  /**
   * Get tileCount
   * @return tileCount
   */
  @javax.annotation.Nullable
  public Integer getTileCount() {
    return tileCount;
  }

  public void setTileCount(Integer tileCount) {
    this.tileCount = tileCount;
  }


  public GridViewConfigurationHorizontalLayoutConfiguration tileAspectRatio(String tileAspectRatio) {
    this.tileAspectRatio = tileAspectRatio;
    return this;
  }

  /**
   * Get tileAspectRatio
   * @return tileAspectRatio
   */
  @javax.annotation.Nullable
  public String getTileAspectRatio() {
    return tileAspectRatio;
  }

  public void setTileAspectRatio(String tileAspectRatio) {
    this.tileAspectRatio = tileAspectRatio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GridViewConfigurationHorizontalLayoutConfiguration gridViewConfigurationHorizontalLayoutConfiguration = (GridViewConfigurationHorizontalLayoutConfiguration) o;
    return Objects.equals(this.tileOrder, gridViewConfigurationHorizontalLayoutConfiguration.tileOrder) &&
        Objects.equals(this.tilePosition, gridViewConfigurationHorizontalLayoutConfiguration.tilePosition) &&
        Objects.equals(this.tileCount, gridViewConfigurationHorizontalLayoutConfiguration.tileCount) &&
        Objects.equals(this.tileAspectRatio, gridViewConfigurationHorizontalLayoutConfiguration.tileAspectRatio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tileOrder, tilePosition, tileCount, tileAspectRatio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GridViewConfigurationHorizontalLayoutConfiguration {\n");
    sb.append("    tileOrder: ").append(toIndentedString(tileOrder)).append("\n");
    sb.append("    tilePosition: ").append(toIndentedString(tilePosition)).append("\n");
    sb.append("    tileCount: ").append(toIndentedString(tileCount)).append("\n");
    sb.append("    tileAspectRatio: ").append(toIndentedString(tileAspectRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TileOrder");
    openapiFields.add("TilePosition");
    openapiFields.add("TileCount");
    openapiFields.add("TileAspectRatio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GridViewConfigurationHorizontalLayoutConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GridViewConfigurationHorizontalLayoutConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GridViewConfigurationHorizontalLayoutConfiguration is not found in the empty JSON string", GridViewConfigurationHorizontalLayoutConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GridViewConfigurationHorizontalLayoutConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GridViewConfigurationHorizontalLayoutConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TileOrder`
      if (jsonObj.get("TileOrder") != null && !jsonObj.get("TileOrder").isJsonNull()) {
        TileOrder.validateJsonElement(jsonObj.get("TileOrder"));
      }
      // validate the optional field `TilePosition`
      if (jsonObj.get("TilePosition") != null && !jsonObj.get("TilePosition").isJsonNull()) {
        HorizontalTilePosition.validateJsonElement(jsonObj.get("TilePosition"));
      }
      // validate the optional field `TileCount`
      if (jsonObj.get("TileCount") != null && !jsonObj.get("TileCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TileCount"));
      }
      // validate the optional field `TileAspectRatio`
      if (jsonObj.get("TileAspectRatio") != null && !jsonObj.get("TileAspectRatio").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TileAspectRatio"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GridViewConfigurationHorizontalLayoutConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GridViewConfigurationHorizontalLayoutConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GridViewConfigurationHorizontalLayoutConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GridViewConfigurationHorizontalLayoutConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<GridViewConfigurationHorizontalLayoutConfiguration>() {
           @Override
           public void write(JsonWriter out, GridViewConfigurationHorizontalLayoutConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GridViewConfigurationHorizontalLayoutConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GridViewConfigurationHorizontalLayoutConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GridViewConfigurationHorizontalLayoutConfiguration
   * @throws IOException if the JSON string is invalid with respect to GridViewConfigurationHorizontalLayoutConfiguration
   */
  public static GridViewConfigurationHorizontalLayoutConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GridViewConfigurationHorizontalLayoutConfiguration.class);
  }

  /**
   * Convert an instance of GridViewConfigurationHorizontalLayoutConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

