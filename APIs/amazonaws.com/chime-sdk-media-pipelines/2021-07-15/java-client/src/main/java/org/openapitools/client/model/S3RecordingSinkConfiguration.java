/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RecordingFileFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The structure that holds the settings for transmitting media to the Amazon S3 bucket. These values are used as defaults if &lt;code&gt;S3RecordingSinkRuntimeConfiguration&lt;/code&gt; is not specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3RecordingSinkConfiguration {
  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_RECORDING_FILE_FORMAT = "RecordingFileFormat";
  @SerializedName(SERIALIZED_NAME_RECORDING_FILE_FORMAT)
  private RecordingFileFormat recordingFileFormat;

  public S3RecordingSinkConfiguration() {
  }

  public S3RecordingSinkConfiguration destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public S3RecordingSinkConfiguration recordingFileFormat(RecordingFileFormat recordingFileFormat) {
    this.recordingFileFormat = recordingFileFormat;
    return this;
  }

  /**
   * Get recordingFileFormat
   * @return recordingFileFormat
   */
  @javax.annotation.Nullable
  public RecordingFileFormat getRecordingFileFormat() {
    return recordingFileFormat;
  }

  public void setRecordingFileFormat(RecordingFileFormat recordingFileFormat) {
    this.recordingFileFormat = recordingFileFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3RecordingSinkConfiguration s3RecordingSinkConfiguration = (S3RecordingSinkConfiguration) o;
    return Objects.equals(this.destination, s3RecordingSinkConfiguration.destination) &&
        Objects.equals(this.recordingFileFormat, s3RecordingSinkConfiguration.recordingFileFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, recordingFileFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3RecordingSinkConfiguration {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    recordingFileFormat: ").append(toIndentedString(recordingFileFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Destination");
    openapiFields.add("RecordingFileFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3RecordingSinkConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3RecordingSinkConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3RecordingSinkConfiguration is not found in the empty JSON string", S3RecordingSinkConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3RecordingSinkConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3RecordingSinkConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Destination`
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Destination"));
      }
      // validate the optional field `RecordingFileFormat`
      if (jsonObj.get("RecordingFileFormat") != null && !jsonObj.get("RecordingFileFormat").isJsonNull()) {
        RecordingFileFormat.validateJsonElement(jsonObj.get("RecordingFileFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3RecordingSinkConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3RecordingSinkConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3RecordingSinkConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3RecordingSinkConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<S3RecordingSinkConfiguration>() {
           @Override
           public void write(JsonWriter out, S3RecordingSinkConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3RecordingSinkConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3RecordingSinkConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3RecordingSinkConfiguration
   * @throws IOException if the JSON string is invalid with respect to S3RecordingSinkConfiguration
   */
  public static S3RecordingSinkConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3RecordingSinkConfiguration.class);
  }

  /**
   * Convert an instance of S3RecordingSinkConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

