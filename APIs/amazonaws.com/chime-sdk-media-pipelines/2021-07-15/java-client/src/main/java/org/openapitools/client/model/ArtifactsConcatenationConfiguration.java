/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArtifactsConcatenationConfigurationAudio;
import org.openapitools.client.model.ArtifactsConcatenationConfigurationCompositedVideo;
import org.openapitools.client.model.ArtifactsConcatenationConfigurationContent;
import org.openapitools.client.model.ArtifactsConcatenationConfigurationDataChannel;
import org.openapitools.client.model.ArtifactsConcatenationConfigurationMeetingEvents;
import org.openapitools.client.model.ArtifactsConcatenationConfigurationTranscriptionMessages;
import org.openapitools.client.model.ArtifactsConcatenationConfigurationVideo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for the artifacts concatenation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArtifactsConcatenationConfiguration {
  public static final String SERIALIZED_NAME_AUDIO = "Audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private ArtifactsConcatenationConfigurationAudio audio;

  public static final String SERIALIZED_NAME_VIDEO = "Video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private ArtifactsConcatenationConfigurationVideo video;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private ArtifactsConcatenationConfigurationContent content;

  public static final String SERIALIZED_NAME_DATA_CHANNEL = "DataChannel";
  @SerializedName(SERIALIZED_NAME_DATA_CHANNEL)
  private ArtifactsConcatenationConfigurationDataChannel dataChannel;

  public static final String SERIALIZED_NAME_TRANSCRIPTION_MESSAGES = "TranscriptionMessages";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPTION_MESSAGES)
  private ArtifactsConcatenationConfigurationTranscriptionMessages transcriptionMessages;

  public static final String SERIALIZED_NAME_MEETING_EVENTS = "MeetingEvents";
  @SerializedName(SERIALIZED_NAME_MEETING_EVENTS)
  private ArtifactsConcatenationConfigurationMeetingEvents meetingEvents;

  public static final String SERIALIZED_NAME_COMPOSITED_VIDEO = "CompositedVideo";
  @SerializedName(SERIALIZED_NAME_COMPOSITED_VIDEO)
  private ArtifactsConcatenationConfigurationCompositedVideo compositedVideo;

  public ArtifactsConcatenationConfiguration() {
  }

  public ArtifactsConcatenationConfiguration audio(ArtifactsConcatenationConfigurationAudio audio) {
    this.audio = audio;
    return this;
  }

  /**
   * Get audio
   * @return audio
   */
  @javax.annotation.Nonnull
  public ArtifactsConcatenationConfigurationAudio getAudio() {
    return audio;
  }

  public void setAudio(ArtifactsConcatenationConfigurationAudio audio) {
    this.audio = audio;
  }


  public ArtifactsConcatenationConfiguration video(ArtifactsConcatenationConfigurationVideo video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nonnull
  public ArtifactsConcatenationConfigurationVideo getVideo() {
    return video;
  }

  public void setVideo(ArtifactsConcatenationConfigurationVideo video) {
    this.video = video;
  }


  public ArtifactsConcatenationConfiguration content(ArtifactsConcatenationConfigurationContent content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nonnull
  public ArtifactsConcatenationConfigurationContent getContent() {
    return content;
  }

  public void setContent(ArtifactsConcatenationConfigurationContent content) {
    this.content = content;
  }


  public ArtifactsConcatenationConfiguration dataChannel(ArtifactsConcatenationConfigurationDataChannel dataChannel) {
    this.dataChannel = dataChannel;
    return this;
  }

  /**
   * Get dataChannel
   * @return dataChannel
   */
  @javax.annotation.Nonnull
  public ArtifactsConcatenationConfigurationDataChannel getDataChannel() {
    return dataChannel;
  }

  public void setDataChannel(ArtifactsConcatenationConfigurationDataChannel dataChannel) {
    this.dataChannel = dataChannel;
  }


  public ArtifactsConcatenationConfiguration transcriptionMessages(ArtifactsConcatenationConfigurationTranscriptionMessages transcriptionMessages) {
    this.transcriptionMessages = transcriptionMessages;
    return this;
  }

  /**
   * Get transcriptionMessages
   * @return transcriptionMessages
   */
  @javax.annotation.Nonnull
  public ArtifactsConcatenationConfigurationTranscriptionMessages getTranscriptionMessages() {
    return transcriptionMessages;
  }

  public void setTranscriptionMessages(ArtifactsConcatenationConfigurationTranscriptionMessages transcriptionMessages) {
    this.transcriptionMessages = transcriptionMessages;
  }


  public ArtifactsConcatenationConfiguration meetingEvents(ArtifactsConcatenationConfigurationMeetingEvents meetingEvents) {
    this.meetingEvents = meetingEvents;
    return this;
  }

  /**
   * Get meetingEvents
   * @return meetingEvents
   */
  @javax.annotation.Nonnull
  public ArtifactsConcatenationConfigurationMeetingEvents getMeetingEvents() {
    return meetingEvents;
  }

  public void setMeetingEvents(ArtifactsConcatenationConfigurationMeetingEvents meetingEvents) {
    this.meetingEvents = meetingEvents;
  }


  public ArtifactsConcatenationConfiguration compositedVideo(ArtifactsConcatenationConfigurationCompositedVideo compositedVideo) {
    this.compositedVideo = compositedVideo;
    return this;
  }

  /**
   * Get compositedVideo
   * @return compositedVideo
   */
  @javax.annotation.Nonnull
  public ArtifactsConcatenationConfigurationCompositedVideo getCompositedVideo() {
    return compositedVideo;
  }

  public void setCompositedVideo(ArtifactsConcatenationConfigurationCompositedVideo compositedVideo) {
    this.compositedVideo = compositedVideo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtifactsConcatenationConfiguration artifactsConcatenationConfiguration = (ArtifactsConcatenationConfiguration) o;
    return Objects.equals(this.audio, artifactsConcatenationConfiguration.audio) &&
        Objects.equals(this.video, artifactsConcatenationConfiguration.video) &&
        Objects.equals(this.content, artifactsConcatenationConfiguration.content) &&
        Objects.equals(this.dataChannel, artifactsConcatenationConfiguration.dataChannel) &&
        Objects.equals(this.transcriptionMessages, artifactsConcatenationConfiguration.transcriptionMessages) &&
        Objects.equals(this.meetingEvents, artifactsConcatenationConfiguration.meetingEvents) &&
        Objects.equals(this.compositedVideo, artifactsConcatenationConfiguration.compositedVideo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audio, video, content, dataChannel, transcriptionMessages, meetingEvents, compositedVideo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtifactsConcatenationConfiguration {\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    dataChannel: ").append(toIndentedString(dataChannel)).append("\n");
    sb.append("    transcriptionMessages: ").append(toIndentedString(transcriptionMessages)).append("\n");
    sb.append("    meetingEvents: ").append(toIndentedString(meetingEvents)).append("\n");
    sb.append("    compositedVideo: ").append(toIndentedString(compositedVideo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Audio");
    openapiFields.add("Video");
    openapiFields.add("Content");
    openapiFields.add("DataChannel");
    openapiFields.add("TranscriptionMessages");
    openapiFields.add("MeetingEvents");
    openapiFields.add("CompositedVideo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Audio");
    openapiRequiredFields.add("Video");
    openapiRequiredFields.add("Content");
    openapiRequiredFields.add("DataChannel");
    openapiRequiredFields.add("TranscriptionMessages");
    openapiRequiredFields.add("MeetingEvents");
    openapiRequiredFields.add("CompositedVideo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtifactsConcatenationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtifactsConcatenationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtifactsConcatenationConfiguration is not found in the empty JSON string", ArtifactsConcatenationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtifactsConcatenationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtifactsConcatenationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArtifactsConcatenationConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Audio`
      ArtifactsConcatenationConfigurationAudio.validateJsonElement(jsonObj.get("Audio"));
      // validate the required field `Video`
      ArtifactsConcatenationConfigurationVideo.validateJsonElement(jsonObj.get("Video"));
      // validate the required field `Content`
      ArtifactsConcatenationConfigurationContent.validateJsonElement(jsonObj.get("Content"));
      // validate the required field `DataChannel`
      ArtifactsConcatenationConfigurationDataChannel.validateJsonElement(jsonObj.get("DataChannel"));
      // validate the required field `TranscriptionMessages`
      ArtifactsConcatenationConfigurationTranscriptionMessages.validateJsonElement(jsonObj.get("TranscriptionMessages"));
      // validate the required field `MeetingEvents`
      ArtifactsConcatenationConfigurationMeetingEvents.validateJsonElement(jsonObj.get("MeetingEvents"));
      // validate the required field `CompositedVideo`
      ArtifactsConcatenationConfigurationCompositedVideo.validateJsonElement(jsonObj.get("CompositedVideo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtifactsConcatenationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtifactsConcatenationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtifactsConcatenationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtifactsConcatenationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtifactsConcatenationConfiguration>() {
           @Override
           public void write(JsonWriter out, ArtifactsConcatenationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtifactsConcatenationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtifactsConcatenationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtifactsConcatenationConfiguration
   * @throws IOException if the JSON string is invalid with respect to ArtifactsConcatenationConfiguration
   */
  public static ArtifactsConcatenationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtifactsConcatenationConfiguration.class);
  }

  /**
   * Convert an instance of ArtifactsConcatenationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

