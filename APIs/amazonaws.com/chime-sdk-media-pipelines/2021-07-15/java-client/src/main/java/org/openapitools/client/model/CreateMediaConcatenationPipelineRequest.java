/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConcatenationSink;
import org.openapitools.client.model.ConcatenationSource;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMediaConcatenationPipelineRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMediaConcatenationPipelineRequest {
  public static final String SERIALIZED_NAME_SOURCES = "Sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<ConcatenationSource> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SINKS = "Sinks";
  @SerializedName(SERIALIZED_NAME_SINKS)
  private List<ConcatenationSink> sinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public CreateMediaConcatenationPipelineRequest() {
  }

  public CreateMediaConcatenationPipelineRequest sources(List<ConcatenationSource> sources) {
    this.sources = sources;
    return this;
  }

  public CreateMediaConcatenationPipelineRequest addSourcesItem(ConcatenationSource sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * An object that specifies the sources for the media concatenation pipeline.
   * @return sources
   */
  @javax.annotation.Nonnull
  public List<ConcatenationSource> getSources() {
    return sources;
  }

  public void setSources(List<ConcatenationSource> sources) {
    this.sources = sources;
  }


  public CreateMediaConcatenationPipelineRequest sinks(List<ConcatenationSink> sinks) {
    this.sinks = sinks;
    return this;
  }

  public CreateMediaConcatenationPipelineRequest addSinksItem(ConcatenationSink sinksItem) {
    if (this.sinks == null) {
      this.sinks = new ArrayList<>();
    }
    this.sinks.add(sinksItem);
    return this;
  }

  /**
   * An object that specifies the data sinks for the media concatenation pipeline.
   * @return sinks
   */
  @javax.annotation.Nonnull
  public List<ConcatenationSink> getSinks() {
    return sinks;
  }

  public void setSinks(List<ConcatenationSink> sinks) {
    this.sinks = sinks;
  }


  public CreateMediaConcatenationPipelineRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateMediaConcatenationPipelineRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateMediaConcatenationPipelineRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The tags associated with the media concatenation pipeline.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMediaConcatenationPipelineRequest createMediaConcatenationPipelineRequest = (CreateMediaConcatenationPipelineRequest) o;
    return Objects.equals(this.sources, createMediaConcatenationPipelineRequest.sources) &&
        Objects.equals(this.sinks, createMediaConcatenationPipelineRequest.sinks) &&
        Objects.equals(this.clientRequestToken, createMediaConcatenationPipelineRequest.clientRequestToken) &&
        Objects.equals(this.tags, createMediaConcatenationPipelineRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sources, sinks, clientRequestToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMediaConcatenationPipelineRequest {\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    sinks: ").append(toIndentedString(sinks)).append("\n");
    sb.append("    clientRequestToken: ").append("*").append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Sources");
    openapiFields.add("Sinks");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Sources");
    openapiRequiredFields.add("Sinks");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMediaConcatenationPipelineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMediaConcatenationPipelineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMediaConcatenationPipelineRequest is not found in the empty JSON string", CreateMediaConcatenationPipelineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMediaConcatenationPipelineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMediaConcatenationPipelineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMediaConcatenationPipelineRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sources` to be an array in the JSON string but got `%s`", jsonObj.get("Sources").toString()));
      }

      JsonArray jsonArraysources = jsonObj.getAsJsonArray("Sources");
      // validate the required field `Sources` (array)
      for (int i = 0; i < jsonArraysources.size(); i++) {
        ConcatenationSource.validateJsonElement(jsonArraysources.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Sinks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sinks` to be an array in the JSON string but got `%s`", jsonObj.get("Sinks").toString()));
      }

      JsonArray jsonArraysinks = jsonObj.getAsJsonArray("Sinks");
      // validate the required field `Sinks` (array)
      for (int i = 0; i < jsonArraysinks.size(); i++) {
        ConcatenationSink.validateJsonElement(jsonArraysinks.get(i));
      };
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMediaConcatenationPipelineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMediaConcatenationPipelineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMediaConcatenationPipelineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMediaConcatenationPipelineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMediaConcatenationPipelineRequest>() {
           @Override
           public void write(JsonWriter out, CreateMediaConcatenationPipelineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMediaConcatenationPipelineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMediaConcatenationPipelineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMediaConcatenationPipelineRequest
   * @throws IOException if the JSON string is invalid with respect to CreateMediaConcatenationPipelineRequest
   */
  public static CreateMediaConcatenationPipelineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMediaConcatenationPipelineRequest.class);
  }

  /**
   * Convert an instance of CreateMediaConcatenationPipelineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

