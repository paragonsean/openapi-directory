/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration;
import org.openapitools.client.model.MediaPipelineSinkType;
import org.openapitools.client.model.MediaPipelineSourceType;
import org.openapitools.client.model.MediaPipelineStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMediaCapturePipelineResponseMediaCapturePipeline
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMediaCapturePipelineResponseMediaCapturePipeline {
  public static final String SERIALIZED_NAME_MEDIA_PIPELINE_ID = "MediaPipelineId";
  @SerializedName(SERIALIZED_NAME_MEDIA_PIPELINE_ID)
  private String mediaPipelineId;

  public static final String SERIALIZED_NAME_MEDIA_PIPELINE_ARN = "MediaPipelineArn";
  @SerializedName(SERIALIZED_NAME_MEDIA_PIPELINE_ARN)
  private String mediaPipelineArn;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private MediaPipelineSourceType sourceType;

  public static final String SERIALIZED_NAME_SOURCE_ARN = "SourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARN)
  private String sourceArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MediaPipelineStatus status;

  public static final String SERIALIZED_NAME_SINK_TYPE = "SinkType";
  @SerializedName(SERIALIZED_NAME_SINK_TYPE)
  private MediaPipelineSinkType sinkType;

  public static final String SERIALIZED_NAME_SINK_ARN = "SinkArn";
  @SerializedName(SERIALIZED_NAME_SINK_ARN)
  private String sinkArn;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "UpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public static final String SERIALIZED_NAME_CHIME_SDK_MEETING_CONFIGURATION = "ChimeSdkMeetingConfiguration";
  @SerializedName(SERIALIZED_NAME_CHIME_SDK_MEETING_CONFIGURATION)
  private CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration chimeSdkMeetingConfiguration;

  public CreateMediaCapturePipelineResponseMediaCapturePipeline() {
  }

  public CreateMediaCapturePipelineResponseMediaCapturePipeline mediaPipelineId(String mediaPipelineId) {
    this.mediaPipelineId = mediaPipelineId;
    return this;
  }

  /**
   * Get mediaPipelineId
   * @return mediaPipelineId
   */
  @javax.annotation.Nullable
  public String getMediaPipelineId() {
    return mediaPipelineId;
  }

  public void setMediaPipelineId(String mediaPipelineId) {
    this.mediaPipelineId = mediaPipelineId;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline mediaPipelineArn(String mediaPipelineArn) {
    this.mediaPipelineArn = mediaPipelineArn;
    return this;
  }

  /**
   * Get mediaPipelineArn
   * @return mediaPipelineArn
   */
  @javax.annotation.Nullable
  public String getMediaPipelineArn() {
    return mediaPipelineArn;
  }

  public void setMediaPipelineArn(String mediaPipelineArn) {
    this.mediaPipelineArn = mediaPipelineArn;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline sourceType(MediaPipelineSourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public MediaPipelineSourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(MediaPipelineSourceType sourceType) {
    this.sourceType = sourceType;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline sourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
    return this;
  }

  /**
   * Get sourceArn
   * @return sourceArn
   */
  @javax.annotation.Nullable
  public String getSourceArn() {
    return sourceArn;
  }

  public void setSourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline status(MediaPipelineStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public MediaPipelineStatus getStatus() {
    return status;
  }

  public void setStatus(MediaPipelineStatus status) {
    this.status = status;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline sinkType(MediaPipelineSinkType sinkType) {
    this.sinkType = sinkType;
    return this;
  }

  /**
   * Get sinkType
   * @return sinkType
   */
  @javax.annotation.Nullable
  public MediaPipelineSinkType getSinkType() {
    return sinkType;
  }

  public void setSinkType(MediaPipelineSinkType sinkType) {
    this.sinkType = sinkType;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline sinkArn(String sinkArn) {
    this.sinkArn = sinkArn;
    return this;
  }

  /**
   * Get sinkArn
   * @return sinkArn
   */
  @javax.annotation.Nullable
  public String getSinkArn() {
    return sinkArn;
  }

  public void setSinkArn(String sinkArn) {
    this.sinkArn = sinkArn;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline updatedTimestamp(OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

  /**
   * Get updatedTimestamp
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public CreateMediaCapturePipelineResponseMediaCapturePipeline chimeSdkMeetingConfiguration(CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration chimeSdkMeetingConfiguration) {
    this.chimeSdkMeetingConfiguration = chimeSdkMeetingConfiguration;
    return this;
  }

  /**
   * Get chimeSdkMeetingConfiguration
   * @return chimeSdkMeetingConfiguration
   */
  @javax.annotation.Nullable
  public CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration getChimeSdkMeetingConfiguration() {
    return chimeSdkMeetingConfiguration;
  }

  public void setChimeSdkMeetingConfiguration(CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration chimeSdkMeetingConfiguration) {
    this.chimeSdkMeetingConfiguration = chimeSdkMeetingConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMediaCapturePipelineResponseMediaCapturePipeline createMediaCapturePipelineResponseMediaCapturePipeline = (CreateMediaCapturePipelineResponseMediaCapturePipeline) o;
    return Objects.equals(this.mediaPipelineId, createMediaCapturePipelineResponseMediaCapturePipeline.mediaPipelineId) &&
        Objects.equals(this.mediaPipelineArn, createMediaCapturePipelineResponseMediaCapturePipeline.mediaPipelineArn) &&
        Objects.equals(this.sourceType, createMediaCapturePipelineResponseMediaCapturePipeline.sourceType) &&
        Objects.equals(this.sourceArn, createMediaCapturePipelineResponseMediaCapturePipeline.sourceArn) &&
        Objects.equals(this.status, createMediaCapturePipelineResponseMediaCapturePipeline.status) &&
        Objects.equals(this.sinkType, createMediaCapturePipelineResponseMediaCapturePipeline.sinkType) &&
        Objects.equals(this.sinkArn, createMediaCapturePipelineResponseMediaCapturePipeline.sinkArn) &&
        Objects.equals(this.createdTimestamp, createMediaCapturePipelineResponseMediaCapturePipeline.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, createMediaCapturePipelineResponseMediaCapturePipeline.updatedTimestamp) &&
        Objects.equals(this.chimeSdkMeetingConfiguration, createMediaCapturePipelineResponseMediaCapturePipeline.chimeSdkMeetingConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaPipelineId, mediaPipelineArn, sourceType, sourceArn, status, sinkType, sinkArn, createdTimestamp, updatedTimestamp, chimeSdkMeetingConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMediaCapturePipelineResponseMediaCapturePipeline {\n");
    sb.append("    mediaPipelineId: ").append(toIndentedString(mediaPipelineId)).append("\n");
    sb.append("    mediaPipelineArn: ").append(toIndentedString(mediaPipelineArn)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceArn: ").append(toIndentedString(sourceArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sinkType: ").append(toIndentedString(sinkType)).append("\n");
    sb.append("    sinkArn: ").append(toIndentedString(sinkArn)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    chimeSdkMeetingConfiguration: ").append(toIndentedString(chimeSdkMeetingConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MediaPipelineId");
    openapiFields.add("MediaPipelineArn");
    openapiFields.add("SourceType");
    openapiFields.add("SourceArn");
    openapiFields.add("Status");
    openapiFields.add("SinkType");
    openapiFields.add("SinkArn");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("UpdatedTimestamp");
    openapiFields.add("ChimeSdkMeetingConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMediaCapturePipelineResponseMediaCapturePipeline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMediaCapturePipelineResponseMediaCapturePipeline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMediaCapturePipelineResponseMediaCapturePipeline is not found in the empty JSON string", CreateMediaCapturePipelineResponseMediaCapturePipeline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMediaCapturePipelineResponseMediaCapturePipeline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMediaCapturePipelineResponseMediaCapturePipeline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MediaPipelineId`
      if (jsonObj.get("MediaPipelineId") != null && !jsonObj.get("MediaPipelineId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaPipelineId"));
      }
      // validate the optional field `MediaPipelineArn`
      if (jsonObj.get("MediaPipelineArn") != null && !jsonObj.get("MediaPipelineArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaPipelineArn"));
      }
      // validate the optional field `SourceType`
      if (jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) {
        MediaPipelineSourceType.validateJsonElement(jsonObj.get("SourceType"));
      }
      // validate the optional field `SourceArn`
      if (jsonObj.get("SourceArn") != null && !jsonObj.get("SourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MediaPipelineStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `SinkType`
      if (jsonObj.get("SinkType") != null && !jsonObj.get("SinkType").isJsonNull()) {
        MediaPipelineSinkType.validateJsonElement(jsonObj.get("SinkType"));
      }
      // validate the optional field `SinkArn`
      if (jsonObj.get("SinkArn") != null && !jsonObj.get("SinkArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SinkArn"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `UpdatedTimestamp`
      if (jsonObj.get("UpdatedTimestamp") != null && !jsonObj.get("UpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedTimestamp"));
      }
      // validate the optional field `ChimeSdkMeetingConfiguration`
      if (jsonObj.get("ChimeSdkMeetingConfiguration") != null && !jsonObj.get("ChimeSdkMeetingConfiguration").isJsonNull()) {
        CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration.validateJsonElement(jsonObj.get("ChimeSdkMeetingConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMediaCapturePipelineResponseMediaCapturePipeline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMediaCapturePipelineResponseMediaCapturePipeline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMediaCapturePipelineResponseMediaCapturePipeline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMediaCapturePipelineResponseMediaCapturePipeline.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMediaCapturePipelineResponseMediaCapturePipeline>() {
           @Override
           public void write(JsonWriter out, CreateMediaCapturePipelineResponseMediaCapturePipeline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMediaCapturePipelineResponseMediaCapturePipeline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMediaCapturePipelineResponseMediaCapturePipeline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMediaCapturePipelineResponseMediaCapturePipeline
   * @throws IOException if the JSON string is invalid with respect to CreateMediaCapturePipelineResponseMediaCapturePipeline
   */
  public static CreateMediaCapturePipelineResponseMediaCapturePipeline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMediaCapturePipelineResponseMediaCapturePipeline.class);
  }

  /**
   * Convert an instance of CreateMediaCapturePipelineResponseMediaCapturePipeline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

