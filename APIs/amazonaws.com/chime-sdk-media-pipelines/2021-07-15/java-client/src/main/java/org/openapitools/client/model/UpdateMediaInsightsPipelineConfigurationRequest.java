/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration;
import org.openapitools.client.model.MediaInsightsPipelineConfigurationElement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateMediaInsightsPipelineConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateMediaInsightsPipelineConfigurationRequest {
  public static final String SERIALIZED_NAME_RESOURCE_ACCESS_ROLE_ARN = "ResourceAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ACCESS_ROLE_ARN)
  private String resourceAccessRoleArn;

  public static final String SERIALIZED_NAME_REAL_TIME_ALERT_CONFIGURATION = "RealTimeAlertConfiguration";
  @SerializedName(SERIALIZED_NAME_REAL_TIME_ALERT_CONFIGURATION)
  private CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration realTimeAlertConfiguration;

  public static final String SERIALIZED_NAME_ELEMENTS = "Elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<MediaInsightsPipelineConfigurationElement> elements = new ArrayList<>();

  public UpdateMediaInsightsPipelineConfigurationRequest() {
  }

  public UpdateMediaInsightsPipelineConfigurationRequest resourceAccessRoleArn(String resourceAccessRoleArn) {
    this.resourceAccessRoleArn = resourceAccessRoleArn;
    return this;
  }

  /**
   * The ARN of the role used by the service to access Amazon Web Services resources.
   * @return resourceAccessRoleArn
   */
  @javax.annotation.Nonnull
  public String getResourceAccessRoleArn() {
    return resourceAccessRoleArn;
  }

  public void setResourceAccessRoleArn(String resourceAccessRoleArn) {
    this.resourceAccessRoleArn = resourceAccessRoleArn;
  }


  public UpdateMediaInsightsPipelineConfigurationRequest realTimeAlertConfiguration(CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration realTimeAlertConfiguration) {
    this.realTimeAlertConfiguration = realTimeAlertConfiguration;
    return this;
  }

  /**
   * Get realTimeAlertConfiguration
   * @return realTimeAlertConfiguration
   */
  @javax.annotation.Nullable
  public CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration getRealTimeAlertConfiguration() {
    return realTimeAlertConfiguration;
  }

  public void setRealTimeAlertConfiguration(CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration realTimeAlertConfiguration) {
    this.realTimeAlertConfiguration = realTimeAlertConfiguration;
  }


  public UpdateMediaInsightsPipelineConfigurationRequest elements(List<MediaInsightsPipelineConfigurationElement> elements) {
    this.elements = elements;
    return this;
  }

  public UpdateMediaInsightsPipelineConfigurationRequest addElementsItem(MediaInsightsPipelineConfigurationElement elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * The elements in the request, such as a processor for Amazon Transcribe or a sink for a Kinesis Data Stream..
   * @return elements
   */
  @javax.annotation.Nonnull
  public List<MediaInsightsPipelineConfigurationElement> getElements() {
    return elements;
  }

  public void setElements(List<MediaInsightsPipelineConfigurationElement> elements) {
    this.elements = elements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateMediaInsightsPipelineConfigurationRequest updateMediaInsightsPipelineConfigurationRequest = (UpdateMediaInsightsPipelineConfigurationRequest) o;
    return Objects.equals(this.resourceAccessRoleArn, updateMediaInsightsPipelineConfigurationRequest.resourceAccessRoleArn) &&
        Objects.equals(this.realTimeAlertConfiguration, updateMediaInsightsPipelineConfigurationRequest.realTimeAlertConfiguration) &&
        Objects.equals(this.elements, updateMediaInsightsPipelineConfigurationRequest.elements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceAccessRoleArn, realTimeAlertConfiguration, elements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateMediaInsightsPipelineConfigurationRequest {\n");
    sb.append("    resourceAccessRoleArn: ").append("*").append("\n");
    sb.append("    realTimeAlertConfiguration: ").append(toIndentedString(realTimeAlertConfiguration)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceAccessRoleArn");
    openapiFields.add("RealTimeAlertConfiguration");
    openapiFields.add("Elements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ResourceAccessRoleArn");
    openapiRequiredFields.add("Elements");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateMediaInsightsPipelineConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateMediaInsightsPipelineConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateMediaInsightsPipelineConfigurationRequest is not found in the empty JSON string", UpdateMediaInsightsPipelineConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateMediaInsightsPipelineConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateMediaInsightsPipelineConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateMediaInsightsPipelineConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ResourceAccessRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceAccessRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceAccessRoleArn").toString()));
      }
      // validate the optional field `RealTimeAlertConfiguration`
      if (jsonObj.get("RealTimeAlertConfiguration") != null && !jsonObj.get("RealTimeAlertConfiguration").isJsonNull()) {
        CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration.validateJsonElement(jsonObj.get("RealTimeAlertConfiguration"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Elements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Elements` to be an array in the JSON string but got `%s`", jsonObj.get("Elements").toString()));
      }

      JsonArray jsonArrayelements = jsonObj.getAsJsonArray("Elements");
      // validate the required field `Elements` (array)
      for (int i = 0; i < jsonArrayelements.size(); i++) {
        MediaInsightsPipelineConfigurationElement.validateJsonElement(jsonArrayelements.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateMediaInsightsPipelineConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateMediaInsightsPipelineConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateMediaInsightsPipelineConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateMediaInsightsPipelineConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateMediaInsightsPipelineConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateMediaInsightsPipelineConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateMediaInsightsPipelineConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateMediaInsightsPipelineConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateMediaInsightsPipelineConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateMediaInsightsPipelineConfigurationRequest
   */
  public static UpdateMediaInsightsPipelineConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateMediaInsightsPipelineConfigurationRequest.class);
  }

  /**
   * Convert an instance of UpdateMediaInsightsPipelineConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

