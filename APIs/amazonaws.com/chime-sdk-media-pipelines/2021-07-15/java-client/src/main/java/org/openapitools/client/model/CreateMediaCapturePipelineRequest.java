/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMediaCapturePipelineRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMediaCapturePipelineRequest {
  /**
   * Source type from which the media artifacts are captured. A Chime SDK Meeting is the only supported source.
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    CHIME_SDK_MEETING("ChimeSdkMeeting");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  public static final String SERIALIZED_NAME_SOURCE_ARN = "SourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARN)
  private String sourceArn;

  /**
   * Destination type to which the media artifacts are saved. You must use an S3 bucket.
   */
  @JsonAdapter(SinkTypeEnum.Adapter.class)
  public enum SinkTypeEnum {
    S3_BUCKET("S3Bucket");

    private String value;

    SinkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SinkTypeEnum fromValue(String value) {
      for (SinkTypeEnum b : SinkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SinkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SinkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SinkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SinkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SinkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SINK_TYPE = "SinkType";
  @SerializedName(SERIALIZED_NAME_SINK_TYPE)
  private SinkTypeEnum sinkType;

  public static final String SERIALIZED_NAME_SINK_ARN = "SinkArn";
  @SerializedName(SERIALIZED_NAME_SINK_ARN)
  private String sinkArn;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_CHIME_SDK_MEETING_CONFIGURATION = "ChimeSdkMeetingConfiguration";
  @SerializedName(SERIALIZED_NAME_CHIME_SDK_MEETING_CONFIGURATION)
  private CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration chimeSdkMeetingConfiguration;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public CreateMediaCapturePipelineRequest() {
  }

  public CreateMediaCapturePipelineRequest sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Source type from which the media artifacts are captured. A Chime SDK Meeting is the only supported source.
   * @return sourceType
   */
  @javax.annotation.Nonnull
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public CreateMediaCapturePipelineRequest sourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
    return this;
  }

  /**
   * ARN of the source from which the media artifacts are captured.
   * @return sourceArn
   */
  @javax.annotation.Nonnull
  public String getSourceArn() {
    return sourceArn;
  }

  public void setSourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
  }


  public CreateMediaCapturePipelineRequest sinkType(SinkTypeEnum sinkType) {
    this.sinkType = sinkType;
    return this;
  }

  /**
   * Destination type to which the media artifacts are saved. You must use an S3 bucket.
   * @return sinkType
   */
  @javax.annotation.Nonnull
  public SinkTypeEnum getSinkType() {
    return sinkType;
  }

  public void setSinkType(SinkTypeEnum sinkType) {
    this.sinkType = sinkType;
  }


  public CreateMediaCapturePipelineRequest sinkArn(String sinkArn) {
    this.sinkArn = sinkArn;
    return this;
  }

  /**
   * The ARN of the sink type.
   * @return sinkArn
   */
  @javax.annotation.Nonnull
  public String getSinkArn() {
    return sinkArn;
  }

  public void setSinkArn(String sinkArn) {
    this.sinkArn = sinkArn;
  }


  public CreateMediaCapturePipelineRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media pipeline request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateMediaCapturePipelineRequest chimeSdkMeetingConfiguration(CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration chimeSdkMeetingConfiguration) {
    this.chimeSdkMeetingConfiguration = chimeSdkMeetingConfiguration;
    return this;
  }

  /**
   * Get chimeSdkMeetingConfiguration
   * @return chimeSdkMeetingConfiguration
   */
  @javax.annotation.Nullable
  public CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration getChimeSdkMeetingConfiguration() {
    return chimeSdkMeetingConfiguration;
  }

  public void setChimeSdkMeetingConfiguration(CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration chimeSdkMeetingConfiguration) {
    this.chimeSdkMeetingConfiguration = chimeSdkMeetingConfiguration;
  }


  public CreateMediaCapturePipelineRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateMediaCapturePipelineRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The tag key-value pairs.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMediaCapturePipelineRequest createMediaCapturePipelineRequest = (CreateMediaCapturePipelineRequest) o;
    return Objects.equals(this.sourceType, createMediaCapturePipelineRequest.sourceType) &&
        Objects.equals(this.sourceArn, createMediaCapturePipelineRequest.sourceArn) &&
        Objects.equals(this.sinkType, createMediaCapturePipelineRequest.sinkType) &&
        Objects.equals(this.sinkArn, createMediaCapturePipelineRequest.sinkArn) &&
        Objects.equals(this.clientRequestToken, createMediaCapturePipelineRequest.clientRequestToken) &&
        Objects.equals(this.chimeSdkMeetingConfiguration, createMediaCapturePipelineRequest.chimeSdkMeetingConfiguration) &&
        Objects.equals(this.tags, createMediaCapturePipelineRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceType, sourceArn, sinkType, sinkArn, clientRequestToken, chimeSdkMeetingConfiguration, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMediaCapturePipelineRequest {\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceArn: ").append("*").append("\n");
    sb.append("    sinkType: ").append(toIndentedString(sinkType)).append("\n");
    sb.append("    sinkArn: ").append("*").append("\n");
    sb.append("    clientRequestToken: ").append("*").append("\n");
    sb.append("    chimeSdkMeetingConfiguration: ").append(toIndentedString(chimeSdkMeetingConfiguration)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceType");
    openapiFields.add("SourceArn");
    openapiFields.add("SinkType");
    openapiFields.add("SinkArn");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("ChimeSdkMeetingConfiguration");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceType");
    openapiRequiredFields.add("SourceArn");
    openapiRequiredFields.add("SinkType");
    openapiRequiredFields.add("SinkArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMediaCapturePipelineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMediaCapturePipelineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMediaCapturePipelineRequest is not found in the empty JSON string", CreateMediaCapturePipelineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMediaCapturePipelineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMediaCapturePipelineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMediaCapturePipelineRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("SourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceType").toString()));
      }
      // validate the required field `SourceType`
      SourceTypeEnum.validateJsonElement(jsonObj.get("SourceType"));
      if (!jsonObj.get("SourceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceArn").toString()));
      }
      if (!jsonObj.get("SinkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SinkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SinkType").toString()));
      }
      // validate the required field `SinkType`
      SinkTypeEnum.validateJsonElement(jsonObj.get("SinkType"));
      if (!jsonObj.get("SinkArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SinkArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SinkArn").toString()));
      }
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      // validate the optional field `ChimeSdkMeetingConfiguration`
      if (jsonObj.get("ChimeSdkMeetingConfiguration") != null && !jsonObj.get("ChimeSdkMeetingConfiguration").isJsonNull()) {
        CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration.validateJsonElement(jsonObj.get("ChimeSdkMeetingConfiguration"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMediaCapturePipelineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMediaCapturePipelineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMediaCapturePipelineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMediaCapturePipelineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMediaCapturePipelineRequest>() {
           @Override
           public void write(JsonWriter out, CreateMediaCapturePipelineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMediaCapturePipelineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMediaCapturePipelineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMediaCapturePipelineRequest
   * @throws IOException if the JSON string is invalid with respect to CreateMediaCapturePipelineRequest
   */
  public static CreateMediaCapturePipelineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMediaCapturePipelineRequest.class);
  }

  /**
   * Convert an instance of CreateMediaCapturePipelineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

