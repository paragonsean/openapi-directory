/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration;
import org.openapitools.client.model.LiveConnectorSourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data source configuration object of a streaming media pipeline.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveConnectorSourceConfiguration {
  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private LiveConnectorSourceType sourceType;

  public static final String SERIALIZED_NAME_CHIME_SDK_MEETING_LIVE_CONNECTOR_CONFIGURATION = "ChimeSdkMeetingLiveConnectorConfiguration";
  @SerializedName(SERIALIZED_NAME_CHIME_SDK_MEETING_LIVE_CONNECTOR_CONFIGURATION)
  private LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration chimeSdkMeetingLiveConnectorConfiguration;

  public LiveConnectorSourceConfiguration() {
  }

  public LiveConnectorSourceConfiguration sourceType(LiveConnectorSourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nonnull
  public LiveConnectorSourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(LiveConnectorSourceType sourceType) {
    this.sourceType = sourceType;
  }


  public LiveConnectorSourceConfiguration chimeSdkMeetingLiveConnectorConfiguration(LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration chimeSdkMeetingLiveConnectorConfiguration) {
    this.chimeSdkMeetingLiveConnectorConfiguration = chimeSdkMeetingLiveConnectorConfiguration;
    return this;
  }

  /**
   * Get chimeSdkMeetingLiveConnectorConfiguration
   * @return chimeSdkMeetingLiveConnectorConfiguration
   */
  @javax.annotation.Nonnull
  public LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration getChimeSdkMeetingLiveConnectorConfiguration() {
    return chimeSdkMeetingLiveConnectorConfiguration;
  }

  public void setChimeSdkMeetingLiveConnectorConfiguration(LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration chimeSdkMeetingLiveConnectorConfiguration) {
    this.chimeSdkMeetingLiveConnectorConfiguration = chimeSdkMeetingLiveConnectorConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveConnectorSourceConfiguration liveConnectorSourceConfiguration = (LiveConnectorSourceConfiguration) o;
    return Objects.equals(this.sourceType, liveConnectorSourceConfiguration.sourceType) &&
        Objects.equals(this.chimeSdkMeetingLiveConnectorConfiguration, liveConnectorSourceConfiguration.chimeSdkMeetingLiveConnectorConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceType, chimeSdkMeetingLiveConnectorConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveConnectorSourceConfiguration {\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    chimeSdkMeetingLiveConnectorConfiguration: ").append(toIndentedString(chimeSdkMeetingLiveConnectorConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceType");
    openapiFields.add("ChimeSdkMeetingLiveConnectorConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceType");
    openapiRequiredFields.add("ChimeSdkMeetingLiveConnectorConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveConnectorSourceConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveConnectorSourceConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveConnectorSourceConfiguration is not found in the empty JSON string", LiveConnectorSourceConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveConnectorSourceConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveConnectorSourceConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveConnectorSourceConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceType`
      LiveConnectorSourceType.validateJsonElement(jsonObj.get("SourceType"));
      // validate the required field `ChimeSdkMeetingLiveConnectorConfiguration`
      LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration.validateJsonElement(jsonObj.get("ChimeSdkMeetingLiveConnectorConfiguration"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveConnectorSourceConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveConnectorSourceConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveConnectorSourceConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveConnectorSourceConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveConnectorSourceConfiguration>() {
           @Override
           public void write(JsonWriter out, LiveConnectorSourceConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveConnectorSourceConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveConnectorSourceConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveConnectorSourceConfiguration
   * @throws IOException if the JSON string is invalid with respect to LiveConnectorSourceConfiguration
   */
  public static LiveConnectorSourceConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveConnectorSourceConfiguration.class);
  }

  /**
   * Convert an instance of LiveConnectorSourceConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

