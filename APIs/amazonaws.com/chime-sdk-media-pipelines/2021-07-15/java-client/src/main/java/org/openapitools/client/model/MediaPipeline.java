/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MediaPipelineMediaCapturePipeline;
import org.openapitools.client.model.MediaPipelineMediaConcatenationPipeline;
import org.openapitools.client.model.MediaPipelineMediaInsightsPipeline;
import org.openapitools.client.model.MediaPipelineMediaLiveConnectorPipeline;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A pipeline consisting of a media capture, media concatenation, or live-streaming pipeline.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaPipeline {
  public static final String SERIALIZED_NAME_MEDIA_CAPTURE_PIPELINE = "MediaCapturePipeline";
  @SerializedName(SERIALIZED_NAME_MEDIA_CAPTURE_PIPELINE)
  private MediaPipelineMediaCapturePipeline mediaCapturePipeline;

  public static final String SERIALIZED_NAME_MEDIA_LIVE_CONNECTOR_PIPELINE = "MediaLiveConnectorPipeline";
  @SerializedName(SERIALIZED_NAME_MEDIA_LIVE_CONNECTOR_PIPELINE)
  private MediaPipelineMediaLiveConnectorPipeline mediaLiveConnectorPipeline;

  public static final String SERIALIZED_NAME_MEDIA_CONCATENATION_PIPELINE = "MediaConcatenationPipeline";
  @SerializedName(SERIALIZED_NAME_MEDIA_CONCATENATION_PIPELINE)
  private MediaPipelineMediaConcatenationPipeline mediaConcatenationPipeline;

  public static final String SERIALIZED_NAME_MEDIA_INSIGHTS_PIPELINE = "MediaInsightsPipeline";
  @SerializedName(SERIALIZED_NAME_MEDIA_INSIGHTS_PIPELINE)
  private MediaPipelineMediaInsightsPipeline mediaInsightsPipeline;

  public MediaPipeline() {
  }

  public MediaPipeline mediaCapturePipeline(MediaPipelineMediaCapturePipeline mediaCapturePipeline) {
    this.mediaCapturePipeline = mediaCapturePipeline;
    return this;
  }

  /**
   * Get mediaCapturePipeline
   * @return mediaCapturePipeline
   */
  @javax.annotation.Nullable
  public MediaPipelineMediaCapturePipeline getMediaCapturePipeline() {
    return mediaCapturePipeline;
  }

  public void setMediaCapturePipeline(MediaPipelineMediaCapturePipeline mediaCapturePipeline) {
    this.mediaCapturePipeline = mediaCapturePipeline;
  }


  public MediaPipeline mediaLiveConnectorPipeline(MediaPipelineMediaLiveConnectorPipeline mediaLiveConnectorPipeline) {
    this.mediaLiveConnectorPipeline = mediaLiveConnectorPipeline;
    return this;
  }

  /**
   * Get mediaLiveConnectorPipeline
   * @return mediaLiveConnectorPipeline
   */
  @javax.annotation.Nullable
  public MediaPipelineMediaLiveConnectorPipeline getMediaLiveConnectorPipeline() {
    return mediaLiveConnectorPipeline;
  }

  public void setMediaLiveConnectorPipeline(MediaPipelineMediaLiveConnectorPipeline mediaLiveConnectorPipeline) {
    this.mediaLiveConnectorPipeline = mediaLiveConnectorPipeline;
  }


  public MediaPipeline mediaConcatenationPipeline(MediaPipelineMediaConcatenationPipeline mediaConcatenationPipeline) {
    this.mediaConcatenationPipeline = mediaConcatenationPipeline;
    return this;
  }

  /**
   * Get mediaConcatenationPipeline
   * @return mediaConcatenationPipeline
   */
  @javax.annotation.Nullable
  public MediaPipelineMediaConcatenationPipeline getMediaConcatenationPipeline() {
    return mediaConcatenationPipeline;
  }

  public void setMediaConcatenationPipeline(MediaPipelineMediaConcatenationPipeline mediaConcatenationPipeline) {
    this.mediaConcatenationPipeline = mediaConcatenationPipeline;
  }


  public MediaPipeline mediaInsightsPipeline(MediaPipelineMediaInsightsPipeline mediaInsightsPipeline) {
    this.mediaInsightsPipeline = mediaInsightsPipeline;
    return this;
  }

  /**
   * Get mediaInsightsPipeline
   * @return mediaInsightsPipeline
   */
  @javax.annotation.Nullable
  public MediaPipelineMediaInsightsPipeline getMediaInsightsPipeline() {
    return mediaInsightsPipeline;
  }

  public void setMediaInsightsPipeline(MediaPipelineMediaInsightsPipeline mediaInsightsPipeline) {
    this.mediaInsightsPipeline = mediaInsightsPipeline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaPipeline mediaPipeline = (MediaPipeline) o;
    return Objects.equals(this.mediaCapturePipeline, mediaPipeline.mediaCapturePipeline) &&
        Objects.equals(this.mediaLiveConnectorPipeline, mediaPipeline.mediaLiveConnectorPipeline) &&
        Objects.equals(this.mediaConcatenationPipeline, mediaPipeline.mediaConcatenationPipeline) &&
        Objects.equals(this.mediaInsightsPipeline, mediaPipeline.mediaInsightsPipeline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaCapturePipeline, mediaLiveConnectorPipeline, mediaConcatenationPipeline, mediaInsightsPipeline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaPipeline {\n");
    sb.append("    mediaCapturePipeline: ").append(toIndentedString(mediaCapturePipeline)).append("\n");
    sb.append("    mediaLiveConnectorPipeline: ").append(toIndentedString(mediaLiveConnectorPipeline)).append("\n");
    sb.append("    mediaConcatenationPipeline: ").append(toIndentedString(mediaConcatenationPipeline)).append("\n");
    sb.append("    mediaInsightsPipeline: ").append(toIndentedString(mediaInsightsPipeline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MediaCapturePipeline");
    openapiFields.add("MediaLiveConnectorPipeline");
    openapiFields.add("MediaConcatenationPipeline");
    openapiFields.add("MediaInsightsPipeline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaPipeline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaPipeline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaPipeline is not found in the empty JSON string", MediaPipeline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaPipeline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaPipeline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MediaCapturePipeline`
      if (jsonObj.get("MediaCapturePipeline") != null && !jsonObj.get("MediaCapturePipeline").isJsonNull()) {
        MediaPipelineMediaCapturePipeline.validateJsonElement(jsonObj.get("MediaCapturePipeline"));
      }
      // validate the optional field `MediaLiveConnectorPipeline`
      if (jsonObj.get("MediaLiveConnectorPipeline") != null && !jsonObj.get("MediaLiveConnectorPipeline").isJsonNull()) {
        MediaPipelineMediaLiveConnectorPipeline.validateJsonElement(jsonObj.get("MediaLiveConnectorPipeline"));
      }
      // validate the optional field `MediaConcatenationPipeline`
      if (jsonObj.get("MediaConcatenationPipeline") != null && !jsonObj.get("MediaConcatenationPipeline").isJsonNull()) {
        MediaPipelineMediaConcatenationPipeline.validateJsonElement(jsonObj.get("MediaConcatenationPipeline"));
      }
      // validate the optional field `MediaInsightsPipeline`
      if (jsonObj.get("MediaInsightsPipeline") != null && !jsonObj.get("MediaInsightsPipeline").isJsonNull()) {
        MediaPipelineMediaInsightsPipeline.validateJsonElement(jsonObj.get("MediaInsightsPipeline"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaPipeline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaPipeline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaPipeline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaPipeline.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaPipeline>() {
           @Override
           public void write(JsonWriter out, MediaPipeline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaPipeline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaPipeline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaPipeline
   * @throws IOException if the JSON string is invalid with respect to MediaPipeline
   */
  public static MediaPipeline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaPipeline.class);
  }

  /**
   * Convert an instance of MediaPipeline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

