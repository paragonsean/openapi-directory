/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration;
import org.openapitools.client.model.MediaInsightsPipelineKinesisVideoStreamSourceRuntimeConfiguration;
import org.openapitools.client.model.MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration;
import org.openapitools.client.model.MediaPipelineStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMediaInsightsPipelineResponseMediaInsightsPipeline
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMediaInsightsPipelineResponseMediaInsightsPipeline {
  public static final String SERIALIZED_NAME_MEDIA_PIPELINE_ID = "MediaPipelineId";
  @SerializedName(SERIALIZED_NAME_MEDIA_PIPELINE_ID)
  private String mediaPipelineId;

  public static final String SERIALIZED_NAME_MEDIA_PIPELINE_ARN = "MediaPipelineArn";
  @SerializedName(SERIALIZED_NAME_MEDIA_PIPELINE_ARN)
  private String mediaPipelineArn;

  public static final String SERIALIZED_NAME_MEDIA_INSIGHTS_PIPELINE_CONFIGURATION_ARN = "MediaInsightsPipelineConfigurationArn";
  @SerializedName(SERIALIZED_NAME_MEDIA_INSIGHTS_PIPELINE_CONFIGURATION_ARN)
  private String mediaInsightsPipelineConfigurationArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MediaPipelineStatus status;

  public static final String SERIALIZED_NAME_KINESIS_VIDEO_STREAM_SOURCE_RUNTIME_CONFIGURATION = "KinesisVideoStreamSourceRuntimeConfiguration";
  @SerializedName(SERIALIZED_NAME_KINESIS_VIDEO_STREAM_SOURCE_RUNTIME_CONFIGURATION)
  private MediaInsightsPipelineKinesisVideoStreamSourceRuntimeConfiguration kinesisVideoStreamSourceRuntimeConfiguration;

  public static final String SERIALIZED_NAME_MEDIA_INSIGHTS_RUNTIME_METADATA = "MediaInsightsRuntimeMetadata";
  @SerializedName(SERIALIZED_NAME_MEDIA_INSIGHTS_RUNTIME_METADATA)
  private Map mediaInsightsRuntimeMetadata;

  public static final String SERIALIZED_NAME_KINESIS_VIDEO_STREAM_RECORDING_SOURCE_RUNTIME_CONFIGURATION = "KinesisVideoStreamRecordingSourceRuntimeConfiguration";
  @SerializedName(SERIALIZED_NAME_KINESIS_VIDEO_STREAM_RECORDING_SOURCE_RUNTIME_CONFIGURATION)
  private MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration kinesisVideoStreamRecordingSourceRuntimeConfiguration;

  public static final String SERIALIZED_NAME_S3_RECORDING_SINK_RUNTIME_CONFIGURATION = "S3RecordingSinkRuntimeConfiguration";
  @SerializedName(SERIALIZED_NAME_S3_RECORDING_SINK_RUNTIME_CONFIGURATION)
  private MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration s3RecordingSinkRuntimeConfiguration;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline() {
  }

  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline mediaPipelineId(String mediaPipelineId) {
    this.mediaPipelineId = mediaPipelineId;
    return this;
  }

  /**
   * Get mediaPipelineId
   * @return mediaPipelineId
   */
  @javax.annotation.Nullable
  public String getMediaPipelineId() {
    return mediaPipelineId;
  }

  public void setMediaPipelineId(String mediaPipelineId) {
    this.mediaPipelineId = mediaPipelineId;
  }


  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline mediaPipelineArn(String mediaPipelineArn) {
    this.mediaPipelineArn = mediaPipelineArn;
    return this;
  }

  /**
   * Get mediaPipelineArn
   * @return mediaPipelineArn
   */
  @javax.annotation.Nullable
  public String getMediaPipelineArn() {
    return mediaPipelineArn;
  }

  public void setMediaPipelineArn(String mediaPipelineArn) {
    this.mediaPipelineArn = mediaPipelineArn;
  }


  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline mediaInsightsPipelineConfigurationArn(String mediaInsightsPipelineConfigurationArn) {
    this.mediaInsightsPipelineConfigurationArn = mediaInsightsPipelineConfigurationArn;
    return this;
  }

  /**
   * Get mediaInsightsPipelineConfigurationArn
   * @return mediaInsightsPipelineConfigurationArn
   */
  @javax.annotation.Nullable
  public String getMediaInsightsPipelineConfigurationArn() {
    return mediaInsightsPipelineConfigurationArn;
  }

  public void setMediaInsightsPipelineConfigurationArn(String mediaInsightsPipelineConfigurationArn) {
    this.mediaInsightsPipelineConfigurationArn = mediaInsightsPipelineConfigurationArn;
  }


  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline status(MediaPipelineStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public MediaPipelineStatus getStatus() {
    return status;
  }

  public void setStatus(MediaPipelineStatus status) {
    this.status = status;
  }


  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline kinesisVideoStreamSourceRuntimeConfiguration(MediaInsightsPipelineKinesisVideoStreamSourceRuntimeConfiguration kinesisVideoStreamSourceRuntimeConfiguration) {
    this.kinesisVideoStreamSourceRuntimeConfiguration = kinesisVideoStreamSourceRuntimeConfiguration;
    return this;
  }

  /**
   * Get kinesisVideoStreamSourceRuntimeConfiguration
   * @return kinesisVideoStreamSourceRuntimeConfiguration
   */
  @javax.annotation.Nullable
  public MediaInsightsPipelineKinesisVideoStreamSourceRuntimeConfiguration getKinesisVideoStreamSourceRuntimeConfiguration() {
    return kinesisVideoStreamSourceRuntimeConfiguration;
  }

  public void setKinesisVideoStreamSourceRuntimeConfiguration(MediaInsightsPipelineKinesisVideoStreamSourceRuntimeConfiguration kinesisVideoStreamSourceRuntimeConfiguration) {
    this.kinesisVideoStreamSourceRuntimeConfiguration = kinesisVideoStreamSourceRuntimeConfiguration;
  }


  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline mediaInsightsRuntimeMetadata(Map mediaInsightsRuntimeMetadata) {
    this.mediaInsightsRuntimeMetadata = mediaInsightsRuntimeMetadata;
    return this;
  }

  /**
   * Get mediaInsightsRuntimeMetadata
   * @return mediaInsightsRuntimeMetadata
   */
  @javax.annotation.Nullable
  public Map getMediaInsightsRuntimeMetadata() {
    return mediaInsightsRuntimeMetadata;
  }

  public void setMediaInsightsRuntimeMetadata(Map mediaInsightsRuntimeMetadata) {
    this.mediaInsightsRuntimeMetadata = mediaInsightsRuntimeMetadata;
  }


  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline kinesisVideoStreamRecordingSourceRuntimeConfiguration(MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration kinesisVideoStreamRecordingSourceRuntimeConfiguration) {
    this.kinesisVideoStreamRecordingSourceRuntimeConfiguration = kinesisVideoStreamRecordingSourceRuntimeConfiguration;
    return this;
  }

  /**
   * Get kinesisVideoStreamRecordingSourceRuntimeConfiguration
   * @return kinesisVideoStreamRecordingSourceRuntimeConfiguration
   */
  @javax.annotation.Nullable
  public MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration getKinesisVideoStreamRecordingSourceRuntimeConfiguration() {
    return kinesisVideoStreamRecordingSourceRuntimeConfiguration;
  }

  public void setKinesisVideoStreamRecordingSourceRuntimeConfiguration(MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration kinesisVideoStreamRecordingSourceRuntimeConfiguration) {
    this.kinesisVideoStreamRecordingSourceRuntimeConfiguration = kinesisVideoStreamRecordingSourceRuntimeConfiguration;
  }


  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline s3RecordingSinkRuntimeConfiguration(MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration s3RecordingSinkRuntimeConfiguration) {
    this.s3RecordingSinkRuntimeConfiguration = s3RecordingSinkRuntimeConfiguration;
    return this;
  }

  /**
   * Get s3RecordingSinkRuntimeConfiguration
   * @return s3RecordingSinkRuntimeConfiguration
   */
  @javax.annotation.Nullable
  public MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration getS3RecordingSinkRuntimeConfiguration() {
    return s3RecordingSinkRuntimeConfiguration;
  }

  public void setS3RecordingSinkRuntimeConfiguration(MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration s3RecordingSinkRuntimeConfiguration) {
    this.s3RecordingSinkRuntimeConfiguration = s3RecordingSinkRuntimeConfiguration;
  }


  public CreateMediaInsightsPipelineResponseMediaInsightsPipeline createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMediaInsightsPipelineResponseMediaInsightsPipeline createMediaInsightsPipelineResponseMediaInsightsPipeline = (CreateMediaInsightsPipelineResponseMediaInsightsPipeline) o;
    return Objects.equals(this.mediaPipelineId, createMediaInsightsPipelineResponseMediaInsightsPipeline.mediaPipelineId) &&
        Objects.equals(this.mediaPipelineArn, createMediaInsightsPipelineResponseMediaInsightsPipeline.mediaPipelineArn) &&
        Objects.equals(this.mediaInsightsPipelineConfigurationArn, createMediaInsightsPipelineResponseMediaInsightsPipeline.mediaInsightsPipelineConfigurationArn) &&
        Objects.equals(this.status, createMediaInsightsPipelineResponseMediaInsightsPipeline.status) &&
        Objects.equals(this.kinesisVideoStreamSourceRuntimeConfiguration, createMediaInsightsPipelineResponseMediaInsightsPipeline.kinesisVideoStreamSourceRuntimeConfiguration) &&
        Objects.equals(this.mediaInsightsRuntimeMetadata, createMediaInsightsPipelineResponseMediaInsightsPipeline.mediaInsightsRuntimeMetadata) &&
        Objects.equals(this.kinesisVideoStreamRecordingSourceRuntimeConfiguration, createMediaInsightsPipelineResponseMediaInsightsPipeline.kinesisVideoStreamRecordingSourceRuntimeConfiguration) &&
        Objects.equals(this.s3RecordingSinkRuntimeConfiguration, createMediaInsightsPipelineResponseMediaInsightsPipeline.s3RecordingSinkRuntimeConfiguration) &&
        Objects.equals(this.createdTimestamp, createMediaInsightsPipelineResponseMediaInsightsPipeline.createdTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaPipelineId, mediaPipelineArn, mediaInsightsPipelineConfigurationArn, status, kinesisVideoStreamSourceRuntimeConfiguration, mediaInsightsRuntimeMetadata, kinesisVideoStreamRecordingSourceRuntimeConfiguration, s3RecordingSinkRuntimeConfiguration, createdTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMediaInsightsPipelineResponseMediaInsightsPipeline {\n");
    sb.append("    mediaPipelineId: ").append(toIndentedString(mediaPipelineId)).append("\n");
    sb.append("    mediaPipelineArn: ").append(toIndentedString(mediaPipelineArn)).append("\n");
    sb.append("    mediaInsightsPipelineConfigurationArn: ").append(toIndentedString(mediaInsightsPipelineConfigurationArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    kinesisVideoStreamSourceRuntimeConfiguration: ").append(toIndentedString(kinesisVideoStreamSourceRuntimeConfiguration)).append("\n");
    sb.append("    mediaInsightsRuntimeMetadata: ").append(toIndentedString(mediaInsightsRuntimeMetadata)).append("\n");
    sb.append("    kinesisVideoStreamRecordingSourceRuntimeConfiguration: ").append(toIndentedString(kinesisVideoStreamRecordingSourceRuntimeConfiguration)).append("\n");
    sb.append("    s3RecordingSinkRuntimeConfiguration: ").append(toIndentedString(s3RecordingSinkRuntimeConfiguration)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MediaPipelineId");
    openapiFields.add("MediaPipelineArn");
    openapiFields.add("MediaInsightsPipelineConfigurationArn");
    openapiFields.add("Status");
    openapiFields.add("KinesisVideoStreamSourceRuntimeConfiguration");
    openapiFields.add("MediaInsightsRuntimeMetadata");
    openapiFields.add("KinesisVideoStreamRecordingSourceRuntimeConfiguration");
    openapiFields.add("S3RecordingSinkRuntimeConfiguration");
    openapiFields.add("CreatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMediaInsightsPipelineResponseMediaInsightsPipeline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMediaInsightsPipelineResponseMediaInsightsPipeline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMediaInsightsPipelineResponseMediaInsightsPipeline is not found in the empty JSON string", CreateMediaInsightsPipelineResponseMediaInsightsPipeline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMediaInsightsPipelineResponseMediaInsightsPipeline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMediaInsightsPipelineResponseMediaInsightsPipeline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MediaPipelineId`
      if (jsonObj.get("MediaPipelineId") != null && !jsonObj.get("MediaPipelineId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaPipelineId"));
      }
      // validate the optional field `MediaPipelineArn`
      if (jsonObj.get("MediaPipelineArn") != null && !jsonObj.get("MediaPipelineArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaPipelineArn"));
      }
      // validate the optional field `MediaInsightsPipelineConfigurationArn`
      if (jsonObj.get("MediaInsightsPipelineConfigurationArn") != null && !jsonObj.get("MediaInsightsPipelineConfigurationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaInsightsPipelineConfigurationArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MediaPipelineStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `KinesisVideoStreamSourceRuntimeConfiguration`
      if (jsonObj.get("KinesisVideoStreamSourceRuntimeConfiguration") != null && !jsonObj.get("KinesisVideoStreamSourceRuntimeConfiguration").isJsonNull()) {
        MediaInsightsPipelineKinesisVideoStreamSourceRuntimeConfiguration.validateJsonElement(jsonObj.get("KinesisVideoStreamSourceRuntimeConfiguration"));
      }
      // validate the optional field `MediaInsightsRuntimeMetadata`
      if (jsonObj.get("MediaInsightsRuntimeMetadata") != null && !jsonObj.get("MediaInsightsRuntimeMetadata").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("MediaInsightsRuntimeMetadata"));
      }
      // validate the optional field `KinesisVideoStreamRecordingSourceRuntimeConfiguration`
      if (jsonObj.get("KinesisVideoStreamRecordingSourceRuntimeConfiguration") != null && !jsonObj.get("KinesisVideoStreamRecordingSourceRuntimeConfiguration").isJsonNull()) {
        MediaInsightsPipelineKinesisVideoStreamRecordingSourceRuntimeConfiguration.validateJsonElement(jsonObj.get("KinesisVideoStreamRecordingSourceRuntimeConfiguration"));
      }
      // validate the optional field `S3RecordingSinkRuntimeConfiguration`
      if (jsonObj.get("S3RecordingSinkRuntimeConfiguration") != null && !jsonObj.get("S3RecordingSinkRuntimeConfiguration").isJsonNull()) {
        MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.validateJsonElement(jsonObj.get("S3RecordingSinkRuntimeConfiguration"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMediaInsightsPipelineResponseMediaInsightsPipeline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMediaInsightsPipelineResponseMediaInsightsPipeline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMediaInsightsPipelineResponseMediaInsightsPipeline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMediaInsightsPipelineResponseMediaInsightsPipeline.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMediaInsightsPipelineResponseMediaInsightsPipeline>() {
           @Override
           public void write(JsonWriter out, CreateMediaInsightsPipelineResponseMediaInsightsPipeline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMediaInsightsPipelineResponseMediaInsightsPipeline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMediaInsightsPipelineResponseMediaInsightsPipeline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMediaInsightsPipelineResponseMediaInsightsPipeline
   * @throws IOException if the JSON string is invalid with respect to CreateMediaInsightsPipelineResponseMediaInsightsPipeline
   */
  public static CreateMediaInsightsPipelineResponseMediaInsightsPipeline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMediaInsightsPipelineResponseMediaInsightsPipeline.class);
  }

  /**
   * Convert an instance of CreateMediaInsightsPipelineResponseMediaInsightsPipeline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

