/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RecordingFileFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration {
  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_RECORDING_FILE_FORMAT = "RecordingFileFormat";
  @SerializedName(SERIALIZED_NAME_RECORDING_FILE_FORMAT)
  private RecordingFileFormat recordingFileFormat;

  public MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration() {
  }

  public MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration recordingFileFormat(RecordingFileFormat recordingFileFormat) {
    this.recordingFileFormat = recordingFileFormat;
    return this;
  }

  /**
   * Get recordingFileFormat
   * @return recordingFileFormat
   */
  @javax.annotation.Nonnull
  public RecordingFileFormat getRecordingFileFormat() {
    return recordingFileFormat;
  }

  public void setRecordingFileFormat(RecordingFileFormat recordingFileFormat) {
    this.recordingFileFormat = recordingFileFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration mediaInsightsPipelineS3RecordingSinkRuntimeConfiguration = (MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration) o;
    return Objects.equals(this.destination, mediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.destination) &&
        Objects.equals(this.recordingFileFormat, mediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.recordingFileFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, recordingFileFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    recordingFileFormat: ").append(toIndentedString(recordingFileFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Destination");
    openapiFields.add("RecordingFileFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Destination");
    openapiRequiredFields.add("RecordingFileFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration is not found in the empty JSON string", MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Destination`
      String.validateJsonElement(jsonObj.get("Destination"));
      // validate the required field `RecordingFileFormat`
      RecordingFileFormat.validateJsonElement(jsonObj.get("RecordingFileFormat"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration>() {
           @Override
           public void write(JsonWriter out, MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration
   * @throws IOException if the JSON string is invalid with respect to MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration
   */
  public static MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration.class);
  }

  /**
   * Convert an instance of MediaInsightsPipelineS3RecordingSinkRuntimeConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

