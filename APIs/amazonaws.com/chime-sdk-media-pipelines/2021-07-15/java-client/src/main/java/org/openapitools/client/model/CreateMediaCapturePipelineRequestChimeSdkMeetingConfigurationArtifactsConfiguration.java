/*
 * Amazon Chime SDK Media Pipelines
 * The Amazon Chime SDK media pipeline APIs in this section allow software developers to create Amazon Chime SDK media pipelines that capture, concatenate, or stream your Amazon Chime SDK meetings. For more information about media pipelines, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html\">Amazon Chime SDK media pipelines</a>. 
 *
 * The version of the OpenAPI document: 2021-07-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArtifactsConfigurationAudio;
import org.openapitools.client.model.ArtifactsConfigurationCompositedVideo;
import org.openapitools.client.model.ArtifactsConfigurationContent;
import org.openapitools.client.model.ArtifactsConfigurationVideo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:10.342276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration {
  public static final String SERIALIZED_NAME_AUDIO = "Audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private ArtifactsConfigurationAudio audio;

  public static final String SERIALIZED_NAME_VIDEO = "Video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private ArtifactsConfigurationVideo video;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private ArtifactsConfigurationContent content;

  public static final String SERIALIZED_NAME_COMPOSITED_VIDEO = "CompositedVideo";
  @SerializedName(SERIALIZED_NAME_COMPOSITED_VIDEO)
  private ArtifactsConfigurationCompositedVideo compositedVideo;

  public CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration() {
  }

  public CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration audio(ArtifactsConfigurationAudio audio) {
    this.audio = audio;
    return this;
  }

  /**
   * Get audio
   * @return audio
   */
  @javax.annotation.Nonnull
  public ArtifactsConfigurationAudio getAudio() {
    return audio;
  }

  public void setAudio(ArtifactsConfigurationAudio audio) {
    this.audio = audio;
  }


  public CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration video(ArtifactsConfigurationVideo video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nonnull
  public ArtifactsConfigurationVideo getVideo() {
    return video;
  }

  public void setVideo(ArtifactsConfigurationVideo video) {
    this.video = video;
  }


  public CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration content(ArtifactsConfigurationContent content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nonnull
  public ArtifactsConfigurationContent getContent() {
    return content;
  }

  public void setContent(ArtifactsConfigurationContent content) {
    this.content = content;
  }


  public CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration compositedVideo(ArtifactsConfigurationCompositedVideo compositedVideo) {
    this.compositedVideo = compositedVideo;
    return this;
  }

  /**
   * Get compositedVideo
   * @return compositedVideo
   */
  @javax.annotation.Nullable
  public ArtifactsConfigurationCompositedVideo getCompositedVideo() {
    return compositedVideo;
  }

  public void setCompositedVideo(ArtifactsConfigurationCompositedVideo compositedVideo) {
    this.compositedVideo = compositedVideo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration createMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration = (CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration) o;
    return Objects.equals(this.audio, createMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.audio) &&
        Objects.equals(this.video, createMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.video) &&
        Objects.equals(this.content, createMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.content) &&
        Objects.equals(this.compositedVideo, createMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.compositedVideo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audio, video, content, compositedVideo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration {\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    compositedVideo: ").append(toIndentedString(compositedVideo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Audio");
    openapiFields.add("Video");
    openapiFields.add("Content");
    openapiFields.add("CompositedVideo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Audio");
    openapiRequiredFields.add("Video");
    openapiRequiredFields.add("Content");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration is not found in the empty JSON string", CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Audio`
      ArtifactsConfigurationAudio.validateJsonElement(jsonObj.get("Audio"));
      // validate the required field `Video`
      ArtifactsConfigurationVideo.validateJsonElement(jsonObj.get("Video"));
      // validate the required field `Content`
      ArtifactsConfigurationContent.validateJsonElement(jsonObj.get("Content"));
      // validate the optional field `CompositedVideo`
      if (jsonObj.get("CompositedVideo") != null && !jsonObj.get("CompositedVideo").isJsonNull()) {
        ArtifactsConfigurationCompositedVideo.validateJsonElement(jsonObj.get("CompositedVideo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration>() {
           @Override
           public void write(JsonWriter out, CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration
   * @throws IOException if the JSON string is invalid with respect to CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration
   */
  public static CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.class);
  }

  /**
   * Convert an instance of CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

