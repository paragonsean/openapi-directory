# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_channels_option import AudioChannelsOption
from openapi_server import util


class LiveConnectorSinkConfigurationRTMPConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, audio_channels: AudioChannelsOption=None, audio_sample_rate: str=None):
        """LiveConnectorSinkConfigurationRTMPConfiguration - a model defined in OpenAPI

        :param url: The url of this LiveConnectorSinkConfigurationRTMPConfiguration.
        :param audio_channels: The audio_channels of this LiveConnectorSinkConfigurationRTMPConfiguration.
        :param audio_sample_rate: The audio_sample_rate of this LiveConnectorSinkConfigurationRTMPConfiguration.
        """
        self.openapi_types = {
            'url': str,
            'audio_channels': AudioChannelsOption,
            'audio_sample_rate': str
        }

        self.attribute_map = {
            'url': 'Url',
            'audio_channels': 'AudioChannels',
            'audio_sample_rate': 'AudioSampleRate'
        }

        self._url = url
        self._audio_channels = audio_channels
        self._audio_sample_rate = audio_sample_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveConnectorSinkConfigurationRTMPConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveConnectorSinkConfiguration_RTMPConfiguration of this LiveConnectorSinkConfigurationRTMPConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this LiveConnectorSinkConfigurationRTMPConfiguration.


        :return: The url of this LiveConnectorSinkConfigurationRTMPConfiguration.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LiveConnectorSinkConfigurationRTMPConfiguration.


        :param url: The url of this LiveConnectorSinkConfigurationRTMPConfiguration.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def audio_channels(self):
        """Gets the audio_channels of this LiveConnectorSinkConfigurationRTMPConfiguration.


        :return: The audio_channels of this LiveConnectorSinkConfigurationRTMPConfiguration.
        :rtype: AudioChannelsOption
        """
        return self._audio_channels

    @audio_channels.setter
    def audio_channels(self, audio_channels):
        """Sets the audio_channels of this LiveConnectorSinkConfigurationRTMPConfiguration.


        :param audio_channels: The audio_channels of this LiveConnectorSinkConfigurationRTMPConfiguration.
        :type audio_channels: AudioChannelsOption
        """

        self._audio_channels = audio_channels

    @property
    def audio_sample_rate(self):
        """Gets the audio_sample_rate of this LiveConnectorSinkConfigurationRTMPConfiguration.


        :return: The audio_sample_rate of this LiveConnectorSinkConfigurationRTMPConfiguration.
        :rtype: str
        """
        return self._audio_sample_rate

    @audio_sample_rate.setter
    def audio_sample_rate(self, audio_sample_rate):
        """Sets the audio_sample_rate of this LiveConnectorSinkConfigurationRTMPConfiguration.


        :param audio_sample_rate: The audio_sample_rate of this LiveConnectorSinkConfigurationRTMPConfiguration.
        :type audio_sample_rate: str
        """

        self._audio_sample_rate = audio_sample_rate
