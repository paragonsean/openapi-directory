# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_analytics_language_code import CallAnalyticsLanguageCode
from openapi_server.models.content_type import ContentType
from openapi_server.models.partial_results_stability import PartialResultsStability
from openapi_server.models.vocabulary_filter_method import VocabularyFilterMethod
from openapi_server import util


class AmazonTranscribeProcessorConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: CallAnalyticsLanguageCode=None, vocabulary_name: str=None, vocabulary_filter_name: str=None, vocabulary_filter_method: VocabularyFilterMethod=None, show_speaker_label: bool=None, enable_partial_results_stabilization: bool=None, partial_results_stability: PartialResultsStability=None, content_identification_type: ContentType=None, content_redaction_type: ContentType=None, pii_entity_types: str=None, language_model_name: str=None, filter_partial_results: bool=None, identify_language: bool=None, language_options: str=None, preferred_language: CallAnalyticsLanguageCode=None, vocabulary_names: str=None, vocabulary_filter_names: str=None):
        """AmazonTranscribeProcessorConfiguration - a model defined in OpenAPI

        :param language_code: The language_code of this AmazonTranscribeProcessorConfiguration.
        :param vocabulary_name: The vocabulary_name of this AmazonTranscribeProcessorConfiguration.
        :param vocabulary_filter_name: The vocabulary_filter_name of this AmazonTranscribeProcessorConfiguration.
        :param vocabulary_filter_method: The vocabulary_filter_method of this AmazonTranscribeProcessorConfiguration.
        :param show_speaker_label: The show_speaker_label of this AmazonTranscribeProcessorConfiguration.
        :param enable_partial_results_stabilization: The enable_partial_results_stabilization of this AmazonTranscribeProcessorConfiguration.
        :param partial_results_stability: The partial_results_stability of this AmazonTranscribeProcessorConfiguration.
        :param content_identification_type: The content_identification_type of this AmazonTranscribeProcessorConfiguration.
        :param content_redaction_type: The content_redaction_type of this AmazonTranscribeProcessorConfiguration.
        :param pii_entity_types: The pii_entity_types of this AmazonTranscribeProcessorConfiguration.
        :param language_model_name: The language_model_name of this AmazonTranscribeProcessorConfiguration.
        :param filter_partial_results: The filter_partial_results of this AmazonTranscribeProcessorConfiguration.
        :param identify_language: The identify_language of this AmazonTranscribeProcessorConfiguration.
        :param language_options: The language_options of this AmazonTranscribeProcessorConfiguration.
        :param preferred_language: The preferred_language of this AmazonTranscribeProcessorConfiguration.
        :param vocabulary_names: The vocabulary_names of this AmazonTranscribeProcessorConfiguration.
        :param vocabulary_filter_names: The vocabulary_filter_names of this AmazonTranscribeProcessorConfiguration.
        """
        self.openapi_types = {
            'language_code': CallAnalyticsLanguageCode,
            'vocabulary_name': str,
            'vocabulary_filter_name': str,
            'vocabulary_filter_method': VocabularyFilterMethod,
            'show_speaker_label': bool,
            'enable_partial_results_stabilization': bool,
            'partial_results_stability': PartialResultsStability,
            'content_identification_type': ContentType,
            'content_redaction_type': ContentType,
            'pii_entity_types': str,
            'language_model_name': str,
            'filter_partial_results': bool,
            'identify_language': bool,
            'language_options': str,
            'preferred_language': CallAnalyticsLanguageCode,
            'vocabulary_names': str,
            'vocabulary_filter_names': str
        }

        self.attribute_map = {
            'language_code': 'LanguageCode',
            'vocabulary_name': 'VocabularyName',
            'vocabulary_filter_name': 'VocabularyFilterName',
            'vocabulary_filter_method': 'VocabularyFilterMethod',
            'show_speaker_label': 'ShowSpeakerLabel',
            'enable_partial_results_stabilization': 'EnablePartialResultsStabilization',
            'partial_results_stability': 'PartialResultsStability',
            'content_identification_type': 'ContentIdentificationType',
            'content_redaction_type': 'ContentRedactionType',
            'pii_entity_types': 'PiiEntityTypes',
            'language_model_name': 'LanguageModelName',
            'filter_partial_results': 'FilterPartialResults',
            'identify_language': 'IdentifyLanguage',
            'language_options': 'LanguageOptions',
            'preferred_language': 'PreferredLanguage',
            'vocabulary_names': 'VocabularyNames',
            'vocabulary_filter_names': 'VocabularyFilterNames'
        }

        self._language_code = language_code
        self._vocabulary_name = vocabulary_name
        self._vocabulary_filter_name = vocabulary_filter_name
        self._vocabulary_filter_method = vocabulary_filter_method
        self._show_speaker_label = show_speaker_label
        self._enable_partial_results_stabilization = enable_partial_results_stabilization
        self._partial_results_stability = partial_results_stability
        self._content_identification_type = content_identification_type
        self._content_redaction_type = content_redaction_type
        self._pii_entity_types = pii_entity_types
        self._language_model_name = language_model_name
        self._filter_partial_results = filter_partial_results
        self._identify_language = identify_language
        self._language_options = language_options
        self._preferred_language = preferred_language
        self._vocabulary_names = vocabulary_names
        self._vocabulary_filter_names = vocabulary_filter_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmazonTranscribeProcessorConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmazonTranscribeProcessorConfiguration of this AmazonTranscribeProcessorConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this AmazonTranscribeProcessorConfiguration.


        :return: The language_code of this AmazonTranscribeProcessorConfiguration.
        :rtype: CallAnalyticsLanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this AmazonTranscribeProcessorConfiguration.


        :param language_code: The language_code of this AmazonTranscribeProcessorConfiguration.
        :type language_code: CallAnalyticsLanguageCode
        """

        self._language_code = language_code

    @property
    def vocabulary_name(self):
        """Gets the vocabulary_name of this AmazonTranscribeProcessorConfiguration.


        :return: The vocabulary_name of this AmazonTranscribeProcessorConfiguration.
        :rtype: str
        """
        return self._vocabulary_name

    @vocabulary_name.setter
    def vocabulary_name(self, vocabulary_name):
        """Sets the vocabulary_name of this AmazonTranscribeProcessorConfiguration.


        :param vocabulary_name: The vocabulary_name of this AmazonTranscribeProcessorConfiguration.
        :type vocabulary_name: str
        """

        self._vocabulary_name = vocabulary_name

    @property
    def vocabulary_filter_name(self):
        """Gets the vocabulary_filter_name of this AmazonTranscribeProcessorConfiguration.


        :return: The vocabulary_filter_name of this AmazonTranscribeProcessorConfiguration.
        :rtype: str
        """
        return self._vocabulary_filter_name

    @vocabulary_filter_name.setter
    def vocabulary_filter_name(self, vocabulary_filter_name):
        """Sets the vocabulary_filter_name of this AmazonTranscribeProcessorConfiguration.


        :param vocabulary_filter_name: The vocabulary_filter_name of this AmazonTranscribeProcessorConfiguration.
        :type vocabulary_filter_name: str
        """

        self._vocabulary_filter_name = vocabulary_filter_name

    @property
    def vocabulary_filter_method(self):
        """Gets the vocabulary_filter_method of this AmazonTranscribeProcessorConfiguration.


        :return: The vocabulary_filter_method of this AmazonTranscribeProcessorConfiguration.
        :rtype: VocabularyFilterMethod
        """
        return self._vocabulary_filter_method

    @vocabulary_filter_method.setter
    def vocabulary_filter_method(self, vocabulary_filter_method):
        """Sets the vocabulary_filter_method of this AmazonTranscribeProcessorConfiguration.


        :param vocabulary_filter_method: The vocabulary_filter_method of this AmazonTranscribeProcessorConfiguration.
        :type vocabulary_filter_method: VocabularyFilterMethod
        """

        self._vocabulary_filter_method = vocabulary_filter_method

    @property
    def show_speaker_label(self):
        """Gets the show_speaker_label of this AmazonTranscribeProcessorConfiguration.


        :return: The show_speaker_label of this AmazonTranscribeProcessorConfiguration.
        :rtype: bool
        """
        return self._show_speaker_label

    @show_speaker_label.setter
    def show_speaker_label(self, show_speaker_label):
        """Sets the show_speaker_label of this AmazonTranscribeProcessorConfiguration.


        :param show_speaker_label: The show_speaker_label of this AmazonTranscribeProcessorConfiguration.
        :type show_speaker_label: bool
        """

        self._show_speaker_label = show_speaker_label

    @property
    def enable_partial_results_stabilization(self):
        """Gets the enable_partial_results_stabilization of this AmazonTranscribeProcessorConfiguration.


        :return: The enable_partial_results_stabilization of this AmazonTranscribeProcessorConfiguration.
        :rtype: bool
        """
        return self._enable_partial_results_stabilization

    @enable_partial_results_stabilization.setter
    def enable_partial_results_stabilization(self, enable_partial_results_stabilization):
        """Sets the enable_partial_results_stabilization of this AmazonTranscribeProcessorConfiguration.


        :param enable_partial_results_stabilization: The enable_partial_results_stabilization of this AmazonTranscribeProcessorConfiguration.
        :type enable_partial_results_stabilization: bool
        """

        self._enable_partial_results_stabilization = enable_partial_results_stabilization

    @property
    def partial_results_stability(self):
        """Gets the partial_results_stability of this AmazonTranscribeProcessorConfiguration.


        :return: The partial_results_stability of this AmazonTranscribeProcessorConfiguration.
        :rtype: PartialResultsStability
        """
        return self._partial_results_stability

    @partial_results_stability.setter
    def partial_results_stability(self, partial_results_stability):
        """Sets the partial_results_stability of this AmazonTranscribeProcessorConfiguration.


        :param partial_results_stability: The partial_results_stability of this AmazonTranscribeProcessorConfiguration.
        :type partial_results_stability: PartialResultsStability
        """

        self._partial_results_stability = partial_results_stability

    @property
    def content_identification_type(self):
        """Gets the content_identification_type of this AmazonTranscribeProcessorConfiguration.


        :return: The content_identification_type of this AmazonTranscribeProcessorConfiguration.
        :rtype: ContentType
        """
        return self._content_identification_type

    @content_identification_type.setter
    def content_identification_type(self, content_identification_type):
        """Sets the content_identification_type of this AmazonTranscribeProcessorConfiguration.


        :param content_identification_type: The content_identification_type of this AmazonTranscribeProcessorConfiguration.
        :type content_identification_type: ContentType
        """

        self._content_identification_type = content_identification_type

    @property
    def content_redaction_type(self):
        """Gets the content_redaction_type of this AmazonTranscribeProcessorConfiguration.


        :return: The content_redaction_type of this AmazonTranscribeProcessorConfiguration.
        :rtype: ContentType
        """
        return self._content_redaction_type

    @content_redaction_type.setter
    def content_redaction_type(self, content_redaction_type):
        """Sets the content_redaction_type of this AmazonTranscribeProcessorConfiguration.


        :param content_redaction_type: The content_redaction_type of this AmazonTranscribeProcessorConfiguration.
        :type content_redaction_type: ContentType
        """

        self._content_redaction_type = content_redaction_type

    @property
    def pii_entity_types(self):
        """Gets the pii_entity_types of this AmazonTranscribeProcessorConfiguration.


        :return: The pii_entity_types of this AmazonTranscribeProcessorConfiguration.
        :rtype: str
        """
        return self._pii_entity_types

    @pii_entity_types.setter
    def pii_entity_types(self, pii_entity_types):
        """Sets the pii_entity_types of this AmazonTranscribeProcessorConfiguration.


        :param pii_entity_types: The pii_entity_types of this AmazonTranscribeProcessorConfiguration.
        :type pii_entity_types: str
        """

        self._pii_entity_types = pii_entity_types

    @property
    def language_model_name(self):
        """Gets the language_model_name of this AmazonTranscribeProcessorConfiguration.


        :return: The language_model_name of this AmazonTranscribeProcessorConfiguration.
        :rtype: str
        """
        return self._language_model_name

    @language_model_name.setter
    def language_model_name(self, language_model_name):
        """Sets the language_model_name of this AmazonTranscribeProcessorConfiguration.


        :param language_model_name: The language_model_name of this AmazonTranscribeProcessorConfiguration.
        :type language_model_name: str
        """

        self._language_model_name = language_model_name

    @property
    def filter_partial_results(self):
        """Gets the filter_partial_results of this AmazonTranscribeProcessorConfiguration.


        :return: The filter_partial_results of this AmazonTranscribeProcessorConfiguration.
        :rtype: bool
        """
        return self._filter_partial_results

    @filter_partial_results.setter
    def filter_partial_results(self, filter_partial_results):
        """Sets the filter_partial_results of this AmazonTranscribeProcessorConfiguration.


        :param filter_partial_results: The filter_partial_results of this AmazonTranscribeProcessorConfiguration.
        :type filter_partial_results: bool
        """

        self._filter_partial_results = filter_partial_results

    @property
    def identify_language(self):
        """Gets the identify_language of this AmazonTranscribeProcessorConfiguration.


        :return: The identify_language of this AmazonTranscribeProcessorConfiguration.
        :rtype: bool
        """
        return self._identify_language

    @identify_language.setter
    def identify_language(self, identify_language):
        """Sets the identify_language of this AmazonTranscribeProcessorConfiguration.


        :param identify_language: The identify_language of this AmazonTranscribeProcessorConfiguration.
        :type identify_language: bool
        """

        self._identify_language = identify_language

    @property
    def language_options(self):
        """Gets the language_options of this AmazonTranscribeProcessorConfiguration.


        :return: The language_options of this AmazonTranscribeProcessorConfiguration.
        :rtype: str
        """
        return self._language_options

    @language_options.setter
    def language_options(self, language_options):
        """Sets the language_options of this AmazonTranscribeProcessorConfiguration.


        :param language_options: The language_options of this AmazonTranscribeProcessorConfiguration.
        :type language_options: str
        """

        self._language_options = language_options

    @property
    def preferred_language(self):
        """Gets the preferred_language of this AmazonTranscribeProcessorConfiguration.


        :return: The preferred_language of this AmazonTranscribeProcessorConfiguration.
        :rtype: CallAnalyticsLanguageCode
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """Sets the preferred_language of this AmazonTranscribeProcessorConfiguration.


        :param preferred_language: The preferred_language of this AmazonTranscribeProcessorConfiguration.
        :type preferred_language: CallAnalyticsLanguageCode
        """

        self._preferred_language = preferred_language

    @property
    def vocabulary_names(self):
        """Gets the vocabulary_names of this AmazonTranscribeProcessorConfiguration.


        :return: The vocabulary_names of this AmazonTranscribeProcessorConfiguration.
        :rtype: str
        """
        return self._vocabulary_names

    @vocabulary_names.setter
    def vocabulary_names(self, vocabulary_names):
        """Sets the vocabulary_names of this AmazonTranscribeProcessorConfiguration.


        :param vocabulary_names: The vocabulary_names of this AmazonTranscribeProcessorConfiguration.
        :type vocabulary_names: str
        """

        self._vocabulary_names = vocabulary_names

    @property
    def vocabulary_filter_names(self):
        """Gets the vocabulary_filter_names of this AmazonTranscribeProcessorConfiguration.


        :return: The vocabulary_filter_names of this AmazonTranscribeProcessorConfiguration.
        :rtype: str
        """
        return self._vocabulary_filter_names

    @vocabulary_filter_names.setter
    def vocabulary_filter_names(self, vocabulary_filter_names):
        """Sets the vocabulary_filter_names of this AmazonTranscribeProcessorConfiguration.


        :param vocabulary_filter_names: The vocabulary_filter_names of this AmazonTranscribeProcessorConfiguration.
        :type vocabulary_filter_names: str
        """

        self._vocabulary_filter_names = vocabulary_filter_names
