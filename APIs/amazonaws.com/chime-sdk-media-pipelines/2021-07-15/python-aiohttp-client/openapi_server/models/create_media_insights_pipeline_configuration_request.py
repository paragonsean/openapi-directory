# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_media_insights_pipeline_configuration_request_real_time_alert_configuration import CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration
from openapi_server.models.media_insights_pipeline_configuration_element import MediaInsightsPipelineConfigurationElement
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateMediaInsightsPipelineConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_insights_pipeline_configuration_name: str=None, resource_access_role_arn: str=None, real_time_alert_configuration: CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration=None, elements: List[MediaInsightsPipelineConfigurationElement]=None, tags: List[Tag]=None, client_request_token: str=None):
        """CreateMediaInsightsPipelineConfigurationRequest - a model defined in OpenAPI

        :param media_insights_pipeline_configuration_name: The media_insights_pipeline_configuration_name of this CreateMediaInsightsPipelineConfigurationRequest.
        :param resource_access_role_arn: The resource_access_role_arn of this CreateMediaInsightsPipelineConfigurationRequest.
        :param real_time_alert_configuration: The real_time_alert_configuration of this CreateMediaInsightsPipelineConfigurationRequest.
        :param elements: The elements of this CreateMediaInsightsPipelineConfigurationRequest.
        :param tags: The tags of this CreateMediaInsightsPipelineConfigurationRequest.
        :param client_request_token: The client_request_token of this CreateMediaInsightsPipelineConfigurationRequest.
        """
        self.openapi_types = {
            'media_insights_pipeline_configuration_name': str,
            'resource_access_role_arn': str,
            'real_time_alert_configuration': CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration,
            'elements': List[MediaInsightsPipelineConfigurationElement],
            'tags': List[Tag],
            'client_request_token': str
        }

        self.attribute_map = {
            'media_insights_pipeline_configuration_name': 'MediaInsightsPipelineConfigurationName',
            'resource_access_role_arn': 'ResourceAccessRoleArn',
            'real_time_alert_configuration': 'RealTimeAlertConfiguration',
            'elements': 'Elements',
            'tags': 'Tags',
            'client_request_token': 'ClientRequestToken'
        }

        self._media_insights_pipeline_configuration_name = media_insights_pipeline_configuration_name
        self._resource_access_role_arn = resource_access_role_arn
        self._real_time_alert_configuration = real_time_alert_configuration
        self._elements = elements
        self._tags = tags
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMediaInsightsPipelineConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMediaInsightsPipelineConfiguration_request of this CreateMediaInsightsPipelineConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_insights_pipeline_configuration_name(self):
        """Gets the media_insights_pipeline_configuration_name of this CreateMediaInsightsPipelineConfigurationRequest.

        The name of the media insights pipeline configuration.

        :return: The media_insights_pipeline_configuration_name of this CreateMediaInsightsPipelineConfigurationRequest.
        :rtype: str
        """
        return self._media_insights_pipeline_configuration_name

    @media_insights_pipeline_configuration_name.setter
    def media_insights_pipeline_configuration_name(self, media_insights_pipeline_configuration_name):
        """Sets the media_insights_pipeline_configuration_name of this CreateMediaInsightsPipelineConfigurationRequest.

        The name of the media insights pipeline configuration.

        :param media_insights_pipeline_configuration_name: The media_insights_pipeline_configuration_name of this CreateMediaInsightsPipelineConfigurationRequest.
        :type media_insights_pipeline_configuration_name: str
        """
        if media_insights_pipeline_configuration_name is None:
            raise ValueError("Invalid value for `media_insights_pipeline_configuration_name`, must not be `None`")
        if media_insights_pipeline_configuration_name is not None and len(media_insights_pipeline_configuration_name) > 64:
            raise ValueError("Invalid value for `media_insights_pipeline_configuration_name`, length must be less than or equal to `64`")
        if media_insights_pipeline_configuration_name is not None and len(media_insights_pipeline_configuration_name) < 2:
            raise ValueError("Invalid value for `media_insights_pipeline_configuration_name`, length must be greater than or equal to `2`")
        if media_insights_pipeline_configuration_name is not None and not re.search(r'^[0-9a-zA-Z._-]+', media_insights_pipeline_configuration_name):
            raise ValueError("Invalid value for `media_insights_pipeline_configuration_name`, must be a follow pattern or equal to `/^[0-9a-zA-Z._-]+/`")

        self._media_insights_pipeline_configuration_name = media_insights_pipeline_configuration_name

    @property
    def resource_access_role_arn(self):
        """Gets the resource_access_role_arn of this CreateMediaInsightsPipelineConfigurationRequest.

        The ARN of the role used by the service to access Amazon Web Services resources, including <code>Transcribe</code> and <code>Transcribe Call Analytics</code>, on the caller’s behalf.

        :return: The resource_access_role_arn of this CreateMediaInsightsPipelineConfigurationRequest.
        :rtype: str
        """
        return self._resource_access_role_arn

    @resource_access_role_arn.setter
    def resource_access_role_arn(self, resource_access_role_arn):
        """Sets the resource_access_role_arn of this CreateMediaInsightsPipelineConfigurationRequest.

        The ARN of the role used by the service to access Amazon Web Services resources, including <code>Transcribe</code> and <code>Transcribe Call Analytics</code>, on the caller’s behalf.

        :param resource_access_role_arn: The resource_access_role_arn of this CreateMediaInsightsPipelineConfigurationRequest.
        :type resource_access_role_arn: str
        """
        if resource_access_role_arn is None:
            raise ValueError("Invalid value for `resource_access_role_arn`, must not be `None`")
        if resource_access_role_arn is not None and len(resource_access_role_arn) > 1024:
            raise ValueError("Invalid value for `resource_access_role_arn`, length must be less than or equal to `1024`")
        if resource_access_role_arn is not None and len(resource_access_role_arn) < 1:
            raise ValueError("Invalid value for `resource_access_role_arn`, length must be greater than or equal to `1`")
        if resource_access_role_arn is not None and not re.search(r'^arn[\/\:\-\_\.a-zA-Z0-9]+$', resource_access_role_arn):
            raise ValueError("Invalid value for `resource_access_role_arn`, must be a follow pattern or equal to `/^arn[\/\:\-\_\.a-zA-Z0-9]+$/`")

        self._resource_access_role_arn = resource_access_role_arn

    @property
    def real_time_alert_configuration(self):
        """Gets the real_time_alert_configuration of this CreateMediaInsightsPipelineConfigurationRequest.


        :return: The real_time_alert_configuration of this CreateMediaInsightsPipelineConfigurationRequest.
        :rtype: CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration
        """
        return self._real_time_alert_configuration

    @real_time_alert_configuration.setter
    def real_time_alert_configuration(self, real_time_alert_configuration):
        """Sets the real_time_alert_configuration of this CreateMediaInsightsPipelineConfigurationRequest.


        :param real_time_alert_configuration: The real_time_alert_configuration of this CreateMediaInsightsPipelineConfigurationRequest.
        :type real_time_alert_configuration: CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration
        """

        self._real_time_alert_configuration = real_time_alert_configuration

    @property
    def elements(self):
        """Gets the elements of this CreateMediaInsightsPipelineConfigurationRequest.

        The elements in the request, such as a processor for Amazon Transcribe or a sink for a Kinesis Data Stream.

        :return: The elements of this CreateMediaInsightsPipelineConfigurationRequest.
        :rtype: List[MediaInsightsPipelineConfigurationElement]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this CreateMediaInsightsPipelineConfigurationRequest.

        The elements in the request, such as a processor for Amazon Transcribe or a sink for a Kinesis Data Stream.

        :param elements: The elements of this CreateMediaInsightsPipelineConfigurationRequest.
        :type elements: List[MediaInsightsPipelineConfigurationElement]
        """
        if elements is None:
            raise ValueError("Invalid value for `elements`, must not be `None`")

        self._elements = elements

    @property
    def tags(self):
        """Gets the tags of this CreateMediaInsightsPipelineConfigurationRequest.

        The tags assigned to the media insights pipeline configuration.

        :return: The tags of this CreateMediaInsightsPipelineConfigurationRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMediaInsightsPipelineConfigurationRequest.

        The tags assigned to the media insights pipeline configuration.

        :param tags: The tags of this CreateMediaInsightsPipelineConfigurationRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateMediaInsightsPipelineConfigurationRequest.

        The unique identifier for the media insights pipeline configuration request.

        :return: The client_request_token of this CreateMediaInsightsPipelineConfigurationRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateMediaInsightsPipelineConfigurationRequest.

        The unique identifier for the media insights pipeline configuration request.

        :param client_request_token: The client_request_token of this CreateMediaInsightsPipelineConfigurationRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token
