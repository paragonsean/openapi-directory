# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.real_time_alert_rule_issue_detection_configuration import RealTimeAlertRuleIssueDetectionConfiguration
from openapi_server.models.real_time_alert_rule_keyword_match_configuration import RealTimeAlertRuleKeywordMatchConfiguration
from openapi_server.models.real_time_alert_rule_sentiment_configuration import RealTimeAlertRuleSentimentConfiguration
from openapi_server.models.real_time_alert_rule_type import RealTimeAlertRuleType
from openapi_server import util


class RealTimeAlertRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: RealTimeAlertRuleType=None, keyword_match_configuration: RealTimeAlertRuleKeywordMatchConfiguration=None, sentiment_configuration: RealTimeAlertRuleSentimentConfiguration=None, issue_detection_configuration: RealTimeAlertRuleIssueDetectionConfiguration=None):
        """RealTimeAlertRule - a model defined in OpenAPI

        :param type: The type of this RealTimeAlertRule.
        :param keyword_match_configuration: The keyword_match_configuration of this RealTimeAlertRule.
        :param sentiment_configuration: The sentiment_configuration of this RealTimeAlertRule.
        :param issue_detection_configuration: The issue_detection_configuration of this RealTimeAlertRule.
        """
        self.openapi_types = {
            'type': RealTimeAlertRuleType,
            'keyword_match_configuration': RealTimeAlertRuleKeywordMatchConfiguration,
            'sentiment_configuration': RealTimeAlertRuleSentimentConfiguration,
            'issue_detection_configuration': RealTimeAlertRuleIssueDetectionConfiguration
        }

        self.attribute_map = {
            'type': 'Type',
            'keyword_match_configuration': 'KeywordMatchConfiguration',
            'sentiment_configuration': 'SentimentConfiguration',
            'issue_detection_configuration': 'IssueDetectionConfiguration'
        }

        self._type = type
        self._keyword_match_configuration = keyword_match_configuration
        self._sentiment_configuration = sentiment_configuration
        self._issue_detection_configuration = issue_detection_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealTimeAlertRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealTimeAlertRule of this RealTimeAlertRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RealTimeAlertRule.


        :return: The type of this RealTimeAlertRule.
        :rtype: RealTimeAlertRuleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RealTimeAlertRule.


        :param type: The type of this RealTimeAlertRule.
        :type type: RealTimeAlertRuleType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def keyword_match_configuration(self):
        """Gets the keyword_match_configuration of this RealTimeAlertRule.


        :return: The keyword_match_configuration of this RealTimeAlertRule.
        :rtype: RealTimeAlertRuleKeywordMatchConfiguration
        """
        return self._keyword_match_configuration

    @keyword_match_configuration.setter
    def keyword_match_configuration(self, keyword_match_configuration):
        """Sets the keyword_match_configuration of this RealTimeAlertRule.


        :param keyword_match_configuration: The keyword_match_configuration of this RealTimeAlertRule.
        :type keyword_match_configuration: RealTimeAlertRuleKeywordMatchConfiguration
        """

        self._keyword_match_configuration = keyword_match_configuration

    @property
    def sentiment_configuration(self):
        """Gets the sentiment_configuration of this RealTimeAlertRule.


        :return: The sentiment_configuration of this RealTimeAlertRule.
        :rtype: RealTimeAlertRuleSentimentConfiguration
        """
        return self._sentiment_configuration

    @sentiment_configuration.setter
    def sentiment_configuration(self, sentiment_configuration):
        """Sets the sentiment_configuration of this RealTimeAlertRule.


        :param sentiment_configuration: The sentiment_configuration of this RealTimeAlertRule.
        :type sentiment_configuration: RealTimeAlertRuleSentimentConfiguration
        """

        self._sentiment_configuration = sentiment_configuration

    @property
    def issue_detection_configuration(self):
        """Gets the issue_detection_configuration of this RealTimeAlertRule.


        :return: The issue_detection_configuration of this RealTimeAlertRule.
        :rtype: RealTimeAlertRuleIssueDetectionConfiguration
        """
        return self._issue_detection_configuration

    @issue_detection_configuration.setter
    def issue_detection_configuration(self, issue_detection_configuration):
        """Sets the issue_detection_configuration of this RealTimeAlertRule.


        :param issue_detection_configuration: The issue_detection_configuration of this RealTimeAlertRule.
        :type issue_detection_configuration: RealTimeAlertRuleIssueDetectionConfiguration
        """

        self._issue_detection_configuration = issue_detection_configuration
