# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.composited_video_artifacts_configuration_grid_view_configuration import CompositedVideoArtifactsConfigurationGridViewConfiguration
from openapi_server.models.layout_option import LayoutOption
from openapi_server.models.resolution_option import ResolutionOption
from openapi_server import util


class CompositedVideoArtifactsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, layout: LayoutOption=None, resolution: ResolutionOption=None, grid_view_configuration: CompositedVideoArtifactsConfigurationGridViewConfiguration=None):
        """CompositedVideoArtifactsConfiguration - a model defined in OpenAPI

        :param layout: The layout of this CompositedVideoArtifactsConfiguration.
        :param resolution: The resolution of this CompositedVideoArtifactsConfiguration.
        :param grid_view_configuration: The grid_view_configuration of this CompositedVideoArtifactsConfiguration.
        """
        self.openapi_types = {
            'layout': LayoutOption,
            'resolution': ResolutionOption,
            'grid_view_configuration': CompositedVideoArtifactsConfigurationGridViewConfiguration
        }

        self.attribute_map = {
            'layout': 'Layout',
            'resolution': 'Resolution',
            'grid_view_configuration': 'GridViewConfiguration'
        }

        self._layout = layout
        self._resolution = resolution
        self._grid_view_configuration = grid_view_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompositedVideoArtifactsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompositedVideoArtifactsConfiguration of this CompositedVideoArtifactsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def layout(self):
        """Gets the layout of this CompositedVideoArtifactsConfiguration.


        :return: The layout of this CompositedVideoArtifactsConfiguration.
        :rtype: LayoutOption
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this CompositedVideoArtifactsConfiguration.


        :param layout: The layout of this CompositedVideoArtifactsConfiguration.
        :type layout: LayoutOption
        """

        self._layout = layout

    @property
    def resolution(self):
        """Gets the resolution of this CompositedVideoArtifactsConfiguration.


        :return: The resolution of this CompositedVideoArtifactsConfiguration.
        :rtype: ResolutionOption
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this CompositedVideoArtifactsConfiguration.


        :param resolution: The resolution of this CompositedVideoArtifactsConfiguration.
        :type resolution: ResolutionOption
        """

        self._resolution = resolution

    @property
    def grid_view_configuration(self):
        """Gets the grid_view_configuration of this CompositedVideoArtifactsConfiguration.


        :return: The grid_view_configuration of this CompositedVideoArtifactsConfiguration.
        :rtype: CompositedVideoArtifactsConfigurationGridViewConfiguration
        """
        return self._grid_view_configuration

    @grid_view_configuration.setter
    def grid_view_configuration(self, grid_view_configuration):
        """Sets the grid_view_configuration of this CompositedVideoArtifactsConfiguration.


        :param grid_view_configuration: The grid_view_configuration of this CompositedVideoArtifactsConfiguration.
        :type grid_view_configuration: CompositedVideoArtifactsConfigurationGridViewConfiguration
        """
        if grid_view_configuration is None:
            raise ValueError("Invalid value for `grid_view_configuration`, must not be `None`")

        self._grid_view_configuration = grid_view_configuration
