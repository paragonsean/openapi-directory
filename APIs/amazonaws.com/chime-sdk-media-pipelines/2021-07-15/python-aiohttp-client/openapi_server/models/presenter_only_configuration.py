# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.presenter_position import PresenterPosition
from openapi_server import util


class PresenterOnlyConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, presenter_position: PresenterPosition=None):
        """PresenterOnlyConfiguration - a model defined in OpenAPI

        :param presenter_position: The presenter_position of this PresenterOnlyConfiguration.
        """
        self.openapi_types = {
            'presenter_position': PresenterPosition
        }

        self.attribute_map = {
            'presenter_position': 'PresenterPosition'
        }

        self._presenter_position = presenter_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresenterOnlyConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresenterOnlyConfiguration of this PresenterOnlyConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def presenter_position(self):
        """Gets the presenter_position of this PresenterOnlyConfiguration.


        :return: The presenter_position of this PresenterOnlyConfiguration.
        :rtype: PresenterPosition
        """
        return self._presenter_position

    @presenter_position.setter
    def presenter_position(self, presenter_position):
        """Sets the presenter_position of this PresenterOnlyConfiguration.


        :param presenter_position: The presenter_position of this PresenterOnlyConfiguration.
        :type presenter_position: PresenterPosition
        """

        self._presenter_position = presenter_position
