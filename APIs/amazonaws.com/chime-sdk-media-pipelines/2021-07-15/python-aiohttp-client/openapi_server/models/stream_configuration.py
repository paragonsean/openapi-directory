# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_configuration_stream_channel_definition import StreamConfigurationStreamChannelDefinition
from openapi_server import util


class StreamConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_arn: str=None, fragment_number: str=None, stream_channel_definition: StreamConfigurationStreamChannelDefinition=None):
        """StreamConfiguration - a model defined in OpenAPI

        :param stream_arn: The stream_arn of this StreamConfiguration.
        :param fragment_number: The fragment_number of this StreamConfiguration.
        :param stream_channel_definition: The stream_channel_definition of this StreamConfiguration.
        """
        self.openapi_types = {
            'stream_arn': str,
            'fragment_number': str,
            'stream_channel_definition': StreamConfigurationStreamChannelDefinition
        }

        self.attribute_map = {
            'stream_arn': 'StreamArn',
            'fragment_number': 'FragmentNumber',
            'stream_channel_definition': 'StreamChannelDefinition'
        }

        self._stream_arn = stream_arn
        self._fragment_number = fragment_number
        self._stream_channel_definition = stream_channel_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamConfiguration of this StreamConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_arn(self):
        """Gets the stream_arn of this StreamConfiguration.


        :return: The stream_arn of this StreamConfiguration.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this StreamConfiguration.


        :param stream_arn: The stream_arn of this StreamConfiguration.
        :type stream_arn: str
        """
        if stream_arn is None:
            raise ValueError("Invalid value for `stream_arn`, must not be `None`")

        self._stream_arn = stream_arn

    @property
    def fragment_number(self):
        """Gets the fragment_number of this StreamConfiguration.


        :return: The fragment_number of this StreamConfiguration.
        :rtype: str
        """
        return self._fragment_number

    @fragment_number.setter
    def fragment_number(self, fragment_number):
        """Sets the fragment_number of this StreamConfiguration.


        :param fragment_number: The fragment_number of this StreamConfiguration.
        :type fragment_number: str
        """

        self._fragment_number = fragment_number

    @property
    def stream_channel_definition(self):
        """Gets the stream_channel_definition of this StreamConfiguration.


        :return: The stream_channel_definition of this StreamConfiguration.
        :rtype: StreamConfigurationStreamChannelDefinition
        """
        return self._stream_channel_definition

    @stream_channel_definition.setter
    def stream_channel_definition(self, stream_channel_definition):
        """Sets the stream_channel_definition of this StreamConfiguration.


        :param stream_channel_definition: The stream_channel_definition of this StreamConfiguration.
        :type stream_channel_definition: StreamConfigurationStreamChannelDefinition
        """
        if stream_channel_definition is None:
            raise ValueError("Invalid value for `stream_channel_definition`, must not be `None`")

        self._stream_channel_definition = stream_channel_definition
