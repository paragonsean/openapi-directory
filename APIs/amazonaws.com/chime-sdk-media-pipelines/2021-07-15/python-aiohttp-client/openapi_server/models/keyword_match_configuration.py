# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeywordMatchConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_name: str=None, keywords: List=None, negate: bool=None):
        """KeywordMatchConfiguration - a model defined in OpenAPI

        :param rule_name: The rule_name of this KeywordMatchConfiguration.
        :param keywords: The keywords of this KeywordMatchConfiguration.
        :param negate: The negate of this KeywordMatchConfiguration.
        """
        self.openapi_types = {
            'rule_name': str,
            'keywords': List,
            'negate': bool
        }

        self.attribute_map = {
            'rule_name': 'RuleName',
            'keywords': 'Keywords',
            'negate': 'Negate'
        }

        self._rule_name = rule_name
        self._keywords = keywords
        self._negate = negate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeywordMatchConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeywordMatchConfiguration of this KeywordMatchConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_name(self):
        """Gets the rule_name of this KeywordMatchConfiguration.


        :return: The rule_name of this KeywordMatchConfiguration.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this KeywordMatchConfiguration.


        :param rule_name: The rule_name of this KeywordMatchConfiguration.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def keywords(self):
        """Gets the keywords of this KeywordMatchConfiguration.


        :return: The keywords of this KeywordMatchConfiguration.
        :rtype: List
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this KeywordMatchConfiguration.


        :param keywords: The keywords of this KeywordMatchConfiguration.
        :type keywords: List
        """
        if keywords is None:
            raise ValueError("Invalid value for `keywords`, must not be `None`")

        self._keywords = keywords

    @property
    def negate(self):
        """Gets the negate of this KeywordMatchConfiguration.


        :return: The negate of this KeywordMatchConfiguration.
        :rtype: bool
        """
        return self._negate

    @negate.setter
    def negate(self, negate):
        """Sets the negate of this KeywordMatchConfiguration.


        :param negate: The negate of this KeywordMatchConfiguration.
        :type negate: bool
        """

        self._negate = negate
