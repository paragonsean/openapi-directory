# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.concatenation_sink import ConcatenationSink
from openapi_server.models.concatenation_source import ConcatenationSource
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateMediaConcatenationPipelineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sources: List[ConcatenationSource]=None, sinks: List[ConcatenationSink]=None, client_request_token: str=None, tags: List[Tag]=None):
        """CreateMediaConcatenationPipelineRequest - a model defined in OpenAPI

        :param sources: The sources of this CreateMediaConcatenationPipelineRequest.
        :param sinks: The sinks of this CreateMediaConcatenationPipelineRequest.
        :param client_request_token: The client_request_token of this CreateMediaConcatenationPipelineRequest.
        :param tags: The tags of this CreateMediaConcatenationPipelineRequest.
        """
        self.openapi_types = {
            'sources': List[ConcatenationSource],
            'sinks': List[ConcatenationSink],
            'client_request_token': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'sources': 'Sources',
            'sinks': 'Sinks',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags'
        }

        self._sources = sources
        self._sinks = sinks
        self._client_request_token = client_request_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMediaConcatenationPipelineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMediaConcatenationPipeline_request of this CreateMediaConcatenationPipelineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sources(self):
        """Gets the sources of this CreateMediaConcatenationPipelineRequest.

        An object that specifies the sources for the media concatenation pipeline.

        :return: The sources of this CreateMediaConcatenationPipelineRequest.
        :rtype: List[ConcatenationSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CreateMediaConcatenationPipelineRequest.

        An object that specifies the sources for the media concatenation pipeline.

        :param sources: The sources of this CreateMediaConcatenationPipelineRequest.
        :type sources: List[ConcatenationSource]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")
        if sources is not None and len(sources) > 1:
            raise ValueError("Invalid value for `sources`, number of items must be less than or equal to `1`")
        if sources is not None and len(sources) < 1:
            raise ValueError("Invalid value for `sources`, number of items must be greater than or equal to `1`")

        self._sources = sources

    @property
    def sinks(self):
        """Gets the sinks of this CreateMediaConcatenationPipelineRequest.

        An object that specifies the data sinks for the media concatenation pipeline.

        :return: The sinks of this CreateMediaConcatenationPipelineRequest.
        :rtype: List[ConcatenationSink]
        """
        return self._sinks

    @sinks.setter
    def sinks(self, sinks):
        """Sets the sinks of this CreateMediaConcatenationPipelineRequest.

        An object that specifies the data sinks for the media concatenation pipeline.

        :param sinks: The sinks of this CreateMediaConcatenationPipelineRequest.
        :type sinks: List[ConcatenationSink]
        """
        if sinks is None:
            raise ValueError("Invalid value for `sinks`, must not be `None`")
        if sinks is not None and len(sinks) > 1:
            raise ValueError("Invalid value for `sinks`, number of items must be less than or equal to `1`")
        if sinks is not None and len(sinks) < 1:
            raise ValueError("Invalid value for `sinks`, number of items must be greater than or equal to `1`")

        self._sinks = sinks

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateMediaConcatenationPipelineRequest.

        The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.

        :return: The client_request_token of this CreateMediaConcatenationPipelineRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateMediaConcatenationPipelineRequest.

        The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.

        :param client_request_token: The client_request_token of this CreateMediaConcatenationPipelineRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateMediaConcatenationPipelineRequest.

        The tags associated with the media concatenation pipeline.

        :return: The tags of this CreateMediaConcatenationPipelineRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMediaConcatenationPipelineRequest.

        The tags associated with the media concatenation pipeline.

        :param tags: The tags of this CreateMediaConcatenationPipelineRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
