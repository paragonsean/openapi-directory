# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_media_insights_pipeline_configuration_request_real_time_alert_configuration import CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration
from openapi_server.models.media_insights_pipeline_configuration_element import MediaInsightsPipelineConfigurationElement
import re
from openapi_server import util


class UpdateMediaInsightsPipelineConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_access_role_arn: str=None, real_time_alert_configuration: CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration=None, elements: List[MediaInsightsPipelineConfigurationElement]=None):
        """UpdateMediaInsightsPipelineConfigurationRequest - a model defined in OpenAPI

        :param resource_access_role_arn: The resource_access_role_arn of this UpdateMediaInsightsPipelineConfigurationRequest.
        :param real_time_alert_configuration: The real_time_alert_configuration of this UpdateMediaInsightsPipelineConfigurationRequest.
        :param elements: The elements of this UpdateMediaInsightsPipelineConfigurationRequest.
        """
        self.openapi_types = {
            'resource_access_role_arn': str,
            'real_time_alert_configuration': CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration,
            'elements': List[MediaInsightsPipelineConfigurationElement]
        }

        self.attribute_map = {
            'resource_access_role_arn': 'ResourceAccessRoleArn',
            'real_time_alert_configuration': 'RealTimeAlertConfiguration',
            'elements': 'Elements'
        }

        self._resource_access_role_arn = resource_access_role_arn
        self._real_time_alert_configuration = real_time_alert_configuration
        self._elements = elements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMediaInsightsPipelineConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMediaInsightsPipelineConfiguration_request of this UpdateMediaInsightsPipelineConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_access_role_arn(self):
        """Gets the resource_access_role_arn of this UpdateMediaInsightsPipelineConfigurationRequest.

        The ARN of the role used by the service to access Amazon Web Services resources.

        :return: The resource_access_role_arn of this UpdateMediaInsightsPipelineConfigurationRequest.
        :rtype: str
        """
        return self._resource_access_role_arn

    @resource_access_role_arn.setter
    def resource_access_role_arn(self, resource_access_role_arn):
        """Sets the resource_access_role_arn of this UpdateMediaInsightsPipelineConfigurationRequest.

        The ARN of the role used by the service to access Amazon Web Services resources.

        :param resource_access_role_arn: The resource_access_role_arn of this UpdateMediaInsightsPipelineConfigurationRequest.
        :type resource_access_role_arn: str
        """
        if resource_access_role_arn is None:
            raise ValueError("Invalid value for `resource_access_role_arn`, must not be `None`")
        if resource_access_role_arn is not None and len(resource_access_role_arn) > 1024:
            raise ValueError("Invalid value for `resource_access_role_arn`, length must be less than or equal to `1024`")
        if resource_access_role_arn is not None and len(resource_access_role_arn) < 1:
            raise ValueError("Invalid value for `resource_access_role_arn`, length must be greater than or equal to `1`")
        if resource_access_role_arn is not None and not re.search(r'^arn[\/\:\-\_\.a-zA-Z0-9]+$', resource_access_role_arn):
            raise ValueError("Invalid value for `resource_access_role_arn`, must be a follow pattern or equal to `/^arn[\/\:\-\_\.a-zA-Z0-9]+$/`")

        self._resource_access_role_arn = resource_access_role_arn

    @property
    def real_time_alert_configuration(self):
        """Gets the real_time_alert_configuration of this UpdateMediaInsightsPipelineConfigurationRequest.


        :return: The real_time_alert_configuration of this UpdateMediaInsightsPipelineConfigurationRequest.
        :rtype: CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration
        """
        return self._real_time_alert_configuration

    @real_time_alert_configuration.setter
    def real_time_alert_configuration(self, real_time_alert_configuration):
        """Sets the real_time_alert_configuration of this UpdateMediaInsightsPipelineConfigurationRequest.


        :param real_time_alert_configuration: The real_time_alert_configuration of this UpdateMediaInsightsPipelineConfigurationRequest.
        :type real_time_alert_configuration: CreateMediaInsightsPipelineConfigurationRequestRealTimeAlertConfiguration
        """

        self._real_time_alert_configuration = real_time_alert_configuration

    @property
    def elements(self):
        """Gets the elements of this UpdateMediaInsightsPipelineConfigurationRequest.

        The elements in the request, such as a processor for Amazon Transcribe or a sink for a Kinesis Data Stream..

        :return: The elements of this UpdateMediaInsightsPipelineConfigurationRequest.
        :rtype: List[MediaInsightsPipelineConfigurationElement]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this UpdateMediaInsightsPipelineConfigurationRequest.

        The elements in the request, such as a processor for Amazon Transcribe or a sink for a Kinesis Data Stream..

        :param elements: The elements of this UpdateMediaInsightsPipelineConfigurationRequest.
        :type elements: List[MediaInsightsPipelineConfigurationElement]
        """
        if elements is None:
            raise ValueError("Invalid value for `elements`, must not be `None`")

        self._elements = elements
