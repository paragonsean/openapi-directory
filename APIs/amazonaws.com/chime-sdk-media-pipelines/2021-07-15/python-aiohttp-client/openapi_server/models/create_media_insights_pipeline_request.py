# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_media_insights_pipeline_request_kinesis_video_stream_recording_source_runtime_configuration import CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration
from openapi_server.models.create_media_insights_pipeline_request_kinesis_video_stream_source_runtime_configuration import CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration
from openapi_server.models.create_media_insights_pipeline_request_s3_recording_sink_runtime_configuration import CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateMediaInsightsPipelineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_insights_pipeline_configuration_arn: str=None, kinesis_video_stream_source_runtime_configuration: CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration=None, media_insights_runtime_metadata: Dict[str, str]=None, kinesis_video_stream_recording_source_runtime_configuration: CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration=None, s3_recording_sink_runtime_configuration: CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration=None, tags: List[Tag]=None, client_request_token: str=None):
        """CreateMediaInsightsPipelineRequest - a model defined in OpenAPI

        :param media_insights_pipeline_configuration_arn: The media_insights_pipeline_configuration_arn of this CreateMediaInsightsPipelineRequest.
        :param kinesis_video_stream_source_runtime_configuration: The kinesis_video_stream_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :param media_insights_runtime_metadata: The media_insights_runtime_metadata of this CreateMediaInsightsPipelineRequest.
        :param kinesis_video_stream_recording_source_runtime_configuration: The kinesis_video_stream_recording_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :param s3_recording_sink_runtime_configuration: The s3_recording_sink_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :param tags: The tags of this CreateMediaInsightsPipelineRequest.
        :param client_request_token: The client_request_token of this CreateMediaInsightsPipelineRequest.
        """
        self.openapi_types = {
            'media_insights_pipeline_configuration_arn': str,
            'kinesis_video_stream_source_runtime_configuration': CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration,
            'media_insights_runtime_metadata': Dict[str, str],
            'kinesis_video_stream_recording_source_runtime_configuration': CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration,
            's3_recording_sink_runtime_configuration': CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration,
            'tags': List[Tag],
            'client_request_token': str
        }

        self.attribute_map = {
            'media_insights_pipeline_configuration_arn': 'MediaInsightsPipelineConfigurationArn',
            'kinesis_video_stream_source_runtime_configuration': 'KinesisVideoStreamSourceRuntimeConfiguration',
            'media_insights_runtime_metadata': 'MediaInsightsRuntimeMetadata',
            'kinesis_video_stream_recording_source_runtime_configuration': 'KinesisVideoStreamRecordingSourceRuntimeConfiguration',
            's3_recording_sink_runtime_configuration': 'S3RecordingSinkRuntimeConfiguration',
            'tags': 'Tags',
            'client_request_token': 'ClientRequestToken'
        }

        self._media_insights_pipeline_configuration_arn = media_insights_pipeline_configuration_arn
        self._kinesis_video_stream_source_runtime_configuration = kinesis_video_stream_source_runtime_configuration
        self._media_insights_runtime_metadata = media_insights_runtime_metadata
        self._kinesis_video_stream_recording_source_runtime_configuration = kinesis_video_stream_recording_source_runtime_configuration
        self._s3_recording_sink_runtime_configuration = s3_recording_sink_runtime_configuration
        self._tags = tags
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMediaInsightsPipelineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMediaInsightsPipeline_request of this CreateMediaInsightsPipelineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_insights_pipeline_configuration_arn(self):
        """Gets the media_insights_pipeline_configuration_arn of this CreateMediaInsightsPipelineRequest.

        The ARN of the pipeline's configuration.

        :return: The media_insights_pipeline_configuration_arn of this CreateMediaInsightsPipelineRequest.
        :rtype: str
        """
        return self._media_insights_pipeline_configuration_arn

    @media_insights_pipeline_configuration_arn.setter
    def media_insights_pipeline_configuration_arn(self, media_insights_pipeline_configuration_arn):
        """Sets the media_insights_pipeline_configuration_arn of this CreateMediaInsightsPipelineRequest.

        The ARN of the pipeline's configuration.

        :param media_insights_pipeline_configuration_arn: The media_insights_pipeline_configuration_arn of this CreateMediaInsightsPipelineRequest.
        :type media_insights_pipeline_configuration_arn: str
        """
        if media_insights_pipeline_configuration_arn is None:
            raise ValueError("Invalid value for `media_insights_pipeline_configuration_arn`, must not be `None`")
        if media_insights_pipeline_configuration_arn is not None and len(media_insights_pipeline_configuration_arn) > 1024:
            raise ValueError("Invalid value for `media_insights_pipeline_configuration_arn`, length must be less than or equal to `1024`")
        if media_insights_pipeline_configuration_arn is not None and len(media_insights_pipeline_configuration_arn) < 1:
            raise ValueError("Invalid value for `media_insights_pipeline_configuration_arn`, length must be greater than or equal to `1`")
        if media_insights_pipeline_configuration_arn is not None and not re.search(r'^arn[\/\:\-\_\.a-zA-Z0-9]+$', media_insights_pipeline_configuration_arn):
            raise ValueError("Invalid value for `media_insights_pipeline_configuration_arn`, must be a follow pattern or equal to `/^arn[\/\:\-\_\.a-zA-Z0-9]+$/`")

        self._media_insights_pipeline_configuration_arn = media_insights_pipeline_configuration_arn

    @property
    def kinesis_video_stream_source_runtime_configuration(self):
        """Gets the kinesis_video_stream_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.


        :return: The kinesis_video_stream_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :rtype: CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration
        """
        return self._kinesis_video_stream_source_runtime_configuration

    @kinesis_video_stream_source_runtime_configuration.setter
    def kinesis_video_stream_source_runtime_configuration(self, kinesis_video_stream_source_runtime_configuration):
        """Sets the kinesis_video_stream_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.


        :param kinesis_video_stream_source_runtime_configuration: The kinesis_video_stream_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :type kinesis_video_stream_source_runtime_configuration: CreateMediaInsightsPipelineRequestKinesisVideoStreamSourceRuntimeConfiguration
        """

        self._kinesis_video_stream_source_runtime_configuration = kinesis_video_stream_source_runtime_configuration

    @property
    def media_insights_runtime_metadata(self):
        """Gets the media_insights_runtime_metadata of this CreateMediaInsightsPipelineRequest.

        The runtime metadata for the media insights pipeline. Consists of a key-value map of strings.

        :return: The media_insights_runtime_metadata of this CreateMediaInsightsPipelineRequest.
        :rtype: Dict[str, str]
        """
        return self._media_insights_runtime_metadata

    @media_insights_runtime_metadata.setter
    def media_insights_runtime_metadata(self, media_insights_runtime_metadata):
        """Sets the media_insights_runtime_metadata of this CreateMediaInsightsPipelineRequest.

        The runtime metadata for the media insights pipeline. Consists of a key-value map of strings.

        :param media_insights_runtime_metadata: The media_insights_runtime_metadata of this CreateMediaInsightsPipelineRequest.
        :type media_insights_runtime_metadata: Dict[str, str]
        """

        self._media_insights_runtime_metadata = media_insights_runtime_metadata

    @property
    def kinesis_video_stream_recording_source_runtime_configuration(self):
        """Gets the kinesis_video_stream_recording_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.


        :return: The kinesis_video_stream_recording_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :rtype: CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration
        """
        return self._kinesis_video_stream_recording_source_runtime_configuration

    @kinesis_video_stream_recording_source_runtime_configuration.setter
    def kinesis_video_stream_recording_source_runtime_configuration(self, kinesis_video_stream_recording_source_runtime_configuration):
        """Sets the kinesis_video_stream_recording_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.


        :param kinesis_video_stream_recording_source_runtime_configuration: The kinesis_video_stream_recording_source_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :type kinesis_video_stream_recording_source_runtime_configuration: CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfiguration
        """

        self._kinesis_video_stream_recording_source_runtime_configuration = kinesis_video_stream_recording_source_runtime_configuration

    @property
    def s3_recording_sink_runtime_configuration(self):
        """Gets the s3_recording_sink_runtime_configuration of this CreateMediaInsightsPipelineRequest.


        :return: The s3_recording_sink_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :rtype: CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration
        """
        return self._s3_recording_sink_runtime_configuration

    @s3_recording_sink_runtime_configuration.setter
    def s3_recording_sink_runtime_configuration(self, s3_recording_sink_runtime_configuration):
        """Sets the s3_recording_sink_runtime_configuration of this CreateMediaInsightsPipelineRequest.


        :param s3_recording_sink_runtime_configuration: The s3_recording_sink_runtime_configuration of this CreateMediaInsightsPipelineRequest.
        :type s3_recording_sink_runtime_configuration: CreateMediaInsightsPipelineRequestS3RecordingSinkRuntimeConfiguration
        """

        self._s3_recording_sink_runtime_configuration = s3_recording_sink_runtime_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateMediaInsightsPipelineRequest.

        The tags assigned to the media insights pipeline.

        :return: The tags of this CreateMediaInsightsPipelineRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMediaInsightsPipelineRequest.

        The tags assigned to the media insights pipeline.

        :param tags: The tags of this CreateMediaInsightsPipelineRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateMediaInsightsPipelineRequest.

        The unique identifier for the media insights pipeline request.

        :return: The client_request_token of this CreateMediaInsightsPipelineRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateMediaInsightsPipelineRequest.

        The unique identifier for the media insights pipeline request.

        :param client_request_token: The client_request_token of this CreateMediaInsightsPipelineRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token
