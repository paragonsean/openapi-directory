# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_media_insights_pipeline_request_kinesis_video_stream_recording_source_runtime_configuration_fragment_selector import CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector
from openapi_server import util


class KinesisVideoStreamRecordingSourceRuntimeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, streams: List=None, fragment_selector: CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector=None):
        """KinesisVideoStreamRecordingSourceRuntimeConfiguration - a model defined in OpenAPI

        :param streams: The streams of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.
        :param fragment_selector: The fragment_selector of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.
        """
        self.openapi_types = {
            'streams': List,
            'fragment_selector': CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector
        }

        self.attribute_map = {
            'streams': 'Streams',
            'fragment_selector': 'FragmentSelector'
        }

        self._streams = streams
        self._fragment_selector = fragment_selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KinesisVideoStreamRecordingSourceRuntimeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KinesisVideoStreamRecordingSourceRuntimeConfiguration of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def streams(self):
        """Gets the streams of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.


        :return: The streams of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.
        :rtype: List
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.


        :param streams: The streams of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.
        :type streams: List
        """
        if streams is None:
            raise ValueError("Invalid value for `streams`, must not be `None`")

        self._streams = streams

    @property
    def fragment_selector(self):
        """Gets the fragment_selector of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.


        :return: The fragment_selector of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.
        :rtype: CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector
        """
        return self._fragment_selector

    @fragment_selector.setter
    def fragment_selector(self, fragment_selector):
        """Sets the fragment_selector of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.


        :param fragment_selector: The fragment_selector of this KinesisVideoStreamRecordingSourceRuntimeConfiguration.
        :type fragment_selector: CreateMediaInsightsPipelineRequestKinesisVideoStreamRecordingSourceRuntimeConfigurationFragmentSelector
        """
        if fragment_selector is None:
            raise ValueError("Invalid value for `fragment_selector`, must not be `None`")

        self._fragment_selector = fragment_selector
