# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifacts_configuration_audio import ArtifactsConfigurationAudio
from openapi_server.models.artifacts_configuration_composited_video import ArtifactsConfigurationCompositedVideo
from openapi_server.models.artifacts_configuration_content import ArtifactsConfigurationContent
from openapi_server.models.artifacts_configuration_video import ArtifactsConfigurationVideo
from openapi_server import util


class CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: ArtifactsConfigurationAudio=None, video: ArtifactsConfigurationVideo=None, content: ArtifactsConfigurationContent=None, composited_video: ArtifactsConfigurationCompositedVideo=None):
        """CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration - a model defined in OpenAPI

        :param audio: The audio of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :param video: The video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :param content: The content of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :param composited_video: The composited_video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        """
        self.openapi_types = {
            'audio': ArtifactsConfigurationAudio,
            'video': ArtifactsConfigurationVideo,
            'content': ArtifactsConfigurationContent,
            'composited_video': ArtifactsConfigurationCompositedVideo
        }

        self.attribute_map = {
            'audio': 'Audio',
            'video': 'Video',
            'content': 'Content',
            'composited_video': 'CompositedVideo'
        }

        self._audio = audio
        self._video = video
        self._content = content
        self._composited_video = composited_video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMediaCapturePipeline_request_ChimeSdkMeetingConfiguration_ArtifactsConfiguration of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.


        :return: The audio of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :rtype: ArtifactsConfigurationAudio
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.


        :param audio: The audio of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :type audio: ArtifactsConfigurationAudio
        """
        if audio is None:
            raise ValueError("Invalid value for `audio`, must not be `None`")

        self._audio = audio

    @property
    def video(self):
        """Gets the video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.


        :return: The video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :rtype: ArtifactsConfigurationVideo
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.


        :param video: The video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :type video: ArtifactsConfigurationVideo
        """
        if video is None:
            raise ValueError("Invalid value for `video`, must not be `None`")

        self._video = video

    @property
    def content(self):
        """Gets the content of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.


        :return: The content of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :rtype: ArtifactsConfigurationContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.


        :param content: The content of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :type content: ArtifactsConfigurationContent
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def composited_video(self):
        """Gets the composited_video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.


        :return: The composited_video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :rtype: ArtifactsConfigurationCompositedVideo
        """
        return self._composited_video

    @composited_video.setter
    def composited_video(self, composited_video):
        """Sets the composited_video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.


        :param composited_video: The composited_video of this CreateMediaCapturePipelineRequestChimeSdkMeetingConfigurationArtifactsConfiguration.
        :type composited_video: ArtifactsConfigurationCompositedVideo
        """

        self._composited_video = composited_video
