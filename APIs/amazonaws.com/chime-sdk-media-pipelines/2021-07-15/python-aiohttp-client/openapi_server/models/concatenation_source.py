# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.concatenation_source_media_capture_pipeline_source_configuration import ConcatenationSourceMediaCapturePipelineSourceConfiguration
from openapi_server.models.concatenation_source_type import ConcatenationSourceType
from openapi_server import util


class ConcatenationSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ConcatenationSourceType=None, media_capture_pipeline_source_configuration: ConcatenationSourceMediaCapturePipelineSourceConfiguration=None):
        """ConcatenationSource - a model defined in OpenAPI

        :param type: The type of this ConcatenationSource.
        :param media_capture_pipeline_source_configuration: The media_capture_pipeline_source_configuration of this ConcatenationSource.
        """
        self.openapi_types = {
            'type': ConcatenationSourceType,
            'media_capture_pipeline_source_configuration': ConcatenationSourceMediaCapturePipelineSourceConfiguration
        }

        self.attribute_map = {
            'type': 'Type',
            'media_capture_pipeline_source_configuration': 'MediaCapturePipelineSourceConfiguration'
        }

        self._type = type
        self._media_capture_pipeline_source_configuration = media_capture_pipeline_source_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConcatenationSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConcatenationSource of this ConcatenationSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ConcatenationSource.


        :return: The type of this ConcatenationSource.
        :rtype: ConcatenationSourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConcatenationSource.


        :param type: The type of this ConcatenationSource.
        :type type: ConcatenationSourceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def media_capture_pipeline_source_configuration(self):
        """Gets the media_capture_pipeline_source_configuration of this ConcatenationSource.


        :return: The media_capture_pipeline_source_configuration of this ConcatenationSource.
        :rtype: ConcatenationSourceMediaCapturePipelineSourceConfiguration
        """
        return self._media_capture_pipeline_source_configuration

    @media_capture_pipeline_source_configuration.setter
    def media_capture_pipeline_source_configuration(self, media_capture_pipeline_source_configuration):
        """Sets the media_capture_pipeline_source_configuration of this ConcatenationSource.


        :param media_capture_pipeline_source_configuration: The media_capture_pipeline_source_configuration of this ConcatenationSource.
        :type media_capture_pipeline_source_configuration: ConcatenationSourceMediaCapturePipelineSourceConfiguration
        """
        if media_capture_pipeline_source_configuration is None:
            raise ValueError("Invalid value for `media_capture_pipeline_source_configuration`, must not be `None`")

        self._media_capture_pipeline_source_configuration = media_capture_pipeline_source_configuration
