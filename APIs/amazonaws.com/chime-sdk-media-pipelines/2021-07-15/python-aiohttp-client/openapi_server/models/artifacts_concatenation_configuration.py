# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifacts_concatenation_configuration_audio import ArtifactsConcatenationConfigurationAudio
from openapi_server.models.artifacts_concatenation_configuration_composited_video import ArtifactsConcatenationConfigurationCompositedVideo
from openapi_server.models.artifacts_concatenation_configuration_content import ArtifactsConcatenationConfigurationContent
from openapi_server.models.artifacts_concatenation_configuration_data_channel import ArtifactsConcatenationConfigurationDataChannel
from openapi_server.models.artifacts_concatenation_configuration_meeting_events import ArtifactsConcatenationConfigurationMeetingEvents
from openapi_server.models.artifacts_concatenation_configuration_transcription_messages import ArtifactsConcatenationConfigurationTranscriptionMessages
from openapi_server.models.artifacts_concatenation_configuration_video import ArtifactsConcatenationConfigurationVideo
from openapi_server import util


class ArtifactsConcatenationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: ArtifactsConcatenationConfigurationAudio=None, video: ArtifactsConcatenationConfigurationVideo=None, content: ArtifactsConcatenationConfigurationContent=None, data_channel: ArtifactsConcatenationConfigurationDataChannel=None, transcription_messages: ArtifactsConcatenationConfigurationTranscriptionMessages=None, meeting_events: ArtifactsConcatenationConfigurationMeetingEvents=None, composited_video: ArtifactsConcatenationConfigurationCompositedVideo=None):
        """ArtifactsConcatenationConfiguration - a model defined in OpenAPI

        :param audio: The audio of this ArtifactsConcatenationConfiguration.
        :param video: The video of this ArtifactsConcatenationConfiguration.
        :param content: The content of this ArtifactsConcatenationConfiguration.
        :param data_channel: The data_channel of this ArtifactsConcatenationConfiguration.
        :param transcription_messages: The transcription_messages of this ArtifactsConcatenationConfiguration.
        :param meeting_events: The meeting_events of this ArtifactsConcatenationConfiguration.
        :param composited_video: The composited_video of this ArtifactsConcatenationConfiguration.
        """
        self.openapi_types = {
            'audio': ArtifactsConcatenationConfigurationAudio,
            'video': ArtifactsConcatenationConfigurationVideo,
            'content': ArtifactsConcatenationConfigurationContent,
            'data_channel': ArtifactsConcatenationConfigurationDataChannel,
            'transcription_messages': ArtifactsConcatenationConfigurationTranscriptionMessages,
            'meeting_events': ArtifactsConcatenationConfigurationMeetingEvents,
            'composited_video': ArtifactsConcatenationConfigurationCompositedVideo
        }

        self.attribute_map = {
            'audio': 'Audio',
            'video': 'Video',
            'content': 'Content',
            'data_channel': 'DataChannel',
            'transcription_messages': 'TranscriptionMessages',
            'meeting_events': 'MeetingEvents',
            'composited_video': 'CompositedVideo'
        }

        self._audio = audio
        self._video = video
        self._content = content
        self._data_channel = data_channel
        self._transcription_messages = transcription_messages
        self._meeting_events = meeting_events
        self._composited_video = composited_video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactsConcatenationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactsConcatenationConfiguration of this ArtifactsConcatenationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this ArtifactsConcatenationConfiguration.


        :return: The audio of this ArtifactsConcatenationConfiguration.
        :rtype: ArtifactsConcatenationConfigurationAudio
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this ArtifactsConcatenationConfiguration.


        :param audio: The audio of this ArtifactsConcatenationConfiguration.
        :type audio: ArtifactsConcatenationConfigurationAudio
        """
        if audio is None:
            raise ValueError("Invalid value for `audio`, must not be `None`")

        self._audio = audio

    @property
    def video(self):
        """Gets the video of this ArtifactsConcatenationConfiguration.


        :return: The video of this ArtifactsConcatenationConfiguration.
        :rtype: ArtifactsConcatenationConfigurationVideo
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this ArtifactsConcatenationConfiguration.


        :param video: The video of this ArtifactsConcatenationConfiguration.
        :type video: ArtifactsConcatenationConfigurationVideo
        """
        if video is None:
            raise ValueError("Invalid value for `video`, must not be `None`")

        self._video = video

    @property
    def content(self):
        """Gets the content of this ArtifactsConcatenationConfiguration.


        :return: The content of this ArtifactsConcatenationConfiguration.
        :rtype: ArtifactsConcatenationConfigurationContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ArtifactsConcatenationConfiguration.


        :param content: The content of this ArtifactsConcatenationConfiguration.
        :type content: ArtifactsConcatenationConfigurationContent
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def data_channel(self):
        """Gets the data_channel of this ArtifactsConcatenationConfiguration.


        :return: The data_channel of this ArtifactsConcatenationConfiguration.
        :rtype: ArtifactsConcatenationConfigurationDataChannel
        """
        return self._data_channel

    @data_channel.setter
    def data_channel(self, data_channel):
        """Sets the data_channel of this ArtifactsConcatenationConfiguration.


        :param data_channel: The data_channel of this ArtifactsConcatenationConfiguration.
        :type data_channel: ArtifactsConcatenationConfigurationDataChannel
        """
        if data_channel is None:
            raise ValueError("Invalid value for `data_channel`, must not be `None`")

        self._data_channel = data_channel

    @property
    def transcription_messages(self):
        """Gets the transcription_messages of this ArtifactsConcatenationConfiguration.


        :return: The transcription_messages of this ArtifactsConcatenationConfiguration.
        :rtype: ArtifactsConcatenationConfigurationTranscriptionMessages
        """
        return self._transcription_messages

    @transcription_messages.setter
    def transcription_messages(self, transcription_messages):
        """Sets the transcription_messages of this ArtifactsConcatenationConfiguration.


        :param transcription_messages: The transcription_messages of this ArtifactsConcatenationConfiguration.
        :type transcription_messages: ArtifactsConcatenationConfigurationTranscriptionMessages
        """
        if transcription_messages is None:
            raise ValueError("Invalid value for `transcription_messages`, must not be `None`")

        self._transcription_messages = transcription_messages

    @property
    def meeting_events(self):
        """Gets the meeting_events of this ArtifactsConcatenationConfiguration.


        :return: The meeting_events of this ArtifactsConcatenationConfiguration.
        :rtype: ArtifactsConcatenationConfigurationMeetingEvents
        """
        return self._meeting_events

    @meeting_events.setter
    def meeting_events(self, meeting_events):
        """Sets the meeting_events of this ArtifactsConcatenationConfiguration.


        :param meeting_events: The meeting_events of this ArtifactsConcatenationConfiguration.
        :type meeting_events: ArtifactsConcatenationConfigurationMeetingEvents
        """
        if meeting_events is None:
            raise ValueError("Invalid value for `meeting_events`, must not be `None`")

        self._meeting_events = meeting_events

    @property
    def composited_video(self):
        """Gets the composited_video of this ArtifactsConcatenationConfiguration.


        :return: The composited_video of this ArtifactsConcatenationConfiguration.
        :rtype: ArtifactsConcatenationConfigurationCompositedVideo
        """
        return self._composited_video

    @composited_video.setter
    def composited_video(self, composited_video):
        """Sets the composited_video of this ArtifactsConcatenationConfiguration.


        :param composited_video: The composited_video of this ArtifactsConcatenationConfiguration.
        :type composited_video: ArtifactsConcatenationConfigurationCompositedVideo
        """
        if composited_video is None:
            raise ValueError("Invalid value for `composited_video`, must not be `None`")

        self._composited_video = composited_video
