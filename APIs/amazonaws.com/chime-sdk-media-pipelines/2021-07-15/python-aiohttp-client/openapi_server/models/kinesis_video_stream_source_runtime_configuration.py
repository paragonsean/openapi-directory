# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_encoding import MediaEncoding
from openapi_server import util


class KinesisVideoStreamSourceRuntimeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, streams: List=None, media_encoding: MediaEncoding=None, media_sample_rate: int=None):
        """KinesisVideoStreamSourceRuntimeConfiguration - a model defined in OpenAPI

        :param streams: The streams of this KinesisVideoStreamSourceRuntimeConfiguration.
        :param media_encoding: The media_encoding of this KinesisVideoStreamSourceRuntimeConfiguration.
        :param media_sample_rate: The media_sample_rate of this KinesisVideoStreamSourceRuntimeConfiguration.
        """
        self.openapi_types = {
            'streams': List,
            'media_encoding': MediaEncoding,
            'media_sample_rate': int
        }

        self.attribute_map = {
            'streams': 'Streams',
            'media_encoding': 'MediaEncoding',
            'media_sample_rate': 'MediaSampleRate'
        }

        self._streams = streams
        self._media_encoding = media_encoding
        self._media_sample_rate = media_sample_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KinesisVideoStreamSourceRuntimeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KinesisVideoStreamSourceRuntimeConfiguration of this KinesisVideoStreamSourceRuntimeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def streams(self):
        """Gets the streams of this KinesisVideoStreamSourceRuntimeConfiguration.


        :return: The streams of this KinesisVideoStreamSourceRuntimeConfiguration.
        :rtype: List
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this KinesisVideoStreamSourceRuntimeConfiguration.


        :param streams: The streams of this KinesisVideoStreamSourceRuntimeConfiguration.
        :type streams: List
        """
        if streams is None:
            raise ValueError("Invalid value for `streams`, must not be `None`")

        self._streams = streams

    @property
    def media_encoding(self):
        """Gets the media_encoding of this KinesisVideoStreamSourceRuntimeConfiguration.


        :return: The media_encoding of this KinesisVideoStreamSourceRuntimeConfiguration.
        :rtype: MediaEncoding
        """
        return self._media_encoding

    @media_encoding.setter
    def media_encoding(self, media_encoding):
        """Sets the media_encoding of this KinesisVideoStreamSourceRuntimeConfiguration.


        :param media_encoding: The media_encoding of this KinesisVideoStreamSourceRuntimeConfiguration.
        :type media_encoding: MediaEncoding
        """
        if media_encoding is None:
            raise ValueError("Invalid value for `media_encoding`, must not be `None`")

        self._media_encoding = media_encoding

    @property
    def media_sample_rate(self):
        """Gets the media_sample_rate of this KinesisVideoStreamSourceRuntimeConfiguration.


        :return: The media_sample_rate of this KinesisVideoStreamSourceRuntimeConfiguration.
        :rtype: int
        """
        return self._media_sample_rate

    @media_sample_rate.setter
    def media_sample_rate(self, media_sample_rate):
        """Sets the media_sample_rate of this KinesisVideoStreamSourceRuntimeConfiguration.


        :param media_sample_rate: The media_sample_rate of this KinesisVideoStreamSourceRuntimeConfiguration.
        :type media_sample_rate: int
        """
        if media_sample_rate is None:
            raise ValueError("Invalid value for `media_sample_rate`, must not be `None`")

        self._media_sample_rate = media_sample_rate
