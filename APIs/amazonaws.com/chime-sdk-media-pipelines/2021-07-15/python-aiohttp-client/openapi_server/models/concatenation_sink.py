# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.concatenation_sink_s3_bucket_sink_configuration import ConcatenationSinkS3BucketSinkConfiguration
from openapi_server.models.concatenation_sink_type import ConcatenationSinkType
from openapi_server import util


class ConcatenationSink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ConcatenationSinkType=None, s3_bucket_sink_configuration: ConcatenationSinkS3BucketSinkConfiguration=None):
        """ConcatenationSink - a model defined in OpenAPI

        :param type: The type of this ConcatenationSink.
        :param s3_bucket_sink_configuration: The s3_bucket_sink_configuration of this ConcatenationSink.
        """
        self.openapi_types = {
            'type': ConcatenationSinkType,
            's3_bucket_sink_configuration': ConcatenationSinkS3BucketSinkConfiguration
        }

        self.attribute_map = {
            'type': 'Type',
            's3_bucket_sink_configuration': 'S3BucketSinkConfiguration'
        }

        self._type = type
        self._s3_bucket_sink_configuration = s3_bucket_sink_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConcatenationSink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConcatenationSink of this ConcatenationSink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ConcatenationSink.


        :return: The type of this ConcatenationSink.
        :rtype: ConcatenationSinkType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConcatenationSink.


        :param type: The type of this ConcatenationSink.
        :type type: ConcatenationSinkType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def s3_bucket_sink_configuration(self):
        """Gets the s3_bucket_sink_configuration of this ConcatenationSink.


        :return: The s3_bucket_sink_configuration of this ConcatenationSink.
        :rtype: ConcatenationSinkS3BucketSinkConfiguration
        """
        return self._s3_bucket_sink_configuration

    @s3_bucket_sink_configuration.setter
    def s3_bucket_sink_configuration(self, s3_bucket_sink_configuration):
        """Sets the s3_bucket_sink_configuration of this ConcatenationSink.


        :param s3_bucket_sink_configuration: The s3_bucket_sink_configuration of this ConcatenationSink.
        :type s3_bucket_sink_configuration: ConcatenationSinkS3BucketSinkConfiguration
        """
        if s3_bucket_sink_configuration is None:
            raise ValueError("Invalid value for `s3_bucket_sink_configuration`, must not be `None`")

        self._s3_bucket_sink_configuration = s3_bucket_sink_configuration
