# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_connector_source_configuration_chime_sdk_meeting_live_connector_configuration import LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration
from openapi_server.models.live_connector_source_type import LiveConnectorSourceType
from openapi_server import util


class LiveConnectorSourceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_type: LiveConnectorSourceType=None, chime_sdk_meeting_live_connector_configuration: LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration=None):
        """LiveConnectorSourceConfiguration - a model defined in OpenAPI

        :param source_type: The source_type of this LiveConnectorSourceConfiguration.
        :param chime_sdk_meeting_live_connector_configuration: The chime_sdk_meeting_live_connector_configuration of this LiveConnectorSourceConfiguration.
        """
        self.openapi_types = {
            'source_type': LiveConnectorSourceType,
            'chime_sdk_meeting_live_connector_configuration': LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration
        }

        self.attribute_map = {
            'source_type': 'SourceType',
            'chime_sdk_meeting_live_connector_configuration': 'ChimeSdkMeetingLiveConnectorConfiguration'
        }

        self._source_type = source_type
        self._chime_sdk_meeting_live_connector_configuration = chime_sdk_meeting_live_connector_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveConnectorSourceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveConnectorSourceConfiguration of this LiveConnectorSourceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_type(self):
        """Gets the source_type of this LiveConnectorSourceConfiguration.


        :return: The source_type of this LiveConnectorSourceConfiguration.
        :rtype: LiveConnectorSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this LiveConnectorSourceConfiguration.


        :param source_type: The source_type of this LiveConnectorSourceConfiguration.
        :type source_type: LiveConnectorSourceType
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")

        self._source_type = source_type

    @property
    def chime_sdk_meeting_live_connector_configuration(self):
        """Gets the chime_sdk_meeting_live_connector_configuration of this LiveConnectorSourceConfiguration.


        :return: The chime_sdk_meeting_live_connector_configuration of this LiveConnectorSourceConfiguration.
        :rtype: LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration
        """
        return self._chime_sdk_meeting_live_connector_configuration

    @chime_sdk_meeting_live_connector_configuration.setter
    def chime_sdk_meeting_live_connector_configuration(self, chime_sdk_meeting_live_connector_configuration):
        """Sets the chime_sdk_meeting_live_connector_configuration of this LiveConnectorSourceConfiguration.


        :param chime_sdk_meeting_live_connector_configuration: The chime_sdk_meeting_live_connector_configuration of this LiveConnectorSourceConfiguration.
        :type chime_sdk_meeting_live_connector_configuration: LiveConnectorSourceConfigurationChimeSdkMeetingLiveConnectorConfiguration
        """
        if chime_sdk_meeting_live_connector_configuration is None:
            raise ValueError("Invalid value for `chime_sdk_meeting_live_connector_configuration`, must not be `None`")

        self._chime_sdk_meeting_live_connector_configuration = chime_sdk_meeting_live_connector_configuration
