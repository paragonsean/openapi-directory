# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_capture_pipeline_source_configuration_chime_sdk_meeting_configuration import MediaCapturePipelineSourceConfigurationChimeSdkMeetingConfiguration
from openapi_server import util


class MediaCapturePipelineSourceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_pipeline_arn: str=None, chime_sdk_meeting_configuration: MediaCapturePipelineSourceConfigurationChimeSdkMeetingConfiguration=None):
        """MediaCapturePipelineSourceConfiguration - a model defined in OpenAPI

        :param media_pipeline_arn: The media_pipeline_arn of this MediaCapturePipelineSourceConfiguration.
        :param chime_sdk_meeting_configuration: The chime_sdk_meeting_configuration of this MediaCapturePipelineSourceConfiguration.
        """
        self.openapi_types = {
            'media_pipeline_arn': str,
            'chime_sdk_meeting_configuration': MediaCapturePipelineSourceConfigurationChimeSdkMeetingConfiguration
        }

        self.attribute_map = {
            'media_pipeline_arn': 'MediaPipelineArn',
            'chime_sdk_meeting_configuration': 'ChimeSdkMeetingConfiguration'
        }

        self._media_pipeline_arn = media_pipeline_arn
        self._chime_sdk_meeting_configuration = chime_sdk_meeting_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaCapturePipelineSourceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaCapturePipelineSourceConfiguration of this MediaCapturePipelineSourceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_pipeline_arn(self):
        """Gets the media_pipeline_arn of this MediaCapturePipelineSourceConfiguration.


        :return: The media_pipeline_arn of this MediaCapturePipelineSourceConfiguration.
        :rtype: str
        """
        return self._media_pipeline_arn

    @media_pipeline_arn.setter
    def media_pipeline_arn(self, media_pipeline_arn):
        """Sets the media_pipeline_arn of this MediaCapturePipelineSourceConfiguration.


        :param media_pipeline_arn: The media_pipeline_arn of this MediaCapturePipelineSourceConfiguration.
        :type media_pipeline_arn: str
        """
        if media_pipeline_arn is None:
            raise ValueError("Invalid value for `media_pipeline_arn`, must not be `None`")

        self._media_pipeline_arn = media_pipeline_arn

    @property
    def chime_sdk_meeting_configuration(self):
        """Gets the chime_sdk_meeting_configuration of this MediaCapturePipelineSourceConfiguration.


        :return: The chime_sdk_meeting_configuration of this MediaCapturePipelineSourceConfiguration.
        :rtype: MediaCapturePipelineSourceConfigurationChimeSdkMeetingConfiguration
        """
        return self._chime_sdk_meeting_configuration

    @chime_sdk_meeting_configuration.setter
    def chime_sdk_meeting_configuration(self, chime_sdk_meeting_configuration):
        """Sets the chime_sdk_meeting_configuration of this MediaCapturePipelineSourceConfiguration.


        :param chime_sdk_meeting_configuration: The chime_sdk_meeting_configuration of this MediaCapturePipelineSourceConfiguration.
        :type chime_sdk_meeting_configuration: MediaCapturePipelineSourceConfigurationChimeSdkMeetingConfiguration
        """
        if chime_sdk_meeting_configuration is None:
            raise ValueError("Invalid value for `chime_sdk_meeting_configuration`, must not be `None`")

        self._chime_sdk_meeting_configuration = chime_sdk_meeting_configuration
