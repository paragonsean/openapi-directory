# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chime_sdk_meeting_live_connector_configuration_composited_video import ChimeSdkMeetingLiveConnectorConfigurationCompositedVideo
from openapi_server.models.chime_sdk_meeting_live_connector_configuration_source_configuration import ChimeSdkMeetingLiveConnectorConfigurationSourceConfiguration
from openapi_server.models.live_connector_mux_type import LiveConnectorMuxType
from openapi_server import util


class ChimeSdkMeetingLiveConnectorConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, mux_type: LiveConnectorMuxType=None, composited_video: ChimeSdkMeetingLiveConnectorConfigurationCompositedVideo=None, source_configuration: ChimeSdkMeetingLiveConnectorConfigurationSourceConfiguration=None):
        """ChimeSdkMeetingLiveConnectorConfiguration - a model defined in OpenAPI

        :param arn: The arn of this ChimeSdkMeetingLiveConnectorConfiguration.
        :param mux_type: The mux_type of this ChimeSdkMeetingLiveConnectorConfiguration.
        :param composited_video: The composited_video of this ChimeSdkMeetingLiveConnectorConfiguration.
        :param source_configuration: The source_configuration of this ChimeSdkMeetingLiveConnectorConfiguration.
        """
        self.openapi_types = {
            'arn': str,
            'mux_type': LiveConnectorMuxType,
            'composited_video': ChimeSdkMeetingLiveConnectorConfigurationCompositedVideo,
            'source_configuration': ChimeSdkMeetingLiveConnectorConfigurationSourceConfiguration
        }

        self.attribute_map = {
            'arn': 'Arn',
            'mux_type': 'MuxType',
            'composited_video': 'CompositedVideo',
            'source_configuration': 'SourceConfiguration'
        }

        self._arn = arn
        self._mux_type = mux_type
        self._composited_video = composited_video
        self._source_configuration = source_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChimeSdkMeetingLiveConnectorConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChimeSdkMeetingLiveConnectorConfiguration of this ChimeSdkMeetingLiveConnectorConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ChimeSdkMeetingLiveConnectorConfiguration.


        :return: The arn of this ChimeSdkMeetingLiveConnectorConfiguration.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ChimeSdkMeetingLiveConnectorConfiguration.


        :param arn: The arn of this ChimeSdkMeetingLiveConnectorConfiguration.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def mux_type(self):
        """Gets the mux_type of this ChimeSdkMeetingLiveConnectorConfiguration.


        :return: The mux_type of this ChimeSdkMeetingLiveConnectorConfiguration.
        :rtype: LiveConnectorMuxType
        """
        return self._mux_type

    @mux_type.setter
    def mux_type(self, mux_type):
        """Sets the mux_type of this ChimeSdkMeetingLiveConnectorConfiguration.


        :param mux_type: The mux_type of this ChimeSdkMeetingLiveConnectorConfiguration.
        :type mux_type: LiveConnectorMuxType
        """
        if mux_type is None:
            raise ValueError("Invalid value for `mux_type`, must not be `None`")

        self._mux_type = mux_type

    @property
    def composited_video(self):
        """Gets the composited_video of this ChimeSdkMeetingLiveConnectorConfiguration.


        :return: The composited_video of this ChimeSdkMeetingLiveConnectorConfiguration.
        :rtype: ChimeSdkMeetingLiveConnectorConfigurationCompositedVideo
        """
        return self._composited_video

    @composited_video.setter
    def composited_video(self, composited_video):
        """Sets the composited_video of this ChimeSdkMeetingLiveConnectorConfiguration.


        :param composited_video: The composited_video of this ChimeSdkMeetingLiveConnectorConfiguration.
        :type composited_video: ChimeSdkMeetingLiveConnectorConfigurationCompositedVideo
        """

        self._composited_video = composited_video

    @property
    def source_configuration(self):
        """Gets the source_configuration of this ChimeSdkMeetingLiveConnectorConfiguration.


        :return: The source_configuration of this ChimeSdkMeetingLiveConnectorConfiguration.
        :rtype: ChimeSdkMeetingLiveConnectorConfigurationSourceConfiguration
        """
        return self._source_configuration

    @source_configuration.setter
    def source_configuration(self, source_configuration):
        """Sets the source_configuration of this ChimeSdkMeetingLiveConnectorConfiguration.


        :param source_configuration: The source_configuration of this ChimeSdkMeetingLiveConnectorConfiguration.
        :type source_configuration: ChimeSdkMeetingLiveConnectorConfigurationSourceConfiguration
        """

        self._source_configuration = source_configuration
