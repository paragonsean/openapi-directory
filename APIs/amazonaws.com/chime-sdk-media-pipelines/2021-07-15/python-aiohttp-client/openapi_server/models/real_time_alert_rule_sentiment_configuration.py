# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sentiment_type import SentimentType
from openapi_server import util


class RealTimeAlertRuleSentimentConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_name: str=None, sentiment_type: SentimentType=None, time_period: int=None):
        """RealTimeAlertRuleSentimentConfiguration - a model defined in OpenAPI

        :param rule_name: The rule_name of this RealTimeAlertRuleSentimentConfiguration.
        :param sentiment_type: The sentiment_type of this RealTimeAlertRuleSentimentConfiguration.
        :param time_period: The time_period of this RealTimeAlertRuleSentimentConfiguration.
        """
        self.openapi_types = {
            'rule_name': str,
            'sentiment_type': SentimentType,
            'time_period': int
        }

        self.attribute_map = {
            'rule_name': 'RuleName',
            'sentiment_type': 'SentimentType',
            'time_period': 'TimePeriod'
        }

        self._rule_name = rule_name
        self._sentiment_type = sentiment_type
        self._time_period = time_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealTimeAlertRuleSentimentConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealTimeAlertRule_SentimentConfiguration of this RealTimeAlertRuleSentimentConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_name(self):
        """Gets the rule_name of this RealTimeAlertRuleSentimentConfiguration.


        :return: The rule_name of this RealTimeAlertRuleSentimentConfiguration.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this RealTimeAlertRuleSentimentConfiguration.


        :param rule_name: The rule_name of this RealTimeAlertRuleSentimentConfiguration.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def sentiment_type(self):
        """Gets the sentiment_type of this RealTimeAlertRuleSentimentConfiguration.


        :return: The sentiment_type of this RealTimeAlertRuleSentimentConfiguration.
        :rtype: SentimentType
        """
        return self._sentiment_type

    @sentiment_type.setter
    def sentiment_type(self, sentiment_type):
        """Sets the sentiment_type of this RealTimeAlertRuleSentimentConfiguration.


        :param sentiment_type: The sentiment_type of this RealTimeAlertRuleSentimentConfiguration.
        :type sentiment_type: SentimentType
        """
        if sentiment_type is None:
            raise ValueError("Invalid value for `sentiment_type`, must not be `None`")

        self._sentiment_type = sentiment_type

    @property
    def time_period(self):
        """Gets the time_period of this RealTimeAlertRuleSentimentConfiguration.


        :return: The time_period of this RealTimeAlertRuleSentimentConfiguration.
        :rtype: int
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this RealTimeAlertRuleSentimentConfiguration.


        :param time_period: The time_period of this RealTimeAlertRuleSentimentConfiguration.
        :type time_period: int
        """
        if time_period is None:
            raise ValueError("Invalid value for `time_period`, must not be `None`")

        self._time_period = time_period
