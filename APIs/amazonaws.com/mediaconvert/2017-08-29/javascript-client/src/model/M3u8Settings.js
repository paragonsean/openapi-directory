/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import M3u8AudioDuration from './M3u8AudioDuration';
import M3u8DataPtsControl from './M3u8DataPtsControl';
import M3u8NielsenId3 from './M3u8NielsenId3';
import M3u8PcrControl from './M3u8PcrControl';
import M3u8Scte35Source from './M3u8Scte35Source';
import TimedMetadata from './TimedMetadata';

/**
 * The M3u8Settings model module.
 * @module model/M3u8Settings
 * @version 2017-08-29
 */
class M3u8Settings {
    /**
     * Constructs a new <code>M3u8Settings</code>.
     * These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
     * @alias module:model/M3u8Settings
     */
    constructor() { 
        
        M3u8Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>M3u8Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/M3u8Settings} obj Optional instance to populate.
     * @return {module:model/M3u8Settings} The populated <code>M3u8Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new M3u8Settings();

            if (data.hasOwnProperty('AudioDuration')) {
                obj['AudioDuration'] = ApiClient.convertToType(data['AudioDuration'], M3u8AudioDuration);
            }
            if (data.hasOwnProperty('AudioFramesPerPes')) {
                obj['AudioFramesPerPes'] = ApiClient.convertToType(data['AudioFramesPerPes'], 'Number');
            }
            if (data.hasOwnProperty('AudioPids')) {
                obj['AudioPids'] = ApiClient.convertToType(data['AudioPids'], Array);
            }
            if (data.hasOwnProperty('DataPTSControl')) {
                obj['DataPTSControl'] = ApiClient.convertToType(data['DataPTSControl'], M3u8DataPtsControl);
            }
            if (data.hasOwnProperty('MaxPcrInterval')) {
                obj['MaxPcrInterval'] = ApiClient.convertToType(data['MaxPcrInterval'], 'Number');
            }
            if (data.hasOwnProperty('NielsenId3')) {
                obj['NielsenId3'] = ApiClient.convertToType(data['NielsenId3'], M3u8NielsenId3);
            }
            if (data.hasOwnProperty('PatInterval')) {
                obj['PatInterval'] = ApiClient.convertToType(data['PatInterval'], 'Number');
            }
            if (data.hasOwnProperty('PcrControl')) {
                obj['PcrControl'] = ApiClient.convertToType(data['PcrControl'], M3u8PcrControl);
            }
            if (data.hasOwnProperty('PcrPid')) {
                obj['PcrPid'] = ApiClient.convertToType(data['PcrPid'], 'Number');
            }
            if (data.hasOwnProperty('PmtInterval')) {
                obj['PmtInterval'] = ApiClient.convertToType(data['PmtInterval'], 'Number');
            }
            if (data.hasOwnProperty('PmtPid')) {
                obj['PmtPid'] = ApiClient.convertToType(data['PmtPid'], 'Number');
            }
            if (data.hasOwnProperty('PrivateMetadataPid')) {
                obj['PrivateMetadataPid'] = ApiClient.convertToType(data['PrivateMetadataPid'], 'Number');
            }
            if (data.hasOwnProperty('ProgramNumber')) {
                obj['ProgramNumber'] = ApiClient.convertToType(data['ProgramNumber'], 'Number');
            }
            if (data.hasOwnProperty('Scte35Pid')) {
                obj['Scte35Pid'] = ApiClient.convertToType(data['Scte35Pid'], 'Number');
            }
            if (data.hasOwnProperty('Scte35Source')) {
                obj['Scte35Source'] = ApiClient.convertToType(data['Scte35Source'], M3u8Scte35Source);
            }
            if (data.hasOwnProperty('TimedMetadata')) {
                obj['TimedMetadata'] = ApiClient.convertToType(data['TimedMetadata'], TimedMetadata);
            }
            if (data.hasOwnProperty('TimedMetadataPid')) {
                obj['TimedMetadataPid'] = ApiClient.convertToType(data['TimedMetadataPid'], 'Number');
            }
            if (data.hasOwnProperty('TransportStreamId')) {
                obj['TransportStreamId'] = ApiClient.convertToType(data['TransportStreamId'], 'Number');
            }
            if (data.hasOwnProperty('VideoPid')) {
                obj['VideoPid'] = ApiClient.convertToType(data['VideoPid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>M3u8Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>M3u8Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AudioDuration`
        if (data['AudioDuration']) { // data not null
          M3u8AudioDuration.validateJSON(data['AudioDuration']);
        }
        // validate the optional field `AudioFramesPerPes`
        if (data['AudioFramesPerPes']) { // data not null
          Number.validateJSON(data['AudioFramesPerPes']);
        }
        // validate the optional field `AudioPids`
        if (data['AudioPids']) { // data not null
          Array.validateJSON(data['AudioPids']);
        }
        // validate the optional field `DataPTSControl`
        if (data['DataPTSControl']) { // data not null
          M3u8DataPtsControl.validateJSON(data['DataPTSControl']);
        }
        // validate the optional field `MaxPcrInterval`
        if (data['MaxPcrInterval']) { // data not null
          Number.validateJSON(data['MaxPcrInterval']);
        }
        // validate the optional field `NielsenId3`
        if (data['NielsenId3']) { // data not null
          M3u8NielsenId3.validateJSON(data['NielsenId3']);
        }
        // validate the optional field `PatInterval`
        if (data['PatInterval']) { // data not null
          Number.validateJSON(data['PatInterval']);
        }
        // validate the optional field `PcrControl`
        if (data['PcrControl']) { // data not null
          M3u8PcrControl.validateJSON(data['PcrControl']);
        }
        // validate the optional field `PcrPid`
        if (data['PcrPid']) { // data not null
          Number.validateJSON(data['PcrPid']);
        }
        // validate the optional field `PmtInterval`
        if (data['PmtInterval']) { // data not null
          Number.validateJSON(data['PmtInterval']);
        }
        // validate the optional field `PmtPid`
        if (data['PmtPid']) { // data not null
          Number.validateJSON(data['PmtPid']);
        }
        // validate the optional field `PrivateMetadataPid`
        if (data['PrivateMetadataPid']) { // data not null
          Number.validateJSON(data['PrivateMetadataPid']);
        }
        // validate the optional field `ProgramNumber`
        if (data['ProgramNumber']) { // data not null
          Number.validateJSON(data['ProgramNumber']);
        }
        // validate the optional field `Scte35Pid`
        if (data['Scte35Pid']) { // data not null
          Number.validateJSON(data['Scte35Pid']);
        }
        // validate the optional field `Scte35Source`
        if (data['Scte35Source']) { // data not null
          M3u8Scte35Source.validateJSON(data['Scte35Source']);
        }
        // validate the optional field `TimedMetadata`
        if (data['TimedMetadata']) { // data not null
          TimedMetadata.validateJSON(data['TimedMetadata']);
        }
        // validate the optional field `TimedMetadataPid`
        if (data['TimedMetadataPid']) { // data not null
          Number.validateJSON(data['TimedMetadataPid']);
        }
        // validate the optional field `TransportStreamId`
        if (data['TransportStreamId']) { // data not null
          Number.validateJSON(data['TransportStreamId']);
        }
        // validate the optional field `VideoPid`
        if (data['VideoPid']) { // data not null
          Number.validateJSON(data['VideoPid']);
        }

        return true;
    }


}



/**
 * @member {module:model/M3u8AudioDuration} AudioDuration
 */
M3u8Settings.prototype['AudioDuration'] = undefined;

/**
 * @member {Number} AudioFramesPerPes
 */
M3u8Settings.prototype['AudioFramesPerPes'] = undefined;

/**
 * @member {Array} AudioPids
 */
M3u8Settings.prototype['AudioPids'] = undefined;

/**
 * @member {module:model/M3u8DataPtsControl} DataPTSControl
 */
M3u8Settings.prototype['DataPTSControl'] = undefined;

/**
 * @member {Number} MaxPcrInterval
 */
M3u8Settings.prototype['MaxPcrInterval'] = undefined;

/**
 * @member {module:model/M3u8NielsenId3} NielsenId3
 */
M3u8Settings.prototype['NielsenId3'] = undefined;

/**
 * @member {Number} PatInterval
 */
M3u8Settings.prototype['PatInterval'] = undefined;

/**
 * @member {module:model/M3u8PcrControl} PcrControl
 */
M3u8Settings.prototype['PcrControl'] = undefined;

/**
 * @member {Number} PcrPid
 */
M3u8Settings.prototype['PcrPid'] = undefined;

/**
 * @member {Number} PmtInterval
 */
M3u8Settings.prototype['PmtInterval'] = undefined;

/**
 * @member {Number} PmtPid
 */
M3u8Settings.prototype['PmtPid'] = undefined;

/**
 * @member {Number} PrivateMetadataPid
 */
M3u8Settings.prototype['PrivateMetadataPid'] = undefined;

/**
 * @member {Number} ProgramNumber
 */
M3u8Settings.prototype['ProgramNumber'] = undefined;

/**
 * @member {Number} Scte35Pid
 */
M3u8Settings.prototype['Scte35Pid'] = undefined;

/**
 * @member {module:model/M3u8Scte35Source} Scte35Source
 */
M3u8Settings.prototype['Scte35Source'] = undefined;

/**
 * @member {module:model/TimedMetadata} TimedMetadata
 */
M3u8Settings.prototype['TimedMetadata'] = undefined;

/**
 * @member {Number} TimedMetadataPid
 */
M3u8Settings.prototype['TimedMetadataPid'] = undefined;

/**
 * @member {Number} TransportStreamId
 */
M3u8Settings.prototype['TransportStreamId'] = undefined;

/**
 * @member {Number} VideoPid
 */
M3u8Settings.prototype['VideoPid'] = undefined;






export default M3u8Settings;

