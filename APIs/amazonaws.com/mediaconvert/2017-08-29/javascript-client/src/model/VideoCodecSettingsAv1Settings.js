/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Av1AdaptiveQuantization from './Av1AdaptiveQuantization';
import Av1BitDepth from './Av1BitDepth';
import Av1FramerateControl from './Av1FramerateControl';
import Av1FramerateConversionAlgorithm from './Av1FramerateConversionAlgorithm';
import Av1RateControlMode from './Av1RateControlMode';
import Av1Settings from './Av1Settings';
import Av1SettingsQvbrSettings from './Av1SettingsQvbrSettings';
import Av1SpatialAdaptiveQuantization from './Av1SpatialAdaptiveQuantization';

/**
 * The VideoCodecSettingsAv1Settings model module.
 * @module model/VideoCodecSettingsAv1Settings
 * @version 2017-08-29
 */
class VideoCodecSettingsAv1Settings {
    /**
     * Constructs a new <code>VideoCodecSettingsAv1Settings</code>.
     * @alias module:model/VideoCodecSettingsAv1Settings
     * @implements module:model/Av1Settings
     */
    constructor() { 
        Av1Settings.initialize(this);
        VideoCodecSettingsAv1Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoCodecSettingsAv1Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCodecSettingsAv1Settings} obj Optional instance to populate.
     * @return {module:model/VideoCodecSettingsAv1Settings} The populated <code>VideoCodecSettingsAv1Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCodecSettingsAv1Settings();
            Av1Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('AdaptiveQuantization')) {
                obj['AdaptiveQuantization'] = ApiClient.convertToType(data['AdaptiveQuantization'], Av1AdaptiveQuantization);
            }
            if (data.hasOwnProperty('BitDepth')) {
                obj['BitDepth'] = ApiClient.convertToType(data['BitDepth'], Av1BitDepth);
            }
            if (data.hasOwnProperty('FramerateControl')) {
                obj['FramerateControl'] = ApiClient.convertToType(data['FramerateControl'], Av1FramerateControl);
            }
            if (data.hasOwnProperty('FramerateConversionAlgorithm')) {
                obj['FramerateConversionAlgorithm'] = ApiClient.convertToType(data['FramerateConversionAlgorithm'], Av1FramerateConversionAlgorithm);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('GopSize')) {
                obj['GopSize'] = ApiClient.convertToType(data['GopSize'], 'Number');
            }
            if (data.hasOwnProperty('MaxBitrate')) {
                obj['MaxBitrate'] = ApiClient.convertToType(data['MaxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('NumberBFramesBetweenReferenceFrames')) {
                obj['NumberBFramesBetweenReferenceFrames'] = ApiClient.convertToType(data['NumberBFramesBetweenReferenceFrames'], 'Number');
            }
            if (data.hasOwnProperty('QvbrSettings')) {
                obj['QvbrSettings'] = Av1SettingsQvbrSettings.constructFromObject(data['QvbrSettings']);
            }
            if (data.hasOwnProperty('RateControlMode')) {
                obj['RateControlMode'] = ApiClient.convertToType(data['RateControlMode'], Av1RateControlMode);
            }
            if (data.hasOwnProperty('Slices')) {
                obj['Slices'] = ApiClient.convertToType(data['Slices'], 'Number');
            }
            if (data.hasOwnProperty('SpatialAdaptiveQuantization')) {
                obj['SpatialAdaptiveQuantization'] = ApiClient.convertToType(data['SpatialAdaptiveQuantization'], Av1SpatialAdaptiveQuantization);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCodecSettingsAv1Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCodecSettingsAv1Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AdaptiveQuantization`
        if (data['AdaptiveQuantization']) { // data not null
          Av1AdaptiveQuantization.validateJSON(data['AdaptiveQuantization']);
        }
        // validate the optional field `BitDepth`
        if (data['BitDepth']) { // data not null
          Av1BitDepth.validateJSON(data['BitDepth']);
        }
        // validate the optional field `FramerateControl`
        if (data['FramerateControl']) { // data not null
          Av1FramerateControl.validateJSON(data['FramerateControl']);
        }
        // validate the optional field `FramerateConversionAlgorithm`
        if (data['FramerateConversionAlgorithm']) { // data not null
          Av1FramerateConversionAlgorithm.validateJSON(data['FramerateConversionAlgorithm']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `GopSize`
        if (data['GopSize']) { // data not null
          Number.validateJSON(data['GopSize']);
        }
        // validate the optional field `MaxBitrate`
        if (data['MaxBitrate']) { // data not null
          Number.validateJSON(data['MaxBitrate']);
        }
        // validate the optional field `NumberBFramesBetweenReferenceFrames`
        if (data['NumberBFramesBetweenReferenceFrames']) { // data not null
          Number.validateJSON(data['NumberBFramesBetweenReferenceFrames']);
        }
        // validate the optional field `QvbrSettings`
        if (data['QvbrSettings']) { // data not null
          Av1SettingsQvbrSettings.validateJSON(data['QvbrSettings']);
        }
        // validate the optional field `RateControlMode`
        if (data['RateControlMode']) { // data not null
          Av1RateControlMode.validateJSON(data['RateControlMode']);
        }
        // validate the optional field `Slices`
        if (data['Slices']) { // data not null
          Number.validateJSON(data['Slices']);
        }
        // validate the optional field `SpatialAdaptiveQuantization`
        if (data['SpatialAdaptiveQuantization']) { // data not null
          Av1SpatialAdaptiveQuantization.validateJSON(data['SpatialAdaptiveQuantization']);
        }

        return true;
    }


}



/**
 * @member {module:model/Av1AdaptiveQuantization} AdaptiveQuantization
 */
VideoCodecSettingsAv1Settings.prototype['AdaptiveQuantization'] = undefined;

/**
 * @member {module:model/Av1BitDepth} BitDepth
 */
VideoCodecSettingsAv1Settings.prototype['BitDepth'] = undefined;

/**
 * @member {module:model/Av1FramerateControl} FramerateControl
 */
VideoCodecSettingsAv1Settings.prototype['FramerateControl'] = undefined;

/**
 * @member {module:model/Av1FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
VideoCodecSettingsAv1Settings.prototype['FramerateConversionAlgorithm'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
VideoCodecSettingsAv1Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
VideoCodecSettingsAv1Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {Number} GopSize
 */
VideoCodecSettingsAv1Settings.prototype['GopSize'] = undefined;

/**
 * @member {Number} MaxBitrate
 */
VideoCodecSettingsAv1Settings.prototype['MaxBitrate'] = undefined;

/**
 * @member {Number} NumberBFramesBetweenReferenceFrames
 */
VideoCodecSettingsAv1Settings.prototype['NumberBFramesBetweenReferenceFrames'] = undefined;

/**
 * @member {module:model/Av1SettingsQvbrSettings} QvbrSettings
 */
VideoCodecSettingsAv1Settings.prototype['QvbrSettings'] = undefined;

/**
 * @member {module:model/Av1RateControlMode} RateControlMode
 */
VideoCodecSettingsAv1Settings.prototype['RateControlMode'] = undefined;

/**
 * @member {Number} Slices
 */
VideoCodecSettingsAv1Settings.prototype['Slices'] = undefined;

/**
 * @member {module:model/Av1SpatialAdaptiveQuantization} SpatialAdaptiveQuantization
 */
VideoCodecSettingsAv1Settings.prototype['SpatialAdaptiveQuantization'] = undefined;


// Implement Av1Settings interface:
/**
 * @member {module:model/Av1AdaptiveQuantization} AdaptiveQuantization
 */
Av1Settings.prototype['AdaptiveQuantization'] = undefined;
/**
 * @member {module:model/Av1BitDepth} BitDepth
 */
Av1Settings.prototype['BitDepth'] = undefined;
/**
 * @member {module:model/Av1FramerateControl} FramerateControl
 */
Av1Settings.prototype['FramerateControl'] = undefined;
/**
 * @member {module:model/Av1FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
Av1Settings.prototype['FramerateConversionAlgorithm'] = undefined;
/**
 * @member {Number} FramerateDenominator
 */
Av1Settings.prototype['FramerateDenominator'] = undefined;
/**
 * @member {Number} FramerateNumerator
 */
Av1Settings.prototype['FramerateNumerator'] = undefined;
/**
 * @member {Number} GopSize
 */
Av1Settings.prototype['GopSize'] = undefined;
/**
 * @member {Number} MaxBitrate
 */
Av1Settings.prototype['MaxBitrate'] = undefined;
/**
 * @member {Number} NumberBFramesBetweenReferenceFrames
 */
Av1Settings.prototype['NumberBFramesBetweenReferenceFrames'] = undefined;
/**
 * @member {module:model/Av1SettingsQvbrSettings} QvbrSettings
 */
Av1Settings.prototype['QvbrSettings'] = undefined;
/**
 * @member {module:model/Av1RateControlMode} RateControlMode
 */
Av1Settings.prototype['RateControlMode'] = undefined;
/**
 * @member {Number} Slices
 */
Av1Settings.prototype['Slices'] = undefined;
/**
 * @member {module:model/Av1SpatialAdaptiveQuantization} SpatialAdaptiveQuantization
 */
Av1Settings.prototype['SpatialAdaptiveQuantization'] = undefined;




export default VideoCodecSettingsAv1Settings;

