/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import M2tsAudioBufferModel from './M2tsAudioBufferModel';
import M2tsAudioDuration from './M2tsAudioDuration';
import M2tsBufferModel from './M2tsBufferModel';
import M2tsDataPtsControl from './M2tsDataPtsControl';
import M2tsEbpAudioInterval from './M2tsEbpAudioInterval';
import M2tsEbpPlacement from './M2tsEbpPlacement';
import M2tsEsRateInPes from './M2tsEsRateInPes';
import M2tsForceTsVideoEbpOrder from './M2tsForceTsVideoEbpOrder';
import M2tsKlvMetadata from './M2tsKlvMetadata';
import M2tsNielsenId3 from './M2tsNielsenId3';
import M2tsPcrControl from './M2tsPcrControl';
import M2tsRateMode from './M2tsRateMode';
import M2tsScte35Source from './M2tsScte35Source';
import M2tsSegmentationMarkers from './M2tsSegmentationMarkers';
import M2tsSegmentationStyle from './M2tsSegmentationStyle';
import M2tsSettings from './M2tsSettings';
import M2tsSettingsDvbNitSettings from './M2tsSettingsDvbNitSettings';
import M2tsSettingsDvbSdtSettings from './M2tsSettingsDvbSdtSettings';
import M2tsSettingsDvbTdtSettings from './M2tsSettingsDvbTdtSettings';
import M2tsSettingsScte35Esam from './M2tsSettingsScte35Esam';

/**
 * The ContainerSettingsM2tsSettings model module.
 * @module model/ContainerSettingsM2tsSettings
 * @version 2017-08-29
 */
class ContainerSettingsM2tsSettings {
    /**
     * Constructs a new <code>ContainerSettingsM2tsSettings</code>.
     * @alias module:model/ContainerSettingsM2tsSettings
     * @implements module:model/M2tsSettings
     */
    constructor() { 
        M2tsSettings.initialize(this);
        ContainerSettingsM2tsSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerSettingsM2tsSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerSettingsM2tsSettings} obj Optional instance to populate.
     * @return {module:model/ContainerSettingsM2tsSettings} The populated <code>ContainerSettingsM2tsSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerSettingsM2tsSettings();
            M2tsSettings.constructFromObject(data, obj);

            if (data.hasOwnProperty('AudioBufferModel')) {
                obj['AudioBufferModel'] = ApiClient.convertToType(data['AudioBufferModel'], M2tsAudioBufferModel);
            }
            if (data.hasOwnProperty('AudioDuration')) {
                obj['AudioDuration'] = ApiClient.convertToType(data['AudioDuration'], M2tsAudioDuration);
            }
            if (data.hasOwnProperty('AudioFramesPerPes')) {
                obj['AudioFramesPerPes'] = ApiClient.convertToType(data['AudioFramesPerPes'], 'Number');
            }
            if (data.hasOwnProperty('AudioPids')) {
                obj['AudioPids'] = ApiClient.convertToType(data['AudioPids'], Array);
            }
            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('BufferModel')) {
                obj['BufferModel'] = ApiClient.convertToType(data['BufferModel'], M2tsBufferModel);
            }
            if (data.hasOwnProperty('DataPTSControl')) {
                obj['DataPTSControl'] = ApiClient.convertToType(data['DataPTSControl'], M2tsDataPtsControl);
            }
            if (data.hasOwnProperty('DvbNitSettings')) {
                obj['DvbNitSettings'] = M2tsSettingsDvbNitSettings.constructFromObject(data['DvbNitSettings']);
            }
            if (data.hasOwnProperty('DvbSdtSettings')) {
                obj['DvbSdtSettings'] = M2tsSettingsDvbSdtSettings.constructFromObject(data['DvbSdtSettings']);
            }
            if (data.hasOwnProperty('DvbSubPids')) {
                obj['DvbSubPids'] = ApiClient.convertToType(data['DvbSubPids'], Array);
            }
            if (data.hasOwnProperty('DvbTdtSettings')) {
                obj['DvbTdtSettings'] = M2tsSettingsDvbTdtSettings.constructFromObject(data['DvbTdtSettings']);
            }
            if (data.hasOwnProperty('DvbTeletextPid')) {
                obj['DvbTeletextPid'] = ApiClient.convertToType(data['DvbTeletextPid'], 'Number');
            }
            if (data.hasOwnProperty('EbpAudioInterval')) {
                obj['EbpAudioInterval'] = ApiClient.convertToType(data['EbpAudioInterval'], M2tsEbpAudioInterval);
            }
            if (data.hasOwnProperty('EbpPlacement')) {
                obj['EbpPlacement'] = ApiClient.convertToType(data['EbpPlacement'], M2tsEbpPlacement);
            }
            if (data.hasOwnProperty('EsRateInPes')) {
                obj['EsRateInPes'] = ApiClient.convertToType(data['EsRateInPes'], M2tsEsRateInPes);
            }
            if (data.hasOwnProperty('ForceTsVideoEbpOrder')) {
                obj['ForceTsVideoEbpOrder'] = ApiClient.convertToType(data['ForceTsVideoEbpOrder'], M2tsForceTsVideoEbpOrder);
            }
            if (data.hasOwnProperty('FragmentTime')) {
                obj['FragmentTime'] = ApiClient.convertToType(data['FragmentTime'], 'Number');
            }
            if (data.hasOwnProperty('KlvMetadata')) {
                obj['KlvMetadata'] = ApiClient.convertToType(data['KlvMetadata'], M2tsKlvMetadata);
            }
            if (data.hasOwnProperty('MaxPcrInterval')) {
                obj['MaxPcrInterval'] = ApiClient.convertToType(data['MaxPcrInterval'], 'Number');
            }
            if (data.hasOwnProperty('MinEbpInterval')) {
                obj['MinEbpInterval'] = ApiClient.convertToType(data['MinEbpInterval'], 'Number');
            }
            if (data.hasOwnProperty('NielsenId3')) {
                obj['NielsenId3'] = ApiClient.convertToType(data['NielsenId3'], M2tsNielsenId3);
            }
            if (data.hasOwnProperty('NullPacketBitrate')) {
                obj['NullPacketBitrate'] = ApiClient.convertToType(data['NullPacketBitrate'], 'Number');
            }
            if (data.hasOwnProperty('PatInterval')) {
                obj['PatInterval'] = ApiClient.convertToType(data['PatInterval'], 'Number');
            }
            if (data.hasOwnProperty('PcrControl')) {
                obj['PcrControl'] = ApiClient.convertToType(data['PcrControl'], M2tsPcrControl);
            }
            if (data.hasOwnProperty('PcrPid')) {
                obj['PcrPid'] = ApiClient.convertToType(data['PcrPid'], 'Number');
            }
            if (data.hasOwnProperty('PmtInterval')) {
                obj['PmtInterval'] = ApiClient.convertToType(data['PmtInterval'], 'Number');
            }
            if (data.hasOwnProperty('PmtPid')) {
                obj['PmtPid'] = ApiClient.convertToType(data['PmtPid'], 'Number');
            }
            if (data.hasOwnProperty('PrivateMetadataPid')) {
                obj['PrivateMetadataPid'] = ApiClient.convertToType(data['PrivateMetadataPid'], 'Number');
            }
            if (data.hasOwnProperty('ProgramNumber')) {
                obj['ProgramNumber'] = ApiClient.convertToType(data['ProgramNumber'], 'Number');
            }
            if (data.hasOwnProperty('RateMode')) {
                obj['RateMode'] = ApiClient.convertToType(data['RateMode'], M2tsRateMode);
            }
            if (data.hasOwnProperty('Scte35Esam')) {
                obj['Scte35Esam'] = M2tsSettingsScte35Esam.constructFromObject(data['Scte35Esam']);
            }
            if (data.hasOwnProperty('Scte35Pid')) {
                obj['Scte35Pid'] = ApiClient.convertToType(data['Scte35Pid'], 'Number');
            }
            if (data.hasOwnProperty('Scte35Source')) {
                obj['Scte35Source'] = ApiClient.convertToType(data['Scte35Source'], M2tsScte35Source);
            }
            if (data.hasOwnProperty('SegmentationMarkers')) {
                obj['SegmentationMarkers'] = ApiClient.convertToType(data['SegmentationMarkers'], M2tsSegmentationMarkers);
            }
            if (data.hasOwnProperty('SegmentationStyle')) {
                obj['SegmentationStyle'] = ApiClient.convertToType(data['SegmentationStyle'], M2tsSegmentationStyle);
            }
            if (data.hasOwnProperty('SegmentationTime')) {
                obj['SegmentationTime'] = ApiClient.convertToType(data['SegmentationTime'], 'Number');
            }
            if (data.hasOwnProperty('TimedMetadataPid')) {
                obj['TimedMetadataPid'] = ApiClient.convertToType(data['TimedMetadataPid'], 'Number');
            }
            if (data.hasOwnProperty('TransportStreamId')) {
                obj['TransportStreamId'] = ApiClient.convertToType(data['TransportStreamId'], 'Number');
            }
            if (data.hasOwnProperty('VideoPid')) {
                obj['VideoPid'] = ApiClient.convertToType(data['VideoPid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerSettingsM2tsSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerSettingsM2tsSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AudioBufferModel`
        if (data['AudioBufferModel']) { // data not null
          M2tsAudioBufferModel.validateJSON(data['AudioBufferModel']);
        }
        // validate the optional field `AudioDuration`
        if (data['AudioDuration']) { // data not null
          M2tsAudioDuration.validateJSON(data['AudioDuration']);
        }
        // validate the optional field `AudioFramesPerPes`
        if (data['AudioFramesPerPes']) { // data not null
          Number.validateJSON(data['AudioFramesPerPes']);
        }
        // validate the optional field `AudioPids`
        if (data['AudioPids']) { // data not null
          Array.validateJSON(data['AudioPids']);
        }
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `BufferModel`
        if (data['BufferModel']) { // data not null
          M2tsBufferModel.validateJSON(data['BufferModel']);
        }
        // validate the optional field `DataPTSControl`
        if (data['DataPTSControl']) { // data not null
          M2tsDataPtsControl.validateJSON(data['DataPTSControl']);
        }
        // validate the optional field `DvbNitSettings`
        if (data['DvbNitSettings']) { // data not null
          M2tsSettingsDvbNitSettings.validateJSON(data['DvbNitSettings']);
        }
        // validate the optional field `DvbSdtSettings`
        if (data['DvbSdtSettings']) { // data not null
          M2tsSettingsDvbSdtSettings.validateJSON(data['DvbSdtSettings']);
        }
        // validate the optional field `DvbSubPids`
        if (data['DvbSubPids']) { // data not null
          Array.validateJSON(data['DvbSubPids']);
        }
        // validate the optional field `DvbTdtSettings`
        if (data['DvbTdtSettings']) { // data not null
          M2tsSettingsDvbTdtSettings.validateJSON(data['DvbTdtSettings']);
        }
        // validate the optional field `DvbTeletextPid`
        if (data['DvbTeletextPid']) { // data not null
          Number.validateJSON(data['DvbTeletextPid']);
        }
        // validate the optional field `EbpAudioInterval`
        if (data['EbpAudioInterval']) { // data not null
          M2tsEbpAudioInterval.validateJSON(data['EbpAudioInterval']);
        }
        // validate the optional field `EbpPlacement`
        if (data['EbpPlacement']) { // data not null
          M2tsEbpPlacement.validateJSON(data['EbpPlacement']);
        }
        // validate the optional field `EsRateInPes`
        if (data['EsRateInPes']) { // data not null
          M2tsEsRateInPes.validateJSON(data['EsRateInPes']);
        }
        // validate the optional field `ForceTsVideoEbpOrder`
        if (data['ForceTsVideoEbpOrder']) { // data not null
          M2tsForceTsVideoEbpOrder.validateJSON(data['ForceTsVideoEbpOrder']);
        }
        // validate the optional field `FragmentTime`
        if (data['FragmentTime']) { // data not null
          Number.validateJSON(data['FragmentTime']);
        }
        // validate the optional field `KlvMetadata`
        if (data['KlvMetadata']) { // data not null
          M2tsKlvMetadata.validateJSON(data['KlvMetadata']);
        }
        // validate the optional field `MaxPcrInterval`
        if (data['MaxPcrInterval']) { // data not null
          Number.validateJSON(data['MaxPcrInterval']);
        }
        // validate the optional field `MinEbpInterval`
        if (data['MinEbpInterval']) { // data not null
          Number.validateJSON(data['MinEbpInterval']);
        }
        // validate the optional field `NielsenId3`
        if (data['NielsenId3']) { // data not null
          M2tsNielsenId3.validateJSON(data['NielsenId3']);
        }
        // validate the optional field `NullPacketBitrate`
        if (data['NullPacketBitrate']) { // data not null
          Number.validateJSON(data['NullPacketBitrate']);
        }
        // validate the optional field `PatInterval`
        if (data['PatInterval']) { // data not null
          Number.validateJSON(data['PatInterval']);
        }
        // validate the optional field `PcrControl`
        if (data['PcrControl']) { // data not null
          M2tsPcrControl.validateJSON(data['PcrControl']);
        }
        // validate the optional field `PcrPid`
        if (data['PcrPid']) { // data not null
          Number.validateJSON(data['PcrPid']);
        }
        // validate the optional field `PmtInterval`
        if (data['PmtInterval']) { // data not null
          Number.validateJSON(data['PmtInterval']);
        }
        // validate the optional field `PmtPid`
        if (data['PmtPid']) { // data not null
          Number.validateJSON(data['PmtPid']);
        }
        // validate the optional field `PrivateMetadataPid`
        if (data['PrivateMetadataPid']) { // data not null
          Number.validateJSON(data['PrivateMetadataPid']);
        }
        // validate the optional field `ProgramNumber`
        if (data['ProgramNumber']) { // data not null
          Number.validateJSON(data['ProgramNumber']);
        }
        // validate the optional field `RateMode`
        if (data['RateMode']) { // data not null
          M2tsRateMode.validateJSON(data['RateMode']);
        }
        // validate the optional field `Scte35Esam`
        if (data['Scte35Esam']) { // data not null
          M2tsSettingsScte35Esam.validateJSON(data['Scte35Esam']);
        }
        // validate the optional field `Scte35Pid`
        if (data['Scte35Pid']) { // data not null
          Number.validateJSON(data['Scte35Pid']);
        }
        // validate the optional field `Scte35Source`
        if (data['Scte35Source']) { // data not null
          M2tsScte35Source.validateJSON(data['Scte35Source']);
        }
        // validate the optional field `SegmentationMarkers`
        if (data['SegmentationMarkers']) { // data not null
          M2tsSegmentationMarkers.validateJSON(data['SegmentationMarkers']);
        }
        // validate the optional field `SegmentationStyle`
        if (data['SegmentationStyle']) { // data not null
          M2tsSegmentationStyle.validateJSON(data['SegmentationStyle']);
        }
        // validate the optional field `SegmentationTime`
        if (data['SegmentationTime']) { // data not null
          Number.validateJSON(data['SegmentationTime']);
        }
        // validate the optional field `TimedMetadataPid`
        if (data['TimedMetadataPid']) { // data not null
          Number.validateJSON(data['TimedMetadataPid']);
        }
        // validate the optional field `TransportStreamId`
        if (data['TransportStreamId']) { // data not null
          Number.validateJSON(data['TransportStreamId']);
        }
        // validate the optional field `VideoPid`
        if (data['VideoPid']) { // data not null
          Number.validateJSON(data['VideoPid']);
        }

        return true;
    }


}



/**
 * @member {module:model/M2tsAudioBufferModel} AudioBufferModel
 */
ContainerSettingsM2tsSettings.prototype['AudioBufferModel'] = undefined;

/**
 * @member {module:model/M2tsAudioDuration} AudioDuration
 */
ContainerSettingsM2tsSettings.prototype['AudioDuration'] = undefined;

/**
 * @member {Number} AudioFramesPerPes
 */
ContainerSettingsM2tsSettings.prototype['AudioFramesPerPes'] = undefined;

/**
 * @member {Array} AudioPids
 */
ContainerSettingsM2tsSettings.prototype['AudioPids'] = undefined;

/**
 * @member {Number} Bitrate
 */
ContainerSettingsM2tsSettings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/M2tsBufferModel} BufferModel
 */
ContainerSettingsM2tsSettings.prototype['BufferModel'] = undefined;

/**
 * @member {module:model/M2tsDataPtsControl} DataPTSControl
 */
ContainerSettingsM2tsSettings.prototype['DataPTSControl'] = undefined;

/**
 * @member {module:model/M2tsSettingsDvbNitSettings} DvbNitSettings
 */
ContainerSettingsM2tsSettings.prototype['DvbNitSettings'] = undefined;

/**
 * @member {module:model/M2tsSettingsDvbSdtSettings} DvbSdtSettings
 */
ContainerSettingsM2tsSettings.prototype['DvbSdtSettings'] = undefined;

/**
 * @member {Array} DvbSubPids
 */
ContainerSettingsM2tsSettings.prototype['DvbSubPids'] = undefined;

/**
 * @member {module:model/M2tsSettingsDvbTdtSettings} DvbTdtSettings
 */
ContainerSettingsM2tsSettings.prototype['DvbTdtSettings'] = undefined;

/**
 * @member {Number} DvbTeletextPid
 */
ContainerSettingsM2tsSettings.prototype['DvbTeletextPid'] = undefined;

/**
 * @member {module:model/M2tsEbpAudioInterval} EbpAudioInterval
 */
ContainerSettingsM2tsSettings.prototype['EbpAudioInterval'] = undefined;

/**
 * @member {module:model/M2tsEbpPlacement} EbpPlacement
 */
ContainerSettingsM2tsSettings.prototype['EbpPlacement'] = undefined;

/**
 * @member {module:model/M2tsEsRateInPes} EsRateInPes
 */
ContainerSettingsM2tsSettings.prototype['EsRateInPes'] = undefined;

/**
 * @member {module:model/M2tsForceTsVideoEbpOrder} ForceTsVideoEbpOrder
 */
ContainerSettingsM2tsSettings.prototype['ForceTsVideoEbpOrder'] = undefined;

/**
 * @member {Number} FragmentTime
 */
ContainerSettingsM2tsSettings.prototype['FragmentTime'] = undefined;

/**
 * @member {module:model/M2tsKlvMetadata} KlvMetadata
 */
ContainerSettingsM2tsSettings.prototype['KlvMetadata'] = undefined;

/**
 * @member {Number} MaxPcrInterval
 */
ContainerSettingsM2tsSettings.prototype['MaxPcrInterval'] = undefined;

/**
 * @member {Number} MinEbpInterval
 */
ContainerSettingsM2tsSettings.prototype['MinEbpInterval'] = undefined;

/**
 * @member {module:model/M2tsNielsenId3} NielsenId3
 */
ContainerSettingsM2tsSettings.prototype['NielsenId3'] = undefined;

/**
 * @member {Number} NullPacketBitrate
 */
ContainerSettingsM2tsSettings.prototype['NullPacketBitrate'] = undefined;

/**
 * @member {Number} PatInterval
 */
ContainerSettingsM2tsSettings.prototype['PatInterval'] = undefined;

/**
 * @member {module:model/M2tsPcrControl} PcrControl
 */
ContainerSettingsM2tsSettings.prototype['PcrControl'] = undefined;

/**
 * @member {Number} PcrPid
 */
ContainerSettingsM2tsSettings.prototype['PcrPid'] = undefined;

/**
 * @member {Number} PmtInterval
 */
ContainerSettingsM2tsSettings.prototype['PmtInterval'] = undefined;

/**
 * @member {Number} PmtPid
 */
ContainerSettingsM2tsSettings.prototype['PmtPid'] = undefined;

/**
 * @member {Number} PrivateMetadataPid
 */
ContainerSettingsM2tsSettings.prototype['PrivateMetadataPid'] = undefined;

/**
 * @member {Number} ProgramNumber
 */
ContainerSettingsM2tsSettings.prototype['ProgramNumber'] = undefined;

/**
 * @member {module:model/M2tsRateMode} RateMode
 */
ContainerSettingsM2tsSettings.prototype['RateMode'] = undefined;

/**
 * @member {module:model/M2tsSettingsScte35Esam} Scte35Esam
 */
ContainerSettingsM2tsSettings.prototype['Scte35Esam'] = undefined;

/**
 * @member {Number} Scte35Pid
 */
ContainerSettingsM2tsSettings.prototype['Scte35Pid'] = undefined;

/**
 * @member {module:model/M2tsScte35Source} Scte35Source
 */
ContainerSettingsM2tsSettings.prototype['Scte35Source'] = undefined;

/**
 * @member {module:model/M2tsSegmentationMarkers} SegmentationMarkers
 */
ContainerSettingsM2tsSettings.prototype['SegmentationMarkers'] = undefined;

/**
 * @member {module:model/M2tsSegmentationStyle} SegmentationStyle
 */
ContainerSettingsM2tsSettings.prototype['SegmentationStyle'] = undefined;

/**
 * @member {Number} SegmentationTime
 */
ContainerSettingsM2tsSettings.prototype['SegmentationTime'] = undefined;

/**
 * @member {Number} TimedMetadataPid
 */
ContainerSettingsM2tsSettings.prototype['TimedMetadataPid'] = undefined;

/**
 * @member {Number} TransportStreamId
 */
ContainerSettingsM2tsSettings.prototype['TransportStreamId'] = undefined;

/**
 * @member {Number} VideoPid
 */
ContainerSettingsM2tsSettings.prototype['VideoPid'] = undefined;


// Implement M2tsSettings interface:
/**
 * @member {module:model/M2tsAudioBufferModel} AudioBufferModel
 */
M2tsSettings.prototype['AudioBufferModel'] = undefined;
/**
 * @member {module:model/M2tsAudioDuration} AudioDuration
 */
M2tsSettings.prototype['AudioDuration'] = undefined;
/**
 * @member {Number} AudioFramesPerPes
 */
M2tsSettings.prototype['AudioFramesPerPes'] = undefined;
/**
 * @member {Array} AudioPids
 */
M2tsSettings.prototype['AudioPids'] = undefined;
/**
 * @member {Number} Bitrate
 */
M2tsSettings.prototype['Bitrate'] = undefined;
/**
 * @member {module:model/M2tsBufferModel} BufferModel
 */
M2tsSettings.prototype['BufferModel'] = undefined;
/**
 * @member {module:model/M2tsDataPtsControl} DataPTSControl
 */
M2tsSettings.prototype['DataPTSControl'] = undefined;
/**
 * @member {module:model/M2tsSettingsDvbNitSettings} DvbNitSettings
 */
M2tsSettings.prototype['DvbNitSettings'] = undefined;
/**
 * @member {module:model/M2tsSettingsDvbSdtSettings} DvbSdtSettings
 */
M2tsSettings.prototype['DvbSdtSettings'] = undefined;
/**
 * @member {Array} DvbSubPids
 */
M2tsSettings.prototype['DvbSubPids'] = undefined;
/**
 * @member {module:model/M2tsSettingsDvbTdtSettings} DvbTdtSettings
 */
M2tsSettings.prototype['DvbTdtSettings'] = undefined;
/**
 * @member {Number} DvbTeletextPid
 */
M2tsSettings.prototype['DvbTeletextPid'] = undefined;
/**
 * @member {module:model/M2tsEbpAudioInterval} EbpAudioInterval
 */
M2tsSettings.prototype['EbpAudioInterval'] = undefined;
/**
 * @member {module:model/M2tsEbpPlacement} EbpPlacement
 */
M2tsSettings.prototype['EbpPlacement'] = undefined;
/**
 * @member {module:model/M2tsEsRateInPes} EsRateInPes
 */
M2tsSettings.prototype['EsRateInPes'] = undefined;
/**
 * @member {module:model/M2tsForceTsVideoEbpOrder} ForceTsVideoEbpOrder
 */
M2tsSettings.prototype['ForceTsVideoEbpOrder'] = undefined;
/**
 * @member {Number} FragmentTime
 */
M2tsSettings.prototype['FragmentTime'] = undefined;
/**
 * @member {module:model/M2tsKlvMetadata} KlvMetadata
 */
M2tsSettings.prototype['KlvMetadata'] = undefined;
/**
 * @member {Number} MaxPcrInterval
 */
M2tsSettings.prototype['MaxPcrInterval'] = undefined;
/**
 * @member {Number} MinEbpInterval
 */
M2tsSettings.prototype['MinEbpInterval'] = undefined;
/**
 * @member {module:model/M2tsNielsenId3} NielsenId3
 */
M2tsSettings.prototype['NielsenId3'] = undefined;
/**
 * @member {Number} NullPacketBitrate
 */
M2tsSettings.prototype['NullPacketBitrate'] = undefined;
/**
 * @member {Number} PatInterval
 */
M2tsSettings.prototype['PatInterval'] = undefined;
/**
 * @member {module:model/M2tsPcrControl} PcrControl
 */
M2tsSettings.prototype['PcrControl'] = undefined;
/**
 * @member {Number} PcrPid
 */
M2tsSettings.prototype['PcrPid'] = undefined;
/**
 * @member {Number} PmtInterval
 */
M2tsSettings.prototype['PmtInterval'] = undefined;
/**
 * @member {Number} PmtPid
 */
M2tsSettings.prototype['PmtPid'] = undefined;
/**
 * @member {Number} PrivateMetadataPid
 */
M2tsSettings.prototype['PrivateMetadataPid'] = undefined;
/**
 * @member {Number} ProgramNumber
 */
M2tsSettings.prototype['ProgramNumber'] = undefined;
/**
 * @member {module:model/M2tsRateMode} RateMode
 */
M2tsSettings.prototype['RateMode'] = undefined;
/**
 * @member {module:model/M2tsSettingsScte35Esam} Scte35Esam
 */
M2tsSettings.prototype['Scte35Esam'] = undefined;
/**
 * @member {Number} Scte35Pid
 */
M2tsSettings.prototype['Scte35Pid'] = undefined;
/**
 * @member {module:model/M2tsScte35Source} Scte35Source
 */
M2tsSettings.prototype['Scte35Source'] = undefined;
/**
 * @member {module:model/M2tsSegmentationMarkers} SegmentationMarkers
 */
M2tsSettings.prototype['SegmentationMarkers'] = undefined;
/**
 * @member {module:model/M2tsSegmentationStyle} SegmentationStyle
 */
M2tsSettings.prototype['SegmentationStyle'] = undefined;
/**
 * @member {Number} SegmentationTime
 */
M2tsSettings.prototype['SegmentationTime'] = undefined;
/**
 * @member {Number} TimedMetadataPid
 */
M2tsSettings.prototype['TimedMetadataPid'] = undefined;
/**
 * @member {Number} TransportStreamId
 */
M2tsSettings.prototype['TransportStreamId'] = undefined;
/**
 * @member {Number} VideoPid
 */
M2tsSettings.prototype['VideoPid'] = undefined;




export default ContainerSettingsM2tsSettings;

