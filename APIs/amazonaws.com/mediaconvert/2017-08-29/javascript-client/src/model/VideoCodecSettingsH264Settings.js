/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import H264AdaptiveQuantization from './H264AdaptiveQuantization';
import H264CodecLevel from './H264CodecLevel';
import H264CodecProfile from './H264CodecProfile';
import H264DynamicSubGop from './H264DynamicSubGop';
import H264EntropyEncoding from './H264EntropyEncoding';
import H264FieldEncoding from './H264FieldEncoding';
import H264FlickerAdaptiveQuantization from './H264FlickerAdaptiveQuantization';
import H264FramerateControl from './H264FramerateControl';
import H264FramerateConversionAlgorithm from './H264FramerateConversionAlgorithm';
import H264GopBReference from './H264GopBReference';
import H264GopSizeUnits from './H264GopSizeUnits';
import H264InterlaceMode from './H264InterlaceMode';
import H264ParControl from './H264ParControl';
import H264QualityTuningLevel from './H264QualityTuningLevel';
import H264RateControlMode from './H264RateControlMode';
import H264RepeatPps from './H264RepeatPps';
import H264ScanTypeConversionMode from './H264ScanTypeConversionMode';
import H264SceneChangeDetect from './H264SceneChangeDetect';
import H264Settings from './H264Settings';
import H264SettingsBandwidthReductionFilter from './H264SettingsBandwidthReductionFilter';
import H264SettingsQvbrSettings from './H264SettingsQvbrSettings';
import H264SlowPal from './H264SlowPal';
import H264SpatialAdaptiveQuantization from './H264SpatialAdaptiveQuantization';
import H264Syntax from './H264Syntax';
import H264Telecine from './H264Telecine';
import H264TemporalAdaptiveQuantization from './H264TemporalAdaptiveQuantization';
import H264UnregisteredSeiTimecode from './H264UnregisteredSeiTimecode';

/**
 * The VideoCodecSettingsH264Settings model module.
 * @module model/VideoCodecSettingsH264Settings
 * @version 2017-08-29
 */
class VideoCodecSettingsH264Settings {
    /**
     * Constructs a new <code>VideoCodecSettingsH264Settings</code>.
     * @alias module:model/VideoCodecSettingsH264Settings
     * @implements module:model/H264Settings
     */
    constructor() { 
        H264Settings.initialize(this);
        VideoCodecSettingsH264Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoCodecSettingsH264Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCodecSettingsH264Settings} obj Optional instance to populate.
     * @return {module:model/VideoCodecSettingsH264Settings} The populated <code>VideoCodecSettingsH264Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCodecSettingsH264Settings();
            H264Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('AdaptiveQuantization')) {
                obj['AdaptiveQuantization'] = ApiClient.convertToType(data['AdaptiveQuantization'], H264AdaptiveQuantization);
            }
            if (data.hasOwnProperty('BandwidthReductionFilter')) {
                obj['BandwidthReductionFilter'] = H264SettingsBandwidthReductionFilter.constructFromObject(data['BandwidthReductionFilter']);
            }
            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('CodecLevel')) {
                obj['CodecLevel'] = ApiClient.convertToType(data['CodecLevel'], H264CodecLevel);
            }
            if (data.hasOwnProperty('CodecProfile')) {
                obj['CodecProfile'] = ApiClient.convertToType(data['CodecProfile'], H264CodecProfile);
            }
            if (data.hasOwnProperty('DynamicSubGop')) {
                obj['DynamicSubGop'] = ApiClient.convertToType(data['DynamicSubGop'], H264DynamicSubGop);
            }
            if (data.hasOwnProperty('EntropyEncoding')) {
                obj['EntropyEncoding'] = ApiClient.convertToType(data['EntropyEncoding'], H264EntropyEncoding);
            }
            if (data.hasOwnProperty('FieldEncoding')) {
                obj['FieldEncoding'] = ApiClient.convertToType(data['FieldEncoding'], H264FieldEncoding);
            }
            if (data.hasOwnProperty('FlickerAdaptiveQuantization')) {
                obj['FlickerAdaptiveQuantization'] = ApiClient.convertToType(data['FlickerAdaptiveQuantization'], H264FlickerAdaptiveQuantization);
            }
            if (data.hasOwnProperty('FramerateControl')) {
                obj['FramerateControl'] = ApiClient.convertToType(data['FramerateControl'], H264FramerateControl);
            }
            if (data.hasOwnProperty('FramerateConversionAlgorithm')) {
                obj['FramerateConversionAlgorithm'] = ApiClient.convertToType(data['FramerateConversionAlgorithm'], H264FramerateConversionAlgorithm);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('GopBReference')) {
                obj['GopBReference'] = ApiClient.convertToType(data['GopBReference'], H264GopBReference);
            }
            if (data.hasOwnProperty('GopClosedCadence')) {
                obj['GopClosedCadence'] = ApiClient.convertToType(data['GopClosedCadence'], 'Number');
            }
            if (data.hasOwnProperty('GopSize')) {
                obj['GopSize'] = ApiClient.convertToType(data['GopSize'], 'Number');
            }
            if (data.hasOwnProperty('GopSizeUnits')) {
                obj['GopSizeUnits'] = ApiClient.convertToType(data['GopSizeUnits'], H264GopSizeUnits);
            }
            if (data.hasOwnProperty('HrdBufferFinalFillPercentage')) {
                obj['HrdBufferFinalFillPercentage'] = ApiClient.convertToType(data['HrdBufferFinalFillPercentage'], 'Number');
            }
            if (data.hasOwnProperty('HrdBufferInitialFillPercentage')) {
                obj['HrdBufferInitialFillPercentage'] = ApiClient.convertToType(data['HrdBufferInitialFillPercentage'], 'Number');
            }
            if (data.hasOwnProperty('HrdBufferSize')) {
                obj['HrdBufferSize'] = ApiClient.convertToType(data['HrdBufferSize'], 'Number');
            }
            if (data.hasOwnProperty('InterlaceMode')) {
                obj['InterlaceMode'] = ApiClient.convertToType(data['InterlaceMode'], H264InterlaceMode);
            }
            if (data.hasOwnProperty('MaxBitrate')) {
                obj['MaxBitrate'] = ApiClient.convertToType(data['MaxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MinIInterval')) {
                obj['MinIInterval'] = ApiClient.convertToType(data['MinIInterval'], 'Number');
            }
            if (data.hasOwnProperty('NumberBFramesBetweenReferenceFrames')) {
                obj['NumberBFramesBetweenReferenceFrames'] = ApiClient.convertToType(data['NumberBFramesBetweenReferenceFrames'], 'Number');
            }
            if (data.hasOwnProperty('NumberReferenceFrames')) {
                obj['NumberReferenceFrames'] = ApiClient.convertToType(data['NumberReferenceFrames'], 'Number');
            }
            if (data.hasOwnProperty('ParControl')) {
                obj['ParControl'] = ApiClient.convertToType(data['ParControl'], H264ParControl);
            }
            if (data.hasOwnProperty('ParDenominator')) {
                obj['ParDenominator'] = ApiClient.convertToType(data['ParDenominator'], 'Number');
            }
            if (data.hasOwnProperty('ParNumerator')) {
                obj['ParNumerator'] = ApiClient.convertToType(data['ParNumerator'], 'Number');
            }
            if (data.hasOwnProperty('QualityTuningLevel')) {
                obj['QualityTuningLevel'] = ApiClient.convertToType(data['QualityTuningLevel'], H264QualityTuningLevel);
            }
            if (data.hasOwnProperty('QvbrSettings')) {
                obj['QvbrSettings'] = H264SettingsQvbrSettings.constructFromObject(data['QvbrSettings']);
            }
            if (data.hasOwnProperty('RateControlMode')) {
                obj['RateControlMode'] = ApiClient.convertToType(data['RateControlMode'], H264RateControlMode);
            }
            if (data.hasOwnProperty('RepeatPps')) {
                obj['RepeatPps'] = ApiClient.convertToType(data['RepeatPps'], H264RepeatPps);
            }
            if (data.hasOwnProperty('ScanTypeConversionMode')) {
                obj['ScanTypeConversionMode'] = ApiClient.convertToType(data['ScanTypeConversionMode'], H264ScanTypeConversionMode);
            }
            if (data.hasOwnProperty('SceneChangeDetect')) {
                obj['SceneChangeDetect'] = ApiClient.convertToType(data['SceneChangeDetect'], H264SceneChangeDetect);
            }
            if (data.hasOwnProperty('Slices')) {
                obj['Slices'] = ApiClient.convertToType(data['Slices'], 'Number');
            }
            if (data.hasOwnProperty('SlowPal')) {
                obj['SlowPal'] = ApiClient.convertToType(data['SlowPal'], H264SlowPal);
            }
            if (data.hasOwnProperty('Softness')) {
                obj['Softness'] = ApiClient.convertToType(data['Softness'], 'Number');
            }
            if (data.hasOwnProperty('SpatialAdaptiveQuantization')) {
                obj['SpatialAdaptiveQuantization'] = ApiClient.convertToType(data['SpatialAdaptiveQuantization'], H264SpatialAdaptiveQuantization);
            }
            if (data.hasOwnProperty('Syntax')) {
                obj['Syntax'] = ApiClient.convertToType(data['Syntax'], H264Syntax);
            }
            if (data.hasOwnProperty('Telecine')) {
                obj['Telecine'] = ApiClient.convertToType(data['Telecine'], H264Telecine);
            }
            if (data.hasOwnProperty('TemporalAdaptiveQuantization')) {
                obj['TemporalAdaptiveQuantization'] = ApiClient.convertToType(data['TemporalAdaptiveQuantization'], H264TemporalAdaptiveQuantization);
            }
            if (data.hasOwnProperty('UnregisteredSeiTimecode')) {
                obj['UnregisteredSeiTimecode'] = ApiClient.convertToType(data['UnregisteredSeiTimecode'], H264UnregisteredSeiTimecode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCodecSettingsH264Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCodecSettingsH264Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AdaptiveQuantization`
        if (data['AdaptiveQuantization']) { // data not null
          H264AdaptiveQuantization.validateJSON(data['AdaptiveQuantization']);
        }
        // validate the optional field `BandwidthReductionFilter`
        if (data['BandwidthReductionFilter']) { // data not null
          H264SettingsBandwidthReductionFilter.validateJSON(data['BandwidthReductionFilter']);
        }
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `CodecLevel`
        if (data['CodecLevel']) { // data not null
          H264CodecLevel.validateJSON(data['CodecLevel']);
        }
        // validate the optional field `CodecProfile`
        if (data['CodecProfile']) { // data not null
          H264CodecProfile.validateJSON(data['CodecProfile']);
        }
        // validate the optional field `DynamicSubGop`
        if (data['DynamicSubGop']) { // data not null
          H264DynamicSubGop.validateJSON(data['DynamicSubGop']);
        }
        // validate the optional field `EntropyEncoding`
        if (data['EntropyEncoding']) { // data not null
          H264EntropyEncoding.validateJSON(data['EntropyEncoding']);
        }
        // validate the optional field `FieldEncoding`
        if (data['FieldEncoding']) { // data not null
          H264FieldEncoding.validateJSON(data['FieldEncoding']);
        }
        // validate the optional field `FlickerAdaptiveQuantization`
        if (data['FlickerAdaptiveQuantization']) { // data not null
          H264FlickerAdaptiveQuantization.validateJSON(data['FlickerAdaptiveQuantization']);
        }
        // validate the optional field `FramerateControl`
        if (data['FramerateControl']) { // data not null
          H264FramerateControl.validateJSON(data['FramerateControl']);
        }
        // validate the optional field `FramerateConversionAlgorithm`
        if (data['FramerateConversionAlgorithm']) { // data not null
          H264FramerateConversionAlgorithm.validateJSON(data['FramerateConversionAlgorithm']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `GopBReference`
        if (data['GopBReference']) { // data not null
          H264GopBReference.validateJSON(data['GopBReference']);
        }
        // validate the optional field `GopClosedCadence`
        if (data['GopClosedCadence']) { // data not null
          Number.validateJSON(data['GopClosedCadence']);
        }
        // validate the optional field `GopSize`
        if (data['GopSize']) { // data not null
          Number.validateJSON(data['GopSize']);
        }
        // validate the optional field `GopSizeUnits`
        if (data['GopSizeUnits']) { // data not null
          H264GopSizeUnits.validateJSON(data['GopSizeUnits']);
        }
        // validate the optional field `HrdBufferFinalFillPercentage`
        if (data['HrdBufferFinalFillPercentage']) { // data not null
          Number.validateJSON(data['HrdBufferFinalFillPercentage']);
        }
        // validate the optional field `HrdBufferInitialFillPercentage`
        if (data['HrdBufferInitialFillPercentage']) { // data not null
          Number.validateJSON(data['HrdBufferInitialFillPercentage']);
        }
        // validate the optional field `HrdBufferSize`
        if (data['HrdBufferSize']) { // data not null
          Number.validateJSON(data['HrdBufferSize']);
        }
        // validate the optional field `InterlaceMode`
        if (data['InterlaceMode']) { // data not null
          H264InterlaceMode.validateJSON(data['InterlaceMode']);
        }
        // validate the optional field `MaxBitrate`
        if (data['MaxBitrate']) { // data not null
          Number.validateJSON(data['MaxBitrate']);
        }
        // validate the optional field `MinIInterval`
        if (data['MinIInterval']) { // data not null
          Number.validateJSON(data['MinIInterval']);
        }
        // validate the optional field `NumberBFramesBetweenReferenceFrames`
        if (data['NumberBFramesBetweenReferenceFrames']) { // data not null
          Number.validateJSON(data['NumberBFramesBetweenReferenceFrames']);
        }
        // validate the optional field `NumberReferenceFrames`
        if (data['NumberReferenceFrames']) { // data not null
          Number.validateJSON(data['NumberReferenceFrames']);
        }
        // validate the optional field `ParControl`
        if (data['ParControl']) { // data not null
          H264ParControl.validateJSON(data['ParControl']);
        }
        // validate the optional field `ParDenominator`
        if (data['ParDenominator']) { // data not null
          Number.validateJSON(data['ParDenominator']);
        }
        // validate the optional field `ParNumerator`
        if (data['ParNumerator']) { // data not null
          Number.validateJSON(data['ParNumerator']);
        }
        // validate the optional field `QualityTuningLevel`
        if (data['QualityTuningLevel']) { // data not null
          H264QualityTuningLevel.validateJSON(data['QualityTuningLevel']);
        }
        // validate the optional field `QvbrSettings`
        if (data['QvbrSettings']) { // data not null
          H264SettingsQvbrSettings.validateJSON(data['QvbrSettings']);
        }
        // validate the optional field `RateControlMode`
        if (data['RateControlMode']) { // data not null
          H264RateControlMode.validateJSON(data['RateControlMode']);
        }
        // validate the optional field `RepeatPps`
        if (data['RepeatPps']) { // data not null
          H264RepeatPps.validateJSON(data['RepeatPps']);
        }
        // validate the optional field `ScanTypeConversionMode`
        if (data['ScanTypeConversionMode']) { // data not null
          H264ScanTypeConversionMode.validateJSON(data['ScanTypeConversionMode']);
        }
        // validate the optional field `SceneChangeDetect`
        if (data['SceneChangeDetect']) { // data not null
          H264SceneChangeDetect.validateJSON(data['SceneChangeDetect']);
        }
        // validate the optional field `Slices`
        if (data['Slices']) { // data not null
          Number.validateJSON(data['Slices']);
        }
        // validate the optional field `SlowPal`
        if (data['SlowPal']) { // data not null
          H264SlowPal.validateJSON(data['SlowPal']);
        }
        // validate the optional field `Softness`
        if (data['Softness']) { // data not null
          Number.validateJSON(data['Softness']);
        }
        // validate the optional field `SpatialAdaptiveQuantization`
        if (data['SpatialAdaptiveQuantization']) { // data not null
          H264SpatialAdaptiveQuantization.validateJSON(data['SpatialAdaptiveQuantization']);
        }
        // validate the optional field `Syntax`
        if (data['Syntax']) { // data not null
          H264Syntax.validateJSON(data['Syntax']);
        }
        // validate the optional field `Telecine`
        if (data['Telecine']) { // data not null
          H264Telecine.validateJSON(data['Telecine']);
        }
        // validate the optional field `TemporalAdaptiveQuantization`
        if (data['TemporalAdaptiveQuantization']) { // data not null
          H264TemporalAdaptiveQuantization.validateJSON(data['TemporalAdaptiveQuantization']);
        }
        // validate the optional field `UnregisteredSeiTimecode`
        if (data['UnregisteredSeiTimecode']) { // data not null
          H264UnregisteredSeiTimecode.validateJSON(data['UnregisteredSeiTimecode']);
        }

        return true;
    }


}



/**
 * @member {module:model/H264AdaptiveQuantization} AdaptiveQuantization
 */
VideoCodecSettingsH264Settings.prototype['AdaptiveQuantization'] = undefined;

/**
 * @member {module:model/H264SettingsBandwidthReductionFilter} BandwidthReductionFilter
 */
VideoCodecSettingsH264Settings.prototype['BandwidthReductionFilter'] = undefined;

/**
 * @member {Number} Bitrate
 */
VideoCodecSettingsH264Settings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/H264CodecLevel} CodecLevel
 */
VideoCodecSettingsH264Settings.prototype['CodecLevel'] = undefined;

/**
 * @member {module:model/H264CodecProfile} CodecProfile
 */
VideoCodecSettingsH264Settings.prototype['CodecProfile'] = undefined;

/**
 * @member {module:model/H264DynamicSubGop} DynamicSubGop
 */
VideoCodecSettingsH264Settings.prototype['DynamicSubGop'] = undefined;

/**
 * @member {module:model/H264EntropyEncoding} EntropyEncoding
 */
VideoCodecSettingsH264Settings.prototype['EntropyEncoding'] = undefined;

/**
 * @member {module:model/H264FieldEncoding} FieldEncoding
 */
VideoCodecSettingsH264Settings.prototype['FieldEncoding'] = undefined;

/**
 * @member {module:model/H264FlickerAdaptiveQuantization} FlickerAdaptiveQuantization
 */
VideoCodecSettingsH264Settings.prototype['FlickerAdaptiveQuantization'] = undefined;

/**
 * @member {module:model/H264FramerateControl} FramerateControl
 */
VideoCodecSettingsH264Settings.prototype['FramerateControl'] = undefined;

/**
 * @member {module:model/H264FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
VideoCodecSettingsH264Settings.prototype['FramerateConversionAlgorithm'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
VideoCodecSettingsH264Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
VideoCodecSettingsH264Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {module:model/H264GopBReference} GopBReference
 */
VideoCodecSettingsH264Settings.prototype['GopBReference'] = undefined;

/**
 * @member {Number} GopClosedCadence
 */
VideoCodecSettingsH264Settings.prototype['GopClosedCadence'] = undefined;

/**
 * @member {Number} GopSize
 */
VideoCodecSettingsH264Settings.prototype['GopSize'] = undefined;

/**
 * @member {module:model/H264GopSizeUnits} GopSizeUnits
 */
VideoCodecSettingsH264Settings.prototype['GopSizeUnits'] = undefined;

/**
 * @member {Number} HrdBufferFinalFillPercentage
 */
VideoCodecSettingsH264Settings.prototype['HrdBufferFinalFillPercentage'] = undefined;

/**
 * @member {Number} HrdBufferInitialFillPercentage
 */
VideoCodecSettingsH264Settings.prototype['HrdBufferInitialFillPercentage'] = undefined;

/**
 * @member {Number} HrdBufferSize
 */
VideoCodecSettingsH264Settings.prototype['HrdBufferSize'] = undefined;

/**
 * @member {module:model/H264InterlaceMode} InterlaceMode
 */
VideoCodecSettingsH264Settings.prototype['InterlaceMode'] = undefined;

/**
 * @member {Number} MaxBitrate
 */
VideoCodecSettingsH264Settings.prototype['MaxBitrate'] = undefined;

/**
 * @member {Number} MinIInterval
 */
VideoCodecSettingsH264Settings.prototype['MinIInterval'] = undefined;

/**
 * @member {Number} NumberBFramesBetweenReferenceFrames
 */
VideoCodecSettingsH264Settings.prototype['NumberBFramesBetweenReferenceFrames'] = undefined;

/**
 * @member {Number} NumberReferenceFrames
 */
VideoCodecSettingsH264Settings.prototype['NumberReferenceFrames'] = undefined;

/**
 * @member {module:model/H264ParControl} ParControl
 */
VideoCodecSettingsH264Settings.prototype['ParControl'] = undefined;

/**
 * @member {Number} ParDenominator
 */
VideoCodecSettingsH264Settings.prototype['ParDenominator'] = undefined;

/**
 * @member {Number} ParNumerator
 */
VideoCodecSettingsH264Settings.prototype['ParNumerator'] = undefined;

/**
 * @member {module:model/H264QualityTuningLevel} QualityTuningLevel
 */
VideoCodecSettingsH264Settings.prototype['QualityTuningLevel'] = undefined;

/**
 * @member {module:model/H264SettingsQvbrSettings} QvbrSettings
 */
VideoCodecSettingsH264Settings.prototype['QvbrSettings'] = undefined;

/**
 * @member {module:model/H264RateControlMode} RateControlMode
 */
VideoCodecSettingsH264Settings.prototype['RateControlMode'] = undefined;

/**
 * @member {module:model/H264RepeatPps} RepeatPps
 */
VideoCodecSettingsH264Settings.prototype['RepeatPps'] = undefined;

/**
 * @member {module:model/H264ScanTypeConversionMode} ScanTypeConversionMode
 */
VideoCodecSettingsH264Settings.prototype['ScanTypeConversionMode'] = undefined;

/**
 * @member {module:model/H264SceneChangeDetect} SceneChangeDetect
 */
VideoCodecSettingsH264Settings.prototype['SceneChangeDetect'] = undefined;

/**
 * @member {Number} Slices
 */
VideoCodecSettingsH264Settings.prototype['Slices'] = undefined;

/**
 * @member {module:model/H264SlowPal} SlowPal
 */
VideoCodecSettingsH264Settings.prototype['SlowPal'] = undefined;

/**
 * @member {Number} Softness
 */
VideoCodecSettingsH264Settings.prototype['Softness'] = undefined;

/**
 * @member {module:model/H264SpatialAdaptiveQuantization} SpatialAdaptiveQuantization
 */
VideoCodecSettingsH264Settings.prototype['SpatialAdaptiveQuantization'] = undefined;

/**
 * @member {module:model/H264Syntax} Syntax
 */
VideoCodecSettingsH264Settings.prototype['Syntax'] = undefined;

/**
 * @member {module:model/H264Telecine} Telecine
 */
VideoCodecSettingsH264Settings.prototype['Telecine'] = undefined;

/**
 * @member {module:model/H264TemporalAdaptiveQuantization} TemporalAdaptiveQuantization
 */
VideoCodecSettingsH264Settings.prototype['TemporalAdaptiveQuantization'] = undefined;

/**
 * @member {module:model/H264UnregisteredSeiTimecode} UnregisteredSeiTimecode
 */
VideoCodecSettingsH264Settings.prototype['UnregisteredSeiTimecode'] = undefined;


// Implement H264Settings interface:
/**
 * @member {module:model/H264AdaptiveQuantization} AdaptiveQuantization
 */
H264Settings.prototype['AdaptiveQuantization'] = undefined;
/**
 * @member {module:model/H264SettingsBandwidthReductionFilter} BandwidthReductionFilter
 */
H264Settings.prototype['BandwidthReductionFilter'] = undefined;
/**
 * @member {Number} Bitrate
 */
H264Settings.prototype['Bitrate'] = undefined;
/**
 * @member {module:model/H264CodecLevel} CodecLevel
 */
H264Settings.prototype['CodecLevel'] = undefined;
/**
 * @member {module:model/H264CodecProfile} CodecProfile
 */
H264Settings.prototype['CodecProfile'] = undefined;
/**
 * @member {module:model/H264DynamicSubGop} DynamicSubGop
 */
H264Settings.prototype['DynamicSubGop'] = undefined;
/**
 * @member {module:model/H264EntropyEncoding} EntropyEncoding
 */
H264Settings.prototype['EntropyEncoding'] = undefined;
/**
 * @member {module:model/H264FieldEncoding} FieldEncoding
 */
H264Settings.prototype['FieldEncoding'] = undefined;
/**
 * @member {module:model/H264FlickerAdaptiveQuantization} FlickerAdaptiveQuantization
 */
H264Settings.prototype['FlickerAdaptiveQuantization'] = undefined;
/**
 * @member {module:model/H264FramerateControl} FramerateControl
 */
H264Settings.prototype['FramerateControl'] = undefined;
/**
 * @member {module:model/H264FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
H264Settings.prototype['FramerateConversionAlgorithm'] = undefined;
/**
 * @member {Number} FramerateDenominator
 */
H264Settings.prototype['FramerateDenominator'] = undefined;
/**
 * @member {Number} FramerateNumerator
 */
H264Settings.prototype['FramerateNumerator'] = undefined;
/**
 * @member {module:model/H264GopBReference} GopBReference
 */
H264Settings.prototype['GopBReference'] = undefined;
/**
 * @member {Number} GopClosedCadence
 */
H264Settings.prototype['GopClosedCadence'] = undefined;
/**
 * @member {Number} GopSize
 */
H264Settings.prototype['GopSize'] = undefined;
/**
 * @member {module:model/H264GopSizeUnits} GopSizeUnits
 */
H264Settings.prototype['GopSizeUnits'] = undefined;
/**
 * @member {Number} HrdBufferFinalFillPercentage
 */
H264Settings.prototype['HrdBufferFinalFillPercentage'] = undefined;
/**
 * @member {Number} HrdBufferInitialFillPercentage
 */
H264Settings.prototype['HrdBufferInitialFillPercentage'] = undefined;
/**
 * @member {Number} HrdBufferSize
 */
H264Settings.prototype['HrdBufferSize'] = undefined;
/**
 * @member {module:model/H264InterlaceMode} InterlaceMode
 */
H264Settings.prototype['InterlaceMode'] = undefined;
/**
 * @member {Number} MaxBitrate
 */
H264Settings.prototype['MaxBitrate'] = undefined;
/**
 * @member {Number} MinIInterval
 */
H264Settings.prototype['MinIInterval'] = undefined;
/**
 * @member {Number} NumberBFramesBetweenReferenceFrames
 */
H264Settings.prototype['NumberBFramesBetweenReferenceFrames'] = undefined;
/**
 * @member {Number} NumberReferenceFrames
 */
H264Settings.prototype['NumberReferenceFrames'] = undefined;
/**
 * @member {module:model/H264ParControl} ParControl
 */
H264Settings.prototype['ParControl'] = undefined;
/**
 * @member {Number} ParDenominator
 */
H264Settings.prototype['ParDenominator'] = undefined;
/**
 * @member {Number} ParNumerator
 */
H264Settings.prototype['ParNumerator'] = undefined;
/**
 * @member {module:model/H264QualityTuningLevel} QualityTuningLevel
 */
H264Settings.prototype['QualityTuningLevel'] = undefined;
/**
 * @member {module:model/H264SettingsQvbrSettings} QvbrSettings
 */
H264Settings.prototype['QvbrSettings'] = undefined;
/**
 * @member {module:model/H264RateControlMode} RateControlMode
 */
H264Settings.prototype['RateControlMode'] = undefined;
/**
 * @member {module:model/H264RepeatPps} RepeatPps
 */
H264Settings.prototype['RepeatPps'] = undefined;
/**
 * @member {module:model/H264ScanTypeConversionMode} ScanTypeConversionMode
 */
H264Settings.prototype['ScanTypeConversionMode'] = undefined;
/**
 * @member {module:model/H264SceneChangeDetect} SceneChangeDetect
 */
H264Settings.prototype['SceneChangeDetect'] = undefined;
/**
 * @member {Number} Slices
 */
H264Settings.prototype['Slices'] = undefined;
/**
 * @member {module:model/H264SlowPal} SlowPal
 */
H264Settings.prototype['SlowPal'] = undefined;
/**
 * @member {Number} Softness
 */
H264Settings.prototype['Softness'] = undefined;
/**
 * @member {module:model/H264SpatialAdaptiveQuantization} SpatialAdaptiveQuantization
 */
H264Settings.prototype['SpatialAdaptiveQuantization'] = undefined;
/**
 * @member {module:model/H264Syntax} Syntax
 */
H264Settings.prototype['Syntax'] = undefined;
/**
 * @member {module:model/H264Telecine} Telecine
 */
H264Settings.prototype['Telecine'] = undefined;
/**
 * @member {module:model/H264TemporalAdaptiveQuantization} TemporalAdaptiveQuantization
 */
H264Settings.prototype['TemporalAdaptiveQuantization'] = undefined;
/**
 * @member {module:model/H264UnregisteredSeiTimecode} UnregisteredSeiTimecode
 */
H264Settings.prototype['UnregisteredSeiTimecode'] = undefined;




export default VideoCodecSettingsH264Settings;

