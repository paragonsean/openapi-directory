/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Ac3BitstreamMode from './Ac3BitstreamMode';
import Ac3CodingMode from './Ac3CodingMode';
import Ac3DynamicRangeCompressionLine from './Ac3DynamicRangeCompressionLine';
import Ac3DynamicRangeCompressionProfile from './Ac3DynamicRangeCompressionProfile';
import Ac3DynamicRangeCompressionRf from './Ac3DynamicRangeCompressionRf';
import Ac3LfeFilter from './Ac3LfeFilter';
import Ac3MetadataControl from './Ac3MetadataControl';
import Ac3Settings from './Ac3Settings';

/**
 * The AudioCodecSettingsAc3Settings model module.
 * @module model/AudioCodecSettingsAc3Settings
 * @version 2017-08-29
 */
class AudioCodecSettingsAc3Settings {
    /**
     * Constructs a new <code>AudioCodecSettingsAc3Settings</code>.
     * @alias module:model/AudioCodecSettingsAc3Settings
     * @implements module:model/Ac3Settings
     */
    constructor() { 
        Ac3Settings.initialize(this);
        AudioCodecSettingsAc3Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioCodecSettingsAc3Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioCodecSettingsAc3Settings} obj Optional instance to populate.
     * @return {module:model/AudioCodecSettingsAc3Settings} The populated <code>AudioCodecSettingsAc3Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioCodecSettingsAc3Settings();
            Ac3Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('BitstreamMode')) {
                obj['BitstreamMode'] = ApiClient.convertToType(data['BitstreamMode'], Ac3BitstreamMode);
            }
            if (data.hasOwnProperty('CodingMode')) {
                obj['CodingMode'] = ApiClient.convertToType(data['CodingMode'], Ac3CodingMode);
            }
            if (data.hasOwnProperty('Dialnorm')) {
                obj['Dialnorm'] = ApiClient.convertToType(data['Dialnorm'], 'Number');
            }
            if (data.hasOwnProperty('DynamicRangeCompressionLine')) {
                obj['DynamicRangeCompressionLine'] = ApiClient.convertToType(data['DynamicRangeCompressionLine'], Ac3DynamicRangeCompressionLine);
            }
            if (data.hasOwnProperty('DynamicRangeCompressionProfile')) {
                obj['DynamicRangeCompressionProfile'] = ApiClient.convertToType(data['DynamicRangeCompressionProfile'], Ac3DynamicRangeCompressionProfile);
            }
            if (data.hasOwnProperty('DynamicRangeCompressionRf')) {
                obj['DynamicRangeCompressionRf'] = ApiClient.convertToType(data['DynamicRangeCompressionRf'], Ac3DynamicRangeCompressionRf);
            }
            if (data.hasOwnProperty('LfeFilter')) {
                obj['LfeFilter'] = ApiClient.convertToType(data['LfeFilter'], Ac3LfeFilter);
            }
            if (data.hasOwnProperty('MetadataControl')) {
                obj['MetadataControl'] = ApiClient.convertToType(data['MetadataControl'], Ac3MetadataControl);
            }
            if (data.hasOwnProperty('SampleRate')) {
                obj['SampleRate'] = ApiClient.convertToType(data['SampleRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioCodecSettingsAc3Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioCodecSettingsAc3Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `BitstreamMode`
        if (data['BitstreamMode']) { // data not null
          Ac3BitstreamMode.validateJSON(data['BitstreamMode']);
        }
        // validate the optional field `CodingMode`
        if (data['CodingMode']) { // data not null
          Ac3CodingMode.validateJSON(data['CodingMode']);
        }
        // validate the optional field `Dialnorm`
        if (data['Dialnorm']) { // data not null
          Number.validateJSON(data['Dialnorm']);
        }
        // validate the optional field `DynamicRangeCompressionLine`
        if (data['DynamicRangeCompressionLine']) { // data not null
          Ac3DynamicRangeCompressionLine.validateJSON(data['DynamicRangeCompressionLine']);
        }
        // validate the optional field `DynamicRangeCompressionProfile`
        if (data['DynamicRangeCompressionProfile']) { // data not null
          Ac3DynamicRangeCompressionProfile.validateJSON(data['DynamicRangeCompressionProfile']);
        }
        // validate the optional field `DynamicRangeCompressionRf`
        if (data['DynamicRangeCompressionRf']) { // data not null
          Ac3DynamicRangeCompressionRf.validateJSON(data['DynamicRangeCompressionRf']);
        }
        // validate the optional field `LfeFilter`
        if (data['LfeFilter']) { // data not null
          Ac3LfeFilter.validateJSON(data['LfeFilter']);
        }
        // validate the optional field `MetadataControl`
        if (data['MetadataControl']) { // data not null
          Ac3MetadataControl.validateJSON(data['MetadataControl']);
        }
        // validate the optional field `SampleRate`
        if (data['SampleRate']) { // data not null
          Number.validateJSON(data['SampleRate']);
        }

        return true;
    }


}



/**
 * @member {Number} Bitrate
 */
AudioCodecSettingsAc3Settings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/Ac3BitstreamMode} BitstreamMode
 */
AudioCodecSettingsAc3Settings.prototype['BitstreamMode'] = undefined;

/**
 * @member {module:model/Ac3CodingMode} CodingMode
 */
AudioCodecSettingsAc3Settings.prototype['CodingMode'] = undefined;

/**
 * @member {Number} Dialnorm
 */
AudioCodecSettingsAc3Settings.prototype['Dialnorm'] = undefined;

/**
 * @member {module:model/Ac3DynamicRangeCompressionLine} DynamicRangeCompressionLine
 */
AudioCodecSettingsAc3Settings.prototype['DynamicRangeCompressionLine'] = undefined;

/**
 * @member {module:model/Ac3DynamicRangeCompressionProfile} DynamicRangeCompressionProfile
 */
AudioCodecSettingsAc3Settings.prototype['DynamicRangeCompressionProfile'] = undefined;

/**
 * @member {module:model/Ac3DynamicRangeCompressionRf} DynamicRangeCompressionRf
 */
AudioCodecSettingsAc3Settings.prototype['DynamicRangeCompressionRf'] = undefined;

/**
 * @member {module:model/Ac3LfeFilter} LfeFilter
 */
AudioCodecSettingsAc3Settings.prototype['LfeFilter'] = undefined;

/**
 * @member {module:model/Ac3MetadataControl} MetadataControl
 */
AudioCodecSettingsAc3Settings.prototype['MetadataControl'] = undefined;

/**
 * @member {Number} SampleRate
 */
AudioCodecSettingsAc3Settings.prototype['SampleRate'] = undefined;


// Implement Ac3Settings interface:
/**
 * @member {Number} Bitrate
 */
Ac3Settings.prototype['Bitrate'] = undefined;
/**
 * @member {module:model/Ac3BitstreamMode} BitstreamMode
 */
Ac3Settings.prototype['BitstreamMode'] = undefined;
/**
 * @member {module:model/Ac3CodingMode} CodingMode
 */
Ac3Settings.prototype['CodingMode'] = undefined;
/**
 * @member {Number} Dialnorm
 */
Ac3Settings.prototype['Dialnorm'] = undefined;
/**
 * @member {module:model/Ac3DynamicRangeCompressionLine} DynamicRangeCompressionLine
 */
Ac3Settings.prototype['DynamicRangeCompressionLine'] = undefined;
/**
 * @member {module:model/Ac3DynamicRangeCompressionProfile} DynamicRangeCompressionProfile
 */
Ac3Settings.prototype['DynamicRangeCompressionProfile'] = undefined;
/**
 * @member {module:model/Ac3DynamicRangeCompressionRf} DynamicRangeCompressionRf
 */
Ac3Settings.prototype['DynamicRangeCompressionRf'] = undefined;
/**
 * @member {module:model/Ac3LfeFilter} LfeFilter
 */
Ac3Settings.prototype['LfeFilter'] = undefined;
/**
 * @member {module:model/Ac3MetadataControl} MetadataControl
 */
Ac3Settings.prototype['MetadataControl'] = undefined;
/**
 * @member {Number} SampleRate
 */
Ac3Settings.prototype['SampleRate'] = undefined;




export default AudioCodecSettingsAc3Settings;

