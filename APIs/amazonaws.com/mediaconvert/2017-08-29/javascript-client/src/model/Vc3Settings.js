/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Vc3Class from './Vc3Class';
import Vc3FramerateControl from './Vc3FramerateControl';
import Vc3FramerateConversionAlgorithm from './Vc3FramerateConversionAlgorithm';
import Vc3InterlaceMode from './Vc3InterlaceMode';
import Vc3ScanTypeConversionMode from './Vc3ScanTypeConversionMode';
import Vc3SlowPal from './Vc3SlowPal';
import Vc3Telecine from './Vc3Telecine';

/**
 * The Vc3Settings model module.
 * @module model/Vc3Settings
 * @version 2017-08-29
 */
class Vc3Settings {
    /**
     * Constructs a new <code>Vc3Settings</code>.
     * Required when you set Codec to the value VC3
     * @alias module:model/Vc3Settings
     */
    constructor() { 
        
        Vc3Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Vc3Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Vc3Settings} obj Optional instance to populate.
     * @return {module:model/Vc3Settings} The populated <code>Vc3Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Vc3Settings();

            if (data.hasOwnProperty('FramerateControl')) {
                obj['FramerateControl'] = ApiClient.convertToType(data['FramerateControl'], Vc3FramerateControl);
            }
            if (data.hasOwnProperty('FramerateConversionAlgorithm')) {
                obj['FramerateConversionAlgorithm'] = ApiClient.convertToType(data['FramerateConversionAlgorithm'], Vc3FramerateConversionAlgorithm);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('InterlaceMode')) {
                obj['InterlaceMode'] = ApiClient.convertToType(data['InterlaceMode'], Vc3InterlaceMode);
            }
            if (data.hasOwnProperty('ScanTypeConversionMode')) {
                obj['ScanTypeConversionMode'] = ApiClient.convertToType(data['ScanTypeConversionMode'], Vc3ScanTypeConversionMode);
            }
            if (data.hasOwnProperty('SlowPal')) {
                obj['SlowPal'] = ApiClient.convertToType(data['SlowPal'], Vc3SlowPal);
            }
            if (data.hasOwnProperty('Telecine')) {
                obj['Telecine'] = ApiClient.convertToType(data['Telecine'], Vc3Telecine);
            }
            if (data.hasOwnProperty('Vc3Class')) {
                obj['Vc3Class'] = ApiClient.convertToType(data['Vc3Class'], Vc3Class);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Vc3Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Vc3Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `FramerateControl`
        if (data['FramerateControl']) { // data not null
          Vc3FramerateControl.validateJSON(data['FramerateControl']);
        }
        // validate the optional field `FramerateConversionAlgorithm`
        if (data['FramerateConversionAlgorithm']) { // data not null
          Vc3FramerateConversionAlgorithm.validateJSON(data['FramerateConversionAlgorithm']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `InterlaceMode`
        if (data['InterlaceMode']) { // data not null
          Vc3InterlaceMode.validateJSON(data['InterlaceMode']);
        }
        // validate the optional field `ScanTypeConversionMode`
        if (data['ScanTypeConversionMode']) { // data not null
          Vc3ScanTypeConversionMode.validateJSON(data['ScanTypeConversionMode']);
        }
        // validate the optional field `SlowPal`
        if (data['SlowPal']) { // data not null
          Vc3SlowPal.validateJSON(data['SlowPal']);
        }
        // validate the optional field `Telecine`
        if (data['Telecine']) { // data not null
          Vc3Telecine.validateJSON(data['Telecine']);
        }
        // validate the optional field `Vc3Class`
        if (data['Vc3Class']) { // data not null
          Vc3Class.validateJSON(data['Vc3Class']);
        }

        return true;
    }


}



/**
 * @member {module:model/Vc3FramerateControl} FramerateControl
 */
Vc3Settings.prototype['FramerateControl'] = undefined;

/**
 * @member {module:model/Vc3FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
Vc3Settings.prototype['FramerateConversionAlgorithm'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
Vc3Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
Vc3Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {module:model/Vc3InterlaceMode} InterlaceMode
 */
Vc3Settings.prototype['InterlaceMode'] = undefined;

/**
 * @member {module:model/Vc3ScanTypeConversionMode} ScanTypeConversionMode
 */
Vc3Settings.prototype['ScanTypeConversionMode'] = undefined;

/**
 * @member {module:model/Vc3SlowPal} SlowPal
 */
Vc3Settings.prototype['SlowPal'] = undefined;

/**
 * @member {module:model/Vc3Telecine} Telecine
 */
Vc3Settings.prototype['Telecine'] = undefined;

/**
 * @member {module:model/Vc3Class} Vc3Class
 */
Vc3Settings.prototype['Vc3Class'] = undefined;






export default Vc3Settings;

