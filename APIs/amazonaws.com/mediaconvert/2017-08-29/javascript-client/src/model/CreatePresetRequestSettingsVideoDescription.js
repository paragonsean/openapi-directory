/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AfdSignaling from './AfdSignaling';
import AntiAlias from './AntiAlias';
import ColorMetadata from './ColorMetadata';
import DropFrameTimecode from './DropFrameTimecode';
import RespondToAfd from './RespondToAfd';
import ScalingBehavior from './ScalingBehavior';
import VideoDescription from './VideoDescription';
import VideoDescriptionCodecSettings from './VideoDescriptionCodecSettings';
import VideoDescriptionCrop from './VideoDescriptionCrop';
import VideoDescriptionPosition from './VideoDescriptionPosition';
import VideoDescriptionVideoPreprocessors from './VideoDescriptionVideoPreprocessors';
import VideoTimecodeInsertion from './VideoTimecodeInsertion';

/**
 * The CreatePresetRequestSettingsVideoDescription model module.
 * @module model/CreatePresetRequestSettingsVideoDescription
 * @version 2017-08-29
 */
class CreatePresetRequestSettingsVideoDescription {
    /**
     * Constructs a new <code>CreatePresetRequestSettingsVideoDescription</code>.
     * @alias module:model/CreatePresetRequestSettingsVideoDescription
     * @implements module:model/VideoDescription
     */
    constructor() { 
        VideoDescription.initialize(this);
        CreatePresetRequestSettingsVideoDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreatePresetRequestSettingsVideoDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreatePresetRequestSettingsVideoDescription} obj Optional instance to populate.
     * @return {module:model/CreatePresetRequestSettingsVideoDescription} The populated <code>CreatePresetRequestSettingsVideoDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreatePresetRequestSettingsVideoDescription();
            VideoDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('AfdSignaling')) {
                obj['AfdSignaling'] = ApiClient.convertToType(data['AfdSignaling'], AfdSignaling);
            }
            if (data.hasOwnProperty('AntiAlias')) {
                obj['AntiAlias'] = ApiClient.convertToType(data['AntiAlias'], AntiAlias);
            }
            if (data.hasOwnProperty('CodecSettings')) {
                obj['CodecSettings'] = VideoDescriptionCodecSettings.constructFromObject(data['CodecSettings']);
            }
            if (data.hasOwnProperty('ColorMetadata')) {
                obj['ColorMetadata'] = ApiClient.convertToType(data['ColorMetadata'], ColorMetadata);
            }
            if (data.hasOwnProperty('Crop')) {
                obj['Crop'] = VideoDescriptionCrop.constructFromObject(data['Crop']);
            }
            if (data.hasOwnProperty('DropFrameTimecode')) {
                obj['DropFrameTimecode'] = ApiClient.convertToType(data['DropFrameTimecode'], DropFrameTimecode);
            }
            if (data.hasOwnProperty('FixedAfd')) {
                obj['FixedAfd'] = ApiClient.convertToType(data['FixedAfd'], 'Number');
            }
            if (data.hasOwnProperty('Height')) {
                obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
            }
            if (data.hasOwnProperty('Position')) {
                obj['Position'] = VideoDescriptionPosition.constructFromObject(data['Position']);
            }
            if (data.hasOwnProperty('RespondToAfd')) {
                obj['RespondToAfd'] = ApiClient.convertToType(data['RespondToAfd'], RespondToAfd);
            }
            if (data.hasOwnProperty('ScalingBehavior')) {
                obj['ScalingBehavior'] = ApiClient.convertToType(data['ScalingBehavior'], ScalingBehavior);
            }
            if (data.hasOwnProperty('Sharpness')) {
                obj['Sharpness'] = ApiClient.convertToType(data['Sharpness'], 'Number');
            }
            if (data.hasOwnProperty('TimecodeInsertion')) {
                obj['TimecodeInsertion'] = ApiClient.convertToType(data['TimecodeInsertion'], VideoTimecodeInsertion);
            }
            if (data.hasOwnProperty('VideoPreprocessors')) {
                obj['VideoPreprocessors'] = VideoDescriptionVideoPreprocessors.constructFromObject(data['VideoPreprocessors']);
            }
            if (data.hasOwnProperty('Width')) {
                obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreatePresetRequestSettingsVideoDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreatePresetRequestSettingsVideoDescription</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AfdSignaling`
        if (data['AfdSignaling']) { // data not null
          AfdSignaling.validateJSON(data['AfdSignaling']);
        }
        // validate the optional field `AntiAlias`
        if (data['AntiAlias']) { // data not null
          AntiAlias.validateJSON(data['AntiAlias']);
        }
        // validate the optional field `CodecSettings`
        if (data['CodecSettings']) { // data not null
          VideoDescriptionCodecSettings.validateJSON(data['CodecSettings']);
        }
        // validate the optional field `ColorMetadata`
        if (data['ColorMetadata']) { // data not null
          ColorMetadata.validateJSON(data['ColorMetadata']);
        }
        // validate the optional field `Crop`
        if (data['Crop']) { // data not null
          VideoDescriptionCrop.validateJSON(data['Crop']);
        }
        // validate the optional field `DropFrameTimecode`
        if (data['DropFrameTimecode']) { // data not null
          DropFrameTimecode.validateJSON(data['DropFrameTimecode']);
        }
        // validate the optional field `FixedAfd`
        if (data['FixedAfd']) { // data not null
          Number.validateJSON(data['FixedAfd']);
        }
        // validate the optional field `Height`
        if (data['Height']) { // data not null
          Number.validateJSON(data['Height']);
        }
        // validate the optional field `Position`
        if (data['Position']) { // data not null
          VideoDescriptionPosition.validateJSON(data['Position']);
        }
        // validate the optional field `RespondToAfd`
        if (data['RespondToAfd']) { // data not null
          RespondToAfd.validateJSON(data['RespondToAfd']);
        }
        // validate the optional field `ScalingBehavior`
        if (data['ScalingBehavior']) { // data not null
          ScalingBehavior.validateJSON(data['ScalingBehavior']);
        }
        // validate the optional field `Sharpness`
        if (data['Sharpness']) { // data not null
          Number.validateJSON(data['Sharpness']);
        }
        // validate the optional field `TimecodeInsertion`
        if (data['TimecodeInsertion']) { // data not null
          VideoTimecodeInsertion.validateJSON(data['TimecodeInsertion']);
        }
        // validate the optional field `VideoPreprocessors`
        if (data['VideoPreprocessors']) { // data not null
          VideoDescriptionVideoPreprocessors.validateJSON(data['VideoPreprocessors']);
        }
        // validate the optional field `Width`
        if (data['Width']) { // data not null
          Number.validateJSON(data['Width']);
        }

        return true;
    }


}



/**
 * @member {module:model/AfdSignaling} AfdSignaling
 */
CreatePresetRequestSettingsVideoDescription.prototype['AfdSignaling'] = undefined;

/**
 * @member {module:model/AntiAlias} AntiAlias
 */
CreatePresetRequestSettingsVideoDescription.prototype['AntiAlias'] = undefined;

/**
 * @member {module:model/VideoDescriptionCodecSettings} CodecSettings
 */
CreatePresetRequestSettingsVideoDescription.prototype['CodecSettings'] = undefined;

/**
 * @member {module:model/ColorMetadata} ColorMetadata
 */
CreatePresetRequestSettingsVideoDescription.prototype['ColorMetadata'] = undefined;

/**
 * @member {module:model/VideoDescriptionCrop} Crop
 */
CreatePresetRequestSettingsVideoDescription.prototype['Crop'] = undefined;

/**
 * @member {module:model/DropFrameTimecode} DropFrameTimecode
 */
CreatePresetRequestSettingsVideoDescription.prototype['DropFrameTimecode'] = undefined;

/**
 * @member {Number} FixedAfd
 */
CreatePresetRequestSettingsVideoDescription.prototype['FixedAfd'] = undefined;

/**
 * @member {Number} Height
 */
CreatePresetRequestSettingsVideoDescription.prototype['Height'] = undefined;

/**
 * @member {module:model/VideoDescriptionPosition} Position
 */
CreatePresetRequestSettingsVideoDescription.prototype['Position'] = undefined;

/**
 * @member {module:model/RespondToAfd} RespondToAfd
 */
CreatePresetRequestSettingsVideoDescription.prototype['RespondToAfd'] = undefined;

/**
 * @member {module:model/ScalingBehavior} ScalingBehavior
 */
CreatePresetRequestSettingsVideoDescription.prototype['ScalingBehavior'] = undefined;

/**
 * @member {Number} Sharpness
 */
CreatePresetRequestSettingsVideoDescription.prototype['Sharpness'] = undefined;

/**
 * @member {module:model/VideoTimecodeInsertion} TimecodeInsertion
 */
CreatePresetRequestSettingsVideoDescription.prototype['TimecodeInsertion'] = undefined;

/**
 * @member {module:model/VideoDescriptionVideoPreprocessors} VideoPreprocessors
 */
CreatePresetRequestSettingsVideoDescription.prototype['VideoPreprocessors'] = undefined;

/**
 * @member {Number} Width
 */
CreatePresetRequestSettingsVideoDescription.prototype['Width'] = undefined;


// Implement VideoDescription interface:
/**
 * @member {module:model/AfdSignaling} AfdSignaling
 */
VideoDescription.prototype['AfdSignaling'] = undefined;
/**
 * @member {module:model/AntiAlias} AntiAlias
 */
VideoDescription.prototype['AntiAlias'] = undefined;
/**
 * @member {module:model/VideoDescriptionCodecSettings} CodecSettings
 */
VideoDescription.prototype['CodecSettings'] = undefined;
/**
 * @member {module:model/ColorMetadata} ColorMetadata
 */
VideoDescription.prototype['ColorMetadata'] = undefined;
/**
 * @member {module:model/VideoDescriptionCrop} Crop
 */
VideoDescription.prototype['Crop'] = undefined;
/**
 * @member {module:model/DropFrameTimecode} DropFrameTimecode
 */
VideoDescription.prototype['DropFrameTimecode'] = undefined;
/**
 * @member {Number} FixedAfd
 */
VideoDescription.prototype['FixedAfd'] = undefined;
/**
 * @member {Number} Height
 */
VideoDescription.prototype['Height'] = undefined;
/**
 * @member {module:model/VideoDescriptionPosition} Position
 */
VideoDescription.prototype['Position'] = undefined;
/**
 * @member {module:model/RespondToAfd} RespondToAfd
 */
VideoDescription.prototype['RespondToAfd'] = undefined;
/**
 * @member {module:model/ScalingBehavior} ScalingBehavior
 */
VideoDescription.prototype['ScalingBehavior'] = undefined;
/**
 * @member {Number} Sharpness
 */
VideoDescription.prototype['Sharpness'] = undefined;
/**
 * @member {module:model/VideoTimecodeInsertion} TimecodeInsertion
 */
VideoDescription.prototype['TimecodeInsertion'] = undefined;
/**
 * @member {module:model/VideoDescriptionVideoPreprocessors} VideoPreprocessors
 */
VideoDescription.prototype['VideoPreprocessors'] = undefined;
/**
 * @member {Number} Width
 */
VideoDescription.prototype['Width'] = undefined;




export default CreatePresetRequestSettingsVideoDescription;

