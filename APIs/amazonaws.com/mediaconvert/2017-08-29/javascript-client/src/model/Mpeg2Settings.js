/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Mpeg2AdaptiveQuantization from './Mpeg2AdaptiveQuantization';
import Mpeg2CodecLevel from './Mpeg2CodecLevel';
import Mpeg2CodecProfile from './Mpeg2CodecProfile';
import Mpeg2DynamicSubGop from './Mpeg2DynamicSubGop';
import Mpeg2FramerateControl from './Mpeg2FramerateControl';
import Mpeg2FramerateConversionAlgorithm from './Mpeg2FramerateConversionAlgorithm';
import Mpeg2GopSizeUnits from './Mpeg2GopSizeUnits';
import Mpeg2InterlaceMode from './Mpeg2InterlaceMode';
import Mpeg2IntraDcPrecision from './Mpeg2IntraDcPrecision';
import Mpeg2ParControl from './Mpeg2ParControl';
import Mpeg2QualityTuningLevel from './Mpeg2QualityTuningLevel';
import Mpeg2RateControlMode from './Mpeg2RateControlMode';
import Mpeg2ScanTypeConversionMode from './Mpeg2ScanTypeConversionMode';
import Mpeg2SceneChangeDetect from './Mpeg2SceneChangeDetect';
import Mpeg2SlowPal from './Mpeg2SlowPal';
import Mpeg2SpatialAdaptiveQuantization from './Mpeg2SpatialAdaptiveQuantization';
import Mpeg2Syntax from './Mpeg2Syntax';
import Mpeg2Telecine from './Mpeg2Telecine';
import Mpeg2TemporalAdaptiveQuantization from './Mpeg2TemporalAdaptiveQuantization';

/**
 * The Mpeg2Settings model module.
 * @module model/Mpeg2Settings
 * @version 2017-08-29
 */
class Mpeg2Settings {
    /**
     * Constructs a new <code>Mpeg2Settings</code>.
     * Required when you set Codec to the value MPEG2.
     * @alias module:model/Mpeg2Settings
     */
    constructor() { 
        
        Mpeg2Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Mpeg2Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mpeg2Settings} obj Optional instance to populate.
     * @return {module:model/Mpeg2Settings} The populated <code>Mpeg2Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mpeg2Settings();

            if (data.hasOwnProperty('AdaptiveQuantization')) {
                obj['AdaptiveQuantization'] = ApiClient.convertToType(data['AdaptiveQuantization'], Mpeg2AdaptiveQuantization);
            }
            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('CodecLevel')) {
                obj['CodecLevel'] = ApiClient.convertToType(data['CodecLevel'], Mpeg2CodecLevel);
            }
            if (data.hasOwnProperty('CodecProfile')) {
                obj['CodecProfile'] = ApiClient.convertToType(data['CodecProfile'], Mpeg2CodecProfile);
            }
            if (data.hasOwnProperty('DynamicSubGop')) {
                obj['DynamicSubGop'] = ApiClient.convertToType(data['DynamicSubGop'], Mpeg2DynamicSubGop);
            }
            if (data.hasOwnProperty('FramerateControl')) {
                obj['FramerateControl'] = ApiClient.convertToType(data['FramerateControl'], Mpeg2FramerateControl);
            }
            if (data.hasOwnProperty('FramerateConversionAlgorithm')) {
                obj['FramerateConversionAlgorithm'] = ApiClient.convertToType(data['FramerateConversionAlgorithm'], Mpeg2FramerateConversionAlgorithm);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('GopClosedCadence')) {
                obj['GopClosedCadence'] = ApiClient.convertToType(data['GopClosedCadence'], 'Number');
            }
            if (data.hasOwnProperty('GopSize')) {
                obj['GopSize'] = ApiClient.convertToType(data['GopSize'], 'Number');
            }
            if (data.hasOwnProperty('GopSizeUnits')) {
                obj['GopSizeUnits'] = ApiClient.convertToType(data['GopSizeUnits'], Mpeg2GopSizeUnits);
            }
            if (data.hasOwnProperty('HrdBufferFinalFillPercentage')) {
                obj['HrdBufferFinalFillPercentage'] = ApiClient.convertToType(data['HrdBufferFinalFillPercentage'], 'Number');
            }
            if (data.hasOwnProperty('HrdBufferInitialFillPercentage')) {
                obj['HrdBufferInitialFillPercentage'] = ApiClient.convertToType(data['HrdBufferInitialFillPercentage'], 'Number');
            }
            if (data.hasOwnProperty('HrdBufferSize')) {
                obj['HrdBufferSize'] = ApiClient.convertToType(data['HrdBufferSize'], 'Number');
            }
            if (data.hasOwnProperty('InterlaceMode')) {
                obj['InterlaceMode'] = ApiClient.convertToType(data['InterlaceMode'], Mpeg2InterlaceMode);
            }
            if (data.hasOwnProperty('IntraDcPrecision')) {
                obj['IntraDcPrecision'] = ApiClient.convertToType(data['IntraDcPrecision'], Mpeg2IntraDcPrecision);
            }
            if (data.hasOwnProperty('MaxBitrate')) {
                obj['MaxBitrate'] = ApiClient.convertToType(data['MaxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MinIInterval')) {
                obj['MinIInterval'] = ApiClient.convertToType(data['MinIInterval'], 'Number');
            }
            if (data.hasOwnProperty('NumberBFramesBetweenReferenceFrames')) {
                obj['NumberBFramesBetweenReferenceFrames'] = ApiClient.convertToType(data['NumberBFramesBetweenReferenceFrames'], 'Number');
            }
            if (data.hasOwnProperty('ParControl')) {
                obj['ParControl'] = ApiClient.convertToType(data['ParControl'], Mpeg2ParControl);
            }
            if (data.hasOwnProperty('ParDenominator')) {
                obj['ParDenominator'] = ApiClient.convertToType(data['ParDenominator'], 'Number');
            }
            if (data.hasOwnProperty('ParNumerator')) {
                obj['ParNumerator'] = ApiClient.convertToType(data['ParNumerator'], 'Number');
            }
            if (data.hasOwnProperty('QualityTuningLevel')) {
                obj['QualityTuningLevel'] = ApiClient.convertToType(data['QualityTuningLevel'], Mpeg2QualityTuningLevel);
            }
            if (data.hasOwnProperty('RateControlMode')) {
                obj['RateControlMode'] = ApiClient.convertToType(data['RateControlMode'], Mpeg2RateControlMode);
            }
            if (data.hasOwnProperty('ScanTypeConversionMode')) {
                obj['ScanTypeConversionMode'] = ApiClient.convertToType(data['ScanTypeConversionMode'], Mpeg2ScanTypeConversionMode);
            }
            if (data.hasOwnProperty('SceneChangeDetect')) {
                obj['SceneChangeDetect'] = ApiClient.convertToType(data['SceneChangeDetect'], Mpeg2SceneChangeDetect);
            }
            if (data.hasOwnProperty('SlowPal')) {
                obj['SlowPal'] = ApiClient.convertToType(data['SlowPal'], Mpeg2SlowPal);
            }
            if (data.hasOwnProperty('Softness')) {
                obj['Softness'] = ApiClient.convertToType(data['Softness'], 'Number');
            }
            if (data.hasOwnProperty('SpatialAdaptiveQuantization')) {
                obj['SpatialAdaptiveQuantization'] = ApiClient.convertToType(data['SpatialAdaptiveQuantization'], Mpeg2SpatialAdaptiveQuantization);
            }
            if (data.hasOwnProperty('Syntax')) {
                obj['Syntax'] = ApiClient.convertToType(data['Syntax'], Mpeg2Syntax);
            }
            if (data.hasOwnProperty('Telecine')) {
                obj['Telecine'] = ApiClient.convertToType(data['Telecine'], Mpeg2Telecine);
            }
            if (data.hasOwnProperty('TemporalAdaptiveQuantization')) {
                obj['TemporalAdaptiveQuantization'] = ApiClient.convertToType(data['TemporalAdaptiveQuantization'], Mpeg2TemporalAdaptiveQuantization);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mpeg2Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mpeg2Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AdaptiveQuantization`
        if (data['AdaptiveQuantization']) { // data not null
          Mpeg2AdaptiveQuantization.validateJSON(data['AdaptiveQuantization']);
        }
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `CodecLevel`
        if (data['CodecLevel']) { // data not null
          Mpeg2CodecLevel.validateJSON(data['CodecLevel']);
        }
        // validate the optional field `CodecProfile`
        if (data['CodecProfile']) { // data not null
          Mpeg2CodecProfile.validateJSON(data['CodecProfile']);
        }
        // validate the optional field `DynamicSubGop`
        if (data['DynamicSubGop']) { // data not null
          Mpeg2DynamicSubGop.validateJSON(data['DynamicSubGop']);
        }
        // validate the optional field `FramerateControl`
        if (data['FramerateControl']) { // data not null
          Mpeg2FramerateControl.validateJSON(data['FramerateControl']);
        }
        // validate the optional field `FramerateConversionAlgorithm`
        if (data['FramerateConversionAlgorithm']) { // data not null
          Mpeg2FramerateConversionAlgorithm.validateJSON(data['FramerateConversionAlgorithm']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `GopClosedCadence`
        if (data['GopClosedCadence']) { // data not null
          Number.validateJSON(data['GopClosedCadence']);
        }
        // validate the optional field `GopSize`
        if (data['GopSize']) { // data not null
          Number.validateJSON(data['GopSize']);
        }
        // validate the optional field `GopSizeUnits`
        if (data['GopSizeUnits']) { // data not null
          Mpeg2GopSizeUnits.validateJSON(data['GopSizeUnits']);
        }
        // validate the optional field `HrdBufferFinalFillPercentage`
        if (data['HrdBufferFinalFillPercentage']) { // data not null
          Number.validateJSON(data['HrdBufferFinalFillPercentage']);
        }
        // validate the optional field `HrdBufferInitialFillPercentage`
        if (data['HrdBufferInitialFillPercentage']) { // data not null
          Number.validateJSON(data['HrdBufferInitialFillPercentage']);
        }
        // validate the optional field `HrdBufferSize`
        if (data['HrdBufferSize']) { // data not null
          Number.validateJSON(data['HrdBufferSize']);
        }
        // validate the optional field `InterlaceMode`
        if (data['InterlaceMode']) { // data not null
          Mpeg2InterlaceMode.validateJSON(data['InterlaceMode']);
        }
        // validate the optional field `IntraDcPrecision`
        if (data['IntraDcPrecision']) { // data not null
          Mpeg2IntraDcPrecision.validateJSON(data['IntraDcPrecision']);
        }
        // validate the optional field `MaxBitrate`
        if (data['MaxBitrate']) { // data not null
          Number.validateJSON(data['MaxBitrate']);
        }
        // validate the optional field `MinIInterval`
        if (data['MinIInterval']) { // data not null
          Number.validateJSON(data['MinIInterval']);
        }
        // validate the optional field `NumberBFramesBetweenReferenceFrames`
        if (data['NumberBFramesBetweenReferenceFrames']) { // data not null
          Number.validateJSON(data['NumberBFramesBetweenReferenceFrames']);
        }
        // validate the optional field `ParControl`
        if (data['ParControl']) { // data not null
          Mpeg2ParControl.validateJSON(data['ParControl']);
        }
        // validate the optional field `ParDenominator`
        if (data['ParDenominator']) { // data not null
          Number.validateJSON(data['ParDenominator']);
        }
        // validate the optional field `ParNumerator`
        if (data['ParNumerator']) { // data not null
          Number.validateJSON(data['ParNumerator']);
        }
        // validate the optional field `QualityTuningLevel`
        if (data['QualityTuningLevel']) { // data not null
          Mpeg2QualityTuningLevel.validateJSON(data['QualityTuningLevel']);
        }
        // validate the optional field `RateControlMode`
        if (data['RateControlMode']) { // data not null
          Mpeg2RateControlMode.validateJSON(data['RateControlMode']);
        }
        // validate the optional field `ScanTypeConversionMode`
        if (data['ScanTypeConversionMode']) { // data not null
          Mpeg2ScanTypeConversionMode.validateJSON(data['ScanTypeConversionMode']);
        }
        // validate the optional field `SceneChangeDetect`
        if (data['SceneChangeDetect']) { // data not null
          Mpeg2SceneChangeDetect.validateJSON(data['SceneChangeDetect']);
        }
        // validate the optional field `SlowPal`
        if (data['SlowPal']) { // data not null
          Mpeg2SlowPal.validateJSON(data['SlowPal']);
        }
        // validate the optional field `Softness`
        if (data['Softness']) { // data not null
          Number.validateJSON(data['Softness']);
        }
        // validate the optional field `SpatialAdaptiveQuantization`
        if (data['SpatialAdaptiveQuantization']) { // data not null
          Mpeg2SpatialAdaptiveQuantization.validateJSON(data['SpatialAdaptiveQuantization']);
        }
        // validate the optional field `Syntax`
        if (data['Syntax']) { // data not null
          Mpeg2Syntax.validateJSON(data['Syntax']);
        }
        // validate the optional field `Telecine`
        if (data['Telecine']) { // data not null
          Mpeg2Telecine.validateJSON(data['Telecine']);
        }
        // validate the optional field `TemporalAdaptiveQuantization`
        if (data['TemporalAdaptiveQuantization']) { // data not null
          Mpeg2TemporalAdaptiveQuantization.validateJSON(data['TemporalAdaptiveQuantization']);
        }

        return true;
    }


}



/**
 * @member {module:model/Mpeg2AdaptiveQuantization} AdaptiveQuantization
 */
Mpeg2Settings.prototype['AdaptiveQuantization'] = undefined;

/**
 * @member {Number} Bitrate
 */
Mpeg2Settings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/Mpeg2CodecLevel} CodecLevel
 */
Mpeg2Settings.prototype['CodecLevel'] = undefined;

/**
 * @member {module:model/Mpeg2CodecProfile} CodecProfile
 */
Mpeg2Settings.prototype['CodecProfile'] = undefined;

/**
 * @member {module:model/Mpeg2DynamicSubGop} DynamicSubGop
 */
Mpeg2Settings.prototype['DynamicSubGop'] = undefined;

/**
 * @member {module:model/Mpeg2FramerateControl} FramerateControl
 */
Mpeg2Settings.prototype['FramerateControl'] = undefined;

/**
 * @member {module:model/Mpeg2FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
Mpeg2Settings.prototype['FramerateConversionAlgorithm'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
Mpeg2Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
Mpeg2Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {Number} GopClosedCadence
 */
Mpeg2Settings.prototype['GopClosedCadence'] = undefined;

/**
 * @member {Number} GopSize
 */
Mpeg2Settings.prototype['GopSize'] = undefined;

/**
 * @member {module:model/Mpeg2GopSizeUnits} GopSizeUnits
 */
Mpeg2Settings.prototype['GopSizeUnits'] = undefined;

/**
 * @member {Number} HrdBufferFinalFillPercentage
 */
Mpeg2Settings.prototype['HrdBufferFinalFillPercentage'] = undefined;

/**
 * @member {Number} HrdBufferInitialFillPercentage
 */
Mpeg2Settings.prototype['HrdBufferInitialFillPercentage'] = undefined;

/**
 * @member {Number} HrdBufferSize
 */
Mpeg2Settings.prototype['HrdBufferSize'] = undefined;

/**
 * @member {module:model/Mpeg2InterlaceMode} InterlaceMode
 */
Mpeg2Settings.prototype['InterlaceMode'] = undefined;

/**
 * @member {module:model/Mpeg2IntraDcPrecision} IntraDcPrecision
 */
Mpeg2Settings.prototype['IntraDcPrecision'] = undefined;

/**
 * @member {Number} MaxBitrate
 */
Mpeg2Settings.prototype['MaxBitrate'] = undefined;

/**
 * @member {Number} MinIInterval
 */
Mpeg2Settings.prototype['MinIInterval'] = undefined;

/**
 * @member {Number} NumberBFramesBetweenReferenceFrames
 */
Mpeg2Settings.prototype['NumberBFramesBetweenReferenceFrames'] = undefined;

/**
 * @member {module:model/Mpeg2ParControl} ParControl
 */
Mpeg2Settings.prototype['ParControl'] = undefined;

/**
 * @member {Number} ParDenominator
 */
Mpeg2Settings.prototype['ParDenominator'] = undefined;

/**
 * @member {Number} ParNumerator
 */
Mpeg2Settings.prototype['ParNumerator'] = undefined;

/**
 * @member {module:model/Mpeg2QualityTuningLevel} QualityTuningLevel
 */
Mpeg2Settings.prototype['QualityTuningLevel'] = undefined;

/**
 * @member {module:model/Mpeg2RateControlMode} RateControlMode
 */
Mpeg2Settings.prototype['RateControlMode'] = undefined;

/**
 * @member {module:model/Mpeg2ScanTypeConversionMode} ScanTypeConversionMode
 */
Mpeg2Settings.prototype['ScanTypeConversionMode'] = undefined;

/**
 * @member {module:model/Mpeg2SceneChangeDetect} SceneChangeDetect
 */
Mpeg2Settings.prototype['SceneChangeDetect'] = undefined;

/**
 * @member {module:model/Mpeg2SlowPal} SlowPal
 */
Mpeg2Settings.prototype['SlowPal'] = undefined;

/**
 * @member {Number} Softness
 */
Mpeg2Settings.prototype['Softness'] = undefined;

/**
 * @member {module:model/Mpeg2SpatialAdaptiveQuantization} SpatialAdaptiveQuantization
 */
Mpeg2Settings.prototype['SpatialAdaptiveQuantization'] = undefined;

/**
 * @member {module:model/Mpeg2Syntax} Syntax
 */
Mpeg2Settings.prototype['Syntax'] = undefined;

/**
 * @member {module:model/Mpeg2Telecine} Telecine
 */
Mpeg2Settings.prototype['Telecine'] = undefined;

/**
 * @member {module:model/Mpeg2TemporalAdaptiveQuantization} TemporalAdaptiveQuantization
 */
Mpeg2Settings.prototype['TemporalAdaptiveQuantization'] = undefined;






export default Mpeg2Settings;

