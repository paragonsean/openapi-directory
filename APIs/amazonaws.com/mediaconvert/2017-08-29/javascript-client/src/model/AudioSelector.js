/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioDefaultSelection from './AudioDefaultSelection';
import AudioDurationCorrection from './AudioDurationCorrection';
import AudioSelectorHlsRenditionGroupSettings from './AudioSelectorHlsRenditionGroupSettings';
import AudioSelectorRemixSettings from './AudioSelectorRemixSettings';
import AudioSelectorType from './AudioSelectorType';
import LanguageCode from './LanguageCode';

/**
 * The AudioSelector model module.
 * @module model/AudioSelector
 * @version 2017-08-29
 */
class AudioSelector {
    /**
     * Constructs a new <code>AudioSelector</code>.
     * Use Audio selectors to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
     * @alias module:model/AudioSelector
     */
    constructor() { 
        
        AudioSelector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioSelector} obj Optional instance to populate.
     * @return {module:model/AudioSelector} The populated <code>AudioSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioSelector();

            if (data.hasOwnProperty('AudioDurationCorrection')) {
                obj['AudioDurationCorrection'] = ApiClient.convertToType(data['AudioDurationCorrection'], AudioDurationCorrection);
            }
            if (data.hasOwnProperty('CustomLanguageCode')) {
                obj['CustomLanguageCode'] = ApiClient.convertToType(data['CustomLanguageCode'], 'String');
            }
            if (data.hasOwnProperty('DefaultSelection')) {
                obj['DefaultSelection'] = ApiClient.convertToType(data['DefaultSelection'], AudioDefaultSelection);
            }
            if (data.hasOwnProperty('ExternalAudioFileInput')) {
                obj['ExternalAudioFileInput'] = ApiClient.convertToType(data['ExternalAudioFileInput'], 'String');
            }
            if (data.hasOwnProperty('HlsRenditionGroupSettings')) {
                obj['HlsRenditionGroupSettings'] = AudioSelectorHlsRenditionGroupSettings.constructFromObject(data['HlsRenditionGroupSettings']);
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], LanguageCode);
            }
            if (data.hasOwnProperty('Offset')) {
                obj['Offset'] = ApiClient.convertToType(data['Offset'], 'Number');
            }
            if (data.hasOwnProperty('Pids')) {
                obj['Pids'] = ApiClient.convertToType(data['Pids'], Array);
            }
            if (data.hasOwnProperty('ProgramSelection')) {
                obj['ProgramSelection'] = ApiClient.convertToType(data['ProgramSelection'], 'Number');
            }
            if (data.hasOwnProperty('RemixSettings')) {
                obj['RemixSettings'] = AudioSelectorRemixSettings.constructFromObject(data['RemixSettings']);
            }
            if (data.hasOwnProperty('SelectorType')) {
                obj['SelectorType'] = ApiClient.convertToType(data['SelectorType'], AudioSelectorType);
            }
            if (data.hasOwnProperty('Tracks')) {
                obj['Tracks'] = ApiClient.convertToType(data['Tracks'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioSelector</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AudioDurationCorrection`
        if (data['AudioDurationCorrection']) { // data not null
          AudioDurationCorrection.validateJSON(data['AudioDurationCorrection']);
        }
        // validate the optional field `CustomLanguageCode`
        if (data['CustomLanguageCode']) { // data not null
          String.validateJSON(data['CustomLanguageCode']);
        }
        // validate the optional field `DefaultSelection`
        if (data['DefaultSelection']) { // data not null
          AudioDefaultSelection.validateJSON(data['DefaultSelection']);
        }
        // validate the optional field `ExternalAudioFileInput`
        if (data['ExternalAudioFileInput']) { // data not null
          String.validateJSON(data['ExternalAudioFileInput']);
        }
        // validate the optional field `HlsRenditionGroupSettings`
        if (data['HlsRenditionGroupSettings']) { // data not null
          AudioSelectorHlsRenditionGroupSettings.validateJSON(data['HlsRenditionGroupSettings']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          LanguageCode.validateJSON(data['LanguageCode']);
        }
        // validate the optional field `Offset`
        if (data['Offset']) { // data not null
          Number.validateJSON(data['Offset']);
        }
        // validate the optional field `Pids`
        if (data['Pids']) { // data not null
          Array.validateJSON(data['Pids']);
        }
        // validate the optional field `ProgramSelection`
        if (data['ProgramSelection']) { // data not null
          Number.validateJSON(data['ProgramSelection']);
        }
        // validate the optional field `RemixSettings`
        if (data['RemixSettings']) { // data not null
          AudioSelectorRemixSettings.validateJSON(data['RemixSettings']);
        }
        // validate the optional field `SelectorType`
        if (data['SelectorType']) { // data not null
          AudioSelectorType.validateJSON(data['SelectorType']);
        }
        // validate the optional field `Tracks`
        if (data['Tracks']) { // data not null
          Array.validateJSON(data['Tracks']);
        }

        return true;
    }


}



/**
 * @member {module:model/AudioDurationCorrection} AudioDurationCorrection
 */
AudioSelector.prototype['AudioDurationCorrection'] = undefined;

/**
 * @member {String} CustomLanguageCode
 */
AudioSelector.prototype['CustomLanguageCode'] = undefined;

/**
 * @member {module:model/AudioDefaultSelection} DefaultSelection
 */
AudioSelector.prototype['DefaultSelection'] = undefined;

/**
 * @member {String} ExternalAudioFileInput
 */
AudioSelector.prototype['ExternalAudioFileInput'] = undefined;

/**
 * @member {module:model/AudioSelectorHlsRenditionGroupSettings} HlsRenditionGroupSettings
 */
AudioSelector.prototype['HlsRenditionGroupSettings'] = undefined;

/**
 * @member {module:model/LanguageCode} LanguageCode
 */
AudioSelector.prototype['LanguageCode'] = undefined;

/**
 * @member {Number} Offset
 */
AudioSelector.prototype['Offset'] = undefined;

/**
 * @member {Array} Pids
 */
AudioSelector.prototype['Pids'] = undefined;

/**
 * @member {Number} ProgramSelection
 */
AudioSelector.prototype['ProgramSelection'] = undefined;

/**
 * @member {module:model/AudioSelectorRemixSettings} RemixSettings
 */
AudioSelector.prototype['RemixSettings'] = undefined;

/**
 * @member {module:model/AudioSelectorType} SelectorType
 */
AudioSelector.prototype['SelectorType'] = undefined;

/**
 * @member {Array} Tracks
 */
AudioSelector.prototype['Tracks'] = undefined;






export default AudioSelector;

