/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoPreprocessor from './VideoPreprocessor';
import VideoPreprocessorColorCorrector from './VideoPreprocessorColorCorrector';
import VideoPreprocessorDeinterlacer from './VideoPreprocessorDeinterlacer';
import VideoPreprocessorDolbyVision from './VideoPreprocessorDolbyVision';
import VideoPreprocessorHdr10Plus from './VideoPreprocessorHdr10Plus';
import VideoPreprocessorImageInserter from './VideoPreprocessorImageInserter';
import VideoPreprocessorNoiseReducer from './VideoPreprocessorNoiseReducer';
import VideoPreprocessorPartnerWatermarking from './VideoPreprocessorPartnerWatermarking';
import VideoPreprocessorTimecodeBurnin from './VideoPreprocessorTimecodeBurnin';

/**
 * The VideoDescriptionVideoPreprocessors model module.
 * @module model/VideoDescriptionVideoPreprocessors
 * @version 2017-08-29
 */
class VideoDescriptionVideoPreprocessors {
    /**
     * Constructs a new <code>VideoDescriptionVideoPreprocessors</code>.
     * @alias module:model/VideoDescriptionVideoPreprocessors
     * @implements module:model/VideoPreprocessor
     */
    constructor() { 
        VideoPreprocessor.initialize(this);
        VideoDescriptionVideoPreprocessors.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoDescriptionVideoPreprocessors</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoDescriptionVideoPreprocessors} obj Optional instance to populate.
     * @return {module:model/VideoDescriptionVideoPreprocessors} The populated <code>VideoDescriptionVideoPreprocessors</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoDescriptionVideoPreprocessors();
            VideoPreprocessor.constructFromObject(data, obj);

            if (data.hasOwnProperty('ColorCorrector')) {
                obj['ColorCorrector'] = VideoPreprocessorColorCorrector.constructFromObject(data['ColorCorrector']);
            }
            if (data.hasOwnProperty('Deinterlacer')) {
                obj['Deinterlacer'] = VideoPreprocessorDeinterlacer.constructFromObject(data['Deinterlacer']);
            }
            if (data.hasOwnProperty('DolbyVision')) {
                obj['DolbyVision'] = VideoPreprocessorDolbyVision.constructFromObject(data['DolbyVision']);
            }
            if (data.hasOwnProperty('Hdr10Plus')) {
                obj['Hdr10Plus'] = VideoPreprocessorHdr10Plus.constructFromObject(data['Hdr10Plus']);
            }
            if (data.hasOwnProperty('ImageInserter')) {
                obj['ImageInserter'] = VideoPreprocessorImageInserter.constructFromObject(data['ImageInserter']);
            }
            if (data.hasOwnProperty('NoiseReducer')) {
                obj['NoiseReducer'] = VideoPreprocessorNoiseReducer.constructFromObject(data['NoiseReducer']);
            }
            if (data.hasOwnProperty('PartnerWatermarking')) {
                obj['PartnerWatermarking'] = VideoPreprocessorPartnerWatermarking.constructFromObject(data['PartnerWatermarking']);
            }
            if (data.hasOwnProperty('TimecodeBurnin')) {
                obj['TimecodeBurnin'] = VideoPreprocessorTimecodeBurnin.constructFromObject(data['TimecodeBurnin']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoDescriptionVideoPreprocessors</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoDescriptionVideoPreprocessors</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ColorCorrector`
        if (data['ColorCorrector']) { // data not null
          VideoPreprocessorColorCorrector.validateJSON(data['ColorCorrector']);
        }
        // validate the optional field `Deinterlacer`
        if (data['Deinterlacer']) { // data not null
          VideoPreprocessorDeinterlacer.validateJSON(data['Deinterlacer']);
        }
        // validate the optional field `DolbyVision`
        if (data['DolbyVision']) { // data not null
          VideoPreprocessorDolbyVision.validateJSON(data['DolbyVision']);
        }
        // validate the optional field `Hdr10Plus`
        if (data['Hdr10Plus']) { // data not null
          VideoPreprocessorHdr10Plus.validateJSON(data['Hdr10Plus']);
        }
        // validate the optional field `ImageInserter`
        if (data['ImageInserter']) { // data not null
          VideoPreprocessorImageInserter.validateJSON(data['ImageInserter']);
        }
        // validate the optional field `NoiseReducer`
        if (data['NoiseReducer']) { // data not null
          VideoPreprocessorNoiseReducer.validateJSON(data['NoiseReducer']);
        }
        // validate the optional field `PartnerWatermarking`
        if (data['PartnerWatermarking']) { // data not null
          VideoPreprocessorPartnerWatermarking.validateJSON(data['PartnerWatermarking']);
        }
        // validate the optional field `TimecodeBurnin`
        if (data['TimecodeBurnin']) { // data not null
          VideoPreprocessorTimecodeBurnin.validateJSON(data['TimecodeBurnin']);
        }

        return true;
    }


}



/**
 * @member {module:model/VideoPreprocessorColorCorrector} ColorCorrector
 */
VideoDescriptionVideoPreprocessors.prototype['ColorCorrector'] = undefined;

/**
 * @member {module:model/VideoPreprocessorDeinterlacer} Deinterlacer
 */
VideoDescriptionVideoPreprocessors.prototype['Deinterlacer'] = undefined;

/**
 * @member {module:model/VideoPreprocessorDolbyVision} DolbyVision
 */
VideoDescriptionVideoPreprocessors.prototype['DolbyVision'] = undefined;

/**
 * @member {module:model/VideoPreprocessorHdr10Plus} Hdr10Plus
 */
VideoDescriptionVideoPreprocessors.prototype['Hdr10Plus'] = undefined;

/**
 * @member {module:model/VideoPreprocessorImageInserter} ImageInserter
 */
VideoDescriptionVideoPreprocessors.prototype['ImageInserter'] = undefined;

/**
 * @member {module:model/VideoPreprocessorNoiseReducer} NoiseReducer
 */
VideoDescriptionVideoPreprocessors.prototype['NoiseReducer'] = undefined;

/**
 * @member {module:model/VideoPreprocessorPartnerWatermarking} PartnerWatermarking
 */
VideoDescriptionVideoPreprocessors.prototype['PartnerWatermarking'] = undefined;

/**
 * @member {module:model/VideoPreprocessorTimecodeBurnin} TimecodeBurnin
 */
VideoDescriptionVideoPreprocessors.prototype['TimecodeBurnin'] = undefined;


// Implement VideoPreprocessor interface:
/**
 * @member {module:model/VideoPreprocessorColorCorrector} ColorCorrector
 */
VideoPreprocessor.prototype['ColorCorrector'] = undefined;
/**
 * @member {module:model/VideoPreprocessorDeinterlacer} Deinterlacer
 */
VideoPreprocessor.prototype['Deinterlacer'] = undefined;
/**
 * @member {module:model/VideoPreprocessorDolbyVision} DolbyVision
 */
VideoPreprocessor.prototype['DolbyVision'] = undefined;
/**
 * @member {module:model/VideoPreprocessorHdr10Plus} Hdr10Plus
 */
VideoPreprocessor.prototype['Hdr10Plus'] = undefined;
/**
 * @member {module:model/VideoPreprocessorImageInserter} ImageInserter
 */
VideoPreprocessor.prototype['ImageInserter'] = undefined;
/**
 * @member {module:model/VideoPreprocessorNoiseReducer} NoiseReducer
 */
VideoPreprocessor.prototype['NoiseReducer'] = undefined;
/**
 * @member {module:model/VideoPreprocessorPartnerWatermarking} PartnerWatermarking
 */
VideoPreprocessor.prototype['PartnerWatermarking'] = undefined;
/**
 * @member {module:model/VideoPreprocessorTimecodeBurnin} TimecodeBurnin
 */
VideoPreprocessor.prototype['TimecodeBurnin'] = undefined;




export default VideoDescriptionVideoPreprocessors;

