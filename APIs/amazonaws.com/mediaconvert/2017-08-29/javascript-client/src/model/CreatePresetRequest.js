/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreatePresetRequestSettings from './CreatePresetRequestSettings';

/**
 * The CreatePresetRequest model module.
 * @module model/CreatePresetRequest
 * @version 2017-08-29
 */
class CreatePresetRequest {
    /**
     * Constructs a new <code>CreatePresetRequest</code>.
     * @alias module:model/CreatePresetRequest
     * @param name {String} The name of the preset you are creating.
     * @param settings {module:model/CreatePresetRequestSettings} 
     */
    constructor(name, settings) { 
        
        CreatePresetRequest.initialize(this, name, settings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, settings) { 
        obj['name'] = name;
        obj['settings'] = settings;
    }

    /**
     * Constructs a <code>CreatePresetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreatePresetRequest} obj Optional instance to populate.
     * @return {module:model/CreatePresetRequest} The populated <code>CreatePresetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreatePresetRequest();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = CreatePresetRequestSettings.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreatePresetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreatePresetRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreatePresetRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          CreatePresetRequestSettings.validateJSON(data['settings']);
        }

        return true;
    }


}

CreatePresetRequest.RequiredProperties = ["name", "settings"];

/**
 * Optional. A category for the preset you are creating.
 * @member {String} category
 */
CreatePresetRequest.prototype['category'] = undefined;

/**
 * Optional. A description of the preset you are creating.
 * @member {String} description
 */
CreatePresetRequest.prototype['description'] = undefined;

/**
 * The name of the preset you are creating.
 * @member {String} name
 */
CreatePresetRequest.prototype['name'] = undefined;

/**
 * @member {module:model/CreatePresetRequestSettings} settings
 */
CreatePresetRequest.prototype['settings'] = undefined;

/**
 * The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
 * @member {Object.<String, String>} tags
 */
CreatePresetRequest.prototype['tags'] = undefined;






export default CreatePresetRequest;

