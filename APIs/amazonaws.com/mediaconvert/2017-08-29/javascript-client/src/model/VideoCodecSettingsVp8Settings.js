/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Vp8FramerateControl from './Vp8FramerateControl';
import Vp8FramerateConversionAlgorithm from './Vp8FramerateConversionAlgorithm';
import Vp8ParControl from './Vp8ParControl';
import Vp8QualityTuningLevel from './Vp8QualityTuningLevel';
import Vp8RateControlMode from './Vp8RateControlMode';
import Vp8Settings from './Vp8Settings';

/**
 * The VideoCodecSettingsVp8Settings model module.
 * @module model/VideoCodecSettingsVp8Settings
 * @version 2017-08-29
 */
class VideoCodecSettingsVp8Settings {
    /**
     * Constructs a new <code>VideoCodecSettingsVp8Settings</code>.
     * @alias module:model/VideoCodecSettingsVp8Settings
     * @implements module:model/Vp8Settings
     */
    constructor() { 
        Vp8Settings.initialize(this);
        VideoCodecSettingsVp8Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoCodecSettingsVp8Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCodecSettingsVp8Settings} obj Optional instance to populate.
     * @return {module:model/VideoCodecSettingsVp8Settings} The populated <code>VideoCodecSettingsVp8Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCodecSettingsVp8Settings();
            Vp8Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('FramerateControl')) {
                obj['FramerateControl'] = ApiClient.convertToType(data['FramerateControl'], Vp8FramerateControl);
            }
            if (data.hasOwnProperty('FramerateConversionAlgorithm')) {
                obj['FramerateConversionAlgorithm'] = ApiClient.convertToType(data['FramerateConversionAlgorithm'], Vp8FramerateConversionAlgorithm);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('GopSize')) {
                obj['GopSize'] = ApiClient.convertToType(data['GopSize'], 'Number');
            }
            if (data.hasOwnProperty('HrdBufferSize')) {
                obj['HrdBufferSize'] = ApiClient.convertToType(data['HrdBufferSize'], 'Number');
            }
            if (data.hasOwnProperty('MaxBitrate')) {
                obj['MaxBitrate'] = ApiClient.convertToType(data['MaxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('ParControl')) {
                obj['ParControl'] = ApiClient.convertToType(data['ParControl'], Vp8ParControl);
            }
            if (data.hasOwnProperty('ParDenominator')) {
                obj['ParDenominator'] = ApiClient.convertToType(data['ParDenominator'], 'Number');
            }
            if (data.hasOwnProperty('ParNumerator')) {
                obj['ParNumerator'] = ApiClient.convertToType(data['ParNumerator'], 'Number');
            }
            if (data.hasOwnProperty('QualityTuningLevel')) {
                obj['QualityTuningLevel'] = ApiClient.convertToType(data['QualityTuningLevel'], Vp8QualityTuningLevel);
            }
            if (data.hasOwnProperty('RateControlMode')) {
                obj['RateControlMode'] = ApiClient.convertToType(data['RateControlMode'], Vp8RateControlMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCodecSettingsVp8Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCodecSettingsVp8Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `FramerateControl`
        if (data['FramerateControl']) { // data not null
          Vp8FramerateControl.validateJSON(data['FramerateControl']);
        }
        // validate the optional field `FramerateConversionAlgorithm`
        if (data['FramerateConversionAlgorithm']) { // data not null
          Vp8FramerateConversionAlgorithm.validateJSON(data['FramerateConversionAlgorithm']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `GopSize`
        if (data['GopSize']) { // data not null
          Number.validateJSON(data['GopSize']);
        }
        // validate the optional field `HrdBufferSize`
        if (data['HrdBufferSize']) { // data not null
          Number.validateJSON(data['HrdBufferSize']);
        }
        // validate the optional field `MaxBitrate`
        if (data['MaxBitrate']) { // data not null
          Number.validateJSON(data['MaxBitrate']);
        }
        // validate the optional field `ParControl`
        if (data['ParControl']) { // data not null
          Vp8ParControl.validateJSON(data['ParControl']);
        }
        // validate the optional field `ParDenominator`
        if (data['ParDenominator']) { // data not null
          Number.validateJSON(data['ParDenominator']);
        }
        // validate the optional field `ParNumerator`
        if (data['ParNumerator']) { // data not null
          Number.validateJSON(data['ParNumerator']);
        }
        // validate the optional field `QualityTuningLevel`
        if (data['QualityTuningLevel']) { // data not null
          Vp8QualityTuningLevel.validateJSON(data['QualityTuningLevel']);
        }
        // validate the optional field `RateControlMode`
        if (data['RateControlMode']) { // data not null
          Vp8RateControlMode.validateJSON(data['RateControlMode']);
        }

        return true;
    }


}



/**
 * @member {Number} Bitrate
 */
VideoCodecSettingsVp8Settings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/Vp8FramerateControl} FramerateControl
 */
VideoCodecSettingsVp8Settings.prototype['FramerateControl'] = undefined;

/**
 * @member {module:model/Vp8FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
VideoCodecSettingsVp8Settings.prototype['FramerateConversionAlgorithm'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
VideoCodecSettingsVp8Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
VideoCodecSettingsVp8Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {Number} GopSize
 */
VideoCodecSettingsVp8Settings.prototype['GopSize'] = undefined;

/**
 * @member {Number} HrdBufferSize
 */
VideoCodecSettingsVp8Settings.prototype['HrdBufferSize'] = undefined;

/**
 * @member {Number} MaxBitrate
 */
VideoCodecSettingsVp8Settings.prototype['MaxBitrate'] = undefined;

/**
 * @member {module:model/Vp8ParControl} ParControl
 */
VideoCodecSettingsVp8Settings.prototype['ParControl'] = undefined;

/**
 * @member {Number} ParDenominator
 */
VideoCodecSettingsVp8Settings.prototype['ParDenominator'] = undefined;

/**
 * @member {Number} ParNumerator
 */
VideoCodecSettingsVp8Settings.prototype['ParNumerator'] = undefined;

/**
 * @member {module:model/Vp8QualityTuningLevel} QualityTuningLevel
 */
VideoCodecSettingsVp8Settings.prototype['QualityTuningLevel'] = undefined;

/**
 * @member {module:model/Vp8RateControlMode} RateControlMode
 */
VideoCodecSettingsVp8Settings.prototype['RateControlMode'] = undefined;


// Implement Vp8Settings interface:
/**
 * @member {Number} Bitrate
 */
Vp8Settings.prototype['Bitrate'] = undefined;
/**
 * @member {module:model/Vp8FramerateControl} FramerateControl
 */
Vp8Settings.prototype['FramerateControl'] = undefined;
/**
 * @member {module:model/Vp8FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
Vp8Settings.prototype['FramerateConversionAlgorithm'] = undefined;
/**
 * @member {Number} FramerateDenominator
 */
Vp8Settings.prototype['FramerateDenominator'] = undefined;
/**
 * @member {Number} FramerateNumerator
 */
Vp8Settings.prototype['FramerateNumerator'] = undefined;
/**
 * @member {Number} GopSize
 */
Vp8Settings.prototype['GopSize'] = undefined;
/**
 * @member {Number} HrdBufferSize
 */
Vp8Settings.prototype['HrdBufferSize'] = undefined;
/**
 * @member {Number} MaxBitrate
 */
Vp8Settings.prototype['MaxBitrate'] = undefined;
/**
 * @member {module:model/Vp8ParControl} ParControl
 */
Vp8Settings.prototype['ParControl'] = undefined;
/**
 * @member {Number} ParDenominator
 */
Vp8Settings.prototype['ParDenominator'] = undefined;
/**
 * @member {Number} ParNumerator
 */
Vp8Settings.prototype['ParNumerator'] = undefined;
/**
 * @member {module:model/Vp8QualityTuningLevel} QualityTuningLevel
 */
Vp8Settings.prototype['QualityTuningLevel'] = undefined;
/**
 * @member {module:model/Vp8RateControlMode} RateControlMode
 */
Vp8Settings.prototype['RateControlMode'] = undefined;




export default VideoCodecSettingsVp8Settings;

