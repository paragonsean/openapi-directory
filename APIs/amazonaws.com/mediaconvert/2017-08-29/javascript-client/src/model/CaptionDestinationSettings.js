/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CaptionDestinationSettingsBurninDestinationSettings from './CaptionDestinationSettingsBurninDestinationSettings';
import CaptionDestinationSettingsDvbSubDestinationSettings from './CaptionDestinationSettingsDvbSubDestinationSettings';
import CaptionDestinationSettingsEmbeddedDestinationSettings from './CaptionDestinationSettingsEmbeddedDestinationSettings';
import CaptionDestinationSettingsImscDestinationSettings from './CaptionDestinationSettingsImscDestinationSettings';
import CaptionDestinationSettingsSccDestinationSettings from './CaptionDestinationSettingsSccDestinationSettings';
import CaptionDestinationSettingsSrtDestinationSettings from './CaptionDestinationSettingsSrtDestinationSettings';
import CaptionDestinationSettingsTeletextDestinationSettings from './CaptionDestinationSettingsTeletextDestinationSettings';
import CaptionDestinationSettingsTtmlDestinationSettings from './CaptionDestinationSettingsTtmlDestinationSettings';
import CaptionDestinationSettingsWebvttDestinationSettings from './CaptionDestinationSettingsWebvttDestinationSettings';
import CaptionDestinationType from './CaptionDestinationType';

/**
 * The CaptionDestinationSettings model module.
 * @module model/CaptionDestinationSettings
 * @version 2017-08-29
 */
class CaptionDestinationSettings {
    /**
     * Constructs a new <code>CaptionDestinationSettings</code>.
     * Settings related to one captions tab on the MediaConvert console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
     * @alias module:model/CaptionDestinationSettings
     */
    constructor() { 
        
        CaptionDestinationSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CaptionDestinationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CaptionDestinationSettings} obj Optional instance to populate.
     * @return {module:model/CaptionDestinationSettings} The populated <code>CaptionDestinationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CaptionDestinationSettings();

            if (data.hasOwnProperty('BurninDestinationSettings')) {
                obj['BurninDestinationSettings'] = CaptionDestinationSettingsBurninDestinationSettings.constructFromObject(data['BurninDestinationSettings']);
            }
            if (data.hasOwnProperty('DestinationType')) {
                obj['DestinationType'] = ApiClient.convertToType(data['DestinationType'], CaptionDestinationType);
            }
            if (data.hasOwnProperty('DvbSubDestinationSettings')) {
                obj['DvbSubDestinationSettings'] = CaptionDestinationSettingsDvbSubDestinationSettings.constructFromObject(data['DvbSubDestinationSettings']);
            }
            if (data.hasOwnProperty('EmbeddedDestinationSettings')) {
                obj['EmbeddedDestinationSettings'] = CaptionDestinationSettingsEmbeddedDestinationSettings.constructFromObject(data['EmbeddedDestinationSettings']);
            }
            if (data.hasOwnProperty('ImscDestinationSettings')) {
                obj['ImscDestinationSettings'] = CaptionDestinationSettingsImscDestinationSettings.constructFromObject(data['ImscDestinationSettings']);
            }
            if (data.hasOwnProperty('SccDestinationSettings')) {
                obj['SccDestinationSettings'] = CaptionDestinationSettingsSccDestinationSettings.constructFromObject(data['SccDestinationSettings']);
            }
            if (data.hasOwnProperty('SrtDestinationSettings')) {
                obj['SrtDestinationSettings'] = CaptionDestinationSettingsSrtDestinationSettings.constructFromObject(data['SrtDestinationSettings']);
            }
            if (data.hasOwnProperty('TeletextDestinationSettings')) {
                obj['TeletextDestinationSettings'] = CaptionDestinationSettingsTeletextDestinationSettings.constructFromObject(data['TeletextDestinationSettings']);
            }
            if (data.hasOwnProperty('TtmlDestinationSettings')) {
                obj['TtmlDestinationSettings'] = CaptionDestinationSettingsTtmlDestinationSettings.constructFromObject(data['TtmlDestinationSettings']);
            }
            if (data.hasOwnProperty('WebvttDestinationSettings')) {
                obj['WebvttDestinationSettings'] = CaptionDestinationSettingsWebvttDestinationSettings.constructFromObject(data['WebvttDestinationSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CaptionDestinationSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CaptionDestinationSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `BurninDestinationSettings`
        if (data['BurninDestinationSettings']) { // data not null
          CaptionDestinationSettingsBurninDestinationSettings.validateJSON(data['BurninDestinationSettings']);
        }
        // validate the optional field `DestinationType`
        if (data['DestinationType']) { // data not null
          CaptionDestinationType.validateJSON(data['DestinationType']);
        }
        // validate the optional field `DvbSubDestinationSettings`
        if (data['DvbSubDestinationSettings']) { // data not null
          CaptionDestinationSettingsDvbSubDestinationSettings.validateJSON(data['DvbSubDestinationSettings']);
        }
        // validate the optional field `EmbeddedDestinationSettings`
        if (data['EmbeddedDestinationSettings']) { // data not null
          CaptionDestinationSettingsEmbeddedDestinationSettings.validateJSON(data['EmbeddedDestinationSettings']);
        }
        // validate the optional field `ImscDestinationSettings`
        if (data['ImscDestinationSettings']) { // data not null
          CaptionDestinationSettingsImscDestinationSettings.validateJSON(data['ImscDestinationSettings']);
        }
        // validate the optional field `SccDestinationSettings`
        if (data['SccDestinationSettings']) { // data not null
          CaptionDestinationSettingsSccDestinationSettings.validateJSON(data['SccDestinationSettings']);
        }
        // validate the optional field `SrtDestinationSettings`
        if (data['SrtDestinationSettings']) { // data not null
          CaptionDestinationSettingsSrtDestinationSettings.validateJSON(data['SrtDestinationSettings']);
        }
        // validate the optional field `TeletextDestinationSettings`
        if (data['TeletextDestinationSettings']) { // data not null
          CaptionDestinationSettingsTeletextDestinationSettings.validateJSON(data['TeletextDestinationSettings']);
        }
        // validate the optional field `TtmlDestinationSettings`
        if (data['TtmlDestinationSettings']) { // data not null
          CaptionDestinationSettingsTtmlDestinationSettings.validateJSON(data['TtmlDestinationSettings']);
        }
        // validate the optional field `WebvttDestinationSettings`
        if (data['WebvttDestinationSettings']) { // data not null
          CaptionDestinationSettingsWebvttDestinationSettings.validateJSON(data['WebvttDestinationSettings']);
        }

        return true;
    }


}



/**
 * @member {module:model/CaptionDestinationSettingsBurninDestinationSettings} BurninDestinationSettings
 */
CaptionDestinationSettings.prototype['BurninDestinationSettings'] = undefined;

/**
 * @member {module:model/CaptionDestinationType} DestinationType
 */
CaptionDestinationSettings.prototype['DestinationType'] = undefined;

/**
 * @member {module:model/CaptionDestinationSettingsDvbSubDestinationSettings} DvbSubDestinationSettings
 */
CaptionDestinationSettings.prototype['DvbSubDestinationSettings'] = undefined;

/**
 * @member {module:model/CaptionDestinationSettingsEmbeddedDestinationSettings} EmbeddedDestinationSettings
 */
CaptionDestinationSettings.prototype['EmbeddedDestinationSettings'] = undefined;

/**
 * @member {module:model/CaptionDestinationSettingsImscDestinationSettings} ImscDestinationSettings
 */
CaptionDestinationSettings.prototype['ImscDestinationSettings'] = undefined;

/**
 * @member {module:model/CaptionDestinationSettingsSccDestinationSettings} SccDestinationSettings
 */
CaptionDestinationSettings.prototype['SccDestinationSettings'] = undefined;

/**
 * @member {module:model/CaptionDestinationSettingsSrtDestinationSettings} SrtDestinationSettings
 */
CaptionDestinationSettings.prototype['SrtDestinationSettings'] = undefined;

/**
 * @member {module:model/CaptionDestinationSettingsTeletextDestinationSettings} TeletextDestinationSettings
 */
CaptionDestinationSettings.prototype['TeletextDestinationSettings'] = undefined;

/**
 * @member {module:model/CaptionDestinationSettingsTtmlDestinationSettings} TtmlDestinationSettings
 */
CaptionDestinationSettings.prototype['TtmlDestinationSettings'] = undefined;

/**
 * @member {module:model/CaptionDestinationSettingsWebvttDestinationSettings} WebvttDestinationSettings
 */
CaptionDestinationSettings.prototype['WebvttDestinationSettings'] = undefined;






export default CaptionDestinationSettings;

