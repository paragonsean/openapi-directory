/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoCodec from './VideoCodec';
import VideoCodecSettingsAv1Settings from './VideoCodecSettingsAv1Settings';
import VideoCodecSettingsAvcIntraSettings from './VideoCodecSettingsAvcIntraSettings';
import VideoCodecSettingsFrameCaptureSettings from './VideoCodecSettingsFrameCaptureSettings';
import VideoCodecSettingsH264Settings from './VideoCodecSettingsH264Settings';
import VideoCodecSettingsH265Settings from './VideoCodecSettingsH265Settings';
import VideoCodecSettingsMpeg2Settings from './VideoCodecSettingsMpeg2Settings';
import VideoCodecSettingsProresSettings from './VideoCodecSettingsProresSettings';
import VideoCodecSettingsVc3Settings from './VideoCodecSettingsVc3Settings';
import VideoCodecSettingsVp8Settings from './VideoCodecSettingsVp8Settings';
import VideoCodecSettingsVp9Settings from './VideoCodecSettingsVp9Settings';
import VideoCodecSettingsXavcSettings from './VideoCodecSettingsXavcSettings';

/**
 * The VideoCodecSettings model module.
 * @module model/VideoCodecSettings
 * @version 2017-08-29
 */
class VideoCodecSettings {
    /**
     * Constructs a new <code>VideoCodecSettings</code>.
     * Video codec settings contains the group of settings related to video encoding. The settings in this group vary depending on the value that you choose for Video codec. For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * AV1, Av1Settings * AVC_INTRA, AvcIntraSettings * FRAME_CAPTURE, FrameCaptureSettings * H_264, H264Settings * H_265, H265Settings * MPEG2, Mpeg2Settings * PRORES, ProresSettings * VC3, Vc3Settings * VP8, Vp8Settings * VP9, Vp9Settings * XAVC, XavcSettings
     * @alias module:model/VideoCodecSettings
     */
    constructor() { 
        
        VideoCodecSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoCodecSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCodecSettings} obj Optional instance to populate.
     * @return {module:model/VideoCodecSettings} The populated <code>VideoCodecSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCodecSettings();

            if (data.hasOwnProperty('Av1Settings')) {
                obj['Av1Settings'] = VideoCodecSettingsAv1Settings.constructFromObject(data['Av1Settings']);
            }
            if (data.hasOwnProperty('AvcIntraSettings')) {
                obj['AvcIntraSettings'] = VideoCodecSettingsAvcIntraSettings.constructFromObject(data['AvcIntraSettings']);
            }
            if (data.hasOwnProperty('Codec')) {
                obj['Codec'] = ApiClient.convertToType(data['Codec'], VideoCodec);
            }
            if (data.hasOwnProperty('FrameCaptureSettings')) {
                obj['FrameCaptureSettings'] = VideoCodecSettingsFrameCaptureSettings.constructFromObject(data['FrameCaptureSettings']);
            }
            if (data.hasOwnProperty('H264Settings')) {
                obj['H264Settings'] = VideoCodecSettingsH264Settings.constructFromObject(data['H264Settings']);
            }
            if (data.hasOwnProperty('H265Settings')) {
                obj['H265Settings'] = VideoCodecSettingsH265Settings.constructFromObject(data['H265Settings']);
            }
            if (data.hasOwnProperty('Mpeg2Settings')) {
                obj['Mpeg2Settings'] = VideoCodecSettingsMpeg2Settings.constructFromObject(data['Mpeg2Settings']);
            }
            if (data.hasOwnProperty('ProresSettings')) {
                obj['ProresSettings'] = VideoCodecSettingsProresSettings.constructFromObject(data['ProresSettings']);
            }
            if (data.hasOwnProperty('Vc3Settings')) {
                obj['Vc3Settings'] = VideoCodecSettingsVc3Settings.constructFromObject(data['Vc3Settings']);
            }
            if (data.hasOwnProperty('Vp8Settings')) {
                obj['Vp8Settings'] = VideoCodecSettingsVp8Settings.constructFromObject(data['Vp8Settings']);
            }
            if (data.hasOwnProperty('Vp9Settings')) {
                obj['Vp9Settings'] = VideoCodecSettingsVp9Settings.constructFromObject(data['Vp9Settings']);
            }
            if (data.hasOwnProperty('XavcSettings')) {
                obj['XavcSettings'] = VideoCodecSettingsXavcSettings.constructFromObject(data['XavcSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCodecSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCodecSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Av1Settings`
        if (data['Av1Settings']) { // data not null
          VideoCodecSettingsAv1Settings.validateJSON(data['Av1Settings']);
        }
        // validate the optional field `AvcIntraSettings`
        if (data['AvcIntraSettings']) { // data not null
          VideoCodecSettingsAvcIntraSettings.validateJSON(data['AvcIntraSettings']);
        }
        // validate the optional field `Codec`
        if (data['Codec']) { // data not null
          VideoCodec.validateJSON(data['Codec']);
        }
        // validate the optional field `FrameCaptureSettings`
        if (data['FrameCaptureSettings']) { // data not null
          VideoCodecSettingsFrameCaptureSettings.validateJSON(data['FrameCaptureSettings']);
        }
        // validate the optional field `H264Settings`
        if (data['H264Settings']) { // data not null
          VideoCodecSettingsH264Settings.validateJSON(data['H264Settings']);
        }
        // validate the optional field `H265Settings`
        if (data['H265Settings']) { // data not null
          VideoCodecSettingsH265Settings.validateJSON(data['H265Settings']);
        }
        // validate the optional field `Mpeg2Settings`
        if (data['Mpeg2Settings']) { // data not null
          VideoCodecSettingsMpeg2Settings.validateJSON(data['Mpeg2Settings']);
        }
        // validate the optional field `ProresSettings`
        if (data['ProresSettings']) { // data not null
          VideoCodecSettingsProresSettings.validateJSON(data['ProresSettings']);
        }
        // validate the optional field `Vc3Settings`
        if (data['Vc3Settings']) { // data not null
          VideoCodecSettingsVc3Settings.validateJSON(data['Vc3Settings']);
        }
        // validate the optional field `Vp8Settings`
        if (data['Vp8Settings']) { // data not null
          VideoCodecSettingsVp8Settings.validateJSON(data['Vp8Settings']);
        }
        // validate the optional field `Vp9Settings`
        if (data['Vp9Settings']) { // data not null
          VideoCodecSettingsVp9Settings.validateJSON(data['Vp9Settings']);
        }
        // validate the optional field `XavcSettings`
        if (data['XavcSettings']) { // data not null
          VideoCodecSettingsXavcSettings.validateJSON(data['XavcSettings']);
        }

        return true;
    }


}



/**
 * @member {module:model/VideoCodecSettingsAv1Settings} Av1Settings
 */
VideoCodecSettings.prototype['Av1Settings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsAvcIntraSettings} AvcIntraSettings
 */
VideoCodecSettings.prototype['AvcIntraSettings'] = undefined;

/**
 * @member {module:model/VideoCodec} Codec
 */
VideoCodecSettings.prototype['Codec'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsFrameCaptureSettings} FrameCaptureSettings
 */
VideoCodecSettings.prototype['FrameCaptureSettings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsH264Settings} H264Settings
 */
VideoCodecSettings.prototype['H264Settings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsH265Settings} H265Settings
 */
VideoCodecSettings.prototype['H265Settings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsMpeg2Settings} Mpeg2Settings
 */
VideoCodecSettings.prototype['Mpeg2Settings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsProresSettings} ProresSettings
 */
VideoCodecSettings.prototype['ProresSettings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsVc3Settings} Vc3Settings
 */
VideoCodecSettings.prototype['Vc3Settings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsVp8Settings} Vp8Settings
 */
VideoCodecSettings.prototype['Vp8Settings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsVp9Settings} Vp9Settings
 */
VideoCodecSettings.prototype['Vp9Settings'] = undefined;

/**
 * @member {module:model/VideoCodecSettingsXavcSettings} XavcSettings
 */
VideoCodecSettings.prototype['XavcSettings'] = undefined;






export default VideoCodecSettings;

