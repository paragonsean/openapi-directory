/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CmfcAudioDuration from './CmfcAudioDuration';
import Mp4CslgAtom from './Mp4CslgAtom';
import Mp4FreeSpaceBox from './Mp4FreeSpaceBox';
import Mp4MoovPlacement from './Mp4MoovPlacement';

/**
 * The Mp4Settings model module.
 * @module model/Mp4Settings
 * @version 2017-08-29
 */
class Mp4Settings {
    /**
     * Constructs a new <code>Mp4Settings</code>.
     * These settings relate to your MP4 output container. You can create audio only outputs with this container. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/supported-codecs-containers-audio-only.html#output-codecs-and-containers-supported-for-audio-only.
     * @alias module:model/Mp4Settings
     */
    constructor() { 
        
        Mp4Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Mp4Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mp4Settings} obj Optional instance to populate.
     * @return {module:model/Mp4Settings} The populated <code>Mp4Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mp4Settings();

            if (data.hasOwnProperty('AudioDuration')) {
                obj['AudioDuration'] = ApiClient.convertToType(data['AudioDuration'], CmfcAudioDuration);
            }
            if (data.hasOwnProperty('CslgAtom')) {
                obj['CslgAtom'] = ApiClient.convertToType(data['CslgAtom'], Mp4CslgAtom);
            }
            if (data.hasOwnProperty('CttsVersion')) {
                obj['CttsVersion'] = ApiClient.convertToType(data['CttsVersion'], 'Number');
            }
            if (data.hasOwnProperty('FreeSpaceBox')) {
                obj['FreeSpaceBox'] = ApiClient.convertToType(data['FreeSpaceBox'], Mp4FreeSpaceBox);
            }
            if (data.hasOwnProperty('MoovPlacement')) {
                obj['MoovPlacement'] = ApiClient.convertToType(data['MoovPlacement'], Mp4MoovPlacement);
            }
            if (data.hasOwnProperty('Mp4MajorBrand')) {
                obj['Mp4MajorBrand'] = ApiClient.convertToType(data['Mp4MajorBrand'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mp4Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mp4Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AudioDuration`
        if (data['AudioDuration']) { // data not null
          CmfcAudioDuration.validateJSON(data['AudioDuration']);
        }
        // validate the optional field `CslgAtom`
        if (data['CslgAtom']) { // data not null
          Mp4CslgAtom.validateJSON(data['CslgAtom']);
        }
        // validate the optional field `CttsVersion`
        if (data['CttsVersion']) { // data not null
          Number.validateJSON(data['CttsVersion']);
        }
        // validate the optional field `FreeSpaceBox`
        if (data['FreeSpaceBox']) { // data not null
          Mp4FreeSpaceBox.validateJSON(data['FreeSpaceBox']);
        }
        // validate the optional field `MoovPlacement`
        if (data['MoovPlacement']) { // data not null
          Mp4MoovPlacement.validateJSON(data['MoovPlacement']);
        }
        // validate the optional field `Mp4MajorBrand`
        if (data['Mp4MajorBrand']) { // data not null
          String.validateJSON(data['Mp4MajorBrand']);
        }

        return true;
    }


}



/**
 * @member {module:model/CmfcAudioDuration} AudioDuration
 */
Mp4Settings.prototype['AudioDuration'] = undefined;

/**
 * @member {module:model/Mp4CslgAtom} CslgAtom
 */
Mp4Settings.prototype['CslgAtom'] = undefined;

/**
 * @member {Number} CttsVersion
 */
Mp4Settings.prototype['CttsVersion'] = undefined;

/**
 * @member {module:model/Mp4FreeSpaceBox} FreeSpaceBox
 */
Mp4Settings.prototype['FreeSpaceBox'] = undefined;

/**
 * @member {module:model/Mp4MoovPlacement} MoovPlacement
 */
Mp4Settings.prototype['MoovPlacement'] = undefined;

/**
 * @member {String} Mp4MajorBrand
 */
Mp4Settings.prototype['Mp4MajorBrand'] = undefined;






export default Mp4Settings;

