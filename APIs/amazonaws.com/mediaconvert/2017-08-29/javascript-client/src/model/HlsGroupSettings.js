/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CmafGroupSettingsDestinationSettings from './CmafGroupSettingsDestinationSettings';
import HlsAudioOnlyHeader from './HlsAudioOnlyHeader';
import HlsCaptionLanguageSetting from './HlsCaptionLanguageSetting';
import HlsCaptionSegmentLengthControl from './HlsCaptionSegmentLengthControl';
import HlsClientCache from './HlsClientCache';
import HlsCodecSpecification from './HlsCodecSpecification';
import HlsDirectoryStructure from './HlsDirectoryStructure';
import HlsGroupSettingsEncryption from './HlsGroupSettingsEncryption';
import HlsGroupSettingsImageBasedTrickPlaySettings from './HlsGroupSettingsImageBasedTrickPlaySettings';
import HlsImageBasedTrickPlay from './HlsImageBasedTrickPlay';
import HlsManifestCompression from './HlsManifestCompression';
import HlsManifestDurationFormat from './HlsManifestDurationFormat';
import HlsOutputSelection from './HlsOutputSelection';
import HlsProgramDateTime from './HlsProgramDateTime';
import HlsProgressiveWriteHlsManifest from './HlsProgressiveWriteHlsManifest';
import HlsSegmentControl from './HlsSegmentControl';
import HlsSegmentLengthControl from './HlsSegmentLengthControl';
import HlsStreamInfResolution from './HlsStreamInfResolution';
import HlsTargetDurationCompatibilityMode from './HlsTargetDurationCompatibilityMode';
import HlsTimedMetadataId3Frame from './HlsTimedMetadataId3Frame';

/**
 * The HlsGroupSettings model module.
 * @module model/HlsGroupSettings
 * @version 2017-08-29
 */
class HlsGroupSettings {
    /**
     * Constructs a new <code>HlsGroupSettings</code>.
     * Settings related to your HLS output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
     * @alias module:model/HlsGroupSettings
     */
    constructor() { 
        
        HlsGroupSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HlsGroupSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HlsGroupSettings} obj Optional instance to populate.
     * @return {module:model/HlsGroupSettings} The populated <code>HlsGroupSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HlsGroupSettings();

            if (data.hasOwnProperty('AdMarkers')) {
                obj['AdMarkers'] = ApiClient.convertToType(data['AdMarkers'], Array);
            }
            if (data.hasOwnProperty('AdditionalManifests')) {
                obj['AdditionalManifests'] = ApiClient.convertToType(data['AdditionalManifests'], Array);
            }
            if (data.hasOwnProperty('AudioOnlyHeader')) {
                obj['AudioOnlyHeader'] = ApiClient.convertToType(data['AudioOnlyHeader'], HlsAudioOnlyHeader);
            }
            if (data.hasOwnProperty('BaseUrl')) {
                obj['BaseUrl'] = ApiClient.convertToType(data['BaseUrl'], 'String');
            }
            if (data.hasOwnProperty('CaptionLanguageMappings')) {
                obj['CaptionLanguageMappings'] = ApiClient.convertToType(data['CaptionLanguageMappings'], Array);
            }
            if (data.hasOwnProperty('CaptionLanguageSetting')) {
                obj['CaptionLanguageSetting'] = ApiClient.convertToType(data['CaptionLanguageSetting'], HlsCaptionLanguageSetting);
            }
            if (data.hasOwnProperty('CaptionSegmentLengthControl')) {
                obj['CaptionSegmentLengthControl'] = ApiClient.convertToType(data['CaptionSegmentLengthControl'], HlsCaptionSegmentLengthControl);
            }
            if (data.hasOwnProperty('ClientCache')) {
                obj['ClientCache'] = ApiClient.convertToType(data['ClientCache'], HlsClientCache);
            }
            if (data.hasOwnProperty('CodecSpecification')) {
                obj['CodecSpecification'] = ApiClient.convertToType(data['CodecSpecification'], HlsCodecSpecification);
            }
            if (data.hasOwnProperty('Destination')) {
                obj['Destination'] = ApiClient.convertToType(data['Destination'], 'String');
            }
            if (data.hasOwnProperty('DestinationSettings')) {
                obj['DestinationSettings'] = CmafGroupSettingsDestinationSettings.constructFromObject(data['DestinationSettings']);
            }
            if (data.hasOwnProperty('DirectoryStructure')) {
                obj['DirectoryStructure'] = ApiClient.convertToType(data['DirectoryStructure'], HlsDirectoryStructure);
            }
            if (data.hasOwnProperty('Encryption')) {
                obj['Encryption'] = HlsGroupSettingsEncryption.constructFromObject(data['Encryption']);
            }
            if (data.hasOwnProperty('ImageBasedTrickPlay')) {
                obj['ImageBasedTrickPlay'] = ApiClient.convertToType(data['ImageBasedTrickPlay'], HlsImageBasedTrickPlay);
            }
            if (data.hasOwnProperty('ImageBasedTrickPlaySettings')) {
                obj['ImageBasedTrickPlaySettings'] = HlsGroupSettingsImageBasedTrickPlaySettings.constructFromObject(data['ImageBasedTrickPlaySettings']);
            }
            if (data.hasOwnProperty('ManifestCompression')) {
                obj['ManifestCompression'] = ApiClient.convertToType(data['ManifestCompression'], HlsManifestCompression);
            }
            if (data.hasOwnProperty('ManifestDurationFormat')) {
                obj['ManifestDurationFormat'] = ApiClient.convertToType(data['ManifestDurationFormat'], HlsManifestDurationFormat);
            }
            if (data.hasOwnProperty('MinFinalSegmentLength')) {
                obj['MinFinalSegmentLength'] = ApiClient.convertToType(data['MinFinalSegmentLength'], 'Number');
            }
            if (data.hasOwnProperty('MinSegmentLength')) {
                obj['MinSegmentLength'] = ApiClient.convertToType(data['MinSegmentLength'], 'Number');
            }
            if (data.hasOwnProperty('OutputSelection')) {
                obj['OutputSelection'] = ApiClient.convertToType(data['OutputSelection'], HlsOutputSelection);
            }
            if (data.hasOwnProperty('ProgramDateTime')) {
                obj['ProgramDateTime'] = ApiClient.convertToType(data['ProgramDateTime'], HlsProgramDateTime);
            }
            if (data.hasOwnProperty('ProgramDateTimePeriod')) {
                obj['ProgramDateTimePeriod'] = ApiClient.convertToType(data['ProgramDateTimePeriod'], 'Number');
            }
            if (data.hasOwnProperty('ProgressiveWriteHlsManifest')) {
                obj['ProgressiveWriteHlsManifest'] = ApiClient.convertToType(data['ProgressiveWriteHlsManifest'], HlsProgressiveWriteHlsManifest);
            }
            if (data.hasOwnProperty('SegmentControl')) {
                obj['SegmentControl'] = ApiClient.convertToType(data['SegmentControl'], HlsSegmentControl);
            }
            if (data.hasOwnProperty('SegmentLength')) {
                obj['SegmentLength'] = ApiClient.convertToType(data['SegmentLength'], 'Number');
            }
            if (data.hasOwnProperty('SegmentLengthControl')) {
                obj['SegmentLengthControl'] = ApiClient.convertToType(data['SegmentLengthControl'], HlsSegmentLengthControl);
            }
            if (data.hasOwnProperty('SegmentsPerSubdirectory')) {
                obj['SegmentsPerSubdirectory'] = ApiClient.convertToType(data['SegmentsPerSubdirectory'], 'Number');
            }
            if (data.hasOwnProperty('StreamInfResolution')) {
                obj['StreamInfResolution'] = ApiClient.convertToType(data['StreamInfResolution'], HlsStreamInfResolution);
            }
            if (data.hasOwnProperty('TargetDurationCompatibilityMode')) {
                obj['TargetDurationCompatibilityMode'] = ApiClient.convertToType(data['TargetDurationCompatibilityMode'], HlsTargetDurationCompatibilityMode);
            }
            if (data.hasOwnProperty('TimedMetadataId3Frame')) {
                obj['TimedMetadataId3Frame'] = ApiClient.convertToType(data['TimedMetadataId3Frame'], HlsTimedMetadataId3Frame);
            }
            if (data.hasOwnProperty('TimedMetadataId3Period')) {
                obj['TimedMetadataId3Period'] = ApiClient.convertToType(data['TimedMetadataId3Period'], 'Number');
            }
            if (data.hasOwnProperty('TimestampDeltaMilliseconds')) {
                obj['TimestampDeltaMilliseconds'] = ApiClient.convertToType(data['TimestampDeltaMilliseconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HlsGroupSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HlsGroupSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AdMarkers`
        if (data['AdMarkers']) { // data not null
          Array.validateJSON(data['AdMarkers']);
        }
        // validate the optional field `AdditionalManifests`
        if (data['AdditionalManifests']) { // data not null
          Array.validateJSON(data['AdditionalManifests']);
        }
        // validate the optional field `AudioOnlyHeader`
        if (data['AudioOnlyHeader']) { // data not null
          HlsAudioOnlyHeader.validateJSON(data['AudioOnlyHeader']);
        }
        // validate the optional field `BaseUrl`
        if (data['BaseUrl']) { // data not null
          String.validateJSON(data['BaseUrl']);
        }
        // validate the optional field `CaptionLanguageMappings`
        if (data['CaptionLanguageMappings']) { // data not null
          Array.validateJSON(data['CaptionLanguageMappings']);
        }
        // validate the optional field `CaptionLanguageSetting`
        if (data['CaptionLanguageSetting']) { // data not null
          HlsCaptionLanguageSetting.validateJSON(data['CaptionLanguageSetting']);
        }
        // validate the optional field `CaptionSegmentLengthControl`
        if (data['CaptionSegmentLengthControl']) { // data not null
          HlsCaptionSegmentLengthControl.validateJSON(data['CaptionSegmentLengthControl']);
        }
        // validate the optional field `ClientCache`
        if (data['ClientCache']) { // data not null
          HlsClientCache.validateJSON(data['ClientCache']);
        }
        // validate the optional field `CodecSpecification`
        if (data['CodecSpecification']) { // data not null
          HlsCodecSpecification.validateJSON(data['CodecSpecification']);
        }
        // validate the optional field `Destination`
        if (data['Destination']) { // data not null
          String.validateJSON(data['Destination']);
        }
        // validate the optional field `DestinationSettings`
        if (data['DestinationSettings']) { // data not null
          CmafGroupSettingsDestinationSettings.validateJSON(data['DestinationSettings']);
        }
        // validate the optional field `DirectoryStructure`
        if (data['DirectoryStructure']) { // data not null
          HlsDirectoryStructure.validateJSON(data['DirectoryStructure']);
        }
        // validate the optional field `Encryption`
        if (data['Encryption']) { // data not null
          HlsGroupSettingsEncryption.validateJSON(data['Encryption']);
        }
        // validate the optional field `ImageBasedTrickPlay`
        if (data['ImageBasedTrickPlay']) { // data not null
          HlsImageBasedTrickPlay.validateJSON(data['ImageBasedTrickPlay']);
        }
        // validate the optional field `ImageBasedTrickPlaySettings`
        if (data['ImageBasedTrickPlaySettings']) { // data not null
          HlsGroupSettingsImageBasedTrickPlaySettings.validateJSON(data['ImageBasedTrickPlaySettings']);
        }
        // validate the optional field `ManifestCompression`
        if (data['ManifestCompression']) { // data not null
          HlsManifestCompression.validateJSON(data['ManifestCompression']);
        }
        // validate the optional field `ManifestDurationFormat`
        if (data['ManifestDurationFormat']) { // data not null
          HlsManifestDurationFormat.validateJSON(data['ManifestDurationFormat']);
        }
        // validate the optional field `MinFinalSegmentLength`
        if (data['MinFinalSegmentLength']) { // data not null
          Number.validateJSON(data['MinFinalSegmentLength']);
        }
        // validate the optional field `MinSegmentLength`
        if (data['MinSegmentLength']) { // data not null
          Number.validateJSON(data['MinSegmentLength']);
        }
        // validate the optional field `OutputSelection`
        if (data['OutputSelection']) { // data not null
          HlsOutputSelection.validateJSON(data['OutputSelection']);
        }
        // validate the optional field `ProgramDateTime`
        if (data['ProgramDateTime']) { // data not null
          HlsProgramDateTime.validateJSON(data['ProgramDateTime']);
        }
        // validate the optional field `ProgramDateTimePeriod`
        if (data['ProgramDateTimePeriod']) { // data not null
          Number.validateJSON(data['ProgramDateTimePeriod']);
        }
        // validate the optional field `ProgressiveWriteHlsManifest`
        if (data['ProgressiveWriteHlsManifest']) { // data not null
          HlsProgressiveWriteHlsManifest.validateJSON(data['ProgressiveWriteHlsManifest']);
        }
        // validate the optional field `SegmentControl`
        if (data['SegmentControl']) { // data not null
          HlsSegmentControl.validateJSON(data['SegmentControl']);
        }
        // validate the optional field `SegmentLength`
        if (data['SegmentLength']) { // data not null
          Number.validateJSON(data['SegmentLength']);
        }
        // validate the optional field `SegmentLengthControl`
        if (data['SegmentLengthControl']) { // data not null
          HlsSegmentLengthControl.validateJSON(data['SegmentLengthControl']);
        }
        // validate the optional field `SegmentsPerSubdirectory`
        if (data['SegmentsPerSubdirectory']) { // data not null
          Number.validateJSON(data['SegmentsPerSubdirectory']);
        }
        // validate the optional field `StreamInfResolution`
        if (data['StreamInfResolution']) { // data not null
          HlsStreamInfResolution.validateJSON(data['StreamInfResolution']);
        }
        // validate the optional field `TargetDurationCompatibilityMode`
        if (data['TargetDurationCompatibilityMode']) { // data not null
          HlsTargetDurationCompatibilityMode.validateJSON(data['TargetDurationCompatibilityMode']);
        }
        // validate the optional field `TimedMetadataId3Frame`
        if (data['TimedMetadataId3Frame']) { // data not null
          HlsTimedMetadataId3Frame.validateJSON(data['TimedMetadataId3Frame']);
        }
        // validate the optional field `TimedMetadataId3Period`
        if (data['TimedMetadataId3Period']) { // data not null
          Number.validateJSON(data['TimedMetadataId3Period']);
        }
        // validate the optional field `TimestampDeltaMilliseconds`
        if (data['TimestampDeltaMilliseconds']) { // data not null
          Number.validateJSON(data['TimestampDeltaMilliseconds']);
        }

        return true;
    }


}



/**
 * @member {Array} AdMarkers
 */
HlsGroupSettings.prototype['AdMarkers'] = undefined;

/**
 * @member {Array} AdditionalManifests
 */
HlsGroupSettings.prototype['AdditionalManifests'] = undefined;

/**
 * @member {module:model/HlsAudioOnlyHeader} AudioOnlyHeader
 */
HlsGroupSettings.prototype['AudioOnlyHeader'] = undefined;

/**
 * @member {String} BaseUrl
 */
HlsGroupSettings.prototype['BaseUrl'] = undefined;

/**
 * @member {Array} CaptionLanguageMappings
 */
HlsGroupSettings.prototype['CaptionLanguageMappings'] = undefined;

/**
 * @member {module:model/HlsCaptionLanguageSetting} CaptionLanguageSetting
 */
HlsGroupSettings.prototype['CaptionLanguageSetting'] = undefined;

/**
 * @member {module:model/HlsCaptionSegmentLengthControl} CaptionSegmentLengthControl
 */
HlsGroupSettings.prototype['CaptionSegmentLengthControl'] = undefined;

/**
 * @member {module:model/HlsClientCache} ClientCache
 */
HlsGroupSettings.prototype['ClientCache'] = undefined;

/**
 * @member {module:model/HlsCodecSpecification} CodecSpecification
 */
HlsGroupSettings.prototype['CodecSpecification'] = undefined;

/**
 * @member {String} Destination
 */
HlsGroupSettings.prototype['Destination'] = undefined;

/**
 * @member {module:model/CmafGroupSettingsDestinationSettings} DestinationSettings
 */
HlsGroupSettings.prototype['DestinationSettings'] = undefined;

/**
 * @member {module:model/HlsDirectoryStructure} DirectoryStructure
 */
HlsGroupSettings.prototype['DirectoryStructure'] = undefined;

/**
 * @member {module:model/HlsGroupSettingsEncryption} Encryption
 */
HlsGroupSettings.prototype['Encryption'] = undefined;

/**
 * @member {module:model/HlsImageBasedTrickPlay} ImageBasedTrickPlay
 */
HlsGroupSettings.prototype['ImageBasedTrickPlay'] = undefined;

/**
 * @member {module:model/HlsGroupSettingsImageBasedTrickPlaySettings} ImageBasedTrickPlaySettings
 */
HlsGroupSettings.prototype['ImageBasedTrickPlaySettings'] = undefined;

/**
 * @member {module:model/HlsManifestCompression} ManifestCompression
 */
HlsGroupSettings.prototype['ManifestCompression'] = undefined;

/**
 * @member {module:model/HlsManifestDurationFormat} ManifestDurationFormat
 */
HlsGroupSettings.prototype['ManifestDurationFormat'] = undefined;

/**
 * @member {Number} MinFinalSegmentLength
 */
HlsGroupSettings.prototype['MinFinalSegmentLength'] = undefined;

/**
 * @member {Number} MinSegmentLength
 */
HlsGroupSettings.prototype['MinSegmentLength'] = undefined;

/**
 * @member {module:model/HlsOutputSelection} OutputSelection
 */
HlsGroupSettings.prototype['OutputSelection'] = undefined;

/**
 * @member {module:model/HlsProgramDateTime} ProgramDateTime
 */
HlsGroupSettings.prototype['ProgramDateTime'] = undefined;

/**
 * @member {Number} ProgramDateTimePeriod
 */
HlsGroupSettings.prototype['ProgramDateTimePeriod'] = undefined;

/**
 * @member {module:model/HlsProgressiveWriteHlsManifest} ProgressiveWriteHlsManifest
 */
HlsGroupSettings.prototype['ProgressiveWriteHlsManifest'] = undefined;

/**
 * @member {module:model/HlsSegmentControl} SegmentControl
 */
HlsGroupSettings.prototype['SegmentControl'] = undefined;

/**
 * @member {Number} SegmentLength
 */
HlsGroupSettings.prototype['SegmentLength'] = undefined;

/**
 * @member {module:model/HlsSegmentLengthControl} SegmentLengthControl
 */
HlsGroupSettings.prototype['SegmentLengthControl'] = undefined;

/**
 * @member {Number} SegmentsPerSubdirectory
 */
HlsGroupSettings.prototype['SegmentsPerSubdirectory'] = undefined;

/**
 * @member {module:model/HlsStreamInfResolution} StreamInfResolution
 */
HlsGroupSettings.prototype['StreamInfResolution'] = undefined;

/**
 * @member {module:model/HlsTargetDurationCompatibilityMode} TargetDurationCompatibilityMode
 */
HlsGroupSettings.prototype['TargetDurationCompatibilityMode'] = undefined;

/**
 * @member {module:model/HlsTimedMetadataId3Frame} TimedMetadataId3Frame
 */
HlsGroupSettings.prototype['TimedMetadataId3Frame'] = undefined;

/**
 * @member {Number} TimedMetadataId3Period
 */
HlsGroupSettings.prototype['TimedMetadataId3Period'] = undefined;

/**
 * @member {Number} TimestampDeltaMilliseconds
 */
HlsGroupSettings.prototype['TimestampDeltaMilliseconds'] = undefined;






export default HlsGroupSettings;

