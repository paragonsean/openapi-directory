/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NielsenActiveWatermarkProcessType from './NielsenActiveWatermarkProcessType';
import NielsenSourceWatermarkStatusType from './NielsenSourceWatermarkStatusType';
import NielsenUniqueTicPerAudioTrackType from './NielsenUniqueTicPerAudioTrackType';

/**
 * The NielsenNonLinearWatermarkSettings model module.
 * @module model/NielsenNonLinearWatermarkSettings
 * @version 2017-08-29
 */
class NielsenNonLinearWatermarkSettings {
    /**
     * Constructs a new <code>NielsenNonLinearWatermarkSettings</code>.
     * Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to specifying these values, you also need to set up your cloud TIC server. These settings apply to every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
     * @alias module:model/NielsenNonLinearWatermarkSettings
     */
    constructor() { 
        
        NielsenNonLinearWatermarkSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NielsenNonLinearWatermarkSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NielsenNonLinearWatermarkSettings} obj Optional instance to populate.
     * @return {module:model/NielsenNonLinearWatermarkSettings} The populated <code>NielsenNonLinearWatermarkSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NielsenNonLinearWatermarkSettings();

            if (data.hasOwnProperty('ActiveWatermarkProcess')) {
                obj['ActiveWatermarkProcess'] = ApiClient.convertToType(data['ActiveWatermarkProcess'], NielsenActiveWatermarkProcessType);
            }
            if (data.hasOwnProperty('AdiFilename')) {
                obj['AdiFilename'] = ApiClient.convertToType(data['AdiFilename'], 'String');
            }
            if (data.hasOwnProperty('AssetId')) {
                obj['AssetId'] = ApiClient.convertToType(data['AssetId'], 'String');
            }
            if (data.hasOwnProperty('AssetName')) {
                obj['AssetName'] = ApiClient.convertToType(data['AssetName'], 'String');
            }
            if (data.hasOwnProperty('CbetSourceId')) {
                obj['CbetSourceId'] = ApiClient.convertToType(data['CbetSourceId'], 'String');
            }
            if (data.hasOwnProperty('EpisodeId')) {
                obj['EpisodeId'] = ApiClient.convertToType(data['EpisodeId'], 'String');
            }
            if (data.hasOwnProperty('MetadataDestination')) {
                obj['MetadataDestination'] = ApiClient.convertToType(data['MetadataDestination'], 'String');
            }
            if (data.hasOwnProperty('SourceId')) {
                obj['SourceId'] = ApiClient.convertToType(data['SourceId'], 'Number');
            }
            if (data.hasOwnProperty('SourceWatermarkStatus')) {
                obj['SourceWatermarkStatus'] = ApiClient.convertToType(data['SourceWatermarkStatus'], NielsenSourceWatermarkStatusType);
            }
            if (data.hasOwnProperty('TicServerUrl')) {
                obj['TicServerUrl'] = ApiClient.convertToType(data['TicServerUrl'], 'String');
            }
            if (data.hasOwnProperty('UniqueTicPerAudioTrack')) {
                obj['UniqueTicPerAudioTrack'] = ApiClient.convertToType(data['UniqueTicPerAudioTrack'], NielsenUniqueTicPerAudioTrackType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NielsenNonLinearWatermarkSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NielsenNonLinearWatermarkSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ActiveWatermarkProcess`
        if (data['ActiveWatermarkProcess']) { // data not null
          NielsenActiveWatermarkProcessType.validateJSON(data['ActiveWatermarkProcess']);
        }
        // validate the optional field `AdiFilename`
        if (data['AdiFilename']) { // data not null
          String.validateJSON(data['AdiFilename']);
        }
        // validate the optional field `AssetId`
        if (data['AssetId']) { // data not null
          String.validateJSON(data['AssetId']);
        }
        // validate the optional field `AssetName`
        if (data['AssetName']) { // data not null
          String.validateJSON(data['AssetName']);
        }
        // validate the optional field `CbetSourceId`
        if (data['CbetSourceId']) { // data not null
          String.validateJSON(data['CbetSourceId']);
        }
        // validate the optional field `EpisodeId`
        if (data['EpisodeId']) { // data not null
          String.validateJSON(data['EpisodeId']);
        }
        // validate the optional field `MetadataDestination`
        if (data['MetadataDestination']) { // data not null
          String.validateJSON(data['MetadataDestination']);
        }
        // validate the optional field `SourceId`
        if (data['SourceId']) { // data not null
          Number.validateJSON(data['SourceId']);
        }
        // validate the optional field `SourceWatermarkStatus`
        if (data['SourceWatermarkStatus']) { // data not null
          NielsenSourceWatermarkStatusType.validateJSON(data['SourceWatermarkStatus']);
        }
        // validate the optional field `TicServerUrl`
        if (data['TicServerUrl']) { // data not null
          String.validateJSON(data['TicServerUrl']);
        }
        // validate the optional field `UniqueTicPerAudioTrack`
        if (data['UniqueTicPerAudioTrack']) { // data not null
          NielsenUniqueTicPerAudioTrackType.validateJSON(data['UniqueTicPerAudioTrack']);
        }

        return true;
    }


}



/**
 * @member {module:model/NielsenActiveWatermarkProcessType} ActiveWatermarkProcess
 */
NielsenNonLinearWatermarkSettings.prototype['ActiveWatermarkProcess'] = undefined;

/**
 * @member {String} AdiFilename
 */
NielsenNonLinearWatermarkSettings.prototype['AdiFilename'] = undefined;

/**
 * @member {String} AssetId
 */
NielsenNonLinearWatermarkSettings.prototype['AssetId'] = undefined;

/**
 * @member {String} AssetName
 */
NielsenNonLinearWatermarkSettings.prototype['AssetName'] = undefined;

/**
 * @member {String} CbetSourceId
 */
NielsenNonLinearWatermarkSettings.prototype['CbetSourceId'] = undefined;

/**
 * @member {String} EpisodeId
 */
NielsenNonLinearWatermarkSettings.prototype['EpisodeId'] = undefined;

/**
 * @member {String} MetadataDestination
 */
NielsenNonLinearWatermarkSettings.prototype['MetadataDestination'] = undefined;

/**
 * @member {Number} SourceId
 */
NielsenNonLinearWatermarkSettings.prototype['SourceId'] = undefined;

/**
 * @member {module:model/NielsenSourceWatermarkStatusType} SourceWatermarkStatus
 */
NielsenNonLinearWatermarkSettings.prototype['SourceWatermarkStatus'] = undefined;

/**
 * @member {String} TicServerUrl
 */
NielsenNonLinearWatermarkSettings.prototype['TicServerUrl'] = undefined;

/**
 * @member {module:model/NielsenUniqueTicPerAudioTrackType} UniqueTicPerAudioTrack
 */
NielsenNonLinearWatermarkSettings.prototype['UniqueTicPerAudioTrack'] = undefined;






export default NielsenNonLinearWatermarkSettings;

