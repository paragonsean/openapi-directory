/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlphaBehavior from './AlphaBehavior';
import ColorSpace from './ColorSpace';
import ColorSpaceUsage from './ColorSpaceUsage';
import EmbeddedTimecodeOverride from './EmbeddedTimecodeOverride';
import InputRotate from './InputRotate';
import InputSampleRange from './InputSampleRange';
import PadVideo from './PadVideo';
import VideoSelector from './VideoSelector';
import VideoSelectorHdr10Metadata from './VideoSelectorHdr10Metadata';

/**
 * The InputVideoSelector model module.
 * @module model/InputVideoSelector
 * @version 2017-08-29
 */
class InputVideoSelector {
    /**
     * Constructs a new <code>InputVideoSelector</code>.
     * @alias module:model/InputVideoSelector
     * @implements module:model/VideoSelector
     */
    constructor() { 
        VideoSelector.initialize(this);
        InputVideoSelector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InputVideoSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputVideoSelector} obj Optional instance to populate.
     * @return {module:model/InputVideoSelector} The populated <code>InputVideoSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputVideoSelector();
            VideoSelector.constructFromObject(data, obj);

            if (data.hasOwnProperty('AlphaBehavior')) {
                obj['AlphaBehavior'] = ApiClient.convertToType(data['AlphaBehavior'], AlphaBehavior);
            }
            if (data.hasOwnProperty('ColorSpace')) {
                obj['ColorSpace'] = ApiClient.convertToType(data['ColorSpace'], ColorSpace);
            }
            if (data.hasOwnProperty('ColorSpaceUsage')) {
                obj['ColorSpaceUsage'] = ApiClient.convertToType(data['ColorSpaceUsage'], ColorSpaceUsage);
            }
            if (data.hasOwnProperty('EmbeddedTimecodeOverride')) {
                obj['EmbeddedTimecodeOverride'] = ApiClient.convertToType(data['EmbeddedTimecodeOverride'], EmbeddedTimecodeOverride);
            }
            if (data.hasOwnProperty('Hdr10Metadata')) {
                obj['Hdr10Metadata'] = VideoSelectorHdr10Metadata.constructFromObject(data['Hdr10Metadata']);
            }
            if (data.hasOwnProperty('PadVideo')) {
                obj['PadVideo'] = ApiClient.convertToType(data['PadVideo'], PadVideo);
            }
            if (data.hasOwnProperty('Pid')) {
                obj['Pid'] = ApiClient.convertToType(data['Pid'], 'Number');
            }
            if (data.hasOwnProperty('ProgramNumber')) {
                obj['ProgramNumber'] = ApiClient.convertToType(data['ProgramNumber'], 'Number');
            }
            if (data.hasOwnProperty('Rotate')) {
                obj['Rotate'] = ApiClient.convertToType(data['Rotate'], InputRotate);
            }
            if (data.hasOwnProperty('SampleRange')) {
                obj['SampleRange'] = ApiClient.convertToType(data['SampleRange'], InputSampleRange);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputVideoSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputVideoSelector</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AlphaBehavior`
        if (data['AlphaBehavior']) { // data not null
          AlphaBehavior.validateJSON(data['AlphaBehavior']);
        }
        // validate the optional field `ColorSpace`
        if (data['ColorSpace']) { // data not null
          ColorSpace.validateJSON(data['ColorSpace']);
        }
        // validate the optional field `ColorSpaceUsage`
        if (data['ColorSpaceUsage']) { // data not null
          ColorSpaceUsage.validateJSON(data['ColorSpaceUsage']);
        }
        // validate the optional field `EmbeddedTimecodeOverride`
        if (data['EmbeddedTimecodeOverride']) { // data not null
          EmbeddedTimecodeOverride.validateJSON(data['EmbeddedTimecodeOverride']);
        }
        // validate the optional field `Hdr10Metadata`
        if (data['Hdr10Metadata']) { // data not null
          VideoSelectorHdr10Metadata.validateJSON(data['Hdr10Metadata']);
        }
        // validate the optional field `PadVideo`
        if (data['PadVideo']) { // data not null
          PadVideo.validateJSON(data['PadVideo']);
        }
        // validate the optional field `Pid`
        if (data['Pid']) { // data not null
          Number.validateJSON(data['Pid']);
        }
        // validate the optional field `ProgramNumber`
        if (data['ProgramNumber']) { // data not null
          Number.validateJSON(data['ProgramNumber']);
        }
        // validate the optional field `Rotate`
        if (data['Rotate']) { // data not null
          InputRotate.validateJSON(data['Rotate']);
        }
        // validate the optional field `SampleRange`
        if (data['SampleRange']) { // data not null
          InputSampleRange.validateJSON(data['SampleRange']);
        }

        return true;
    }


}



/**
 * @member {module:model/AlphaBehavior} AlphaBehavior
 */
InputVideoSelector.prototype['AlphaBehavior'] = undefined;

/**
 * @member {module:model/ColorSpace} ColorSpace
 */
InputVideoSelector.prototype['ColorSpace'] = undefined;

/**
 * @member {module:model/ColorSpaceUsage} ColorSpaceUsage
 */
InputVideoSelector.prototype['ColorSpaceUsage'] = undefined;

/**
 * @member {module:model/EmbeddedTimecodeOverride} EmbeddedTimecodeOverride
 */
InputVideoSelector.prototype['EmbeddedTimecodeOverride'] = undefined;

/**
 * @member {module:model/VideoSelectorHdr10Metadata} Hdr10Metadata
 */
InputVideoSelector.prototype['Hdr10Metadata'] = undefined;

/**
 * @member {module:model/PadVideo} PadVideo
 */
InputVideoSelector.prototype['PadVideo'] = undefined;

/**
 * @member {Number} Pid
 */
InputVideoSelector.prototype['Pid'] = undefined;

/**
 * @member {Number} ProgramNumber
 */
InputVideoSelector.prototype['ProgramNumber'] = undefined;

/**
 * @member {module:model/InputRotate} Rotate
 */
InputVideoSelector.prototype['Rotate'] = undefined;

/**
 * @member {module:model/InputSampleRange} SampleRange
 */
InputVideoSelector.prototype['SampleRange'] = undefined;


// Implement VideoSelector interface:
/**
 * @member {module:model/AlphaBehavior} AlphaBehavior
 */
VideoSelector.prototype['AlphaBehavior'] = undefined;
/**
 * @member {module:model/ColorSpace} ColorSpace
 */
VideoSelector.prototype['ColorSpace'] = undefined;
/**
 * @member {module:model/ColorSpaceUsage} ColorSpaceUsage
 */
VideoSelector.prototype['ColorSpaceUsage'] = undefined;
/**
 * @member {module:model/EmbeddedTimecodeOverride} EmbeddedTimecodeOverride
 */
VideoSelector.prototype['EmbeddedTimecodeOverride'] = undefined;
/**
 * @member {module:model/VideoSelectorHdr10Metadata} Hdr10Metadata
 */
VideoSelector.prototype['Hdr10Metadata'] = undefined;
/**
 * @member {module:model/PadVideo} PadVideo
 */
VideoSelector.prototype['PadVideo'] = undefined;
/**
 * @member {Number} Pid
 */
VideoSelector.prototype['Pid'] = undefined;
/**
 * @member {Number} ProgramNumber
 */
VideoSelector.prototype['ProgramNumber'] = undefined;
/**
 * @member {module:model/InputRotate} Rotate
 */
VideoSelector.prototype['Rotate'] = undefined;
/**
 * @member {module:model/InputSampleRange} SampleRange
 */
VideoSelector.prototype['SampleRange'] = undefined;




export default InputVideoSelector;

