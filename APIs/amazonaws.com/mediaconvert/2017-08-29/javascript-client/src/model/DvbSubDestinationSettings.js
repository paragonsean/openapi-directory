/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DvbSubSubtitleFallbackFont from './DvbSubSubtitleFallbackFont';
import DvbSubtitleAlignment from './DvbSubtitleAlignment';
import DvbSubtitleApplyFontColor from './DvbSubtitleApplyFontColor';
import DvbSubtitleBackgroundColor from './DvbSubtitleBackgroundColor';
import DvbSubtitleFontColor from './DvbSubtitleFontColor';
import DvbSubtitleOutlineColor from './DvbSubtitleOutlineColor';
import DvbSubtitleShadowColor from './DvbSubtitleShadowColor';
import DvbSubtitleStylePassthrough from './DvbSubtitleStylePassthrough';
import DvbSubtitleTeletextSpacing from './DvbSubtitleTeletextSpacing';
import DvbSubtitlingType from './DvbSubtitlingType';
import DvbddsHandling from './DvbddsHandling';
import FontScript from './FontScript';

/**
 * The DvbSubDestinationSettings model module.
 * @module model/DvbSubDestinationSettings
 * @version 2017-08-29
 */
class DvbSubDestinationSettings {
    /**
     * Constructs a new <code>DvbSubDestinationSettings</code>.
     * Settings related to DVB-Sub captions. Set up DVB-Sub captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/dvb-sub-output-captions.html.
     * @alias module:model/DvbSubDestinationSettings
     */
    constructor() { 
        
        DvbSubDestinationSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DvbSubDestinationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DvbSubDestinationSettings} obj Optional instance to populate.
     * @return {module:model/DvbSubDestinationSettings} The populated <code>DvbSubDestinationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DvbSubDestinationSettings();

            if (data.hasOwnProperty('Alignment')) {
                obj['Alignment'] = ApiClient.convertToType(data['Alignment'], DvbSubtitleAlignment);
            }
            if (data.hasOwnProperty('ApplyFontColor')) {
                obj['ApplyFontColor'] = ApiClient.convertToType(data['ApplyFontColor'], DvbSubtitleApplyFontColor);
            }
            if (data.hasOwnProperty('BackgroundColor')) {
                obj['BackgroundColor'] = ApiClient.convertToType(data['BackgroundColor'], DvbSubtitleBackgroundColor);
            }
            if (data.hasOwnProperty('BackgroundOpacity')) {
                obj['BackgroundOpacity'] = ApiClient.convertToType(data['BackgroundOpacity'], 'Number');
            }
            if (data.hasOwnProperty('DdsHandling')) {
                obj['DdsHandling'] = ApiClient.convertToType(data['DdsHandling'], DvbddsHandling);
            }
            if (data.hasOwnProperty('DdsXCoordinate')) {
                obj['DdsXCoordinate'] = ApiClient.convertToType(data['DdsXCoordinate'], 'Number');
            }
            if (data.hasOwnProperty('DdsYCoordinate')) {
                obj['DdsYCoordinate'] = ApiClient.convertToType(data['DdsYCoordinate'], 'Number');
            }
            if (data.hasOwnProperty('FallbackFont')) {
                obj['FallbackFont'] = ApiClient.convertToType(data['FallbackFont'], DvbSubSubtitleFallbackFont);
            }
            if (data.hasOwnProperty('FontColor')) {
                obj['FontColor'] = ApiClient.convertToType(data['FontColor'], DvbSubtitleFontColor);
            }
            if (data.hasOwnProperty('FontOpacity')) {
                obj['FontOpacity'] = ApiClient.convertToType(data['FontOpacity'], 'Number');
            }
            if (data.hasOwnProperty('FontResolution')) {
                obj['FontResolution'] = ApiClient.convertToType(data['FontResolution'], 'Number');
            }
            if (data.hasOwnProperty('FontScript')) {
                obj['FontScript'] = ApiClient.convertToType(data['FontScript'], FontScript);
            }
            if (data.hasOwnProperty('FontSize')) {
                obj['FontSize'] = ApiClient.convertToType(data['FontSize'], 'Number');
            }
            if (data.hasOwnProperty('Height')) {
                obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
            }
            if (data.hasOwnProperty('HexFontColor')) {
                obj['HexFontColor'] = ApiClient.convertToType(data['HexFontColor'], 'String');
            }
            if (data.hasOwnProperty('OutlineColor')) {
                obj['OutlineColor'] = ApiClient.convertToType(data['OutlineColor'], DvbSubtitleOutlineColor);
            }
            if (data.hasOwnProperty('OutlineSize')) {
                obj['OutlineSize'] = ApiClient.convertToType(data['OutlineSize'], 'Number');
            }
            if (data.hasOwnProperty('ShadowColor')) {
                obj['ShadowColor'] = ApiClient.convertToType(data['ShadowColor'], DvbSubtitleShadowColor);
            }
            if (data.hasOwnProperty('ShadowOpacity')) {
                obj['ShadowOpacity'] = ApiClient.convertToType(data['ShadowOpacity'], 'Number');
            }
            if (data.hasOwnProperty('ShadowXOffset')) {
                obj['ShadowXOffset'] = ApiClient.convertToType(data['ShadowXOffset'], 'Number');
            }
            if (data.hasOwnProperty('ShadowYOffset')) {
                obj['ShadowYOffset'] = ApiClient.convertToType(data['ShadowYOffset'], 'Number');
            }
            if (data.hasOwnProperty('StylePassthrough')) {
                obj['StylePassthrough'] = ApiClient.convertToType(data['StylePassthrough'], DvbSubtitleStylePassthrough);
            }
            if (data.hasOwnProperty('SubtitlingType')) {
                obj['SubtitlingType'] = ApiClient.convertToType(data['SubtitlingType'], DvbSubtitlingType);
            }
            if (data.hasOwnProperty('TeletextSpacing')) {
                obj['TeletextSpacing'] = ApiClient.convertToType(data['TeletextSpacing'], DvbSubtitleTeletextSpacing);
            }
            if (data.hasOwnProperty('Width')) {
                obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
            }
            if (data.hasOwnProperty('XPosition')) {
                obj['XPosition'] = ApiClient.convertToType(data['XPosition'], 'Number');
            }
            if (data.hasOwnProperty('YPosition')) {
                obj['YPosition'] = ApiClient.convertToType(data['YPosition'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DvbSubDestinationSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DvbSubDestinationSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Alignment`
        if (data['Alignment']) { // data not null
          DvbSubtitleAlignment.validateJSON(data['Alignment']);
        }
        // validate the optional field `ApplyFontColor`
        if (data['ApplyFontColor']) { // data not null
          DvbSubtitleApplyFontColor.validateJSON(data['ApplyFontColor']);
        }
        // validate the optional field `BackgroundColor`
        if (data['BackgroundColor']) { // data not null
          DvbSubtitleBackgroundColor.validateJSON(data['BackgroundColor']);
        }
        // validate the optional field `BackgroundOpacity`
        if (data['BackgroundOpacity']) { // data not null
          Number.validateJSON(data['BackgroundOpacity']);
        }
        // validate the optional field `DdsHandling`
        if (data['DdsHandling']) { // data not null
          DvbddsHandling.validateJSON(data['DdsHandling']);
        }
        // validate the optional field `DdsXCoordinate`
        if (data['DdsXCoordinate']) { // data not null
          Number.validateJSON(data['DdsXCoordinate']);
        }
        // validate the optional field `DdsYCoordinate`
        if (data['DdsYCoordinate']) { // data not null
          Number.validateJSON(data['DdsYCoordinate']);
        }
        // validate the optional field `FallbackFont`
        if (data['FallbackFont']) { // data not null
          DvbSubSubtitleFallbackFont.validateJSON(data['FallbackFont']);
        }
        // validate the optional field `FontColor`
        if (data['FontColor']) { // data not null
          DvbSubtitleFontColor.validateJSON(data['FontColor']);
        }
        // validate the optional field `FontOpacity`
        if (data['FontOpacity']) { // data not null
          Number.validateJSON(data['FontOpacity']);
        }
        // validate the optional field `FontResolution`
        if (data['FontResolution']) { // data not null
          Number.validateJSON(data['FontResolution']);
        }
        // validate the optional field `FontScript`
        if (data['FontScript']) { // data not null
          FontScript.validateJSON(data['FontScript']);
        }
        // validate the optional field `FontSize`
        if (data['FontSize']) { // data not null
          Number.validateJSON(data['FontSize']);
        }
        // validate the optional field `Height`
        if (data['Height']) { // data not null
          Number.validateJSON(data['Height']);
        }
        // validate the optional field `HexFontColor`
        if (data['HexFontColor']) { // data not null
          String.validateJSON(data['HexFontColor']);
        }
        // validate the optional field `OutlineColor`
        if (data['OutlineColor']) { // data not null
          DvbSubtitleOutlineColor.validateJSON(data['OutlineColor']);
        }
        // validate the optional field `OutlineSize`
        if (data['OutlineSize']) { // data not null
          Number.validateJSON(data['OutlineSize']);
        }
        // validate the optional field `ShadowColor`
        if (data['ShadowColor']) { // data not null
          DvbSubtitleShadowColor.validateJSON(data['ShadowColor']);
        }
        // validate the optional field `ShadowOpacity`
        if (data['ShadowOpacity']) { // data not null
          Number.validateJSON(data['ShadowOpacity']);
        }
        // validate the optional field `ShadowXOffset`
        if (data['ShadowXOffset']) { // data not null
          Number.validateJSON(data['ShadowXOffset']);
        }
        // validate the optional field `ShadowYOffset`
        if (data['ShadowYOffset']) { // data not null
          Number.validateJSON(data['ShadowYOffset']);
        }
        // validate the optional field `StylePassthrough`
        if (data['StylePassthrough']) { // data not null
          DvbSubtitleStylePassthrough.validateJSON(data['StylePassthrough']);
        }
        // validate the optional field `SubtitlingType`
        if (data['SubtitlingType']) { // data not null
          DvbSubtitlingType.validateJSON(data['SubtitlingType']);
        }
        // validate the optional field `TeletextSpacing`
        if (data['TeletextSpacing']) { // data not null
          DvbSubtitleTeletextSpacing.validateJSON(data['TeletextSpacing']);
        }
        // validate the optional field `Width`
        if (data['Width']) { // data not null
          Number.validateJSON(data['Width']);
        }
        // validate the optional field `XPosition`
        if (data['XPosition']) { // data not null
          Number.validateJSON(data['XPosition']);
        }
        // validate the optional field `YPosition`
        if (data['YPosition']) { // data not null
          Number.validateJSON(data['YPosition']);
        }

        return true;
    }


}



/**
 * @member {module:model/DvbSubtitleAlignment} Alignment
 */
DvbSubDestinationSettings.prototype['Alignment'] = undefined;

/**
 * @member {module:model/DvbSubtitleApplyFontColor} ApplyFontColor
 */
DvbSubDestinationSettings.prototype['ApplyFontColor'] = undefined;

/**
 * @member {module:model/DvbSubtitleBackgroundColor} BackgroundColor
 */
DvbSubDestinationSettings.prototype['BackgroundColor'] = undefined;

/**
 * @member {Number} BackgroundOpacity
 */
DvbSubDestinationSettings.prototype['BackgroundOpacity'] = undefined;

/**
 * @member {module:model/DvbddsHandling} DdsHandling
 */
DvbSubDestinationSettings.prototype['DdsHandling'] = undefined;

/**
 * @member {Number} DdsXCoordinate
 */
DvbSubDestinationSettings.prototype['DdsXCoordinate'] = undefined;

/**
 * @member {Number} DdsYCoordinate
 */
DvbSubDestinationSettings.prototype['DdsYCoordinate'] = undefined;

/**
 * @member {module:model/DvbSubSubtitleFallbackFont} FallbackFont
 */
DvbSubDestinationSettings.prototype['FallbackFont'] = undefined;

/**
 * @member {module:model/DvbSubtitleFontColor} FontColor
 */
DvbSubDestinationSettings.prototype['FontColor'] = undefined;

/**
 * @member {Number} FontOpacity
 */
DvbSubDestinationSettings.prototype['FontOpacity'] = undefined;

/**
 * @member {Number} FontResolution
 */
DvbSubDestinationSettings.prototype['FontResolution'] = undefined;

/**
 * @member {module:model/FontScript} FontScript
 */
DvbSubDestinationSettings.prototype['FontScript'] = undefined;

/**
 * @member {Number} FontSize
 */
DvbSubDestinationSettings.prototype['FontSize'] = undefined;

/**
 * @member {Number} Height
 */
DvbSubDestinationSettings.prototype['Height'] = undefined;

/**
 * @member {String} HexFontColor
 */
DvbSubDestinationSettings.prototype['HexFontColor'] = undefined;

/**
 * @member {module:model/DvbSubtitleOutlineColor} OutlineColor
 */
DvbSubDestinationSettings.prototype['OutlineColor'] = undefined;

/**
 * @member {Number} OutlineSize
 */
DvbSubDestinationSettings.prototype['OutlineSize'] = undefined;

/**
 * @member {module:model/DvbSubtitleShadowColor} ShadowColor
 */
DvbSubDestinationSettings.prototype['ShadowColor'] = undefined;

/**
 * @member {Number} ShadowOpacity
 */
DvbSubDestinationSettings.prototype['ShadowOpacity'] = undefined;

/**
 * @member {Number} ShadowXOffset
 */
DvbSubDestinationSettings.prototype['ShadowXOffset'] = undefined;

/**
 * @member {Number} ShadowYOffset
 */
DvbSubDestinationSettings.prototype['ShadowYOffset'] = undefined;

/**
 * @member {module:model/DvbSubtitleStylePassthrough} StylePassthrough
 */
DvbSubDestinationSettings.prototype['StylePassthrough'] = undefined;

/**
 * @member {module:model/DvbSubtitlingType} SubtitlingType
 */
DvbSubDestinationSettings.prototype['SubtitlingType'] = undefined;

/**
 * @member {module:model/DvbSubtitleTeletextSpacing} TeletextSpacing
 */
DvbSubDestinationSettings.prototype['TeletextSpacing'] = undefined;

/**
 * @member {Number} Width
 */
DvbSubDestinationSettings.prototype['Width'] = undefined;

/**
 * @member {Number} XPosition
 */
DvbSubDestinationSettings.prototype['XPosition'] = undefined;

/**
 * @member {Number} YPosition
 */
DvbSubDestinationSettings.prototype['YPosition'] = undefined;






export default DvbSubDestinationSettings;

