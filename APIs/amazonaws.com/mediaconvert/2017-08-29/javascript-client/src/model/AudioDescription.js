/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioDescriptionAudioChannelTaggingSettings from './AudioDescriptionAudioChannelTaggingSettings';
import AudioDescriptionAudioNormalizationSettings from './AudioDescriptionAudioNormalizationSettings';
import AudioDescriptionCodecSettings from './AudioDescriptionCodecSettings';
import AudioDescriptionRemixSettings from './AudioDescriptionRemixSettings';
import AudioLanguageCodeControl from './AudioLanguageCodeControl';
import AudioTypeControl from './AudioTypeControl';
import LanguageCode from './LanguageCode';

/**
 * The AudioDescription model module.
 * @module model/AudioDescription
 * @version 2017-08-29
 */
class AudioDescription {
    /**
     * Constructs a new <code>AudioDescription</code>.
     * Settings related to one audio tab on the MediaConvert console. In your job JSON, an instance of AudioDescription is equivalent to one audio tab in the console. Usually, one audio tab corresponds to one output audio track. Depending on how you set up your input audio selectors and whether you use audio selector groups, one audio tab can correspond to a group of output audio tracks.
     * @alias module:model/AudioDescription
     */
    constructor() { 
        
        AudioDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioDescription} obj Optional instance to populate.
     * @return {module:model/AudioDescription} The populated <code>AudioDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioDescription();

            if (data.hasOwnProperty('AudioChannelTaggingSettings')) {
                obj['AudioChannelTaggingSettings'] = AudioDescriptionAudioChannelTaggingSettings.constructFromObject(data['AudioChannelTaggingSettings']);
            }
            if (data.hasOwnProperty('AudioNormalizationSettings')) {
                obj['AudioNormalizationSettings'] = AudioDescriptionAudioNormalizationSettings.constructFromObject(data['AudioNormalizationSettings']);
            }
            if (data.hasOwnProperty('AudioSourceName')) {
                obj['AudioSourceName'] = ApiClient.convertToType(data['AudioSourceName'], 'String');
            }
            if (data.hasOwnProperty('AudioType')) {
                obj['AudioType'] = ApiClient.convertToType(data['AudioType'], 'Number');
            }
            if (data.hasOwnProperty('AudioTypeControl')) {
                obj['AudioTypeControl'] = ApiClient.convertToType(data['AudioTypeControl'], AudioTypeControl);
            }
            if (data.hasOwnProperty('CodecSettings')) {
                obj['CodecSettings'] = AudioDescriptionCodecSettings.constructFromObject(data['CodecSettings']);
            }
            if (data.hasOwnProperty('CustomLanguageCode')) {
                obj['CustomLanguageCode'] = ApiClient.convertToType(data['CustomLanguageCode'], 'String');
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], LanguageCode);
            }
            if (data.hasOwnProperty('LanguageCodeControl')) {
                obj['LanguageCodeControl'] = ApiClient.convertToType(data['LanguageCodeControl'], AudioLanguageCodeControl);
            }
            if (data.hasOwnProperty('RemixSettings')) {
                obj['RemixSettings'] = AudioDescriptionRemixSettings.constructFromObject(data['RemixSettings']);
            }
            if (data.hasOwnProperty('StreamName')) {
                obj['StreamName'] = ApiClient.convertToType(data['StreamName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioDescription</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AudioChannelTaggingSettings`
        if (data['AudioChannelTaggingSettings']) { // data not null
          AudioDescriptionAudioChannelTaggingSettings.validateJSON(data['AudioChannelTaggingSettings']);
        }
        // validate the optional field `AudioNormalizationSettings`
        if (data['AudioNormalizationSettings']) { // data not null
          AudioDescriptionAudioNormalizationSettings.validateJSON(data['AudioNormalizationSettings']);
        }
        // validate the optional field `AudioSourceName`
        if (data['AudioSourceName']) { // data not null
          String.validateJSON(data['AudioSourceName']);
        }
        // validate the optional field `AudioType`
        if (data['AudioType']) { // data not null
          Number.validateJSON(data['AudioType']);
        }
        // validate the optional field `AudioTypeControl`
        if (data['AudioTypeControl']) { // data not null
          AudioTypeControl.validateJSON(data['AudioTypeControl']);
        }
        // validate the optional field `CodecSettings`
        if (data['CodecSettings']) { // data not null
          AudioDescriptionCodecSettings.validateJSON(data['CodecSettings']);
        }
        // validate the optional field `CustomLanguageCode`
        if (data['CustomLanguageCode']) { // data not null
          String.validateJSON(data['CustomLanguageCode']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          LanguageCode.validateJSON(data['LanguageCode']);
        }
        // validate the optional field `LanguageCodeControl`
        if (data['LanguageCodeControl']) { // data not null
          AudioLanguageCodeControl.validateJSON(data['LanguageCodeControl']);
        }
        // validate the optional field `RemixSettings`
        if (data['RemixSettings']) { // data not null
          AudioDescriptionRemixSettings.validateJSON(data['RemixSettings']);
        }
        // validate the optional field `StreamName`
        if (data['StreamName']) { // data not null
          String.validateJSON(data['StreamName']);
        }

        return true;
    }


}



/**
 * @member {module:model/AudioDescriptionAudioChannelTaggingSettings} AudioChannelTaggingSettings
 */
AudioDescription.prototype['AudioChannelTaggingSettings'] = undefined;

/**
 * @member {module:model/AudioDescriptionAudioNormalizationSettings} AudioNormalizationSettings
 */
AudioDescription.prototype['AudioNormalizationSettings'] = undefined;

/**
 * @member {String} AudioSourceName
 */
AudioDescription.prototype['AudioSourceName'] = undefined;

/**
 * @member {Number} AudioType
 */
AudioDescription.prototype['AudioType'] = undefined;

/**
 * @member {module:model/AudioTypeControl} AudioTypeControl
 */
AudioDescription.prototype['AudioTypeControl'] = undefined;

/**
 * @member {module:model/AudioDescriptionCodecSettings} CodecSettings
 */
AudioDescription.prototype['CodecSettings'] = undefined;

/**
 * @member {String} CustomLanguageCode
 */
AudioDescription.prototype['CustomLanguageCode'] = undefined;

/**
 * @member {module:model/LanguageCode} LanguageCode
 */
AudioDescription.prototype['LanguageCode'] = undefined;

/**
 * @member {module:model/AudioLanguageCodeControl} LanguageCodeControl
 */
AudioDescription.prototype['LanguageCodeControl'] = undefined;

/**
 * @member {module:model/AudioDescriptionRemixSettings} RemixSettings
 */
AudioDescription.prototype['RemixSettings'] = undefined;

/**
 * @member {String} StreamName
 */
AudioDescription.prototype['StreamName'] = undefined;






export default AudioDescription;

