/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Eac3AtmosBitstreamMode from './Eac3AtmosBitstreamMode';
import Eac3AtmosCodingMode from './Eac3AtmosCodingMode';
import Eac3AtmosDialogueIntelligence from './Eac3AtmosDialogueIntelligence';
import Eac3AtmosDownmixControl from './Eac3AtmosDownmixControl';
import Eac3AtmosDynamicRangeCompressionLine from './Eac3AtmosDynamicRangeCompressionLine';
import Eac3AtmosDynamicRangeCompressionRf from './Eac3AtmosDynamicRangeCompressionRf';
import Eac3AtmosDynamicRangeControl from './Eac3AtmosDynamicRangeControl';
import Eac3AtmosMeteringMode from './Eac3AtmosMeteringMode';
import Eac3AtmosSettings from './Eac3AtmosSettings';
import Eac3AtmosStereoDownmix from './Eac3AtmosStereoDownmix';
import Eac3AtmosSurroundExMode from './Eac3AtmosSurroundExMode';

/**
 * The AudioCodecSettingsEac3AtmosSettings model module.
 * @module model/AudioCodecSettingsEac3AtmosSettings
 * @version 2017-08-29
 */
class AudioCodecSettingsEac3AtmosSettings {
    /**
     * Constructs a new <code>AudioCodecSettingsEac3AtmosSettings</code>.
     * @alias module:model/AudioCodecSettingsEac3AtmosSettings
     * @implements module:model/Eac3AtmosSettings
     */
    constructor() { 
        Eac3AtmosSettings.initialize(this);
        AudioCodecSettingsEac3AtmosSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioCodecSettingsEac3AtmosSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioCodecSettingsEac3AtmosSettings} obj Optional instance to populate.
     * @return {module:model/AudioCodecSettingsEac3AtmosSettings} The populated <code>AudioCodecSettingsEac3AtmosSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioCodecSettingsEac3AtmosSettings();
            Eac3AtmosSettings.constructFromObject(data, obj);

            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('BitstreamMode')) {
                obj['BitstreamMode'] = ApiClient.convertToType(data['BitstreamMode'], Eac3AtmosBitstreamMode);
            }
            if (data.hasOwnProperty('CodingMode')) {
                obj['CodingMode'] = ApiClient.convertToType(data['CodingMode'], Eac3AtmosCodingMode);
            }
            if (data.hasOwnProperty('DialogueIntelligence')) {
                obj['DialogueIntelligence'] = ApiClient.convertToType(data['DialogueIntelligence'], Eac3AtmosDialogueIntelligence);
            }
            if (data.hasOwnProperty('DownmixControl')) {
                obj['DownmixControl'] = ApiClient.convertToType(data['DownmixControl'], Eac3AtmosDownmixControl);
            }
            if (data.hasOwnProperty('DynamicRangeCompressionLine')) {
                obj['DynamicRangeCompressionLine'] = ApiClient.convertToType(data['DynamicRangeCompressionLine'], Eac3AtmosDynamicRangeCompressionLine);
            }
            if (data.hasOwnProperty('DynamicRangeCompressionRf')) {
                obj['DynamicRangeCompressionRf'] = ApiClient.convertToType(data['DynamicRangeCompressionRf'], Eac3AtmosDynamicRangeCompressionRf);
            }
            if (data.hasOwnProperty('DynamicRangeControl')) {
                obj['DynamicRangeControl'] = ApiClient.convertToType(data['DynamicRangeControl'], Eac3AtmosDynamicRangeControl);
            }
            if (data.hasOwnProperty('LoRoCenterMixLevel')) {
                obj['LoRoCenterMixLevel'] = ApiClient.convertToType(data['LoRoCenterMixLevel'], 'Number');
            }
            if (data.hasOwnProperty('LoRoSurroundMixLevel')) {
                obj['LoRoSurroundMixLevel'] = ApiClient.convertToType(data['LoRoSurroundMixLevel'], 'Number');
            }
            if (data.hasOwnProperty('LtRtCenterMixLevel')) {
                obj['LtRtCenterMixLevel'] = ApiClient.convertToType(data['LtRtCenterMixLevel'], 'Number');
            }
            if (data.hasOwnProperty('LtRtSurroundMixLevel')) {
                obj['LtRtSurroundMixLevel'] = ApiClient.convertToType(data['LtRtSurroundMixLevel'], 'Number');
            }
            if (data.hasOwnProperty('MeteringMode')) {
                obj['MeteringMode'] = ApiClient.convertToType(data['MeteringMode'], Eac3AtmosMeteringMode);
            }
            if (data.hasOwnProperty('SampleRate')) {
                obj['SampleRate'] = ApiClient.convertToType(data['SampleRate'], 'Number');
            }
            if (data.hasOwnProperty('SpeechThreshold')) {
                obj['SpeechThreshold'] = ApiClient.convertToType(data['SpeechThreshold'], 'Number');
            }
            if (data.hasOwnProperty('StereoDownmix')) {
                obj['StereoDownmix'] = ApiClient.convertToType(data['StereoDownmix'], Eac3AtmosStereoDownmix);
            }
            if (data.hasOwnProperty('SurroundExMode')) {
                obj['SurroundExMode'] = ApiClient.convertToType(data['SurroundExMode'], Eac3AtmosSurroundExMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioCodecSettingsEac3AtmosSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioCodecSettingsEac3AtmosSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `BitstreamMode`
        if (data['BitstreamMode']) { // data not null
          Eac3AtmosBitstreamMode.validateJSON(data['BitstreamMode']);
        }
        // validate the optional field `CodingMode`
        if (data['CodingMode']) { // data not null
          Eac3AtmosCodingMode.validateJSON(data['CodingMode']);
        }
        // validate the optional field `DialogueIntelligence`
        if (data['DialogueIntelligence']) { // data not null
          Eac3AtmosDialogueIntelligence.validateJSON(data['DialogueIntelligence']);
        }
        // validate the optional field `DownmixControl`
        if (data['DownmixControl']) { // data not null
          Eac3AtmosDownmixControl.validateJSON(data['DownmixControl']);
        }
        // validate the optional field `DynamicRangeCompressionLine`
        if (data['DynamicRangeCompressionLine']) { // data not null
          Eac3AtmosDynamicRangeCompressionLine.validateJSON(data['DynamicRangeCompressionLine']);
        }
        // validate the optional field `DynamicRangeCompressionRf`
        if (data['DynamicRangeCompressionRf']) { // data not null
          Eac3AtmosDynamicRangeCompressionRf.validateJSON(data['DynamicRangeCompressionRf']);
        }
        // validate the optional field `DynamicRangeControl`
        if (data['DynamicRangeControl']) { // data not null
          Eac3AtmosDynamicRangeControl.validateJSON(data['DynamicRangeControl']);
        }
        // validate the optional field `LoRoCenterMixLevel`
        if (data['LoRoCenterMixLevel']) { // data not null
          Number.validateJSON(data['LoRoCenterMixLevel']);
        }
        // validate the optional field `LoRoSurroundMixLevel`
        if (data['LoRoSurroundMixLevel']) { // data not null
          Number.validateJSON(data['LoRoSurroundMixLevel']);
        }
        // validate the optional field `LtRtCenterMixLevel`
        if (data['LtRtCenterMixLevel']) { // data not null
          Number.validateJSON(data['LtRtCenterMixLevel']);
        }
        // validate the optional field `LtRtSurroundMixLevel`
        if (data['LtRtSurroundMixLevel']) { // data not null
          Number.validateJSON(data['LtRtSurroundMixLevel']);
        }
        // validate the optional field `MeteringMode`
        if (data['MeteringMode']) { // data not null
          Eac3AtmosMeteringMode.validateJSON(data['MeteringMode']);
        }
        // validate the optional field `SampleRate`
        if (data['SampleRate']) { // data not null
          Number.validateJSON(data['SampleRate']);
        }
        // validate the optional field `SpeechThreshold`
        if (data['SpeechThreshold']) { // data not null
          Number.validateJSON(data['SpeechThreshold']);
        }
        // validate the optional field `StereoDownmix`
        if (data['StereoDownmix']) { // data not null
          Eac3AtmosStereoDownmix.validateJSON(data['StereoDownmix']);
        }
        // validate the optional field `SurroundExMode`
        if (data['SurroundExMode']) { // data not null
          Eac3AtmosSurroundExMode.validateJSON(data['SurroundExMode']);
        }

        return true;
    }


}



/**
 * @member {Number} Bitrate
 */
AudioCodecSettingsEac3AtmosSettings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/Eac3AtmosBitstreamMode} BitstreamMode
 */
AudioCodecSettingsEac3AtmosSettings.prototype['BitstreamMode'] = undefined;

/**
 * @member {module:model/Eac3AtmosCodingMode} CodingMode
 */
AudioCodecSettingsEac3AtmosSettings.prototype['CodingMode'] = undefined;

/**
 * @member {module:model/Eac3AtmosDialogueIntelligence} DialogueIntelligence
 */
AudioCodecSettingsEac3AtmosSettings.prototype['DialogueIntelligence'] = undefined;

/**
 * @member {module:model/Eac3AtmosDownmixControl} DownmixControl
 */
AudioCodecSettingsEac3AtmosSettings.prototype['DownmixControl'] = undefined;

/**
 * @member {module:model/Eac3AtmosDynamicRangeCompressionLine} DynamicRangeCompressionLine
 */
AudioCodecSettingsEac3AtmosSettings.prototype['DynamicRangeCompressionLine'] = undefined;

/**
 * @member {module:model/Eac3AtmosDynamicRangeCompressionRf} DynamicRangeCompressionRf
 */
AudioCodecSettingsEac3AtmosSettings.prototype['DynamicRangeCompressionRf'] = undefined;

/**
 * @member {module:model/Eac3AtmosDynamicRangeControl} DynamicRangeControl
 */
AudioCodecSettingsEac3AtmosSettings.prototype['DynamicRangeControl'] = undefined;

/**
 * @member {Number} LoRoCenterMixLevel
 */
AudioCodecSettingsEac3AtmosSettings.prototype['LoRoCenterMixLevel'] = undefined;

/**
 * @member {Number} LoRoSurroundMixLevel
 */
AudioCodecSettingsEac3AtmosSettings.prototype['LoRoSurroundMixLevel'] = undefined;

/**
 * @member {Number} LtRtCenterMixLevel
 */
AudioCodecSettingsEac3AtmosSettings.prototype['LtRtCenterMixLevel'] = undefined;

/**
 * @member {Number} LtRtSurroundMixLevel
 */
AudioCodecSettingsEac3AtmosSettings.prototype['LtRtSurroundMixLevel'] = undefined;

/**
 * @member {module:model/Eac3AtmosMeteringMode} MeteringMode
 */
AudioCodecSettingsEac3AtmosSettings.prototype['MeteringMode'] = undefined;

/**
 * @member {Number} SampleRate
 */
AudioCodecSettingsEac3AtmosSettings.prototype['SampleRate'] = undefined;

/**
 * @member {Number} SpeechThreshold
 */
AudioCodecSettingsEac3AtmosSettings.prototype['SpeechThreshold'] = undefined;

/**
 * @member {module:model/Eac3AtmosStereoDownmix} StereoDownmix
 */
AudioCodecSettingsEac3AtmosSettings.prototype['StereoDownmix'] = undefined;

/**
 * @member {module:model/Eac3AtmosSurroundExMode} SurroundExMode
 */
AudioCodecSettingsEac3AtmosSettings.prototype['SurroundExMode'] = undefined;


// Implement Eac3AtmosSettings interface:
/**
 * @member {Number} Bitrate
 */
Eac3AtmosSettings.prototype['Bitrate'] = undefined;
/**
 * @member {module:model/Eac3AtmosBitstreamMode} BitstreamMode
 */
Eac3AtmosSettings.prototype['BitstreamMode'] = undefined;
/**
 * @member {module:model/Eac3AtmosCodingMode} CodingMode
 */
Eac3AtmosSettings.prototype['CodingMode'] = undefined;
/**
 * @member {module:model/Eac3AtmosDialogueIntelligence} DialogueIntelligence
 */
Eac3AtmosSettings.prototype['DialogueIntelligence'] = undefined;
/**
 * @member {module:model/Eac3AtmosDownmixControl} DownmixControl
 */
Eac3AtmosSettings.prototype['DownmixControl'] = undefined;
/**
 * @member {module:model/Eac3AtmosDynamicRangeCompressionLine} DynamicRangeCompressionLine
 */
Eac3AtmosSettings.prototype['DynamicRangeCompressionLine'] = undefined;
/**
 * @member {module:model/Eac3AtmosDynamicRangeCompressionRf} DynamicRangeCompressionRf
 */
Eac3AtmosSettings.prototype['DynamicRangeCompressionRf'] = undefined;
/**
 * @member {module:model/Eac3AtmosDynamicRangeControl} DynamicRangeControl
 */
Eac3AtmosSettings.prototype['DynamicRangeControl'] = undefined;
/**
 * @member {Number} LoRoCenterMixLevel
 */
Eac3AtmosSettings.prototype['LoRoCenterMixLevel'] = undefined;
/**
 * @member {Number} LoRoSurroundMixLevel
 */
Eac3AtmosSettings.prototype['LoRoSurroundMixLevel'] = undefined;
/**
 * @member {Number} LtRtCenterMixLevel
 */
Eac3AtmosSettings.prototype['LtRtCenterMixLevel'] = undefined;
/**
 * @member {Number} LtRtSurroundMixLevel
 */
Eac3AtmosSettings.prototype['LtRtSurroundMixLevel'] = undefined;
/**
 * @member {module:model/Eac3AtmosMeteringMode} MeteringMode
 */
Eac3AtmosSettings.prototype['MeteringMode'] = undefined;
/**
 * @member {Number} SampleRate
 */
Eac3AtmosSettings.prototype['SampleRate'] = undefined;
/**
 * @member {Number} SpeechThreshold
 */
Eac3AtmosSettings.prototype['SpeechThreshold'] = undefined;
/**
 * @member {module:model/Eac3AtmosStereoDownmix} StereoDownmix
 */
Eac3AtmosSettings.prototype['StereoDownmix'] = undefined;
/**
 * @member {module:model/Eac3AtmosSurroundExMode} SurroundExMode
 */
Eac3AtmosSettings.prototype['SurroundExMode'] = undefined;




export default AudioCodecSettingsEac3AtmosSettings;

