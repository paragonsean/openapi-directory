/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Hdr10Metadata model module.
 * @module model/Hdr10Metadata
 * @version 2017-08-29
 */
class Hdr10Metadata {
    /**
     * Constructs a new <code>Hdr10Metadata</code>.
     * Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don&#39;t affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
     * @alias module:model/Hdr10Metadata
     */
    constructor() { 
        
        Hdr10Metadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Hdr10Metadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Hdr10Metadata} obj Optional instance to populate.
     * @return {module:model/Hdr10Metadata} The populated <code>Hdr10Metadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Hdr10Metadata();

            if (data.hasOwnProperty('BluePrimaryX')) {
                obj['BluePrimaryX'] = ApiClient.convertToType(data['BluePrimaryX'], 'Number');
            }
            if (data.hasOwnProperty('BluePrimaryY')) {
                obj['BluePrimaryY'] = ApiClient.convertToType(data['BluePrimaryY'], 'Number');
            }
            if (data.hasOwnProperty('GreenPrimaryX')) {
                obj['GreenPrimaryX'] = ApiClient.convertToType(data['GreenPrimaryX'], 'Number');
            }
            if (data.hasOwnProperty('GreenPrimaryY')) {
                obj['GreenPrimaryY'] = ApiClient.convertToType(data['GreenPrimaryY'], 'Number');
            }
            if (data.hasOwnProperty('MaxContentLightLevel')) {
                obj['MaxContentLightLevel'] = ApiClient.convertToType(data['MaxContentLightLevel'], 'Number');
            }
            if (data.hasOwnProperty('MaxFrameAverageLightLevel')) {
                obj['MaxFrameAverageLightLevel'] = ApiClient.convertToType(data['MaxFrameAverageLightLevel'], 'Number');
            }
            if (data.hasOwnProperty('MaxLuminance')) {
                obj['MaxLuminance'] = ApiClient.convertToType(data['MaxLuminance'], 'Number');
            }
            if (data.hasOwnProperty('MinLuminance')) {
                obj['MinLuminance'] = ApiClient.convertToType(data['MinLuminance'], 'Number');
            }
            if (data.hasOwnProperty('RedPrimaryX')) {
                obj['RedPrimaryX'] = ApiClient.convertToType(data['RedPrimaryX'], 'Number');
            }
            if (data.hasOwnProperty('RedPrimaryY')) {
                obj['RedPrimaryY'] = ApiClient.convertToType(data['RedPrimaryY'], 'Number');
            }
            if (data.hasOwnProperty('WhitePointX')) {
                obj['WhitePointX'] = ApiClient.convertToType(data['WhitePointX'], 'Number');
            }
            if (data.hasOwnProperty('WhitePointY')) {
                obj['WhitePointY'] = ApiClient.convertToType(data['WhitePointY'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Hdr10Metadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Hdr10Metadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `BluePrimaryX`
        if (data['BluePrimaryX']) { // data not null
          Number.validateJSON(data['BluePrimaryX']);
        }
        // validate the optional field `BluePrimaryY`
        if (data['BluePrimaryY']) { // data not null
          Number.validateJSON(data['BluePrimaryY']);
        }
        // validate the optional field `GreenPrimaryX`
        if (data['GreenPrimaryX']) { // data not null
          Number.validateJSON(data['GreenPrimaryX']);
        }
        // validate the optional field `GreenPrimaryY`
        if (data['GreenPrimaryY']) { // data not null
          Number.validateJSON(data['GreenPrimaryY']);
        }
        // validate the optional field `MaxContentLightLevel`
        if (data['MaxContentLightLevel']) { // data not null
          Number.validateJSON(data['MaxContentLightLevel']);
        }
        // validate the optional field `MaxFrameAverageLightLevel`
        if (data['MaxFrameAverageLightLevel']) { // data not null
          Number.validateJSON(data['MaxFrameAverageLightLevel']);
        }
        // validate the optional field `MaxLuminance`
        if (data['MaxLuminance']) { // data not null
          Number.validateJSON(data['MaxLuminance']);
        }
        // validate the optional field `MinLuminance`
        if (data['MinLuminance']) { // data not null
          Number.validateJSON(data['MinLuminance']);
        }
        // validate the optional field `RedPrimaryX`
        if (data['RedPrimaryX']) { // data not null
          Number.validateJSON(data['RedPrimaryX']);
        }
        // validate the optional field `RedPrimaryY`
        if (data['RedPrimaryY']) { // data not null
          Number.validateJSON(data['RedPrimaryY']);
        }
        // validate the optional field `WhitePointX`
        if (data['WhitePointX']) { // data not null
          Number.validateJSON(data['WhitePointX']);
        }
        // validate the optional field `WhitePointY`
        if (data['WhitePointY']) { // data not null
          Number.validateJSON(data['WhitePointY']);
        }

        return true;
    }


}



/**
 * @member {Number} BluePrimaryX
 */
Hdr10Metadata.prototype['BluePrimaryX'] = undefined;

/**
 * @member {Number} BluePrimaryY
 */
Hdr10Metadata.prototype['BluePrimaryY'] = undefined;

/**
 * @member {Number} GreenPrimaryX
 */
Hdr10Metadata.prototype['GreenPrimaryX'] = undefined;

/**
 * @member {Number} GreenPrimaryY
 */
Hdr10Metadata.prototype['GreenPrimaryY'] = undefined;

/**
 * @member {Number} MaxContentLightLevel
 */
Hdr10Metadata.prototype['MaxContentLightLevel'] = undefined;

/**
 * @member {Number} MaxFrameAverageLightLevel
 */
Hdr10Metadata.prototype['MaxFrameAverageLightLevel'] = undefined;

/**
 * @member {Number} MaxLuminance
 */
Hdr10Metadata.prototype['MaxLuminance'] = undefined;

/**
 * @member {Number} MinLuminance
 */
Hdr10Metadata.prototype['MinLuminance'] = undefined;

/**
 * @member {Number} RedPrimaryX
 */
Hdr10Metadata.prototype['RedPrimaryX'] = undefined;

/**
 * @member {Number} RedPrimaryY
 */
Hdr10Metadata.prototype['RedPrimaryY'] = undefined;

/**
 * @member {Number} WhitePointX
 */
Hdr10Metadata.prototype['WhitePointX'] = undefined;

/**
 * @member {Number} WhitePointY
 */
Hdr10Metadata.prototype['WhitePointY'] = undefined;






export default Hdr10Metadata;

