/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CaptionSourceSettingsAncillarySourceSettings from './CaptionSourceSettingsAncillarySourceSettings';
import CaptionSourceSettingsDvbSubSourceSettings from './CaptionSourceSettingsDvbSubSourceSettings';
import CaptionSourceSettingsEmbeddedSourceSettings from './CaptionSourceSettingsEmbeddedSourceSettings';
import CaptionSourceSettingsFileSourceSettings from './CaptionSourceSettingsFileSourceSettings';
import CaptionSourceSettingsTeletextSourceSettings from './CaptionSourceSettingsTeletextSourceSettings';
import CaptionSourceSettingsTrackSourceSettings from './CaptionSourceSettingsTrackSourceSettings';
import CaptionSourceSettingsWebvttHlsSourceSettings from './CaptionSourceSettingsWebvttHlsSourceSettings';
import CaptionSourceType from './CaptionSourceType';

/**
 * The CaptionSourceSettings model module.
 * @module model/CaptionSourceSettings
 * @version 2017-08-29
 */
class CaptionSourceSettings {
    /**
     * Constructs a new <code>CaptionSourceSettings</code>.
     * If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
     * @alias module:model/CaptionSourceSettings
     */
    constructor() { 
        
        CaptionSourceSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CaptionSourceSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CaptionSourceSettings} obj Optional instance to populate.
     * @return {module:model/CaptionSourceSettings} The populated <code>CaptionSourceSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CaptionSourceSettings();

            if (data.hasOwnProperty('AncillarySourceSettings')) {
                obj['AncillarySourceSettings'] = CaptionSourceSettingsAncillarySourceSettings.constructFromObject(data['AncillarySourceSettings']);
            }
            if (data.hasOwnProperty('DvbSubSourceSettings')) {
                obj['DvbSubSourceSettings'] = CaptionSourceSettingsDvbSubSourceSettings.constructFromObject(data['DvbSubSourceSettings']);
            }
            if (data.hasOwnProperty('EmbeddedSourceSettings')) {
                obj['EmbeddedSourceSettings'] = CaptionSourceSettingsEmbeddedSourceSettings.constructFromObject(data['EmbeddedSourceSettings']);
            }
            if (data.hasOwnProperty('FileSourceSettings')) {
                obj['FileSourceSettings'] = CaptionSourceSettingsFileSourceSettings.constructFromObject(data['FileSourceSettings']);
            }
            if (data.hasOwnProperty('SourceType')) {
                obj['SourceType'] = ApiClient.convertToType(data['SourceType'], CaptionSourceType);
            }
            if (data.hasOwnProperty('TeletextSourceSettings')) {
                obj['TeletextSourceSettings'] = CaptionSourceSettingsTeletextSourceSettings.constructFromObject(data['TeletextSourceSettings']);
            }
            if (data.hasOwnProperty('TrackSourceSettings')) {
                obj['TrackSourceSettings'] = CaptionSourceSettingsTrackSourceSettings.constructFromObject(data['TrackSourceSettings']);
            }
            if (data.hasOwnProperty('WebvttHlsSourceSettings')) {
                obj['WebvttHlsSourceSettings'] = CaptionSourceSettingsWebvttHlsSourceSettings.constructFromObject(data['WebvttHlsSourceSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CaptionSourceSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CaptionSourceSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AncillarySourceSettings`
        if (data['AncillarySourceSettings']) { // data not null
          CaptionSourceSettingsAncillarySourceSettings.validateJSON(data['AncillarySourceSettings']);
        }
        // validate the optional field `DvbSubSourceSettings`
        if (data['DvbSubSourceSettings']) { // data not null
          CaptionSourceSettingsDvbSubSourceSettings.validateJSON(data['DvbSubSourceSettings']);
        }
        // validate the optional field `EmbeddedSourceSettings`
        if (data['EmbeddedSourceSettings']) { // data not null
          CaptionSourceSettingsEmbeddedSourceSettings.validateJSON(data['EmbeddedSourceSettings']);
        }
        // validate the optional field `FileSourceSettings`
        if (data['FileSourceSettings']) { // data not null
          CaptionSourceSettingsFileSourceSettings.validateJSON(data['FileSourceSettings']);
        }
        // validate the optional field `SourceType`
        if (data['SourceType']) { // data not null
          CaptionSourceType.validateJSON(data['SourceType']);
        }
        // validate the optional field `TeletextSourceSettings`
        if (data['TeletextSourceSettings']) { // data not null
          CaptionSourceSettingsTeletextSourceSettings.validateJSON(data['TeletextSourceSettings']);
        }
        // validate the optional field `TrackSourceSettings`
        if (data['TrackSourceSettings']) { // data not null
          CaptionSourceSettingsTrackSourceSettings.validateJSON(data['TrackSourceSettings']);
        }
        // validate the optional field `WebvttHlsSourceSettings`
        if (data['WebvttHlsSourceSettings']) { // data not null
          CaptionSourceSettingsWebvttHlsSourceSettings.validateJSON(data['WebvttHlsSourceSettings']);
        }

        return true;
    }


}



/**
 * @member {module:model/CaptionSourceSettingsAncillarySourceSettings} AncillarySourceSettings
 */
CaptionSourceSettings.prototype['AncillarySourceSettings'] = undefined;

/**
 * @member {module:model/CaptionSourceSettingsDvbSubSourceSettings} DvbSubSourceSettings
 */
CaptionSourceSettings.prototype['DvbSubSourceSettings'] = undefined;

/**
 * @member {module:model/CaptionSourceSettingsEmbeddedSourceSettings} EmbeddedSourceSettings
 */
CaptionSourceSettings.prototype['EmbeddedSourceSettings'] = undefined;

/**
 * @member {module:model/CaptionSourceSettingsFileSourceSettings} FileSourceSettings
 */
CaptionSourceSettings.prototype['FileSourceSettings'] = undefined;

/**
 * @member {module:model/CaptionSourceType} SourceType
 */
CaptionSourceSettings.prototype['SourceType'] = undefined;

/**
 * @member {module:model/CaptionSourceSettingsTeletextSourceSettings} TeletextSourceSettings
 */
CaptionSourceSettings.prototype['TeletextSourceSettings'] = undefined;

/**
 * @member {module:model/CaptionSourceSettingsTrackSourceSettings} TrackSourceSettings
 */
CaptionSourceSettings.prototype['TrackSourceSettings'] = undefined;

/**
 * @member {module:model/CaptionSourceSettingsWebvttHlsSourceSettings} WebvttHlsSourceSettings
 */
CaptionSourceSettings.prototype['WebvttHlsSourceSettings'] = undefined;






export default CaptionSourceSettings;

