/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioChannelTag from './AudioChannelTag';

/**
 * The AudioChannelTaggingSettings model module.
 * @module model/AudioChannelTaggingSettings
 * @version 2017-08-29
 */
class AudioChannelTaggingSettings {
    /**
     * Constructs a new <code>AudioChannelTaggingSettings</code>.
     * When you mimic a multi-channel audio layout with multiple mono-channel tracks, you can tag each channel layout manually. For example, you would tag the tracks that contain your left, right, and center audio with Left (L), Right (R), and Center (C), respectively. When you don&#39;t specify a value, MediaConvert labels your track as Center (C) by default. To use audio layout tagging, your output must be in a QuickTime (.mov) container; your audio codec must be AAC, WAV, or AIFF; and you must set up your audio track to have only one channel.
     * @alias module:model/AudioChannelTaggingSettings
     */
    constructor() { 
        
        AudioChannelTaggingSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioChannelTaggingSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioChannelTaggingSettings} obj Optional instance to populate.
     * @return {module:model/AudioChannelTaggingSettings} The populated <code>AudioChannelTaggingSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioChannelTaggingSettings();

            if (data.hasOwnProperty('ChannelTag')) {
                obj['ChannelTag'] = ApiClient.convertToType(data['ChannelTag'], AudioChannelTag);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioChannelTaggingSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioChannelTaggingSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ChannelTag`
        if (data['ChannelTag']) { // data not null
          AudioChannelTag.validateJSON(data['ChannelTag']);
        }

        return true;
    }


}



/**
 * @member {module:model/AudioChannelTag} ChannelTag
 */
AudioChannelTaggingSettings.prototype['ChannelTag'] = undefined;






export default AudioChannelTaggingSettings;

