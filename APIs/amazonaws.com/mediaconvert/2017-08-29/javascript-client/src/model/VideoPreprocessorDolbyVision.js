/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DolbyVision from './DolbyVision';
import DolbyVisionL6Metadata from './DolbyVisionL6Metadata';
import DolbyVisionLevel6Mode from './DolbyVisionLevel6Mode';
import DolbyVisionMapping from './DolbyVisionMapping';
import DolbyVisionProfile from './DolbyVisionProfile';

/**
 * The VideoPreprocessorDolbyVision model module.
 * @module model/VideoPreprocessorDolbyVision
 * @version 2017-08-29
 */
class VideoPreprocessorDolbyVision {
    /**
     * Constructs a new <code>VideoPreprocessorDolbyVision</code>.
     * @alias module:model/VideoPreprocessorDolbyVision
     * @implements module:model/DolbyVision
     */
    constructor() { 
        DolbyVision.initialize(this);
        VideoPreprocessorDolbyVision.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoPreprocessorDolbyVision</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoPreprocessorDolbyVision} obj Optional instance to populate.
     * @return {module:model/VideoPreprocessorDolbyVision} The populated <code>VideoPreprocessorDolbyVision</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoPreprocessorDolbyVision();
            DolbyVision.constructFromObject(data, obj);

            if (data.hasOwnProperty('L6Metadata')) {
                obj['L6Metadata'] = DolbyVisionL6Metadata.constructFromObject(data['L6Metadata']);
            }
            if (data.hasOwnProperty('L6Mode')) {
                obj['L6Mode'] = ApiClient.convertToType(data['L6Mode'], DolbyVisionLevel6Mode);
            }
            if (data.hasOwnProperty('Mapping')) {
                obj['Mapping'] = ApiClient.convertToType(data['Mapping'], DolbyVisionMapping);
            }
            if (data.hasOwnProperty('Profile')) {
                obj['Profile'] = ApiClient.convertToType(data['Profile'], DolbyVisionProfile);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoPreprocessorDolbyVision</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoPreprocessorDolbyVision</code>.
     */
    static validateJSON(data) {
        // validate the optional field `L6Metadata`
        if (data['L6Metadata']) { // data not null
          DolbyVisionL6Metadata.validateJSON(data['L6Metadata']);
        }
        // validate the optional field `L6Mode`
        if (data['L6Mode']) { // data not null
          DolbyVisionLevel6Mode.validateJSON(data['L6Mode']);
        }
        // validate the optional field `Mapping`
        if (data['Mapping']) { // data not null
          DolbyVisionMapping.validateJSON(data['Mapping']);
        }
        // validate the optional field `Profile`
        if (data['Profile']) { // data not null
          DolbyVisionProfile.validateJSON(data['Profile']);
        }

        return true;
    }


}



/**
 * @member {module:model/DolbyVisionL6Metadata} L6Metadata
 */
VideoPreprocessorDolbyVision.prototype['L6Metadata'] = undefined;

/**
 * @member {module:model/DolbyVisionLevel6Mode} L6Mode
 */
VideoPreprocessorDolbyVision.prototype['L6Mode'] = undefined;

/**
 * @member {module:model/DolbyVisionMapping} Mapping
 */
VideoPreprocessorDolbyVision.prototype['Mapping'] = undefined;

/**
 * @member {module:model/DolbyVisionProfile} Profile
 */
VideoPreprocessorDolbyVision.prototype['Profile'] = undefined;


// Implement DolbyVision interface:
/**
 * @member {module:model/DolbyVisionL6Metadata} L6Metadata
 */
DolbyVision.prototype['L6Metadata'] = undefined;
/**
 * @member {module:model/DolbyVisionLevel6Mode} L6Mode
 */
DolbyVision.prototype['L6Mode'] = undefined;
/**
 * @member {module:model/DolbyVisionMapping} Mapping
 */
DolbyVision.prototype['Mapping'] = undefined;
/**
 * @member {module:model/DolbyVisionProfile} Profile
 */
DolbyVision.prototype['Profile'] = undefined;




export default VideoPreprocessorDolbyVision;

