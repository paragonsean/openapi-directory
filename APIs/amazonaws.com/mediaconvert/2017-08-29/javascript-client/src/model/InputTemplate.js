/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvancedInputFilter from './AdvancedInputFilter';
import InputAdvancedInputFilterSettings from './InputAdvancedInputFilterSettings';
import InputCrop from './InputCrop';
import InputDeblockFilter from './InputDeblockFilter';
import InputDenoiseFilter from './InputDenoiseFilter';
import InputFilterEnable from './InputFilterEnable';
import InputImageInserter from './InputImageInserter';
import InputPosition from './InputPosition';
import InputPsiControl from './InputPsiControl';
import InputScanType from './InputScanType';
import InputTimecodeSource from './InputTimecodeSource';
import InputVideoSelector from './InputVideoSelector';

/**
 * The InputTemplate model module.
 * @module model/InputTemplate
 * @version 2017-08-29
 */
class InputTemplate {
    /**
     * Constructs a new <code>InputTemplate</code>.
     * Specified video input in a template.
     * @alias module:model/InputTemplate
     */
    constructor() { 
        
        InputTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InputTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputTemplate} obj Optional instance to populate.
     * @return {module:model/InputTemplate} The populated <code>InputTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputTemplate();

            if (data.hasOwnProperty('AdvancedInputFilter')) {
                obj['AdvancedInputFilter'] = ApiClient.convertToType(data['AdvancedInputFilter'], AdvancedInputFilter);
            }
            if (data.hasOwnProperty('AdvancedInputFilterSettings')) {
                obj['AdvancedInputFilterSettings'] = InputAdvancedInputFilterSettings.constructFromObject(data['AdvancedInputFilterSettings']);
            }
            if (data.hasOwnProperty('AudioSelectorGroups')) {
                obj['AudioSelectorGroups'] = ApiClient.convertToType(data['AudioSelectorGroups'], Object);
            }
            if (data.hasOwnProperty('AudioSelectors')) {
                obj['AudioSelectors'] = ApiClient.convertToType(data['AudioSelectors'], Object);
            }
            if (data.hasOwnProperty('CaptionSelectors')) {
                obj['CaptionSelectors'] = ApiClient.convertToType(data['CaptionSelectors'], Object);
            }
            if (data.hasOwnProperty('Crop')) {
                obj['Crop'] = InputCrop.constructFromObject(data['Crop']);
            }
            if (data.hasOwnProperty('DeblockFilter')) {
                obj['DeblockFilter'] = ApiClient.convertToType(data['DeblockFilter'], InputDeblockFilter);
            }
            if (data.hasOwnProperty('DenoiseFilter')) {
                obj['DenoiseFilter'] = ApiClient.convertToType(data['DenoiseFilter'], InputDenoiseFilter);
            }
            if (data.hasOwnProperty('DolbyVisionMetadataXml')) {
                obj['DolbyVisionMetadataXml'] = ApiClient.convertToType(data['DolbyVisionMetadataXml'], 'String');
            }
            if (data.hasOwnProperty('FilterEnable')) {
                obj['FilterEnable'] = ApiClient.convertToType(data['FilterEnable'], InputFilterEnable);
            }
            if (data.hasOwnProperty('FilterStrength')) {
                obj['FilterStrength'] = ApiClient.convertToType(data['FilterStrength'], 'Number');
            }
            if (data.hasOwnProperty('ImageInserter')) {
                obj['ImageInserter'] = InputImageInserter.constructFromObject(data['ImageInserter']);
            }
            if (data.hasOwnProperty('InputClippings')) {
                obj['InputClippings'] = ApiClient.convertToType(data['InputClippings'], Array);
            }
            if (data.hasOwnProperty('InputScanType')) {
                obj['InputScanType'] = ApiClient.convertToType(data['InputScanType'], InputScanType);
            }
            if (data.hasOwnProperty('Position')) {
                obj['Position'] = InputPosition.constructFromObject(data['Position']);
            }
            if (data.hasOwnProperty('ProgramNumber')) {
                obj['ProgramNumber'] = ApiClient.convertToType(data['ProgramNumber'], 'Number');
            }
            if (data.hasOwnProperty('PsiControl')) {
                obj['PsiControl'] = ApiClient.convertToType(data['PsiControl'], InputPsiControl);
            }
            if (data.hasOwnProperty('TimecodeSource')) {
                obj['TimecodeSource'] = ApiClient.convertToType(data['TimecodeSource'], InputTimecodeSource);
            }
            if (data.hasOwnProperty('TimecodeStart')) {
                obj['TimecodeStart'] = ApiClient.convertToType(data['TimecodeStart'], 'String');
            }
            if (data.hasOwnProperty('VideoSelector')) {
                obj['VideoSelector'] = InputVideoSelector.constructFromObject(data['VideoSelector']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputTemplate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AdvancedInputFilter`
        if (data['AdvancedInputFilter']) { // data not null
          AdvancedInputFilter.validateJSON(data['AdvancedInputFilter']);
        }
        // validate the optional field `AdvancedInputFilterSettings`
        if (data['AdvancedInputFilterSettings']) { // data not null
          InputAdvancedInputFilterSettings.validateJSON(data['AdvancedInputFilterSettings']);
        }
        // validate the optional field `AudioSelectorGroups`
        if (data['AudioSelectorGroups']) { // data not null
          Object.validateJSON(data['AudioSelectorGroups']);
        }
        // validate the optional field `AudioSelectors`
        if (data['AudioSelectors']) { // data not null
          Object.validateJSON(data['AudioSelectors']);
        }
        // validate the optional field `CaptionSelectors`
        if (data['CaptionSelectors']) { // data not null
          Object.validateJSON(data['CaptionSelectors']);
        }
        // validate the optional field `Crop`
        if (data['Crop']) { // data not null
          InputCrop.validateJSON(data['Crop']);
        }
        // validate the optional field `DeblockFilter`
        if (data['DeblockFilter']) { // data not null
          InputDeblockFilter.validateJSON(data['DeblockFilter']);
        }
        // validate the optional field `DenoiseFilter`
        if (data['DenoiseFilter']) { // data not null
          InputDenoiseFilter.validateJSON(data['DenoiseFilter']);
        }
        // validate the optional field `DolbyVisionMetadataXml`
        if (data['DolbyVisionMetadataXml']) { // data not null
          String.validateJSON(data['DolbyVisionMetadataXml']);
        }
        // validate the optional field `FilterEnable`
        if (data['FilterEnable']) { // data not null
          InputFilterEnable.validateJSON(data['FilterEnable']);
        }
        // validate the optional field `FilterStrength`
        if (data['FilterStrength']) { // data not null
          Number.validateJSON(data['FilterStrength']);
        }
        // validate the optional field `ImageInserter`
        if (data['ImageInserter']) { // data not null
          InputImageInserter.validateJSON(data['ImageInserter']);
        }
        // validate the optional field `InputClippings`
        if (data['InputClippings']) { // data not null
          Array.validateJSON(data['InputClippings']);
        }
        // validate the optional field `InputScanType`
        if (data['InputScanType']) { // data not null
          InputScanType.validateJSON(data['InputScanType']);
        }
        // validate the optional field `Position`
        if (data['Position']) { // data not null
          InputPosition.validateJSON(data['Position']);
        }
        // validate the optional field `ProgramNumber`
        if (data['ProgramNumber']) { // data not null
          Number.validateJSON(data['ProgramNumber']);
        }
        // validate the optional field `PsiControl`
        if (data['PsiControl']) { // data not null
          InputPsiControl.validateJSON(data['PsiControl']);
        }
        // validate the optional field `TimecodeSource`
        if (data['TimecodeSource']) { // data not null
          InputTimecodeSource.validateJSON(data['TimecodeSource']);
        }
        // validate the optional field `TimecodeStart`
        if (data['TimecodeStart']) { // data not null
          String.validateJSON(data['TimecodeStart']);
        }
        // validate the optional field `VideoSelector`
        if (data['VideoSelector']) { // data not null
          InputVideoSelector.validateJSON(data['VideoSelector']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdvancedInputFilter} AdvancedInputFilter
 */
InputTemplate.prototype['AdvancedInputFilter'] = undefined;

/**
 * @member {module:model/InputAdvancedInputFilterSettings} AdvancedInputFilterSettings
 */
InputTemplate.prototype['AdvancedInputFilterSettings'] = undefined;

/**
 * @member {Object} AudioSelectorGroups
 */
InputTemplate.prototype['AudioSelectorGroups'] = undefined;

/**
 * @member {Object} AudioSelectors
 */
InputTemplate.prototype['AudioSelectors'] = undefined;

/**
 * @member {Object} CaptionSelectors
 */
InputTemplate.prototype['CaptionSelectors'] = undefined;

/**
 * @member {module:model/InputCrop} Crop
 */
InputTemplate.prototype['Crop'] = undefined;

/**
 * @member {module:model/InputDeblockFilter} DeblockFilter
 */
InputTemplate.prototype['DeblockFilter'] = undefined;

/**
 * @member {module:model/InputDenoiseFilter} DenoiseFilter
 */
InputTemplate.prototype['DenoiseFilter'] = undefined;

/**
 * @member {String} DolbyVisionMetadataXml
 */
InputTemplate.prototype['DolbyVisionMetadataXml'] = undefined;

/**
 * @member {module:model/InputFilterEnable} FilterEnable
 */
InputTemplate.prototype['FilterEnable'] = undefined;

/**
 * @member {Number} FilterStrength
 */
InputTemplate.prototype['FilterStrength'] = undefined;

/**
 * @member {module:model/InputImageInserter} ImageInserter
 */
InputTemplate.prototype['ImageInserter'] = undefined;

/**
 * @member {Array} InputClippings
 */
InputTemplate.prototype['InputClippings'] = undefined;

/**
 * @member {module:model/InputScanType} InputScanType
 */
InputTemplate.prototype['InputScanType'] = undefined;

/**
 * @member {module:model/InputPosition} Position
 */
InputTemplate.prototype['Position'] = undefined;

/**
 * @member {Number} ProgramNumber
 */
InputTemplate.prototype['ProgramNumber'] = undefined;

/**
 * @member {module:model/InputPsiControl} PsiControl
 */
InputTemplate.prototype['PsiControl'] = undefined;

/**
 * @member {module:model/InputTimecodeSource} TimecodeSource
 */
InputTemplate.prototype['TimecodeSource'] = undefined;

/**
 * @member {String} TimecodeStart
 */
InputTemplate.prototype['TimecodeStart'] = undefined;

/**
 * @member {module:model/InputVideoSelector} VideoSelector
 */
InputTemplate.prototype['VideoSelector'] = undefined;






export default InputTemplate;

