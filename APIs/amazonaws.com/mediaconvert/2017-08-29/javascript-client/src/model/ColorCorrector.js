/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColorCorrectorClipLimits from './ColorCorrectorClipLimits';
import ColorCorrectorHdr10Metadata from './ColorCorrectorHdr10Metadata';
import ColorSpaceConversion from './ColorSpaceConversion';
import HDRToSDRToneMapper from './HDRToSDRToneMapper';
import SampleRangeConversion from './SampleRangeConversion';

/**
 * The ColorCorrector model module.
 * @module model/ColorCorrector
 * @version 2017-08-29
 */
class ColorCorrector {
    /**
     * Constructs a new <code>ColorCorrector</code>.
     * Settings for color correction.
     * @alias module:model/ColorCorrector
     */
    constructor() { 
        
        ColorCorrector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColorCorrector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColorCorrector} obj Optional instance to populate.
     * @return {module:model/ColorCorrector} The populated <code>ColorCorrector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColorCorrector();

            if (data.hasOwnProperty('Brightness')) {
                obj['Brightness'] = ApiClient.convertToType(data['Brightness'], 'Number');
            }
            if (data.hasOwnProperty('ClipLimits')) {
                obj['ClipLimits'] = ColorCorrectorClipLimits.constructFromObject(data['ClipLimits']);
            }
            if (data.hasOwnProperty('ColorSpaceConversion')) {
                obj['ColorSpaceConversion'] = ApiClient.convertToType(data['ColorSpaceConversion'], ColorSpaceConversion);
            }
            if (data.hasOwnProperty('Contrast')) {
                obj['Contrast'] = ApiClient.convertToType(data['Contrast'], 'Number');
            }
            if (data.hasOwnProperty('Hdr10Metadata')) {
                obj['Hdr10Metadata'] = ColorCorrectorHdr10Metadata.constructFromObject(data['Hdr10Metadata']);
            }
            if (data.hasOwnProperty('HdrToSdrToneMapper')) {
                obj['HdrToSdrToneMapper'] = ApiClient.convertToType(data['HdrToSdrToneMapper'], HDRToSDRToneMapper);
            }
            if (data.hasOwnProperty('Hue')) {
                obj['Hue'] = ApiClient.convertToType(data['Hue'], 'Number');
            }
            if (data.hasOwnProperty('SampleRangeConversion')) {
                obj['SampleRangeConversion'] = ApiClient.convertToType(data['SampleRangeConversion'], SampleRangeConversion);
            }
            if (data.hasOwnProperty('Saturation')) {
                obj['Saturation'] = ApiClient.convertToType(data['Saturation'], 'Number');
            }
            if (data.hasOwnProperty('SdrReferenceWhiteLevel')) {
                obj['SdrReferenceWhiteLevel'] = ApiClient.convertToType(data['SdrReferenceWhiteLevel'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColorCorrector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColorCorrector</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Brightness`
        if (data['Brightness']) { // data not null
          Number.validateJSON(data['Brightness']);
        }
        // validate the optional field `ClipLimits`
        if (data['ClipLimits']) { // data not null
          ColorCorrectorClipLimits.validateJSON(data['ClipLimits']);
        }
        // validate the optional field `ColorSpaceConversion`
        if (data['ColorSpaceConversion']) { // data not null
          ColorSpaceConversion.validateJSON(data['ColorSpaceConversion']);
        }
        // validate the optional field `Contrast`
        if (data['Contrast']) { // data not null
          Number.validateJSON(data['Contrast']);
        }
        // validate the optional field `Hdr10Metadata`
        if (data['Hdr10Metadata']) { // data not null
          ColorCorrectorHdr10Metadata.validateJSON(data['Hdr10Metadata']);
        }
        // validate the optional field `HdrToSdrToneMapper`
        if (data['HdrToSdrToneMapper']) { // data not null
          HDRToSDRToneMapper.validateJSON(data['HdrToSdrToneMapper']);
        }
        // validate the optional field `Hue`
        if (data['Hue']) { // data not null
          Number.validateJSON(data['Hue']);
        }
        // validate the optional field `SampleRangeConversion`
        if (data['SampleRangeConversion']) { // data not null
          SampleRangeConversion.validateJSON(data['SampleRangeConversion']);
        }
        // validate the optional field `Saturation`
        if (data['Saturation']) { // data not null
          Number.validateJSON(data['Saturation']);
        }
        // validate the optional field `SdrReferenceWhiteLevel`
        if (data['SdrReferenceWhiteLevel']) { // data not null
          Number.validateJSON(data['SdrReferenceWhiteLevel']);
        }

        return true;
    }


}



/**
 * @member {Number} Brightness
 */
ColorCorrector.prototype['Brightness'] = undefined;

/**
 * @member {module:model/ColorCorrectorClipLimits} ClipLimits
 */
ColorCorrector.prototype['ClipLimits'] = undefined;

/**
 * @member {module:model/ColorSpaceConversion} ColorSpaceConversion
 */
ColorCorrector.prototype['ColorSpaceConversion'] = undefined;

/**
 * @member {Number} Contrast
 */
ColorCorrector.prototype['Contrast'] = undefined;

/**
 * @member {module:model/ColorCorrectorHdr10Metadata} Hdr10Metadata
 */
ColorCorrector.prototype['Hdr10Metadata'] = undefined;

/**
 * @member {module:model/HDRToSDRToneMapper} HdrToSdrToneMapper
 */
ColorCorrector.prototype['HdrToSdrToneMapper'] = undefined;

/**
 * @member {Number} Hue
 */
ColorCorrector.prototype['Hue'] = undefined;

/**
 * @member {module:model/SampleRangeConversion} SampleRangeConversion
 */
ColorCorrector.prototype['SampleRangeConversion'] = undefined;

/**
 * @member {Number} Saturation
 */
ColorCorrector.prototype['Saturation'] = undefined;

/**
 * @member {Number} SdrReferenceWhiteLevel
 */
ColorCorrector.prototype['SdrReferenceWhiteLevel'] = undefined;






export default ColorCorrector;

