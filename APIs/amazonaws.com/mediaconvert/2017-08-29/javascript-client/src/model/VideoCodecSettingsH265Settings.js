/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import H264SettingsBandwidthReductionFilter from './H264SettingsBandwidthReductionFilter';
import H265AdaptiveQuantization from './H265AdaptiveQuantization';
import H265AlternateTransferFunctionSei from './H265AlternateTransferFunctionSei';
import H265CodecLevel from './H265CodecLevel';
import H265CodecProfile from './H265CodecProfile';
import H265DynamicSubGop from './H265DynamicSubGop';
import H265FlickerAdaptiveQuantization from './H265FlickerAdaptiveQuantization';
import H265FramerateControl from './H265FramerateControl';
import H265FramerateConversionAlgorithm from './H265FramerateConversionAlgorithm';
import H265GopBReference from './H265GopBReference';
import H265GopSizeUnits from './H265GopSizeUnits';
import H265InterlaceMode from './H265InterlaceMode';
import H265ParControl from './H265ParControl';
import H265QualityTuningLevel from './H265QualityTuningLevel';
import H265RateControlMode from './H265RateControlMode';
import H265SampleAdaptiveOffsetFilterMode from './H265SampleAdaptiveOffsetFilterMode';
import H265ScanTypeConversionMode from './H265ScanTypeConversionMode';
import H265SceneChangeDetect from './H265SceneChangeDetect';
import H265Settings from './H265Settings';
import H265SettingsQvbrSettings from './H265SettingsQvbrSettings';
import H265SlowPal from './H265SlowPal';
import H265SpatialAdaptiveQuantization from './H265SpatialAdaptiveQuantization';
import H265Telecine from './H265Telecine';
import H265TemporalAdaptiveQuantization from './H265TemporalAdaptiveQuantization';
import H265TemporalIds from './H265TemporalIds';
import H265Tiles from './H265Tiles';
import H265UnregisteredSeiTimecode from './H265UnregisteredSeiTimecode';
import H265WriteMp4PackagingType from './H265WriteMp4PackagingType';

/**
 * The VideoCodecSettingsH265Settings model module.
 * @module model/VideoCodecSettingsH265Settings
 * @version 2017-08-29
 */
class VideoCodecSettingsH265Settings {
    /**
     * Constructs a new <code>VideoCodecSettingsH265Settings</code>.
     * @alias module:model/VideoCodecSettingsH265Settings
     * @implements module:model/H265Settings
     */
    constructor() { 
        H265Settings.initialize(this);
        VideoCodecSettingsH265Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoCodecSettingsH265Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCodecSettingsH265Settings} obj Optional instance to populate.
     * @return {module:model/VideoCodecSettingsH265Settings} The populated <code>VideoCodecSettingsH265Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCodecSettingsH265Settings();
            H265Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('AdaptiveQuantization')) {
                obj['AdaptiveQuantization'] = ApiClient.convertToType(data['AdaptiveQuantization'], H265AdaptiveQuantization);
            }
            if (data.hasOwnProperty('AlternateTransferFunctionSei')) {
                obj['AlternateTransferFunctionSei'] = ApiClient.convertToType(data['AlternateTransferFunctionSei'], H265AlternateTransferFunctionSei);
            }
            if (data.hasOwnProperty('BandwidthReductionFilter')) {
                obj['BandwidthReductionFilter'] = H264SettingsBandwidthReductionFilter.constructFromObject(data['BandwidthReductionFilter']);
            }
            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('CodecLevel')) {
                obj['CodecLevel'] = ApiClient.convertToType(data['CodecLevel'], H265CodecLevel);
            }
            if (data.hasOwnProperty('CodecProfile')) {
                obj['CodecProfile'] = ApiClient.convertToType(data['CodecProfile'], H265CodecProfile);
            }
            if (data.hasOwnProperty('DynamicSubGop')) {
                obj['DynamicSubGop'] = ApiClient.convertToType(data['DynamicSubGop'], H265DynamicSubGop);
            }
            if (data.hasOwnProperty('FlickerAdaptiveQuantization')) {
                obj['FlickerAdaptiveQuantization'] = ApiClient.convertToType(data['FlickerAdaptiveQuantization'], H265FlickerAdaptiveQuantization);
            }
            if (data.hasOwnProperty('FramerateControl')) {
                obj['FramerateControl'] = ApiClient.convertToType(data['FramerateControl'], H265FramerateControl);
            }
            if (data.hasOwnProperty('FramerateConversionAlgorithm')) {
                obj['FramerateConversionAlgorithm'] = ApiClient.convertToType(data['FramerateConversionAlgorithm'], H265FramerateConversionAlgorithm);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('GopBReference')) {
                obj['GopBReference'] = ApiClient.convertToType(data['GopBReference'], H265GopBReference);
            }
            if (data.hasOwnProperty('GopClosedCadence')) {
                obj['GopClosedCadence'] = ApiClient.convertToType(data['GopClosedCadence'], 'Number');
            }
            if (data.hasOwnProperty('GopSize')) {
                obj['GopSize'] = ApiClient.convertToType(data['GopSize'], 'Number');
            }
            if (data.hasOwnProperty('GopSizeUnits')) {
                obj['GopSizeUnits'] = ApiClient.convertToType(data['GopSizeUnits'], H265GopSizeUnits);
            }
            if (data.hasOwnProperty('HrdBufferFinalFillPercentage')) {
                obj['HrdBufferFinalFillPercentage'] = ApiClient.convertToType(data['HrdBufferFinalFillPercentage'], 'Number');
            }
            if (data.hasOwnProperty('HrdBufferInitialFillPercentage')) {
                obj['HrdBufferInitialFillPercentage'] = ApiClient.convertToType(data['HrdBufferInitialFillPercentage'], 'Number');
            }
            if (data.hasOwnProperty('HrdBufferSize')) {
                obj['HrdBufferSize'] = ApiClient.convertToType(data['HrdBufferSize'], 'Number');
            }
            if (data.hasOwnProperty('InterlaceMode')) {
                obj['InterlaceMode'] = ApiClient.convertToType(data['InterlaceMode'], H265InterlaceMode);
            }
            if (data.hasOwnProperty('MaxBitrate')) {
                obj['MaxBitrate'] = ApiClient.convertToType(data['MaxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MinIInterval')) {
                obj['MinIInterval'] = ApiClient.convertToType(data['MinIInterval'], 'Number');
            }
            if (data.hasOwnProperty('NumberBFramesBetweenReferenceFrames')) {
                obj['NumberBFramesBetweenReferenceFrames'] = ApiClient.convertToType(data['NumberBFramesBetweenReferenceFrames'], 'Number');
            }
            if (data.hasOwnProperty('NumberReferenceFrames')) {
                obj['NumberReferenceFrames'] = ApiClient.convertToType(data['NumberReferenceFrames'], 'Number');
            }
            if (data.hasOwnProperty('ParControl')) {
                obj['ParControl'] = ApiClient.convertToType(data['ParControl'], H265ParControl);
            }
            if (data.hasOwnProperty('ParDenominator')) {
                obj['ParDenominator'] = ApiClient.convertToType(data['ParDenominator'], 'Number');
            }
            if (data.hasOwnProperty('ParNumerator')) {
                obj['ParNumerator'] = ApiClient.convertToType(data['ParNumerator'], 'Number');
            }
            if (data.hasOwnProperty('QualityTuningLevel')) {
                obj['QualityTuningLevel'] = ApiClient.convertToType(data['QualityTuningLevel'], H265QualityTuningLevel);
            }
            if (data.hasOwnProperty('QvbrSettings')) {
                obj['QvbrSettings'] = H265SettingsQvbrSettings.constructFromObject(data['QvbrSettings']);
            }
            if (data.hasOwnProperty('RateControlMode')) {
                obj['RateControlMode'] = ApiClient.convertToType(data['RateControlMode'], H265RateControlMode);
            }
            if (data.hasOwnProperty('SampleAdaptiveOffsetFilterMode')) {
                obj['SampleAdaptiveOffsetFilterMode'] = ApiClient.convertToType(data['SampleAdaptiveOffsetFilterMode'], H265SampleAdaptiveOffsetFilterMode);
            }
            if (data.hasOwnProperty('ScanTypeConversionMode')) {
                obj['ScanTypeConversionMode'] = ApiClient.convertToType(data['ScanTypeConversionMode'], H265ScanTypeConversionMode);
            }
            if (data.hasOwnProperty('SceneChangeDetect')) {
                obj['SceneChangeDetect'] = ApiClient.convertToType(data['SceneChangeDetect'], H265SceneChangeDetect);
            }
            if (data.hasOwnProperty('Slices')) {
                obj['Slices'] = ApiClient.convertToType(data['Slices'], 'Number');
            }
            if (data.hasOwnProperty('SlowPal')) {
                obj['SlowPal'] = ApiClient.convertToType(data['SlowPal'], H265SlowPal);
            }
            if (data.hasOwnProperty('SpatialAdaptiveQuantization')) {
                obj['SpatialAdaptiveQuantization'] = ApiClient.convertToType(data['SpatialAdaptiveQuantization'], H265SpatialAdaptiveQuantization);
            }
            if (data.hasOwnProperty('Telecine')) {
                obj['Telecine'] = ApiClient.convertToType(data['Telecine'], H265Telecine);
            }
            if (data.hasOwnProperty('TemporalAdaptiveQuantization')) {
                obj['TemporalAdaptiveQuantization'] = ApiClient.convertToType(data['TemporalAdaptiveQuantization'], H265TemporalAdaptiveQuantization);
            }
            if (data.hasOwnProperty('TemporalIds')) {
                obj['TemporalIds'] = ApiClient.convertToType(data['TemporalIds'], H265TemporalIds);
            }
            if (data.hasOwnProperty('Tiles')) {
                obj['Tiles'] = ApiClient.convertToType(data['Tiles'], H265Tiles);
            }
            if (data.hasOwnProperty('UnregisteredSeiTimecode')) {
                obj['UnregisteredSeiTimecode'] = ApiClient.convertToType(data['UnregisteredSeiTimecode'], H265UnregisteredSeiTimecode);
            }
            if (data.hasOwnProperty('WriteMp4PackagingType')) {
                obj['WriteMp4PackagingType'] = ApiClient.convertToType(data['WriteMp4PackagingType'], H265WriteMp4PackagingType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCodecSettingsH265Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCodecSettingsH265Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AdaptiveQuantization`
        if (data['AdaptiveQuantization']) { // data not null
          H265AdaptiveQuantization.validateJSON(data['AdaptiveQuantization']);
        }
        // validate the optional field `AlternateTransferFunctionSei`
        if (data['AlternateTransferFunctionSei']) { // data not null
          H265AlternateTransferFunctionSei.validateJSON(data['AlternateTransferFunctionSei']);
        }
        // validate the optional field `BandwidthReductionFilter`
        if (data['BandwidthReductionFilter']) { // data not null
          H264SettingsBandwidthReductionFilter.validateJSON(data['BandwidthReductionFilter']);
        }
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `CodecLevel`
        if (data['CodecLevel']) { // data not null
          H265CodecLevel.validateJSON(data['CodecLevel']);
        }
        // validate the optional field `CodecProfile`
        if (data['CodecProfile']) { // data not null
          H265CodecProfile.validateJSON(data['CodecProfile']);
        }
        // validate the optional field `DynamicSubGop`
        if (data['DynamicSubGop']) { // data not null
          H265DynamicSubGop.validateJSON(data['DynamicSubGop']);
        }
        // validate the optional field `FlickerAdaptiveQuantization`
        if (data['FlickerAdaptiveQuantization']) { // data not null
          H265FlickerAdaptiveQuantization.validateJSON(data['FlickerAdaptiveQuantization']);
        }
        // validate the optional field `FramerateControl`
        if (data['FramerateControl']) { // data not null
          H265FramerateControl.validateJSON(data['FramerateControl']);
        }
        // validate the optional field `FramerateConversionAlgorithm`
        if (data['FramerateConversionAlgorithm']) { // data not null
          H265FramerateConversionAlgorithm.validateJSON(data['FramerateConversionAlgorithm']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `GopBReference`
        if (data['GopBReference']) { // data not null
          H265GopBReference.validateJSON(data['GopBReference']);
        }
        // validate the optional field `GopClosedCadence`
        if (data['GopClosedCadence']) { // data not null
          Number.validateJSON(data['GopClosedCadence']);
        }
        // validate the optional field `GopSize`
        if (data['GopSize']) { // data not null
          Number.validateJSON(data['GopSize']);
        }
        // validate the optional field `GopSizeUnits`
        if (data['GopSizeUnits']) { // data not null
          H265GopSizeUnits.validateJSON(data['GopSizeUnits']);
        }
        // validate the optional field `HrdBufferFinalFillPercentage`
        if (data['HrdBufferFinalFillPercentage']) { // data not null
          Number.validateJSON(data['HrdBufferFinalFillPercentage']);
        }
        // validate the optional field `HrdBufferInitialFillPercentage`
        if (data['HrdBufferInitialFillPercentage']) { // data not null
          Number.validateJSON(data['HrdBufferInitialFillPercentage']);
        }
        // validate the optional field `HrdBufferSize`
        if (data['HrdBufferSize']) { // data not null
          Number.validateJSON(data['HrdBufferSize']);
        }
        // validate the optional field `InterlaceMode`
        if (data['InterlaceMode']) { // data not null
          H265InterlaceMode.validateJSON(data['InterlaceMode']);
        }
        // validate the optional field `MaxBitrate`
        if (data['MaxBitrate']) { // data not null
          Number.validateJSON(data['MaxBitrate']);
        }
        // validate the optional field `MinIInterval`
        if (data['MinIInterval']) { // data not null
          Number.validateJSON(data['MinIInterval']);
        }
        // validate the optional field `NumberBFramesBetweenReferenceFrames`
        if (data['NumberBFramesBetweenReferenceFrames']) { // data not null
          Number.validateJSON(data['NumberBFramesBetweenReferenceFrames']);
        }
        // validate the optional field `NumberReferenceFrames`
        if (data['NumberReferenceFrames']) { // data not null
          Number.validateJSON(data['NumberReferenceFrames']);
        }
        // validate the optional field `ParControl`
        if (data['ParControl']) { // data not null
          H265ParControl.validateJSON(data['ParControl']);
        }
        // validate the optional field `ParDenominator`
        if (data['ParDenominator']) { // data not null
          Number.validateJSON(data['ParDenominator']);
        }
        // validate the optional field `ParNumerator`
        if (data['ParNumerator']) { // data not null
          Number.validateJSON(data['ParNumerator']);
        }
        // validate the optional field `QualityTuningLevel`
        if (data['QualityTuningLevel']) { // data not null
          H265QualityTuningLevel.validateJSON(data['QualityTuningLevel']);
        }
        // validate the optional field `QvbrSettings`
        if (data['QvbrSettings']) { // data not null
          H265SettingsQvbrSettings.validateJSON(data['QvbrSettings']);
        }
        // validate the optional field `RateControlMode`
        if (data['RateControlMode']) { // data not null
          H265RateControlMode.validateJSON(data['RateControlMode']);
        }
        // validate the optional field `SampleAdaptiveOffsetFilterMode`
        if (data['SampleAdaptiveOffsetFilterMode']) { // data not null
          H265SampleAdaptiveOffsetFilterMode.validateJSON(data['SampleAdaptiveOffsetFilterMode']);
        }
        // validate the optional field `ScanTypeConversionMode`
        if (data['ScanTypeConversionMode']) { // data not null
          H265ScanTypeConversionMode.validateJSON(data['ScanTypeConversionMode']);
        }
        // validate the optional field `SceneChangeDetect`
        if (data['SceneChangeDetect']) { // data not null
          H265SceneChangeDetect.validateJSON(data['SceneChangeDetect']);
        }
        // validate the optional field `Slices`
        if (data['Slices']) { // data not null
          Number.validateJSON(data['Slices']);
        }
        // validate the optional field `SlowPal`
        if (data['SlowPal']) { // data not null
          H265SlowPal.validateJSON(data['SlowPal']);
        }
        // validate the optional field `SpatialAdaptiveQuantization`
        if (data['SpatialAdaptiveQuantization']) { // data not null
          H265SpatialAdaptiveQuantization.validateJSON(data['SpatialAdaptiveQuantization']);
        }
        // validate the optional field `Telecine`
        if (data['Telecine']) { // data not null
          H265Telecine.validateJSON(data['Telecine']);
        }
        // validate the optional field `TemporalAdaptiveQuantization`
        if (data['TemporalAdaptiveQuantization']) { // data not null
          H265TemporalAdaptiveQuantization.validateJSON(data['TemporalAdaptiveQuantization']);
        }
        // validate the optional field `TemporalIds`
        if (data['TemporalIds']) { // data not null
          H265TemporalIds.validateJSON(data['TemporalIds']);
        }
        // validate the optional field `Tiles`
        if (data['Tiles']) { // data not null
          H265Tiles.validateJSON(data['Tiles']);
        }
        // validate the optional field `UnregisteredSeiTimecode`
        if (data['UnregisteredSeiTimecode']) { // data not null
          H265UnregisteredSeiTimecode.validateJSON(data['UnregisteredSeiTimecode']);
        }
        // validate the optional field `WriteMp4PackagingType`
        if (data['WriteMp4PackagingType']) { // data not null
          H265WriteMp4PackagingType.validateJSON(data['WriteMp4PackagingType']);
        }

        return true;
    }


}



/**
 * @member {module:model/H265AdaptiveQuantization} AdaptiveQuantization
 */
VideoCodecSettingsH265Settings.prototype['AdaptiveQuantization'] = undefined;

/**
 * @member {module:model/H265AlternateTransferFunctionSei} AlternateTransferFunctionSei
 */
VideoCodecSettingsH265Settings.prototype['AlternateTransferFunctionSei'] = undefined;

/**
 * @member {module:model/H264SettingsBandwidthReductionFilter} BandwidthReductionFilter
 */
VideoCodecSettingsH265Settings.prototype['BandwidthReductionFilter'] = undefined;

/**
 * @member {Number} Bitrate
 */
VideoCodecSettingsH265Settings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/H265CodecLevel} CodecLevel
 */
VideoCodecSettingsH265Settings.prototype['CodecLevel'] = undefined;

/**
 * @member {module:model/H265CodecProfile} CodecProfile
 */
VideoCodecSettingsH265Settings.prototype['CodecProfile'] = undefined;

/**
 * @member {module:model/H265DynamicSubGop} DynamicSubGop
 */
VideoCodecSettingsH265Settings.prototype['DynamicSubGop'] = undefined;

/**
 * @member {module:model/H265FlickerAdaptiveQuantization} FlickerAdaptiveQuantization
 */
VideoCodecSettingsH265Settings.prototype['FlickerAdaptiveQuantization'] = undefined;

/**
 * @member {module:model/H265FramerateControl} FramerateControl
 */
VideoCodecSettingsH265Settings.prototype['FramerateControl'] = undefined;

/**
 * @member {module:model/H265FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
VideoCodecSettingsH265Settings.prototype['FramerateConversionAlgorithm'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
VideoCodecSettingsH265Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
VideoCodecSettingsH265Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {module:model/H265GopBReference} GopBReference
 */
VideoCodecSettingsH265Settings.prototype['GopBReference'] = undefined;

/**
 * @member {Number} GopClosedCadence
 */
VideoCodecSettingsH265Settings.prototype['GopClosedCadence'] = undefined;

/**
 * @member {Number} GopSize
 */
VideoCodecSettingsH265Settings.prototype['GopSize'] = undefined;

/**
 * @member {module:model/H265GopSizeUnits} GopSizeUnits
 */
VideoCodecSettingsH265Settings.prototype['GopSizeUnits'] = undefined;

/**
 * @member {Number} HrdBufferFinalFillPercentage
 */
VideoCodecSettingsH265Settings.prototype['HrdBufferFinalFillPercentage'] = undefined;

/**
 * @member {Number} HrdBufferInitialFillPercentage
 */
VideoCodecSettingsH265Settings.prototype['HrdBufferInitialFillPercentage'] = undefined;

/**
 * @member {Number} HrdBufferSize
 */
VideoCodecSettingsH265Settings.prototype['HrdBufferSize'] = undefined;

/**
 * @member {module:model/H265InterlaceMode} InterlaceMode
 */
VideoCodecSettingsH265Settings.prototype['InterlaceMode'] = undefined;

/**
 * @member {Number} MaxBitrate
 */
VideoCodecSettingsH265Settings.prototype['MaxBitrate'] = undefined;

/**
 * @member {Number} MinIInterval
 */
VideoCodecSettingsH265Settings.prototype['MinIInterval'] = undefined;

/**
 * @member {Number} NumberBFramesBetweenReferenceFrames
 */
VideoCodecSettingsH265Settings.prototype['NumberBFramesBetweenReferenceFrames'] = undefined;

/**
 * @member {Number} NumberReferenceFrames
 */
VideoCodecSettingsH265Settings.prototype['NumberReferenceFrames'] = undefined;

/**
 * @member {module:model/H265ParControl} ParControl
 */
VideoCodecSettingsH265Settings.prototype['ParControl'] = undefined;

/**
 * @member {Number} ParDenominator
 */
VideoCodecSettingsH265Settings.prototype['ParDenominator'] = undefined;

/**
 * @member {Number} ParNumerator
 */
VideoCodecSettingsH265Settings.prototype['ParNumerator'] = undefined;

/**
 * @member {module:model/H265QualityTuningLevel} QualityTuningLevel
 */
VideoCodecSettingsH265Settings.prototype['QualityTuningLevel'] = undefined;

/**
 * @member {module:model/H265SettingsQvbrSettings} QvbrSettings
 */
VideoCodecSettingsH265Settings.prototype['QvbrSettings'] = undefined;

/**
 * @member {module:model/H265RateControlMode} RateControlMode
 */
VideoCodecSettingsH265Settings.prototype['RateControlMode'] = undefined;

/**
 * @member {module:model/H265SampleAdaptiveOffsetFilterMode} SampleAdaptiveOffsetFilterMode
 */
VideoCodecSettingsH265Settings.prototype['SampleAdaptiveOffsetFilterMode'] = undefined;

/**
 * @member {module:model/H265ScanTypeConversionMode} ScanTypeConversionMode
 */
VideoCodecSettingsH265Settings.prototype['ScanTypeConversionMode'] = undefined;

/**
 * @member {module:model/H265SceneChangeDetect} SceneChangeDetect
 */
VideoCodecSettingsH265Settings.prototype['SceneChangeDetect'] = undefined;

/**
 * @member {Number} Slices
 */
VideoCodecSettingsH265Settings.prototype['Slices'] = undefined;

/**
 * @member {module:model/H265SlowPal} SlowPal
 */
VideoCodecSettingsH265Settings.prototype['SlowPal'] = undefined;

/**
 * @member {module:model/H265SpatialAdaptiveQuantization} SpatialAdaptiveQuantization
 */
VideoCodecSettingsH265Settings.prototype['SpatialAdaptiveQuantization'] = undefined;

/**
 * @member {module:model/H265Telecine} Telecine
 */
VideoCodecSettingsH265Settings.prototype['Telecine'] = undefined;

/**
 * @member {module:model/H265TemporalAdaptiveQuantization} TemporalAdaptiveQuantization
 */
VideoCodecSettingsH265Settings.prototype['TemporalAdaptiveQuantization'] = undefined;

/**
 * @member {module:model/H265TemporalIds} TemporalIds
 */
VideoCodecSettingsH265Settings.prototype['TemporalIds'] = undefined;

/**
 * @member {module:model/H265Tiles} Tiles
 */
VideoCodecSettingsH265Settings.prototype['Tiles'] = undefined;

/**
 * @member {module:model/H265UnregisteredSeiTimecode} UnregisteredSeiTimecode
 */
VideoCodecSettingsH265Settings.prototype['UnregisteredSeiTimecode'] = undefined;

/**
 * @member {module:model/H265WriteMp4PackagingType} WriteMp4PackagingType
 */
VideoCodecSettingsH265Settings.prototype['WriteMp4PackagingType'] = undefined;


// Implement H265Settings interface:
/**
 * @member {module:model/H265AdaptiveQuantization} AdaptiveQuantization
 */
H265Settings.prototype['AdaptiveQuantization'] = undefined;
/**
 * @member {module:model/H265AlternateTransferFunctionSei} AlternateTransferFunctionSei
 */
H265Settings.prototype['AlternateTransferFunctionSei'] = undefined;
/**
 * @member {module:model/H264SettingsBandwidthReductionFilter} BandwidthReductionFilter
 */
H265Settings.prototype['BandwidthReductionFilter'] = undefined;
/**
 * @member {Number} Bitrate
 */
H265Settings.prototype['Bitrate'] = undefined;
/**
 * @member {module:model/H265CodecLevel} CodecLevel
 */
H265Settings.prototype['CodecLevel'] = undefined;
/**
 * @member {module:model/H265CodecProfile} CodecProfile
 */
H265Settings.prototype['CodecProfile'] = undefined;
/**
 * @member {module:model/H265DynamicSubGop} DynamicSubGop
 */
H265Settings.prototype['DynamicSubGop'] = undefined;
/**
 * @member {module:model/H265FlickerAdaptiveQuantization} FlickerAdaptiveQuantization
 */
H265Settings.prototype['FlickerAdaptiveQuantization'] = undefined;
/**
 * @member {module:model/H265FramerateControl} FramerateControl
 */
H265Settings.prototype['FramerateControl'] = undefined;
/**
 * @member {module:model/H265FramerateConversionAlgorithm} FramerateConversionAlgorithm
 */
H265Settings.prototype['FramerateConversionAlgorithm'] = undefined;
/**
 * @member {Number} FramerateDenominator
 */
H265Settings.prototype['FramerateDenominator'] = undefined;
/**
 * @member {Number} FramerateNumerator
 */
H265Settings.prototype['FramerateNumerator'] = undefined;
/**
 * @member {module:model/H265GopBReference} GopBReference
 */
H265Settings.prototype['GopBReference'] = undefined;
/**
 * @member {Number} GopClosedCadence
 */
H265Settings.prototype['GopClosedCadence'] = undefined;
/**
 * @member {Number} GopSize
 */
H265Settings.prototype['GopSize'] = undefined;
/**
 * @member {module:model/H265GopSizeUnits} GopSizeUnits
 */
H265Settings.prototype['GopSizeUnits'] = undefined;
/**
 * @member {Number} HrdBufferFinalFillPercentage
 */
H265Settings.prototype['HrdBufferFinalFillPercentage'] = undefined;
/**
 * @member {Number} HrdBufferInitialFillPercentage
 */
H265Settings.prototype['HrdBufferInitialFillPercentage'] = undefined;
/**
 * @member {Number} HrdBufferSize
 */
H265Settings.prototype['HrdBufferSize'] = undefined;
/**
 * @member {module:model/H265InterlaceMode} InterlaceMode
 */
H265Settings.prototype['InterlaceMode'] = undefined;
/**
 * @member {Number} MaxBitrate
 */
H265Settings.prototype['MaxBitrate'] = undefined;
/**
 * @member {Number} MinIInterval
 */
H265Settings.prototype['MinIInterval'] = undefined;
/**
 * @member {Number} NumberBFramesBetweenReferenceFrames
 */
H265Settings.prototype['NumberBFramesBetweenReferenceFrames'] = undefined;
/**
 * @member {Number} NumberReferenceFrames
 */
H265Settings.prototype['NumberReferenceFrames'] = undefined;
/**
 * @member {module:model/H265ParControl} ParControl
 */
H265Settings.prototype['ParControl'] = undefined;
/**
 * @member {Number} ParDenominator
 */
H265Settings.prototype['ParDenominator'] = undefined;
/**
 * @member {Number} ParNumerator
 */
H265Settings.prototype['ParNumerator'] = undefined;
/**
 * @member {module:model/H265QualityTuningLevel} QualityTuningLevel
 */
H265Settings.prototype['QualityTuningLevel'] = undefined;
/**
 * @member {module:model/H265SettingsQvbrSettings} QvbrSettings
 */
H265Settings.prototype['QvbrSettings'] = undefined;
/**
 * @member {module:model/H265RateControlMode} RateControlMode
 */
H265Settings.prototype['RateControlMode'] = undefined;
/**
 * @member {module:model/H265SampleAdaptiveOffsetFilterMode} SampleAdaptiveOffsetFilterMode
 */
H265Settings.prototype['SampleAdaptiveOffsetFilterMode'] = undefined;
/**
 * @member {module:model/H265ScanTypeConversionMode} ScanTypeConversionMode
 */
H265Settings.prototype['ScanTypeConversionMode'] = undefined;
/**
 * @member {module:model/H265SceneChangeDetect} SceneChangeDetect
 */
H265Settings.prototype['SceneChangeDetect'] = undefined;
/**
 * @member {Number} Slices
 */
H265Settings.prototype['Slices'] = undefined;
/**
 * @member {module:model/H265SlowPal} SlowPal
 */
H265Settings.prototype['SlowPal'] = undefined;
/**
 * @member {module:model/H265SpatialAdaptiveQuantization} SpatialAdaptiveQuantization
 */
H265Settings.prototype['SpatialAdaptiveQuantization'] = undefined;
/**
 * @member {module:model/H265Telecine} Telecine
 */
H265Settings.prototype['Telecine'] = undefined;
/**
 * @member {module:model/H265TemporalAdaptiveQuantization} TemporalAdaptiveQuantization
 */
H265Settings.prototype['TemporalAdaptiveQuantization'] = undefined;
/**
 * @member {module:model/H265TemporalIds} TemporalIds
 */
H265Settings.prototype['TemporalIds'] = undefined;
/**
 * @member {module:model/H265Tiles} Tiles
 */
H265Settings.prototype['Tiles'] = undefined;
/**
 * @member {module:model/H265UnregisteredSeiTimecode} UnregisteredSeiTimecode
 */
H265Settings.prototype['UnregisteredSeiTimecode'] = undefined;
/**
 * @member {module:model/H265WriteMp4PackagingType} WriteMp4PackagingType
 */
H265Settings.prototype['WriteMp4PackagingType'] = undefined;




export default VideoCodecSettingsH265Settings;

