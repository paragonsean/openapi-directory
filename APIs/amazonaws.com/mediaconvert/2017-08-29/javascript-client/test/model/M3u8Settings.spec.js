/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaConvert);
  }
}(this, function(expect, AwsElementalMediaConvert) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaConvert.M3u8Settings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('M3u8Settings', function() {
    it('should create an instance of M3u8Settings', function() {
      // uncomment below and update the code to test M3u8Settings
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be.a(AwsElementalMediaConvert.M3u8Settings);
    });

    it('should have the property audioDuration (base name: "AudioDuration")', function() {
      // uncomment below and update the code to test the property audioDuration
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property audioFramesPerPes (base name: "AudioFramesPerPes")', function() {
      // uncomment below and update the code to test the property audioFramesPerPes
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property audioPids (base name: "AudioPids")', function() {
      // uncomment below and update the code to test the property audioPids
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property dataPTSControl (base name: "DataPTSControl")', function() {
      // uncomment below and update the code to test the property dataPTSControl
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property maxPcrInterval (base name: "MaxPcrInterval")', function() {
      // uncomment below and update the code to test the property maxPcrInterval
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property nielsenId3 (base name: "NielsenId3")', function() {
      // uncomment below and update the code to test the property nielsenId3
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property patInterval (base name: "PatInterval")', function() {
      // uncomment below and update the code to test the property patInterval
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property pcrControl (base name: "PcrControl")', function() {
      // uncomment below and update the code to test the property pcrControl
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property pcrPid (base name: "PcrPid")', function() {
      // uncomment below and update the code to test the property pcrPid
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property pmtInterval (base name: "PmtInterval")', function() {
      // uncomment below and update the code to test the property pmtInterval
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property pmtPid (base name: "PmtPid")', function() {
      // uncomment below and update the code to test the property pmtPid
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property privateMetadataPid (base name: "PrivateMetadataPid")', function() {
      // uncomment below and update the code to test the property privateMetadataPid
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property programNumber (base name: "ProgramNumber")', function() {
      // uncomment below and update the code to test the property programNumber
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property scte35Pid (base name: "Scte35Pid")', function() {
      // uncomment below and update the code to test the property scte35Pid
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property scte35Source (base name: "Scte35Source")', function() {
      // uncomment below and update the code to test the property scte35Source
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property timedMetadata (base name: "TimedMetadata")', function() {
      // uncomment below and update the code to test the property timedMetadata
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property timedMetadataPid (base name: "TimedMetadataPid")', function() {
      // uncomment below and update the code to test the property timedMetadataPid
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property transportStreamId (base name: "TransportStreamId")', function() {
      // uncomment below and update the code to test the property transportStreamId
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

    it('should have the property videoPid (base name: "VideoPid")', function() {
      // uncomment below and update the code to test the property videoPid
      //var instance = new AwsElementalMediaConvert.M3u8Settings();
      //expect(instance).to.be();
    });

  });

}));
