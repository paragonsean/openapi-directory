/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaConvert);
  }
}(this, function(expect, AwsElementalMediaConvert) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaConvert.H264Settings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('H264Settings', function() {
    it('should create an instance of H264Settings', function() {
      // uncomment below and update the code to test H264Settings
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be.a(AwsElementalMediaConvert.H264Settings);
    });

    it('should have the property adaptiveQuantization (base name: "AdaptiveQuantization")', function() {
      // uncomment below and update the code to test the property adaptiveQuantization
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property bandwidthReductionFilter (base name: "BandwidthReductionFilter")', function() {
      // uncomment below and update the code to test the property bandwidthReductionFilter
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property bitrate (base name: "Bitrate")', function() {
      // uncomment below and update the code to test the property bitrate
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property codecLevel (base name: "CodecLevel")', function() {
      // uncomment below and update the code to test the property codecLevel
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property codecProfile (base name: "CodecProfile")', function() {
      // uncomment below and update the code to test the property codecProfile
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property dynamicSubGop (base name: "DynamicSubGop")', function() {
      // uncomment below and update the code to test the property dynamicSubGop
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property entropyEncoding (base name: "EntropyEncoding")', function() {
      // uncomment below and update the code to test the property entropyEncoding
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property fieldEncoding (base name: "FieldEncoding")', function() {
      // uncomment below and update the code to test the property fieldEncoding
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property flickerAdaptiveQuantization (base name: "FlickerAdaptiveQuantization")', function() {
      // uncomment below and update the code to test the property flickerAdaptiveQuantization
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property framerateControl (base name: "FramerateControl")', function() {
      // uncomment below and update the code to test the property framerateControl
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property framerateConversionAlgorithm (base name: "FramerateConversionAlgorithm")', function() {
      // uncomment below and update the code to test the property framerateConversionAlgorithm
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property framerateDenominator (base name: "FramerateDenominator")', function() {
      // uncomment below and update the code to test the property framerateDenominator
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property framerateNumerator (base name: "FramerateNumerator")', function() {
      // uncomment below and update the code to test the property framerateNumerator
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property gopBReference (base name: "GopBReference")', function() {
      // uncomment below and update the code to test the property gopBReference
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property gopClosedCadence (base name: "GopClosedCadence")', function() {
      // uncomment below and update the code to test the property gopClosedCadence
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property gopSize (base name: "GopSize")', function() {
      // uncomment below and update the code to test the property gopSize
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property gopSizeUnits (base name: "GopSizeUnits")', function() {
      // uncomment below and update the code to test the property gopSizeUnits
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property hrdBufferFinalFillPercentage (base name: "HrdBufferFinalFillPercentage")', function() {
      // uncomment below and update the code to test the property hrdBufferFinalFillPercentage
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property hrdBufferInitialFillPercentage (base name: "HrdBufferInitialFillPercentage")', function() {
      // uncomment below and update the code to test the property hrdBufferInitialFillPercentage
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property hrdBufferSize (base name: "HrdBufferSize")', function() {
      // uncomment below and update the code to test the property hrdBufferSize
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property interlaceMode (base name: "InterlaceMode")', function() {
      // uncomment below and update the code to test the property interlaceMode
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property maxBitrate (base name: "MaxBitrate")', function() {
      // uncomment below and update the code to test the property maxBitrate
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property minIInterval (base name: "MinIInterval")', function() {
      // uncomment below and update the code to test the property minIInterval
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property numberBFramesBetweenReferenceFrames (base name: "NumberBFramesBetweenReferenceFrames")', function() {
      // uncomment below and update the code to test the property numberBFramesBetweenReferenceFrames
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property numberReferenceFrames (base name: "NumberReferenceFrames")', function() {
      // uncomment below and update the code to test the property numberReferenceFrames
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property parControl (base name: "ParControl")', function() {
      // uncomment below and update the code to test the property parControl
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property parDenominator (base name: "ParDenominator")', function() {
      // uncomment below and update the code to test the property parDenominator
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property parNumerator (base name: "ParNumerator")', function() {
      // uncomment below and update the code to test the property parNumerator
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property qualityTuningLevel (base name: "QualityTuningLevel")', function() {
      // uncomment below and update the code to test the property qualityTuningLevel
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property qvbrSettings (base name: "QvbrSettings")', function() {
      // uncomment below and update the code to test the property qvbrSettings
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property rateControlMode (base name: "RateControlMode")', function() {
      // uncomment below and update the code to test the property rateControlMode
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property repeatPps (base name: "RepeatPps")', function() {
      // uncomment below and update the code to test the property repeatPps
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property scanTypeConversionMode (base name: "ScanTypeConversionMode")', function() {
      // uncomment below and update the code to test the property scanTypeConversionMode
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property sceneChangeDetect (base name: "SceneChangeDetect")', function() {
      // uncomment below and update the code to test the property sceneChangeDetect
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property slices (base name: "Slices")', function() {
      // uncomment below and update the code to test the property slices
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property slowPal (base name: "SlowPal")', function() {
      // uncomment below and update the code to test the property slowPal
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property softness (base name: "Softness")', function() {
      // uncomment below and update the code to test the property softness
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property spatialAdaptiveQuantization (base name: "SpatialAdaptiveQuantization")', function() {
      // uncomment below and update the code to test the property spatialAdaptiveQuantization
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property syntax (base name: "Syntax")', function() {
      // uncomment below and update the code to test the property syntax
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property telecine (base name: "Telecine")', function() {
      // uncomment below and update the code to test the property telecine
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property temporalAdaptiveQuantization (base name: "TemporalAdaptiveQuantization")', function() {
      // uncomment below and update the code to test the property temporalAdaptiveQuantization
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

    it('should have the property unregisteredSeiTimecode (base name: "UnregisteredSeiTimecode")', function() {
      // uncomment below and update the code to test the property unregisteredSeiTimecode
      //var instance = new AwsElementalMediaConvert.H264Settings();
      //expect(instance).to.be();
    });

  });

}));
