/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaConvert);
  }
}(this, function(expect, AwsElementalMediaConvert) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AudioCodecSettingsEac3AtmosSettings', function() {
    it('should create an instance of AudioCodecSettingsEac3AtmosSettings', function() {
      // uncomment below and update the code to test AudioCodecSettingsEac3AtmosSettings
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be.a(AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings);
    });

    it('should have the property bitrate (base name: "Bitrate")', function() {
      // uncomment below and update the code to test the property bitrate
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property bitstreamMode (base name: "BitstreamMode")', function() {
      // uncomment below and update the code to test the property bitstreamMode
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property codingMode (base name: "CodingMode")', function() {
      // uncomment below and update the code to test the property codingMode
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property dialogueIntelligence (base name: "DialogueIntelligence")', function() {
      // uncomment below and update the code to test the property dialogueIntelligence
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property downmixControl (base name: "DownmixControl")', function() {
      // uncomment below and update the code to test the property downmixControl
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property dynamicRangeCompressionLine (base name: "DynamicRangeCompressionLine")', function() {
      // uncomment below and update the code to test the property dynamicRangeCompressionLine
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property dynamicRangeCompressionRf (base name: "DynamicRangeCompressionRf")', function() {
      // uncomment below and update the code to test the property dynamicRangeCompressionRf
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property dynamicRangeControl (base name: "DynamicRangeControl")', function() {
      // uncomment below and update the code to test the property dynamicRangeControl
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property loRoCenterMixLevel (base name: "LoRoCenterMixLevel")', function() {
      // uncomment below and update the code to test the property loRoCenterMixLevel
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property loRoSurroundMixLevel (base name: "LoRoSurroundMixLevel")', function() {
      // uncomment below and update the code to test the property loRoSurroundMixLevel
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property ltRtCenterMixLevel (base name: "LtRtCenterMixLevel")', function() {
      // uncomment below and update the code to test the property ltRtCenterMixLevel
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property ltRtSurroundMixLevel (base name: "LtRtSurroundMixLevel")', function() {
      // uncomment below and update the code to test the property ltRtSurroundMixLevel
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property meteringMode (base name: "MeteringMode")', function() {
      // uncomment below and update the code to test the property meteringMode
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property sampleRate (base name: "SampleRate")', function() {
      // uncomment below and update the code to test the property sampleRate
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property speechThreshold (base name: "SpeechThreshold")', function() {
      // uncomment below and update the code to test the property speechThreshold
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property stereoDownmix (base name: "StereoDownmix")', function() {
      // uncomment below and update the code to test the property stereoDownmix
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

    it('should have the property surroundExMode (base name: "SurroundExMode")', function() {
      // uncomment below and update the code to test the property surroundExMode
      //var instance = new AwsElementalMediaConvert.AudioCodecSettingsEac3AtmosSettings();
      //expect(instance).to.be();
    });

  });

}));
