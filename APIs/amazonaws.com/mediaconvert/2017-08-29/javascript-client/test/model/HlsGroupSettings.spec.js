/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaConvert);
  }
}(this, function(expect, AwsElementalMediaConvert) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaConvert.HlsGroupSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HlsGroupSettings', function() {
    it('should create an instance of HlsGroupSettings', function() {
      // uncomment below and update the code to test HlsGroupSettings
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be.a(AwsElementalMediaConvert.HlsGroupSettings);
    });

    it('should have the property adMarkers (base name: "AdMarkers")', function() {
      // uncomment below and update the code to test the property adMarkers
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property additionalManifests (base name: "AdditionalManifests")', function() {
      // uncomment below and update the code to test the property additionalManifests
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property audioOnlyHeader (base name: "AudioOnlyHeader")', function() {
      // uncomment below and update the code to test the property audioOnlyHeader
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property baseUrl (base name: "BaseUrl")', function() {
      // uncomment below and update the code to test the property baseUrl
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property captionLanguageMappings (base name: "CaptionLanguageMappings")', function() {
      // uncomment below and update the code to test the property captionLanguageMappings
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property captionLanguageSetting (base name: "CaptionLanguageSetting")', function() {
      // uncomment below and update the code to test the property captionLanguageSetting
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property captionSegmentLengthControl (base name: "CaptionSegmentLengthControl")', function() {
      // uncomment below and update the code to test the property captionSegmentLengthControl
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property clientCache (base name: "ClientCache")', function() {
      // uncomment below and update the code to test the property clientCache
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property codecSpecification (base name: "CodecSpecification")', function() {
      // uncomment below and update the code to test the property codecSpecification
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property destination (base name: "Destination")', function() {
      // uncomment below and update the code to test the property destination
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property destinationSettings (base name: "DestinationSettings")', function() {
      // uncomment below and update the code to test the property destinationSettings
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property directoryStructure (base name: "DirectoryStructure")', function() {
      // uncomment below and update the code to test the property directoryStructure
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property encryption (base name: "Encryption")', function() {
      // uncomment below and update the code to test the property encryption
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property imageBasedTrickPlay (base name: "ImageBasedTrickPlay")', function() {
      // uncomment below and update the code to test the property imageBasedTrickPlay
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property imageBasedTrickPlaySettings (base name: "ImageBasedTrickPlaySettings")', function() {
      // uncomment below and update the code to test the property imageBasedTrickPlaySettings
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property manifestCompression (base name: "ManifestCompression")', function() {
      // uncomment below and update the code to test the property manifestCompression
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property manifestDurationFormat (base name: "ManifestDurationFormat")', function() {
      // uncomment below and update the code to test the property manifestDurationFormat
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property minFinalSegmentLength (base name: "MinFinalSegmentLength")', function() {
      // uncomment below and update the code to test the property minFinalSegmentLength
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property minSegmentLength (base name: "MinSegmentLength")', function() {
      // uncomment below and update the code to test the property minSegmentLength
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property outputSelection (base name: "OutputSelection")', function() {
      // uncomment below and update the code to test the property outputSelection
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property programDateTime (base name: "ProgramDateTime")', function() {
      // uncomment below and update the code to test the property programDateTime
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property programDateTimePeriod (base name: "ProgramDateTimePeriod")', function() {
      // uncomment below and update the code to test the property programDateTimePeriod
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property progressiveWriteHlsManifest (base name: "ProgressiveWriteHlsManifest")', function() {
      // uncomment below and update the code to test the property progressiveWriteHlsManifest
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property segmentControl (base name: "SegmentControl")', function() {
      // uncomment below and update the code to test the property segmentControl
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property segmentLength (base name: "SegmentLength")', function() {
      // uncomment below and update the code to test the property segmentLength
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property segmentLengthControl (base name: "SegmentLengthControl")', function() {
      // uncomment below and update the code to test the property segmentLengthControl
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property segmentsPerSubdirectory (base name: "SegmentsPerSubdirectory")', function() {
      // uncomment below and update the code to test the property segmentsPerSubdirectory
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property streamInfResolution (base name: "StreamInfResolution")', function() {
      // uncomment below and update the code to test the property streamInfResolution
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property targetDurationCompatibilityMode (base name: "TargetDurationCompatibilityMode")', function() {
      // uncomment below and update the code to test the property targetDurationCompatibilityMode
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property timedMetadataId3Frame (base name: "TimedMetadataId3Frame")', function() {
      // uncomment below and update the code to test the property timedMetadataId3Frame
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property timedMetadataId3Period (base name: "TimedMetadataId3Period")', function() {
      // uncomment below and update the code to test the property timedMetadataId3Period
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

    it('should have the property timestampDeltaMilliseconds (base name: "TimestampDeltaMilliseconds")', function() {
      // uncomment below and update the code to test the property timestampDeltaMilliseconds
      //var instance = new AwsElementalMediaConvert.HlsGroupSettings();
      //expect(instance).to.be();
    });

  });

}));
