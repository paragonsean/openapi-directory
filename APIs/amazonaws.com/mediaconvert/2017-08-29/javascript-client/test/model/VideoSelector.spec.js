/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaConvert);
  }
}(this, function(expect, AwsElementalMediaConvert) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaConvert.VideoSelector();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VideoSelector', function() {
    it('should create an instance of VideoSelector', function() {
      // uncomment below and update the code to test VideoSelector
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be.a(AwsElementalMediaConvert.VideoSelector);
    });

    it('should have the property alphaBehavior (base name: "AlphaBehavior")', function() {
      // uncomment below and update the code to test the property alphaBehavior
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property colorSpace (base name: "ColorSpace")', function() {
      // uncomment below and update the code to test the property colorSpace
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property colorSpaceUsage (base name: "ColorSpaceUsage")', function() {
      // uncomment below and update the code to test the property colorSpaceUsage
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property embeddedTimecodeOverride (base name: "EmbeddedTimecodeOverride")', function() {
      // uncomment below and update the code to test the property embeddedTimecodeOverride
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property hdr10Metadata (base name: "Hdr10Metadata")', function() {
      // uncomment below and update the code to test the property hdr10Metadata
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property padVideo (base name: "PadVideo")', function() {
      // uncomment below and update the code to test the property padVideo
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property pid (base name: "Pid")', function() {
      // uncomment below and update the code to test the property pid
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property programNumber (base name: "ProgramNumber")', function() {
      // uncomment below and update the code to test the property programNumber
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property rotate (base name: "Rotate")', function() {
      // uncomment below and update the code to test the property rotate
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

    it('should have the property sampleRange (base name: "SampleRange")', function() {
      // uncomment below and update the code to test the property sampleRange
      //var instance = new AwsElementalMediaConvert.VideoSelector();
      //expect(instance).to.be();
    });

  });

}));
