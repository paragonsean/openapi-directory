/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaConvert);
  }
}(this, function(expect, AwsElementalMediaConvert) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaConvert.Input();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Input', function() {
    it('should create an instance of Input', function() {
      // uncomment below and update the code to test Input
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be.a(AwsElementalMediaConvert.Input);
    });

    it('should have the property advancedInputFilter (base name: "AdvancedInputFilter")', function() {
      // uncomment below and update the code to test the property advancedInputFilter
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property advancedInputFilterSettings (base name: "AdvancedInputFilterSettings")', function() {
      // uncomment below and update the code to test the property advancedInputFilterSettings
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property audioSelectorGroups (base name: "AudioSelectorGroups")', function() {
      // uncomment below and update the code to test the property audioSelectorGroups
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property audioSelectors (base name: "AudioSelectors")', function() {
      // uncomment below and update the code to test the property audioSelectors
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property captionSelectors (base name: "CaptionSelectors")', function() {
      // uncomment below and update the code to test the property captionSelectors
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property crop (base name: "Crop")', function() {
      // uncomment below and update the code to test the property crop
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property deblockFilter (base name: "DeblockFilter")', function() {
      // uncomment below and update the code to test the property deblockFilter
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property decryptionSettings (base name: "DecryptionSettings")', function() {
      // uncomment below and update the code to test the property decryptionSettings
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property denoiseFilter (base name: "DenoiseFilter")', function() {
      // uncomment below and update the code to test the property denoiseFilter
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property dolbyVisionMetadataXml (base name: "DolbyVisionMetadataXml")', function() {
      // uncomment below and update the code to test the property dolbyVisionMetadataXml
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property fileInput (base name: "FileInput")', function() {
      // uncomment below and update the code to test the property fileInput
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property filterEnable (base name: "FilterEnable")', function() {
      // uncomment below and update the code to test the property filterEnable
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property filterStrength (base name: "FilterStrength")', function() {
      // uncomment below and update the code to test the property filterStrength
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property imageInserter (base name: "ImageInserter")', function() {
      // uncomment below and update the code to test the property imageInserter
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property inputClippings (base name: "InputClippings")', function() {
      // uncomment below and update the code to test the property inputClippings
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property inputScanType (base name: "InputScanType")', function() {
      // uncomment below and update the code to test the property inputScanType
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property position (base name: "Position")', function() {
      // uncomment below and update the code to test the property position
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property programNumber (base name: "ProgramNumber")', function() {
      // uncomment below and update the code to test the property programNumber
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property psiControl (base name: "PsiControl")', function() {
      // uncomment below and update the code to test the property psiControl
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property supplementalImps (base name: "SupplementalImps")', function() {
      // uncomment below and update the code to test the property supplementalImps
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property timecodeSource (base name: "TimecodeSource")', function() {
      // uncomment below and update the code to test the property timecodeSource
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property timecodeStart (base name: "TimecodeStart")', function() {
      // uncomment below and update the code to test the property timecodeStart
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property videoGenerator (base name: "VideoGenerator")', function() {
      // uncomment below and update the code to test the property videoGenerator
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

    it('should have the property videoSelector (base name: "VideoSelector")', function() {
      // uncomment below and update the code to test the property videoSelector
      //var instance = new AwsElementalMediaConvert.Input();
      //expect(instance).to.be();
    });

  });

}));
