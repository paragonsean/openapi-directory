/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CmafGroupSettingsDestinationSettings;
import org.openapitools.client.model.DashIsoGroupAudioChannelConfigSchemeIdUri;
import org.openapitools.client.model.DashIsoGroupSettingsEncryption;
import org.openapitools.client.model.DashIsoGroupSettingsImageBasedTrickPlaySettings;
import org.openapitools.client.model.DashIsoHbbtvCompliance;
import org.openapitools.client.model.DashIsoImageBasedTrickPlay;
import org.openapitools.client.model.DashIsoMpdManifestBandwidthType;
import org.openapitools.client.model.DashIsoMpdProfile;
import org.openapitools.client.model.DashIsoPtsOffsetHandlingForBFrames;
import org.openapitools.client.model.DashIsoSegmentControl;
import org.openapitools.client.model.DashIsoSegmentLengthControl;
import org.openapitools.client.model.DashIsoVideoCompositionOffsets;
import org.openapitools.client.model.DashIsoWriteSegmentTimelineInRepresentation;
import org.openapitools.client.model.DashManifestStyle;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DashIsoGroupSettings
 */
public class DashIsoGroupSettingsTest {
    private final DashIsoGroupSettings model = new DashIsoGroupSettings();

    /**
     * Model tests for DashIsoGroupSettings
     */
    @Test
    public void testDashIsoGroupSettings() {
        // TODO: test DashIsoGroupSettings
    }

    /**
     * Test the property 'additionalManifests'
     */
    @Test
    public void additionalManifestsTest() {
        // TODO: test additionalManifests
    }

    /**
     * Test the property 'audioChannelConfigSchemeIdUri'
     */
    @Test
    public void audioChannelConfigSchemeIdUriTest() {
        // TODO: test audioChannelConfigSchemeIdUri
    }

    /**
     * Test the property 'baseUrl'
     */
    @Test
    public void baseUrlTest() {
        // TODO: test baseUrl
    }

    /**
     * Test the property 'dashManifestStyle'
     */
    @Test
    public void dashManifestStyleTest() {
        // TODO: test dashManifestStyle
    }

    /**
     * Test the property 'destination'
     */
    @Test
    public void destinationTest() {
        // TODO: test destination
    }

    /**
     * Test the property 'destinationSettings'
     */
    @Test
    public void destinationSettingsTest() {
        // TODO: test destinationSettings
    }

    /**
     * Test the property 'encryption'
     */
    @Test
    public void encryptionTest() {
        // TODO: test encryption
    }

    /**
     * Test the property 'fragmentLength'
     */
    @Test
    public void fragmentLengthTest() {
        // TODO: test fragmentLength
    }

    /**
     * Test the property 'hbbtvCompliance'
     */
    @Test
    public void hbbtvComplianceTest() {
        // TODO: test hbbtvCompliance
    }

    /**
     * Test the property 'imageBasedTrickPlay'
     */
    @Test
    public void imageBasedTrickPlayTest() {
        // TODO: test imageBasedTrickPlay
    }

    /**
     * Test the property 'imageBasedTrickPlaySettings'
     */
    @Test
    public void imageBasedTrickPlaySettingsTest() {
        // TODO: test imageBasedTrickPlaySettings
    }

    /**
     * Test the property 'minBufferTime'
     */
    @Test
    public void minBufferTimeTest() {
        // TODO: test minBufferTime
    }

    /**
     * Test the property 'minFinalSegmentLength'
     */
    @Test
    public void minFinalSegmentLengthTest() {
        // TODO: test minFinalSegmentLength
    }

    /**
     * Test the property 'mpdManifestBandwidthType'
     */
    @Test
    public void mpdManifestBandwidthTypeTest() {
        // TODO: test mpdManifestBandwidthType
    }

    /**
     * Test the property 'mpdProfile'
     */
    @Test
    public void mpdProfileTest() {
        // TODO: test mpdProfile
    }

    /**
     * Test the property 'ptsOffsetHandlingForBFrames'
     */
    @Test
    public void ptsOffsetHandlingForBFramesTest() {
        // TODO: test ptsOffsetHandlingForBFrames
    }

    /**
     * Test the property 'segmentControl'
     */
    @Test
    public void segmentControlTest() {
        // TODO: test segmentControl
    }

    /**
     * Test the property 'segmentLength'
     */
    @Test
    public void segmentLengthTest() {
        // TODO: test segmentLength
    }

    /**
     * Test the property 'segmentLengthControl'
     */
    @Test
    public void segmentLengthControlTest() {
        // TODO: test segmentLengthControl
    }

    /**
     * Test the property 'videoCompositionOffsets'
     */
    @Test
    public void videoCompositionOffsetsTest() {
        // TODO: test videoCompositionOffsets
    }

    /**
     * Test the property 'writeSegmentTimelineInRepresentation'
     */
    @Test
    public void writeSegmentTimelineInRepresentationTest() {
        // TODO: test writeSegmentTimelineInRepresentation
    }

}
