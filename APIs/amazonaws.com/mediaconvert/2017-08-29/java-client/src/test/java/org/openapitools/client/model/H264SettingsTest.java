/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.H264AdaptiveQuantization;
import org.openapitools.client.model.H264CodecLevel;
import org.openapitools.client.model.H264CodecProfile;
import org.openapitools.client.model.H264DynamicSubGop;
import org.openapitools.client.model.H264EntropyEncoding;
import org.openapitools.client.model.H264FieldEncoding;
import org.openapitools.client.model.H264FlickerAdaptiveQuantization;
import org.openapitools.client.model.H264FramerateControl;
import org.openapitools.client.model.H264FramerateConversionAlgorithm;
import org.openapitools.client.model.H264GopBReference;
import org.openapitools.client.model.H264GopSizeUnits;
import org.openapitools.client.model.H264InterlaceMode;
import org.openapitools.client.model.H264ParControl;
import org.openapitools.client.model.H264QualityTuningLevel;
import org.openapitools.client.model.H264RateControlMode;
import org.openapitools.client.model.H264RepeatPps;
import org.openapitools.client.model.H264ScanTypeConversionMode;
import org.openapitools.client.model.H264SceneChangeDetect;
import org.openapitools.client.model.H264SettingsBandwidthReductionFilter;
import org.openapitools.client.model.H264SettingsQvbrSettings;
import org.openapitools.client.model.H264SlowPal;
import org.openapitools.client.model.H264SpatialAdaptiveQuantization;
import org.openapitools.client.model.H264Syntax;
import org.openapitools.client.model.H264Telecine;
import org.openapitools.client.model.H264TemporalAdaptiveQuantization;
import org.openapitools.client.model.H264UnregisteredSeiTimecode;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for H264Settings
 */
public class H264SettingsTest {
    private final H264Settings model = new H264Settings();

    /**
     * Model tests for H264Settings
     */
    @Test
    public void testH264Settings() {
        // TODO: test H264Settings
    }

    /**
     * Test the property 'adaptiveQuantization'
     */
    @Test
    public void adaptiveQuantizationTest() {
        // TODO: test adaptiveQuantization
    }

    /**
     * Test the property 'bandwidthReductionFilter'
     */
    @Test
    public void bandwidthReductionFilterTest() {
        // TODO: test bandwidthReductionFilter
    }

    /**
     * Test the property 'bitrate'
     */
    @Test
    public void bitrateTest() {
        // TODO: test bitrate
    }

    /**
     * Test the property 'codecLevel'
     */
    @Test
    public void codecLevelTest() {
        // TODO: test codecLevel
    }

    /**
     * Test the property 'codecProfile'
     */
    @Test
    public void codecProfileTest() {
        // TODO: test codecProfile
    }

    /**
     * Test the property 'dynamicSubGop'
     */
    @Test
    public void dynamicSubGopTest() {
        // TODO: test dynamicSubGop
    }

    /**
     * Test the property 'entropyEncoding'
     */
    @Test
    public void entropyEncodingTest() {
        // TODO: test entropyEncoding
    }

    /**
     * Test the property 'fieldEncoding'
     */
    @Test
    public void fieldEncodingTest() {
        // TODO: test fieldEncoding
    }

    /**
     * Test the property 'flickerAdaptiveQuantization'
     */
    @Test
    public void flickerAdaptiveQuantizationTest() {
        // TODO: test flickerAdaptiveQuantization
    }

    /**
     * Test the property 'framerateControl'
     */
    @Test
    public void framerateControlTest() {
        // TODO: test framerateControl
    }

    /**
     * Test the property 'framerateConversionAlgorithm'
     */
    @Test
    public void framerateConversionAlgorithmTest() {
        // TODO: test framerateConversionAlgorithm
    }

    /**
     * Test the property 'framerateDenominator'
     */
    @Test
    public void framerateDenominatorTest() {
        // TODO: test framerateDenominator
    }

    /**
     * Test the property 'framerateNumerator'
     */
    @Test
    public void framerateNumeratorTest() {
        // TODO: test framerateNumerator
    }

    /**
     * Test the property 'gopBReference'
     */
    @Test
    public void gopBReferenceTest() {
        // TODO: test gopBReference
    }

    /**
     * Test the property 'gopClosedCadence'
     */
    @Test
    public void gopClosedCadenceTest() {
        // TODO: test gopClosedCadence
    }

    /**
     * Test the property 'gopSize'
     */
    @Test
    public void gopSizeTest() {
        // TODO: test gopSize
    }

    /**
     * Test the property 'gopSizeUnits'
     */
    @Test
    public void gopSizeUnitsTest() {
        // TODO: test gopSizeUnits
    }

    /**
     * Test the property 'hrdBufferFinalFillPercentage'
     */
    @Test
    public void hrdBufferFinalFillPercentageTest() {
        // TODO: test hrdBufferFinalFillPercentage
    }

    /**
     * Test the property 'hrdBufferInitialFillPercentage'
     */
    @Test
    public void hrdBufferInitialFillPercentageTest() {
        // TODO: test hrdBufferInitialFillPercentage
    }

    /**
     * Test the property 'hrdBufferSize'
     */
    @Test
    public void hrdBufferSizeTest() {
        // TODO: test hrdBufferSize
    }

    /**
     * Test the property 'interlaceMode'
     */
    @Test
    public void interlaceModeTest() {
        // TODO: test interlaceMode
    }

    /**
     * Test the property 'maxBitrate'
     */
    @Test
    public void maxBitrateTest() {
        // TODO: test maxBitrate
    }

    /**
     * Test the property 'minIInterval'
     */
    @Test
    public void minIIntervalTest() {
        // TODO: test minIInterval
    }

    /**
     * Test the property 'numberBFramesBetweenReferenceFrames'
     */
    @Test
    public void numberBFramesBetweenReferenceFramesTest() {
        // TODO: test numberBFramesBetweenReferenceFrames
    }

    /**
     * Test the property 'numberReferenceFrames'
     */
    @Test
    public void numberReferenceFramesTest() {
        // TODO: test numberReferenceFrames
    }

    /**
     * Test the property 'parControl'
     */
    @Test
    public void parControlTest() {
        // TODO: test parControl
    }

    /**
     * Test the property 'parDenominator'
     */
    @Test
    public void parDenominatorTest() {
        // TODO: test parDenominator
    }

    /**
     * Test the property 'parNumerator'
     */
    @Test
    public void parNumeratorTest() {
        // TODO: test parNumerator
    }

    /**
     * Test the property 'qualityTuningLevel'
     */
    @Test
    public void qualityTuningLevelTest() {
        // TODO: test qualityTuningLevel
    }

    /**
     * Test the property 'qvbrSettings'
     */
    @Test
    public void qvbrSettingsTest() {
        // TODO: test qvbrSettings
    }

    /**
     * Test the property 'rateControlMode'
     */
    @Test
    public void rateControlModeTest() {
        // TODO: test rateControlMode
    }

    /**
     * Test the property 'repeatPps'
     */
    @Test
    public void repeatPpsTest() {
        // TODO: test repeatPps
    }

    /**
     * Test the property 'scanTypeConversionMode'
     */
    @Test
    public void scanTypeConversionModeTest() {
        // TODO: test scanTypeConversionMode
    }

    /**
     * Test the property 'sceneChangeDetect'
     */
    @Test
    public void sceneChangeDetectTest() {
        // TODO: test sceneChangeDetect
    }

    /**
     * Test the property 'slices'
     */
    @Test
    public void slicesTest() {
        // TODO: test slices
    }

    /**
     * Test the property 'slowPal'
     */
    @Test
    public void slowPalTest() {
        // TODO: test slowPal
    }

    /**
     * Test the property 'softness'
     */
    @Test
    public void softnessTest() {
        // TODO: test softness
    }

    /**
     * Test the property 'spatialAdaptiveQuantization'
     */
    @Test
    public void spatialAdaptiveQuantizationTest() {
        // TODO: test spatialAdaptiveQuantization
    }

    /**
     * Test the property 'syntax'
     */
    @Test
    public void syntaxTest() {
        // TODO: test syntax
    }

    /**
     * Test the property 'telecine'
     */
    @Test
    public void telecineTest() {
        // TODO: test telecine
    }

    /**
     * Test the property 'temporalAdaptiveQuantization'
     */
    @Test
    public void temporalAdaptiveQuantizationTest() {
        // TODO: test temporalAdaptiveQuantization
    }

    /**
     * Test the property 'unregisteredSeiTimecode'
     */
    @Test
    public void unregisteredSeiTimecodeTest() {
        // TODO: test unregisteredSeiTimecode
    }

}
