/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Eac3AtmosBitstreamMode;
import org.openapitools.client.model.Eac3AtmosCodingMode;
import org.openapitools.client.model.Eac3AtmosDialogueIntelligence;
import org.openapitools.client.model.Eac3AtmosDownmixControl;
import org.openapitools.client.model.Eac3AtmosDynamicRangeCompressionLine;
import org.openapitools.client.model.Eac3AtmosDynamicRangeCompressionRf;
import org.openapitools.client.model.Eac3AtmosDynamicRangeControl;
import org.openapitools.client.model.Eac3AtmosMeteringMode;
import org.openapitools.client.model.Eac3AtmosStereoDownmix;
import org.openapitools.client.model.Eac3AtmosSurroundExMode;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AudioCodecSettingsEac3AtmosSettings
 */
public class AudioCodecSettingsEac3AtmosSettingsTest {
    private final AudioCodecSettingsEac3AtmosSettings model = new AudioCodecSettingsEac3AtmosSettings();

    /**
     * Model tests for AudioCodecSettingsEac3AtmosSettings
     */
    @Test
    public void testAudioCodecSettingsEac3AtmosSettings() {
        // TODO: test AudioCodecSettingsEac3AtmosSettings
    }

    /**
     * Test the property 'bitrate'
     */
    @Test
    public void bitrateTest() {
        // TODO: test bitrate
    }

    /**
     * Test the property 'bitstreamMode'
     */
    @Test
    public void bitstreamModeTest() {
        // TODO: test bitstreamMode
    }

    /**
     * Test the property 'codingMode'
     */
    @Test
    public void codingModeTest() {
        // TODO: test codingMode
    }

    /**
     * Test the property 'dialogueIntelligence'
     */
    @Test
    public void dialogueIntelligenceTest() {
        // TODO: test dialogueIntelligence
    }

    /**
     * Test the property 'downmixControl'
     */
    @Test
    public void downmixControlTest() {
        // TODO: test downmixControl
    }

    /**
     * Test the property 'dynamicRangeCompressionLine'
     */
    @Test
    public void dynamicRangeCompressionLineTest() {
        // TODO: test dynamicRangeCompressionLine
    }

    /**
     * Test the property 'dynamicRangeCompressionRf'
     */
    @Test
    public void dynamicRangeCompressionRfTest() {
        // TODO: test dynamicRangeCompressionRf
    }

    /**
     * Test the property 'dynamicRangeControl'
     */
    @Test
    public void dynamicRangeControlTest() {
        // TODO: test dynamicRangeControl
    }

    /**
     * Test the property 'loRoCenterMixLevel'
     */
    @Test
    public void loRoCenterMixLevelTest() {
        // TODO: test loRoCenterMixLevel
    }

    /**
     * Test the property 'loRoSurroundMixLevel'
     */
    @Test
    public void loRoSurroundMixLevelTest() {
        // TODO: test loRoSurroundMixLevel
    }

    /**
     * Test the property 'ltRtCenterMixLevel'
     */
    @Test
    public void ltRtCenterMixLevelTest() {
        // TODO: test ltRtCenterMixLevel
    }

    /**
     * Test the property 'ltRtSurroundMixLevel'
     */
    @Test
    public void ltRtSurroundMixLevelTest() {
        // TODO: test ltRtSurroundMixLevel
    }

    /**
     * Test the property 'meteringMode'
     */
    @Test
    public void meteringModeTest() {
        // TODO: test meteringMode
    }

    /**
     * Test the property 'sampleRate'
     */
    @Test
    public void sampleRateTest() {
        // TODO: test sampleRate
    }

    /**
     * Test the property 'speechThreshold'
     */
    @Test
    public void speechThresholdTest() {
        // TODO: test speechThreshold
    }

    /**
     * Test the property 'stereoDownmix'
     */
    @Test
    public void stereoDownmixTest() {
        // TODO: test stereoDownmix
    }

    /**
     * Test the property 'surroundExMode'
     */
    @Test
    public void surroundExModeTest() {
        // TODO: test surroundExMode
    }

}
