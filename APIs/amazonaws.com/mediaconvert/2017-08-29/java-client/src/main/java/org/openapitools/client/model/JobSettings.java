/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateJobRequestSettingsAvailBlanking;
import org.openapitools.client.model.CreateJobRequestSettingsEsam;
import org.openapitools.client.model.CreateJobRequestSettingsExtendedDataServices;
import org.openapitools.client.model.CreateJobRequestSettingsKantarWatermark;
import org.openapitools.client.model.CreateJobRequestSettingsMotionImageInserter;
import org.openapitools.client.model.CreateJobRequestSettingsNielsenConfiguration;
import org.openapitools.client.model.CreateJobRequestSettingsNielsenNonLinearWatermark;
import org.openapitools.client.model.CreateJobRequestSettingsTimecodeConfig;
import org.openapitools.client.model.CreateJobRequestSettingsTimedMetadataInsertion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobSettings contains all the transcode settings for a job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobSettings {
  public static final String SERIALIZED_NAME_AD_AVAIL_OFFSET = "AdAvailOffset";
  @SerializedName(SERIALIZED_NAME_AD_AVAIL_OFFSET)
  private Integer adAvailOffset;

  public static final String SERIALIZED_NAME_AVAIL_BLANKING = "AvailBlanking";
  @SerializedName(SERIALIZED_NAME_AVAIL_BLANKING)
  private CreateJobRequestSettingsAvailBlanking availBlanking;

  public static final String SERIALIZED_NAME_ESAM = "Esam";
  @SerializedName(SERIALIZED_NAME_ESAM)
  private CreateJobRequestSettingsEsam esam;

  public static final String SERIALIZED_NAME_EXTENDED_DATA_SERVICES = "ExtendedDataServices";
  @SerializedName(SERIALIZED_NAME_EXTENDED_DATA_SERVICES)
  private CreateJobRequestSettingsExtendedDataServices extendedDataServices;

  public static final String SERIALIZED_NAME_INPUTS = "Inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List inputs;

  public static final String SERIALIZED_NAME_KANTAR_WATERMARK = "KantarWatermark";
  @SerializedName(SERIALIZED_NAME_KANTAR_WATERMARK)
  private CreateJobRequestSettingsKantarWatermark kantarWatermark;

  public static final String SERIALIZED_NAME_MOTION_IMAGE_INSERTER = "MotionImageInserter";
  @SerializedName(SERIALIZED_NAME_MOTION_IMAGE_INSERTER)
  private CreateJobRequestSettingsMotionImageInserter motionImageInserter;

  public static final String SERIALIZED_NAME_NIELSEN_CONFIGURATION = "NielsenConfiguration";
  @SerializedName(SERIALIZED_NAME_NIELSEN_CONFIGURATION)
  private CreateJobRequestSettingsNielsenConfiguration nielsenConfiguration;

  public static final String SERIALIZED_NAME_NIELSEN_NON_LINEAR_WATERMARK = "NielsenNonLinearWatermark";
  @SerializedName(SERIALIZED_NAME_NIELSEN_NON_LINEAR_WATERMARK)
  private CreateJobRequestSettingsNielsenNonLinearWatermark nielsenNonLinearWatermark;

  public static final String SERIALIZED_NAME_OUTPUT_GROUPS = "OutputGroups";
  @SerializedName(SERIALIZED_NAME_OUTPUT_GROUPS)
  private List outputGroups;

  public static final String SERIALIZED_NAME_TIMECODE_CONFIG = "TimecodeConfig";
  @SerializedName(SERIALIZED_NAME_TIMECODE_CONFIG)
  private CreateJobRequestSettingsTimecodeConfig timecodeConfig;

  public static final String SERIALIZED_NAME_TIMED_METADATA_INSERTION = "TimedMetadataInsertion";
  @SerializedName(SERIALIZED_NAME_TIMED_METADATA_INSERTION)
  private CreateJobRequestSettingsTimedMetadataInsertion timedMetadataInsertion;

  public JobSettings() {
  }

  public JobSettings adAvailOffset(Integer adAvailOffset) {
    this.adAvailOffset = adAvailOffset;
    return this;
  }

  /**
   * Get adAvailOffset
   * @return adAvailOffset
   */
  @javax.annotation.Nullable
  public Integer getAdAvailOffset() {
    return adAvailOffset;
  }

  public void setAdAvailOffset(Integer adAvailOffset) {
    this.adAvailOffset = adAvailOffset;
  }


  public JobSettings availBlanking(CreateJobRequestSettingsAvailBlanking availBlanking) {
    this.availBlanking = availBlanking;
    return this;
  }

  /**
   * Get availBlanking
   * @return availBlanking
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsAvailBlanking getAvailBlanking() {
    return availBlanking;
  }

  public void setAvailBlanking(CreateJobRequestSettingsAvailBlanking availBlanking) {
    this.availBlanking = availBlanking;
  }


  public JobSettings esam(CreateJobRequestSettingsEsam esam) {
    this.esam = esam;
    return this;
  }

  /**
   * Get esam
   * @return esam
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsEsam getEsam() {
    return esam;
  }

  public void setEsam(CreateJobRequestSettingsEsam esam) {
    this.esam = esam;
  }


  public JobSettings extendedDataServices(CreateJobRequestSettingsExtendedDataServices extendedDataServices) {
    this.extendedDataServices = extendedDataServices;
    return this;
  }

  /**
   * Get extendedDataServices
   * @return extendedDataServices
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsExtendedDataServices getExtendedDataServices() {
    return extendedDataServices;
  }

  public void setExtendedDataServices(CreateJobRequestSettingsExtendedDataServices extendedDataServices) {
    this.extendedDataServices = extendedDataServices;
  }


  public JobSettings inputs(List inputs) {
    this.inputs = inputs;
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nullable
  public List getInputs() {
    return inputs;
  }

  public void setInputs(List inputs) {
    this.inputs = inputs;
  }


  public JobSettings kantarWatermark(CreateJobRequestSettingsKantarWatermark kantarWatermark) {
    this.kantarWatermark = kantarWatermark;
    return this;
  }

  /**
   * Get kantarWatermark
   * @return kantarWatermark
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsKantarWatermark getKantarWatermark() {
    return kantarWatermark;
  }

  public void setKantarWatermark(CreateJobRequestSettingsKantarWatermark kantarWatermark) {
    this.kantarWatermark = kantarWatermark;
  }


  public JobSettings motionImageInserter(CreateJobRequestSettingsMotionImageInserter motionImageInserter) {
    this.motionImageInserter = motionImageInserter;
    return this;
  }

  /**
   * Get motionImageInserter
   * @return motionImageInserter
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsMotionImageInserter getMotionImageInserter() {
    return motionImageInserter;
  }

  public void setMotionImageInserter(CreateJobRequestSettingsMotionImageInserter motionImageInserter) {
    this.motionImageInserter = motionImageInserter;
  }


  public JobSettings nielsenConfiguration(CreateJobRequestSettingsNielsenConfiguration nielsenConfiguration) {
    this.nielsenConfiguration = nielsenConfiguration;
    return this;
  }

  /**
   * Get nielsenConfiguration
   * @return nielsenConfiguration
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsNielsenConfiguration getNielsenConfiguration() {
    return nielsenConfiguration;
  }

  public void setNielsenConfiguration(CreateJobRequestSettingsNielsenConfiguration nielsenConfiguration) {
    this.nielsenConfiguration = nielsenConfiguration;
  }


  public JobSettings nielsenNonLinearWatermark(CreateJobRequestSettingsNielsenNonLinearWatermark nielsenNonLinearWatermark) {
    this.nielsenNonLinearWatermark = nielsenNonLinearWatermark;
    return this;
  }

  /**
   * Get nielsenNonLinearWatermark
   * @return nielsenNonLinearWatermark
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsNielsenNonLinearWatermark getNielsenNonLinearWatermark() {
    return nielsenNonLinearWatermark;
  }

  public void setNielsenNonLinearWatermark(CreateJobRequestSettingsNielsenNonLinearWatermark nielsenNonLinearWatermark) {
    this.nielsenNonLinearWatermark = nielsenNonLinearWatermark;
  }


  public JobSettings outputGroups(List outputGroups) {
    this.outputGroups = outputGroups;
    return this;
  }

  /**
   * Get outputGroups
   * @return outputGroups
   */
  @javax.annotation.Nullable
  public List getOutputGroups() {
    return outputGroups;
  }

  public void setOutputGroups(List outputGroups) {
    this.outputGroups = outputGroups;
  }


  public JobSettings timecodeConfig(CreateJobRequestSettingsTimecodeConfig timecodeConfig) {
    this.timecodeConfig = timecodeConfig;
    return this;
  }

  /**
   * Get timecodeConfig
   * @return timecodeConfig
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsTimecodeConfig getTimecodeConfig() {
    return timecodeConfig;
  }

  public void setTimecodeConfig(CreateJobRequestSettingsTimecodeConfig timecodeConfig) {
    this.timecodeConfig = timecodeConfig;
  }


  public JobSettings timedMetadataInsertion(CreateJobRequestSettingsTimedMetadataInsertion timedMetadataInsertion) {
    this.timedMetadataInsertion = timedMetadataInsertion;
    return this;
  }

  /**
   * Get timedMetadataInsertion
   * @return timedMetadataInsertion
   */
  @javax.annotation.Nullable
  public CreateJobRequestSettingsTimedMetadataInsertion getTimedMetadataInsertion() {
    return timedMetadataInsertion;
  }

  public void setTimedMetadataInsertion(CreateJobRequestSettingsTimedMetadataInsertion timedMetadataInsertion) {
    this.timedMetadataInsertion = timedMetadataInsertion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSettings jobSettings = (JobSettings) o;
    return Objects.equals(this.adAvailOffset, jobSettings.adAvailOffset) &&
        Objects.equals(this.availBlanking, jobSettings.availBlanking) &&
        Objects.equals(this.esam, jobSettings.esam) &&
        Objects.equals(this.extendedDataServices, jobSettings.extendedDataServices) &&
        Objects.equals(this.inputs, jobSettings.inputs) &&
        Objects.equals(this.kantarWatermark, jobSettings.kantarWatermark) &&
        Objects.equals(this.motionImageInserter, jobSettings.motionImageInserter) &&
        Objects.equals(this.nielsenConfiguration, jobSettings.nielsenConfiguration) &&
        Objects.equals(this.nielsenNonLinearWatermark, jobSettings.nielsenNonLinearWatermark) &&
        Objects.equals(this.outputGroups, jobSettings.outputGroups) &&
        Objects.equals(this.timecodeConfig, jobSettings.timecodeConfig) &&
        Objects.equals(this.timedMetadataInsertion, jobSettings.timedMetadataInsertion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adAvailOffset, availBlanking, esam, extendedDataServices, inputs, kantarWatermark, motionImageInserter, nielsenConfiguration, nielsenNonLinearWatermark, outputGroups, timecodeConfig, timedMetadataInsertion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSettings {\n");
    sb.append("    adAvailOffset: ").append(toIndentedString(adAvailOffset)).append("\n");
    sb.append("    availBlanking: ").append(toIndentedString(availBlanking)).append("\n");
    sb.append("    esam: ").append(toIndentedString(esam)).append("\n");
    sb.append("    extendedDataServices: ").append(toIndentedString(extendedDataServices)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    kantarWatermark: ").append(toIndentedString(kantarWatermark)).append("\n");
    sb.append("    motionImageInserter: ").append(toIndentedString(motionImageInserter)).append("\n");
    sb.append("    nielsenConfiguration: ").append(toIndentedString(nielsenConfiguration)).append("\n");
    sb.append("    nielsenNonLinearWatermark: ").append(toIndentedString(nielsenNonLinearWatermark)).append("\n");
    sb.append("    outputGroups: ").append(toIndentedString(outputGroups)).append("\n");
    sb.append("    timecodeConfig: ").append(toIndentedString(timecodeConfig)).append("\n");
    sb.append("    timedMetadataInsertion: ").append(toIndentedString(timedMetadataInsertion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdAvailOffset");
    openapiFields.add("AvailBlanking");
    openapiFields.add("Esam");
    openapiFields.add("ExtendedDataServices");
    openapiFields.add("Inputs");
    openapiFields.add("KantarWatermark");
    openapiFields.add("MotionImageInserter");
    openapiFields.add("NielsenConfiguration");
    openapiFields.add("NielsenNonLinearWatermark");
    openapiFields.add("OutputGroups");
    openapiFields.add("TimecodeConfig");
    openapiFields.add("TimedMetadataInsertion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobSettings is not found in the empty JSON string", JobSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdAvailOffset`
      if (jsonObj.get("AdAvailOffset") != null && !jsonObj.get("AdAvailOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AdAvailOffset"));
      }
      // validate the optional field `AvailBlanking`
      if (jsonObj.get("AvailBlanking") != null && !jsonObj.get("AvailBlanking").isJsonNull()) {
        CreateJobRequestSettingsAvailBlanking.validateJsonElement(jsonObj.get("AvailBlanking"));
      }
      // validate the optional field `Esam`
      if (jsonObj.get("Esam") != null && !jsonObj.get("Esam").isJsonNull()) {
        CreateJobRequestSettingsEsam.validateJsonElement(jsonObj.get("Esam"));
      }
      // validate the optional field `ExtendedDataServices`
      if (jsonObj.get("ExtendedDataServices") != null && !jsonObj.get("ExtendedDataServices").isJsonNull()) {
        CreateJobRequestSettingsExtendedDataServices.validateJsonElement(jsonObj.get("ExtendedDataServices"));
      }
      // validate the optional field `Inputs`
      if (jsonObj.get("Inputs") != null && !jsonObj.get("Inputs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Inputs"));
      }
      // validate the optional field `KantarWatermark`
      if (jsonObj.get("KantarWatermark") != null && !jsonObj.get("KantarWatermark").isJsonNull()) {
        CreateJobRequestSettingsKantarWatermark.validateJsonElement(jsonObj.get("KantarWatermark"));
      }
      // validate the optional field `MotionImageInserter`
      if (jsonObj.get("MotionImageInserter") != null && !jsonObj.get("MotionImageInserter").isJsonNull()) {
        CreateJobRequestSettingsMotionImageInserter.validateJsonElement(jsonObj.get("MotionImageInserter"));
      }
      // validate the optional field `NielsenConfiguration`
      if (jsonObj.get("NielsenConfiguration") != null && !jsonObj.get("NielsenConfiguration").isJsonNull()) {
        CreateJobRequestSettingsNielsenConfiguration.validateJsonElement(jsonObj.get("NielsenConfiguration"));
      }
      // validate the optional field `NielsenNonLinearWatermark`
      if (jsonObj.get("NielsenNonLinearWatermark") != null && !jsonObj.get("NielsenNonLinearWatermark").isJsonNull()) {
        CreateJobRequestSettingsNielsenNonLinearWatermark.validateJsonElement(jsonObj.get("NielsenNonLinearWatermark"));
      }
      // validate the optional field `OutputGroups`
      if (jsonObj.get("OutputGroups") != null && !jsonObj.get("OutputGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OutputGroups"));
      }
      // validate the optional field `TimecodeConfig`
      if (jsonObj.get("TimecodeConfig") != null && !jsonObj.get("TimecodeConfig").isJsonNull()) {
        CreateJobRequestSettingsTimecodeConfig.validateJsonElement(jsonObj.get("TimecodeConfig"));
      }
      // validate the optional field `TimedMetadataInsertion`
      if (jsonObj.get("TimedMetadataInsertion") != null && !jsonObj.get("TimedMetadataInsertion").isJsonNull()) {
        CreateJobRequestSettingsTimedMetadataInsertion.validateJsonElement(jsonObj.get("TimedMetadataInsertion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<JobSettings>() {
           @Override
           public void write(JsonWriter out, JobSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobSettings
   * @throws IOException if the JSON string is invalid with respect to JobSettings
   */
  public static JobSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobSettings.class);
  }

  /**
   * Convert an instance of JobSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

