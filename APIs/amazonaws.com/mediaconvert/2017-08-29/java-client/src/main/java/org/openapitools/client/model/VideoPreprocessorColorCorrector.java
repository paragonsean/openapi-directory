/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ColorCorrectorClipLimits;
import org.openapitools.client.model.ColorCorrectorHdr10Metadata;
import org.openapitools.client.model.ColorSpaceConversion;
import org.openapitools.client.model.HDRToSDRToneMapper;
import org.openapitools.client.model.SampleRangeConversion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoPreprocessorColorCorrector
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoPreprocessorColorCorrector {
  public static final String SERIALIZED_NAME_BRIGHTNESS = "Brightness";
  @SerializedName(SERIALIZED_NAME_BRIGHTNESS)
  private Integer brightness;

  public static final String SERIALIZED_NAME_CLIP_LIMITS = "ClipLimits";
  @SerializedName(SERIALIZED_NAME_CLIP_LIMITS)
  private ColorCorrectorClipLimits clipLimits;

  public static final String SERIALIZED_NAME_COLOR_SPACE_CONVERSION = "ColorSpaceConversion";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE_CONVERSION)
  private ColorSpaceConversion colorSpaceConversion;

  public static final String SERIALIZED_NAME_CONTRAST = "Contrast";
  @SerializedName(SERIALIZED_NAME_CONTRAST)
  private Integer contrast;

  public static final String SERIALIZED_NAME_HDR10_METADATA = "Hdr10Metadata";
  @SerializedName(SERIALIZED_NAME_HDR10_METADATA)
  private ColorCorrectorHdr10Metadata hdr10Metadata;

  public static final String SERIALIZED_NAME_HDR_TO_SDR_TONE_MAPPER = "HdrToSdrToneMapper";
  @SerializedName(SERIALIZED_NAME_HDR_TO_SDR_TONE_MAPPER)
  private HDRToSDRToneMapper hdrToSdrToneMapper;

  public static final String SERIALIZED_NAME_HUE = "Hue";
  @SerializedName(SERIALIZED_NAME_HUE)
  private Integer hue;

  public static final String SERIALIZED_NAME_SAMPLE_RANGE_CONVERSION = "SampleRangeConversion";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RANGE_CONVERSION)
  private SampleRangeConversion sampleRangeConversion;

  public static final String SERIALIZED_NAME_SATURATION = "Saturation";
  @SerializedName(SERIALIZED_NAME_SATURATION)
  private Integer saturation;

  public static final String SERIALIZED_NAME_SDR_REFERENCE_WHITE_LEVEL = "SdrReferenceWhiteLevel";
  @SerializedName(SERIALIZED_NAME_SDR_REFERENCE_WHITE_LEVEL)
  private Integer sdrReferenceWhiteLevel;

  public VideoPreprocessorColorCorrector() {
  }

  public VideoPreprocessorColorCorrector brightness(Integer brightness) {
    this.brightness = brightness;
    return this;
  }

  /**
   * Get brightness
   * @return brightness
   */
  @javax.annotation.Nullable
  public Integer getBrightness() {
    return brightness;
  }

  public void setBrightness(Integer brightness) {
    this.brightness = brightness;
  }


  public VideoPreprocessorColorCorrector clipLimits(ColorCorrectorClipLimits clipLimits) {
    this.clipLimits = clipLimits;
    return this;
  }

  /**
   * Get clipLimits
   * @return clipLimits
   */
  @javax.annotation.Nullable
  public ColorCorrectorClipLimits getClipLimits() {
    return clipLimits;
  }

  public void setClipLimits(ColorCorrectorClipLimits clipLimits) {
    this.clipLimits = clipLimits;
  }


  public VideoPreprocessorColorCorrector colorSpaceConversion(ColorSpaceConversion colorSpaceConversion) {
    this.colorSpaceConversion = colorSpaceConversion;
    return this;
  }

  /**
   * Get colorSpaceConversion
   * @return colorSpaceConversion
   */
  @javax.annotation.Nullable
  public ColorSpaceConversion getColorSpaceConversion() {
    return colorSpaceConversion;
  }

  public void setColorSpaceConversion(ColorSpaceConversion colorSpaceConversion) {
    this.colorSpaceConversion = colorSpaceConversion;
  }


  public VideoPreprocessorColorCorrector contrast(Integer contrast) {
    this.contrast = contrast;
    return this;
  }

  /**
   * Get contrast
   * @return contrast
   */
  @javax.annotation.Nullable
  public Integer getContrast() {
    return contrast;
  }

  public void setContrast(Integer contrast) {
    this.contrast = contrast;
  }


  public VideoPreprocessorColorCorrector hdr10Metadata(ColorCorrectorHdr10Metadata hdr10Metadata) {
    this.hdr10Metadata = hdr10Metadata;
    return this;
  }

  /**
   * Get hdr10Metadata
   * @return hdr10Metadata
   */
  @javax.annotation.Nullable
  public ColorCorrectorHdr10Metadata getHdr10Metadata() {
    return hdr10Metadata;
  }

  public void setHdr10Metadata(ColorCorrectorHdr10Metadata hdr10Metadata) {
    this.hdr10Metadata = hdr10Metadata;
  }


  public VideoPreprocessorColorCorrector hdrToSdrToneMapper(HDRToSDRToneMapper hdrToSdrToneMapper) {
    this.hdrToSdrToneMapper = hdrToSdrToneMapper;
    return this;
  }

  /**
   * Get hdrToSdrToneMapper
   * @return hdrToSdrToneMapper
   */
  @javax.annotation.Nullable
  public HDRToSDRToneMapper getHdrToSdrToneMapper() {
    return hdrToSdrToneMapper;
  }

  public void setHdrToSdrToneMapper(HDRToSDRToneMapper hdrToSdrToneMapper) {
    this.hdrToSdrToneMapper = hdrToSdrToneMapper;
  }


  public VideoPreprocessorColorCorrector hue(Integer hue) {
    this.hue = hue;
    return this;
  }

  /**
   * Get hue
   * @return hue
   */
  @javax.annotation.Nullable
  public Integer getHue() {
    return hue;
  }

  public void setHue(Integer hue) {
    this.hue = hue;
  }


  public VideoPreprocessorColorCorrector sampleRangeConversion(SampleRangeConversion sampleRangeConversion) {
    this.sampleRangeConversion = sampleRangeConversion;
    return this;
  }

  /**
   * Get sampleRangeConversion
   * @return sampleRangeConversion
   */
  @javax.annotation.Nullable
  public SampleRangeConversion getSampleRangeConversion() {
    return sampleRangeConversion;
  }

  public void setSampleRangeConversion(SampleRangeConversion sampleRangeConversion) {
    this.sampleRangeConversion = sampleRangeConversion;
  }


  public VideoPreprocessorColorCorrector saturation(Integer saturation) {
    this.saturation = saturation;
    return this;
  }

  /**
   * Get saturation
   * @return saturation
   */
  @javax.annotation.Nullable
  public Integer getSaturation() {
    return saturation;
  }

  public void setSaturation(Integer saturation) {
    this.saturation = saturation;
  }


  public VideoPreprocessorColorCorrector sdrReferenceWhiteLevel(Integer sdrReferenceWhiteLevel) {
    this.sdrReferenceWhiteLevel = sdrReferenceWhiteLevel;
    return this;
  }

  /**
   * Get sdrReferenceWhiteLevel
   * @return sdrReferenceWhiteLevel
   */
  @javax.annotation.Nullable
  public Integer getSdrReferenceWhiteLevel() {
    return sdrReferenceWhiteLevel;
  }

  public void setSdrReferenceWhiteLevel(Integer sdrReferenceWhiteLevel) {
    this.sdrReferenceWhiteLevel = sdrReferenceWhiteLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoPreprocessorColorCorrector videoPreprocessorColorCorrector = (VideoPreprocessorColorCorrector) o;
    return Objects.equals(this.brightness, videoPreprocessorColorCorrector.brightness) &&
        Objects.equals(this.clipLimits, videoPreprocessorColorCorrector.clipLimits) &&
        Objects.equals(this.colorSpaceConversion, videoPreprocessorColorCorrector.colorSpaceConversion) &&
        Objects.equals(this.contrast, videoPreprocessorColorCorrector.contrast) &&
        Objects.equals(this.hdr10Metadata, videoPreprocessorColorCorrector.hdr10Metadata) &&
        Objects.equals(this.hdrToSdrToneMapper, videoPreprocessorColorCorrector.hdrToSdrToneMapper) &&
        Objects.equals(this.hue, videoPreprocessorColorCorrector.hue) &&
        Objects.equals(this.sampleRangeConversion, videoPreprocessorColorCorrector.sampleRangeConversion) &&
        Objects.equals(this.saturation, videoPreprocessorColorCorrector.saturation) &&
        Objects.equals(this.sdrReferenceWhiteLevel, videoPreprocessorColorCorrector.sdrReferenceWhiteLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brightness, clipLimits, colorSpaceConversion, contrast, hdr10Metadata, hdrToSdrToneMapper, hue, sampleRangeConversion, saturation, sdrReferenceWhiteLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoPreprocessorColorCorrector {\n");
    sb.append("    brightness: ").append(toIndentedString(brightness)).append("\n");
    sb.append("    clipLimits: ").append(toIndentedString(clipLimits)).append("\n");
    sb.append("    colorSpaceConversion: ").append(toIndentedString(colorSpaceConversion)).append("\n");
    sb.append("    contrast: ").append(toIndentedString(contrast)).append("\n");
    sb.append("    hdr10Metadata: ").append(toIndentedString(hdr10Metadata)).append("\n");
    sb.append("    hdrToSdrToneMapper: ").append(toIndentedString(hdrToSdrToneMapper)).append("\n");
    sb.append("    hue: ").append(toIndentedString(hue)).append("\n");
    sb.append("    sampleRangeConversion: ").append(toIndentedString(sampleRangeConversion)).append("\n");
    sb.append("    saturation: ").append(toIndentedString(saturation)).append("\n");
    sb.append("    sdrReferenceWhiteLevel: ").append(toIndentedString(sdrReferenceWhiteLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Brightness");
    openapiFields.add("ClipLimits");
    openapiFields.add("ColorSpaceConversion");
    openapiFields.add("Contrast");
    openapiFields.add("Hdr10Metadata");
    openapiFields.add("HdrToSdrToneMapper");
    openapiFields.add("Hue");
    openapiFields.add("SampleRangeConversion");
    openapiFields.add("Saturation");
    openapiFields.add("SdrReferenceWhiteLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoPreprocessorColorCorrector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoPreprocessorColorCorrector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoPreprocessorColorCorrector is not found in the empty JSON string", VideoPreprocessorColorCorrector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoPreprocessorColorCorrector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoPreprocessorColorCorrector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Brightness`
      if (jsonObj.get("Brightness") != null && !jsonObj.get("Brightness").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Brightness"));
      }
      // validate the optional field `ClipLimits`
      if (jsonObj.get("ClipLimits") != null && !jsonObj.get("ClipLimits").isJsonNull()) {
        ColorCorrectorClipLimits.validateJsonElement(jsonObj.get("ClipLimits"));
      }
      // validate the optional field `ColorSpaceConversion`
      if (jsonObj.get("ColorSpaceConversion") != null && !jsonObj.get("ColorSpaceConversion").isJsonNull()) {
        ColorSpaceConversion.validateJsonElement(jsonObj.get("ColorSpaceConversion"));
      }
      // validate the optional field `Contrast`
      if (jsonObj.get("Contrast") != null && !jsonObj.get("Contrast").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Contrast"));
      }
      // validate the optional field `Hdr10Metadata`
      if (jsonObj.get("Hdr10Metadata") != null && !jsonObj.get("Hdr10Metadata").isJsonNull()) {
        ColorCorrectorHdr10Metadata.validateJsonElement(jsonObj.get("Hdr10Metadata"));
      }
      // validate the optional field `HdrToSdrToneMapper`
      if (jsonObj.get("HdrToSdrToneMapper") != null && !jsonObj.get("HdrToSdrToneMapper").isJsonNull()) {
        HDRToSDRToneMapper.validateJsonElement(jsonObj.get("HdrToSdrToneMapper"));
      }
      // validate the optional field `Hue`
      if (jsonObj.get("Hue") != null && !jsonObj.get("Hue").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Hue"));
      }
      // validate the optional field `SampleRangeConversion`
      if (jsonObj.get("SampleRangeConversion") != null && !jsonObj.get("SampleRangeConversion").isJsonNull()) {
        SampleRangeConversion.validateJsonElement(jsonObj.get("SampleRangeConversion"));
      }
      // validate the optional field `Saturation`
      if (jsonObj.get("Saturation") != null && !jsonObj.get("Saturation").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Saturation"));
      }
      // validate the optional field `SdrReferenceWhiteLevel`
      if (jsonObj.get("SdrReferenceWhiteLevel") != null && !jsonObj.get("SdrReferenceWhiteLevel").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SdrReferenceWhiteLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoPreprocessorColorCorrector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoPreprocessorColorCorrector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoPreprocessorColorCorrector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoPreprocessorColorCorrector.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoPreprocessorColorCorrector>() {
           @Override
           public void write(JsonWriter out, VideoPreprocessorColorCorrector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoPreprocessorColorCorrector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoPreprocessorColorCorrector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoPreprocessorColorCorrector
   * @throws IOException if the JSON string is invalid with respect to VideoPreprocessorColorCorrector
   */
  public static VideoPreprocessorColorCorrector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoPreprocessorColorCorrector.class);
  }

  /**
   * Convert an instance of VideoPreprocessorColorCorrector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

