/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MovClapAtom;
import org.openapitools.client.model.MovCslgAtom;
import org.openapitools.client.model.MovMpeg2FourCCControl;
import org.openapitools.client.model.MovPaddingControl;
import org.openapitools.client.model.MovReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainerSettingsMovSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerSettingsMovSettings {
  public static final String SERIALIZED_NAME_CLAP_ATOM = "ClapAtom";
  @SerializedName(SERIALIZED_NAME_CLAP_ATOM)
  private MovClapAtom clapAtom;

  public static final String SERIALIZED_NAME_CSLG_ATOM = "CslgAtom";
  @SerializedName(SERIALIZED_NAME_CSLG_ATOM)
  private MovCslgAtom cslgAtom;

  public static final String SERIALIZED_NAME_MPEG2_FOUR_C_C_CONTROL = "Mpeg2FourCCControl";
  @SerializedName(SERIALIZED_NAME_MPEG2_FOUR_C_C_CONTROL)
  private MovMpeg2FourCCControl mpeg2FourCCControl;

  public static final String SERIALIZED_NAME_PADDING_CONTROL = "PaddingControl";
  @SerializedName(SERIALIZED_NAME_PADDING_CONTROL)
  private MovPaddingControl paddingControl;

  public static final String SERIALIZED_NAME_REFERENCE = "Reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private MovReference reference;

  public ContainerSettingsMovSettings() {
  }

  public ContainerSettingsMovSettings clapAtom(MovClapAtom clapAtom) {
    this.clapAtom = clapAtom;
    return this;
  }

  /**
   * Get clapAtom
   * @return clapAtom
   */
  @javax.annotation.Nullable
  public MovClapAtom getClapAtom() {
    return clapAtom;
  }

  public void setClapAtom(MovClapAtom clapAtom) {
    this.clapAtom = clapAtom;
  }


  public ContainerSettingsMovSettings cslgAtom(MovCslgAtom cslgAtom) {
    this.cslgAtom = cslgAtom;
    return this;
  }

  /**
   * Get cslgAtom
   * @return cslgAtom
   */
  @javax.annotation.Nullable
  public MovCslgAtom getCslgAtom() {
    return cslgAtom;
  }

  public void setCslgAtom(MovCslgAtom cslgAtom) {
    this.cslgAtom = cslgAtom;
  }


  public ContainerSettingsMovSettings mpeg2FourCCControl(MovMpeg2FourCCControl mpeg2FourCCControl) {
    this.mpeg2FourCCControl = mpeg2FourCCControl;
    return this;
  }

  /**
   * Get mpeg2FourCCControl
   * @return mpeg2FourCCControl
   */
  @javax.annotation.Nullable
  public MovMpeg2FourCCControl getMpeg2FourCCControl() {
    return mpeg2FourCCControl;
  }

  public void setMpeg2FourCCControl(MovMpeg2FourCCControl mpeg2FourCCControl) {
    this.mpeg2FourCCControl = mpeg2FourCCControl;
  }


  public ContainerSettingsMovSettings paddingControl(MovPaddingControl paddingControl) {
    this.paddingControl = paddingControl;
    return this;
  }

  /**
   * Get paddingControl
   * @return paddingControl
   */
  @javax.annotation.Nullable
  public MovPaddingControl getPaddingControl() {
    return paddingControl;
  }

  public void setPaddingControl(MovPaddingControl paddingControl) {
    this.paddingControl = paddingControl;
  }


  public ContainerSettingsMovSettings reference(MovReference reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  public MovReference getReference() {
    return reference;
  }

  public void setReference(MovReference reference) {
    this.reference = reference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerSettingsMovSettings containerSettingsMovSettings = (ContainerSettingsMovSettings) o;
    return Objects.equals(this.clapAtom, containerSettingsMovSettings.clapAtom) &&
        Objects.equals(this.cslgAtom, containerSettingsMovSettings.cslgAtom) &&
        Objects.equals(this.mpeg2FourCCControl, containerSettingsMovSettings.mpeg2FourCCControl) &&
        Objects.equals(this.paddingControl, containerSettingsMovSettings.paddingControl) &&
        Objects.equals(this.reference, containerSettingsMovSettings.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clapAtom, cslgAtom, mpeg2FourCCControl, paddingControl, reference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerSettingsMovSettings {\n");
    sb.append("    clapAtom: ").append(toIndentedString(clapAtom)).append("\n");
    sb.append("    cslgAtom: ").append(toIndentedString(cslgAtom)).append("\n");
    sb.append("    mpeg2FourCCControl: ").append(toIndentedString(mpeg2FourCCControl)).append("\n");
    sb.append("    paddingControl: ").append(toIndentedString(paddingControl)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClapAtom");
    openapiFields.add("CslgAtom");
    openapiFields.add("Mpeg2FourCCControl");
    openapiFields.add("PaddingControl");
    openapiFields.add("Reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerSettingsMovSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerSettingsMovSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerSettingsMovSettings is not found in the empty JSON string", ContainerSettingsMovSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerSettingsMovSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerSettingsMovSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClapAtom`
      if (jsonObj.get("ClapAtom") != null && !jsonObj.get("ClapAtom").isJsonNull()) {
        MovClapAtom.validateJsonElement(jsonObj.get("ClapAtom"));
      }
      // validate the optional field `CslgAtom`
      if (jsonObj.get("CslgAtom") != null && !jsonObj.get("CslgAtom").isJsonNull()) {
        MovCslgAtom.validateJsonElement(jsonObj.get("CslgAtom"));
      }
      // validate the optional field `Mpeg2FourCCControl`
      if (jsonObj.get("Mpeg2FourCCControl") != null && !jsonObj.get("Mpeg2FourCCControl").isJsonNull()) {
        MovMpeg2FourCCControl.validateJsonElement(jsonObj.get("Mpeg2FourCCControl"));
      }
      // validate the optional field `PaddingControl`
      if (jsonObj.get("PaddingControl") != null && !jsonObj.get("PaddingControl").isJsonNull()) {
        MovPaddingControl.validateJsonElement(jsonObj.get("PaddingControl"));
      }
      // validate the optional field `Reference`
      if (jsonObj.get("Reference") != null && !jsonObj.get("Reference").isJsonNull()) {
        MovReference.validateJsonElement(jsonObj.get("Reference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerSettingsMovSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerSettingsMovSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerSettingsMovSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerSettingsMovSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerSettingsMovSettings>() {
           @Override
           public void write(JsonWriter out, ContainerSettingsMovSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerSettingsMovSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerSettingsMovSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerSettingsMovSettings
   * @throws IOException if the JSON string is invalid with respect to ContainerSettingsMovSettings
   */
  public static ContainerSettingsMovSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerSettingsMovSettings.class);
  }

  /**
   * Convert an instance of ContainerSettingsMovSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

