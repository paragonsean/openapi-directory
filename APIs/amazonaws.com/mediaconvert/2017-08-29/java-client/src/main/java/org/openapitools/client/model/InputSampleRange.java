/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * If the sample range metadata in your input video is accurate, or if you don&#39;t know about sample range, keep the default value, Follow, for this setting. When you do, the service automatically detects your input sample range. If your input video has metadata indicating the wrong sample range, specify the accurate sample range here. When you do, MediaConvert ignores any sample range information in the input metadata. Regardless of whether MediaConvert uses the input sample range or the sample range that you specify, MediaConvert uses the sample range for transcoding and also writes it to the output metadata.
 */
@JsonAdapter(InputSampleRange.Adapter.class)
public enum InputSampleRange {
  
  FOLLOW("FOLLOW"),
  
  FULL_RANGE("FULL_RANGE"),
  
  LIMITED_RANGE("LIMITED_RANGE");

  private String value;

  InputSampleRange(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static InputSampleRange fromValue(String value) {
    for (InputSampleRange b : InputSampleRange.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<InputSampleRange> {
    @Override
    public void write(final JsonWriter jsonWriter, final InputSampleRange enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public InputSampleRange read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return InputSampleRange.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    InputSampleRange.fromValue(value);
  }
}

