/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. MediaConvert adds an entry in the .mpd manifest for each set of images that you generate. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
 */
@JsonAdapter(DashIsoImageBasedTrickPlay.Adapter.class)
public enum DashIsoImageBasedTrickPlay {
  
  NONE("NONE"),
  
  THUMBNAIL("THUMBNAIL"),
  
  THUMBNAIL_AND_FULLFRAME("THUMBNAIL_AND_FULLFRAME"),
  
  ADVANCED("ADVANCED");

  private String value;

  DashIsoImageBasedTrickPlay(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DashIsoImageBasedTrickPlay fromValue(String value) {
    for (DashIsoImageBasedTrickPlay b : DashIsoImageBasedTrickPlay.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DashIsoImageBasedTrickPlay> {
    @Override
    public void write(final JsonWriter jsonWriter, final DashIsoImageBasedTrickPlay enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DashIsoImageBasedTrickPlay read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DashIsoImageBasedTrickPlay.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DashIsoImageBasedTrickPlay.fromValue(value);
  }
}

