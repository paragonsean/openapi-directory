/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that&#39;s interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
 */
@JsonAdapter(Mpeg2InterlaceMode.Adapter.class)
public enum Mpeg2InterlaceMode {
  
  PROGRESSIVE("PROGRESSIVE"),
  
  TOP_FIELD("TOP_FIELD"),
  
  BOTTOM_FIELD("BOTTOM_FIELD"),
  
  FOLLOW_TOP_FIELD("FOLLOW_TOP_FIELD"),
  
  FOLLOW_BOTTOM_FIELD("FOLLOW_BOTTOM_FIELD");

  private String value;

  Mpeg2InterlaceMode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Mpeg2InterlaceMode fromValue(String value) {
    for (Mpeg2InterlaceMode b : Mpeg2InterlaceMode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Mpeg2InterlaceMode> {
    @Override
    public void write(final JsonWriter jsonWriter, final Mpeg2InterlaceMode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Mpeg2InterlaceMode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Mpeg2InterlaceMode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Mpeg2InterlaceMode.fromValue(value);
  }
}

