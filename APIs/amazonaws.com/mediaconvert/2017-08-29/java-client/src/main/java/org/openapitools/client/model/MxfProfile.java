/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify the MXF profile, also called shim, for this output. To automatically select a profile according to your output video codec and resolution, leave blank. For a list of codecs supported with each MXF profile, see https://docs.aws.amazon.com/mediaconvert/latest/ug/codecs-supported-with-each-mxf-profile.html. For more information about the automatic selection behavior, see https://docs.aws.amazon.com/mediaconvert/latest/ug/default-automatic-selection-of-mxf-profiles.html.
 */
@JsonAdapter(MxfProfile.Adapter.class)
public enum MxfProfile {
  
  D_10("D_10"),
  
  XDCAM("XDCAM"),
  
  OP1_A("OP1A"),
  
  XAVC("XAVC"),
  
  XDCAM_RDD9("XDCAM_RDD9");

  private String value;

  MxfProfile(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MxfProfile fromValue(String value) {
    for (MxfProfile b : MxfProfile.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MxfProfile> {
    @Override
    public void write(final JsonWriter jsonWriter, final MxfProfile enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MxfProfile read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MxfProfile.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    MxfProfile.fromValue(value);
  }
}

