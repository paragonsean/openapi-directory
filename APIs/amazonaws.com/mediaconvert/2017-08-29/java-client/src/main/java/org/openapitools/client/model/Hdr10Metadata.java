/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don&#39;t affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Hdr10Metadata {
  public static final String SERIALIZED_NAME_BLUE_PRIMARY_X = "BluePrimaryX";
  @SerializedName(SERIALIZED_NAME_BLUE_PRIMARY_X)
  private Integer bluePrimaryX;

  public static final String SERIALIZED_NAME_BLUE_PRIMARY_Y = "BluePrimaryY";
  @SerializedName(SERIALIZED_NAME_BLUE_PRIMARY_Y)
  private Integer bluePrimaryY;

  public static final String SERIALIZED_NAME_GREEN_PRIMARY_X = "GreenPrimaryX";
  @SerializedName(SERIALIZED_NAME_GREEN_PRIMARY_X)
  private Integer greenPrimaryX;

  public static final String SERIALIZED_NAME_GREEN_PRIMARY_Y = "GreenPrimaryY";
  @SerializedName(SERIALIZED_NAME_GREEN_PRIMARY_Y)
  private Integer greenPrimaryY;

  public static final String SERIALIZED_NAME_MAX_CONTENT_LIGHT_LEVEL = "MaxContentLightLevel";
  @SerializedName(SERIALIZED_NAME_MAX_CONTENT_LIGHT_LEVEL)
  private Integer maxContentLightLevel;

  public static final String SERIALIZED_NAME_MAX_FRAME_AVERAGE_LIGHT_LEVEL = "MaxFrameAverageLightLevel";
  @SerializedName(SERIALIZED_NAME_MAX_FRAME_AVERAGE_LIGHT_LEVEL)
  private Integer maxFrameAverageLightLevel;

  public static final String SERIALIZED_NAME_MAX_LUMINANCE = "MaxLuminance";
  @SerializedName(SERIALIZED_NAME_MAX_LUMINANCE)
  private Integer maxLuminance;

  public static final String SERIALIZED_NAME_MIN_LUMINANCE = "MinLuminance";
  @SerializedName(SERIALIZED_NAME_MIN_LUMINANCE)
  private Integer minLuminance;

  public static final String SERIALIZED_NAME_RED_PRIMARY_X = "RedPrimaryX";
  @SerializedName(SERIALIZED_NAME_RED_PRIMARY_X)
  private Integer redPrimaryX;

  public static final String SERIALIZED_NAME_RED_PRIMARY_Y = "RedPrimaryY";
  @SerializedName(SERIALIZED_NAME_RED_PRIMARY_Y)
  private Integer redPrimaryY;

  public static final String SERIALIZED_NAME_WHITE_POINT_X = "WhitePointX";
  @SerializedName(SERIALIZED_NAME_WHITE_POINT_X)
  private Integer whitePointX;

  public static final String SERIALIZED_NAME_WHITE_POINT_Y = "WhitePointY";
  @SerializedName(SERIALIZED_NAME_WHITE_POINT_Y)
  private Integer whitePointY;

  public Hdr10Metadata() {
  }

  public Hdr10Metadata bluePrimaryX(Integer bluePrimaryX) {
    this.bluePrimaryX = bluePrimaryX;
    return this;
  }

  /**
   * Get bluePrimaryX
   * @return bluePrimaryX
   */
  @javax.annotation.Nullable
  public Integer getBluePrimaryX() {
    return bluePrimaryX;
  }

  public void setBluePrimaryX(Integer bluePrimaryX) {
    this.bluePrimaryX = bluePrimaryX;
  }


  public Hdr10Metadata bluePrimaryY(Integer bluePrimaryY) {
    this.bluePrimaryY = bluePrimaryY;
    return this;
  }

  /**
   * Get bluePrimaryY
   * @return bluePrimaryY
   */
  @javax.annotation.Nullable
  public Integer getBluePrimaryY() {
    return bluePrimaryY;
  }

  public void setBluePrimaryY(Integer bluePrimaryY) {
    this.bluePrimaryY = bluePrimaryY;
  }


  public Hdr10Metadata greenPrimaryX(Integer greenPrimaryX) {
    this.greenPrimaryX = greenPrimaryX;
    return this;
  }

  /**
   * Get greenPrimaryX
   * @return greenPrimaryX
   */
  @javax.annotation.Nullable
  public Integer getGreenPrimaryX() {
    return greenPrimaryX;
  }

  public void setGreenPrimaryX(Integer greenPrimaryX) {
    this.greenPrimaryX = greenPrimaryX;
  }


  public Hdr10Metadata greenPrimaryY(Integer greenPrimaryY) {
    this.greenPrimaryY = greenPrimaryY;
    return this;
  }

  /**
   * Get greenPrimaryY
   * @return greenPrimaryY
   */
  @javax.annotation.Nullable
  public Integer getGreenPrimaryY() {
    return greenPrimaryY;
  }

  public void setGreenPrimaryY(Integer greenPrimaryY) {
    this.greenPrimaryY = greenPrimaryY;
  }


  public Hdr10Metadata maxContentLightLevel(Integer maxContentLightLevel) {
    this.maxContentLightLevel = maxContentLightLevel;
    return this;
  }

  /**
   * Get maxContentLightLevel
   * @return maxContentLightLevel
   */
  @javax.annotation.Nullable
  public Integer getMaxContentLightLevel() {
    return maxContentLightLevel;
  }

  public void setMaxContentLightLevel(Integer maxContentLightLevel) {
    this.maxContentLightLevel = maxContentLightLevel;
  }


  public Hdr10Metadata maxFrameAverageLightLevel(Integer maxFrameAverageLightLevel) {
    this.maxFrameAverageLightLevel = maxFrameAverageLightLevel;
    return this;
  }

  /**
   * Get maxFrameAverageLightLevel
   * @return maxFrameAverageLightLevel
   */
  @javax.annotation.Nullable
  public Integer getMaxFrameAverageLightLevel() {
    return maxFrameAverageLightLevel;
  }

  public void setMaxFrameAverageLightLevel(Integer maxFrameAverageLightLevel) {
    this.maxFrameAverageLightLevel = maxFrameAverageLightLevel;
  }


  public Hdr10Metadata maxLuminance(Integer maxLuminance) {
    this.maxLuminance = maxLuminance;
    return this;
  }

  /**
   * Get maxLuminance
   * @return maxLuminance
   */
  @javax.annotation.Nullable
  public Integer getMaxLuminance() {
    return maxLuminance;
  }

  public void setMaxLuminance(Integer maxLuminance) {
    this.maxLuminance = maxLuminance;
  }


  public Hdr10Metadata minLuminance(Integer minLuminance) {
    this.minLuminance = minLuminance;
    return this;
  }

  /**
   * Get minLuminance
   * @return minLuminance
   */
  @javax.annotation.Nullable
  public Integer getMinLuminance() {
    return minLuminance;
  }

  public void setMinLuminance(Integer minLuminance) {
    this.minLuminance = minLuminance;
  }


  public Hdr10Metadata redPrimaryX(Integer redPrimaryX) {
    this.redPrimaryX = redPrimaryX;
    return this;
  }

  /**
   * Get redPrimaryX
   * @return redPrimaryX
   */
  @javax.annotation.Nullable
  public Integer getRedPrimaryX() {
    return redPrimaryX;
  }

  public void setRedPrimaryX(Integer redPrimaryX) {
    this.redPrimaryX = redPrimaryX;
  }


  public Hdr10Metadata redPrimaryY(Integer redPrimaryY) {
    this.redPrimaryY = redPrimaryY;
    return this;
  }

  /**
   * Get redPrimaryY
   * @return redPrimaryY
   */
  @javax.annotation.Nullable
  public Integer getRedPrimaryY() {
    return redPrimaryY;
  }

  public void setRedPrimaryY(Integer redPrimaryY) {
    this.redPrimaryY = redPrimaryY;
  }


  public Hdr10Metadata whitePointX(Integer whitePointX) {
    this.whitePointX = whitePointX;
    return this;
  }

  /**
   * Get whitePointX
   * @return whitePointX
   */
  @javax.annotation.Nullable
  public Integer getWhitePointX() {
    return whitePointX;
  }

  public void setWhitePointX(Integer whitePointX) {
    this.whitePointX = whitePointX;
  }


  public Hdr10Metadata whitePointY(Integer whitePointY) {
    this.whitePointY = whitePointY;
    return this;
  }

  /**
   * Get whitePointY
   * @return whitePointY
   */
  @javax.annotation.Nullable
  public Integer getWhitePointY() {
    return whitePointY;
  }

  public void setWhitePointY(Integer whitePointY) {
    this.whitePointY = whitePointY;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hdr10Metadata hdr10Metadata = (Hdr10Metadata) o;
    return Objects.equals(this.bluePrimaryX, hdr10Metadata.bluePrimaryX) &&
        Objects.equals(this.bluePrimaryY, hdr10Metadata.bluePrimaryY) &&
        Objects.equals(this.greenPrimaryX, hdr10Metadata.greenPrimaryX) &&
        Objects.equals(this.greenPrimaryY, hdr10Metadata.greenPrimaryY) &&
        Objects.equals(this.maxContentLightLevel, hdr10Metadata.maxContentLightLevel) &&
        Objects.equals(this.maxFrameAverageLightLevel, hdr10Metadata.maxFrameAverageLightLevel) &&
        Objects.equals(this.maxLuminance, hdr10Metadata.maxLuminance) &&
        Objects.equals(this.minLuminance, hdr10Metadata.minLuminance) &&
        Objects.equals(this.redPrimaryX, hdr10Metadata.redPrimaryX) &&
        Objects.equals(this.redPrimaryY, hdr10Metadata.redPrimaryY) &&
        Objects.equals(this.whitePointX, hdr10Metadata.whitePointX) &&
        Objects.equals(this.whitePointY, hdr10Metadata.whitePointY);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bluePrimaryX, bluePrimaryY, greenPrimaryX, greenPrimaryY, maxContentLightLevel, maxFrameAverageLightLevel, maxLuminance, minLuminance, redPrimaryX, redPrimaryY, whitePointX, whitePointY);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hdr10Metadata {\n");
    sb.append("    bluePrimaryX: ").append(toIndentedString(bluePrimaryX)).append("\n");
    sb.append("    bluePrimaryY: ").append(toIndentedString(bluePrimaryY)).append("\n");
    sb.append("    greenPrimaryX: ").append(toIndentedString(greenPrimaryX)).append("\n");
    sb.append("    greenPrimaryY: ").append(toIndentedString(greenPrimaryY)).append("\n");
    sb.append("    maxContentLightLevel: ").append(toIndentedString(maxContentLightLevel)).append("\n");
    sb.append("    maxFrameAverageLightLevel: ").append(toIndentedString(maxFrameAverageLightLevel)).append("\n");
    sb.append("    maxLuminance: ").append(toIndentedString(maxLuminance)).append("\n");
    sb.append("    minLuminance: ").append(toIndentedString(minLuminance)).append("\n");
    sb.append("    redPrimaryX: ").append(toIndentedString(redPrimaryX)).append("\n");
    sb.append("    redPrimaryY: ").append(toIndentedString(redPrimaryY)).append("\n");
    sb.append("    whitePointX: ").append(toIndentedString(whitePointX)).append("\n");
    sb.append("    whitePointY: ").append(toIndentedString(whitePointY)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BluePrimaryX");
    openapiFields.add("BluePrimaryY");
    openapiFields.add("GreenPrimaryX");
    openapiFields.add("GreenPrimaryY");
    openapiFields.add("MaxContentLightLevel");
    openapiFields.add("MaxFrameAverageLightLevel");
    openapiFields.add("MaxLuminance");
    openapiFields.add("MinLuminance");
    openapiFields.add("RedPrimaryX");
    openapiFields.add("RedPrimaryY");
    openapiFields.add("WhitePointX");
    openapiFields.add("WhitePointY");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Hdr10Metadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hdr10Metadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hdr10Metadata is not found in the empty JSON string", Hdr10Metadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hdr10Metadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hdr10Metadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BluePrimaryX`
      if (jsonObj.get("BluePrimaryX") != null && !jsonObj.get("BluePrimaryX").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BluePrimaryX"));
      }
      // validate the optional field `BluePrimaryY`
      if (jsonObj.get("BluePrimaryY") != null && !jsonObj.get("BluePrimaryY").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BluePrimaryY"));
      }
      // validate the optional field `GreenPrimaryX`
      if (jsonObj.get("GreenPrimaryX") != null && !jsonObj.get("GreenPrimaryX").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("GreenPrimaryX"));
      }
      // validate the optional field `GreenPrimaryY`
      if (jsonObj.get("GreenPrimaryY") != null && !jsonObj.get("GreenPrimaryY").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("GreenPrimaryY"));
      }
      // validate the optional field `MaxContentLightLevel`
      if (jsonObj.get("MaxContentLightLevel") != null && !jsonObj.get("MaxContentLightLevel").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxContentLightLevel"));
      }
      // validate the optional field `MaxFrameAverageLightLevel`
      if (jsonObj.get("MaxFrameAverageLightLevel") != null && !jsonObj.get("MaxFrameAverageLightLevel").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxFrameAverageLightLevel"));
      }
      // validate the optional field `MaxLuminance`
      if (jsonObj.get("MaxLuminance") != null && !jsonObj.get("MaxLuminance").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxLuminance"));
      }
      // validate the optional field `MinLuminance`
      if (jsonObj.get("MinLuminance") != null && !jsonObj.get("MinLuminance").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinLuminance"));
      }
      // validate the optional field `RedPrimaryX`
      if (jsonObj.get("RedPrimaryX") != null && !jsonObj.get("RedPrimaryX").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RedPrimaryX"));
      }
      // validate the optional field `RedPrimaryY`
      if (jsonObj.get("RedPrimaryY") != null && !jsonObj.get("RedPrimaryY").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RedPrimaryY"));
      }
      // validate the optional field `WhitePointX`
      if (jsonObj.get("WhitePointX") != null && !jsonObj.get("WhitePointX").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("WhitePointX"));
      }
      // validate the optional field `WhitePointY`
      if (jsonObj.get("WhitePointY") != null && !jsonObj.get("WhitePointY").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("WhitePointY"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hdr10Metadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hdr10Metadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hdr10Metadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hdr10Metadata.class));

       return (TypeAdapter<T>) new TypeAdapter<Hdr10Metadata>() {
           @Override
           public void write(JsonWriter out, Hdr10Metadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hdr10Metadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Hdr10Metadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Hdr10Metadata
   * @throws IOException if the JSON string is invalid with respect to Hdr10Metadata
   */
  public static Hdr10Metadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hdr10Metadata.class);
  }

  /**
   * Convert an instance of Hdr10Metadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

