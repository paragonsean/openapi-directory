/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
 */
@JsonAdapter(H264SceneChangeDetect.Adapter.class)
public enum H264SceneChangeDetect {
  
  DISABLED("DISABLED"),
  
  ENABLED("ENABLED"),
  
  TRANSITION_DETECTION("TRANSITION_DETECTION");

  private String value;

  H264SceneChangeDetect(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H264SceneChangeDetect fromValue(String value) {
    for (H264SceneChangeDetect b : H264SceneChangeDetect.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H264SceneChangeDetect> {
    @Override
    public void write(final JsonWriter jsonWriter, final H264SceneChangeDetect enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H264SceneChangeDetect read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H264SceneChangeDetect.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H264SceneChangeDetect.fromValue(value);
  }
}

