/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AvcIntraClass;
import org.openapitools.client.model.AvcIntraFramerateControl;
import org.openapitools.client.model.AvcIntraFramerateConversionAlgorithm;
import org.openapitools.client.model.AvcIntraInterlaceMode;
import org.openapitools.client.model.AvcIntraScanTypeConversionMode;
import org.openapitools.client.model.AvcIntraSettingsAvcIntraUhdSettings;
import org.openapitools.client.model.AvcIntraSlowPal;
import org.openapitools.client.model.AvcIntraTelecine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvcIntraSettings {
  public static final String SERIALIZED_NAME_AVC_INTRA_CLASS = "AvcIntraClass";
  @SerializedName(SERIALIZED_NAME_AVC_INTRA_CLASS)
  private AvcIntraClass avcIntraClass;

  public static final String SERIALIZED_NAME_AVC_INTRA_UHD_SETTINGS = "AvcIntraUhdSettings";
  @SerializedName(SERIALIZED_NAME_AVC_INTRA_UHD_SETTINGS)
  private AvcIntraSettingsAvcIntraUhdSettings avcIntraUhdSettings;

  public static final String SERIALIZED_NAME_FRAMERATE_CONTROL = "FramerateControl";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONTROL)
  private AvcIntraFramerateControl framerateControl;

  public static final String SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM = "FramerateConversionAlgorithm";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM)
  private AvcIntraFramerateConversionAlgorithm framerateConversionAlgorithm;

  public static final String SERIALIZED_NAME_FRAMERATE_DENOMINATOR = "FramerateDenominator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_DENOMINATOR)
  private Integer framerateDenominator;

  public static final String SERIALIZED_NAME_FRAMERATE_NUMERATOR = "FramerateNumerator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_NUMERATOR)
  private Integer framerateNumerator;

  public static final String SERIALIZED_NAME_INTERLACE_MODE = "InterlaceMode";
  @SerializedName(SERIALIZED_NAME_INTERLACE_MODE)
  private AvcIntraInterlaceMode interlaceMode;

  public static final String SERIALIZED_NAME_SCAN_TYPE_CONVERSION_MODE = "ScanTypeConversionMode";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE_CONVERSION_MODE)
  private AvcIntraScanTypeConversionMode scanTypeConversionMode;

  public static final String SERIALIZED_NAME_SLOW_PAL = "SlowPal";
  @SerializedName(SERIALIZED_NAME_SLOW_PAL)
  private AvcIntraSlowPal slowPal;

  public static final String SERIALIZED_NAME_TELECINE = "Telecine";
  @SerializedName(SERIALIZED_NAME_TELECINE)
  private AvcIntraTelecine telecine;

  public AvcIntraSettings() {
  }

  public AvcIntraSettings avcIntraClass(AvcIntraClass avcIntraClass) {
    this.avcIntraClass = avcIntraClass;
    return this;
  }

  /**
   * Get avcIntraClass
   * @return avcIntraClass
   */
  @javax.annotation.Nullable
  public AvcIntraClass getAvcIntraClass() {
    return avcIntraClass;
  }

  public void setAvcIntraClass(AvcIntraClass avcIntraClass) {
    this.avcIntraClass = avcIntraClass;
  }


  public AvcIntraSettings avcIntraUhdSettings(AvcIntraSettingsAvcIntraUhdSettings avcIntraUhdSettings) {
    this.avcIntraUhdSettings = avcIntraUhdSettings;
    return this;
  }

  /**
   * Get avcIntraUhdSettings
   * @return avcIntraUhdSettings
   */
  @javax.annotation.Nullable
  public AvcIntraSettingsAvcIntraUhdSettings getAvcIntraUhdSettings() {
    return avcIntraUhdSettings;
  }

  public void setAvcIntraUhdSettings(AvcIntraSettingsAvcIntraUhdSettings avcIntraUhdSettings) {
    this.avcIntraUhdSettings = avcIntraUhdSettings;
  }


  public AvcIntraSettings framerateControl(AvcIntraFramerateControl framerateControl) {
    this.framerateControl = framerateControl;
    return this;
  }

  /**
   * Get framerateControl
   * @return framerateControl
   */
  @javax.annotation.Nullable
  public AvcIntraFramerateControl getFramerateControl() {
    return framerateControl;
  }

  public void setFramerateControl(AvcIntraFramerateControl framerateControl) {
    this.framerateControl = framerateControl;
  }


  public AvcIntraSettings framerateConversionAlgorithm(AvcIntraFramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
    return this;
  }

  /**
   * Get framerateConversionAlgorithm
   * @return framerateConversionAlgorithm
   */
  @javax.annotation.Nullable
  public AvcIntraFramerateConversionAlgorithm getFramerateConversionAlgorithm() {
    return framerateConversionAlgorithm;
  }

  public void setFramerateConversionAlgorithm(AvcIntraFramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
  }


  public AvcIntraSettings framerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
    return this;
  }

  /**
   * Get framerateDenominator
   * @return framerateDenominator
   */
  @javax.annotation.Nullable
  public Integer getFramerateDenominator() {
    return framerateDenominator;
  }

  public void setFramerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
  }


  public AvcIntraSettings framerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
    return this;
  }

  /**
   * Get framerateNumerator
   * @return framerateNumerator
   */
  @javax.annotation.Nullable
  public Integer getFramerateNumerator() {
    return framerateNumerator;
  }

  public void setFramerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
  }


  public AvcIntraSettings interlaceMode(AvcIntraInterlaceMode interlaceMode) {
    this.interlaceMode = interlaceMode;
    return this;
  }

  /**
   * Get interlaceMode
   * @return interlaceMode
   */
  @javax.annotation.Nullable
  public AvcIntraInterlaceMode getInterlaceMode() {
    return interlaceMode;
  }

  public void setInterlaceMode(AvcIntraInterlaceMode interlaceMode) {
    this.interlaceMode = interlaceMode;
  }


  public AvcIntraSettings scanTypeConversionMode(AvcIntraScanTypeConversionMode scanTypeConversionMode) {
    this.scanTypeConversionMode = scanTypeConversionMode;
    return this;
  }

  /**
   * Get scanTypeConversionMode
   * @return scanTypeConversionMode
   */
  @javax.annotation.Nullable
  public AvcIntraScanTypeConversionMode getScanTypeConversionMode() {
    return scanTypeConversionMode;
  }

  public void setScanTypeConversionMode(AvcIntraScanTypeConversionMode scanTypeConversionMode) {
    this.scanTypeConversionMode = scanTypeConversionMode;
  }


  public AvcIntraSettings slowPal(AvcIntraSlowPal slowPal) {
    this.slowPal = slowPal;
    return this;
  }

  /**
   * Get slowPal
   * @return slowPal
   */
  @javax.annotation.Nullable
  public AvcIntraSlowPal getSlowPal() {
    return slowPal;
  }

  public void setSlowPal(AvcIntraSlowPal slowPal) {
    this.slowPal = slowPal;
  }


  public AvcIntraSettings telecine(AvcIntraTelecine telecine) {
    this.telecine = telecine;
    return this;
  }

  /**
   * Get telecine
   * @return telecine
   */
  @javax.annotation.Nullable
  public AvcIntraTelecine getTelecine() {
    return telecine;
  }

  public void setTelecine(AvcIntraTelecine telecine) {
    this.telecine = telecine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvcIntraSettings avcIntraSettings = (AvcIntraSettings) o;
    return Objects.equals(this.avcIntraClass, avcIntraSettings.avcIntraClass) &&
        Objects.equals(this.avcIntraUhdSettings, avcIntraSettings.avcIntraUhdSettings) &&
        Objects.equals(this.framerateControl, avcIntraSettings.framerateControl) &&
        Objects.equals(this.framerateConversionAlgorithm, avcIntraSettings.framerateConversionAlgorithm) &&
        Objects.equals(this.framerateDenominator, avcIntraSettings.framerateDenominator) &&
        Objects.equals(this.framerateNumerator, avcIntraSettings.framerateNumerator) &&
        Objects.equals(this.interlaceMode, avcIntraSettings.interlaceMode) &&
        Objects.equals(this.scanTypeConversionMode, avcIntraSettings.scanTypeConversionMode) &&
        Objects.equals(this.slowPal, avcIntraSettings.slowPal) &&
        Objects.equals(this.telecine, avcIntraSettings.telecine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avcIntraClass, avcIntraUhdSettings, framerateControl, framerateConversionAlgorithm, framerateDenominator, framerateNumerator, interlaceMode, scanTypeConversionMode, slowPal, telecine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvcIntraSettings {\n");
    sb.append("    avcIntraClass: ").append(toIndentedString(avcIntraClass)).append("\n");
    sb.append("    avcIntraUhdSettings: ").append(toIndentedString(avcIntraUhdSettings)).append("\n");
    sb.append("    framerateControl: ").append(toIndentedString(framerateControl)).append("\n");
    sb.append("    framerateConversionAlgorithm: ").append(toIndentedString(framerateConversionAlgorithm)).append("\n");
    sb.append("    framerateDenominator: ").append(toIndentedString(framerateDenominator)).append("\n");
    sb.append("    framerateNumerator: ").append(toIndentedString(framerateNumerator)).append("\n");
    sb.append("    interlaceMode: ").append(toIndentedString(interlaceMode)).append("\n");
    sb.append("    scanTypeConversionMode: ").append(toIndentedString(scanTypeConversionMode)).append("\n");
    sb.append("    slowPal: ").append(toIndentedString(slowPal)).append("\n");
    sb.append("    telecine: ").append(toIndentedString(telecine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvcIntraClass");
    openapiFields.add("AvcIntraUhdSettings");
    openapiFields.add("FramerateControl");
    openapiFields.add("FramerateConversionAlgorithm");
    openapiFields.add("FramerateDenominator");
    openapiFields.add("FramerateNumerator");
    openapiFields.add("InterlaceMode");
    openapiFields.add("ScanTypeConversionMode");
    openapiFields.add("SlowPal");
    openapiFields.add("Telecine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvcIntraSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvcIntraSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvcIntraSettings is not found in the empty JSON string", AvcIntraSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvcIntraSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvcIntraSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AvcIntraClass`
      if (jsonObj.get("AvcIntraClass") != null && !jsonObj.get("AvcIntraClass").isJsonNull()) {
        AvcIntraClass.validateJsonElement(jsonObj.get("AvcIntraClass"));
      }
      // validate the optional field `AvcIntraUhdSettings`
      if (jsonObj.get("AvcIntraUhdSettings") != null && !jsonObj.get("AvcIntraUhdSettings").isJsonNull()) {
        AvcIntraSettingsAvcIntraUhdSettings.validateJsonElement(jsonObj.get("AvcIntraUhdSettings"));
      }
      // validate the optional field `FramerateControl`
      if (jsonObj.get("FramerateControl") != null && !jsonObj.get("FramerateControl").isJsonNull()) {
        AvcIntraFramerateControl.validateJsonElement(jsonObj.get("FramerateControl"));
      }
      // validate the optional field `FramerateConversionAlgorithm`
      if (jsonObj.get("FramerateConversionAlgorithm") != null && !jsonObj.get("FramerateConversionAlgorithm").isJsonNull()) {
        AvcIntraFramerateConversionAlgorithm.validateJsonElement(jsonObj.get("FramerateConversionAlgorithm"));
      }
      // validate the optional field `FramerateDenominator`
      if (jsonObj.get("FramerateDenominator") != null && !jsonObj.get("FramerateDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateDenominator"));
      }
      // validate the optional field `FramerateNumerator`
      if (jsonObj.get("FramerateNumerator") != null && !jsonObj.get("FramerateNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateNumerator"));
      }
      // validate the optional field `InterlaceMode`
      if (jsonObj.get("InterlaceMode") != null && !jsonObj.get("InterlaceMode").isJsonNull()) {
        AvcIntraInterlaceMode.validateJsonElement(jsonObj.get("InterlaceMode"));
      }
      // validate the optional field `ScanTypeConversionMode`
      if (jsonObj.get("ScanTypeConversionMode") != null && !jsonObj.get("ScanTypeConversionMode").isJsonNull()) {
        AvcIntraScanTypeConversionMode.validateJsonElement(jsonObj.get("ScanTypeConversionMode"));
      }
      // validate the optional field `SlowPal`
      if (jsonObj.get("SlowPal") != null && !jsonObj.get("SlowPal").isJsonNull()) {
        AvcIntraSlowPal.validateJsonElement(jsonObj.get("SlowPal"));
      }
      // validate the optional field `Telecine`
      if (jsonObj.get("Telecine") != null && !jsonObj.get("Telecine").isJsonNull()) {
        AvcIntraTelecine.validateJsonElement(jsonObj.get("Telecine"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvcIntraSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvcIntraSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvcIntraSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvcIntraSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AvcIntraSettings>() {
           @Override
           public void write(JsonWriter out, AvcIntraSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvcIntraSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvcIntraSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvcIntraSettings
   * @throws IOException if the JSON string is invalid with respect to AvcIntraSettings
   */
  public static AvcIntraSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvcIntraSettings.class);
  }

  /**
   * Convert an instance of AvcIntraSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

