/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don&#39;t have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
 */
@JsonAdapter(CmafPtsOffsetHandlingForBFrames.Adapter.class)
public enum CmafPtsOffsetHandlingForBFrames {
  
  ZERO_BASED("ZERO_BASED"),
  
  MATCH_INITIAL_PTS("MATCH_INITIAL_PTS");

  private String value;

  CmafPtsOffsetHandlingForBFrames(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CmafPtsOffsetHandlingForBFrames fromValue(String value) {
    for (CmafPtsOffsetHandlingForBFrames b : CmafPtsOffsetHandlingForBFrames.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CmafPtsOffsetHandlingForBFrames> {
    @Override
    public void write(final JsonWriter jsonWriter, final CmafPtsOffsetHandlingForBFrames enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CmafPtsOffsetHandlingForBFrames read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CmafPtsOffsetHandlingForBFrames.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CmafPtsOffsetHandlingForBFrames.fromValue(value);
  }
}

