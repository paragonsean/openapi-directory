/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * When you set Adaptive Quantization to Auto, or leave blank, MediaConvert automatically applies quantization to improve the video quality of your output. Set Adaptive Quantization to Low, Medium, High, Higher, or Max to manually control the strength of the quantization filter. When you do, you can specify a value for Spatial Adaptive Quantization, Temporal Adaptive Quantization, and Flicker Adaptive Quantization, to further control the quantization filter. Set Adaptive Quantization to Off to apply no quantization to your output.
 */
@JsonAdapter(H265AdaptiveQuantization.Adapter.class)
public enum H265AdaptiveQuantization {
  
  OFF("OFF"),
  
  LOW("LOW"),
  
  MEDIUM("MEDIUM"),
  
  HIGH("HIGH"),
  
  HIGHER("HIGHER"),
  
  MAX("MAX"),
  
  AUTO("AUTO");

  private String value;

  H265AdaptiveQuantization(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H265AdaptiveQuantization fromValue(String value) {
    for (H265AdaptiveQuantization b : H265AdaptiveQuantization.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H265AdaptiveQuantization> {
    @Override
    public void write(final JsonWriter jsonWriter, final H265AdaptiveQuantization enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H265AdaptiveQuantization read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H265AdaptiveQuantization.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H265AdaptiveQuantization.fromValue(value);
  }
}

