/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default to set DEFAULT&#x3D;YES and AUTOSELECT&#x3D;YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default to set DEFAULT&#x3D;NO and AUTOSELECT&#x3D;YES. Choose Alternate Audio, Not Auto Select to set DEFAULT&#x3D;NO and AUTOSELECT&#x3D;NO. When you don&#39;t specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
 */
@JsonAdapter(CmfcAudioTrackType.Adapter.class)
public enum CmfcAudioTrackType {
  
  AUTO_SELECT_DEFAULT("ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"),
  
  AUTO_SELECT("ALTERNATE_AUDIO_AUTO_SELECT"),
  
  NOT_AUTO_SELECT("ALTERNATE_AUDIO_NOT_AUTO_SELECT");

  private String value;

  CmfcAudioTrackType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CmfcAudioTrackType fromValue(String value) {
    for (CmfcAudioTrackType b : CmfcAudioTrackType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CmfcAudioTrackType> {
    @Override
    public void write(final JsonWriter jsonWriter, final CmfcAudioTrackType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CmfcAudioTrackType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CmfcAudioTrackType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CmfcAudioTrackType.fromValue(value);
  }
}

