/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn&#39;t suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can&#39;t use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
 */
@JsonAdapter(AvcIntraScanTypeConversionMode.Adapter.class)
public enum AvcIntraScanTypeConversionMode {
  
  INTERLACED("INTERLACED"),
  
  INTERLACED_OPTIMIZE("INTERLACED_OPTIMIZE");

  private String value;

  AvcIntraScanTypeConversionMode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AvcIntraScanTypeConversionMode fromValue(String value) {
    for (AvcIntraScanTypeConversionMode b : AvcIntraScanTypeConversionMode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AvcIntraScanTypeConversionMode> {
    @Override
    public void write(final JsonWriter jsonWriter, final AvcIntraScanTypeConversionMode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AvcIntraScanTypeConversionMode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AvcIntraScanTypeConversionMode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AvcIntraScanTypeConversionMode.fromValue(value);
  }
}

