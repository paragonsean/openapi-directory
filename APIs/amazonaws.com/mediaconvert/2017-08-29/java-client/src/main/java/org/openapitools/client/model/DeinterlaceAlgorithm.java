/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Only applies when you set Deinterlace mode to Deinterlace or Adaptive. Interpolate produces sharper pictures, while blend produces smoother motion. If your source file includes a ticker, such as a scrolling headline at the bottom of the frame: Choose Interpolate ticker or Blend ticker. To apply field doubling: Choose Linear interpolation. Note that Linear interpolation may introduce video artifacts into your output.
 */
@JsonAdapter(DeinterlaceAlgorithm.Adapter.class)
public enum DeinterlaceAlgorithm {
  
  INTERPOLATE("INTERPOLATE"),
  
  INTERPOLATE_TICKER("INTERPOLATE_TICKER"),
  
  BLEND("BLEND"),
  
  BLEND_TICKER("BLEND_TICKER"),
  
  LINEAR_INTERPOLATION("LINEAR_INTERPOLATION");

  private String value;

  DeinterlaceAlgorithm(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DeinterlaceAlgorithm fromValue(String value) {
    for (DeinterlaceAlgorithm b : DeinterlaceAlgorithm.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DeinterlaceAlgorithm> {
    @Override
    public void write(final JsonWriter jsonWriter, final DeinterlaceAlgorithm enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DeinterlaceAlgorithm read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DeinterlaceAlgorithm.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DeinterlaceAlgorithm.fromValue(value);
  }
}

