/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify how MediaConvert handles the display definition segment (DDS). To exclude the DDS from this set of captions: Keep the default, None. To include the DDS: Choose Specified. When you do, also specify the offset coordinates of the display window with DDS x-coordinate and DDS y-coordinate. To include the DDS, but not include display window data: Choose No display window. When you do, you can write position metadata to the page composition segment (PCS) with DDS x-coordinate and DDS y-coordinate. For video resolutions with a height of 576 pixels or less, MediaConvert doesn&#39;t include the DDS, regardless of the value you choose for DDS handling. All burn-in and DVB-Sub font settings must match.
 */
@JsonAdapter(DvbddsHandling.Adapter.class)
public enum DvbddsHandling {
  
  NONE("NONE"),
  
  SPECIFIED("SPECIFIED"),
  
  NO_DISPLAY_WINDOW("NO_DISPLAY_WINDOW");

  private String value;

  DvbddsHandling(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DvbddsHandling fromValue(String value) {
    for (DvbddsHandling b : DvbddsHandling.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DvbddsHandling> {
    @Override
    public void write(final JsonWriter jsonWriter, final DvbddsHandling enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DvbddsHandling read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DvbddsHandling.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DvbddsHandling.fromValue(value);
  }
}

