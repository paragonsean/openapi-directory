/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MotionImageInserterFramerate;
import org.openapitools.client.model.MotionImageInserterOffset;
import org.openapitools.client.model.MotionImageInsertionMode;
import org.openapitools.client.model.MotionImagePlayback;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateJobRequestSettingsMotionImageInserter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateJobRequestSettingsMotionImageInserter {
  public static final String SERIALIZED_NAME_FRAMERATE = "Framerate";
  @SerializedName(SERIALIZED_NAME_FRAMERATE)
  private MotionImageInserterFramerate framerate;

  public static final String SERIALIZED_NAME_INPUT = "Input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_INSERTION_MODE = "InsertionMode";
  @SerializedName(SERIALIZED_NAME_INSERTION_MODE)
  private MotionImageInsertionMode insertionMode;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private MotionImageInserterOffset offset;

  public static final String SERIALIZED_NAME_PLAYBACK = "Playback";
  @SerializedName(SERIALIZED_NAME_PLAYBACK)
  private MotionImagePlayback playback;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public CreateJobRequestSettingsMotionImageInserter() {
  }

  public CreateJobRequestSettingsMotionImageInserter framerate(MotionImageInserterFramerate framerate) {
    this.framerate = framerate;
    return this;
  }

  /**
   * Get framerate
   * @return framerate
   */
  @javax.annotation.Nullable
  public MotionImageInserterFramerate getFramerate() {
    return framerate;
  }

  public void setFramerate(MotionImageInserterFramerate framerate) {
    this.framerate = framerate;
  }


  public CreateJobRequestSettingsMotionImageInserter input(String input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public CreateJobRequestSettingsMotionImageInserter insertionMode(MotionImageInsertionMode insertionMode) {
    this.insertionMode = insertionMode;
    return this;
  }

  /**
   * Get insertionMode
   * @return insertionMode
   */
  @javax.annotation.Nullable
  public MotionImageInsertionMode getInsertionMode() {
    return insertionMode;
  }

  public void setInsertionMode(MotionImageInsertionMode insertionMode) {
    this.insertionMode = insertionMode;
  }


  public CreateJobRequestSettingsMotionImageInserter offset(MotionImageInserterOffset offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public MotionImageInserterOffset getOffset() {
    return offset;
  }

  public void setOffset(MotionImageInserterOffset offset) {
    this.offset = offset;
  }


  public CreateJobRequestSettingsMotionImageInserter playback(MotionImagePlayback playback) {
    this.playback = playback;
    return this;
  }

  /**
   * Get playback
   * @return playback
   */
  @javax.annotation.Nullable
  public MotionImagePlayback getPlayback() {
    return playback;
  }

  public void setPlayback(MotionImagePlayback playback) {
    this.playback = playback;
  }


  public CreateJobRequestSettingsMotionImageInserter startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateJobRequestSettingsMotionImageInserter createJobRequestSettingsMotionImageInserter = (CreateJobRequestSettingsMotionImageInserter) o;
    return Objects.equals(this.framerate, createJobRequestSettingsMotionImageInserter.framerate) &&
        Objects.equals(this.input, createJobRequestSettingsMotionImageInserter.input) &&
        Objects.equals(this.insertionMode, createJobRequestSettingsMotionImageInserter.insertionMode) &&
        Objects.equals(this.offset, createJobRequestSettingsMotionImageInserter.offset) &&
        Objects.equals(this.playback, createJobRequestSettingsMotionImageInserter.playback) &&
        Objects.equals(this.startTime, createJobRequestSettingsMotionImageInserter.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(framerate, input, insertionMode, offset, playback, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateJobRequestSettingsMotionImageInserter {\n");
    sb.append("    framerate: ").append(toIndentedString(framerate)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    insertionMode: ").append(toIndentedString(insertionMode)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    playback: ").append(toIndentedString(playback)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Framerate");
    openapiFields.add("Input");
    openapiFields.add("InsertionMode");
    openapiFields.add("Offset");
    openapiFields.add("Playback");
    openapiFields.add("StartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateJobRequestSettingsMotionImageInserter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateJobRequestSettingsMotionImageInserter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateJobRequestSettingsMotionImageInserter is not found in the empty JSON string", CreateJobRequestSettingsMotionImageInserter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateJobRequestSettingsMotionImageInserter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateJobRequestSettingsMotionImageInserter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Framerate`
      if (jsonObj.get("Framerate") != null && !jsonObj.get("Framerate").isJsonNull()) {
        MotionImageInserterFramerate.validateJsonElement(jsonObj.get("Framerate"));
      }
      // validate the optional field `Input`
      if (jsonObj.get("Input") != null && !jsonObj.get("Input").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Input"));
      }
      // validate the optional field `InsertionMode`
      if (jsonObj.get("InsertionMode") != null && !jsonObj.get("InsertionMode").isJsonNull()) {
        MotionImageInsertionMode.validateJsonElement(jsonObj.get("InsertionMode"));
      }
      // validate the optional field `Offset`
      if (jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) {
        MotionImageInserterOffset.validateJsonElement(jsonObj.get("Offset"));
      }
      // validate the optional field `Playback`
      if (jsonObj.get("Playback") != null && !jsonObj.get("Playback").isJsonNull()) {
        MotionImagePlayback.validateJsonElement(jsonObj.get("Playback"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateJobRequestSettingsMotionImageInserter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateJobRequestSettingsMotionImageInserter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateJobRequestSettingsMotionImageInserter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateJobRequestSettingsMotionImageInserter.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateJobRequestSettingsMotionImageInserter>() {
           @Override
           public void write(JsonWriter out, CreateJobRequestSettingsMotionImageInserter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateJobRequestSettingsMotionImageInserter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateJobRequestSettingsMotionImageInserter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateJobRequestSettingsMotionImageInserter
   * @throws IOException if the JSON string is invalid with respect to CreateJobRequestSettingsMotionImageInserter
   */
  public static CreateJobRequestSettingsMotionImageInserter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateJobRequestSettingsMotionImageInserter.class);
  }

  /**
   * Convert an instance of CreateJobRequestSettingsMotionImageInserter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

