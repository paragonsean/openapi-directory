/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HlsAudioOnlyContainer;
import org.openapitools.client.model.HlsAudioTrackType;
import org.openapitools.client.model.HlsDescriptiveVideoServiceFlag;
import org.openapitools.client.model.HlsIFrameOnlyManifest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for HLS output groups
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsSettings {
  public static final String SERIALIZED_NAME_AUDIO_GROUP_ID = "AudioGroupId";
  @SerializedName(SERIALIZED_NAME_AUDIO_GROUP_ID)
  private String audioGroupId;

  public static final String SERIALIZED_NAME_AUDIO_ONLY_CONTAINER = "AudioOnlyContainer";
  @SerializedName(SERIALIZED_NAME_AUDIO_ONLY_CONTAINER)
  private HlsAudioOnlyContainer audioOnlyContainer;

  public static final String SERIALIZED_NAME_AUDIO_RENDITION_SETS = "AudioRenditionSets";
  @SerializedName(SERIALIZED_NAME_AUDIO_RENDITION_SETS)
  private String audioRenditionSets;

  public static final String SERIALIZED_NAME_AUDIO_TRACK_TYPE = "AudioTrackType";
  @SerializedName(SERIALIZED_NAME_AUDIO_TRACK_TYPE)
  private HlsAudioTrackType audioTrackType;

  public static final String SERIALIZED_NAME_DESCRIPTIVE_VIDEO_SERVICE_FLAG = "DescriptiveVideoServiceFlag";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIVE_VIDEO_SERVICE_FLAG)
  private HlsDescriptiveVideoServiceFlag descriptiveVideoServiceFlag;

  public static final String SERIALIZED_NAME_IFRAME_ONLY_MANIFEST = "IFrameOnlyManifest";
  @SerializedName(SERIALIZED_NAME_IFRAME_ONLY_MANIFEST)
  private HlsIFrameOnlyManifest iframeOnlyManifest;

  public static final String SERIALIZED_NAME_SEGMENT_MODIFIER = "SegmentModifier";
  @SerializedName(SERIALIZED_NAME_SEGMENT_MODIFIER)
  private String segmentModifier;

  public HlsSettings() {
  }

  public HlsSettings audioGroupId(String audioGroupId) {
    this.audioGroupId = audioGroupId;
    return this;
  }

  /**
   * Get audioGroupId
   * @return audioGroupId
   */
  @javax.annotation.Nullable
  public String getAudioGroupId() {
    return audioGroupId;
  }

  public void setAudioGroupId(String audioGroupId) {
    this.audioGroupId = audioGroupId;
  }


  public HlsSettings audioOnlyContainer(HlsAudioOnlyContainer audioOnlyContainer) {
    this.audioOnlyContainer = audioOnlyContainer;
    return this;
  }

  /**
   * Get audioOnlyContainer
   * @return audioOnlyContainer
   */
  @javax.annotation.Nullable
  public HlsAudioOnlyContainer getAudioOnlyContainer() {
    return audioOnlyContainer;
  }

  public void setAudioOnlyContainer(HlsAudioOnlyContainer audioOnlyContainer) {
    this.audioOnlyContainer = audioOnlyContainer;
  }


  public HlsSettings audioRenditionSets(String audioRenditionSets) {
    this.audioRenditionSets = audioRenditionSets;
    return this;
  }

  /**
   * Get audioRenditionSets
   * @return audioRenditionSets
   */
  @javax.annotation.Nullable
  public String getAudioRenditionSets() {
    return audioRenditionSets;
  }

  public void setAudioRenditionSets(String audioRenditionSets) {
    this.audioRenditionSets = audioRenditionSets;
  }


  public HlsSettings audioTrackType(HlsAudioTrackType audioTrackType) {
    this.audioTrackType = audioTrackType;
    return this;
  }

  /**
   * Get audioTrackType
   * @return audioTrackType
   */
  @javax.annotation.Nullable
  public HlsAudioTrackType getAudioTrackType() {
    return audioTrackType;
  }

  public void setAudioTrackType(HlsAudioTrackType audioTrackType) {
    this.audioTrackType = audioTrackType;
  }


  public HlsSettings descriptiveVideoServiceFlag(HlsDescriptiveVideoServiceFlag descriptiveVideoServiceFlag) {
    this.descriptiveVideoServiceFlag = descriptiveVideoServiceFlag;
    return this;
  }

  /**
   * Get descriptiveVideoServiceFlag
   * @return descriptiveVideoServiceFlag
   */
  @javax.annotation.Nullable
  public HlsDescriptiveVideoServiceFlag getDescriptiveVideoServiceFlag() {
    return descriptiveVideoServiceFlag;
  }

  public void setDescriptiveVideoServiceFlag(HlsDescriptiveVideoServiceFlag descriptiveVideoServiceFlag) {
    this.descriptiveVideoServiceFlag = descriptiveVideoServiceFlag;
  }


  public HlsSettings iframeOnlyManifest(HlsIFrameOnlyManifest iframeOnlyManifest) {
    this.iframeOnlyManifest = iframeOnlyManifest;
    return this;
  }

  /**
   * Get iframeOnlyManifest
   * @return iframeOnlyManifest
   */
  @javax.annotation.Nullable
  public HlsIFrameOnlyManifest getIframeOnlyManifest() {
    return iframeOnlyManifest;
  }

  public void setIframeOnlyManifest(HlsIFrameOnlyManifest iframeOnlyManifest) {
    this.iframeOnlyManifest = iframeOnlyManifest;
  }


  public HlsSettings segmentModifier(String segmentModifier) {
    this.segmentModifier = segmentModifier;
    return this;
  }

  /**
   * Get segmentModifier
   * @return segmentModifier
   */
  @javax.annotation.Nullable
  public String getSegmentModifier() {
    return segmentModifier;
  }

  public void setSegmentModifier(String segmentModifier) {
    this.segmentModifier = segmentModifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsSettings hlsSettings = (HlsSettings) o;
    return Objects.equals(this.audioGroupId, hlsSettings.audioGroupId) &&
        Objects.equals(this.audioOnlyContainer, hlsSettings.audioOnlyContainer) &&
        Objects.equals(this.audioRenditionSets, hlsSettings.audioRenditionSets) &&
        Objects.equals(this.audioTrackType, hlsSettings.audioTrackType) &&
        Objects.equals(this.descriptiveVideoServiceFlag, hlsSettings.descriptiveVideoServiceFlag) &&
        Objects.equals(this.iframeOnlyManifest, hlsSettings.iframeOnlyManifest) &&
        Objects.equals(this.segmentModifier, hlsSettings.segmentModifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioGroupId, audioOnlyContainer, audioRenditionSets, audioTrackType, descriptiveVideoServiceFlag, iframeOnlyManifest, segmentModifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsSettings {\n");
    sb.append("    audioGroupId: ").append(toIndentedString(audioGroupId)).append("\n");
    sb.append("    audioOnlyContainer: ").append(toIndentedString(audioOnlyContainer)).append("\n");
    sb.append("    audioRenditionSets: ").append(toIndentedString(audioRenditionSets)).append("\n");
    sb.append("    audioTrackType: ").append(toIndentedString(audioTrackType)).append("\n");
    sb.append("    descriptiveVideoServiceFlag: ").append(toIndentedString(descriptiveVideoServiceFlag)).append("\n");
    sb.append("    iframeOnlyManifest: ").append(toIndentedString(iframeOnlyManifest)).append("\n");
    sb.append("    segmentModifier: ").append(toIndentedString(segmentModifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioGroupId");
    openapiFields.add("AudioOnlyContainer");
    openapiFields.add("AudioRenditionSets");
    openapiFields.add("AudioTrackType");
    openapiFields.add("DescriptiveVideoServiceFlag");
    openapiFields.add("IFrameOnlyManifest");
    openapiFields.add("SegmentModifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsSettings is not found in the empty JSON string", HlsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioGroupId`
      if (jsonObj.get("AudioGroupId") != null && !jsonObj.get("AudioGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AudioGroupId"));
      }
      // validate the optional field `AudioOnlyContainer`
      if (jsonObj.get("AudioOnlyContainer") != null && !jsonObj.get("AudioOnlyContainer").isJsonNull()) {
        HlsAudioOnlyContainer.validateJsonElement(jsonObj.get("AudioOnlyContainer"));
      }
      // validate the optional field `AudioRenditionSets`
      if (jsonObj.get("AudioRenditionSets") != null && !jsonObj.get("AudioRenditionSets").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AudioRenditionSets"));
      }
      // validate the optional field `AudioTrackType`
      if (jsonObj.get("AudioTrackType") != null && !jsonObj.get("AudioTrackType").isJsonNull()) {
        HlsAudioTrackType.validateJsonElement(jsonObj.get("AudioTrackType"));
      }
      // validate the optional field `DescriptiveVideoServiceFlag`
      if (jsonObj.get("DescriptiveVideoServiceFlag") != null && !jsonObj.get("DescriptiveVideoServiceFlag").isJsonNull()) {
        HlsDescriptiveVideoServiceFlag.validateJsonElement(jsonObj.get("DescriptiveVideoServiceFlag"));
      }
      // validate the optional field `IFrameOnlyManifest`
      if (jsonObj.get("IFrameOnlyManifest") != null && !jsonObj.get("IFrameOnlyManifest").isJsonNull()) {
        HlsIFrameOnlyManifest.validateJsonElement(jsonObj.get("IFrameOnlyManifest"));
      }
      // validate the optional field `SegmentModifier`
      if (jsonObj.get("SegmentModifier") != null && !jsonObj.get("SegmentModifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SegmentModifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsSettings>() {
           @Override
           public void write(JsonWriter out, HlsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsSettings
   * @throws IOException if the JSON string is invalid with respect to HlsSettings
   */
  public static HlsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsSettings.class);
  }

  /**
   * Convert an instance of HlsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

