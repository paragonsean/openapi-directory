/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Required when you set Dolby Vision Profile to Profile 8.1. When you set Content mapping to None, content mapping is not applied to the HDR10-compatible signal. Depending on the source peak nit level, clipping might occur on HDR devices without Dolby Vision. When you set Content mapping to HDR10 1000, the transcoder creates a 1,000 nits peak HDR10-compatible signal by applying static content mapping to the source. This mode is speed-optimized for PQ10 sources with metadata that is created from analysis. For graded Dolby Vision content, be aware that creative intent might not be guaranteed with extreme 1,000 nits trims.
 */
@JsonAdapter(DolbyVisionMapping.Adapter.class)
public enum DolbyVisionMapping {
  
  NOMAP("HDR10_NOMAP"),
  
  _1000("HDR10_1000");

  private String value;

  DolbyVisionMapping(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DolbyVisionMapping fromValue(String value) {
    for (DolbyVisionMapping b : DolbyVisionMapping.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DolbyVisionMapping> {
    @Override
    public void write(final JsonWriter jsonWriter, final DolbyVisionMapping enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DolbyVisionMapping read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DolbyVisionMapping.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DolbyVisionMapping.fromValue(value);
  }
}

