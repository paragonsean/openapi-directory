/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AacAudioDescriptionBroadcasterMix;
import org.openapitools.client.model.AacCodecProfile;
import org.openapitools.client.model.AacCodingMode;
import org.openapitools.client.model.AacRateControlMode;
import org.openapitools.client.model.AacRawFormat;
import org.openapitools.client.model.AacSpecification;
import org.openapitools.client.model.AacVbrQuality;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AudioCodecSettingsAacSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioCodecSettingsAacSettings {
  public static final String SERIALIZED_NAME_AUDIO_DESCRIPTION_BROADCASTER_MIX = "AudioDescriptionBroadcasterMix";
  @SerializedName(SERIALIZED_NAME_AUDIO_DESCRIPTION_BROADCASTER_MIX)
  private AacAudioDescriptionBroadcasterMix audioDescriptionBroadcasterMix;

  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Integer bitrate;

  public static final String SERIALIZED_NAME_CODEC_PROFILE = "CodecProfile";
  @SerializedName(SERIALIZED_NAME_CODEC_PROFILE)
  private AacCodecProfile codecProfile;

  public static final String SERIALIZED_NAME_CODING_MODE = "CodingMode";
  @SerializedName(SERIALIZED_NAME_CODING_MODE)
  private AacCodingMode codingMode;

  public static final String SERIALIZED_NAME_RATE_CONTROL_MODE = "RateControlMode";
  @SerializedName(SERIALIZED_NAME_RATE_CONTROL_MODE)
  private AacRateControlMode rateControlMode;

  public static final String SERIALIZED_NAME_RAW_FORMAT = "RawFormat";
  @SerializedName(SERIALIZED_NAME_RAW_FORMAT)
  private AacRawFormat rawFormat;

  public static final String SERIALIZED_NAME_SAMPLE_RATE = "SampleRate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE)
  private Integer sampleRate;

  public static final String SERIALIZED_NAME_SPECIFICATION = "Specification";
  @SerializedName(SERIALIZED_NAME_SPECIFICATION)
  private AacSpecification specification;

  public static final String SERIALIZED_NAME_VBR_QUALITY = "VbrQuality";
  @SerializedName(SERIALIZED_NAME_VBR_QUALITY)
  private AacVbrQuality vbrQuality;

  public AudioCodecSettingsAacSettings() {
  }

  public AudioCodecSettingsAacSettings audioDescriptionBroadcasterMix(AacAudioDescriptionBroadcasterMix audioDescriptionBroadcasterMix) {
    this.audioDescriptionBroadcasterMix = audioDescriptionBroadcasterMix;
    return this;
  }

  /**
   * Get audioDescriptionBroadcasterMix
   * @return audioDescriptionBroadcasterMix
   */
  @javax.annotation.Nullable
  public AacAudioDescriptionBroadcasterMix getAudioDescriptionBroadcasterMix() {
    return audioDescriptionBroadcasterMix;
  }

  public void setAudioDescriptionBroadcasterMix(AacAudioDescriptionBroadcasterMix audioDescriptionBroadcasterMix) {
    this.audioDescriptionBroadcasterMix = audioDescriptionBroadcasterMix;
  }


  public AudioCodecSettingsAacSettings bitrate(Integer bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Integer getBitrate() {
    return bitrate;
  }

  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public AudioCodecSettingsAacSettings codecProfile(AacCodecProfile codecProfile) {
    this.codecProfile = codecProfile;
    return this;
  }

  /**
   * Get codecProfile
   * @return codecProfile
   */
  @javax.annotation.Nullable
  public AacCodecProfile getCodecProfile() {
    return codecProfile;
  }

  public void setCodecProfile(AacCodecProfile codecProfile) {
    this.codecProfile = codecProfile;
  }


  public AudioCodecSettingsAacSettings codingMode(AacCodingMode codingMode) {
    this.codingMode = codingMode;
    return this;
  }

  /**
   * Get codingMode
   * @return codingMode
   */
  @javax.annotation.Nullable
  public AacCodingMode getCodingMode() {
    return codingMode;
  }

  public void setCodingMode(AacCodingMode codingMode) {
    this.codingMode = codingMode;
  }


  public AudioCodecSettingsAacSettings rateControlMode(AacRateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
    return this;
  }

  /**
   * Get rateControlMode
   * @return rateControlMode
   */
  @javax.annotation.Nullable
  public AacRateControlMode getRateControlMode() {
    return rateControlMode;
  }

  public void setRateControlMode(AacRateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
  }


  public AudioCodecSettingsAacSettings rawFormat(AacRawFormat rawFormat) {
    this.rawFormat = rawFormat;
    return this;
  }

  /**
   * Get rawFormat
   * @return rawFormat
   */
  @javax.annotation.Nullable
  public AacRawFormat getRawFormat() {
    return rawFormat;
  }

  public void setRawFormat(AacRawFormat rawFormat) {
    this.rawFormat = rawFormat;
  }


  public AudioCodecSettingsAacSettings sampleRate(Integer sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * Get sampleRate
   * @return sampleRate
   */
  @javax.annotation.Nullable
  public Integer getSampleRate() {
    return sampleRate;
  }

  public void setSampleRate(Integer sampleRate) {
    this.sampleRate = sampleRate;
  }


  public AudioCodecSettingsAacSettings specification(AacSpecification specification) {
    this.specification = specification;
    return this;
  }

  /**
   * Get specification
   * @return specification
   */
  @javax.annotation.Nullable
  public AacSpecification getSpecification() {
    return specification;
  }

  public void setSpecification(AacSpecification specification) {
    this.specification = specification;
  }


  public AudioCodecSettingsAacSettings vbrQuality(AacVbrQuality vbrQuality) {
    this.vbrQuality = vbrQuality;
    return this;
  }

  /**
   * Get vbrQuality
   * @return vbrQuality
   */
  @javax.annotation.Nullable
  public AacVbrQuality getVbrQuality() {
    return vbrQuality;
  }

  public void setVbrQuality(AacVbrQuality vbrQuality) {
    this.vbrQuality = vbrQuality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioCodecSettingsAacSettings audioCodecSettingsAacSettings = (AudioCodecSettingsAacSettings) o;
    return Objects.equals(this.audioDescriptionBroadcasterMix, audioCodecSettingsAacSettings.audioDescriptionBroadcasterMix) &&
        Objects.equals(this.bitrate, audioCodecSettingsAacSettings.bitrate) &&
        Objects.equals(this.codecProfile, audioCodecSettingsAacSettings.codecProfile) &&
        Objects.equals(this.codingMode, audioCodecSettingsAacSettings.codingMode) &&
        Objects.equals(this.rateControlMode, audioCodecSettingsAacSettings.rateControlMode) &&
        Objects.equals(this.rawFormat, audioCodecSettingsAacSettings.rawFormat) &&
        Objects.equals(this.sampleRate, audioCodecSettingsAacSettings.sampleRate) &&
        Objects.equals(this.specification, audioCodecSettingsAacSettings.specification) &&
        Objects.equals(this.vbrQuality, audioCodecSettingsAacSettings.vbrQuality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioDescriptionBroadcasterMix, bitrate, codecProfile, codingMode, rateControlMode, rawFormat, sampleRate, specification, vbrQuality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioCodecSettingsAacSettings {\n");
    sb.append("    audioDescriptionBroadcasterMix: ").append(toIndentedString(audioDescriptionBroadcasterMix)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    codecProfile: ").append(toIndentedString(codecProfile)).append("\n");
    sb.append("    codingMode: ").append(toIndentedString(codingMode)).append("\n");
    sb.append("    rateControlMode: ").append(toIndentedString(rateControlMode)).append("\n");
    sb.append("    rawFormat: ").append(toIndentedString(rawFormat)).append("\n");
    sb.append("    sampleRate: ").append(toIndentedString(sampleRate)).append("\n");
    sb.append("    specification: ").append(toIndentedString(specification)).append("\n");
    sb.append("    vbrQuality: ").append(toIndentedString(vbrQuality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioDescriptionBroadcasterMix");
    openapiFields.add("Bitrate");
    openapiFields.add("CodecProfile");
    openapiFields.add("CodingMode");
    openapiFields.add("RateControlMode");
    openapiFields.add("RawFormat");
    openapiFields.add("SampleRate");
    openapiFields.add("Specification");
    openapiFields.add("VbrQuality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioCodecSettingsAacSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioCodecSettingsAacSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioCodecSettingsAacSettings is not found in the empty JSON string", AudioCodecSettingsAacSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioCodecSettingsAacSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioCodecSettingsAacSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioDescriptionBroadcasterMix`
      if (jsonObj.get("AudioDescriptionBroadcasterMix") != null && !jsonObj.get("AudioDescriptionBroadcasterMix").isJsonNull()) {
        AacAudioDescriptionBroadcasterMix.validateJsonElement(jsonObj.get("AudioDescriptionBroadcasterMix"));
      }
      // validate the optional field `Bitrate`
      if (jsonObj.get("Bitrate") != null && !jsonObj.get("Bitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Bitrate"));
      }
      // validate the optional field `CodecProfile`
      if (jsonObj.get("CodecProfile") != null && !jsonObj.get("CodecProfile").isJsonNull()) {
        AacCodecProfile.validateJsonElement(jsonObj.get("CodecProfile"));
      }
      // validate the optional field `CodingMode`
      if (jsonObj.get("CodingMode") != null && !jsonObj.get("CodingMode").isJsonNull()) {
        AacCodingMode.validateJsonElement(jsonObj.get("CodingMode"));
      }
      // validate the optional field `RateControlMode`
      if (jsonObj.get("RateControlMode") != null && !jsonObj.get("RateControlMode").isJsonNull()) {
        AacRateControlMode.validateJsonElement(jsonObj.get("RateControlMode"));
      }
      // validate the optional field `RawFormat`
      if (jsonObj.get("RawFormat") != null && !jsonObj.get("RawFormat").isJsonNull()) {
        AacRawFormat.validateJsonElement(jsonObj.get("RawFormat"));
      }
      // validate the optional field `SampleRate`
      if (jsonObj.get("SampleRate") != null && !jsonObj.get("SampleRate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SampleRate"));
      }
      // validate the optional field `Specification`
      if (jsonObj.get("Specification") != null && !jsonObj.get("Specification").isJsonNull()) {
        AacSpecification.validateJsonElement(jsonObj.get("Specification"));
      }
      // validate the optional field `VbrQuality`
      if (jsonObj.get("VbrQuality") != null && !jsonObj.get("VbrQuality").isJsonNull()) {
        AacVbrQuality.validateJsonElement(jsonObj.get("VbrQuality"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioCodecSettingsAacSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioCodecSettingsAacSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioCodecSettingsAacSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioCodecSettingsAacSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioCodecSettingsAacSettings>() {
           @Override
           public void write(JsonWriter out, AudioCodecSettingsAacSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioCodecSettingsAacSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioCodecSettingsAacSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioCodecSettingsAacSettings
   * @throws IOException if the JSON string is invalid with respect to AudioCodecSettingsAacSettings
   */
  public static AudioCodecSettingsAacSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioCodecSettingsAacSettings.class);
  }

  /**
   * Convert an instance of AudioCodecSettingsAacSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

