/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioChannelTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * When you mimic a multi-channel audio layout with multiple mono-channel tracks, you can tag each channel layout manually. For example, you would tag the tracks that contain your left, right, and center audio with Left (L), Right (R), and Center (C), respectively. When you don&#39;t specify a value, MediaConvert labels your track as Center (C) by default. To use audio layout tagging, your output must be in a QuickTime (.mov) container; your audio codec must be AAC, WAV, or AIFF; and you must set up your audio track to have only one channel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioChannelTaggingSettings {
  public static final String SERIALIZED_NAME_CHANNEL_TAG = "ChannelTag";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TAG)
  private AudioChannelTag channelTag;

  public AudioChannelTaggingSettings() {
  }

  public AudioChannelTaggingSettings channelTag(AudioChannelTag channelTag) {
    this.channelTag = channelTag;
    return this;
  }

  /**
   * Get channelTag
   * @return channelTag
   */
  @javax.annotation.Nullable
  public AudioChannelTag getChannelTag() {
    return channelTag;
  }

  public void setChannelTag(AudioChannelTag channelTag) {
    this.channelTag = channelTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioChannelTaggingSettings audioChannelTaggingSettings = (AudioChannelTaggingSettings) o;
    return Objects.equals(this.channelTag, audioChannelTaggingSettings.channelTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioChannelTaggingSettings {\n");
    sb.append("    channelTag: ").append(toIndentedString(channelTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioChannelTaggingSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioChannelTaggingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioChannelTaggingSettings is not found in the empty JSON string", AudioChannelTaggingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioChannelTaggingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioChannelTaggingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelTag`
      if (jsonObj.get("ChannelTag") != null && !jsonObj.get("ChannelTag").isJsonNull()) {
        AudioChannelTag.validateJsonElement(jsonObj.get("ChannelTag"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioChannelTaggingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioChannelTaggingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioChannelTaggingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioChannelTaggingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioChannelTaggingSettings>() {
           @Override
           public void write(JsonWriter out, AudioChannelTaggingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioChannelTaggingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioChannelTaggingSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioChannelTaggingSettings
   * @throws IOException if the JSON string is invalid with respect to AudioChannelTaggingSettings
   */
  public static AudioChannelTaggingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioChannelTaggingSettings.class);
  }

  /**
   * Convert an instance of AudioChannelTaggingSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

