/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify the format for this set of captions on this output. The default format is embedded without SCTE-20. Note that your choice of video output container constrains your choice of output captions format. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/captions-support-tables.html. If you are using SCTE-20 and you want to create an output that complies with the SCTE-43 spec, choose SCTE-20 plus embedded. To create a non-compliant output where the embedded captions come first, choose Embedded plus SCTE-20.
 */
@JsonAdapter(CaptionDestinationType.Adapter.class)
public enum CaptionDestinationType {
  
  BURN_IN("BURN_IN"),
  
  DVB_SUB("DVB_SUB"),
  
  EMBEDDED("EMBEDDED"),
  
  EMBEDDED_PLUS_SCTE20("EMBEDDED_PLUS_SCTE20"),
  
  IMSC("IMSC"),
  
  SCTE20_PLUS_EMBEDDED("SCTE20_PLUS_EMBEDDED"),
  
  SCC("SCC"),
  
  SRT("SRT"),
  
  SMI("SMI"),
  
  TELETEXT("TELETEXT"),
  
  TTML("TTML"),
  
  WEBVTT("WEBVTT");

  private String value;

  CaptionDestinationType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CaptionDestinationType fromValue(String value) {
    for (CaptionDestinationType b : CaptionDestinationType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CaptionDestinationType> {
    @Override
    public void write(final JsonWriter jsonWriter, final CaptionDestinationType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CaptionDestinationType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CaptionDestinationType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CaptionDestinationType.fromValue(value);
  }
}

