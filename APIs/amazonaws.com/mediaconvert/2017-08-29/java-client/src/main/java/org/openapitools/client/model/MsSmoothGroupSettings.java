/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CmafGroupSettingsDestinationSettings;
import org.openapitools.client.model.MsSmoothAudioDeduplication;
import org.openapitools.client.model.MsSmoothFragmentLengthControl;
import org.openapitools.client.model.MsSmoothGroupSettingsEncryption;
import org.openapitools.client.model.MsSmoothManifestEncoding;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings related to your Microsoft Smooth Streaming output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MsSmoothGroupSettings {
  public static final String SERIALIZED_NAME_ADDITIONAL_MANIFESTS = "AdditionalManifests";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MANIFESTS)
  private List additionalManifests;

  public static final String SERIALIZED_NAME_AUDIO_DEDUPLICATION = "AudioDeduplication";
  @SerializedName(SERIALIZED_NAME_AUDIO_DEDUPLICATION)
  private MsSmoothAudioDeduplication audioDeduplication;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_DESTINATION_SETTINGS = "DestinationSettings";
  @SerializedName(SERIALIZED_NAME_DESTINATION_SETTINGS)
  private CmafGroupSettingsDestinationSettings destinationSettings;

  public static final String SERIALIZED_NAME_ENCRYPTION = "Encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private MsSmoothGroupSettingsEncryption encryption;

  public static final String SERIALIZED_NAME_FRAGMENT_LENGTH = "FragmentLength";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_LENGTH)
  private Integer fragmentLength;

  public static final String SERIALIZED_NAME_FRAGMENT_LENGTH_CONTROL = "FragmentLengthControl";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_LENGTH_CONTROL)
  private MsSmoothFragmentLengthControl fragmentLengthControl;

  public static final String SERIALIZED_NAME_MANIFEST_ENCODING = "ManifestEncoding";
  @SerializedName(SERIALIZED_NAME_MANIFEST_ENCODING)
  private MsSmoothManifestEncoding manifestEncoding;

  public MsSmoothGroupSettings() {
  }

  public MsSmoothGroupSettings additionalManifests(List additionalManifests) {
    this.additionalManifests = additionalManifests;
    return this;
  }

  /**
   * Get additionalManifests
   * @return additionalManifests
   */
  @javax.annotation.Nullable
  public List getAdditionalManifests() {
    return additionalManifests;
  }

  public void setAdditionalManifests(List additionalManifests) {
    this.additionalManifests = additionalManifests;
  }


  public MsSmoothGroupSettings audioDeduplication(MsSmoothAudioDeduplication audioDeduplication) {
    this.audioDeduplication = audioDeduplication;
    return this;
  }

  /**
   * Get audioDeduplication
   * @return audioDeduplication
   */
  @javax.annotation.Nullable
  public MsSmoothAudioDeduplication getAudioDeduplication() {
    return audioDeduplication;
  }

  public void setAudioDeduplication(MsSmoothAudioDeduplication audioDeduplication) {
    this.audioDeduplication = audioDeduplication;
  }


  public MsSmoothGroupSettings destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public MsSmoothGroupSettings destinationSettings(CmafGroupSettingsDestinationSettings destinationSettings) {
    this.destinationSettings = destinationSettings;
    return this;
  }

  /**
   * Get destinationSettings
   * @return destinationSettings
   */
  @javax.annotation.Nullable
  public CmafGroupSettingsDestinationSettings getDestinationSettings() {
    return destinationSettings;
  }

  public void setDestinationSettings(CmafGroupSettingsDestinationSettings destinationSettings) {
    this.destinationSettings = destinationSettings;
  }


  public MsSmoothGroupSettings encryption(MsSmoothGroupSettingsEncryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public MsSmoothGroupSettingsEncryption getEncryption() {
    return encryption;
  }

  public void setEncryption(MsSmoothGroupSettingsEncryption encryption) {
    this.encryption = encryption;
  }


  public MsSmoothGroupSettings fragmentLength(Integer fragmentLength) {
    this.fragmentLength = fragmentLength;
    return this;
  }

  /**
   * Get fragmentLength
   * @return fragmentLength
   */
  @javax.annotation.Nullable
  public Integer getFragmentLength() {
    return fragmentLength;
  }

  public void setFragmentLength(Integer fragmentLength) {
    this.fragmentLength = fragmentLength;
  }


  public MsSmoothGroupSettings fragmentLengthControl(MsSmoothFragmentLengthControl fragmentLengthControl) {
    this.fragmentLengthControl = fragmentLengthControl;
    return this;
  }

  /**
   * Get fragmentLengthControl
   * @return fragmentLengthControl
   */
  @javax.annotation.Nullable
  public MsSmoothFragmentLengthControl getFragmentLengthControl() {
    return fragmentLengthControl;
  }

  public void setFragmentLengthControl(MsSmoothFragmentLengthControl fragmentLengthControl) {
    this.fragmentLengthControl = fragmentLengthControl;
  }


  public MsSmoothGroupSettings manifestEncoding(MsSmoothManifestEncoding manifestEncoding) {
    this.manifestEncoding = manifestEncoding;
    return this;
  }

  /**
   * Get manifestEncoding
   * @return manifestEncoding
   */
  @javax.annotation.Nullable
  public MsSmoothManifestEncoding getManifestEncoding() {
    return manifestEncoding;
  }

  public void setManifestEncoding(MsSmoothManifestEncoding manifestEncoding) {
    this.manifestEncoding = manifestEncoding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MsSmoothGroupSettings msSmoothGroupSettings = (MsSmoothGroupSettings) o;
    return Objects.equals(this.additionalManifests, msSmoothGroupSettings.additionalManifests) &&
        Objects.equals(this.audioDeduplication, msSmoothGroupSettings.audioDeduplication) &&
        Objects.equals(this.destination, msSmoothGroupSettings.destination) &&
        Objects.equals(this.destinationSettings, msSmoothGroupSettings.destinationSettings) &&
        Objects.equals(this.encryption, msSmoothGroupSettings.encryption) &&
        Objects.equals(this.fragmentLength, msSmoothGroupSettings.fragmentLength) &&
        Objects.equals(this.fragmentLengthControl, msSmoothGroupSettings.fragmentLengthControl) &&
        Objects.equals(this.manifestEncoding, msSmoothGroupSettings.manifestEncoding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalManifests, audioDeduplication, destination, destinationSettings, encryption, fragmentLength, fragmentLengthControl, manifestEncoding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MsSmoothGroupSettings {\n");
    sb.append("    additionalManifests: ").append(toIndentedString(additionalManifests)).append("\n");
    sb.append("    audioDeduplication: ").append(toIndentedString(audioDeduplication)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    destinationSettings: ").append(toIndentedString(destinationSettings)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    fragmentLength: ").append(toIndentedString(fragmentLength)).append("\n");
    sb.append("    fragmentLengthControl: ").append(toIndentedString(fragmentLengthControl)).append("\n");
    sb.append("    manifestEncoding: ").append(toIndentedString(manifestEncoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdditionalManifests");
    openapiFields.add("AudioDeduplication");
    openapiFields.add("Destination");
    openapiFields.add("DestinationSettings");
    openapiFields.add("Encryption");
    openapiFields.add("FragmentLength");
    openapiFields.add("FragmentLengthControl");
    openapiFields.add("ManifestEncoding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MsSmoothGroupSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MsSmoothGroupSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MsSmoothGroupSettings is not found in the empty JSON string", MsSmoothGroupSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MsSmoothGroupSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MsSmoothGroupSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdditionalManifests`
      if (jsonObj.get("AdditionalManifests") != null && !jsonObj.get("AdditionalManifests").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalManifests"));
      }
      // validate the optional field `AudioDeduplication`
      if (jsonObj.get("AudioDeduplication") != null && !jsonObj.get("AudioDeduplication").isJsonNull()) {
        MsSmoothAudioDeduplication.validateJsonElement(jsonObj.get("AudioDeduplication"));
      }
      // validate the optional field `Destination`
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Destination"));
      }
      // validate the optional field `DestinationSettings`
      if (jsonObj.get("DestinationSettings") != null && !jsonObj.get("DestinationSettings").isJsonNull()) {
        CmafGroupSettingsDestinationSettings.validateJsonElement(jsonObj.get("DestinationSettings"));
      }
      // validate the optional field `Encryption`
      if (jsonObj.get("Encryption") != null && !jsonObj.get("Encryption").isJsonNull()) {
        MsSmoothGroupSettingsEncryption.validateJsonElement(jsonObj.get("Encryption"));
      }
      // validate the optional field `FragmentLength`
      if (jsonObj.get("FragmentLength") != null && !jsonObj.get("FragmentLength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FragmentLength"));
      }
      // validate the optional field `FragmentLengthControl`
      if (jsonObj.get("FragmentLengthControl") != null && !jsonObj.get("FragmentLengthControl").isJsonNull()) {
        MsSmoothFragmentLengthControl.validateJsonElement(jsonObj.get("FragmentLengthControl"));
      }
      // validate the optional field `ManifestEncoding`
      if (jsonObj.get("ManifestEncoding") != null && !jsonObj.get("ManifestEncoding").isJsonNull()) {
        MsSmoothManifestEncoding.validateJsonElement(jsonObj.get("ManifestEncoding"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MsSmoothGroupSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MsSmoothGroupSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MsSmoothGroupSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MsSmoothGroupSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MsSmoothGroupSettings>() {
           @Override
           public void write(JsonWriter out, MsSmoothGroupSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MsSmoothGroupSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MsSmoothGroupSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MsSmoothGroupSettings
   * @throws IOException if the JSON string is invalid with respect to MsSmoothGroupSettings
   */
  public static MsSmoothGroupSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MsSmoothGroupSettings.class);
  }

  /**
   * Convert an instance of MsSmoothGroupSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

