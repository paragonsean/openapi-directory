/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlphaBehavior;
import org.openapitools.client.model.ColorSpace;
import org.openapitools.client.model.ColorSpaceUsage;
import org.openapitools.client.model.EmbeddedTimecodeOverride;
import org.openapitools.client.model.InputRotate;
import org.openapitools.client.model.InputSampleRange;
import org.openapitools.client.model.PadVideo;
import org.openapitools.client.model.VideoSelectorHdr10Metadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoSelector {
  public static final String SERIALIZED_NAME_ALPHA_BEHAVIOR = "AlphaBehavior";
  @SerializedName(SERIALIZED_NAME_ALPHA_BEHAVIOR)
  private AlphaBehavior alphaBehavior;

  public static final String SERIALIZED_NAME_COLOR_SPACE = "ColorSpace";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE)
  private ColorSpace colorSpace;

  public static final String SERIALIZED_NAME_COLOR_SPACE_USAGE = "ColorSpaceUsage";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE_USAGE)
  private ColorSpaceUsage colorSpaceUsage;

  public static final String SERIALIZED_NAME_EMBEDDED_TIMECODE_OVERRIDE = "EmbeddedTimecodeOverride";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_TIMECODE_OVERRIDE)
  private EmbeddedTimecodeOverride embeddedTimecodeOverride;

  public static final String SERIALIZED_NAME_HDR10_METADATA = "Hdr10Metadata";
  @SerializedName(SERIALIZED_NAME_HDR10_METADATA)
  private VideoSelectorHdr10Metadata hdr10Metadata;

  public static final String SERIALIZED_NAME_PAD_VIDEO = "PadVideo";
  @SerializedName(SERIALIZED_NAME_PAD_VIDEO)
  private PadVideo padVideo;

  public static final String SERIALIZED_NAME_PID = "Pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private Integer pid;

  public static final String SERIALIZED_NAME_PROGRAM_NUMBER = "ProgramNumber";
  @SerializedName(SERIALIZED_NAME_PROGRAM_NUMBER)
  private Integer programNumber;

  public static final String SERIALIZED_NAME_ROTATE = "Rotate";
  @SerializedName(SERIALIZED_NAME_ROTATE)
  private InputRotate rotate;

  public static final String SERIALIZED_NAME_SAMPLE_RANGE = "SampleRange";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RANGE)
  private InputSampleRange sampleRange;

  public VideoSelector() {
  }

  public VideoSelector alphaBehavior(AlphaBehavior alphaBehavior) {
    this.alphaBehavior = alphaBehavior;
    return this;
  }

  /**
   * Get alphaBehavior
   * @return alphaBehavior
   */
  @javax.annotation.Nullable
  public AlphaBehavior getAlphaBehavior() {
    return alphaBehavior;
  }

  public void setAlphaBehavior(AlphaBehavior alphaBehavior) {
    this.alphaBehavior = alphaBehavior;
  }


  public VideoSelector colorSpace(ColorSpace colorSpace) {
    this.colorSpace = colorSpace;
    return this;
  }

  /**
   * Get colorSpace
   * @return colorSpace
   */
  @javax.annotation.Nullable
  public ColorSpace getColorSpace() {
    return colorSpace;
  }

  public void setColorSpace(ColorSpace colorSpace) {
    this.colorSpace = colorSpace;
  }


  public VideoSelector colorSpaceUsage(ColorSpaceUsage colorSpaceUsage) {
    this.colorSpaceUsage = colorSpaceUsage;
    return this;
  }

  /**
   * Get colorSpaceUsage
   * @return colorSpaceUsage
   */
  @javax.annotation.Nullable
  public ColorSpaceUsage getColorSpaceUsage() {
    return colorSpaceUsage;
  }

  public void setColorSpaceUsage(ColorSpaceUsage colorSpaceUsage) {
    this.colorSpaceUsage = colorSpaceUsage;
  }


  public VideoSelector embeddedTimecodeOverride(EmbeddedTimecodeOverride embeddedTimecodeOverride) {
    this.embeddedTimecodeOverride = embeddedTimecodeOverride;
    return this;
  }

  /**
   * Get embeddedTimecodeOverride
   * @return embeddedTimecodeOverride
   */
  @javax.annotation.Nullable
  public EmbeddedTimecodeOverride getEmbeddedTimecodeOverride() {
    return embeddedTimecodeOverride;
  }

  public void setEmbeddedTimecodeOverride(EmbeddedTimecodeOverride embeddedTimecodeOverride) {
    this.embeddedTimecodeOverride = embeddedTimecodeOverride;
  }


  public VideoSelector hdr10Metadata(VideoSelectorHdr10Metadata hdr10Metadata) {
    this.hdr10Metadata = hdr10Metadata;
    return this;
  }

  /**
   * Get hdr10Metadata
   * @return hdr10Metadata
   */
  @javax.annotation.Nullable
  public VideoSelectorHdr10Metadata getHdr10Metadata() {
    return hdr10Metadata;
  }

  public void setHdr10Metadata(VideoSelectorHdr10Metadata hdr10Metadata) {
    this.hdr10Metadata = hdr10Metadata;
  }


  public VideoSelector padVideo(PadVideo padVideo) {
    this.padVideo = padVideo;
    return this;
  }

  /**
   * Get padVideo
   * @return padVideo
   */
  @javax.annotation.Nullable
  public PadVideo getPadVideo() {
    return padVideo;
  }

  public void setPadVideo(PadVideo padVideo) {
    this.padVideo = padVideo;
  }


  public VideoSelector pid(Integer pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nullable
  public Integer getPid() {
    return pid;
  }

  public void setPid(Integer pid) {
    this.pid = pid;
  }


  public VideoSelector programNumber(Integer programNumber) {
    this.programNumber = programNumber;
    return this;
  }

  /**
   * Get programNumber
   * @return programNumber
   */
  @javax.annotation.Nullable
  public Integer getProgramNumber() {
    return programNumber;
  }

  public void setProgramNumber(Integer programNumber) {
    this.programNumber = programNumber;
  }


  public VideoSelector rotate(InputRotate rotate) {
    this.rotate = rotate;
    return this;
  }

  /**
   * Get rotate
   * @return rotate
   */
  @javax.annotation.Nullable
  public InputRotate getRotate() {
    return rotate;
  }

  public void setRotate(InputRotate rotate) {
    this.rotate = rotate;
  }


  public VideoSelector sampleRange(InputSampleRange sampleRange) {
    this.sampleRange = sampleRange;
    return this;
  }

  /**
   * Get sampleRange
   * @return sampleRange
   */
  @javax.annotation.Nullable
  public InputSampleRange getSampleRange() {
    return sampleRange;
  }

  public void setSampleRange(InputSampleRange sampleRange) {
    this.sampleRange = sampleRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoSelector videoSelector = (VideoSelector) o;
    return Objects.equals(this.alphaBehavior, videoSelector.alphaBehavior) &&
        Objects.equals(this.colorSpace, videoSelector.colorSpace) &&
        Objects.equals(this.colorSpaceUsage, videoSelector.colorSpaceUsage) &&
        Objects.equals(this.embeddedTimecodeOverride, videoSelector.embeddedTimecodeOverride) &&
        Objects.equals(this.hdr10Metadata, videoSelector.hdr10Metadata) &&
        Objects.equals(this.padVideo, videoSelector.padVideo) &&
        Objects.equals(this.pid, videoSelector.pid) &&
        Objects.equals(this.programNumber, videoSelector.programNumber) &&
        Objects.equals(this.rotate, videoSelector.rotate) &&
        Objects.equals(this.sampleRange, videoSelector.sampleRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alphaBehavior, colorSpace, colorSpaceUsage, embeddedTimecodeOverride, hdr10Metadata, padVideo, pid, programNumber, rotate, sampleRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoSelector {\n");
    sb.append("    alphaBehavior: ").append(toIndentedString(alphaBehavior)).append("\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    colorSpaceUsage: ").append(toIndentedString(colorSpaceUsage)).append("\n");
    sb.append("    embeddedTimecodeOverride: ").append(toIndentedString(embeddedTimecodeOverride)).append("\n");
    sb.append("    hdr10Metadata: ").append(toIndentedString(hdr10Metadata)).append("\n");
    sb.append("    padVideo: ").append(toIndentedString(padVideo)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    programNumber: ").append(toIndentedString(programNumber)).append("\n");
    sb.append("    rotate: ").append(toIndentedString(rotate)).append("\n");
    sb.append("    sampleRange: ").append(toIndentedString(sampleRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlphaBehavior");
    openapiFields.add("ColorSpace");
    openapiFields.add("ColorSpaceUsage");
    openapiFields.add("EmbeddedTimecodeOverride");
    openapiFields.add("Hdr10Metadata");
    openapiFields.add("PadVideo");
    openapiFields.add("Pid");
    openapiFields.add("ProgramNumber");
    openapiFields.add("Rotate");
    openapiFields.add("SampleRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoSelector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoSelector is not found in the empty JSON string", VideoSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AlphaBehavior`
      if (jsonObj.get("AlphaBehavior") != null && !jsonObj.get("AlphaBehavior").isJsonNull()) {
        AlphaBehavior.validateJsonElement(jsonObj.get("AlphaBehavior"));
      }
      // validate the optional field `ColorSpace`
      if (jsonObj.get("ColorSpace") != null && !jsonObj.get("ColorSpace").isJsonNull()) {
        ColorSpace.validateJsonElement(jsonObj.get("ColorSpace"));
      }
      // validate the optional field `ColorSpaceUsage`
      if (jsonObj.get("ColorSpaceUsage") != null && !jsonObj.get("ColorSpaceUsage").isJsonNull()) {
        ColorSpaceUsage.validateJsonElement(jsonObj.get("ColorSpaceUsage"));
      }
      // validate the optional field `EmbeddedTimecodeOverride`
      if (jsonObj.get("EmbeddedTimecodeOverride") != null && !jsonObj.get("EmbeddedTimecodeOverride").isJsonNull()) {
        EmbeddedTimecodeOverride.validateJsonElement(jsonObj.get("EmbeddedTimecodeOverride"));
      }
      // validate the optional field `Hdr10Metadata`
      if (jsonObj.get("Hdr10Metadata") != null && !jsonObj.get("Hdr10Metadata").isJsonNull()) {
        VideoSelectorHdr10Metadata.validateJsonElement(jsonObj.get("Hdr10Metadata"));
      }
      // validate the optional field `PadVideo`
      if (jsonObj.get("PadVideo") != null && !jsonObj.get("PadVideo").isJsonNull()) {
        PadVideo.validateJsonElement(jsonObj.get("PadVideo"));
      }
      // validate the optional field `Pid`
      if (jsonObj.get("Pid") != null && !jsonObj.get("Pid").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Pid"));
      }
      // validate the optional field `ProgramNumber`
      if (jsonObj.get("ProgramNumber") != null && !jsonObj.get("ProgramNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgramNumber"));
      }
      // validate the optional field `Rotate`
      if (jsonObj.get("Rotate") != null && !jsonObj.get("Rotate").isJsonNull()) {
        InputRotate.validateJsonElement(jsonObj.get("Rotate"));
      }
      // validate the optional field `SampleRange`
      if (jsonObj.get("SampleRange") != null && !jsonObj.get("SampleRange").isJsonNull()) {
        InputSampleRange.validateJsonElement(jsonObj.get("SampleRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoSelector>() {
           @Override
           public void write(JsonWriter out, VideoSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoSelector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoSelector
   * @throws IOException if the JSON string is invalid with respect to VideoSelector
   */
  public static VideoSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoSelector.class);
  }

  /**
   * Convert an instance of VideoSelector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

