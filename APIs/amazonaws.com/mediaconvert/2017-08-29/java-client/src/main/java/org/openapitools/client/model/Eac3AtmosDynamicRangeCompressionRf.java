/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Choose the Dolby dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby stream for the RF operating mode. Default value: Film light Related setting: To have MediaConvert use the value you specify here, keep the default value, Custom for the setting Dynamic range control. Otherwise, MediaConvert ignores Dynamic range compression RF. For information about the Dolby DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
 */
@JsonAdapter(Eac3AtmosDynamicRangeCompressionRf.Adapter.class)
public enum Eac3AtmosDynamicRangeCompressionRf {
  
  NONE("NONE"),
  
  FILM_STANDARD("FILM_STANDARD"),
  
  FILM_LIGHT("FILM_LIGHT"),
  
  MUSIC_STANDARD("MUSIC_STANDARD"),
  
  MUSIC_LIGHT("MUSIC_LIGHT"),
  
  SPEECH("SPEECH");

  private String value;

  Eac3AtmosDynamicRangeCompressionRf(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Eac3AtmosDynamicRangeCompressionRf fromValue(String value) {
    for (Eac3AtmosDynamicRangeCompressionRf b : Eac3AtmosDynamicRangeCompressionRf.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Eac3AtmosDynamicRangeCompressionRf> {
    @Override
    public void write(final JsonWriter jsonWriter, final Eac3AtmosDynamicRangeCompressionRf enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Eac3AtmosDynamicRangeCompressionRf read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Eac3AtmosDynamicRangeCompressionRf.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Eac3AtmosDynamicRangeCompressionRf.fromValue(value);
  }
}

