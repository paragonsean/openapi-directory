/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Applies only to H.264, H.265, MPEG2, and ProRes outputs. Only enable Timecode insertion when the input frame rate is identical to the output frame rate. To include timecodes in this output, set Timecode insertion to PIC_TIMING_SEI. To leave them out, set it to DISABLED. Default is DISABLED. When the service inserts timecodes in an output, by default, it uses any embedded timecodes from the input. If none are present, the service will set the timecode for the first output frame to zero. To change this default behavior, adjust the settings under Timecode configuration. In the console, these settings are located under Job &gt; Job settings &gt; Timecode configuration. Note - Timecode source under input settings does not affect the timecodes that are inserted in the output. Source under Job settings &gt; Timecode configuration does.
 */
@JsonAdapter(VideoTimecodeInsertion.Adapter.class)
public enum VideoTimecodeInsertion {
  
  DISABLED("DISABLED"),
  
  PIC_TIMING_SEI("PIC_TIMING_SEI");

  private String value;

  VideoTimecodeInsertion(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static VideoTimecodeInsertion fromValue(String value) {
    for (VideoTimecodeInsertion b : VideoTimecodeInsertion.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<VideoTimecodeInsertion> {
    @Override
    public void write(final JsonWriter jsonWriter, final VideoTimecodeInsertion enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public VideoTimecodeInsertion read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return VideoTimecodeInsertion.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    VideoTimecodeInsertion.fromValue(value);
  }
}

