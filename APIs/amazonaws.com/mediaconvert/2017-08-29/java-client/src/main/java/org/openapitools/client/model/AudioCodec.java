/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Choose the audio codec for this output. Note that the option Dolby Digital passthrough applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that&#39;s supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
 */
@JsonAdapter(AudioCodec.Adapter.class)
public enum AudioCodec {
  
  AAC("AAC"),
  
  MP2("MP2"),
  
  MP3("MP3"),
  
  WAV("WAV"),
  
  AIFF("AIFF"),
  
  AC3("AC3"),
  
  EAC3("EAC3"),
  
  EAC3_ATMOS("EAC3_ATMOS"),
  
  VORBIS("VORBIS"),
  
  OPUS("OPUS"),
  
  PASSTHROUGH("PASSTHROUGH");

  private String value;

  AudioCodec(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AudioCodec fromValue(String value) {
    for (AudioCodec b : AudioCodec.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AudioCodec> {
    @Override
    public void write(final JsonWriter jsonWriter, final AudioCodec enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AudioCodec read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AudioCodec.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AudioCodec.fromValue(value);
  }
}

