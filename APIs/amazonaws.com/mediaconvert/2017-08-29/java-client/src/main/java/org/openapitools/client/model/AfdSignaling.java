/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * This setting only applies to H.264, H.265, and MPEG2 outputs. Use Insert AFD signaling to specify whether the service includes AFD values in the output video data and what those values are. * Choose None to remove all AFD values from this output. * Choose Fixed to ignore input AFD values and instead encode the value specified in the job. * Choose Auto to calculate output AFD values based on the input AFD scaler data.
 */
@JsonAdapter(AfdSignaling.Adapter.class)
public enum AfdSignaling {
  
  NONE("NONE"),
  
  AUTO("AUTO"),
  
  FIXED("FIXED");

  private String value;

  AfdSignaling(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AfdSignaling fromValue(String value) {
    for (AfdSignaling b : AfdSignaling.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AfdSignaling> {
    @Override
    public void write(final JsonWriter jsonWriter, final AfdSignaling enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AfdSignaling read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AfdSignaling.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AfdSignaling.fromValue(value);
  }
}

