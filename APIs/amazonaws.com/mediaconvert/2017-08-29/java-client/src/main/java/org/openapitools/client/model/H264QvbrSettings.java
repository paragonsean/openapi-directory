/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for quality-defined variable bitrate encoding with the H.264 codec. Use these settings only when you set QVBR for Rate control mode.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class H264QvbrSettings {
  public static final String SERIALIZED_NAME_MAX_AVERAGE_BITRATE = "MaxAverageBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_AVERAGE_BITRATE)
  private Integer maxAverageBitrate;

  public static final String SERIALIZED_NAME_QVBR_QUALITY_LEVEL = "QvbrQualityLevel";
  @SerializedName(SERIALIZED_NAME_QVBR_QUALITY_LEVEL)
  private Integer qvbrQualityLevel;

  public static final String SERIALIZED_NAME_QVBR_QUALITY_LEVEL_FINE_TUNE = "QvbrQualityLevelFineTune";
  @SerializedName(SERIALIZED_NAME_QVBR_QUALITY_LEVEL_FINE_TUNE)
  private Double qvbrQualityLevelFineTune;

  public H264QvbrSettings() {
  }

  public H264QvbrSettings maxAverageBitrate(Integer maxAverageBitrate) {
    this.maxAverageBitrate = maxAverageBitrate;
    return this;
  }

  /**
   * Get maxAverageBitrate
   * @return maxAverageBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxAverageBitrate() {
    return maxAverageBitrate;
  }

  public void setMaxAverageBitrate(Integer maxAverageBitrate) {
    this.maxAverageBitrate = maxAverageBitrate;
  }


  public H264QvbrSettings qvbrQualityLevel(Integer qvbrQualityLevel) {
    this.qvbrQualityLevel = qvbrQualityLevel;
    return this;
  }

  /**
   * Get qvbrQualityLevel
   * @return qvbrQualityLevel
   */
  @javax.annotation.Nullable
  public Integer getQvbrQualityLevel() {
    return qvbrQualityLevel;
  }

  public void setQvbrQualityLevel(Integer qvbrQualityLevel) {
    this.qvbrQualityLevel = qvbrQualityLevel;
  }


  public H264QvbrSettings qvbrQualityLevelFineTune(Double qvbrQualityLevelFineTune) {
    this.qvbrQualityLevelFineTune = qvbrQualityLevelFineTune;
    return this;
  }

  /**
   * Get qvbrQualityLevelFineTune
   * @return qvbrQualityLevelFineTune
   */
  @javax.annotation.Nullable
  public Double getQvbrQualityLevelFineTune() {
    return qvbrQualityLevelFineTune;
  }

  public void setQvbrQualityLevelFineTune(Double qvbrQualityLevelFineTune) {
    this.qvbrQualityLevelFineTune = qvbrQualityLevelFineTune;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    H264QvbrSettings h264QvbrSettings = (H264QvbrSettings) o;
    return Objects.equals(this.maxAverageBitrate, h264QvbrSettings.maxAverageBitrate) &&
        Objects.equals(this.qvbrQualityLevel, h264QvbrSettings.qvbrQualityLevel) &&
        Objects.equals(this.qvbrQualityLevelFineTune, h264QvbrSettings.qvbrQualityLevelFineTune);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxAverageBitrate, qvbrQualityLevel, qvbrQualityLevelFineTune);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class H264QvbrSettings {\n");
    sb.append("    maxAverageBitrate: ").append(toIndentedString(maxAverageBitrate)).append("\n");
    sb.append("    qvbrQualityLevel: ").append(toIndentedString(qvbrQualityLevel)).append("\n");
    sb.append("    qvbrQualityLevelFineTune: ").append(toIndentedString(qvbrQualityLevelFineTune)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxAverageBitrate");
    openapiFields.add("QvbrQualityLevel");
    openapiFields.add("QvbrQualityLevelFineTune");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to H264QvbrSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!H264QvbrSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in H264QvbrSettings is not found in the empty JSON string", H264QvbrSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!H264QvbrSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `H264QvbrSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MaxAverageBitrate`
      if (jsonObj.get("MaxAverageBitrate") != null && !jsonObj.get("MaxAverageBitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxAverageBitrate"));
      }
      // validate the optional field `QvbrQualityLevel`
      if (jsonObj.get("QvbrQualityLevel") != null && !jsonObj.get("QvbrQualityLevel").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("QvbrQualityLevel"));
      }
      // validate the optional field `QvbrQualityLevelFineTune`
      if (jsonObj.get("QvbrQualityLevelFineTune") != null && !jsonObj.get("QvbrQualityLevelFineTune").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("QvbrQualityLevelFineTune"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!H264QvbrSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'H264QvbrSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<H264QvbrSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(H264QvbrSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<H264QvbrSettings>() {
           @Override
           public void write(JsonWriter out, H264QvbrSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public H264QvbrSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of H264QvbrSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of H264QvbrSettings
   * @throws IOException if the JSON string is invalid with respect to H264QvbrSettings
   */
  public static H264QvbrSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, H264QvbrSettings.class);
  }

  /**
   * Convert an instance of H264QvbrSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

