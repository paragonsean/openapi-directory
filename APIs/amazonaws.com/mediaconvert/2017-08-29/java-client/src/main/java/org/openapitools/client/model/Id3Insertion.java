/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * To insert ID3 tags in your output, specify two values. Use ID3 tag to specify the base 64 encoded string and use Timecode to specify the time when the tag should be inserted. To insert multiple ID3 tags in your output, create multiple instances of ID3 insertion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Id3Insertion {
  public static final String SERIALIZED_NAME_ID3 = "Id3";
  @SerializedName(SERIALIZED_NAME_ID3)
  private String id3;

  public static final String SERIALIZED_NAME_TIMECODE = "Timecode";
  @SerializedName(SERIALIZED_NAME_TIMECODE)
  private String timecode;

  public Id3Insertion() {
  }

  public Id3Insertion id3(String id3) {
    this.id3 = id3;
    return this;
  }

  /**
   * Get id3
   * @return id3
   */
  @javax.annotation.Nullable
  public String getId3() {
    return id3;
  }

  public void setId3(String id3) {
    this.id3 = id3;
  }


  public Id3Insertion timecode(String timecode) {
    this.timecode = timecode;
    return this;
  }

  /**
   * Get timecode
   * @return timecode
   */
  @javax.annotation.Nullable
  public String getTimecode() {
    return timecode;
  }

  public void setTimecode(String timecode) {
    this.timecode = timecode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Id3Insertion id3Insertion = (Id3Insertion) o;
    return Objects.equals(this.id3, id3Insertion.id3) &&
        Objects.equals(this.timecode, id3Insertion.timecode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id3, timecode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Id3Insertion {\n");
    sb.append("    id3: ").append(toIndentedString(id3)).append("\n");
    sb.append("    timecode: ").append(toIndentedString(timecode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id3");
    openapiFields.add("Timecode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Id3Insertion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Id3Insertion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Id3Insertion is not found in the empty JSON string", Id3Insertion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Id3Insertion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Id3Insertion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id3`
      if (jsonObj.get("Id3") != null && !jsonObj.get("Id3").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id3"));
      }
      // validate the optional field `Timecode`
      if (jsonObj.get("Timecode") != null && !jsonObj.get("Timecode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Timecode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Id3Insertion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Id3Insertion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Id3Insertion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Id3Insertion.class));

       return (TypeAdapter<T>) new TypeAdapter<Id3Insertion>() {
           @Override
           public void write(JsonWriter out, Id3Insertion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Id3Insertion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Id3Insertion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Id3Insertion
   * @throws IOException if the JSON string is invalid with respect to Id3Insertion
   */
  public static Id3Insertion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Id3Insertion.class);
  }

  /**
   * Convert an instance of Id3Insertion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

