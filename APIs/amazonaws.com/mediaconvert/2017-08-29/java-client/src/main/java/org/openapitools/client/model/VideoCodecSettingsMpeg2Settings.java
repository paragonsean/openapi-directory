/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Mpeg2AdaptiveQuantization;
import org.openapitools.client.model.Mpeg2CodecLevel;
import org.openapitools.client.model.Mpeg2CodecProfile;
import org.openapitools.client.model.Mpeg2DynamicSubGop;
import org.openapitools.client.model.Mpeg2FramerateControl;
import org.openapitools.client.model.Mpeg2FramerateConversionAlgorithm;
import org.openapitools.client.model.Mpeg2GopSizeUnits;
import org.openapitools.client.model.Mpeg2InterlaceMode;
import org.openapitools.client.model.Mpeg2IntraDcPrecision;
import org.openapitools.client.model.Mpeg2ParControl;
import org.openapitools.client.model.Mpeg2QualityTuningLevel;
import org.openapitools.client.model.Mpeg2RateControlMode;
import org.openapitools.client.model.Mpeg2ScanTypeConversionMode;
import org.openapitools.client.model.Mpeg2SceneChangeDetect;
import org.openapitools.client.model.Mpeg2SlowPal;
import org.openapitools.client.model.Mpeg2SpatialAdaptiveQuantization;
import org.openapitools.client.model.Mpeg2Syntax;
import org.openapitools.client.model.Mpeg2Telecine;
import org.openapitools.client.model.Mpeg2TemporalAdaptiveQuantization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoCodecSettingsMpeg2Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoCodecSettingsMpeg2Settings {
  public static final String SERIALIZED_NAME_ADAPTIVE_QUANTIZATION = "AdaptiveQuantization";
  @SerializedName(SERIALIZED_NAME_ADAPTIVE_QUANTIZATION)
  private Mpeg2AdaptiveQuantization adaptiveQuantization;

  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Integer bitrate;

  public static final String SERIALIZED_NAME_CODEC_LEVEL = "CodecLevel";
  @SerializedName(SERIALIZED_NAME_CODEC_LEVEL)
  private Mpeg2CodecLevel codecLevel;

  public static final String SERIALIZED_NAME_CODEC_PROFILE = "CodecProfile";
  @SerializedName(SERIALIZED_NAME_CODEC_PROFILE)
  private Mpeg2CodecProfile codecProfile;

  public static final String SERIALIZED_NAME_DYNAMIC_SUB_GOP = "DynamicSubGop";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SUB_GOP)
  private Mpeg2DynamicSubGop dynamicSubGop;

  public static final String SERIALIZED_NAME_FRAMERATE_CONTROL = "FramerateControl";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONTROL)
  private Mpeg2FramerateControl framerateControl;

  public static final String SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM = "FramerateConversionAlgorithm";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM)
  private Mpeg2FramerateConversionAlgorithm framerateConversionAlgorithm;

  public static final String SERIALIZED_NAME_FRAMERATE_DENOMINATOR = "FramerateDenominator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_DENOMINATOR)
  private Integer framerateDenominator;

  public static final String SERIALIZED_NAME_FRAMERATE_NUMERATOR = "FramerateNumerator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_NUMERATOR)
  private Integer framerateNumerator;

  public static final String SERIALIZED_NAME_GOP_CLOSED_CADENCE = "GopClosedCadence";
  @SerializedName(SERIALIZED_NAME_GOP_CLOSED_CADENCE)
  private Integer gopClosedCadence;

  public static final String SERIALIZED_NAME_GOP_SIZE = "GopSize";
  @SerializedName(SERIALIZED_NAME_GOP_SIZE)
  private Double gopSize;

  public static final String SERIALIZED_NAME_GOP_SIZE_UNITS = "GopSizeUnits";
  @SerializedName(SERIALIZED_NAME_GOP_SIZE_UNITS)
  private Mpeg2GopSizeUnits gopSizeUnits;

  public static final String SERIALIZED_NAME_HRD_BUFFER_FINAL_FILL_PERCENTAGE = "HrdBufferFinalFillPercentage";
  @SerializedName(SERIALIZED_NAME_HRD_BUFFER_FINAL_FILL_PERCENTAGE)
  private Integer hrdBufferFinalFillPercentage;

  public static final String SERIALIZED_NAME_HRD_BUFFER_INITIAL_FILL_PERCENTAGE = "HrdBufferInitialFillPercentage";
  @SerializedName(SERIALIZED_NAME_HRD_BUFFER_INITIAL_FILL_PERCENTAGE)
  private Integer hrdBufferInitialFillPercentage;

  public static final String SERIALIZED_NAME_HRD_BUFFER_SIZE = "HrdBufferSize";
  @SerializedName(SERIALIZED_NAME_HRD_BUFFER_SIZE)
  private Integer hrdBufferSize;

  public static final String SERIALIZED_NAME_INTERLACE_MODE = "InterlaceMode";
  @SerializedName(SERIALIZED_NAME_INTERLACE_MODE)
  private Mpeg2InterlaceMode interlaceMode;

  public static final String SERIALIZED_NAME_INTRA_DC_PRECISION = "IntraDcPrecision";
  @SerializedName(SERIALIZED_NAME_INTRA_DC_PRECISION)
  private Mpeg2IntraDcPrecision intraDcPrecision;

  public static final String SERIALIZED_NAME_MAX_BITRATE = "MaxBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_BITRATE)
  private Integer maxBitrate;

  public static final String SERIALIZED_NAME_MIN_I_INTERVAL = "MinIInterval";
  @SerializedName(SERIALIZED_NAME_MIN_I_INTERVAL)
  private Integer minIInterval;

  public static final String SERIALIZED_NAME_NUMBER_B_FRAMES_BETWEEN_REFERENCE_FRAMES = "NumberBFramesBetweenReferenceFrames";
  @SerializedName(SERIALIZED_NAME_NUMBER_B_FRAMES_BETWEEN_REFERENCE_FRAMES)
  private Integer numberBFramesBetweenReferenceFrames;

  public static final String SERIALIZED_NAME_PAR_CONTROL = "ParControl";
  @SerializedName(SERIALIZED_NAME_PAR_CONTROL)
  private Mpeg2ParControl parControl;

  public static final String SERIALIZED_NAME_PAR_DENOMINATOR = "ParDenominator";
  @SerializedName(SERIALIZED_NAME_PAR_DENOMINATOR)
  private Integer parDenominator;

  public static final String SERIALIZED_NAME_PAR_NUMERATOR = "ParNumerator";
  @SerializedName(SERIALIZED_NAME_PAR_NUMERATOR)
  private Integer parNumerator;

  public static final String SERIALIZED_NAME_QUALITY_TUNING_LEVEL = "QualityTuningLevel";
  @SerializedName(SERIALIZED_NAME_QUALITY_TUNING_LEVEL)
  private Mpeg2QualityTuningLevel qualityTuningLevel;

  public static final String SERIALIZED_NAME_RATE_CONTROL_MODE = "RateControlMode";
  @SerializedName(SERIALIZED_NAME_RATE_CONTROL_MODE)
  private Mpeg2RateControlMode rateControlMode;

  public static final String SERIALIZED_NAME_SCAN_TYPE_CONVERSION_MODE = "ScanTypeConversionMode";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE_CONVERSION_MODE)
  private Mpeg2ScanTypeConversionMode scanTypeConversionMode;

  public static final String SERIALIZED_NAME_SCENE_CHANGE_DETECT = "SceneChangeDetect";
  @SerializedName(SERIALIZED_NAME_SCENE_CHANGE_DETECT)
  private Mpeg2SceneChangeDetect sceneChangeDetect;

  public static final String SERIALIZED_NAME_SLOW_PAL = "SlowPal";
  @SerializedName(SERIALIZED_NAME_SLOW_PAL)
  private Mpeg2SlowPal slowPal;

  public static final String SERIALIZED_NAME_SOFTNESS = "Softness";
  @SerializedName(SERIALIZED_NAME_SOFTNESS)
  private Integer softness;

  public static final String SERIALIZED_NAME_SPATIAL_ADAPTIVE_QUANTIZATION = "SpatialAdaptiveQuantization";
  @SerializedName(SERIALIZED_NAME_SPATIAL_ADAPTIVE_QUANTIZATION)
  private Mpeg2SpatialAdaptiveQuantization spatialAdaptiveQuantization;

  public static final String SERIALIZED_NAME_SYNTAX = "Syntax";
  @SerializedName(SERIALIZED_NAME_SYNTAX)
  private Mpeg2Syntax syntax;

  public static final String SERIALIZED_NAME_TELECINE = "Telecine";
  @SerializedName(SERIALIZED_NAME_TELECINE)
  private Mpeg2Telecine telecine;

  public static final String SERIALIZED_NAME_TEMPORAL_ADAPTIVE_QUANTIZATION = "TemporalAdaptiveQuantization";
  @SerializedName(SERIALIZED_NAME_TEMPORAL_ADAPTIVE_QUANTIZATION)
  private Mpeg2TemporalAdaptiveQuantization temporalAdaptiveQuantization;

  public VideoCodecSettingsMpeg2Settings() {
  }

  public VideoCodecSettingsMpeg2Settings adaptiveQuantization(Mpeg2AdaptiveQuantization adaptiveQuantization) {
    this.adaptiveQuantization = adaptiveQuantization;
    return this;
  }

  /**
   * Get adaptiveQuantization
   * @return adaptiveQuantization
   */
  @javax.annotation.Nullable
  public Mpeg2AdaptiveQuantization getAdaptiveQuantization() {
    return adaptiveQuantization;
  }

  public void setAdaptiveQuantization(Mpeg2AdaptiveQuantization adaptiveQuantization) {
    this.adaptiveQuantization = adaptiveQuantization;
  }


  public VideoCodecSettingsMpeg2Settings bitrate(Integer bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Integer getBitrate() {
    return bitrate;
  }

  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public VideoCodecSettingsMpeg2Settings codecLevel(Mpeg2CodecLevel codecLevel) {
    this.codecLevel = codecLevel;
    return this;
  }

  /**
   * Get codecLevel
   * @return codecLevel
   */
  @javax.annotation.Nullable
  public Mpeg2CodecLevel getCodecLevel() {
    return codecLevel;
  }

  public void setCodecLevel(Mpeg2CodecLevel codecLevel) {
    this.codecLevel = codecLevel;
  }


  public VideoCodecSettingsMpeg2Settings codecProfile(Mpeg2CodecProfile codecProfile) {
    this.codecProfile = codecProfile;
    return this;
  }

  /**
   * Get codecProfile
   * @return codecProfile
   */
  @javax.annotation.Nullable
  public Mpeg2CodecProfile getCodecProfile() {
    return codecProfile;
  }

  public void setCodecProfile(Mpeg2CodecProfile codecProfile) {
    this.codecProfile = codecProfile;
  }


  public VideoCodecSettingsMpeg2Settings dynamicSubGop(Mpeg2DynamicSubGop dynamicSubGop) {
    this.dynamicSubGop = dynamicSubGop;
    return this;
  }

  /**
   * Get dynamicSubGop
   * @return dynamicSubGop
   */
  @javax.annotation.Nullable
  public Mpeg2DynamicSubGop getDynamicSubGop() {
    return dynamicSubGop;
  }

  public void setDynamicSubGop(Mpeg2DynamicSubGop dynamicSubGop) {
    this.dynamicSubGop = dynamicSubGop;
  }


  public VideoCodecSettingsMpeg2Settings framerateControl(Mpeg2FramerateControl framerateControl) {
    this.framerateControl = framerateControl;
    return this;
  }

  /**
   * Get framerateControl
   * @return framerateControl
   */
  @javax.annotation.Nullable
  public Mpeg2FramerateControl getFramerateControl() {
    return framerateControl;
  }

  public void setFramerateControl(Mpeg2FramerateControl framerateControl) {
    this.framerateControl = framerateControl;
  }


  public VideoCodecSettingsMpeg2Settings framerateConversionAlgorithm(Mpeg2FramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
    return this;
  }

  /**
   * Get framerateConversionAlgorithm
   * @return framerateConversionAlgorithm
   */
  @javax.annotation.Nullable
  public Mpeg2FramerateConversionAlgorithm getFramerateConversionAlgorithm() {
    return framerateConversionAlgorithm;
  }

  public void setFramerateConversionAlgorithm(Mpeg2FramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
  }


  public VideoCodecSettingsMpeg2Settings framerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
    return this;
  }

  /**
   * Get framerateDenominator
   * @return framerateDenominator
   */
  @javax.annotation.Nullable
  public Integer getFramerateDenominator() {
    return framerateDenominator;
  }

  public void setFramerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
  }


  public VideoCodecSettingsMpeg2Settings framerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
    return this;
  }

  /**
   * Get framerateNumerator
   * @return framerateNumerator
   */
  @javax.annotation.Nullable
  public Integer getFramerateNumerator() {
    return framerateNumerator;
  }

  public void setFramerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
  }


  public VideoCodecSettingsMpeg2Settings gopClosedCadence(Integer gopClosedCadence) {
    this.gopClosedCadence = gopClosedCadence;
    return this;
  }

  /**
   * Get gopClosedCadence
   * @return gopClosedCadence
   */
  @javax.annotation.Nullable
  public Integer getGopClosedCadence() {
    return gopClosedCadence;
  }

  public void setGopClosedCadence(Integer gopClosedCadence) {
    this.gopClosedCadence = gopClosedCadence;
  }


  public VideoCodecSettingsMpeg2Settings gopSize(Double gopSize) {
    this.gopSize = gopSize;
    return this;
  }

  /**
   * Get gopSize
   * @return gopSize
   */
  @javax.annotation.Nullable
  public Double getGopSize() {
    return gopSize;
  }

  public void setGopSize(Double gopSize) {
    this.gopSize = gopSize;
  }


  public VideoCodecSettingsMpeg2Settings gopSizeUnits(Mpeg2GopSizeUnits gopSizeUnits) {
    this.gopSizeUnits = gopSizeUnits;
    return this;
  }

  /**
   * Get gopSizeUnits
   * @return gopSizeUnits
   */
  @javax.annotation.Nullable
  public Mpeg2GopSizeUnits getGopSizeUnits() {
    return gopSizeUnits;
  }

  public void setGopSizeUnits(Mpeg2GopSizeUnits gopSizeUnits) {
    this.gopSizeUnits = gopSizeUnits;
  }


  public VideoCodecSettingsMpeg2Settings hrdBufferFinalFillPercentage(Integer hrdBufferFinalFillPercentage) {
    this.hrdBufferFinalFillPercentage = hrdBufferFinalFillPercentage;
    return this;
  }

  /**
   * Get hrdBufferFinalFillPercentage
   * @return hrdBufferFinalFillPercentage
   */
  @javax.annotation.Nullable
  public Integer getHrdBufferFinalFillPercentage() {
    return hrdBufferFinalFillPercentage;
  }

  public void setHrdBufferFinalFillPercentage(Integer hrdBufferFinalFillPercentage) {
    this.hrdBufferFinalFillPercentage = hrdBufferFinalFillPercentage;
  }


  public VideoCodecSettingsMpeg2Settings hrdBufferInitialFillPercentage(Integer hrdBufferInitialFillPercentage) {
    this.hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentage;
    return this;
  }

  /**
   * Get hrdBufferInitialFillPercentage
   * @return hrdBufferInitialFillPercentage
   */
  @javax.annotation.Nullable
  public Integer getHrdBufferInitialFillPercentage() {
    return hrdBufferInitialFillPercentage;
  }

  public void setHrdBufferInitialFillPercentage(Integer hrdBufferInitialFillPercentage) {
    this.hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentage;
  }


  public VideoCodecSettingsMpeg2Settings hrdBufferSize(Integer hrdBufferSize) {
    this.hrdBufferSize = hrdBufferSize;
    return this;
  }

  /**
   * Get hrdBufferSize
   * @return hrdBufferSize
   */
  @javax.annotation.Nullable
  public Integer getHrdBufferSize() {
    return hrdBufferSize;
  }

  public void setHrdBufferSize(Integer hrdBufferSize) {
    this.hrdBufferSize = hrdBufferSize;
  }


  public VideoCodecSettingsMpeg2Settings interlaceMode(Mpeg2InterlaceMode interlaceMode) {
    this.interlaceMode = interlaceMode;
    return this;
  }

  /**
   * Get interlaceMode
   * @return interlaceMode
   */
  @javax.annotation.Nullable
  public Mpeg2InterlaceMode getInterlaceMode() {
    return interlaceMode;
  }

  public void setInterlaceMode(Mpeg2InterlaceMode interlaceMode) {
    this.interlaceMode = interlaceMode;
  }


  public VideoCodecSettingsMpeg2Settings intraDcPrecision(Mpeg2IntraDcPrecision intraDcPrecision) {
    this.intraDcPrecision = intraDcPrecision;
    return this;
  }

  /**
   * Get intraDcPrecision
   * @return intraDcPrecision
   */
  @javax.annotation.Nullable
  public Mpeg2IntraDcPrecision getIntraDcPrecision() {
    return intraDcPrecision;
  }

  public void setIntraDcPrecision(Mpeg2IntraDcPrecision intraDcPrecision) {
    this.intraDcPrecision = intraDcPrecision;
  }


  public VideoCodecSettingsMpeg2Settings maxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
    return this;
  }

  /**
   * Get maxBitrate
   * @return maxBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxBitrate() {
    return maxBitrate;
  }

  public void setMaxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
  }


  public VideoCodecSettingsMpeg2Settings minIInterval(Integer minIInterval) {
    this.minIInterval = minIInterval;
    return this;
  }

  /**
   * Get minIInterval
   * @return minIInterval
   */
  @javax.annotation.Nullable
  public Integer getMinIInterval() {
    return minIInterval;
  }

  public void setMinIInterval(Integer minIInterval) {
    this.minIInterval = minIInterval;
  }


  public VideoCodecSettingsMpeg2Settings numberBFramesBetweenReferenceFrames(Integer numberBFramesBetweenReferenceFrames) {
    this.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames;
    return this;
  }

  /**
   * Get numberBFramesBetweenReferenceFrames
   * @return numberBFramesBetweenReferenceFrames
   */
  @javax.annotation.Nullable
  public Integer getNumberBFramesBetweenReferenceFrames() {
    return numberBFramesBetweenReferenceFrames;
  }

  public void setNumberBFramesBetweenReferenceFrames(Integer numberBFramesBetweenReferenceFrames) {
    this.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames;
  }


  public VideoCodecSettingsMpeg2Settings parControl(Mpeg2ParControl parControl) {
    this.parControl = parControl;
    return this;
  }

  /**
   * Get parControl
   * @return parControl
   */
  @javax.annotation.Nullable
  public Mpeg2ParControl getParControl() {
    return parControl;
  }

  public void setParControl(Mpeg2ParControl parControl) {
    this.parControl = parControl;
  }


  public VideoCodecSettingsMpeg2Settings parDenominator(Integer parDenominator) {
    this.parDenominator = parDenominator;
    return this;
  }

  /**
   * Get parDenominator
   * @return parDenominator
   */
  @javax.annotation.Nullable
  public Integer getParDenominator() {
    return parDenominator;
  }

  public void setParDenominator(Integer parDenominator) {
    this.parDenominator = parDenominator;
  }


  public VideoCodecSettingsMpeg2Settings parNumerator(Integer parNumerator) {
    this.parNumerator = parNumerator;
    return this;
  }

  /**
   * Get parNumerator
   * @return parNumerator
   */
  @javax.annotation.Nullable
  public Integer getParNumerator() {
    return parNumerator;
  }

  public void setParNumerator(Integer parNumerator) {
    this.parNumerator = parNumerator;
  }


  public VideoCodecSettingsMpeg2Settings qualityTuningLevel(Mpeg2QualityTuningLevel qualityTuningLevel) {
    this.qualityTuningLevel = qualityTuningLevel;
    return this;
  }

  /**
   * Get qualityTuningLevel
   * @return qualityTuningLevel
   */
  @javax.annotation.Nullable
  public Mpeg2QualityTuningLevel getQualityTuningLevel() {
    return qualityTuningLevel;
  }

  public void setQualityTuningLevel(Mpeg2QualityTuningLevel qualityTuningLevel) {
    this.qualityTuningLevel = qualityTuningLevel;
  }


  public VideoCodecSettingsMpeg2Settings rateControlMode(Mpeg2RateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
    return this;
  }

  /**
   * Get rateControlMode
   * @return rateControlMode
   */
  @javax.annotation.Nullable
  public Mpeg2RateControlMode getRateControlMode() {
    return rateControlMode;
  }

  public void setRateControlMode(Mpeg2RateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
  }


  public VideoCodecSettingsMpeg2Settings scanTypeConversionMode(Mpeg2ScanTypeConversionMode scanTypeConversionMode) {
    this.scanTypeConversionMode = scanTypeConversionMode;
    return this;
  }

  /**
   * Get scanTypeConversionMode
   * @return scanTypeConversionMode
   */
  @javax.annotation.Nullable
  public Mpeg2ScanTypeConversionMode getScanTypeConversionMode() {
    return scanTypeConversionMode;
  }

  public void setScanTypeConversionMode(Mpeg2ScanTypeConversionMode scanTypeConversionMode) {
    this.scanTypeConversionMode = scanTypeConversionMode;
  }


  public VideoCodecSettingsMpeg2Settings sceneChangeDetect(Mpeg2SceneChangeDetect sceneChangeDetect) {
    this.sceneChangeDetect = sceneChangeDetect;
    return this;
  }

  /**
   * Get sceneChangeDetect
   * @return sceneChangeDetect
   */
  @javax.annotation.Nullable
  public Mpeg2SceneChangeDetect getSceneChangeDetect() {
    return sceneChangeDetect;
  }

  public void setSceneChangeDetect(Mpeg2SceneChangeDetect sceneChangeDetect) {
    this.sceneChangeDetect = sceneChangeDetect;
  }


  public VideoCodecSettingsMpeg2Settings slowPal(Mpeg2SlowPal slowPal) {
    this.slowPal = slowPal;
    return this;
  }

  /**
   * Get slowPal
   * @return slowPal
   */
  @javax.annotation.Nullable
  public Mpeg2SlowPal getSlowPal() {
    return slowPal;
  }

  public void setSlowPal(Mpeg2SlowPal slowPal) {
    this.slowPal = slowPal;
  }


  public VideoCodecSettingsMpeg2Settings softness(Integer softness) {
    this.softness = softness;
    return this;
  }

  /**
   * Get softness
   * @return softness
   */
  @javax.annotation.Nullable
  public Integer getSoftness() {
    return softness;
  }

  public void setSoftness(Integer softness) {
    this.softness = softness;
  }


  public VideoCodecSettingsMpeg2Settings spatialAdaptiveQuantization(Mpeg2SpatialAdaptiveQuantization spatialAdaptiveQuantization) {
    this.spatialAdaptiveQuantization = spatialAdaptiveQuantization;
    return this;
  }

  /**
   * Get spatialAdaptiveQuantization
   * @return spatialAdaptiveQuantization
   */
  @javax.annotation.Nullable
  public Mpeg2SpatialAdaptiveQuantization getSpatialAdaptiveQuantization() {
    return spatialAdaptiveQuantization;
  }

  public void setSpatialAdaptiveQuantization(Mpeg2SpatialAdaptiveQuantization spatialAdaptiveQuantization) {
    this.spatialAdaptiveQuantization = spatialAdaptiveQuantization;
  }


  public VideoCodecSettingsMpeg2Settings syntax(Mpeg2Syntax syntax) {
    this.syntax = syntax;
    return this;
  }

  /**
   * Get syntax
   * @return syntax
   */
  @javax.annotation.Nullable
  public Mpeg2Syntax getSyntax() {
    return syntax;
  }

  public void setSyntax(Mpeg2Syntax syntax) {
    this.syntax = syntax;
  }


  public VideoCodecSettingsMpeg2Settings telecine(Mpeg2Telecine telecine) {
    this.telecine = telecine;
    return this;
  }

  /**
   * Get telecine
   * @return telecine
   */
  @javax.annotation.Nullable
  public Mpeg2Telecine getTelecine() {
    return telecine;
  }

  public void setTelecine(Mpeg2Telecine telecine) {
    this.telecine = telecine;
  }


  public VideoCodecSettingsMpeg2Settings temporalAdaptiveQuantization(Mpeg2TemporalAdaptiveQuantization temporalAdaptiveQuantization) {
    this.temporalAdaptiveQuantization = temporalAdaptiveQuantization;
    return this;
  }

  /**
   * Get temporalAdaptiveQuantization
   * @return temporalAdaptiveQuantization
   */
  @javax.annotation.Nullable
  public Mpeg2TemporalAdaptiveQuantization getTemporalAdaptiveQuantization() {
    return temporalAdaptiveQuantization;
  }

  public void setTemporalAdaptiveQuantization(Mpeg2TemporalAdaptiveQuantization temporalAdaptiveQuantization) {
    this.temporalAdaptiveQuantization = temporalAdaptiveQuantization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoCodecSettingsMpeg2Settings videoCodecSettingsMpeg2Settings = (VideoCodecSettingsMpeg2Settings) o;
    return Objects.equals(this.adaptiveQuantization, videoCodecSettingsMpeg2Settings.adaptiveQuantization) &&
        Objects.equals(this.bitrate, videoCodecSettingsMpeg2Settings.bitrate) &&
        Objects.equals(this.codecLevel, videoCodecSettingsMpeg2Settings.codecLevel) &&
        Objects.equals(this.codecProfile, videoCodecSettingsMpeg2Settings.codecProfile) &&
        Objects.equals(this.dynamicSubGop, videoCodecSettingsMpeg2Settings.dynamicSubGop) &&
        Objects.equals(this.framerateControl, videoCodecSettingsMpeg2Settings.framerateControl) &&
        Objects.equals(this.framerateConversionAlgorithm, videoCodecSettingsMpeg2Settings.framerateConversionAlgorithm) &&
        Objects.equals(this.framerateDenominator, videoCodecSettingsMpeg2Settings.framerateDenominator) &&
        Objects.equals(this.framerateNumerator, videoCodecSettingsMpeg2Settings.framerateNumerator) &&
        Objects.equals(this.gopClosedCadence, videoCodecSettingsMpeg2Settings.gopClosedCadence) &&
        Objects.equals(this.gopSize, videoCodecSettingsMpeg2Settings.gopSize) &&
        Objects.equals(this.gopSizeUnits, videoCodecSettingsMpeg2Settings.gopSizeUnits) &&
        Objects.equals(this.hrdBufferFinalFillPercentage, videoCodecSettingsMpeg2Settings.hrdBufferFinalFillPercentage) &&
        Objects.equals(this.hrdBufferInitialFillPercentage, videoCodecSettingsMpeg2Settings.hrdBufferInitialFillPercentage) &&
        Objects.equals(this.hrdBufferSize, videoCodecSettingsMpeg2Settings.hrdBufferSize) &&
        Objects.equals(this.interlaceMode, videoCodecSettingsMpeg2Settings.interlaceMode) &&
        Objects.equals(this.intraDcPrecision, videoCodecSettingsMpeg2Settings.intraDcPrecision) &&
        Objects.equals(this.maxBitrate, videoCodecSettingsMpeg2Settings.maxBitrate) &&
        Objects.equals(this.minIInterval, videoCodecSettingsMpeg2Settings.minIInterval) &&
        Objects.equals(this.numberBFramesBetweenReferenceFrames, videoCodecSettingsMpeg2Settings.numberBFramesBetweenReferenceFrames) &&
        Objects.equals(this.parControl, videoCodecSettingsMpeg2Settings.parControl) &&
        Objects.equals(this.parDenominator, videoCodecSettingsMpeg2Settings.parDenominator) &&
        Objects.equals(this.parNumerator, videoCodecSettingsMpeg2Settings.parNumerator) &&
        Objects.equals(this.qualityTuningLevel, videoCodecSettingsMpeg2Settings.qualityTuningLevel) &&
        Objects.equals(this.rateControlMode, videoCodecSettingsMpeg2Settings.rateControlMode) &&
        Objects.equals(this.scanTypeConversionMode, videoCodecSettingsMpeg2Settings.scanTypeConversionMode) &&
        Objects.equals(this.sceneChangeDetect, videoCodecSettingsMpeg2Settings.sceneChangeDetect) &&
        Objects.equals(this.slowPal, videoCodecSettingsMpeg2Settings.slowPal) &&
        Objects.equals(this.softness, videoCodecSettingsMpeg2Settings.softness) &&
        Objects.equals(this.spatialAdaptiveQuantization, videoCodecSettingsMpeg2Settings.spatialAdaptiveQuantization) &&
        Objects.equals(this.syntax, videoCodecSettingsMpeg2Settings.syntax) &&
        Objects.equals(this.telecine, videoCodecSettingsMpeg2Settings.telecine) &&
        Objects.equals(this.temporalAdaptiveQuantization, videoCodecSettingsMpeg2Settings.temporalAdaptiveQuantization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adaptiveQuantization, bitrate, codecLevel, codecProfile, dynamicSubGop, framerateControl, framerateConversionAlgorithm, framerateDenominator, framerateNumerator, gopClosedCadence, gopSize, gopSizeUnits, hrdBufferFinalFillPercentage, hrdBufferInitialFillPercentage, hrdBufferSize, interlaceMode, intraDcPrecision, maxBitrate, minIInterval, numberBFramesBetweenReferenceFrames, parControl, parDenominator, parNumerator, qualityTuningLevel, rateControlMode, scanTypeConversionMode, sceneChangeDetect, slowPal, softness, spatialAdaptiveQuantization, syntax, telecine, temporalAdaptiveQuantization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoCodecSettingsMpeg2Settings {\n");
    sb.append("    adaptiveQuantization: ").append(toIndentedString(adaptiveQuantization)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    codecLevel: ").append(toIndentedString(codecLevel)).append("\n");
    sb.append("    codecProfile: ").append(toIndentedString(codecProfile)).append("\n");
    sb.append("    dynamicSubGop: ").append(toIndentedString(dynamicSubGop)).append("\n");
    sb.append("    framerateControl: ").append(toIndentedString(framerateControl)).append("\n");
    sb.append("    framerateConversionAlgorithm: ").append(toIndentedString(framerateConversionAlgorithm)).append("\n");
    sb.append("    framerateDenominator: ").append(toIndentedString(framerateDenominator)).append("\n");
    sb.append("    framerateNumerator: ").append(toIndentedString(framerateNumerator)).append("\n");
    sb.append("    gopClosedCadence: ").append(toIndentedString(gopClosedCadence)).append("\n");
    sb.append("    gopSize: ").append(toIndentedString(gopSize)).append("\n");
    sb.append("    gopSizeUnits: ").append(toIndentedString(gopSizeUnits)).append("\n");
    sb.append("    hrdBufferFinalFillPercentage: ").append(toIndentedString(hrdBufferFinalFillPercentage)).append("\n");
    sb.append("    hrdBufferInitialFillPercentage: ").append(toIndentedString(hrdBufferInitialFillPercentage)).append("\n");
    sb.append("    hrdBufferSize: ").append(toIndentedString(hrdBufferSize)).append("\n");
    sb.append("    interlaceMode: ").append(toIndentedString(interlaceMode)).append("\n");
    sb.append("    intraDcPrecision: ").append(toIndentedString(intraDcPrecision)).append("\n");
    sb.append("    maxBitrate: ").append(toIndentedString(maxBitrate)).append("\n");
    sb.append("    minIInterval: ").append(toIndentedString(minIInterval)).append("\n");
    sb.append("    numberBFramesBetweenReferenceFrames: ").append(toIndentedString(numberBFramesBetweenReferenceFrames)).append("\n");
    sb.append("    parControl: ").append(toIndentedString(parControl)).append("\n");
    sb.append("    parDenominator: ").append(toIndentedString(parDenominator)).append("\n");
    sb.append("    parNumerator: ").append(toIndentedString(parNumerator)).append("\n");
    sb.append("    qualityTuningLevel: ").append(toIndentedString(qualityTuningLevel)).append("\n");
    sb.append("    rateControlMode: ").append(toIndentedString(rateControlMode)).append("\n");
    sb.append("    scanTypeConversionMode: ").append(toIndentedString(scanTypeConversionMode)).append("\n");
    sb.append("    sceneChangeDetect: ").append(toIndentedString(sceneChangeDetect)).append("\n");
    sb.append("    slowPal: ").append(toIndentedString(slowPal)).append("\n");
    sb.append("    softness: ").append(toIndentedString(softness)).append("\n");
    sb.append("    spatialAdaptiveQuantization: ").append(toIndentedString(spatialAdaptiveQuantization)).append("\n");
    sb.append("    syntax: ").append(toIndentedString(syntax)).append("\n");
    sb.append("    telecine: ").append(toIndentedString(telecine)).append("\n");
    sb.append("    temporalAdaptiveQuantization: ").append(toIndentedString(temporalAdaptiveQuantization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdaptiveQuantization");
    openapiFields.add("Bitrate");
    openapiFields.add("CodecLevel");
    openapiFields.add("CodecProfile");
    openapiFields.add("DynamicSubGop");
    openapiFields.add("FramerateControl");
    openapiFields.add("FramerateConversionAlgorithm");
    openapiFields.add("FramerateDenominator");
    openapiFields.add("FramerateNumerator");
    openapiFields.add("GopClosedCadence");
    openapiFields.add("GopSize");
    openapiFields.add("GopSizeUnits");
    openapiFields.add("HrdBufferFinalFillPercentage");
    openapiFields.add("HrdBufferInitialFillPercentage");
    openapiFields.add("HrdBufferSize");
    openapiFields.add("InterlaceMode");
    openapiFields.add("IntraDcPrecision");
    openapiFields.add("MaxBitrate");
    openapiFields.add("MinIInterval");
    openapiFields.add("NumberBFramesBetweenReferenceFrames");
    openapiFields.add("ParControl");
    openapiFields.add("ParDenominator");
    openapiFields.add("ParNumerator");
    openapiFields.add("QualityTuningLevel");
    openapiFields.add("RateControlMode");
    openapiFields.add("ScanTypeConversionMode");
    openapiFields.add("SceneChangeDetect");
    openapiFields.add("SlowPal");
    openapiFields.add("Softness");
    openapiFields.add("SpatialAdaptiveQuantization");
    openapiFields.add("Syntax");
    openapiFields.add("Telecine");
    openapiFields.add("TemporalAdaptiveQuantization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoCodecSettingsMpeg2Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoCodecSettingsMpeg2Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoCodecSettingsMpeg2Settings is not found in the empty JSON string", VideoCodecSettingsMpeg2Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoCodecSettingsMpeg2Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoCodecSettingsMpeg2Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdaptiveQuantization`
      if (jsonObj.get("AdaptiveQuantization") != null && !jsonObj.get("AdaptiveQuantization").isJsonNull()) {
        Mpeg2AdaptiveQuantization.validateJsonElement(jsonObj.get("AdaptiveQuantization"));
      }
      // validate the optional field `Bitrate`
      if (jsonObj.get("Bitrate") != null && !jsonObj.get("Bitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Bitrate"));
      }
      // validate the optional field `CodecLevel`
      if (jsonObj.get("CodecLevel") != null && !jsonObj.get("CodecLevel").isJsonNull()) {
        Mpeg2CodecLevel.validateJsonElement(jsonObj.get("CodecLevel"));
      }
      // validate the optional field `CodecProfile`
      if (jsonObj.get("CodecProfile") != null && !jsonObj.get("CodecProfile").isJsonNull()) {
        Mpeg2CodecProfile.validateJsonElement(jsonObj.get("CodecProfile"));
      }
      // validate the optional field `DynamicSubGop`
      if (jsonObj.get("DynamicSubGop") != null && !jsonObj.get("DynamicSubGop").isJsonNull()) {
        Mpeg2DynamicSubGop.validateJsonElement(jsonObj.get("DynamicSubGop"));
      }
      // validate the optional field `FramerateControl`
      if (jsonObj.get("FramerateControl") != null && !jsonObj.get("FramerateControl").isJsonNull()) {
        Mpeg2FramerateControl.validateJsonElement(jsonObj.get("FramerateControl"));
      }
      // validate the optional field `FramerateConversionAlgorithm`
      if (jsonObj.get("FramerateConversionAlgorithm") != null && !jsonObj.get("FramerateConversionAlgorithm").isJsonNull()) {
        Mpeg2FramerateConversionAlgorithm.validateJsonElement(jsonObj.get("FramerateConversionAlgorithm"));
      }
      // validate the optional field `FramerateDenominator`
      if (jsonObj.get("FramerateDenominator") != null && !jsonObj.get("FramerateDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateDenominator"));
      }
      // validate the optional field `FramerateNumerator`
      if (jsonObj.get("FramerateNumerator") != null && !jsonObj.get("FramerateNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateNumerator"));
      }
      // validate the optional field `GopClosedCadence`
      if (jsonObj.get("GopClosedCadence") != null && !jsonObj.get("GopClosedCadence").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("GopClosedCadence"));
      }
      // validate the optional field `GopSize`
      if (jsonObj.get("GopSize") != null && !jsonObj.get("GopSize").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("GopSize"));
      }
      // validate the optional field `GopSizeUnits`
      if (jsonObj.get("GopSizeUnits") != null && !jsonObj.get("GopSizeUnits").isJsonNull()) {
        Mpeg2GopSizeUnits.validateJsonElement(jsonObj.get("GopSizeUnits"));
      }
      // validate the optional field `HrdBufferFinalFillPercentage`
      if (jsonObj.get("HrdBufferFinalFillPercentage") != null && !jsonObj.get("HrdBufferFinalFillPercentage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HrdBufferFinalFillPercentage"));
      }
      // validate the optional field `HrdBufferInitialFillPercentage`
      if (jsonObj.get("HrdBufferInitialFillPercentage") != null && !jsonObj.get("HrdBufferInitialFillPercentage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HrdBufferInitialFillPercentage"));
      }
      // validate the optional field `HrdBufferSize`
      if (jsonObj.get("HrdBufferSize") != null && !jsonObj.get("HrdBufferSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HrdBufferSize"));
      }
      // validate the optional field `InterlaceMode`
      if (jsonObj.get("InterlaceMode") != null && !jsonObj.get("InterlaceMode").isJsonNull()) {
        Mpeg2InterlaceMode.validateJsonElement(jsonObj.get("InterlaceMode"));
      }
      // validate the optional field `IntraDcPrecision`
      if (jsonObj.get("IntraDcPrecision") != null && !jsonObj.get("IntraDcPrecision").isJsonNull()) {
        Mpeg2IntraDcPrecision.validateJsonElement(jsonObj.get("IntraDcPrecision"));
      }
      // validate the optional field `MaxBitrate`
      if (jsonObj.get("MaxBitrate") != null && !jsonObj.get("MaxBitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxBitrate"));
      }
      // validate the optional field `MinIInterval`
      if (jsonObj.get("MinIInterval") != null && !jsonObj.get("MinIInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinIInterval"));
      }
      // validate the optional field `NumberBFramesBetweenReferenceFrames`
      if (jsonObj.get("NumberBFramesBetweenReferenceFrames") != null && !jsonObj.get("NumberBFramesBetweenReferenceFrames").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberBFramesBetweenReferenceFrames"));
      }
      // validate the optional field `ParControl`
      if (jsonObj.get("ParControl") != null && !jsonObj.get("ParControl").isJsonNull()) {
        Mpeg2ParControl.validateJsonElement(jsonObj.get("ParControl"));
      }
      // validate the optional field `ParDenominator`
      if (jsonObj.get("ParDenominator") != null && !jsonObj.get("ParDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParDenominator"));
      }
      // validate the optional field `ParNumerator`
      if (jsonObj.get("ParNumerator") != null && !jsonObj.get("ParNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParNumerator"));
      }
      // validate the optional field `QualityTuningLevel`
      if (jsonObj.get("QualityTuningLevel") != null && !jsonObj.get("QualityTuningLevel").isJsonNull()) {
        Mpeg2QualityTuningLevel.validateJsonElement(jsonObj.get("QualityTuningLevel"));
      }
      // validate the optional field `RateControlMode`
      if (jsonObj.get("RateControlMode") != null && !jsonObj.get("RateControlMode").isJsonNull()) {
        Mpeg2RateControlMode.validateJsonElement(jsonObj.get("RateControlMode"));
      }
      // validate the optional field `ScanTypeConversionMode`
      if (jsonObj.get("ScanTypeConversionMode") != null && !jsonObj.get("ScanTypeConversionMode").isJsonNull()) {
        Mpeg2ScanTypeConversionMode.validateJsonElement(jsonObj.get("ScanTypeConversionMode"));
      }
      // validate the optional field `SceneChangeDetect`
      if (jsonObj.get("SceneChangeDetect") != null && !jsonObj.get("SceneChangeDetect").isJsonNull()) {
        Mpeg2SceneChangeDetect.validateJsonElement(jsonObj.get("SceneChangeDetect"));
      }
      // validate the optional field `SlowPal`
      if (jsonObj.get("SlowPal") != null && !jsonObj.get("SlowPal").isJsonNull()) {
        Mpeg2SlowPal.validateJsonElement(jsonObj.get("SlowPal"));
      }
      // validate the optional field `Softness`
      if (jsonObj.get("Softness") != null && !jsonObj.get("Softness").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Softness"));
      }
      // validate the optional field `SpatialAdaptiveQuantization`
      if (jsonObj.get("SpatialAdaptiveQuantization") != null && !jsonObj.get("SpatialAdaptiveQuantization").isJsonNull()) {
        Mpeg2SpatialAdaptiveQuantization.validateJsonElement(jsonObj.get("SpatialAdaptiveQuantization"));
      }
      // validate the optional field `Syntax`
      if (jsonObj.get("Syntax") != null && !jsonObj.get("Syntax").isJsonNull()) {
        Mpeg2Syntax.validateJsonElement(jsonObj.get("Syntax"));
      }
      // validate the optional field `Telecine`
      if (jsonObj.get("Telecine") != null && !jsonObj.get("Telecine").isJsonNull()) {
        Mpeg2Telecine.validateJsonElement(jsonObj.get("Telecine"));
      }
      // validate the optional field `TemporalAdaptiveQuantization`
      if (jsonObj.get("TemporalAdaptiveQuantization") != null && !jsonObj.get("TemporalAdaptiveQuantization").isJsonNull()) {
        Mpeg2TemporalAdaptiveQuantization.validateJsonElement(jsonObj.get("TemporalAdaptiveQuantization"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoCodecSettingsMpeg2Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoCodecSettingsMpeg2Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoCodecSettingsMpeg2Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoCodecSettingsMpeg2Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoCodecSettingsMpeg2Settings>() {
           @Override
           public void write(JsonWriter out, VideoCodecSettingsMpeg2Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoCodecSettingsMpeg2Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoCodecSettingsMpeg2Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoCodecSettingsMpeg2Settings
   * @throws IOException if the JSON string is invalid with respect to VideoCodecSettingsMpeg2Settings
   */
  public static VideoCodecSettingsMpeg2Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoCodecSettingsMpeg2Settings.class);
  }

  /**
   * Convert an instance of VideoCodecSettingsMpeg2Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

