/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateJobRequestAccelerationSettings;
import org.openapitools.client.model.CreateJobRequestSettings;
import org.openapitools.client.model.HopDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateJobRequest {
  public static final String SERIALIZED_NAME_ACCELERATION_SETTINGS = "accelerationSettings";
  @SerializedName(SERIALIZED_NAME_ACCELERATION_SETTINGS)
  private CreateJobRequestAccelerationSettings accelerationSettings;

  /**
   * The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
   */
  @JsonAdapter(BillingTagsSourceEnum.Adapter.class)
  public enum BillingTagsSourceEnum {
    QUEUE("QUEUE"),
    
    PRESET("PRESET"),
    
    JOB_TEMPLATE("JOB_TEMPLATE"),
    
    JOB("JOB");

    private String value;

    BillingTagsSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingTagsSourceEnum fromValue(String value) {
      for (BillingTagsSourceEnum b : BillingTagsSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BillingTagsSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingTagsSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingTagsSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingTagsSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BillingTagsSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BILLING_TAGS_SOURCE = "billingTagsSource";
  @SerializedName(SERIALIZED_NAME_BILLING_TAGS_SOURCE)
  private BillingTagsSourceEnum billingTagsSource;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_HOP_DESTINATIONS = "hopDestinations";
  @SerializedName(SERIALIZED_NAME_HOP_DESTINATIONS)
  private List<HopDestination> hopDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_TEMPLATE = "jobTemplate";
  @SerializedName(SERIALIZED_NAME_JOB_TEMPLATE)
  private String jobTemplate;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_QUEUE = "queue";
  @SerializedName(SERIALIZED_NAME_QUEUE)
  private String queue;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private CreateJobRequestSettings settings;

  /**
   * Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
   */
  @JsonAdapter(SimulateReservedQueueEnum.Adapter.class)
  public enum SimulateReservedQueueEnum {
    DISABLED("DISABLED"),
    
    ENABLED("ENABLED");

    private String value;

    SimulateReservedQueueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SimulateReservedQueueEnum fromValue(String value) {
      for (SimulateReservedQueueEnum b : SimulateReservedQueueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SimulateReservedQueueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SimulateReservedQueueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SimulateReservedQueueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SimulateReservedQueueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SimulateReservedQueueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIMULATE_RESERVED_QUEUE = "simulateReservedQueue";
  @SerializedName(SERIALIZED_NAME_SIMULATE_RESERVED_QUEUE)
  private SimulateReservedQueueEnum simulateReservedQueue;

  /**
   * Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
   */
  @JsonAdapter(StatusUpdateIntervalEnum.Adapter.class)
  public enum StatusUpdateIntervalEnum {
    _10("SECONDS_10"),
    
    _12("SECONDS_12"),
    
    _15("SECONDS_15"),
    
    _20("SECONDS_20"),
    
    _30("SECONDS_30"),
    
    _60("SECONDS_60"),
    
    _120("SECONDS_120"),
    
    _180("SECONDS_180"),
    
    _240("SECONDS_240"),
    
    _300("SECONDS_300"),
    
    _360("SECONDS_360"),
    
    _420("SECONDS_420"),
    
    _480("SECONDS_480"),
    
    _540("SECONDS_540"),
    
    _600("SECONDS_600");

    private String value;

    StatusUpdateIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusUpdateIntervalEnum fromValue(String value) {
      for (StatusUpdateIntervalEnum b : StatusUpdateIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusUpdateIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusUpdateIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusUpdateIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusUpdateIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusUpdateIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_UPDATE_INTERVAL = "statusUpdateInterval";
  @SerializedName(SERIALIZED_NAME_STATUS_UPDATE_INTERVAL)
  private StatusUpdateIntervalEnum statusUpdateInterval;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_USER_METADATA = "userMetadata";
  @SerializedName(SERIALIZED_NAME_USER_METADATA)
  private Map<String, String> userMetadata = new HashMap<>();

  public CreateJobRequest() {
  }

  public CreateJobRequest accelerationSettings(CreateJobRequestAccelerationSettings accelerationSettings) {
    this.accelerationSettings = accelerationSettings;
    return this;
  }

  /**
   * Get accelerationSettings
   * @return accelerationSettings
   */
  @javax.annotation.Nullable
  public CreateJobRequestAccelerationSettings getAccelerationSettings() {
    return accelerationSettings;
  }

  public void setAccelerationSettings(CreateJobRequestAccelerationSettings accelerationSettings) {
    this.accelerationSettings = accelerationSettings;
  }


  public CreateJobRequest billingTagsSource(BillingTagsSourceEnum billingTagsSource) {
    this.billingTagsSource = billingTagsSource;
    return this;
  }

  /**
   * The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
   * @return billingTagsSource
   */
  @javax.annotation.Nullable
  public BillingTagsSourceEnum getBillingTagsSource() {
    return billingTagsSource;
  }

  public void setBillingTagsSource(BillingTagsSourceEnum billingTagsSource) {
    this.billingTagsSource = billingTagsSource;
  }


  public CreateJobRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Prevent duplicate jobs from being created and ensure idempotency for your requests. A client request token can be any string that includes up to 64 ASCII characters. If you reuse a client request token within one minute of a successful request, the API returns the job details of the original request instead. For more information see https://docs.aws.amazon.com/mediaconvert/latest/apireference/idempotency.html.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateJobRequest hopDestinations(List<HopDestination> hopDestinations) {
    this.hopDestinations = hopDestinations;
    return this;
  }

  public CreateJobRequest addHopDestinationsItem(HopDestination hopDestinationsItem) {
    if (this.hopDestinations == null) {
      this.hopDestinations = new ArrayList<>();
    }
    this.hopDestinations.add(hopDestinationsItem);
    return this;
  }

  /**
   * Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
   * @return hopDestinations
   */
  @javax.annotation.Nullable
  public List<HopDestination> getHopDestinations() {
    return hopDestinations;
  }

  public void setHopDestinations(List<HopDestination> hopDestinations) {
    this.hopDestinations = hopDestinations;
  }


  public CreateJobRequest jobTemplate(String jobTemplate) {
    this.jobTemplate = jobTemplate;
    return this;
  }

  /**
   * Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.
   * @return jobTemplate
   */
  @javax.annotation.Nullable
  public String getJobTemplate() {
    return jobTemplate;
  }

  public void setJobTemplate(String jobTemplate) {
    this.jobTemplate = jobTemplate;
  }


  public CreateJobRequest priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don&#39;t specify a priority, the service uses the default value 0.
   * minimum: -50
   * maximum: 50
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public CreateJobRequest queue(String queue) {
    this.queue = queue;
    return this;
  }

  /**
   * Optional. When you create a job, you can specify a queue to send it to. If you don&#39;t specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.
   * @return queue
   */
  @javax.annotation.Nullable
  public String getQueue() {
    return queue;
  }

  public void setQueue(String queue) {
    this.queue = queue;
  }


  public CreateJobRequest role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.
   * @return role
   */
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public CreateJobRequest settings(CreateJobRequestSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nonnull
  public CreateJobRequestSettings getSettings() {
    return settings;
  }

  public void setSettings(CreateJobRequestSettings settings) {
    this.settings = settings;
  }


  public CreateJobRequest simulateReservedQueue(SimulateReservedQueueEnum simulateReservedQueue) {
    this.simulateReservedQueue = simulateReservedQueue;
    return this;
  }

  /**
   * Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
   * @return simulateReservedQueue
   */
  @javax.annotation.Nullable
  public SimulateReservedQueueEnum getSimulateReservedQueue() {
    return simulateReservedQueue;
  }

  public void setSimulateReservedQueue(SimulateReservedQueueEnum simulateReservedQueue) {
    this.simulateReservedQueue = simulateReservedQueue;
  }


  public CreateJobRequest statusUpdateInterval(StatusUpdateIntervalEnum statusUpdateInterval) {
    this.statusUpdateInterval = statusUpdateInterval;
    return this;
  }

  /**
   * Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
   * @return statusUpdateInterval
   */
  @javax.annotation.Nullable
  public StatusUpdateIntervalEnum getStatusUpdateInterval() {
    return statusUpdateInterval;
  }

  public void setStatusUpdateInterval(StatusUpdateIntervalEnum statusUpdateInterval) {
    this.statusUpdateInterval = statusUpdateInterval;
  }


  public CreateJobRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateJobRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.  Use standard AWS tags on your job for automatic integration with AWS services and for custom integrations and workflows.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateJobRequest userMetadata(Map<String, String> userMetadata) {
    this.userMetadata = userMetadata;
    return this;
  }

  public CreateJobRequest putUserMetadataItem(String key, String userMetadataItem) {
    if (this.userMetadata == null) {
      this.userMetadata = new HashMap<>();
    }
    this.userMetadata.put(key, userMetadataItem);
    return this;
  }

  /**
   * Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.  Use only for existing integrations or workflows that rely on job metadata tags. Otherwise, we recommend that you use standard AWS tags.
   * @return userMetadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserMetadata() {
    return userMetadata;
  }

  public void setUserMetadata(Map<String, String> userMetadata) {
    this.userMetadata = userMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateJobRequest createJobRequest = (CreateJobRequest) o;
    return Objects.equals(this.accelerationSettings, createJobRequest.accelerationSettings) &&
        Objects.equals(this.billingTagsSource, createJobRequest.billingTagsSource) &&
        Objects.equals(this.clientRequestToken, createJobRequest.clientRequestToken) &&
        Objects.equals(this.hopDestinations, createJobRequest.hopDestinations) &&
        Objects.equals(this.jobTemplate, createJobRequest.jobTemplate) &&
        Objects.equals(this.priority, createJobRequest.priority) &&
        Objects.equals(this.queue, createJobRequest.queue) &&
        Objects.equals(this.role, createJobRequest.role) &&
        Objects.equals(this.settings, createJobRequest.settings) &&
        Objects.equals(this.simulateReservedQueue, createJobRequest.simulateReservedQueue) &&
        Objects.equals(this.statusUpdateInterval, createJobRequest.statusUpdateInterval) &&
        Objects.equals(this.tags, createJobRequest.tags) &&
        Objects.equals(this.userMetadata, createJobRequest.userMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accelerationSettings, billingTagsSource, clientRequestToken, hopDestinations, jobTemplate, priority, queue, role, settings, simulateReservedQueue, statusUpdateInterval, tags, userMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateJobRequest {\n");
    sb.append("    accelerationSettings: ").append(toIndentedString(accelerationSettings)).append("\n");
    sb.append("    billingTagsSource: ").append(toIndentedString(billingTagsSource)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    hopDestinations: ").append(toIndentedString(hopDestinations)).append("\n");
    sb.append("    jobTemplate: ").append(toIndentedString(jobTemplate)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    simulateReservedQueue: ").append(toIndentedString(simulateReservedQueue)).append("\n");
    sb.append("    statusUpdateInterval: ").append(toIndentedString(statusUpdateInterval)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    userMetadata: ").append(toIndentedString(userMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accelerationSettings");
    openapiFields.add("billingTagsSource");
    openapiFields.add("clientRequestToken");
    openapiFields.add("hopDestinations");
    openapiFields.add("jobTemplate");
    openapiFields.add("priority");
    openapiFields.add("queue");
    openapiFields.add("role");
    openapiFields.add("settings");
    openapiFields.add("simulateReservedQueue");
    openapiFields.add("statusUpdateInterval");
    openapiFields.add("tags");
    openapiFields.add("userMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("settings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateJobRequest is not found in the empty JSON string", CreateJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accelerationSettings`
      if (jsonObj.get("accelerationSettings") != null && !jsonObj.get("accelerationSettings").isJsonNull()) {
        CreateJobRequestAccelerationSettings.validateJsonElement(jsonObj.get("accelerationSettings"));
      }
      if ((jsonObj.get("billingTagsSource") != null && !jsonObj.get("billingTagsSource").isJsonNull()) && !jsonObj.get("billingTagsSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingTagsSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingTagsSource").toString()));
      }
      // validate the optional field `billingTagsSource`
      if (jsonObj.get("billingTagsSource") != null && !jsonObj.get("billingTagsSource").isJsonNull()) {
        BillingTagsSourceEnum.validateJsonElement(jsonObj.get("billingTagsSource"));
      }
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
      if (jsonObj.get("hopDestinations") != null && !jsonObj.get("hopDestinations").isJsonNull()) {
        JsonArray jsonArrayhopDestinations = jsonObj.getAsJsonArray("hopDestinations");
        if (jsonArrayhopDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hopDestinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hopDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("hopDestinations").toString()));
          }

          // validate the optional field `hopDestinations` (array)
          for (int i = 0; i < jsonArrayhopDestinations.size(); i++) {
            HopDestination.validateJsonElement(jsonArrayhopDestinations.get(i));
          };
        }
      }
      if ((jsonObj.get("jobTemplate") != null && !jsonObj.get("jobTemplate").isJsonNull()) && !jsonObj.get("jobTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTemplate").toString()));
      }
      if ((jsonObj.get("queue") != null && !jsonObj.get("queue").isJsonNull()) && !jsonObj.get("queue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the required field `settings`
      CreateJobRequestSettings.validateJsonElement(jsonObj.get("settings"));
      if ((jsonObj.get("simulateReservedQueue") != null && !jsonObj.get("simulateReservedQueue").isJsonNull()) && !jsonObj.get("simulateReservedQueue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `simulateReservedQueue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("simulateReservedQueue").toString()));
      }
      // validate the optional field `simulateReservedQueue`
      if (jsonObj.get("simulateReservedQueue") != null && !jsonObj.get("simulateReservedQueue").isJsonNull()) {
        SimulateReservedQueueEnum.validateJsonElement(jsonObj.get("simulateReservedQueue"));
      }
      if ((jsonObj.get("statusUpdateInterval") != null && !jsonObj.get("statusUpdateInterval").isJsonNull()) && !jsonObj.get("statusUpdateInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusUpdateInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusUpdateInterval").toString()));
      }
      // validate the optional field `statusUpdateInterval`
      if (jsonObj.get("statusUpdateInterval") != null && !jsonObj.get("statusUpdateInterval").isJsonNull()) {
        StatusUpdateIntervalEnum.validateJsonElement(jsonObj.get("statusUpdateInterval"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateJobRequest
   */
  public static CreateJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateJobRequest.class);
  }

  /**
   * Convert an instance of CreateJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

