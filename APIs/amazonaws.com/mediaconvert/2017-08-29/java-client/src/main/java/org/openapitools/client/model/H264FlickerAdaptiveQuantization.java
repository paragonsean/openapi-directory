/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264FlickerAdaptiveQuantization is Disabled. Change this value to Enabled to reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. To manually enable or disable H264FlickerAdaptiveQuantization, you must set Adaptive quantization to a value other than AUTO.
 */
@JsonAdapter(H264FlickerAdaptiveQuantization.Adapter.class)
public enum H264FlickerAdaptiveQuantization {
  
  DISABLED("DISABLED"),
  
  ENABLED("ENABLED");

  private String value;

  H264FlickerAdaptiveQuantization(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H264FlickerAdaptiveQuantization fromValue(String value) {
    for (H264FlickerAdaptiveQuantization b : H264FlickerAdaptiveQuantization.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H264FlickerAdaptiveQuantization> {
    @Override
    public void write(final JsonWriter jsonWriter, final H264FlickerAdaptiveQuantization enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H264FlickerAdaptiveQuantization read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H264FlickerAdaptiveQuantization.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H264FlickerAdaptiveQuantization.fromValue(value);
  }
}

