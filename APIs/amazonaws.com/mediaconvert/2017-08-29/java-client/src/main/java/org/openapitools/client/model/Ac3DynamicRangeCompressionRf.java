/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
 */
@JsonAdapter(Ac3DynamicRangeCompressionRf.Adapter.class)
public enum Ac3DynamicRangeCompressionRf {
  
  FILM_STANDARD("FILM_STANDARD"),
  
  FILM_LIGHT("FILM_LIGHT"),
  
  MUSIC_STANDARD("MUSIC_STANDARD"),
  
  MUSIC_LIGHT("MUSIC_LIGHT"),
  
  SPEECH("SPEECH"),
  
  NONE("NONE");

  private String value;

  Ac3DynamicRangeCompressionRf(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Ac3DynamicRangeCompressionRf fromValue(String value) {
    for (Ac3DynamicRangeCompressionRf b : Ac3DynamicRangeCompressionRf.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Ac3DynamicRangeCompressionRf> {
    @Override
    public void write(final JsonWriter jsonWriter, final Ac3DynamicRangeCompressionRf enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Ac3DynamicRangeCompressionRf read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Ac3DynamicRangeCompressionRf.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Ac3DynamicRangeCompressionRf.fromValue(value);
  }
}

