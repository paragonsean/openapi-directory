/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Commitment;
import org.openapitools.client.model.RenewalType;
import org.openapitools.client.model.ReservationPlanStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationPlan {
  public static final String SERIALIZED_NAME_COMMITMENT = "Commitment";
  @SerializedName(SERIALIZED_NAME_COMMITMENT)
  private Commitment commitment;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "ExpiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_PURCHASED_AT = "PurchasedAt";
  @SerializedName(SERIALIZED_NAME_PURCHASED_AT)
  private OffsetDateTime purchasedAt;

  public static final String SERIALIZED_NAME_RENEWAL_TYPE = "RenewalType";
  @SerializedName(SERIALIZED_NAME_RENEWAL_TYPE)
  private RenewalType renewalType;

  public static final String SERIALIZED_NAME_RESERVED_SLOTS = "ReservedSlots";
  @SerializedName(SERIALIZED_NAME_RESERVED_SLOTS)
  private Integer reservedSlots;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ReservationPlanStatus status;

  public ReservationPlan() {
  }

  public ReservationPlan commitment(Commitment commitment) {
    this.commitment = commitment;
    return this;
  }

  /**
   * Get commitment
   * @return commitment
   */
  @javax.annotation.Nullable
  public Commitment getCommitment() {
    return commitment;
  }

  public void setCommitment(Commitment commitment) {
    this.commitment = commitment;
  }


  public ReservationPlan expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public ReservationPlan purchasedAt(OffsetDateTime purchasedAt) {
    this.purchasedAt = purchasedAt;
    return this;
  }

  /**
   * Get purchasedAt
   * @return purchasedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPurchasedAt() {
    return purchasedAt;
  }

  public void setPurchasedAt(OffsetDateTime purchasedAt) {
    this.purchasedAt = purchasedAt;
  }


  public ReservationPlan renewalType(RenewalType renewalType) {
    this.renewalType = renewalType;
    return this;
  }

  /**
   * Get renewalType
   * @return renewalType
   */
  @javax.annotation.Nullable
  public RenewalType getRenewalType() {
    return renewalType;
  }

  public void setRenewalType(RenewalType renewalType) {
    this.renewalType = renewalType;
  }


  public ReservationPlan reservedSlots(Integer reservedSlots) {
    this.reservedSlots = reservedSlots;
    return this;
  }

  /**
   * Get reservedSlots
   * @return reservedSlots
   */
  @javax.annotation.Nullable
  public Integer getReservedSlots() {
    return reservedSlots;
  }

  public void setReservedSlots(Integer reservedSlots) {
    this.reservedSlots = reservedSlots;
  }


  public ReservationPlan status(ReservationPlanStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ReservationPlanStatus getStatus() {
    return status;
  }

  public void setStatus(ReservationPlanStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationPlan reservationPlan = (ReservationPlan) o;
    return Objects.equals(this.commitment, reservationPlan.commitment) &&
        Objects.equals(this.expiresAt, reservationPlan.expiresAt) &&
        Objects.equals(this.purchasedAt, reservationPlan.purchasedAt) &&
        Objects.equals(this.renewalType, reservationPlan.renewalType) &&
        Objects.equals(this.reservedSlots, reservationPlan.reservedSlots) &&
        Objects.equals(this.status, reservationPlan.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitment, expiresAt, purchasedAt, renewalType, reservedSlots, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationPlan {\n");
    sb.append("    commitment: ").append(toIndentedString(commitment)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    purchasedAt: ").append(toIndentedString(purchasedAt)).append("\n");
    sb.append("    renewalType: ").append(toIndentedString(renewalType)).append("\n");
    sb.append("    reservedSlots: ").append(toIndentedString(reservedSlots)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Commitment");
    openapiFields.add("ExpiresAt");
    openapiFields.add("PurchasedAt");
    openapiFields.add("RenewalType");
    openapiFields.add("ReservedSlots");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationPlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationPlan is not found in the empty JSON string", ReservationPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Commitment`
      if (jsonObj.get("Commitment") != null && !jsonObj.get("Commitment").isJsonNull()) {
        Commitment.validateJsonElement(jsonObj.get("Commitment"));
      }
      // validate the optional field `ExpiresAt`
      if (jsonObj.get("ExpiresAt") != null && !jsonObj.get("ExpiresAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ExpiresAt"));
      }
      // validate the optional field `PurchasedAt`
      if (jsonObj.get("PurchasedAt") != null && !jsonObj.get("PurchasedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("PurchasedAt"));
      }
      // validate the optional field `RenewalType`
      if (jsonObj.get("RenewalType") != null && !jsonObj.get("RenewalType").isJsonNull()) {
        RenewalType.validateJsonElement(jsonObj.get("RenewalType"));
      }
      // validate the optional field `ReservedSlots`
      if (jsonObj.get("ReservedSlots") != null && !jsonObj.get("ReservedSlots").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ReservedSlots"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ReservationPlanStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationPlan>() {
           @Override
           public void write(JsonWriter out, ReservationPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationPlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationPlan
   * @throws IOException if the JSON string is invalid with respect to ReservationPlan
   */
  public static ReservationPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationPlan.class);
  }

  /**
   * Convert an instance of ReservationPlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

