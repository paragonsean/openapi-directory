/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify whether MediaConvert should use any dynamic range control metadata from your input file. Keep the default value, Custom, to provide dynamic range control values in your job settings. Choose Follow source to use the metadata from your input. Related settings--Use these settings to specify your dynamic range control values: Dynamic range compression line and Dynamic range compression RF. When you keep the value Custom for Dynamic range control and you don&#39;t specify values for the related settings, MediaConvert uses default values for those settings.
 */
@JsonAdapter(Eac3AtmosDynamicRangeControl.Adapter.class)
public enum Eac3AtmosDynamicRangeControl {
  
  SPECIFIED("SPECIFIED"),
  
  INITIALIZE_FROM_SOURCE("INITIALIZE_FROM_SOURCE");

  private String value;

  Eac3AtmosDynamicRangeControl(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Eac3AtmosDynamicRangeControl fromValue(String value) {
    for (Eac3AtmosDynamicRangeControl b : Eac3AtmosDynamicRangeControl.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Eac3AtmosDynamicRangeControl> {
    @Override
    public void write(final JsonWriter jsonWriter, final Eac3AtmosDynamicRangeControl enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Eac3AtmosDynamicRangeControl read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Eac3AtmosDynamicRangeControl.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Eac3AtmosDynamicRangeControl.fromValue(value);
  }
}

