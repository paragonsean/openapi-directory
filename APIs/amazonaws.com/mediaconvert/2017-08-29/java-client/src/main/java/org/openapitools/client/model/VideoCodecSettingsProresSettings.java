/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProresChromaSampling;
import org.openapitools.client.model.ProresCodecProfile;
import org.openapitools.client.model.ProresFramerateControl;
import org.openapitools.client.model.ProresFramerateConversionAlgorithm;
import org.openapitools.client.model.ProresInterlaceMode;
import org.openapitools.client.model.ProresParControl;
import org.openapitools.client.model.ProresScanTypeConversionMode;
import org.openapitools.client.model.ProresSlowPal;
import org.openapitools.client.model.ProresTelecine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoCodecSettingsProresSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoCodecSettingsProresSettings {
  public static final String SERIALIZED_NAME_CHROMA_SAMPLING = "ChromaSampling";
  @SerializedName(SERIALIZED_NAME_CHROMA_SAMPLING)
  private ProresChromaSampling chromaSampling;

  public static final String SERIALIZED_NAME_CODEC_PROFILE = "CodecProfile";
  @SerializedName(SERIALIZED_NAME_CODEC_PROFILE)
  private ProresCodecProfile codecProfile;

  public static final String SERIALIZED_NAME_FRAMERATE_CONTROL = "FramerateControl";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONTROL)
  private ProresFramerateControl framerateControl;

  public static final String SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM = "FramerateConversionAlgorithm";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM)
  private ProresFramerateConversionAlgorithm framerateConversionAlgorithm;

  public static final String SERIALIZED_NAME_FRAMERATE_DENOMINATOR = "FramerateDenominator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_DENOMINATOR)
  private Integer framerateDenominator;

  public static final String SERIALIZED_NAME_FRAMERATE_NUMERATOR = "FramerateNumerator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_NUMERATOR)
  private Integer framerateNumerator;

  public static final String SERIALIZED_NAME_INTERLACE_MODE = "InterlaceMode";
  @SerializedName(SERIALIZED_NAME_INTERLACE_MODE)
  private ProresInterlaceMode interlaceMode;

  public static final String SERIALIZED_NAME_PAR_CONTROL = "ParControl";
  @SerializedName(SERIALIZED_NAME_PAR_CONTROL)
  private ProresParControl parControl;

  public static final String SERIALIZED_NAME_PAR_DENOMINATOR = "ParDenominator";
  @SerializedName(SERIALIZED_NAME_PAR_DENOMINATOR)
  private Integer parDenominator;

  public static final String SERIALIZED_NAME_PAR_NUMERATOR = "ParNumerator";
  @SerializedName(SERIALIZED_NAME_PAR_NUMERATOR)
  private Integer parNumerator;

  public static final String SERIALIZED_NAME_SCAN_TYPE_CONVERSION_MODE = "ScanTypeConversionMode";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE_CONVERSION_MODE)
  private ProresScanTypeConversionMode scanTypeConversionMode;

  public static final String SERIALIZED_NAME_SLOW_PAL = "SlowPal";
  @SerializedName(SERIALIZED_NAME_SLOW_PAL)
  private ProresSlowPal slowPal;

  public static final String SERIALIZED_NAME_TELECINE = "Telecine";
  @SerializedName(SERIALIZED_NAME_TELECINE)
  private ProresTelecine telecine;

  public VideoCodecSettingsProresSettings() {
  }

  public VideoCodecSettingsProresSettings chromaSampling(ProresChromaSampling chromaSampling) {
    this.chromaSampling = chromaSampling;
    return this;
  }

  /**
   * Get chromaSampling
   * @return chromaSampling
   */
  @javax.annotation.Nullable
  public ProresChromaSampling getChromaSampling() {
    return chromaSampling;
  }

  public void setChromaSampling(ProresChromaSampling chromaSampling) {
    this.chromaSampling = chromaSampling;
  }


  public VideoCodecSettingsProresSettings codecProfile(ProresCodecProfile codecProfile) {
    this.codecProfile = codecProfile;
    return this;
  }

  /**
   * Get codecProfile
   * @return codecProfile
   */
  @javax.annotation.Nullable
  public ProresCodecProfile getCodecProfile() {
    return codecProfile;
  }

  public void setCodecProfile(ProresCodecProfile codecProfile) {
    this.codecProfile = codecProfile;
  }


  public VideoCodecSettingsProresSettings framerateControl(ProresFramerateControl framerateControl) {
    this.framerateControl = framerateControl;
    return this;
  }

  /**
   * Get framerateControl
   * @return framerateControl
   */
  @javax.annotation.Nullable
  public ProresFramerateControl getFramerateControl() {
    return framerateControl;
  }

  public void setFramerateControl(ProresFramerateControl framerateControl) {
    this.framerateControl = framerateControl;
  }


  public VideoCodecSettingsProresSettings framerateConversionAlgorithm(ProresFramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
    return this;
  }

  /**
   * Get framerateConversionAlgorithm
   * @return framerateConversionAlgorithm
   */
  @javax.annotation.Nullable
  public ProresFramerateConversionAlgorithm getFramerateConversionAlgorithm() {
    return framerateConversionAlgorithm;
  }

  public void setFramerateConversionAlgorithm(ProresFramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
  }


  public VideoCodecSettingsProresSettings framerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
    return this;
  }

  /**
   * Get framerateDenominator
   * @return framerateDenominator
   */
  @javax.annotation.Nullable
  public Integer getFramerateDenominator() {
    return framerateDenominator;
  }

  public void setFramerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
  }


  public VideoCodecSettingsProresSettings framerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
    return this;
  }

  /**
   * Get framerateNumerator
   * @return framerateNumerator
   */
  @javax.annotation.Nullable
  public Integer getFramerateNumerator() {
    return framerateNumerator;
  }

  public void setFramerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
  }


  public VideoCodecSettingsProresSettings interlaceMode(ProresInterlaceMode interlaceMode) {
    this.interlaceMode = interlaceMode;
    return this;
  }

  /**
   * Get interlaceMode
   * @return interlaceMode
   */
  @javax.annotation.Nullable
  public ProresInterlaceMode getInterlaceMode() {
    return interlaceMode;
  }

  public void setInterlaceMode(ProresInterlaceMode interlaceMode) {
    this.interlaceMode = interlaceMode;
  }


  public VideoCodecSettingsProresSettings parControl(ProresParControl parControl) {
    this.parControl = parControl;
    return this;
  }

  /**
   * Get parControl
   * @return parControl
   */
  @javax.annotation.Nullable
  public ProresParControl getParControl() {
    return parControl;
  }

  public void setParControl(ProresParControl parControl) {
    this.parControl = parControl;
  }


  public VideoCodecSettingsProresSettings parDenominator(Integer parDenominator) {
    this.parDenominator = parDenominator;
    return this;
  }

  /**
   * Get parDenominator
   * @return parDenominator
   */
  @javax.annotation.Nullable
  public Integer getParDenominator() {
    return parDenominator;
  }

  public void setParDenominator(Integer parDenominator) {
    this.parDenominator = parDenominator;
  }


  public VideoCodecSettingsProresSettings parNumerator(Integer parNumerator) {
    this.parNumerator = parNumerator;
    return this;
  }

  /**
   * Get parNumerator
   * @return parNumerator
   */
  @javax.annotation.Nullable
  public Integer getParNumerator() {
    return parNumerator;
  }

  public void setParNumerator(Integer parNumerator) {
    this.parNumerator = parNumerator;
  }


  public VideoCodecSettingsProresSettings scanTypeConversionMode(ProresScanTypeConversionMode scanTypeConversionMode) {
    this.scanTypeConversionMode = scanTypeConversionMode;
    return this;
  }

  /**
   * Get scanTypeConversionMode
   * @return scanTypeConversionMode
   */
  @javax.annotation.Nullable
  public ProresScanTypeConversionMode getScanTypeConversionMode() {
    return scanTypeConversionMode;
  }

  public void setScanTypeConversionMode(ProresScanTypeConversionMode scanTypeConversionMode) {
    this.scanTypeConversionMode = scanTypeConversionMode;
  }


  public VideoCodecSettingsProresSettings slowPal(ProresSlowPal slowPal) {
    this.slowPal = slowPal;
    return this;
  }

  /**
   * Get slowPal
   * @return slowPal
   */
  @javax.annotation.Nullable
  public ProresSlowPal getSlowPal() {
    return slowPal;
  }

  public void setSlowPal(ProresSlowPal slowPal) {
    this.slowPal = slowPal;
  }


  public VideoCodecSettingsProresSettings telecine(ProresTelecine telecine) {
    this.telecine = telecine;
    return this;
  }

  /**
   * Get telecine
   * @return telecine
   */
  @javax.annotation.Nullable
  public ProresTelecine getTelecine() {
    return telecine;
  }

  public void setTelecine(ProresTelecine telecine) {
    this.telecine = telecine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoCodecSettingsProresSettings videoCodecSettingsProresSettings = (VideoCodecSettingsProresSettings) o;
    return Objects.equals(this.chromaSampling, videoCodecSettingsProresSettings.chromaSampling) &&
        Objects.equals(this.codecProfile, videoCodecSettingsProresSettings.codecProfile) &&
        Objects.equals(this.framerateControl, videoCodecSettingsProresSettings.framerateControl) &&
        Objects.equals(this.framerateConversionAlgorithm, videoCodecSettingsProresSettings.framerateConversionAlgorithm) &&
        Objects.equals(this.framerateDenominator, videoCodecSettingsProresSettings.framerateDenominator) &&
        Objects.equals(this.framerateNumerator, videoCodecSettingsProresSettings.framerateNumerator) &&
        Objects.equals(this.interlaceMode, videoCodecSettingsProresSettings.interlaceMode) &&
        Objects.equals(this.parControl, videoCodecSettingsProresSettings.parControl) &&
        Objects.equals(this.parDenominator, videoCodecSettingsProresSettings.parDenominator) &&
        Objects.equals(this.parNumerator, videoCodecSettingsProresSettings.parNumerator) &&
        Objects.equals(this.scanTypeConversionMode, videoCodecSettingsProresSettings.scanTypeConversionMode) &&
        Objects.equals(this.slowPal, videoCodecSettingsProresSettings.slowPal) &&
        Objects.equals(this.telecine, videoCodecSettingsProresSettings.telecine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chromaSampling, codecProfile, framerateControl, framerateConversionAlgorithm, framerateDenominator, framerateNumerator, interlaceMode, parControl, parDenominator, parNumerator, scanTypeConversionMode, slowPal, telecine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoCodecSettingsProresSettings {\n");
    sb.append("    chromaSampling: ").append(toIndentedString(chromaSampling)).append("\n");
    sb.append("    codecProfile: ").append(toIndentedString(codecProfile)).append("\n");
    sb.append("    framerateControl: ").append(toIndentedString(framerateControl)).append("\n");
    sb.append("    framerateConversionAlgorithm: ").append(toIndentedString(framerateConversionAlgorithm)).append("\n");
    sb.append("    framerateDenominator: ").append(toIndentedString(framerateDenominator)).append("\n");
    sb.append("    framerateNumerator: ").append(toIndentedString(framerateNumerator)).append("\n");
    sb.append("    interlaceMode: ").append(toIndentedString(interlaceMode)).append("\n");
    sb.append("    parControl: ").append(toIndentedString(parControl)).append("\n");
    sb.append("    parDenominator: ").append(toIndentedString(parDenominator)).append("\n");
    sb.append("    parNumerator: ").append(toIndentedString(parNumerator)).append("\n");
    sb.append("    scanTypeConversionMode: ").append(toIndentedString(scanTypeConversionMode)).append("\n");
    sb.append("    slowPal: ").append(toIndentedString(slowPal)).append("\n");
    sb.append("    telecine: ").append(toIndentedString(telecine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChromaSampling");
    openapiFields.add("CodecProfile");
    openapiFields.add("FramerateControl");
    openapiFields.add("FramerateConversionAlgorithm");
    openapiFields.add("FramerateDenominator");
    openapiFields.add("FramerateNumerator");
    openapiFields.add("InterlaceMode");
    openapiFields.add("ParControl");
    openapiFields.add("ParDenominator");
    openapiFields.add("ParNumerator");
    openapiFields.add("ScanTypeConversionMode");
    openapiFields.add("SlowPal");
    openapiFields.add("Telecine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoCodecSettingsProresSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoCodecSettingsProresSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoCodecSettingsProresSettings is not found in the empty JSON string", VideoCodecSettingsProresSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoCodecSettingsProresSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoCodecSettingsProresSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChromaSampling`
      if (jsonObj.get("ChromaSampling") != null && !jsonObj.get("ChromaSampling").isJsonNull()) {
        ProresChromaSampling.validateJsonElement(jsonObj.get("ChromaSampling"));
      }
      // validate the optional field `CodecProfile`
      if (jsonObj.get("CodecProfile") != null && !jsonObj.get("CodecProfile").isJsonNull()) {
        ProresCodecProfile.validateJsonElement(jsonObj.get("CodecProfile"));
      }
      // validate the optional field `FramerateControl`
      if (jsonObj.get("FramerateControl") != null && !jsonObj.get("FramerateControl").isJsonNull()) {
        ProresFramerateControl.validateJsonElement(jsonObj.get("FramerateControl"));
      }
      // validate the optional field `FramerateConversionAlgorithm`
      if (jsonObj.get("FramerateConversionAlgorithm") != null && !jsonObj.get("FramerateConversionAlgorithm").isJsonNull()) {
        ProresFramerateConversionAlgorithm.validateJsonElement(jsonObj.get("FramerateConversionAlgorithm"));
      }
      // validate the optional field `FramerateDenominator`
      if (jsonObj.get("FramerateDenominator") != null && !jsonObj.get("FramerateDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateDenominator"));
      }
      // validate the optional field `FramerateNumerator`
      if (jsonObj.get("FramerateNumerator") != null && !jsonObj.get("FramerateNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateNumerator"));
      }
      // validate the optional field `InterlaceMode`
      if (jsonObj.get("InterlaceMode") != null && !jsonObj.get("InterlaceMode").isJsonNull()) {
        ProresInterlaceMode.validateJsonElement(jsonObj.get("InterlaceMode"));
      }
      // validate the optional field `ParControl`
      if (jsonObj.get("ParControl") != null && !jsonObj.get("ParControl").isJsonNull()) {
        ProresParControl.validateJsonElement(jsonObj.get("ParControl"));
      }
      // validate the optional field `ParDenominator`
      if (jsonObj.get("ParDenominator") != null && !jsonObj.get("ParDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParDenominator"));
      }
      // validate the optional field `ParNumerator`
      if (jsonObj.get("ParNumerator") != null && !jsonObj.get("ParNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParNumerator"));
      }
      // validate the optional field `ScanTypeConversionMode`
      if (jsonObj.get("ScanTypeConversionMode") != null && !jsonObj.get("ScanTypeConversionMode").isJsonNull()) {
        ProresScanTypeConversionMode.validateJsonElement(jsonObj.get("ScanTypeConversionMode"));
      }
      // validate the optional field `SlowPal`
      if (jsonObj.get("SlowPal") != null && !jsonObj.get("SlowPal").isJsonNull()) {
        ProresSlowPal.validateJsonElement(jsonObj.get("SlowPal"));
      }
      // validate the optional field `Telecine`
      if (jsonObj.get("Telecine") != null && !jsonObj.get("Telecine").isJsonNull()) {
        ProresTelecine.validateJsonElement(jsonObj.get("Telecine"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoCodecSettingsProresSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoCodecSettingsProresSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoCodecSettingsProresSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoCodecSettingsProresSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoCodecSettingsProresSettings>() {
           @Override
           public void write(JsonWriter out, VideoCodecSettingsProresSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoCodecSettingsProresSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoCodecSettingsProresSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoCodecSettingsProresSettings
   * @throws IOException if the JSON string is invalid with respect to VideoCodecSettingsProresSettings
   */
  public static VideoCodecSettingsProresSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoCodecSettingsProresSettings.class);
  }

  /**
   * Convert an instance of VideoCodecSettingsProresSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

