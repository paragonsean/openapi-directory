/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The Coding mode that you specify determines the number of audio channels and the audio channel layout metadata in your AAC output. Valid coding modes depend on the Rate control mode and Profile that you select. The following list shows the number of audio channels and channel layout for each coding mode. * 1.0 Audio Description (Receiver Mix): One channel, C. Includes audio description data from your stereo input. For more information see ETSI TS 101 154 Annex E. * 1.0 Mono: One channel, C. * 2.0 Stereo: Two channels, L, R. * 5.1 Surround: Six channels, C, L, R, Ls, Rs, LFE.
 */
@JsonAdapter(AacCodingMode.Adapter.class)
public enum AacCodingMode {
  
  AD_RECEIVER_MIX("AD_RECEIVER_MIX"),
  
  CODING_MODE_1_0("CODING_MODE_1_0"),
  
  CODING_MODE_1_1("CODING_MODE_1_1"),
  
  CODING_MODE_2_0("CODING_MODE_2_0"),
  
  CODING_MODE_5_1("CODING_MODE_5_1");

  private String value;

  AacCodingMode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AacCodingMode fromValue(String value) {
    for (AacCodingMode b : AacCodingMode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AacCodingMode> {
    @Override
    public void write(final JsonWriter jsonWriter, final AacCodingMode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AacCodingMode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AacCodingMode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AacCodingMode.fromValue(value);
  }
}

