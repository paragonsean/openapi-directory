/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CaptionSourceConvertPaintOnToPopOn;
import org.openapitools.client.model.FileSourceConvert608To708;
import org.openapitools.client.model.FileSourceSettingsFramerate;
import org.openapitools.client.model.FileSourceTimeDeltaUnits;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CaptionSourceSettingsFileSourceSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CaptionSourceSettingsFileSourceSettings {
  public static final String SERIALIZED_NAME_CONVERT608_TO708 = "Convert608To708";
  @SerializedName(SERIALIZED_NAME_CONVERT608_TO708)
  private FileSourceConvert608To708 convert608To708;

  public static final String SERIALIZED_NAME_CONVERT_PAINT_TO_POP = "ConvertPaintToPop";
  @SerializedName(SERIALIZED_NAME_CONVERT_PAINT_TO_POP)
  private CaptionSourceConvertPaintOnToPopOn convertPaintToPop;

  public static final String SERIALIZED_NAME_FRAMERATE = "Framerate";
  @SerializedName(SERIALIZED_NAME_FRAMERATE)
  private FileSourceSettingsFramerate framerate;

  public static final String SERIALIZED_NAME_SOURCE_FILE = "SourceFile";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE)
  private String sourceFile;

  public static final String SERIALIZED_NAME_TIME_DELTA = "TimeDelta";
  @SerializedName(SERIALIZED_NAME_TIME_DELTA)
  private Integer timeDelta;

  public static final String SERIALIZED_NAME_TIME_DELTA_UNITS = "TimeDeltaUnits";
  @SerializedName(SERIALIZED_NAME_TIME_DELTA_UNITS)
  private FileSourceTimeDeltaUnits timeDeltaUnits;

  public CaptionSourceSettingsFileSourceSettings() {
  }

  public CaptionSourceSettingsFileSourceSettings convert608To708(FileSourceConvert608To708 convert608To708) {
    this.convert608To708 = convert608To708;
    return this;
  }

  /**
   * Get convert608To708
   * @return convert608To708
   */
  @javax.annotation.Nullable
  public FileSourceConvert608To708 getConvert608To708() {
    return convert608To708;
  }

  public void setConvert608To708(FileSourceConvert608To708 convert608To708) {
    this.convert608To708 = convert608To708;
  }


  public CaptionSourceSettingsFileSourceSettings convertPaintToPop(CaptionSourceConvertPaintOnToPopOn convertPaintToPop) {
    this.convertPaintToPop = convertPaintToPop;
    return this;
  }

  /**
   * Get convertPaintToPop
   * @return convertPaintToPop
   */
  @javax.annotation.Nullable
  public CaptionSourceConvertPaintOnToPopOn getConvertPaintToPop() {
    return convertPaintToPop;
  }

  public void setConvertPaintToPop(CaptionSourceConvertPaintOnToPopOn convertPaintToPop) {
    this.convertPaintToPop = convertPaintToPop;
  }


  public CaptionSourceSettingsFileSourceSettings framerate(FileSourceSettingsFramerate framerate) {
    this.framerate = framerate;
    return this;
  }

  /**
   * Get framerate
   * @return framerate
   */
  @javax.annotation.Nullable
  public FileSourceSettingsFramerate getFramerate() {
    return framerate;
  }

  public void setFramerate(FileSourceSettingsFramerate framerate) {
    this.framerate = framerate;
  }


  public CaptionSourceSettingsFileSourceSettings sourceFile(String sourceFile) {
    this.sourceFile = sourceFile;
    return this;
  }

  /**
   * Get sourceFile
   * @return sourceFile
   */
  @javax.annotation.Nullable
  public String getSourceFile() {
    return sourceFile;
  }

  public void setSourceFile(String sourceFile) {
    this.sourceFile = sourceFile;
  }


  public CaptionSourceSettingsFileSourceSettings timeDelta(Integer timeDelta) {
    this.timeDelta = timeDelta;
    return this;
  }

  /**
   * Get timeDelta
   * @return timeDelta
   */
  @javax.annotation.Nullable
  public Integer getTimeDelta() {
    return timeDelta;
  }

  public void setTimeDelta(Integer timeDelta) {
    this.timeDelta = timeDelta;
  }


  public CaptionSourceSettingsFileSourceSettings timeDeltaUnits(FileSourceTimeDeltaUnits timeDeltaUnits) {
    this.timeDeltaUnits = timeDeltaUnits;
    return this;
  }

  /**
   * Get timeDeltaUnits
   * @return timeDeltaUnits
   */
  @javax.annotation.Nullable
  public FileSourceTimeDeltaUnits getTimeDeltaUnits() {
    return timeDeltaUnits;
  }

  public void setTimeDeltaUnits(FileSourceTimeDeltaUnits timeDeltaUnits) {
    this.timeDeltaUnits = timeDeltaUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaptionSourceSettingsFileSourceSettings captionSourceSettingsFileSourceSettings = (CaptionSourceSettingsFileSourceSettings) o;
    return Objects.equals(this.convert608To708, captionSourceSettingsFileSourceSettings.convert608To708) &&
        Objects.equals(this.convertPaintToPop, captionSourceSettingsFileSourceSettings.convertPaintToPop) &&
        Objects.equals(this.framerate, captionSourceSettingsFileSourceSettings.framerate) &&
        Objects.equals(this.sourceFile, captionSourceSettingsFileSourceSettings.sourceFile) &&
        Objects.equals(this.timeDelta, captionSourceSettingsFileSourceSettings.timeDelta) &&
        Objects.equals(this.timeDeltaUnits, captionSourceSettingsFileSourceSettings.timeDeltaUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(convert608To708, convertPaintToPop, framerate, sourceFile, timeDelta, timeDeltaUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaptionSourceSettingsFileSourceSettings {\n");
    sb.append("    convert608To708: ").append(toIndentedString(convert608To708)).append("\n");
    sb.append("    convertPaintToPop: ").append(toIndentedString(convertPaintToPop)).append("\n");
    sb.append("    framerate: ").append(toIndentedString(framerate)).append("\n");
    sb.append("    sourceFile: ").append(toIndentedString(sourceFile)).append("\n");
    sb.append("    timeDelta: ").append(toIndentedString(timeDelta)).append("\n");
    sb.append("    timeDeltaUnits: ").append(toIndentedString(timeDeltaUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Convert608To708");
    openapiFields.add("ConvertPaintToPop");
    openapiFields.add("Framerate");
    openapiFields.add("SourceFile");
    openapiFields.add("TimeDelta");
    openapiFields.add("TimeDeltaUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CaptionSourceSettingsFileSourceSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaptionSourceSettingsFileSourceSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaptionSourceSettingsFileSourceSettings is not found in the empty JSON string", CaptionSourceSettingsFileSourceSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaptionSourceSettingsFileSourceSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaptionSourceSettingsFileSourceSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Convert608To708`
      if (jsonObj.get("Convert608To708") != null && !jsonObj.get("Convert608To708").isJsonNull()) {
        FileSourceConvert608To708.validateJsonElement(jsonObj.get("Convert608To708"));
      }
      // validate the optional field `ConvertPaintToPop`
      if (jsonObj.get("ConvertPaintToPop") != null && !jsonObj.get("ConvertPaintToPop").isJsonNull()) {
        CaptionSourceConvertPaintOnToPopOn.validateJsonElement(jsonObj.get("ConvertPaintToPop"));
      }
      // validate the optional field `Framerate`
      if (jsonObj.get("Framerate") != null && !jsonObj.get("Framerate").isJsonNull()) {
        FileSourceSettingsFramerate.validateJsonElement(jsonObj.get("Framerate"));
      }
      // validate the optional field `SourceFile`
      if (jsonObj.get("SourceFile") != null && !jsonObj.get("SourceFile").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceFile"));
      }
      // validate the optional field `TimeDelta`
      if (jsonObj.get("TimeDelta") != null && !jsonObj.get("TimeDelta").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimeDelta"));
      }
      // validate the optional field `TimeDeltaUnits`
      if (jsonObj.get("TimeDeltaUnits") != null && !jsonObj.get("TimeDeltaUnits").isJsonNull()) {
        FileSourceTimeDeltaUnits.validateJsonElement(jsonObj.get("TimeDeltaUnits"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaptionSourceSettingsFileSourceSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaptionSourceSettingsFileSourceSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaptionSourceSettingsFileSourceSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaptionSourceSettingsFileSourceSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CaptionSourceSettingsFileSourceSettings>() {
           @Override
           public void write(JsonWriter out, CaptionSourceSettingsFileSourceSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaptionSourceSettingsFileSourceSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CaptionSourceSettingsFileSourceSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CaptionSourceSettingsFileSourceSettings
   * @throws IOException if the JSON string is invalid with respect to CaptionSourceSettingsFileSourceSettings
   */
  public static CaptionSourceSettingsFileSourceSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaptionSourceSettingsFileSourceSettings.class);
  }

  /**
   * Convert an instance of CaptionSourceSettingsFileSourceSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

