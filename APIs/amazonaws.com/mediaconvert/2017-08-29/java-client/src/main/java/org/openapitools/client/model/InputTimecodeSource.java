/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Use this Timecode source setting, located under the input settings, to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded to use the timecodes in your input video. Choose Start at zero to start the first frame at zero. Choose Specified start to start the first frame at the timecode that you specify in the setting Start timecode. If you don&#39;t specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
 */
@JsonAdapter(InputTimecodeSource.Adapter.class)
public enum InputTimecodeSource {
  
  EMBEDDED("EMBEDDED"),
  
  ZEROBASED("ZEROBASED"),
  
  SPECIFIEDSTART("SPECIFIEDSTART");

  private String value;

  InputTimecodeSource(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static InputTimecodeSource fromValue(String value) {
    for (InputTimecodeSource b : InputTimecodeSource.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<InputTimecodeSource> {
    @Override
    public void write(final JsonWriter jsonWriter, final InputTimecodeSource enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public InputTimecodeSource read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return InputTimecodeSource.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    InputTimecodeSource.fromValue(value);
  }
}

