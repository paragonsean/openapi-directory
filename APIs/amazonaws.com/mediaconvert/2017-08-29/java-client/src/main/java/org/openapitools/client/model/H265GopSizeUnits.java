/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify how the transcoder determines GOP size for this output. We recommend that you have the transcoder automatically choose this value for you based on characteristics of your input video. To enable this automatic behavior, choose Auto and and leave GOP size blank. By default, if you don&#39;t specify GOP mode control, MediaConvert will use automatic behavior. If your output group specifies HLS, DASH, or CMAF, set GOP mode control to Auto and leave GOP size blank in each output in your output group. To explicitly specify the GOP length, choose Specified, frames or Specified, seconds and then provide the GOP length in the related setting GOP size.
 */
@JsonAdapter(H265GopSizeUnits.Adapter.class)
public enum H265GopSizeUnits {
  
  FRAMES("FRAMES"),
  
  SECONDS("SECONDS"),
  
  AUTO("AUTO");

  private String value;

  H265GopSizeUnits(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H265GopSizeUnits fromValue(String value) {
    for (H265GopSizeUnits b : H265GopSizeUnits.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H265GopSizeUnits> {
    @Override
    public void write(final JsonWriter jsonWriter, final H265GopSizeUnits enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H265GopSizeUnits read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H265GopSizeUnits.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H265GopSizeUnits.fromValue(value);
  }
}

