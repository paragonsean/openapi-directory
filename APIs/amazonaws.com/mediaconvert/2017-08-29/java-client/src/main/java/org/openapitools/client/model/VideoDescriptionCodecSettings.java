/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoCodec;
import org.openapitools.client.model.VideoCodecSettingsAv1Settings;
import org.openapitools.client.model.VideoCodecSettingsAvcIntraSettings;
import org.openapitools.client.model.VideoCodecSettingsFrameCaptureSettings;
import org.openapitools.client.model.VideoCodecSettingsH264Settings;
import org.openapitools.client.model.VideoCodecSettingsH265Settings;
import org.openapitools.client.model.VideoCodecSettingsMpeg2Settings;
import org.openapitools.client.model.VideoCodecSettingsProresSettings;
import org.openapitools.client.model.VideoCodecSettingsVc3Settings;
import org.openapitools.client.model.VideoCodecSettingsVp8Settings;
import org.openapitools.client.model.VideoCodecSettingsVp9Settings;
import org.openapitools.client.model.VideoCodecSettingsXavcSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoDescriptionCodecSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoDescriptionCodecSettings {
  public static final String SERIALIZED_NAME_AV1_SETTINGS = "Av1Settings";
  @SerializedName(SERIALIZED_NAME_AV1_SETTINGS)
  private VideoCodecSettingsAv1Settings av1Settings;

  public static final String SERIALIZED_NAME_AVC_INTRA_SETTINGS = "AvcIntraSettings";
  @SerializedName(SERIALIZED_NAME_AVC_INTRA_SETTINGS)
  private VideoCodecSettingsAvcIntraSettings avcIntraSettings;

  public static final String SERIALIZED_NAME_CODEC = "Codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private VideoCodec codec;

  public static final String SERIALIZED_NAME_FRAME_CAPTURE_SETTINGS = "FrameCaptureSettings";
  @SerializedName(SERIALIZED_NAME_FRAME_CAPTURE_SETTINGS)
  private VideoCodecSettingsFrameCaptureSettings frameCaptureSettings;

  public static final String SERIALIZED_NAME_H264_SETTINGS = "H264Settings";
  @SerializedName(SERIALIZED_NAME_H264_SETTINGS)
  private VideoCodecSettingsH264Settings h264Settings;

  public static final String SERIALIZED_NAME_H265_SETTINGS = "H265Settings";
  @SerializedName(SERIALIZED_NAME_H265_SETTINGS)
  private VideoCodecSettingsH265Settings h265Settings;

  public static final String SERIALIZED_NAME_MPEG2_SETTINGS = "Mpeg2Settings";
  @SerializedName(SERIALIZED_NAME_MPEG2_SETTINGS)
  private VideoCodecSettingsMpeg2Settings mpeg2Settings;

  public static final String SERIALIZED_NAME_PRORES_SETTINGS = "ProresSettings";
  @SerializedName(SERIALIZED_NAME_PRORES_SETTINGS)
  private VideoCodecSettingsProresSettings proresSettings;

  public static final String SERIALIZED_NAME_VC3_SETTINGS = "Vc3Settings";
  @SerializedName(SERIALIZED_NAME_VC3_SETTINGS)
  private VideoCodecSettingsVc3Settings vc3Settings;

  public static final String SERIALIZED_NAME_VP8_SETTINGS = "Vp8Settings";
  @SerializedName(SERIALIZED_NAME_VP8_SETTINGS)
  private VideoCodecSettingsVp8Settings vp8Settings;

  public static final String SERIALIZED_NAME_VP9_SETTINGS = "Vp9Settings";
  @SerializedName(SERIALIZED_NAME_VP9_SETTINGS)
  private VideoCodecSettingsVp9Settings vp9Settings;

  public static final String SERIALIZED_NAME_XAVC_SETTINGS = "XavcSettings";
  @SerializedName(SERIALIZED_NAME_XAVC_SETTINGS)
  private VideoCodecSettingsXavcSettings xavcSettings;

  public VideoDescriptionCodecSettings() {
  }

  public VideoDescriptionCodecSettings av1Settings(VideoCodecSettingsAv1Settings av1Settings) {
    this.av1Settings = av1Settings;
    return this;
  }

  /**
   * Get av1Settings
   * @return av1Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsAv1Settings getAv1Settings() {
    return av1Settings;
  }

  public void setAv1Settings(VideoCodecSettingsAv1Settings av1Settings) {
    this.av1Settings = av1Settings;
  }


  public VideoDescriptionCodecSettings avcIntraSettings(VideoCodecSettingsAvcIntraSettings avcIntraSettings) {
    this.avcIntraSettings = avcIntraSettings;
    return this;
  }

  /**
   * Get avcIntraSettings
   * @return avcIntraSettings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsAvcIntraSettings getAvcIntraSettings() {
    return avcIntraSettings;
  }

  public void setAvcIntraSettings(VideoCodecSettingsAvcIntraSettings avcIntraSettings) {
    this.avcIntraSettings = avcIntraSettings;
  }


  public VideoDescriptionCodecSettings codec(VideoCodec codec) {
    this.codec = codec;
    return this;
  }

  /**
   * Get codec
   * @return codec
   */
  @javax.annotation.Nullable
  public VideoCodec getCodec() {
    return codec;
  }

  public void setCodec(VideoCodec codec) {
    this.codec = codec;
  }


  public VideoDescriptionCodecSettings frameCaptureSettings(VideoCodecSettingsFrameCaptureSettings frameCaptureSettings) {
    this.frameCaptureSettings = frameCaptureSettings;
    return this;
  }

  /**
   * Get frameCaptureSettings
   * @return frameCaptureSettings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsFrameCaptureSettings getFrameCaptureSettings() {
    return frameCaptureSettings;
  }

  public void setFrameCaptureSettings(VideoCodecSettingsFrameCaptureSettings frameCaptureSettings) {
    this.frameCaptureSettings = frameCaptureSettings;
  }


  public VideoDescriptionCodecSettings h264Settings(VideoCodecSettingsH264Settings h264Settings) {
    this.h264Settings = h264Settings;
    return this;
  }

  /**
   * Get h264Settings
   * @return h264Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsH264Settings getH264Settings() {
    return h264Settings;
  }

  public void setH264Settings(VideoCodecSettingsH264Settings h264Settings) {
    this.h264Settings = h264Settings;
  }


  public VideoDescriptionCodecSettings h265Settings(VideoCodecSettingsH265Settings h265Settings) {
    this.h265Settings = h265Settings;
    return this;
  }

  /**
   * Get h265Settings
   * @return h265Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsH265Settings getH265Settings() {
    return h265Settings;
  }

  public void setH265Settings(VideoCodecSettingsH265Settings h265Settings) {
    this.h265Settings = h265Settings;
  }


  public VideoDescriptionCodecSettings mpeg2Settings(VideoCodecSettingsMpeg2Settings mpeg2Settings) {
    this.mpeg2Settings = mpeg2Settings;
    return this;
  }

  /**
   * Get mpeg2Settings
   * @return mpeg2Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsMpeg2Settings getMpeg2Settings() {
    return mpeg2Settings;
  }

  public void setMpeg2Settings(VideoCodecSettingsMpeg2Settings mpeg2Settings) {
    this.mpeg2Settings = mpeg2Settings;
  }


  public VideoDescriptionCodecSettings proresSettings(VideoCodecSettingsProresSettings proresSettings) {
    this.proresSettings = proresSettings;
    return this;
  }

  /**
   * Get proresSettings
   * @return proresSettings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsProresSettings getProresSettings() {
    return proresSettings;
  }

  public void setProresSettings(VideoCodecSettingsProresSettings proresSettings) {
    this.proresSettings = proresSettings;
  }


  public VideoDescriptionCodecSettings vc3Settings(VideoCodecSettingsVc3Settings vc3Settings) {
    this.vc3Settings = vc3Settings;
    return this;
  }

  /**
   * Get vc3Settings
   * @return vc3Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsVc3Settings getVc3Settings() {
    return vc3Settings;
  }

  public void setVc3Settings(VideoCodecSettingsVc3Settings vc3Settings) {
    this.vc3Settings = vc3Settings;
  }


  public VideoDescriptionCodecSettings vp8Settings(VideoCodecSettingsVp8Settings vp8Settings) {
    this.vp8Settings = vp8Settings;
    return this;
  }

  /**
   * Get vp8Settings
   * @return vp8Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsVp8Settings getVp8Settings() {
    return vp8Settings;
  }

  public void setVp8Settings(VideoCodecSettingsVp8Settings vp8Settings) {
    this.vp8Settings = vp8Settings;
  }


  public VideoDescriptionCodecSettings vp9Settings(VideoCodecSettingsVp9Settings vp9Settings) {
    this.vp9Settings = vp9Settings;
    return this;
  }

  /**
   * Get vp9Settings
   * @return vp9Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsVp9Settings getVp9Settings() {
    return vp9Settings;
  }

  public void setVp9Settings(VideoCodecSettingsVp9Settings vp9Settings) {
    this.vp9Settings = vp9Settings;
  }


  public VideoDescriptionCodecSettings xavcSettings(VideoCodecSettingsXavcSettings xavcSettings) {
    this.xavcSettings = xavcSettings;
    return this;
  }

  /**
   * Get xavcSettings
   * @return xavcSettings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsXavcSettings getXavcSettings() {
    return xavcSettings;
  }

  public void setXavcSettings(VideoCodecSettingsXavcSettings xavcSettings) {
    this.xavcSettings = xavcSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoDescriptionCodecSettings videoDescriptionCodecSettings = (VideoDescriptionCodecSettings) o;
    return Objects.equals(this.av1Settings, videoDescriptionCodecSettings.av1Settings) &&
        Objects.equals(this.avcIntraSettings, videoDescriptionCodecSettings.avcIntraSettings) &&
        Objects.equals(this.codec, videoDescriptionCodecSettings.codec) &&
        Objects.equals(this.frameCaptureSettings, videoDescriptionCodecSettings.frameCaptureSettings) &&
        Objects.equals(this.h264Settings, videoDescriptionCodecSettings.h264Settings) &&
        Objects.equals(this.h265Settings, videoDescriptionCodecSettings.h265Settings) &&
        Objects.equals(this.mpeg2Settings, videoDescriptionCodecSettings.mpeg2Settings) &&
        Objects.equals(this.proresSettings, videoDescriptionCodecSettings.proresSettings) &&
        Objects.equals(this.vc3Settings, videoDescriptionCodecSettings.vc3Settings) &&
        Objects.equals(this.vp8Settings, videoDescriptionCodecSettings.vp8Settings) &&
        Objects.equals(this.vp9Settings, videoDescriptionCodecSettings.vp9Settings) &&
        Objects.equals(this.xavcSettings, videoDescriptionCodecSettings.xavcSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(av1Settings, avcIntraSettings, codec, frameCaptureSettings, h264Settings, h265Settings, mpeg2Settings, proresSettings, vc3Settings, vp8Settings, vp9Settings, xavcSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoDescriptionCodecSettings {\n");
    sb.append("    av1Settings: ").append(toIndentedString(av1Settings)).append("\n");
    sb.append("    avcIntraSettings: ").append(toIndentedString(avcIntraSettings)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    frameCaptureSettings: ").append(toIndentedString(frameCaptureSettings)).append("\n");
    sb.append("    h264Settings: ").append(toIndentedString(h264Settings)).append("\n");
    sb.append("    h265Settings: ").append(toIndentedString(h265Settings)).append("\n");
    sb.append("    mpeg2Settings: ").append(toIndentedString(mpeg2Settings)).append("\n");
    sb.append("    proresSettings: ").append(toIndentedString(proresSettings)).append("\n");
    sb.append("    vc3Settings: ").append(toIndentedString(vc3Settings)).append("\n");
    sb.append("    vp8Settings: ").append(toIndentedString(vp8Settings)).append("\n");
    sb.append("    vp9Settings: ").append(toIndentedString(vp9Settings)).append("\n");
    sb.append("    xavcSettings: ").append(toIndentedString(xavcSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Av1Settings");
    openapiFields.add("AvcIntraSettings");
    openapiFields.add("Codec");
    openapiFields.add("FrameCaptureSettings");
    openapiFields.add("H264Settings");
    openapiFields.add("H265Settings");
    openapiFields.add("Mpeg2Settings");
    openapiFields.add("ProresSettings");
    openapiFields.add("Vc3Settings");
    openapiFields.add("Vp8Settings");
    openapiFields.add("Vp9Settings");
    openapiFields.add("XavcSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoDescriptionCodecSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoDescriptionCodecSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoDescriptionCodecSettings is not found in the empty JSON string", VideoDescriptionCodecSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoDescriptionCodecSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoDescriptionCodecSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Av1Settings`
      if (jsonObj.get("Av1Settings") != null && !jsonObj.get("Av1Settings").isJsonNull()) {
        VideoCodecSettingsAv1Settings.validateJsonElement(jsonObj.get("Av1Settings"));
      }
      // validate the optional field `AvcIntraSettings`
      if (jsonObj.get("AvcIntraSettings") != null && !jsonObj.get("AvcIntraSettings").isJsonNull()) {
        VideoCodecSettingsAvcIntraSettings.validateJsonElement(jsonObj.get("AvcIntraSettings"));
      }
      // validate the optional field `Codec`
      if (jsonObj.get("Codec") != null && !jsonObj.get("Codec").isJsonNull()) {
        VideoCodec.validateJsonElement(jsonObj.get("Codec"));
      }
      // validate the optional field `FrameCaptureSettings`
      if (jsonObj.get("FrameCaptureSettings") != null && !jsonObj.get("FrameCaptureSettings").isJsonNull()) {
        VideoCodecSettingsFrameCaptureSettings.validateJsonElement(jsonObj.get("FrameCaptureSettings"));
      }
      // validate the optional field `H264Settings`
      if (jsonObj.get("H264Settings") != null && !jsonObj.get("H264Settings").isJsonNull()) {
        VideoCodecSettingsH264Settings.validateJsonElement(jsonObj.get("H264Settings"));
      }
      // validate the optional field `H265Settings`
      if (jsonObj.get("H265Settings") != null && !jsonObj.get("H265Settings").isJsonNull()) {
        VideoCodecSettingsH265Settings.validateJsonElement(jsonObj.get("H265Settings"));
      }
      // validate the optional field `Mpeg2Settings`
      if (jsonObj.get("Mpeg2Settings") != null && !jsonObj.get("Mpeg2Settings").isJsonNull()) {
        VideoCodecSettingsMpeg2Settings.validateJsonElement(jsonObj.get("Mpeg2Settings"));
      }
      // validate the optional field `ProresSettings`
      if (jsonObj.get("ProresSettings") != null && !jsonObj.get("ProresSettings").isJsonNull()) {
        VideoCodecSettingsProresSettings.validateJsonElement(jsonObj.get("ProresSettings"));
      }
      // validate the optional field `Vc3Settings`
      if (jsonObj.get("Vc3Settings") != null && !jsonObj.get("Vc3Settings").isJsonNull()) {
        VideoCodecSettingsVc3Settings.validateJsonElement(jsonObj.get("Vc3Settings"));
      }
      // validate the optional field `Vp8Settings`
      if (jsonObj.get("Vp8Settings") != null && !jsonObj.get("Vp8Settings").isJsonNull()) {
        VideoCodecSettingsVp8Settings.validateJsonElement(jsonObj.get("Vp8Settings"));
      }
      // validate the optional field `Vp9Settings`
      if (jsonObj.get("Vp9Settings") != null && !jsonObj.get("Vp9Settings").isJsonNull()) {
        VideoCodecSettingsVp9Settings.validateJsonElement(jsonObj.get("Vp9Settings"));
      }
      // validate the optional field `XavcSettings`
      if (jsonObj.get("XavcSettings") != null && !jsonObj.get("XavcSettings").isJsonNull()) {
        VideoCodecSettingsXavcSettings.validateJsonElement(jsonObj.get("XavcSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoDescriptionCodecSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoDescriptionCodecSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoDescriptionCodecSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoDescriptionCodecSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoDescriptionCodecSettings>() {
           @Override
           public void write(JsonWriter out, VideoDescriptionCodecSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoDescriptionCodecSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoDescriptionCodecSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoDescriptionCodecSettings
   * @throws IOException if the JSON string is invalid with respect to VideoDescriptionCodecSettings
   */
  public static VideoDescriptionCodecSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoDescriptionCodecSettings.class);
  }

  /**
   * Convert an instance of VideoDescriptionCodecSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

