/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Inserts segmentation markers at each segmentation_time period. rai_segstart sets the Random Access Indicator bit in the adaptation field. rai_adapt sets the RAI bit and adds the current timecode in the private data bytes. psi_segstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebp_legacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
 */
@JsonAdapter(M2tsSegmentationMarkers.Adapter.class)
public enum M2tsSegmentationMarkers {
  
  NONE("NONE"),
  
  RAI_SEGSTART("RAI_SEGSTART"),
  
  RAI_ADAPT("RAI_ADAPT"),
  
  PSI_SEGSTART("PSI_SEGSTART"),
  
  EBP("EBP"),
  
  EBP_LEGACY("EBP_LEGACY");

  private String value;

  M2tsSegmentationMarkers(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static M2tsSegmentationMarkers fromValue(String value) {
    for (M2tsSegmentationMarkers b : M2tsSegmentationMarkers.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<M2tsSegmentationMarkers> {
    @Override
    public void write(final JsonWriter jsonWriter, final M2tsSegmentationMarkers enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public M2tsSegmentationMarkers read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return M2tsSegmentationMarkers.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    M2tsSegmentationMarkers.fromValue(value);
  }
}

