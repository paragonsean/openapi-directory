/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify how MediaConvert maps brightness and colors from your HDR input to your SDR output. The mode that you select represents a creative choice, with different tradeoffs in the details and tones of your output. To maintain details in bright or saturated areas of your output: Choose Preserve details. For some sources, your SDR output may look less bright and less saturated when compared to your HDR source. MediaConvert automatically applies this mode for HLG sources, regardless of your choice. For a bright and saturated output: Choose Vibrant. We recommend that you choose this mode when any of your source content is HDR10, and for the best results when it is mastered for 1000 nits. You may notice loss of details in bright or saturated areas of your output. HDR to SDR tone mapping has no effect when your input is SDR.
 */
@JsonAdapter(HDRToSDRToneMapper.Adapter.class)
public enum HDRToSDRToneMapper {
  
  PRESERVE_DETAILS("PRESERVE_DETAILS"),
  
  VIBRANT("VIBRANT");

  private String value;

  HDRToSDRToneMapper(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static HDRToSDRToneMapper fromValue(String value) {
    for (HDRToSDRToneMapper b : HDRToSDRToneMapper.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<HDRToSDRToneMapper> {
    @Override
    public void write(final JsonWriter jsonWriter, final HDRToSDRToneMapper enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public HDRToSDRToneMapper read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return HDRToSDRToneMapper.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    HDRToSDRToneMapper.fromValue(value);
  }
}

