/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoPreprocessorColorCorrector;
import org.openapitools.client.model.VideoPreprocessorDeinterlacer;
import org.openapitools.client.model.VideoPreprocessorDolbyVision;
import org.openapitools.client.model.VideoPreprocessorHdr10Plus;
import org.openapitools.client.model.VideoPreprocessorImageInserter;
import org.openapitools.client.model.VideoPreprocessorNoiseReducer;
import org.openapitools.client.model.VideoPreprocessorPartnerWatermarking;
import org.openapitools.client.model.VideoPreprocessorTimecodeBurnin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Find additional transcoding features under Preprocessors. Enable the features at each output individually. These features are disabled by default.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoPreprocessor {
  public static final String SERIALIZED_NAME_COLOR_CORRECTOR = "ColorCorrector";
  @SerializedName(SERIALIZED_NAME_COLOR_CORRECTOR)
  private VideoPreprocessorColorCorrector colorCorrector;

  public static final String SERIALIZED_NAME_DEINTERLACER = "Deinterlacer";
  @SerializedName(SERIALIZED_NAME_DEINTERLACER)
  private VideoPreprocessorDeinterlacer deinterlacer;

  public static final String SERIALIZED_NAME_DOLBY_VISION = "DolbyVision";
  @SerializedName(SERIALIZED_NAME_DOLBY_VISION)
  private VideoPreprocessorDolbyVision dolbyVision;

  public static final String SERIALIZED_NAME_HDR10_PLUS = "Hdr10Plus";
  @SerializedName(SERIALIZED_NAME_HDR10_PLUS)
  private VideoPreprocessorHdr10Plus hdr10Plus;

  public static final String SERIALIZED_NAME_IMAGE_INSERTER = "ImageInserter";
  @SerializedName(SERIALIZED_NAME_IMAGE_INSERTER)
  private VideoPreprocessorImageInserter imageInserter;

  public static final String SERIALIZED_NAME_NOISE_REDUCER = "NoiseReducer";
  @SerializedName(SERIALIZED_NAME_NOISE_REDUCER)
  private VideoPreprocessorNoiseReducer noiseReducer;

  public static final String SERIALIZED_NAME_PARTNER_WATERMARKING = "PartnerWatermarking";
  @SerializedName(SERIALIZED_NAME_PARTNER_WATERMARKING)
  private VideoPreprocessorPartnerWatermarking partnerWatermarking;

  public static final String SERIALIZED_NAME_TIMECODE_BURNIN = "TimecodeBurnin";
  @SerializedName(SERIALIZED_NAME_TIMECODE_BURNIN)
  private VideoPreprocessorTimecodeBurnin timecodeBurnin;

  public VideoPreprocessor() {
  }

  public VideoPreprocessor colorCorrector(VideoPreprocessorColorCorrector colorCorrector) {
    this.colorCorrector = colorCorrector;
    return this;
  }

  /**
   * Get colorCorrector
   * @return colorCorrector
   */
  @javax.annotation.Nullable
  public VideoPreprocessorColorCorrector getColorCorrector() {
    return colorCorrector;
  }

  public void setColorCorrector(VideoPreprocessorColorCorrector colorCorrector) {
    this.colorCorrector = colorCorrector;
  }


  public VideoPreprocessor deinterlacer(VideoPreprocessorDeinterlacer deinterlacer) {
    this.deinterlacer = deinterlacer;
    return this;
  }

  /**
   * Get deinterlacer
   * @return deinterlacer
   */
  @javax.annotation.Nullable
  public VideoPreprocessorDeinterlacer getDeinterlacer() {
    return deinterlacer;
  }

  public void setDeinterlacer(VideoPreprocessorDeinterlacer deinterlacer) {
    this.deinterlacer = deinterlacer;
  }


  public VideoPreprocessor dolbyVision(VideoPreprocessorDolbyVision dolbyVision) {
    this.dolbyVision = dolbyVision;
    return this;
  }

  /**
   * Get dolbyVision
   * @return dolbyVision
   */
  @javax.annotation.Nullable
  public VideoPreprocessorDolbyVision getDolbyVision() {
    return dolbyVision;
  }

  public void setDolbyVision(VideoPreprocessorDolbyVision dolbyVision) {
    this.dolbyVision = dolbyVision;
  }


  public VideoPreprocessor hdr10Plus(VideoPreprocessorHdr10Plus hdr10Plus) {
    this.hdr10Plus = hdr10Plus;
    return this;
  }

  /**
   * Get hdr10Plus
   * @return hdr10Plus
   */
  @javax.annotation.Nullable
  public VideoPreprocessorHdr10Plus getHdr10Plus() {
    return hdr10Plus;
  }

  public void setHdr10Plus(VideoPreprocessorHdr10Plus hdr10Plus) {
    this.hdr10Plus = hdr10Plus;
  }


  public VideoPreprocessor imageInserter(VideoPreprocessorImageInserter imageInserter) {
    this.imageInserter = imageInserter;
    return this;
  }

  /**
   * Get imageInserter
   * @return imageInserter
   */
  @javax.annotation.Nullable
  public VideoPreprocessorImageInserter getImageInserter() {
    return imageInserter;
  }

  public void setImageInserter(VideoPreprocessorImageInserter imageInserter) {
    this.imageInserter = imageInserter;
  }


  public VideoPreprocessor noiseReducer(VideoPreprocessorNoiseReducer noiseReducer) {
    this.noiseReducer = noiseReducer;
    return this;
  }

  /**
   * Get noiseReducer
   * @return noiseReducer
   */
  @javax.annotation.Nullable
  public VideoPreprocessorNoiseReducer getNoiseReducer() {
    return noiseReducer;
  }

  public void setNoiseReducer(VideoPreprocessorNoiseReducer noiseReducer) {
    this.noiseReducer = noiseReducer;
  }


  public VideoPreprocessor partnerWatermarking(VideoPreprocessorPartnerWatermarking partnerWatermarking) {
    this.partnerWatermarking = partnerWatermarking;
    return this;
  }

  /**
   * Get partnerWatermarking
   * @return partnerWatermarking
   */
  @javax.annotation.Nullable
  public VideoPreprocessorPartnerWatermarking getPartnerWatermarking() {
    return partnerWatermarking;
  }

  public void setPartnerWatermarking(VideoPreprocessorPartnerWatermarking partnerWatermarking) {
    this.partnerWatermarking = partnerWatermarking;
  }


  public VideoPreprocessor timecodeBurnin(VideoPreprocessorTimecodeBurnin timecodeBurnin) {
    this.timecodeBurnin = timecodeBurnin;
    return this;
  }

  /**
   * Get timecodeBurnin
   * @return timecodeBurnin
   */
  @javax.annotation.Nullable
  public VideoPreprocessorTimecodeBurnin getTimecodeBurnin() {
    return timecodeBurnin;
  }

  public void setTimecodeBurnin(VideoPreprocessorTimecodeBurnin timecodeBurnin) {
    this.timecodeBurnin = timecodeBurnin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoPreprocessor videoPreprocessor = (VideoPreprocessor) o;
    return Objects.equals(this.colorCorrector, videoPreprocessor.colorCorrector) &&
        Objects.equals(this.deinterlacer, videoPreprocessor.deinterlacer) &&
        Objects.equals(this.dolbyVision, videoPreprocessor.dolbyVision) &&
        Objects.equals(this.hdr10Plus, videoPreprocessor.hdr10Plus) &&
        Objects.equals(this.imageInserter, videoPreprocessor.imageInserter) &&
        Objects.equals(this.noiseReducer, videoPreprocessor.noiseReducer) &&
        Objects.equals(this.partnerWatermarking, videoPreprocessor.partnerWatermarking) &&
        Objects.equals(this.timecodeBurnin, videoPreprocessor.timecodeBurnin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorCorrector, deinterlacer, dolbyVision, hdr10Plus, imageInserter, noiseReducer, partnerWatermarking, timecodeBurnin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoPreprocessor {\n");
    sb.append("    colorCorrector: ").append(toIndentedString(colorCorrector)).append("\n");
    sb.append("    deinterlacer: ").append(toIndentedString(deinterlacer)).append("\n");
    sb.append("    dolbyVision: ").append(toIndentedString(dolbyVision)).append("\n");
    sb.append("    hdr10Plus: ").append(toIndentedString(hdr10Plus)).append("\n");
    sb.append("    imageInserter: ").append(toIndentedString(imageInserter)).append("\n");
    sb.append("    noiseReducer: ").append(toIndentedString(noiseReducer)).append("\n");
    sb.append("    partnerWatermarking: ").append(toIndentedString(partnerWatermarking)).append("\n");
    sb.append("    timecodeBurnin: ").append(toIndentedString(timecodeBurnin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ColorCorrector");
    openapiFields.add("Deinterlacer");
    openapiFields.add("DolbyVision");
    openapiFields.add("Hdr10Plus");
    openapiFields.add("ImageInserter");
    openapiFields.add("NoiseReducer");
    openapiFields.add("PartnerWatermarking");
    openapiFields.add("TimecodeBurnin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoPreprocessor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoPreprocessor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoPreprocessor is not found in the empty JSON string", VideoPreprocessor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoPreprocessor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoPreprocessor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ColorCorrector`
      if (jsonObj.get("ColorCorrector") != null && !jsonObj.get("ColorCorrector").isJsonNull()) {
        VideoPreprocessorColorCorrector.validateJsonElement(jsonObj.get("ColorCorrector"));
      }
      // validate the optional field `Deinterlacer`
      if (jsonObj.get("Deinterlacer") != null && !jsonObj.get("Deinterlacer").isJsonNull()) {
        VideoPreprocessorDeinterlacer.validateJsonElement(jsonObj.get("Deinterlacer"));
      }
      // validate the optional field `DolbyVision`
      if (jsonObj.get("DolbyVision") != null && !jsonObj.get("DolbyVision").isJsonNull()) {
        VideoPreprocessorDolbyVision.validateJsonElement(jsonObj.get("DolbyVision"));
      }
      // validate the optional field `Hdr10Plus`
      if (jsonObj.get("Hdr10Plus") != null && !jsonObj.get("Hdr10Plus").isJsonNull()) {
        VideoPreprocessorHdr10Plus.validateJsonElement(jsonObj.get("Hdr10Plus"));
      }
      // validate the optional field `ImageInserter`
      if (jsonObj.get("ImageInserter") != null && !jsonObj.get("ImageInserter").isJsonNull()) {
        VideoPreprocessorImageInserter.validateJsonElement(jsonObj.get("ImageInserter"));
      }
      // validate the optional field `NoiseReducer`
      if (jsonObj.get("NoiseReducer") != null && !jsonObj.get("NoiseReducer").isJsonNull()) {
        VideoPreprocessorNoiseReducer.validateJsonElement(jsonObj.get("NoiseReducer"));
      }
      // validate the optional field `PartnerWatermarking`
      if (jsonObj.get("PartnerWatermarking") != null && !jsonObj.get("PartnerWatermarking").isJsonNull()) {
        VideoPreprocessorPartnerWatermarking.validateJsonElement(jsonObj.get("PartnerWatermarking"));
      }
      // validate the optional field `TimecodeBurnin`
      if (jsonObj.get("TimecodeBurnin") != null && !jsonObj.get("TimecodeBurnin").isJsonNull()) {
        VideoPreprocessorTimecodeBurnin.validateJsonElement(jsonObj.get("TimecodeBurnin"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoPreprocessor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoPreprocessor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoPreprocessor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoPreprocessor.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoPreprocessor>() {
           @Override
           public void write(JsonWriter out, VideoPreprocessor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoPreprocessor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoPreprocessor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoPreprocessor
   * @throws IOException if the JSON string is invalid with respect to VideoPreprocessor
   */
  public static VideoPreprocessor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoPreprocessor.class);
  }

  /**
   * Convert an instance of VideoPreprocessor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

