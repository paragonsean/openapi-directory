/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These settings apply to a specific graphic overlay. You can include multiple overlays in your job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsertableImage {
  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FADE_IN = "FadeIn";
  @SerializedName(SERIALIZED_NAME_FADE_IN)
  private Integer fadeIn;

  public static final String SERIALIZED_NAME_FADE_OUT = "FadeOut";
  @SerializedName(SERIALIZED_NAME_FADE_OUT)
  private Integer fadeOut;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_IMAGE_INSERTER_INPUT = "ImageInserterInput";
  @SerializedName(SERIALIZED_NAME_IMAGE_INSERTER_INPUT)
  private String imageInserterInput;

  public static final String SERIALIZED_NAME_IMAGE_X = "ImageX";
  @SerializedName(SERIALIZED_NAME_IMAGE_X)
  private Integer imageX;

  public static final String SERIALIZED_NAME_IMAGE_Y = "ImageY";
  @SerializedName(SERIALIZED_NAME_IMAGE_Y)
  private Integer imageY;

  public static final String SERIALIZED_NAME_LAYER = "Layer";
  @SerializedName(SERIALIZED_NAME_LAYER)
  private Integer layer;

  public static final String SERIALIZED_NAME_OPACITY = "Opacity";
  @SerializedName(SERIALIZED_NAME_OPACITY)
  private Integer opacity;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public InsertableImage() {
  }

  public InsertableImage duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public InsertableImage fadeIn(Integer fadeIn) {
    this.fadeIn = fadeIn;
    return this;
  }

  /**
   * Get fadeIn
   * @return fadeIn
   */
  @javax.annotation.Nullable
  public Integer getFadeIn() {
    return fadeIn;
  }

  public void setFadeIn(Integer fadeIn) {
    this.fadeIn = fadeIn;
  }


  public InsertableImage fadeOut(Integer fadeOut) {
    this.fadeOut = fadeOut;
    return this;
  }

  /**
   * Get fadeOut
   * @return fadeOut
   */
  @javax.annotation.Nullable
  public Integer getFadeOut() {
    return fadeOut;
  }

  public void setFadeOut(Integer fadeOut) {
    this.fadeOut = fadeOut;
  }


  public InsertableImage height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public InsertableImage imageInserterInput(String imageInserterInput) {
    this.imageInserterInput = imageInserterInput;
    return this;
  }

  /**
   * Get imageInserterInput
   * @return imageInserterInput
   */
  @javax.annotation.Nullable
  public String getImageInserterInput() {
    return imageInserterInput;
  }

  public void setImageInserterInput(String imageInserterInput) {
    this.imageInserterInput = imageInserterInput;
  }


  public InsertableImage imageX(Integer imageX) {
    this.imageX = imageX;
    return this;
  }

  /**
   * Get imageX
   * @return imageX
   */
  @javax.annotation.Nullable
  public Integer getImageX() {
    return imageX;
  }

  public void setImageX(Integer imageX) {
    this.imageX = imageX;
  }


  public InsertableImage imageY(Integer imageY) {
    this.imageY = imageY;
    return this;
  }

  /**
   * Get imageY
   * @return imageY
   */
  @javax.annotation.Nullable
  public Integer getImageY() {
    return imageY;
  }

  public void setImageY(Integer imageY) {
    this.imageY = imageY;
  }


  public InsertableImage layer(Integer layer) {
    this.layer = layer;
    return this;
  }

  /**
   * Get layer
   * @return layer
   */
  @javax.annotation.Nullable
  public Integer getLayer() {
    return layer;
  }

  public void setLayer(Integer layer) {
    this.layer = layer;
  }


  public InsertableImage opacity(Integer opacity) {
    this.opacity = opacity;
    return this;
  }

  /**
   * Get opacity
   * @return opacity
   */
  @javax.annotation.Nullable
  public Integer getOpacity() {
    return opacity;
  }

  public void setOpacity(Integer opacity) {
    this.opacity = opacity;
  }


  public InsertableImage startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public InsertableImage width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsertableImage insertableImage = (InsertableImage) o;
    return Objects.equals(this.duration, insertableImage.duration) &&
        Objects.equals(this.fadeIn, insertableImage.fadeIn) &&
        Objects.equals(this.fadeOut, insertableImage.fadeOut) &&
        Objects.equals(this.height, insertableImage.height) &&
        Objects.equals(this.imageInserterInput, insertableImage.imageInserterInput) &&
        Objects.equals(this.imageX, insertableImage.imageX) &&
        Objects.equals(this.imageY, insertableImage.imageY) &&
        Objects.equals(this.layer, insertableImage.layer) &&
        Objects.equals(this.opacity, insertableImage.opacity) &&
        Objects.equals(this.startTime, insertableImage.startTime) &&
        Objects.equals(this.width, insertableImage.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, fadeIn, fadeOut, height, imageInserterInput, imageX, imageY, layer, opacity, startTime, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsertableImage {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    fadeIn: ").append(toIndentedString(fadeIn)).append("\n");
    sb.append("    fadeOut: ").append(toIndentedString(fadeOut)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    imageInserterInput: ").append(toIndentedString(imageInserterInput)).append("\n");
    sb.append("    imageX: ").append(toIndentedString(imageX)).append("\n");
    sb.append("    imageY: ").append(toIndentedString(imageY)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Duration");
    openapiFields.add("FadeIn");
    openapiFields.add("FadeOut");
    openapiFields.add("Height");
    openapiFields.add("ImageInserterInput");
    openapiFields.add("ImageX");
    openapiFields.add("ImageY");
    openapiFields.add("Layer");
    openapiFields.add("Opacity");
    openapiFields.add("StartTime");
    openapiFields.add("Width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsertableImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsertableImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsertableImage is not found in the empty JSON string", InsertableImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsertableImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsertableImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Duration`
      if (jsonObj.get("Duration") != null && !jsonObj.get("Duration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Duration"));
      }
      // validate the optional field `FadeIn`
      if (jsonObj.get("FadeIn") != null && !jsonObj.get("FadeIn").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FadeIn"));
      }
      // validate the optional field `FadeOut`
      if (jsonObj.get("FadeOut") != null && !jsonObj.get("FadeOut").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FadeOut"));
      }
      // validate the optional field `Height`
      if (jsonObj.get("Height") != null && !jsonObj.get("Height").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Height"));
      }
      // validate the optional field `ImageInserterInput`
      if (jsonObj.get("ImageInserterInput") != null && !jsonObj.get("ImageInserterInput").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageInserterInput"));
      }
      // validate the optional field `ImageX`
      if (jsonObj.get("ImageX") != null && !jsonObj.get("ImageX").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ImageX"));
      }
      // validate the optional field `ImageY`
      if (jsonObj.get("ImageY") != null && !jsonObj.get("ImageY").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ImageY"));
      }
      // validate the optional field `Layer`
      if (jsonObj.get("Layer") != null && !jsonObj.get("Layer").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Layer"));
      }
      // validate the optional field `Opacity`
      if (jsonObj.get("Opacity") != null && !jsonObj.get("Opacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Opacity"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `Width`
      if (jsonObj.get("Width") != null && !jsonObj.get("Width").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Width"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsertableImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsertableImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsertableImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsertableImage.class));

       return (TypeAdapter<T>) new TypeAdapter<InsertableImage>() {
           @Override
           public void write(JsonWriter out, InsertableImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsertableImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsertableImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsertableImage
   * @throws IOException if the JSON string is invalid with respect to InsertableImage
   */
  public static InsertableImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsertableImage.class);
  }

  /**
   * Convert an instance of InsertableImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

