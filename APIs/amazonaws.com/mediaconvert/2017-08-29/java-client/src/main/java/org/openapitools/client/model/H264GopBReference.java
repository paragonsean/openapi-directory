/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify whether to allow B-frames to be referenced by other frame types. To use reference B-frames when your GOP structure has 1 or more B-frames: Leave blank or keep the default value Enabled. We recommend that you choose Enabled to help improve the video quality of your output relative to its bitrate. To not use reference B-frames: Choose Disabled.
 */
@JsonAdapter(H264GopBReference.Adapter.class)
public enum H264GopBReference {
  
  DISABLED("DISABLED"),
  
  ENABLED("ENABLED");

  private String value;

  H264GopBReference(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H264GopBReference fromValue(String value) {
    for (H264GopBReference b : H264GopBReference.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H264GopBReference> {
    @Override
    public void write(final JsonWriter jsonWriter, final H264GopBReference enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H264GopBReference read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H264GopBReference.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H264GopBReference.fromValue(value);
  }
}

