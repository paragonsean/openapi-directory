/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * To create assets that have the same TIC values in each audio track, keep the default value Share TICs. To create assets that have unique TIC values for each audio track, choose Use unique TICs.
 */
@JsonAdapter(NielsenUniqueTicPerAudioTrackType.Adapter.class)
public enum NielsenUniqueTicPerAudioTrackType {
  
  RESERVE_UNIQUE_TICS_PER_TRACK("RESERVE_UNIQUE_TICS_PER_TRACK"),
  
  SAME_TICS_PER_TRACK("SAME_TICS_PER_TRACK");

  private String value;

  NielsenUniqueTicPerAudioTrackType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static NielsenUniqueTicPerAudioTrackType fromValue(String value) {
    for (NielsenUniqueTicPerAudioTrackType b : NielsenUniqueTicPerAudioTrackType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<NielsenUniqueTicPerAudioTrackType> {
    @Override
    public void write(final JsonWriter jsonWriter, final NielsenUniqueTicPerAudioTrackType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public NielsenUniqueTicPerAudioTrackType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return NielsenUniqueTicPerAudioTrackType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    NielsenUniqueTicPerAudioTrackType.fromValue(value);
  }
}

