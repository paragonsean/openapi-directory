/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * When set to CBR, inserts null packets into transport stream to fill specified bitrate. When set to VBR, the bitrate setting acts as the maximum bitrate, but the output will not be padded up to that bitrate.
 */
@JsonAdapter(M2tsRateMode.Adapter.class)
public enum M2tsRateMode {
  
  VBR("VBR"),
  
  CBR("CBR");

  private String value;

  M2tsRateMode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static M2tsRateMode fromValue(String value) {
    for (M2tsRateMode b : M2tsRateMode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<M2tsRateMode> {
    @Override
    public void write(final JsonWriter jsonWriter, final M2tsRateMode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public M2tsRateMode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return M2tsRateMode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    M2tsRateMode.fromValue(value);
  }
}

