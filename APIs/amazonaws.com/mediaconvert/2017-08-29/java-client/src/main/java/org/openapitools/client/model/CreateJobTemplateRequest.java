/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateJobRequestAccelerationSettings;
import org.openapitools.client.model.CreateJobTemplateRequestSettings;
import org.openapitools.client.model.HopDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateJobTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateJobTemplateRequest {
  public static final String SERIALIZED_NAME_ACCELERATION_SETTINGS = "accelerationSettings";
  @SerializedName(SERIALIZED_NAME_ACCELERATION_SETTINGS)
  private CreateJobRequestAccelerationSettings accelerationSettings;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HOP_DESTINATIONS = "hopDestinations";
  @SerializedName(SERIALIZED_NAME_HOP_DESTINATIONS)
  private List<HopDestination> hopDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_QUEUE = "queue";
  @SerializedName(SERIALIZED_NAME_QUEUE)
  private String queue;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private CreateJobTemplateRequestSettings settings;

  /**
   * Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
   */
  @JsonAdapter(StatusUpdateIntervalEnum.Adapter.class)
  public enum StatusUpdateIntervalEnum {
    _10("SECONDS_10"),
    
    _12("SECONDS_12"),
    
    _15("SECONDS_15"),
    
    _20("SECONDS_20"),
    
    _30("SECONDS_30"),
    
    _60("SECONDS_60"),
    
    _120("SECONDS_120"),
    
    _180("SECONDS_180"),
    
    _240("SECONDS_240"),
    
    _300("SECONDS_300"),
    
    _360("SECONDS_360"),
    
    _420("SECONDS_420"),
    
    _480("SECONDS_480"),
    
    _540("SECONDS_540"),
    
    _600("SECONDS_600");

    private String value;

    StatusUpdateIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusUpdateIntervalEnum fromValue(String value) {
      for (StatusUpdateIntervalEnum b : StatusUpdateIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusUpdateIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusUpdateIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusUpdateIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusUpdateIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusUpdateIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_UPDATE_INTERVAL = "statusUpdateInterval";
  @SerializedName(SERIALIZED_NAME_STATUS_UPDATE_INTERVAL)
  private StatusUpdateIntervalEnum statusUpdateInterval;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateJobTemplateRequest() {
  }

  public CreateJobTemplateRequest accelerationSettings(CreateJobRequestAccelerationSettings accelerationSettings) {
    this.accelerationSettings = accelerationSettings;
    return this;
  }

  /**
   * Get accelerationSettings
   * @return accelerationSettings
   */
  @javax.annotation.Nullable
  public CreateJobRequestAccelerationSettings getAccelerationSettings() {
    return accelerationSettings;
  }

  public void setAccelerationSettings(CreateJobRequestAccelerationSettings accelerationSettings) {
    this.accelerationSettings = accelerationSettings;
  }


  public CreateJobTemplateRequest category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Optional. A category for the job template you are creating
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public CreateJobTemplateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A description of the job template you are creating.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateJobTemplateRequest hopDestinations(List<HopDestination> hopDestinations) {
    this.hopDestinations = hopDestinations;
    return this;
  }

  public CreateJobTemplateRequest addHopDestinationsItem(HopDestination hopDestinationsItem) {
    if (this.hopDestinations == null) {
      this.hopDestinations = new ArrayList<>();
    }
    this.hopDestinations.add(hopDestinationsItem);
    return this;
  }

  /**
   * Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
   * @return hopDestinations
   */
  @javax.annotation.Nullable
  public List<HopDestination> getHopDestinations() {
    return hopDestinations;
  }

  public void setHopDestinations(List<HopDestination> hopDestinations) {
    this.hopDestinations = hopDestinations;
  }


  public CreateJobTemplateRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the job template you are creating.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateJobTemplateRequest priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don&#39;t specify a priority, the service uses the default value 0.
   * minimum: -50
   * maximum: 50
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public CreateJobTemplateRequest queue(String queue) {
    this.queue = queue;
    return this;
  }

  /**
   * Optional. The queue that jobs created from this template are assigned to. If you don&#39;t specify this, jobs will go to the default queue.
   * @return queue
   */
  @javax.annotation.Nullable
  public String getQueue() {
    return queue;
  }

  public void setQueue(String queue) {
    this.queue = queue;
  }


  public CreateJobTemplateRequest settings(CreateJobTemplateRequestSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nonnull
  public CreateJobTemplateRequestSettings getSettings() {
    return settings;
  }

  public void setSettings(CreateJobTemplateRequestSettings settings) {
    this.settings = settings;
  }


  public CreateJobTemplateRequest statusUpdateInterval(StatusUpdateIntervalEnum statusUpdateInterval) {
    this.statusUpdateInterval = statusUpdateInterval;
    return this;
  }

  /**
   * Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
   * @return statusUpdateInterval
   */
  @javax.annotation.Nullable
  public StatusUpdateIntervalEnum getStatusUpdateInterval() {
    return statusUpdateInterval;
  }

  public void setStatusUpdateInterval(StatusUpdateIntervalEnum statusUpdateInterval) {
    this.statusUpdateInterval = statusUpdateInterval;
  }


  public CreateJobTemplateRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateJobTemplateRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateJobTemplateRequest createJobTemplateRequest = (CreateJobTemplateRequest) o;
    return Objects.equals(this.accelerationSettings, createJobTemplateRequest.accelerationSettings) &&
        Objects.equals(this.category, createJobTemplateRequest.category) &&
        Objects.equals(this.description, createJobTemplateRequest.description) &&
        Objects.equals(this.hopDestinations, createJobTemplateRequest.hopDestinations) &&
        Objects.equals(this.name, createJobTemplateRequest.name) &&
        Objects.equals(this.priority, createJobTemplateRequest.priority) &&
        Objects.equals(this.queue, createJobTemplateRequest.queue) &&
        Objects.equals(this.settings, createJobTemplateRequest.settings) &&
        Objects.equals(this.statusUpdateInterval, createJobTemplateRequest.statusUpdateInterval) &&
        Objects.equals(this.tags, createJobTemplateRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accelerationSettings, category, description, hopDestinations, name, priority, queue, settings, statusUpdateInterval, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateJobTemplateRequest {\n");
    sb.append("    accelerationSettings: ").append(toIndentedString(accelerationSettings)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hopDestinations: ").append(toIndentedString(hopDestinations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    statusUpdateInterval: ").append(toIndentedString(statusUpdateInterval)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accelerationSettings");
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("hopDestinations");
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("queue");
    openapiFields.add("settings");
    openapiFields.add("statusUpdateInterval");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("settings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateJobTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateJobTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateJobTemplateRequest is not found in the empty JSON string", CreateJobTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateJobTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateJobTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateJobTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accelerationSettings`
      if (jsonObj.get("accelerationSettings") != null && !jsonObj.get("accelerationSettings").isJsonNull()) {
        CreateJobRequestAccelerationSettings.validateJsonElement(jsonObj.get("accelerationSettings"));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("hopDestinations") != null && !jsonObj.get("hopDestinations").isJsonNull()) {
        JsonArray jsonArrayhopDestinations = jsonObj.getAsJsonArray("hopDestinations");
        if (jsonArrayhopDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hopDestinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hopDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("hopDestinations").toString()));
          }

          // validate the optional field `hopDestinations` (array)
          for (int i = 0; i < jsonArrayhopDestinations.size(); i++) {
            HopDestination.validateJsonElement(jsonArrayhopDestinations.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("queue") != null && !jsonObj.get("queue").isJsonNull()) && !jsonObj.get("queue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue").toString()));
      }
      // validate the required field `settings`
      CreateJobTemplateRequestSettings.validateJsonElement(jsonObj.get("settings"));
      if ((jsonObj.get("statusUpdateInterval") != null && !jsonObj.get("statusUpdateInterval").isJsonNull()) && !jsonObj.get("statusUpdateInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusUpdateInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusUpdateInterval").toString()));
      }
      // validate the optional field `statusUpdateInterval`
      if (jsonObj.get("statusUpdateInterval") != null && !jsonObj.get("statusUpdateInterval").isJsonNull()) {
        StatusUpdateIntervalEnum.validateJsonElement(jsonObj.get("statusUpdateInterval"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateJobTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateJobTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateJobTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateJobTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateJobTemplateRequest>() {
           @Override
           public void write(JsonWriter out, CreateJobTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateJobTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateJobTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateJobTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to CreateJobTemplateRequest
   */
  public static CreateJobTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateJobTemplateRequest.class);
  }

  /**
   * Convert an instance of CreateJobTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

