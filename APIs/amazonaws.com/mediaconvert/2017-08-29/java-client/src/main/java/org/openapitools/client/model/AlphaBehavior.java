/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Ignore this setting unless this input is a QuickTime animation with an alpha channel. Use this setting to create separate Key and Fill outputs. In each output, specify which part of the input MediaConvert uses. Leave this setting at the default value DISCARD to delete the alpha channel and preserve the video. Set it to REMAP_TO_LUMA to delete the video and map the alpha channel to the luma channel of your outputs.
 */
@JsonAdapter(AlphaBehavior.Adapter.class)
public enum AlphaBehavior {
  
  DISCARD("DISCARD"),
  
  REMAP_TO_LUMA("REMAP_TO_LUMA");

  private String value;

  AlphaBehavior(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AlphaBehavior fromValue(String value) {
    for (AlphaBehavior b : AlphaBehavior.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AlphaBehavior> {
    @Override
    public void write(final JsonWriter jsonWriter, final AlphaBehavior enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AlphaBehavior read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AlphaBehavior.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AlphaBehavior.fromValue(value);
  }
}

