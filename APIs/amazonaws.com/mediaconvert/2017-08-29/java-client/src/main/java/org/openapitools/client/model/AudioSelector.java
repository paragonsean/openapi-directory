/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AudioDefaultSelection;
import org.openapitools.client.model.AudioDurationCorrection;
import org.openapitools.client.model.AudioSelectorHlsRenditionGroupSettings;
import org.openapitools.client.model.AudioSelectorRemixSettings;
import org.openapitools.client.model.AudioSelectorType;
import org.openapitools.client.model.LanguageCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Use Audio selectors to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioSelector {
  public static final String SERIALIZED_NAME_AUDIO_DURATION_CORRECTION = "AudioDurationCorrection";
  @SerializedName(SERIALIZED_NAME_AUDIO_DURATION_CORRECTION)
  private AudioDurationCorrection audioDurationCorrection;

  public static final String SERIALIZED_NAME_CUSTOM_LANGUAGE_CODE = "CustomLanguageCode";
  @SerializedName(SERIALIZED_NAME_CUSTOM_LANGUAGE_CODE)
  private String customLanguageCode;

  public static final String SERIALIZED_NAME_DEFAULT_SELECTION = "DefaultSelection";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SELECTION)
  private AudioDefaultSelection defaultSelection;

  public static final String SERIALIZED_NAME_EXTERNAL_AUDIO_FILE_INPUT = "ExternalAudioFileInput";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_AUDIO_FILE_INPUT)
  private String externalAudioFileInput;

  public static final String SERIALIZED_NAME_HLS_RENDITION_GROUP_SETTINGS = "HlsRenditionGroupSettings";
  @SerializedName(SERIALIZED_NAME_HLS_RENDITION_GROUP_SETTINGS)
  private AudioSelectorHlsRenditionGroupSettings hlsRenditionGroupSettings;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PIDS = "Pids";
  @SerializedName(SERIALIZED_NAME_PIDS)
  private List pids;

  public static final String SERIALIZED_NAME_PROGRAM_SELECTION = "ProgramSelection";
  @SerializedName(SERIALIZED_NAME_PROGRAM_SELECTION)
  private Integer programSelection;

  public static final String SERIALIZED_NAME_REMIX_SETTINGS = "RemixSettings";
  @SerializedName(SERIALIZED_NAME_REMIX_SETTINGS)
  private AudioSelectorRemixSettings remixSettings;

  public static final String SERIALIZED_NAME_SELECTOR_TYPE = "SelectorType";
  @SerializedName(SERIALIZED_NAME_SELECTOR_TYPE)
  private AudioSelectorType selectorType;

  public static final String SERIALIZED_NAME_TRACKS = "Tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List tracks;

  public AudioSelector() {
  }

  public AudioSelector audioDurationCorrection(AudioDurationCorrection audioDurationCorrection) {
    this.audioDurationCorrection = audioDurationCorrection;
    return this;
  }

  /**
   * Get audioDurationCorrection
   * @return audioDurationCorrection
   */
  @javax.annotation.Nullable
  public AudioDurationCorrection getAudioDurationCorrection() {
    return audioDurationCorrection;
  }

  public void setAudioDurationCorrection(AudioDurationCorrection audioDurationCorrection) {
    this.audioDurationCorrection = audioDurationCorrection;
  }


  public AudioSelector customLanguageCode(String customLanguageCode) {
    this.customLanguageCode = customLanguageCode;
    return this;
  }

  /**
   * Get customLanguageCode
   * @return customLanguageCode
   */
  @javax.annotation.Nullable
  public String getCustomLanguageCode() {
    return customLanguageCode;
  }

  public void setCustomLanguageCode(String customLanguageCode) {
    this.customLanguageCode = customLanguageCode;
  }


  public AudioSelector defaultSelection(AudioDefaultSelection defaultSelection) {
    this.defaultSelection = defaultSelection;
    return this;
  }

  /**
   * Get defaultSelection
   * @return defaultSelection
   */
  @javax.annotation.Nullable
  public AudioDefaultSelection getDefaultSelection() {
    return defaultSelection;
  }

  public void setDefaultSelection(AudioDefaultSelection defaultSelection) {
    this.defaultSelection = defaultSelection;
  }


  public AudioSelector externalAudioFileInput(String externalAudioFileInput) {
    this.externalAudioFileInput = externalAudioFileInput;
    return this;
  }

  /**
   * Get externalAudioFileInput
   * @return externalAudioFileInput
   */
  @javax.annotation.Nullable
  public String getExternalAudioFileInput() {
    return externalAudioFileInput;
  }

  public void setExternalAudioFileInput(String externalAudioFileInput) {
    this.externalAudioFileInput = externalAudioFileInput;
  }


  public AudioSelector hlsRenditionGroupSettings(AudioSelectorHlsRenditionGroupSettings hlsRenditionGroupSettings) {
    this.hlsRenditionGroupSettings = hlsRenditionGroupSettings;
    return this;
  }

  /**
   * Get hlsRenditionGroupSettings
   * @return hlsRenditionGroupSettings
   */
  @javax.annotation.Nullable
  public AudioSelectorHlsRenditionGroupSettings getHlsRenditionGroupSettings() {
    return hlsRenditionGroupSettings;
  }

  public void setHlsRenditionGroupSettings(AudioSelectorHlsRenditionGroupSettings hlsRenditionGroupSettings) {
    this.hlsRenditionGroupSettings = hlsRenditionGroupSettings;
  }


  public AudioSelector languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public AudioSelector offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public AudioSelector pids(List pids) {
    this.pids = pids;
    return this;
  }

  /**
   * Get pids
   * @return pids
   */
  @javax.annotation.Nullable
  public List getPids() {
    return pids;
  }

  public void setPids(List pids) {
    this.pids = pids;
  }


  public AudioSelector programSelection(Integer programSelection) {
    this.programSelection = programSelection;
    return this;
  }

  /**
   * Get programSelection
   * @return programSelection
   */
  @javax.annotation.Nullable
  public Integer getProgramSelection() {
    return programSelection;
  }

  public void setProgramSelection(Integer programSelection) {
    this.programSelection = programSelection;
  }


  public AudioSelector remixSettings(AudioSelectorRemixSettings remixSettings) {
    this.remixSettings = remixSettings;
    return this;
  }

  /**
   * Get remixSettings
   * @return remixSettings
   */
  @javax.annotation.Nullable
  public AudioSelectorRemixSettings getRemixSettings() {
    return remixSettings;
  }

  public void setRemixSettings(AudioSelectorRemixSettings remixSettings) {
    this.remixSettings = remixSettings;
  }


  public AudioSelector selectorType(AudioSelectorType selectorType) {
    this.selectorType = selectorType;
    return this;
  }

  /**
   * Get selectorType
   * @return selectorType
   */
  @javax.annotation.Nullable
  public AudioSelectorType getSelectorType() {
    return selectorType;
  }

  public void setSelectorType(AudioSelectorType selectorType) {
    this.selectorType = selectorType;
  }


  public AudioSelector tracks(List tracks) {
    this.tracks = tracks;
    return this;
  }

  /**
   * Get tracks
   * @return tracks
   */
  @javax.annotation.Nullable
  public List getTracks() {
    return tracks;
  }

  public void setTracks(List tracks) {
    this.tracks = tracks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioSelector audioSelector = (AudioSelector) o;
    return Objects.equals(this.audioDurationCorrection, audioSelector.audioDurationCorrection) &&
        Objects.equals(this.customLanguageCode, audioSelector.customLanguageCode) &&
        Objects.equals(this.defaultSelection, audioSelector.defaultSelection) &&
        Objects.equals(this.externalAudioFileInput, audioSelector.externalAudioFileInput) &&
        Objects.equals(this.hlsRenditionGroupSettings, audioSelector.hlsRenditionGroupSettings) &&
        Objects.equals(this.languageCode, audioSelector.languageCode) &&
        Objects.equals(this.offset, audioSelector.offset) &&
        Objects.equals(this.pids, audioSelector.pids) &&
        Objects.equals(this.programSelection, audioSelector.programSelection) &&
        Objects.equals(this.remixSettings, audioSelector.remixSettings) &&
        Objects.equals(this.selectorType, audioSelector.selectorType) &&
        Objects.equals(this.tracks, audioSelector.tracks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioDurationCorrection, customLanguageCode, defaultSelection, externalAudioFileInput, hlsRenditionGroupSettings, languageCode, offset, pids, programSelection, remixSettings, selectorType, tracks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioSelector {\n");
    sb.append("    audioDurationCorrection: ").append(toIndentedString(audioDurationCorrection)).append("\n");
    sb.append("    customLanguageCode: ").append(toIndentedString(customLanguageCode)).append("\n");
    sb.append("    defaultSelection: ").append(toIndentedString(defaultSelection)).append("\n");
    sb.append("    externalAudioFileInput: ").append(toIndentedString(externalAudioFileInput)).append("\n");
    sb.append("    hlsRenditionGroupSettings: ").append(toIndentedString(hlsRenditionGroupSettings)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    pids: ").append(toIndentedString(pids)).append("\n");
    sb.append("    programSelection: ").append(toIndentedString(programSelection)).append("\n");
    sb.append("    remixSettings: ").append(toIndentedString(remixSettings)).append("\n");
    sb.append("    selectorType: ").append(toIndentedString(selectorType)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioDurationCorrection");
    openapiFields.add("CustomLanguageCode");
    openapiFields.add("DefaultSelection");
    openapiFields.add("ExternalAudioFileInput");
    openapiFields.add("HlsRenditionGroupSettings");
    openapiFields.add("LanguageCode");
    openapiFields.add("Offset");
    openapiFields.add("Pids");
    openapiFields.add("ProgramSelection");
    openapiFields.add("RemixSettings");
    openapiFields.add("SelectorType");
    openapiFields.add("Tracks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioSelector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioSelector is not found in the empty JSON string", AudioSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioDurationCorrection`
      if (jsonObj.get("AudioDurationCorrection") != null && !jsonObj.get("AudioDurationCorrection").isJsonNull()) {
        AudioDurationCorrection.validateJsonElement(jsonObj.get("AudioDurationCorrection"));
      }
      // validate the optional field `CustomLanguageCode`
      if (jsonObj.get("CustomLanguageCode") != null && !jsonObj.get("CustomLanguageCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CustomLanguageCode"));
      }
      // validate the optional field `DefaultSelection`
      if (jsonObj.get("DefaultSelection") != null && !jsonObj.get("DefaultSelection").isJsonNull()) {
        AudioDefaultSelection.validateJsonElement(jsonObj.get("DefaultSelection"));
      }
      // validate the optional field `ExternalAudioFileInput`
      if (jsonObj.get("ExternalAudioFileInput") != null && !jsonObj.get("ExternalAudioFileInput").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExternalAudioFileInput"));
      }
      // validate the optional field `HlsRenditionGroupSettings`
      if (jsonObj.get("HlsRenditionGroupSettings") != null && !jsonObj.get("HlsRenditionGroupSettings").isJsonNull()) {
        AudioSelectorHlsRenditionGroupSettings.validateJsonElement(jsonObj.get("HlsRenditionGroupSettings"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `Offset`
      if (jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Offset"));
      }
      // validate the optional field `Pids`
      if (jsonObj.get("Pids") != null && !jsonObj.get("Pids").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Pids"));
      }
      // validate the optional field `ProgramSelection`
      if (jsonObj.get("ProgramSelection") != null && !jsonObj.get("ProgramSelection").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgramSelection"));
      }
      // validate the optional field `RemixSettings`
      if (jsonObj.get("RemixSettings") != null && !jsonObj.get("RemixSettings").isJsonNull()) {
        AudioSelectorRemixSettings.validateJsonElement(jsonObj.get("RemixSettings"));
      }
      // validate the optional field `SelectorType`
      if (jsonObj.get("SelectorType") != null && !jsonObj.get("SelectorType").isJsonNull()) {
        AudioSelectorType.validateJsonElement(jsonObj.get("SelectorType"));
      }
      // validate the optional field `Tracks`
      if (jsonObj.get("Tracks") != null && !jsonObj.get("Tracks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tracks"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioSelector>() {
           @Override
           public void write(JsonWriter out, AudioSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioSelector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioSelector
   * @throws IOException if the JSON string is invalid with respect to AudioSelector
   */
  public static AudioSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioSelector.class);
  }

  /**
   * Convert an instance of AudioSelector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

