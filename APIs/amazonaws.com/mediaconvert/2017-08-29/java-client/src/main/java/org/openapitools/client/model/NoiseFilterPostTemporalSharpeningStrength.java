/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Use Post temporal sharpening strength to define the amount of sharpening the transcoder applies to your output. Set Post temporal sharpening strength to Low, Medium, or High to indicate the amount of sharpening.
 */
@JsonAdapter(NoiseFilterPostTemporalSharpeningStrength.Adapter.class)
public enum NoiseFilterPostTemporalSharpeningStrength {
  
  LOW("LOW"),
  
  MEDIUM("MEDIUM"),
  
  HIGH("HIGH");

  private String value;

  NoiseFilterPostTemporalSharpeningStrength(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static NoiseFilterPostTemporalSharpeningStrength fromValue(String value) {
    for (NoiseFilterPostTemporalSharpeningStrength b : NoiseFilterPostTemporalSharpeningStrength.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<NoiseFilterPostTemporalSharpeningStrength> {
    @Override
    public void write(final JsonWriter jsonWriter, final NoiseFilterPostTemporalSharpeningStrength enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public NoiseFilterPostTemporalSharpeningStrength read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return NoiseFilterPostTemporalSharpeningStrength.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    NoiseFilterPostTemporalSharpeningStrength.fromValue(value);
  }
}

