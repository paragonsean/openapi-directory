/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BandwidthReductionFilterSharpening;
import org.openapitools.client.model.BandwidthReductionFilterStrength;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Bandwidth reduction filter increases the video quality of your output relative to its bitrate. Use to lower the bitrate of your constant quality QVBR output, with little or no perceptual decrease in quality. Or, use to increase the video quality of outputs with other rate control modes relative to the bitrate that you specify. Bandwidth reduction increases further when your input is low quality or noisy. Outputs that use this feature incur pro-tier pricing. When you include Bandwidth reduction filter, you cannot include the Noise reducer preprocessor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BandwidthReductionFilter {
  public static final String SERIALIZED_NAME_SHARPENING = "Sharpening";
  @SerializedName(SERIALIZED_NAME_SHARPENING)
  private BandwidthReductionFilterSharpening sharpening;

  public static final String SERIALIZED_NAME_STRENGTH = "Strength";
  @SerializedName(SERIALIZED_NAME_STRENGTH)
  private BandwidthReductionFilterStrength strength;

  public BandwidthReductionFilter() {
  }

  public BandwidthReductionFilter sharpening(BandwidthReductionFilterSharpening sharpening) {
    this.sharpening = sharpening;
    return this;
  }

  /**
   * Get sharpening
   * @return sharpening
   */
  @javax.annotation.Nullable
  public BandwidthReductionFilterSharpening getSharpening() {
    return sharpening;
  }

  public void setSharpening(BandwidthReductionFilterSharpening sharpening) {
    this.sharpening = sharpening;
  }


  public BandwidthReductionFilter strength(BandwidthReductionFilterStrength strength) {
    this.strength = strength;
    return this;
  }

  /**
   * Get strength
   * @return strength
   */
  @javax.annotation.Nullable
  public BandwidthReductionFilterStrength getStrength() {
    return strength;
  }

  public void setStrength(BandwidthReductionFilterStrength strength) {
    this.strength = strength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BandwidthReductionFilter bandwidthReductionFilter = (BandwidthReductionFilter) o;
    return Objects.equals(this.sharpening, bandwidthReductionFilter.sharpening) &&
        Objects.equals(this.strength, bandwidthReductionFilter.strength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharpening, strength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BandwidthReductionFilter {\n");
    sb.append("    sharpening: ").append(toIndentedString(sharpening)).append("\n");
    sb.append("    strength: ").append(toIndentedString(strength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Sharpening");
    openapiFields.add("Strength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BandwidthReductionFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BandwidthReductionFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BandwidthReductionFilter is not found in the empty JSON string", BandwidthReductionFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BandwidthReductionFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BandwidthReductionFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Sharpening`
      if (jsonObj.get("Sharpening") != null && !jsonObj.get("Sharpening").isJsonNull()) {
        BandwidthReductionFilterSharpening.validateJsonElement(jsonObj.get("Sharpening"));
      }
      // validate the optional field `Strength`
      if (jsonObj.get("Strength") != null && !jsonObj.get("Strength").isJsonNull()) {
        BandwidthReductionFilterStrength.validateJsonElement(jsonObj.get("Strength"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BandwidthReductionFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BandwidthReductionFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BandwidthReductionFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BandwidthReductionFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<BandwidthReductionFilter>() {
           @Override
           public void write(JsonWriter out, BandwidthReductionFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BandwidthReductionFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BandwidthReductionFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BandwidthReductionFilter
   * @throws IOException if the JSON string is invalid with respect to BandwidthReductionFilter
   */
  public static BandwidthReductionFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BandwidthReductionFilter.class);
  }

  /**
   * Convert an instance of BandwidthReductionFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

