/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Vp9FramerateControl;
import org.openapitools.client.model.Vp9FramerateConversionAlgorithm;
import org.openapitools.client.model.Vp9ParControl;
import org.openapitools.client.model.Vp9QualityTuningLevel;
import org.openapitools.client.model.Vp9RateControlMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Required when you set Codec to the value VP9.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Vp9Settings {
  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Integer bitrate;

  public static final String SERIALIZED_NAME_FRAMERATE_CONTROL = "FramerateControl";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONTROL)
  private Vp9FramerateControl framerateControl;

  public static final String SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM = "FramerateConversionAlgorithm";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM)
  private Vp9FramerateConversionAlgorithm framerateConversionAlgorithm;

  public static final String SERIALIZED_NAME_FRAMERATE_DENOMINATOR = "FramerateDenominator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_DENOMINATOR)
  private Integer framerateDenominator;

  public static final String SERIALIZED_NAME_FRAMERATE_NUMERATOR = "FramerateNumerator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_NUMERATOR)
  private Integer framerateNumerator;

  public static final String SERIALIZED_NAME_GOP_SIZE = "GopSize";
  @SerializedName(SERIALIZED_NAME_GOP_SIZE)
  private Double gopSize;

  public static final String SERIALIZED_NAME_HRD_BUFFER_SIZE = "HrdBufferSize";
  @SerializedName(SERIALIZED_NAME_HRD_BUFFER_SIZE)
  private Integer hrdBufferSize;

  public static final String SERIALIZED_NAME_MAX_BITRATE = "MaxBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_BITRATE)
  private Integer maxBitrate;

  public static final String SERIALIZED_NAME_PAR_CONTROL = "ParControl";
  @SerializedName(SERIALIZED_NAME_PAR_CONTROL)
  private Vp9ParControl parControl;

  public static final String SERIALIZED_NAME_PAR_DENOMINATOR = "ParDenominator";
  @SerializedName(SERIALIZED_NAME_PAR_DENOMINATOR)
  private Integer parDenominator;

  public static final String SERIALIZED_NAME_PAR_NUMERATOR = "ParNumerator";
  @SerializedName(SERIALIZED_NAME_PAR_NUMERATOR)
  private Integer parNumerator;

  public static final String SERIALIZED_NAME_QUALITY_TUNING_LEVEL = "QualityTuningLevel";
  @SerializedName(SERIALIZED_NAME_QUALITY_TUNING_LEVEL)
  private Vp9QualityTuningLevel qualityTuningLevel;

  public static final String SERIALIZED_NAME_RATE_CONTROL_MODE = "RateControlMode";
  @SerializedName(SERIALIZED_NAME_RATE_CONTROL_MODE)
  private Vp9RateControlMode rateControlMode;

  public Vp9Settings() {
  }

  public Vp9Settings bitrate(Integer bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Integer getBitrate() {
    return bitrate;
  }

  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public Vp9Settings framerateControl(Vp9FramerateControl framerateControl) {
    this.framerateControl = framerateControl;
    return this;
  }

  /**
   * Get framerateControl
   * @return framerateControl
   */
  @javax.annotation.Nullable
  public Vp9FramerateControl getFramerateControl() {
    return framerateControl;
  }

  public void setFramerateControl(Vp9FramerateControl framerateControl) {
    this.framerateControl = framerateControl;
  }


  public Vp9Settings framerateConversionAlgorithm(Vp9FramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
    return this;
  }

  /**
   * Get framerateConversionAlgorithm
   * @return framerateConversionAlgorithm
   */
  @javax.annotation.Nullable
  public Vp9FramerateConversionAlgorithm getFramerateConversionAlgorithm() {
    return framerateConversionAlgorithm;
  }

  public void setFramerateConversionAlgorithm(Vp9FramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
  }


  public Vp9Settings framerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
    return this;
  }

  /**
   * Get framerateDenominator
   * @return framerateDenominator
   */
  @javax.annotation.Nullable
  public Integer getFramerateDenominator() {
    return framerateDenominator;
  }

  public void setFramerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
  }


  public Vp9Settings framerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
    return this;
  }

  /**
   * Get framerateNumerator
   * @return framerateNumerator
   */
  @javax.annotation.Nullable
  public Integer getFramerateNumerator() {
    return framerateNumerator;
  }

  public void setFramerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
  }


  public Vp9Settings gopSize(Double gopSize) {
    this.gopSize = gopSize;
    return this;
  }

  /**
   * Get gopSize
   * @return gopSize
   */
  @javax.annotation.Nullable
  public Double getGopSize() {
    return gopSize;
  }

  public void setGopSize(Double gopSize) {
    this.gopSize = gopSize;
  }


  public Vp9Settings hrdBufferSize(Integer hrdBufferSize) {
    this.hrdBufferSize = hrdBufferSize;
    return this;
  }

  /**
   * Get hrdBufferSize
   * @return hrdBufferSize
   */
  @javax.annotation.Nullable
  public Integer getHrdBufferSize() {
    return hrdBufferSize;
  }

  public void setHrdBufferSize(Integer hrdBufferSize) {
    this.hrdBufferSize = hrdBufferSize;
  }


  public Vp9Settings maxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
    return this;
  }

  /**
   * Get maxBitrate
   * @return maxBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxBitrate() {
    return maxBitrate;
  }

  public void setMaxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
  }


  public Vp9Settings parControl(Vp9ParControl parControl) {
    this.parControl = parControl;
    return this;
  }

  /**
   * Get parControl
   * @return parControl
   */
  @javax.annotation.Nullable
  public Vp9ParControl getParControl() {
    return parControl;
  }

  public void setParControl(Vp9ParControl parControl) {
    this.parControl = parControl;
  }


  public Vp9Settings parDenominator(Integer parDenominator) {
    this.parDenominator = parDenominator;
    return this;
  }

  /**
   * Get parDenominator
   * @return parDenominator
   */
  @javax.annotation.Nullable
  public Integer getParDenominator() {
    return parDenominator;
  }

  public void setParDenominator(Integer parDenominator) {
    this.parDenominator = parDenominator;
  }


  public Vp9Settings parNumerator(Integer parNumerator) {
    this.parNumerator = parNumerator;
    return this;
  }

  /**
   * Get parNumerator
   * @return parNumerator
   */
  @javax.annotation.Nullable
  public Integer getParNumerator() {
    return parNumerator;
  }

  public void setParNumerator(Integer parNumerator) {
    this.parNumerator = parNumerator;
  }


  public Vp9Settings qualityTuningLevel(Vp9QualityTuningLevel qualityTuningLevel) {
    this.qualityTuningLevel = qualityTuningLevel;
    return this;
  }

  /**
   * Get qualityTuningLevel
   * @return qualityTuningLevel
   */
  @javax.annotation.Nullable
  public Vp9QualityTuningLevel getQualityTuningLevel() {
    return qualityTuningLevel;
  }

  public void setQualityTuningLevel(Vp9QualityTuningLevel qualityTuningLevel) {
    this.qualityTuningLevel = qualityTuningLevel;
  }


  public Vp9Settings rateControlMode(Vp9RateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
    return this;
  }

  /**
   * Get rateControlMode
   * @return rateControlMode
   */
  @javax.annotation.Nullable
  public Vp9RateControlMode getRateControlMode() {
    return rateControlMode;
  }

  public void setRateControlMode(Vp9RateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vp9Settings vp9Settings = (Vp9Settings) o;
    return Objects.equals(this.bitrate, vp9Settings.bitrate) &&
        Objects.equals(this.framerateControl, vp9Settings.framerateControl) &&
        Objects.equals(this.framerateConversionAlgorithm, vp9Settings.framerateConversionAlgorithm) &&
        Objects.equals(this.framerateDenominator, vp9Settings.framerateDenominator) &&
        Objects.equals(this.framerateNumerator, vp9Settings.framerateNumerator) &&
        Objects.equals(this.gopSize, vp9Settings.gopSize) &&
        Objects.equals(this.hrdBufferSize, vp9Settings.hrdBufferSize) &&
        Objects.equals(this.maxBitrate, vp9Settings.maxBitrate) &&
        Objects.equals(this.parControl, vp9Settings.parControl) &&
        Objects.equals(this.parDenominator, vp9Settings.parDenominator) &&
        Objects.equals(this.parNumerator, vp9Settings.parNumerator) &&
        Objects.equals(this.qualityTuningLevel, vp9Settings.qualityTuningLevel) &&
        Objects.equals(this.rateControlMode, vp9Settings.rateControlMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitrate, framerateControl, framerateConversionAlgorithm, framerateDenominator, framerateNumerator, gopSize, hrdBufferSize, maxBitrate, parControl, parDenominator, parNumerator, qualityTuningLevel, rateControlMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vp9Settings {\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    framerateControl: ").append(toIndentedString(framerateControl)).append("\n");
    sb.append("    framerateConversionAlgorithm: ").append(toIndentedString(framerateConversionAlgorithm)).append("\n");
    sb.append("    framerateDenominator: ").append(toIndentedString(framerateDenominator)).append("\n");
    sb.append("    framerateNumerator: ").append(toIndentedString(framerateNumerator)).append("\n");
    sb.append("    gopSize: ").append(toIndentedString(gopSize)).append("\n");
    sb.append("    hrdBufferSize: ").append(toIndentedString(hrdBufferSize)).append("\n");
    sb.append("    maxBitrate: ").append(toIndentedString(maxBitrate)).append("\n");
    sb.append("    parControl: ").append(toIndentedString(parControl)).append("\n");
    sb.append("    parDenominator: ").append(toIndentedString(parDenominator)).append("\n");
    sb.append("    parNumerator: ").append(toIndentedString(parNumerator)).append("\n");
    sb.append("    qualityTuningLevel: ").append(toIndentedString(qualityTuningLevel)).append("\n");
    sb.append("    rateControlMode: ").append(toIndentedString(rateControlMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bitrate");
    openapiFields.add("FramerateControl");
    openapiFields.add("FramerateConversionAlgorithm");
    openapiFields.add("FramerateDenominator");
    openapiFields.add("FramerateNumerator");
    openapiFields.add("GopSize");
    openapiFields.add("HrdBufferSize");
    openapiFields.add("MaxBitrate");
    openapiFields.add("ParControl");
    openapiFields.add("ParDenominator");
    openapiFields.add("ParNumerator");
    openapiFields.add("QualityTuningLevel");
    openapiFields.add("RateControlMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vp9Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vp9Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vp9Settings is not found in the empty JSON string", Vp9Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vp9Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vp9Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Bitrate`
      if (jsonObj.get("Bitrate") != null && !jsonObj.get("Bitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Bitrate"));
      }
      // validate the optional field `FramerateControl`
      if (jsonObj.get("FramerateControl") != null && !jsonObj.get("FramerateControl").isJsonNull()) {
        Vp9FramerateControl.validateJsonElement(jsonObj.get("FramerateControl"));
      }
      // validate the optional field `FramerateConversionAlgorithm`
      if (jsonObj.get("FramerateConversionAlgorithm") != null && !jsonObj.get("FramerateConversionAlgorithm").isJsonNull()) {
        Vp9FramerateConversionAlgorithm.validateJsonElement(jsonObj.get("FramerateConversionAlgorithm"));
      }
      // validate the optional field `FramerateDenominator`
      if (jsonObj.get("FramerateDenominator") != null && !jsonObj.get("FramerateDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateDenominator"));
      }
      // validate the optional field `FramerateNumerator`
      if (jsonObj.get("FramerateNumerator") != null && !jsonObj.get("FramerateNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateNumerator"));
      }
      // validate the optional field `GopSize`
      if (jsonObj.get("GopSize") != null && !jsonObj.get("GopSize").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("GopSize"));
      }
      // validate the optional field `HrdBufferSize`
      if (jsonObj.get("HrdBufferSize") != null && !jsonObj.get("HrdBufferSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HrdBufferSize"));
      }
      // validate the optional field `MaxBitrate`
      if (jsonObj.get("MaxBitrate") != null && !jsonObj.get("MaxBitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxBitrate"));
      }
      // validate the optional field `ParControl`
      if (jsonObj.get("ParControl") != null && !jsonObj.get("ParControl").isJsonNull()) {
        Vp9ParControl.validateJsonElement(jsonObj.get("ParControl"));
      }
      // validate the optional field `ParDenominator`
      if (jsonObj.get("ParDenominator") != null && !jsonObj.get("ParDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParDenominator"));
      }
      // validate the optional field `ParNumerator`
      if (jsonObj.get("ParNumerator") != null && !jsonObj.get("ParNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParNumerator"));
      }
      // validate the optional field `QualityTuningLevel`
      if (jsonObj.get("QualityTuningLevel") != null && !jsonObj.get("QualityTuningLevel").isJsonNull()) {
        Vp9QualityTuningLevel.validateJsonElement(jsonObj.get("QualityTuningLevel"));
      }
      // validate the optional field `RateControlMode`
      if (jsonObj.get("RateControlMode") != null && !jsonObj.get("RateControlMode").isJsonNull()) {
        Vp9RateControlMode.validateJsonElement(jsonObj.get("RateControlMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vp9Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vp9Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vp9Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vp9Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<Vp9Settings>() {
           @Override
           public void write(JsonWriter out, Vp9Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vp9Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vp9Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vp9Settings
   * @throws IOException if the JSON string is invalid with respect to Vp9Settings
   */
  public static Vp9Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vp9Settings.class);
  }

  /**
   * Convert an instance of Vp9Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

