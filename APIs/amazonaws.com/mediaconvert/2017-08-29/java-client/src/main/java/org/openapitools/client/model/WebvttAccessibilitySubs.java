/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * If the WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS&#x3D;\&quot;public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound\&quot; and AUTOSELECT&#x3D;\&quot;YES\&quot;. For DASH manifests, MediaConvert adds the following in the adaptation set for this track: &lt;Accessibility schemeIdUri&#x3D;\&quot;urn:mpeg:dash:role:2011\&quot; value&#x3D;\&quot;caption\&quot;/&gt;. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: &lt;Role schemeIDUri&#x3D;\&quot;urn:mpeg:dash:role:2011\&quot; value&#x3D;\&quot;subtitle\&quot;/&gt;.
 */
@JsonAdapter(WebvttAccessibilitySubs.Adapter.class)
public enum WebvttAccessibilitySubs {
  
  DISABLED("DISABLED"),
  
  ENABLED("ENABLED");

  private String value;

  WebvttAccessibilitySubs(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static WebvttAccessibilitySubs fromValue(String value) {
    for (WebvttAccessibilitySubs b : WebvttAccessibilitySubs.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<WebvttAccessibilitySubs> {
    @Override
    public void write(final JsonWriter jsonWriter, final WebvttAccessibilitySubs enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public WebvttAccessibilitySubs read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return WebvttAccessibilitySubs.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    WebvttAccessibilitySubs.fromValue(value);
  }
}

