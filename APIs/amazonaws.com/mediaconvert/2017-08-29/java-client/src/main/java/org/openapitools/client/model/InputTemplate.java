/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AdvancedInputFilter;
import org.openapitools.client.model.InputAdvancedInputFilterSettings;
import org.openapitools.client.model.InputCrop;
import org.openapitools.client.model.InputDeblockFilter;
import org.openapitools.client.model.InputDenoiseFilter;
import org.openapitools.client.model.InputFilterEnable;
import org.openapitools.client.model.InputImageInserter;
import org.openapitools.client.model.InputPosition;
import org.openapitools.client.model.InputPsiControl;
import org.openapitools.client.model.InputScanType;
import org.openapitools.client.model.InputTimecodeSource;
import org.openapitools.client.model.InputVideoSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specified video input in a template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputTemplate {
  public static final String SERIALIZED_NAME_ADVANCED_INPUT_FILTER = "AdvancedInputFilter";
  @SerializedName(SERIALIZED_NAME_ADVANCED_INPUT_FILTER)
  private AdvancedInputFilter advancedInputFilter;

  public static final String SERIALIZED_NAME_ADVANCED_INPUT_FILTER_SETTINGS = "AdvancedInputFilterSettings";
  @SerializedName(SERIALIZED_NAME_ADVANCED_INPUT_FILTER_SETTINGS)
  private InputAdvancedInputFilterSettings advancedInputFilterSettings;

  public static final String SERIALIZED_NAME_AUDIO_SELECTOR_GROUPS = "AudioSelectorGroups";
  @SerializedName(SERIALIZED_NAME_AUDIO_SELECTOR_GROUPS)
  private Map audioSelectorGroups;

  public static final String SERIALIZED_NAME_AUDIO_SELECTORS = "AudioSelectors";
  @SerializedName(SERIALIZED_NAME_AUDIO_SELECTORS)
  private Map audioSelectors;

  public static final String SERIALIZED_NAME_CAPTION_SELECTORS = "CaptionSelectors";
  @SerializedName(SERIALIZED_NAME_CAPTION_SELECTORS)
  private Map captionSelectors;

  public static final String SERIALIZED_NAME_CROP = "Crop";
  @SerializedName(SERIALIZED_NAME_CROP)
  private InputCrop crop;

  public static final String SERIALIZED_NAME_DEBLOCK_FILTER = "DeblockFilter";
  @SerializedName(SERIALIZED_NAME_DEBLOCK_FILTER)
  private InputDeblockFilter deblockFilter;

  public static final String SERIALIZED_NAME_DENOISE_FILTER = "DenoiseFilter";
  @SerializedName(SERIALIZED_NAME_DENOISE_FILTER)
  private InputDenoiseFilter denoiseFilter;

  public static final String SERIALIZED_NAME_DOLBY_VISION_METADATA_XML = "DolbyVisionMetadataXml";
  @SerializedName(SERIALIZED_NAME_DOLBY_VISION_METADATA_XML)
  private String dolbyVisionMetadataXml;

  public static final String SERIALIZED_NAME_FILTER_ENABLE = "FilterEnable";
  @SerializedName(SERIALIZED_NAME_FILTER_ENABLE)
  private InputFilterEnable filterEnable;

  public static final String SERIALIZED_NAME_FILTER_STRENGTH = "FilterStrength";
  @SerializedName(SERIALIZED_NAME_FILTER_STRENGTH)
  private Integer filterStrength;

  public static final String SERIALIZED_NAME_IMAGE_INSERTER = "ImageInserter";
  @SerializedName(SERIALIZED_NAME_IMAGE_INSERTER)
  private InputImageInserter imageInserter;

  public static final String SERIALIZED_NAME_INPUT_CLIPPINGS = "InputClippings";
  @SerializedName(SERIALIZED_NAME_INPUT_CLIPPINGS)
  private List inputClippings;

  public static final String SERIALIZED_NAME_INPUT_SCAN_TYPE = "InputScanType";
  @SerializedName(SERIALIZED_NAME_INPUT_SCAN_TYPE)
  private InputScanType inputScanType;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private InputPosition position;

  public static final String SERIALIZED_NAME_PROGRAM_NUMBER = "ProgramNumber";
  @SerializedName(SERIALIZED_NAME_PROGRAM_NUMBER)
  private Integer programNumber;

  public static final String SERIALIZED_NAME_PSI_CONTROL = "PsiControl";
  @SerializedName(SERIALIZED_NAME_PSI_CONTROL)
  private InputPsiControl psiControl;

  public static final String SERIALIZED_NAME_TIMECODE_SOURCE = "TimecodeSource";
  @SerializedName(SERIALIZED_NAME_TIMECODE_SOURCE)
  private InputTimecodeSource timecodeSource;

  public static final String SERIALIZED_NAME_TIMECODE_START = "TimecodeStart";
  @SerializedName(SERIALIZED_NAME_TIMECODE_START)
  private String timecodeStart;

  public static final String SERIALIZED_NAME_VIDEO_SELECTOR = "VideoSelector";
  @SerializedName(SERIALIZED_NAME_VIDEO_SELECTOR)
  private InputVideoSelector videoSelector;

  public InputTemplate() {
  }

  public InputTemplate advancedInputFilter(AdvancedInputFilter advancedInputFilter) {
    this.advancedInputFilter = advancedInputFilter;
    return this;
  }

  /**
   * Get advancedInputFilter
   * @return advancedInputFilter
   */
  @javax.annotation.Nullable
  public AdvancedInputFilter getAdvancedInputFilter() {
    return advancedInputFilter;
  }

  public void setAdvancedInputFilter(AdvancedInputFilter advancedInputFilter) {
    this.advancedInputFilter = advancedInputFilter;
  }


  public InputTemplate advancedInputFilterSettings(InputAdvancedInputFilterSettings advancedInputFilterSettings) {
    this.advancedInputFilterSettings = advancedInputFilterSettings;
    return this;
  }

  /**
   * Get advancedInputFilterSettings
   * @return advancedInputFilterSettings
   */
  @javax.annotation.Nullable
  public InputAdvancedInputFilterSettings getAdvancedInputFilterSettings() {
    return advancedInputFilterSettings;
  }

  public void setAdvancedInputFilterSettings(InputAdvancedInputFilterSettings advancedInputFilterSettings) {
    this.advancedInputFilterSettings = advancedInputFilterSettings;
  }


  public InputTemplate audioSelectorGroups(Map audioSelectorGroups) {
    this.audioSelectorGroups = audioSelectorGroups;
    return this;
  }

  /**
   * Get audioSelectorGroups
   * @return audioSelectorGroups
   */
  @javax.annotation.Nullable
  public Map getAudioSelectorGroups() {
    return audioSelectorGroups;
  }

  public void setAudioSelectorGroups(Map audioSelectorGroups) {
    this.audioSelectorGroups = audioSelectorGroups;
  }


  public InputTemplate audioSelectors(Map audioSelectors) {
    this.audioSelectors = audioSelectors;
    return this;
  }

  /**
   * Get audioSelectors
   * @return audioSelectors
   */
  @javax.annotation.Nullable
  public Map getAudioSelectors() {
    return audioSelectors;
  }

  public void setAudioSelectors(Map audioSelectors) {
    this.audioSelectors = audioSelectors;
  }


  public InputTemplate captionSelectors(Map captionSelectors) {
    this.captionSelectors = captionSelectors;
    return this;
  }

  /**
   * Get captionSelectors
   * @return captionSelectors
   */
  @javax.annotation.Nullable
  public Map getCaptionSelectors() {
    return captionSelectors;
  }

  public void setCaptionSelectors(Map captionSelectors) {
    this.captionSelectors = captionSelectors;
  }


  public InputTemplate crop(InputCrop crop) {
    this.crop = crop;
    return this;
  }

  /**
   * Get crop
   * @return crop
   */
  @javax.annotation.Nullable
  public InputCrop getCrop() {
    return crop;
  }

  public void setCrop(InputCrop crop) {
    this.crop = crop;
  }


  public InputTemplate deblockFilter(InputDeblockFilter deblockFilter) {
    this.deblockFilter = deblockFilter;
    return this;
  }

  /**
   * Get deblockFilter
   * @return deblockFilter
   */
  @javax.annotation.Nullable
  public InputDeblockFilter getDeblockFilter() {
    return deblockFilter;
  }

  public void setDeblockFilter(InputDeblockFilter deblockFilter) {
    this.deblockFilter = deblockFilter;
  }


  public InputTemplate denoiseFilter(InputDenoiseFilter denoiseFilter) {
    this.denoiseFilter = denoiseFilter;
    return this;
  }

  /**
   * Get denoiseFilter
   * @return denoiseFilter
   */
  @javax.annotation.Nullable
  public InputDenoiseFilter getDenoiseFilter() {
    return denoiseFilter;
  }

  public void setDenoiseFilter(InputDenoiseFilter denoiseFilter) {
    this.denoiseFilter = denoiseFilter;
  }


  public InputTemplate dolbyVisionMetadataXml(String dolbyVisionMetadataXml) {
    this.dolbyVisionMetadataXml = dolbyVisionMetadataXml;
    return this;
  }

  /**
   * Get dolbyVisionMetadataXml
   * @return dolbyVisionMetadataXml
   */
  @javax.annotation.Nullable
  public String getDolbyVisionMetadataXml() {
    return dolbyVisionMetadataXml;
  }

  public void setDolbyVisionMetadataXml(String dolbyVisionMetadataXml) {
    this.dolbyVisionMetadataXml = dolbyVisionMetadataXml;
  }


  public InputTemplate filterEnable(InputFilterEnable filterEnable) {
    this.filterEnable = filterEnable;
    return this;
  }

  /**
   * Get filterEnable
   * @return filterEnable
   */
  @javax.annotation.Nullable
  public InputFilterEnable getFilterEnable() {
    return filterEnable;
  }

  public void setFilterEnable(InputFilterEnable filterEnable) {
    this.filterEnable = filterEnable;
  }


  public InputTemplate filterStrength(Integer filterStrength) {
    this.filterStrength = filterStrength;
    return this;
  }

  /**
   * Get filterStrength
   * @return filterStrength
   */
  @javax.annotation.Nullable
  public Integer getFilterStrength() {
    return filterStrength;
  }

  public void setFilterStrength(Integer filterStrength) {
    this.filterStrength = filterStrength;
  }


  public InputTemplate imageInserter(InputImageInserter imageInserter) {
    this.imageInserter = imageInserter;
    return this;
  }

  /**
   * Get imageInserter
   * @return imageInserter
   */
  @javax.annotation.Nullable
  public InputImageInserter getImageInserter() {
    return imageInserter;
  }

  public void setImageInserter(InputImageInserter imageInserter) {
    this.imageInserter = imageInserter;
  }


  public InputTemplate inputClippings(List inputClippings) {
    this.inputClippings = inputClippings;
    return this;
  }

  /**
   * Get inputClippings
   * @return inputClippings
   */
  @javax.annotation.Nullable
  public List getInputClippings() {
    return inputClippings;
  }

  public void setInputClippings(List inputClippings) {
    this.inputClippings = inputClippings;
  }


  public InputTemplate inputScanType(InputScanType inputScanType) {
    this.inputScanType = inputScanType;
    return this;
  }

  /**
   * Get inputScanType
   * @return inputScanType
   */
  @javax.annotation.Nullable
  public InputScanType getInputScanType() {
    return inputScanType;
  }

  public void setInputScanType(InputScanType inputScanType) {
    this.inputScanType = inputScanType;
  }


  public InputTemplate position(InputPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public InputPosition getPosition() {
    return position;
  }

  public void setPosition(InputPosition position) {
    this.position = position;
  }


  public InputTemplate programNumber(Integer programNumber) {
    this.programNumber = programNumber;
    return this;
  }

  /**
   * Get programNumber
   * @return programNumber
   */
  @javax.annotation.Nullable
  public Integer getProgramNumber() {
    return programNumber;
  }

  public void setProgramNumber(Integer programNumber) {
    this.programNumber = programNumber;
  }


  public InputTemplate psiControl(InputPsiControl psiControl) {
    this.psiControl = psiControl;
    return this;
  }

  /**
   * Get psiControl
   * @return psiControl
   */
  @javax.annotation.Nullable
  public InputPsiControl getPsiControl() {
    return psiControl;
  }

  public void setPsiControl(InputPsiControl psiControl) {
    this.psiControl = psiControl;
  }


  public InputTemplate timecodeSource(InputTimecodeSource timecodeSource) {
    this.timecodeSource = timecodeSource;
    return this;
  }

  /**
   * Get timecodeSource
   * @return timecodeSource
   */
  @javax.annotation.Nullable
  public InputTimecodeSource getTimecodeSource() {
    return timecodeSource;
  }

  public void setTimecodeSource(InputTimecodeSource timecodeSource) {
    this.timecodeSource = timecodeSource;
  }


  public InputTemplate timecodeStart(String timecodeStart) {
    this.timecodeStart = timecodeStart;
    return this;
  }

  /**
   * Get timecodeStart
   * @return timecodeStart
   */
  @javax.annotation.Nullable
  public String getTimecodeStart() {
    return timecodeStart;
  }

  public void setTimecodeStart(String timecodeStart) {
    this.timecodeStart = timecodeStart;
  }


  public InputTemplate videoSelector(InputVideoSelector videoSelector) {
    this.videoSelector = videoSelector;
    return this;
  }

  /**
   * Get videoSelector
   * @return videoSelector
   */
  @javax.annotation.Nullable
  public InputVideoSelector getVideoSelector() {
    return videoSelector;
  }

  public void setVideoSelector(InputVideoSelector videoSelector) {
    this.videoSelector = videoSelector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputTemplate inputTemplate = (InputTemplate) o;
    return Objects.equals(this.advancedInputFilter, inputTemplate.advancedInputFilter) &&
        Objects.equals(this.advancedInputFilterSettings, inputTemplate.advancedInputFilterSettings) &&
        Objects.equals(this.audioSelectorGroups, inputTemplate.audioSelectorGroups) &&
        Objects.equals(this.audioSelectors, inputTemplate.audioSelectors) &&
        Objects.equals(this.captionSelectors, inputTemplate.captionSelectors) &&
        Objects.equals(this.crop, inputTemplate.crop) &&
        Objects.equals(this.deblockFilter, inputTemplate.deblockFilter) &&
        Objects.equals(this.denoiseFilter, inputTemplate.denoiseFilter) &&
        Objects.equals(this.dolbyVisionMetadataXml, inputTemplate.dolbyVisionMetadataXml) &&
        Objects.equals(this.filterEnable, inputTemplate.filterEnable) &&
        Objects.equals(this.filterStrength, inputTemplate.filterStrength) &&
        Objects.equals(this.imageInserter, inputTemplate.imageInserter) &&
        Objects.equals(this.inputClippings, inputTemplate.inputClippings) &&
        Objects.equals(this.inputScanType, inputTemplate.inputScanType) &&
        Objects.equals(this.position, inputTemplate.position) &&
        Objects.equals(this.programNumber, inputTemplate.programNumber) &&
        Objects.equals(this.psiControl, inputTemplate.psiControl) &&
        Objects.equals(this.timecodeSource, inputTemplate.timecodeSource) &&
        Objects.equals(this.timecodeStart, inputTemplate.timecodeStart) &&
        Objects.equals(this.videoSelector, inputTemplate.videoSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedInputFilter, advancedInputFilterSettings, audioSelectorGroups, audioSelectors, captionSelectors, crop, deblockFilter, denoiseFilter, dolbyVisionMetadataXml, filterEnable, filterStrength, imageInserter, inputClippings, inputScanType, position, programNumber, psiControl, timecodeSource, timecodeStart, videoSelector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputTemplate {\n");
    sb.append("    advancedInputFilter: ").append(toIndentedString(advancedInputFilter)).append("\n");
    sb.append("    advancedInputFilterSettings: ").append(toIndentedString(advancedInputFilterSettings)).append("\n");
    sb.append("    audioSelectorGroups: ").append(toIndentedString(audioSelectorGroups)).append("\n");
    sb.append("    audioSelectors: ").append(toIndentedString(audioSelectors)).append("\n");
    sb.append("    captionSelectors: ").append(toIndentedString(captionSelectors)).append("\n");
    sb.append("    crop: ").append(toIndentedString(crop)).append("\n");
    sb.append("    deblockFilter: ").append(toIndentedString(deblockFilter)).append("\n");
    sb.append("    denoiseFilter: ").append(toIndentedString(denoiseFilter)).append("\n");
    sb.append("    dolbyVisionMetadataXml: ").append(toIndentedString(dolbyVisionMetadataXml)).append("\n");
    sb.append("    filterEnable: ").append(toIndentedString(filterEnable)).append("\n");
    sb.append("    filterStrength: ").append(toIndentedString(filterStrength)).append("\n");
    sb.append("    imageInserter: ").append(toIndentedString(imageInserter)).append("\n");
    sb.append("    inputClippings: ").append(toIndentedString(inputClippings)).append("\n");
    sb.append("    inputScanType: ").append(toIndentedString(inputScanType)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    programNumber: ").append(toIndentedString(programNumber)).append("\n");
    sb.append("    psiControl: ").append(toIndentedString(psiControl)).append("\n");
    sb.append("    timecodeSource: ").append(toIndentedString(timecodeSource)).append("\n");
    sb.append("    timecodeStart: ").append(toIndentedString(timecodeStart)).append("\n");
    sb.append("    videoSelector: ").append(toIndentedString(videoSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdvancedInputFilter");
    openapiFields.add("AdvancedInputFilterSettings");
    openapiFields.add("AudioSelectorGroups");
    openapiFields.add("AudioSelectors");
    openapiFields.add("CaptionSelectors");
    openapiFields.add("Crop");
    openapiFields.add("DeblockFilter");
    openapiFields.add("DenoiseFilter");
    openapiFields.add("DolbyVisionMetadataXml");
    openapiFields.add("FilterEnable");
    openapiFields.add("FilterStrength");
    openapiFields.add("ImageInserter");
    openapiFields.add("InputClippings");
    openapiFields.add("InputScanType");
    openapiFields.add("Position");
    openapiFields.add("ProgramNumber");
    openapiFields.add("PsiControl");
    openapiFields.add("TimecodeSource");
    openapiFields.add("TimecodeStart");
    openapiFields.add("VideoSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputTemplate is not found in the empty JSON string", InputTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdvancedInputFilter`
      if (jsonObj.get("AdvancedInputFilter") != null && !jsonObj.get("AdvancedInputFilter").isJsonNull()) {
        AdvancedInputFilter.validateJsonElement(jsonObj.get("AdvancedInputFilter"));
      }
      // validate the optional field `AdvancedInputFilterSettings`
      if (jsonObj.get("AdvancedInputFilterSettings") != null && !jsonObj.get("AdvancedInputFilterSettings").isJsonNull()) {
        InputAdvancedInputFilterSettings.validateJsonElement(jsonObj.get("AdvancedInputFilterSettings"));
      }
      // validate the optional field `AudioSelectorGroups`
      if (jsonObj.get("AudioSelectorGroups") != null && !jsonObj.get("AudioSelectorGroups").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AudioSelectorGroups"));
      }
      // validate the optional field `AudioSelectors`
      if (jsonObj.get("AudioSelectors") != null && !jsonObj.get("AudioSelectors").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AudioSelectors"));
      }
      // validate the optional field `CaptionSelectors`
      if (jsonObj.get("CaptionSelectors") != null && !jsonObj.get("CaptionSelectors").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("CaptionSelectors"));
      }
      // validate the optional field `Crop`
      if (jsonObj.get("Crop") != null && !jsonObj.get("Crop").isJsonNull()) {
        InputCrop.validateJsonElement(jsonObj.get("Crop"));
      }
      // validate the optional field `DeblockFilter`
      if (jsonObj.get("DeblockFilter") != null && !jsonObj.get("DeblockFilter").isJsonNull()) {
        InputDeblockFilter.validateJsonElement(jsonObj.get("DeblockFilter"));
      }
      // validate the optional field `DenoiseFilter`
      if (jsonObj.get("DenoiseFilter") != null && !jsonObj.get("DenoiseFilter").isJsonNull()) {
        InputDenoiseFilter.validateJsonElement(jsonObj.get("DenoiseFilter"));
      }
      // validate the optional field `DolbyVisionMetadataXml`
      if (jsonObj.get("DolbyVisionMetadataXml") != null && !jsonObj.get("DolbyVisionMetadataXml").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DolbyVisionMetadataXml"));
      }
      // validate the optional field `FilterEnable`
      if (jsonObj.get("FilterEnable") != null && !jsonObj.get("FilterEnable").isJsonNull()) {
        InputFilterEnable.validateJsonElement(jsonObj.get("FilterEnable"));
      }
      // validate the optional field `FilterStrength`
      if (jsonObj.get("FilterStrength") != null && !jsonObj.get("FilterStrength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FilterStrength"));
      }
      // validate the optional field `ImageInserter`
      if (jsonObj.get("ImageInserter") != null && !jsonObj.get("ImageInserter").isJsonNull()) {
        InputImageInserter.validateJsonElement(jsonObj.get("ImageInserter"));
      }
      // validate the optional field `InputClippings`
      if (jsonObj.get("InputClippings") != null && !jsonObj.get("InputClippings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InputClippings"));
      }
      // validate the optional field `InputScanType`
      if (jsonObj.get("InputScanType") != null && !jsonObj.get("InputScanType").isJsonNull()) {
        InputScanType.validateJsonElement(jsonObj.get("InputScanType"));
      }
      // validate the optional field `Position`
      if (jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) {
        InputPosition.validateJsonElement(jsonObj.get("Position"));
      }
      // validate the optional field `ProgramNumber`
      if (jsonObj.get("ProgramNumber") != null && !jsonObj.get("ProgramNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgramNumber"));
      }
      // validate the optional field `PsiControl`
      if (jsonObj.get("PsiControl") != null && !jsonObj.get("PsiControl").isJsonNull()) {
        InputPsiControl.validateJsonElement(jsonObj.get("PsiControl"));
      }
      // validate the optional field `TimecodeSource`
      if (jsonObj.get("TimecodeSource") != null && !jsonObj.get("TimecodeSource").isJsonNull()) {
        InputTimecodeSource.validateJsonElement(jsonObj.get("TimecodeSource"));
      }
      // validate the optional field `TimecodeStart`
      if (jsonObj.get("TimecodeStart") != null && !jsonObj.get("TimecodeStart").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimecodeStart"));
      }
      // validate the optional field `VideoSelector`
      if (jsonObj.get("VideoSelector") != null && !jsonObj.get("VideoSelector").isJsonNull()) {
        InputVideoSelector.validateJsonElement(jsonObj.get("VideoSelector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<InputTemplate>() {
           @Override
           public void write(JsonWriter out, InputTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputTemplate
   * @throws IOException if the JSON string is invalid with respect to InputTemplate
   */
  public static InputTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputTemplate.class);
  }

  /**
   * Convert an instance of InputTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

