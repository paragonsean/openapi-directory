/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify the VC3 class to choose the quality characteristics for this output. VC3 class, together with the settings Framerate (framerateNumerator and framerateDenominator) and Resolution (height and width), determine your output bitrate. For example, say that your video resolution is 1920x1080 and your framerate is 29.97. Then Class 145 gives you an output with a bitrate of approximately 145 Mbps and Class 220 gives you and output with a bitrate of approximately 220 Mbps. VC3 class also specifies the color bit depth of your output.
 */
@JsonAdapter(Vc3Class.Adapter.class)
public enum Vc3Class {
  
  _145_8_BIT("CLASS_145_8BIT"),
  
  _220_8_BIT("CLASS_220_8BIT"),
  
  _220_10_BIT("CLASS_220_10BIT");

  private String value;

  Vc3Class(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Vc3Class fromValue(String value) {
    for (Vc3Class b : Vc3Class.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Vc3Class> {
    @Override
    public void write(final JsonWriter jsonWriter, final Vc3Class enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Vc3Class read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Vc3Class.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Vc3Class.fromValue(value);
  }
}

