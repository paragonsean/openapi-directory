/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify the video sample composition time offset mode in the output fMP4 TRUN box. For wider player compatibility, set Video composition offsets to Unsigned or leave blank. The earliest presentation time may be greater than zero, and sample composition time offsets will increment using unsigned integers. For strict fMP4 video and audio timing, set Video composition offsets to Signed. The earliest presentation time will be equal to zero, and sample composition time offsets will increment using signed integers.
 */
@JsonAdapter(DashIsoVideoCompositionOffsets.Adapter.class)
public enum DashIsoVideoCompositionOffsets {
  
  SIGNED("SIGNED"),
  
  UNSIGNED("UNSIGNED");

  private String value;

  DashIsoVideoCompositionOffsets(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DashIsoVideoCompositionOffsets fromValue(String value) {
    for (DashIsoVideoCompositionOffsets b : DashIsoVideoCompositionOffsets.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DashIsoVideoCompositionOffsets> {
    @Override
    public void write(final JsonWriter jsonWriter, final DashIsoVideoCompositionOffsets enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DashIsoVideoCompositionOffsets read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DashIsoVideoCompositionOffsets.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DashIsoVideoCompositionOffsets.fromValue(value);
  }
}

