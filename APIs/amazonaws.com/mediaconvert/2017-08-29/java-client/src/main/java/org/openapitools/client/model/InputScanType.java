/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * When you have a progressive segmented frame (PsF) input, use this setting to flag the input as PsF. MediaConvert doesn&#39;t automatically detect PsF. Therefore, flagging your input as PsF results in better preservation of video quality when you do deinterlacing and frame rate conversion. If you don&#39;t specify, the default value is Auto. Auto is the correct setting for all inputs that are not PsF. Don&#39;t set this value to PsF when your input is interlaced. Doing so creates horizontal interlacing artifacts.
 */
@JsonAdapter(InputScanType.Adapter.class)
public enum InputScanType {
  
  AUTO("AUTO"),
  
  PSF("PSF");

  private String value;

  InputScanType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static InputScanType fromValue(String value) {
    for (InputScanType b : InputScanType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<InputScanType> {
    @Override
    public void write(final JsonWriter jsonWriter, final InputScanType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public InputScanType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return InputScanType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    InputScanType.fromValue(value);
  }
}

