/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Optional. Choose Include to have MediaConvert mark up your DASH manifest with &lt;Accessibility&gt; elements for embedded 608 captions. This markup isn&#39;t generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude, to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest: &lt;Accessibility schemeIdUri&#x3D;\&quot;urn:scte:dash:cc:cea-608:2015\&quot; value&#x3D;\&quot;CC1&#x3D;eng\&quot;/&gt;
 */
@JsonAdapter(MpdAccessibilityCaptionHints.Adapter.class)
public enum MpdAccessibilityCaptionHints {
  
  INCLUDE("INCLUDE"),
  
  EXCLUDE("EXCLUDE");

  private String value;

  MpdAccessibilityCaptionHints(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MpdAccessibilityCaptionHints fromValue(String value) {
    for (MpdAccessibilityCaptionHints b : MpdAccessibilityCaptionHints.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MpdAccessibilityCaptionHints> {
    @Override
    public void write(final JsonWriter jsonWriter, final MpdAccessibilityCaptionHints enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MpdAccessibilityCaptionHints read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MpdAccessibilityCaptionHints.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    MpdAccessibilityCaptionHints.fromValue(value);
  }
}

