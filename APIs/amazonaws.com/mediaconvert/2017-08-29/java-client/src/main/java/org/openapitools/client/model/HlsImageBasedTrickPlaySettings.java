/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HlsIntervalCadence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsImageBasedTrickPlaySettings {
  public static final String SERIALIZED_NAME_INTERVAL_CADENCE = "IntervalCadence";
  @SerializedName(SERIALIZED_NAME_INTERVAL_CADENCE)
  private HlsIntervalCadence intervalCadence;

  public static final String SERIALIZED_NAME_THUMBNAIL_HEIGHT = "ThumbnailHeight";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_HEIGHT)
  private Integer thumbnailHeight;

  public static final String SERIALIZED_NAME_THUMBNAIL_INTERVAL = "ThumbnailInterval";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_INTERVAL)
  private Double thumbnailInterval;

  public static final String SERIALIZED_NAME_THUMBNAIL_WIDTH = "ThumbnailWidth";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_WIDTH)
  private Integer thumbnailWidth;

  public static final String SERIALIZED_NAME_TILE_HEIGHT = "TileHeight";
  @SerializedName(SERIALIZED_NAME_TILE_HEIGHT)
  private Integer tileHeight;

  public static final String SERIALIZED_NAME_TILE_WIDTH = "TileWidth";
  @SerializedName(SERIALIZED_NAME_TILE_WIDTH)
  private Integer tileWidth;

  public HlsImageBasedTrickPlaySettings() {
  }

  public HlsImageBasedTrickPlaySettings intervalCadence(HlsIntervalCadence intervalCadence) {
    this.intervalCadence = intervalCadence;
    return this;
  }

  /**
   * Get intervalCadence
   * @return intervalCadence
   */
  @javax.annotation.Nullable
  public HlsIntervalCadence getIntervalCadence() {
    return intervalCadence;
  }

  public void setIntervalCadence(HlsIntervalCadence intervalCadence) {
    this.intervalCadence = intervalCadence;
  }


  public HlsImageBasedTrickPlaySettings thumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
    return this;
  }

  /**
   * Get thumbnailHeight
   * @return thumbnailHeight
   */
  @javax.annotation.Nullable
  public Integer getThumbnailHeight() {
    return thumbnailHeight;
  }

  public void setThumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
  }


  public HlsImageBasedTrickPlaySettings thumbnailInterval(Double thumbnailInterval) {
    this.thumbnailInterval = thumbnailInterval;
    return this;
  }

  /**
   * Get thumbnailInterval
   * @return thumbnailInterval
   */
  @javax.annotation.Nullable
  public Double getThumbnailInterval() {
    return thumbnailInterval;
  }

  public void setThumbnailInterval(Double thumbnailInterval) {
    this.thumbnailInterval = thumbnailInterval;
  }


  public HlsImageBasedTrickPlaySettings thumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
    return this;
  }

  /**
   * Get thumbnailWidth
   * @return thumbnailWidth
   */
  @javax.annotation.Nullable
  public Integer getThumbnailWidth() {
    return thumbnailWidth;
  }

  public void setThumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
  }


  public HlsImageBasedTrickPlaySettings tileHeight(Integer tileHeight) {
    this.tileHeight = tileHeight;
    return this;
  }

  /**
   * Get tileHeight
   * @return tileHeight
   */
  @javax.annotation.Nullable
  public Integer getTileHeight() {
    return tileHeight;
  }

  public void setTileHeight(Integer tileHeight) {
    this.tileHeight = tileHeight;
  }


  public HlsImageBasedTrickPlaySettings tileWidth(Integer tileWidth) {
    this.tileWidth = tileWidth;
    return this;
  }

  /**
   * Get tileWidth
   * @return tileWidth
   */
  @javax.annotation.Nullable
  public Integer getTileWidth() {
    return tileWidth;
  }

  public void setTileWidth(Integer tileWidth) {
    this.tileWidth = tileWidth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsImageBasedTrickPlaySettings hlsImageBasedTrickPlaySettings = (HlsImageBasedTrickPlaySettings) o;
    return Objects.equals(this.intervalCadence, hlsImageBasedTrickPlaySettings.intervalCadence) &&
        Objects.equals(this.thumbnailHeight, hlsImageBasedTrickPlaySettings.thumbnailHeight) &&
        Objects.equals(this.thumbnailInterval, hlsImageBasedTrickPlaySettings.thumbnailInterval) &&
        Objects.equals(this.thumbnailWidth, hlsImageBasedTrickPlaySettings.thumbnailWidth) &&
        Objects.equals(this.tileHeight, hlsImageBasedTrickPlaySettings.tileHeight) &&
        Objects.equals(this.tileWidth, hlsImageBasedTrickPlaySettings.tileWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intervalCadence, thumbnailHeight, thumbnailInterval, thumbnailWidth, tileHeight, tileWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsImageBasedTrickPlaySettings {\n");
    sb.append("    intervalCadence: ").append(toIndentedString(intervalCadence)).append("\n");
    sb.append("    thumbnailHeight: ").append(toIndentedString(thumbnailHeight)).append("\n");
    sb.append("    thumbnailInterval: ").append(toIndentedString(thumbnailInterval)).append("\n");
    sb.append("    thumbnailWidth: ").append(toIndentedString(thumbnailWidth)).append("\n");
    sb.append("    tileHeight: ").append(toIndentedString(tileHeight)).append("\n");
    sb.append("    tileWidth: ").append(toIndentedString(tileWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntervalCadence");
    openapiFields.add("ThumbnailHeight");
    openapiFields.add("ThumbnailInterval");
    openapiFields.add("ThumbnailWidth");
    openapiFields.add("TileHeight");
    openapiFields.add("TileWidth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsImageBasedTrickPlaySettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsImageBasedTrickPlaySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsImageBasedTrickPlaySettings is not found in the empty JSON string", HlsImageBasedTrickPlaySettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsImageBasedTrickPlaySettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsImageBasedTrickPlaySettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IntervalCadence`
      if (jsonObj.get("IntervalCadence") != null && !jsonObj.get("IntervalCadence").isJsonNull()) {
        HlsIntervalCadence.validateJsonElement(jsonObj.get("IntervalCadence"));
      }
      // validate the optional field `ThumbnailHeight`
      if (jsonObj.get("ThumbnailHeight") != null && !jsonObj.get("ThumbnailHeight").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ThumbnailHeight"));
      }
      // validate the optional field `ThumbnailInterval`
      if (jsonObj.get("ThumbnailInterval") != null && !jsonObj.get("ThumbnailInterval").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ThumbnailInterval"));
      }
      // validate the optional field `ThumbnailWidth`
      if (jsonObj.get("ThumbnailWidth") != null && !jsonObj.get("ThumbnailWidth").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ThumbnailWidth"));
      }
      // validate the optional field `TileHeight`
      if (jsonObj.get("TileHeight") != null && !jsonObj.get("TileHeight").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TileHeight"));
      }
      // validate the optional field `TileWidth`
      if (jsonObj.get("TileWidth") != null && !jsonObj.get("TileWidth").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TileWidth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsImageBasedTrickPlaySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsImageBasedTrickPlaySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsImageBasedTrickPlaySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsImageBasedTrickPlaySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsImageBasedTrickPlaySettings>() {
           @Override
           public void write(JsonWriter out, HlsImageBasedTrickPlaySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsImageBasedTrickPlaySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsImageBasedTrickPlaySettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsImageBasedTrickPlaySettings
   * @throws IOException if the JSON string is invalid with respect to HlsImageBasedTrickPlaySettings
   */
  public static HlsImageBasedTrickPlaySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsImageBasedTrickPlaySettings.class);
  }

  /**
   * Convert an instance of HlsImageBasedTrickPlaySettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

