/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * If your input video has accurate color space metadata, or if you don&#39;t know about color space: Keep the default value, Follow. MediaConvert will automatically detect your input color space. If your input video has metadata indicating the wrong color space, or has missing metadata: Specify the accurate color space here. If your input video is HDR 10 and the SMPTE ST 2086 Mastering Display Color Volume static metadata isn&#39;t present in your video stream, or if that metadata is present but not accurate: Choose Force HDR 10. Specify correct values in the input HDR 10 metadata settings. For more information about HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr. When you specify an input color space, MediaConvert uses the following color space metadata, which includes color primaries, transfer characteristics, and matrix coefficients:  * HDR 10: BT.2020, PQ, BT.2020 non-constant  * HLG 2020: BT.2020, HLG, BT.2020 non-constant  * P3DCI (Theater): DCIP3, SMPTE 428M, BT.709  * P3D65 (SDR): Display P3, sRGB, BT.709  * P3D65 (HDR): Display P3, PQ, BT.709
 */
@JsonAdapter(ColorSpace.Adapter.class)
public enum ColorSpace {
  
  FOLLOW("FOLLOW"),
  
  REC_601("REC_601"),
  
  REC_709("REC_709"),
  
  HDR10("HDR10"),
  
  HLG_2020("HLG_2020"),
  
  P3_DCI("P3DCI"),
  
  P3_D65_SDR("P3D65_SDR"),
  
  P3_D65_HDR("P3D65_HDR");

  private String value;

  ColorSpace(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ColorSpace fromValue(String value) {
    for (ColorSpace b : ColorSpace.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ColorSpace> {
    @Override
    public void write(final JsonWriter jsonWriter, final ColorSpace enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ColorSpace read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ColorSpace.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ColorSpace.fromValue(value);
  }
}

