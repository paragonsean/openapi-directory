/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CmfcAudioDuration;
import org.openapitools.client.model.Mp4CslgAtom;
import org.openapitools.client.model.Mp4FreeSpaceBox;
import org.openapitools.client.model.Mp4MoovPlacement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainerSettingsMp4Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerSettingsMp4Settings {
  public static final String SERIALIZED_NAME_AUDIO_DURATION = "AudioDuration";
  @SerializedName(SERIALIZED_NAME_AUDIO_DURATION)
  private CmfcAudioDuration audioDuration;

  public static final String SERIALIZED_NAME_CSLG_ATOM = "CslgAtom";
  @SerializedName(SERIALIZED_NAME_CSLG_ATOM)
  private Mp4CslgAtom cslgAtom;

  public static final String SERIALIZED_NAME_CTTS_VERSION = "CttsVersion";
  @SerializedName(SERIALIZED_NAME_CTTS_VERSION)
  private Integer cttsVersion;

  public static final String SERIALIZED_NAME_FREE_SPACE_BOX = "FreeSpaceBox";
  @SerializedName(SERIALIZED_NAME_FREE_SPACE_BOX)
  private Mp4FreeSpaceBox freeSpaceBox;

  public static final String SERIALIZED_NAME_MOOV_PLACEMENT = "MoovPlacement";
  @SerializedName(SERIALIZED_NAME_MOOV_PLACEMENT)
  private Mp4MoovPlacement moovPlacement;

  public static final String SERIALIZED_NAME_MP4_MAJOR_BRAND = "Mp4MajorBrand";
  @SerializedName(SERIALIZED_NAME_MP4_MAJOR_BRAND)
  private String mp4MajorBrand;

  public ContainerSettingsMp4Settings() {
  }

  public ContainerSettingsMp4Settings audioDuration(CmfcAudioDuration audioDuration) {
    this.audioDuration = audioDuration;
    return this;
  }

  /**
   * Get audioDuration
   * @return audioDuration
   */
  @javax.annotation.Nullable
  public CmfcAudioDuration getAudioDuration() {
    return audioDuration;
  }

  public void setAudioDuration(CmfcAudioDuration audioDuration) {
    this.audioDuration = audioDuration;
  }


  public ContainerSettingsMp4Settings cslgAtom(Mp4CslgAtom cslgAtom) {
    this.cslgAtom = cslgAtom;
    return this;
  }

  /**
   * Get cslgAtom
   * @return cslgAtom
   */
  @javax.annotation.Nullable
  public Mp4CslgAtom getCslgAtom() {
    return cslgAtom;
  }

  public void setCslgAtom(Mp4CslgAtom cslgAtom) {
    this.cslgAtom = cslgAtom;
  }


  public ContainerSettingsMp4Settings cttsVersion(Integer cttsVersion) {
    this.cttsVersion = cttsVersion;
    return this;
  }

  /**
   * Get cttsVersion
   * @return cttsVersion
   */
  @javax.annotation.Nullable
  public Integer getCttsVersion() {
    return cttsVersion;
  }

  public void setCttsVersion(Integer cttsVersion) {
    this.cttsVersion = cttsVersion;
  }


  public ContainerSettingsMp4Settings freeSpaceBox(Mp4FreeSpaceBox freeSpaceBox) {
    this.freeSpaceBox = freeSpaceBox;
    return this;
  }

  /**
   * Get freeSpaceBox
   * @return freeSpaceBox
   */
  @javax.annotation.Nullable
  public Mp4FreeSpaceBox getFreeSpaceBox() {
    return freeSpaceBox;
  }

  public void setFreeSpaceBox(Mp4FreeSpaceBox freeSpaceBox) {
    this.freeSpaceBox = freeSpaceBox;
  }


  public ContainerSettingsMp4Settings moovPlacement(Mp4MoovPlacement moovPlacement) {
    this.moovPlacement = moovPlacement;
    return this;
  }

  /**
   * Get moovPlacement
   * @return moovPlacement
   */
  @javax.annotation.Nullable
  public Mp4MoovPlacement getMoovPlacement() {
    return moovPlacement;
  }

  public void setMoovPlacement(Mp4MoovPlacement moovPlacement) {
    this.moovPlacement = moovPlacement;
  }


  public ContainerSettingsMp4Settings mp4MajorBrand(String mp4MajorBrand) {
    this.mp4MajorBrand = mp4MajorBrand;
    return this;
  }

  /**
   * Get mp4MajorBrand
   * @return mp4MajorBrand
   */
  @javax.annotation.Nullable
  public String getMp4MajorBrand() {
    return mp4MajorBrand;
  }

  public void setMp4MajorBrand(String mp4MajorBrand) {
    this.mp4MajorBrand = mp4MajorBrand;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerSettingsMp4Settings containerSettingsMp4Settings = (ContainerSettingsMp4Settings) o;
    return Objects.equals(this.audioDuration, containerSettingsMp4Settings.audioDuration) &&
        Objects.equals(this.cslgAtom, containerSettingsMp4Settings.cslgAtom) &&
        Objects.equals(this.cttsVersion, containerSettingsMp4Settings.cttsVersion) &&
        Objects.equals(this.freeSpaceBox, containerSettingsMp4Settings.freeSpaceBox) &&
        Objects.equals(this.moovPlacement, containerSettingsMp4Settings.moovPlacement) &&
        Objects.equals(this.mp4MajorBrand, containerSettingsMp4Settings.mp4MajorBrand);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioDuration, cslgAtom, cttsVersion, freeSpaceBox, moovPlacement, mp4MajorBrand);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerSettingsMp4Settings {\n");
    sb.append("    audioDuration: ").append(toIndentedString(audioDuration)).append("\n");
    sb.append("    cslgAtom: ").append(toIndentedString(cslgAtom)).append("\n");
    sb.append("    cttsVersion: ").append(toIndentedString(cttsVersion)).append("\n");
    sb.append("    freeSpaceBox: ").append(toIndentedString(freeSpaceBox)).append("\n");
    sb.append("    moovPlacement: ").append(toIndentedString(moovPlacement)).append("\n");
    sb.append("    mp4MajorBrand: ").append(toIndentedString(mp4MajorBrand)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioDuration");
    openapiFields.add("CslgAtom");
    openapiFields.add("CttsVersion");
    openapiFields.add("FreeSpaceBox");
    openapiFields.add("MoovPlacement");
    openapiFields.add("Mp4MajorBrand");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerSettingsMp4Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerSettingsMp4Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerSettingsMp4Settings is not found in the empty JSON string", ContainerSettingsMp4Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerSettingsMp4Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerSettingsMp4Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioDuration`
      if (jsonObj.get("AudioDuration") != null && !jsonObj.get("AudioDuration").isJsonNull()) {
        CmfcAudioDuration.validateJsonElement(jsonObj.get("AudioDuration"));
      }
      // validate the optional field `CslgAtom`
      if (jsonObj.get("CslgAtom") != null && !jsonObj.get("CslgAtom").isJsonNull()) {
        Mp4CslgAtom.validateJsonElement(jsonObj.get("CslgAtom"));
      }
      // validate the optional field `CttsVersion`
      if (jsonObj.get("CttsVersion") != null && !jsonObj.get("CttsVersion").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CttsVersion"));
      }
      // validate the optional field `FreeSpaceBox`
      if (jsonObj.get("FreeSpaceBox") != null && !jsonObj.get("FreeSpaceBox").isJsonNull()) {
        Mp4FreeSpaceBox.validateJsonElement(jsonObj.get("FreeSpaceBox"));
      }
      // validate the optional field `MoovPlacement`
      if (jsonObj.get("MoovPlacement") != null && !jsonObj.get("MoovPlacement").isJsonNull()) {
        Mp4MoovPlacement.validateJsonElement(jsonObj.get("MoovPlacement"));
      }
      // validate the optional field `Mp4MajorBrand`
      if (jsonObj.get("Mp4MajorBrand") != null && !jsonObj.get("Mp4MajorBrand").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Mp4MajorBrand"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerSettingsMp4Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerSettingsMp4Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerSettingsMp4Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerSettingsMp4Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerSettingsMp4Settings>() {
           @Override
           public void write(JsonWriter out, ContainerSettingsMp4Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerSettingsMp4Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerSettingsMp4Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerSettingsMp4Settings
   * @throws IOException if the JSON string is invalid with respect to ContainerSettingsMp4Settings
   */
  public static ContainerSettingsMp4Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerSettingsMp4Settings.class);
  }

  /**
   * Convert an instance of ContainerSettingsMp4Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

