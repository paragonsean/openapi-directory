/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DolbyVisionL6Metadata;
import org.openapitools.client.model.DolbyVisionLevel6Mode;
import org.openapitools.client.model.DolbyVisionMapping;
import org.openapitools.client.model.DolbyVisionProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create Dolby Vision Profile 5 or Profile 8.1 compatible video output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DolbyVision {
  public static final String SERIALIZED_NAME_L6_METADATA = "L6Metadata";
  @SerializedName(SERIALIZED_NAME_L6_METADATA)
  private DolbyVisionL6Metadata l6Metadata;

  public static final String SERIALIZED_NAME_L6_MODE = "L6Mode";
  @SerializedName(SERIALIZED_NAME_L6_MODE)
  private DolbyVisionLevel6Mode l6Mode;

  public static final String SERIALIZED_NAME_MAPPING = "Mapping";
  @SerializedName(SERIALIZED_NAME_MAPPING)
  private DolbyVisionMapping mapping;

  public static final String SERIALIZED_NAME_PROFILE = "Profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private DolbyVisionProfile profile;

  public DolbyVision() {
  }

  public DolbyVision l6Metadata(DolbyVisionL6Metadata l6Metadata) {
    this.l6Metadata = l6Metadata;
    return this;
  }

  /**
   * Get l6Metadata
   * @return l6Metadata
   */
  @javax.annotation.Nullable
  public DolbyVisionL6Metadata getL6Metadata() {
    return l6Metadata;
  }

  public void setL6Metadata(DolbyVisionL6Metadata l6Metadata) {
    this.l6Metadata = l6Metadata;
  }


  public DolbyVision l6Mode(DolbyVisionLevel6Mode l6Mode) {
    this.l6Mode = l6Mode;
    return this;
  }

  /**
   * Get l6Mode
   * @return l6Mode
   */
  @javax.annotation.Nullable
  public DolbyVisionLevel6Mode getL6Mode() {
    return l6Mode;
  }

  public void setL6Mode(DolbyVisionLevel6Mode l6Mode) {
    this.l6Mode = l6Mode;
  }


  public DolbyVision mapping(DolbyVisionMapping mapping) {
    this.mapping = mapping;
    return this;
  }

  /**
   * Get mapping
   * @return mapping
   */
  @javax.annotation.Nullable
  public DolbyVisionMapping getMapping() {
    return mapping;
  }

  public void setMapping(DolbyVisionMapping mapping) {
    this.mapping = mapping;
  }


  public DolbyVision profile(DolbyVisionProfile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public DolbyVisionProfile getProfile() {
    return profile;
  }

  public void setProfile(DolbyVisionProfile profile) {
    this.profile = profile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DolbyVision dolbyVision = (DolbyVision) o;
    return Objects.equals(this.l6Metadata, dolbyVision.l6Metadata) &&
        Objects.equals(this.l6Mode, dolbyVision.l6Mode) &&
        Objects.equals(this.mapping, dolbyVision.mapping) &&
        Objects.equals(this.profile, dolbyVision.profile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(l6Metadata, l6Mode, mapping, profile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DolbyVision {\n");
    sb.append("    l6Metadata: ").append(toIndentedString(l6Metadata)).append("\n");
    sb.append("    l6Mode: ").append(toIndentedString(l6Mode)).append("\n");
    sb.append("    mapping: ").append(toIndentedString(mapping)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("L6Metadata");
    openapiFields.add("L6Mode");
    openapiFields.add("Mapping");
    openapiFields.add("Profile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DolbyVision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DolbyVision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DolbyVision is not found in the empty JSON string", DolbyVision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DolbyVision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DolbyVision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `L6Metadata`
      if (jsonObj.get("L6Metadata") != null && !jsonObj.get("L6Metadata").isJsonNull()) {
        DolbyVisionL6Metadata.validateJsonElement(jsonObj.get("L6Metadata"));
      }
      // validate the optional field `L6Mode`
      if (jsonObj.get("L6Mode") != null && !jsonObj.get("L6Mode").isJsonNull()) {
        DolbyVisionLevel6Mode.validateJsonElement(jsonObj.get("L6Mode"));
      }
      // validate the optional field `Mapping`
      if (jsonObj.get("Mapping") != null && !jsonObj.get("Mapping").isJsonNull()) {
        DolbyVisionMapping.validateJsonElement(jsonObj.get("Mapping"));
      }
      // validate the optional field `Profile`
      if (jsonObj.get("Profile") != null && !jsonObj.get("Profile").isJsonNull()) {
        DolbyVisionProfile.validateJsonElement(jsonObj.get("Profile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DolbyVision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DolbyVision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DolbyVision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DolbyVision.class));

       return (TypeAdapter<T>) new TypeAdapter<DolbyVision>() {
           @Override
           public void write(JsonWriter out, DolbyVision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DolbyVision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DolbyVision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DolbyVision
   * @throws IOException if the JSON string is invalid with respect to DolbyVision
   */
  public static DolbyVision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DolbyVision.class);
  }

  /**
   * Convert an instance of DolbyVision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

