/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The video encoding method for your MPEG-4 AVC output. Keep the default value, PAFF, to have MediaConvert use PAFF encoding for interlaced outputs. Choose Force field to disable PAFF encoding and create separate interlaced fields. Choose MBAFF to disable PAFF and have MediaConvert use MBAFF encoding for interlaced outputs.
 */
@JsonAdapter(H264FieldEncoding.Adapter.class)
public enum H264FieldEncoding {
  
  PAFF("PAFF"),
  
  FORCE_FIELD("FORCE_FIELD"),
  
  MBAFF("MBAFF");

  private String value;

  H264FieldEncoding(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H264FieldEncoding fromValue(String value) {
    for (H264FieldEncoding b : H264FieldEncoding.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H264FieldEncoding> {
    @Override
    public void write(final JsonWriter jsonWriter, final H264FieldEncoding enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H264FieldEncoding read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H264FieldEncoding.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H264FieldEncoding.fromValue(value);
  }
}

