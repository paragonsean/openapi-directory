/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BurnInSubtitleStylePassthrough;
import org.openapitools.client.model.BurninSubtitleAlignment;
import org.openapitools.client.model.BurninSubtitleApplyFontColor;
import org.openapitools.client.model.BurninSubtitleBackgroundColor;
import org.openapitools.client.model.BurninSubtitleFallbackFont;
import org.openapitools.client.model.BurninSubtitleFontColor;
import org.openapitools.client.model.BurninSubtitleOutlineColor;
import org.openapitools.client.model.BurninSubtitleShadowColor;
import org.openapitools.client.model.BurninSubtitleTeletextSpacing;
import org.openapitools.client.model.FontScript;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Burn-in is a captions delivery method, rather than a captions format. Burn-in writes the captions directly on your video frames, replacing pixels of video content with the captions. Set up burn-in captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/burn-in-output-captions.html.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BurninDestinationSettings {
  public static final String SERIALIZED_NAME_ALIGNMENT = "Alignment";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT)
  private BurninSubtitleAlignment alignment;

  public static final String SERIALIZED_NAME_APPLY_FONT_COLOR = "ApplyFontColor";
  @SerializedName(SERIALIZED_NAME_APPLY_FONT_COLOR)
  private BurninSubtitleApplyFontColor applyFontColor;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "BackgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private BurninSubtitleBackgroundColor backgroundColor;

  public static final String SERIALIZED_NAME_BACKGROUND_OPACITY = "BackgroundOpacity";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_OPACITY)
  private Integer backgroundOpacity;

  public static final String SERIALIZED_NAME_FALLBACK_FONT = "FallbackFont";
  @SerializedName(SERIALIZED_NAME_FALLBACK_FONT)
  private BurninSubtitleFallbackFont fallbackFont;

  public static final String SERIALIZED_NAME_FONT_COLOR = "FontColor";
  @SerializedName(SERIALIZED_NAME_FONT_COLOR)
  private BurninSubtitleFontColor fontColor;

  public static final String SERIALIZED_NAME_FONT_OPACITY = "FontOpacity";
  @SerializedName(SERIALIZED_NAME_FONT_OPACITY)
  private Integer fontOpacity;

  public static final String SERIALIZED_NAME_FONT_RESOLUTION = "FontResolution";
  @SerializedName(SERIALIZED_NAME_FONT_RESOLUTION)
  private Integer fontResolution;

  public static final String SERIALIZED_NAME_FONT_SCRIPT = "FontScript";
  @SerializedName(SERIALIZED_NAME_FONT_SCRIPT)
  private FontScript fontScript;

  public static final String SERIALIZED_NAME_FONT_SIZE = "FontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Integer fontSize;

  public static final String SERIALIZED_NAME_HEX_FONT_COLOR = "HexFontColor";
  @SerializedName(SERIALIZED_NAME_HEX_FONT_COLOR)
  private String hexFontColor;

  public static final String SERIALIZED_NAME_OUTLINE_COLOR = "OutlineColor";
  @SerializedName(SERIALIZED_NAME_OUTLINE_COLOR)
  private BurninSubtitleOutlineColor outlineColor;

  public static final String SERIALIZED_NAME_OUTLINE_SIZE = "OutlineSize";
  @SerializedName(SERIALIZED_NAME_OUTLINE_SIZE)
  private Integer outlineSize;

  public static final String SERIALIZED_NAME_SHADOW_COLOR = "ShadowColor";
  @SerializedName(SERIALIZED_NAME_SHADOW_COLOR)
  private BurninSubtitleShadowColor shadowColor;

  public static final String SERIALIZED_NAME_SHADOW_OPACITY = "ShadowOpacity";
  @SerializedName(SERIALIZED_NAME_SHADOW_OPACITY)
  private Integer shadowOpacity;

  public static final String SERIALIZED_NAME_SHADOW_X_OFFSET = "ShadowXOffset";
  @SerializedName(SERIALIZED_NAME_SHADOW_X_OFFSET)
  private Integer shadowXOffset;

  public static final String SERIALIZED_NAME_SHADOW_Y_OFFSET = "ShadowYOffset";
  @SerializedName(SERIALIZED_NAME_SHADOW_Y_OFFSET)
  private Integer shadowYOffset;

  public static final String SERIALIZED_NAME_STYLE_PASSTHROUGH = "StylePassthrough";
  @SerializedName(SERIALIZED_NAME_STYLE_PASSTHROUGH)
  private BurnInSubtitleStylePassthrough stylePassthrough;

  public static final String SERIALIZED_NAME_TELETEXT_SPACING = "TeletextSpacing";
  @SerializedName(SERIALIZED_NAME_TELETEXT_SPACING)
  private BurninSubtitleTeletextSpacing teletextSpacing;

  public static final String SERIALIZED_NAME_XPOSITION = "XPosition";
  @SerializedName(SERIALIZED_NAME_XPOSITION)
  private Integer xposition;

  public static final String SERIALIZED_NAME_YPOSITION = "YPosition";
  @SerializedName(SERIALIZED_NAME_YPOSITION)
  private Integer yposition;

  public BurninDestinationSettings() {
  }

  public BurninDestinationSettings alignment(BurninSubtitleAlignment alignment) {
    this.alignment = alignment;
    return this;
  }

  /**
   * Get alignment
   * @return alignment
   */
  @javax.annotation.Nullable
  public BurninSubtitleAlignment getAlignment() {
    return alignment;
  }

  public void setAlignment(BurninSubtitleAlignment alignment) {
    this.alignment = alignment;
  }


  public BurninDestinationSettings applyFontColor(BurninSubtitleApplyFontColor applyFontColor) {
    this.applyFontColor = applyFontColor;
    return this;
  }

  /**
   * Get applyFontColor
   * @return applyFontColor
   */
  @javax.annotation.Nullable
  public BurninSubtitleApplyFontColor getApplyFontColor() {
    return applyFontColor;
  }

  public void setApplyFontColor(BurninSubtitleApplyFontColor applyFontColor) {
    this.applyFontColor = applyFontColor;
  }


  public BurninDestinationSettings backgroundColor(BurninSubtitleBackgroundColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public BurninSubtitleBackgroundColor getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(BurninSubtitleBackgroundColor backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public BurninDestinationSettings backgroundOpacity(Integer backgroundOpacity) {
    this.backgroundOpacity = backgroundOpacity;
    return this;
  }

  /**
   * Get backgroundOpacity
   * @return backgroundOpacity
   */
  @javax.annotation.Nullable
  public Integer getBackgroundOpacity() {
    return backgroundOpacity;
  }

  public void setBackgroundOpacity(Integer backgroundOpacity) {
    this.backgroundOpacity = backgroundOpacity;
  }


  public BurninDestinationSettings fallbackFont(BurninSubtitleFallbackFont fallbackFont) {
    this.fallbackFont = fallbackFont;
    return this;
  }

  /**
   * Get fallbackFont
   * @return fallbackFont
   */
  @javax.annotation.Nullable
  public BurninSubtitleFallbackFont getFallbackFont() {
    return fallbackFont;
  }

  public void setFallbackFont(BurninSubtitleFallbackFont fallbackFont) {
    this.fallbackFont = fallbackFont;
  }


  public BurninDestinationSettings fontColor(BurninSubtitleFontColor fontColor) {
    this.fontColor = fontColor;
    return this;
  }

  /**
   * Get fontColor
   * @return fontColor
   */
  @javax.annotation.Nullable
  public BurninSubtitleFontColor getFontColor() {
    return fontColor;
  }

  public void setFontColor(BurninSubtitleFontColor fontColor) {
    this.fontColor = fontColor;
  }


  public BurninDestinationSettings fontOpacity(Integer fontOpacity) {
    this.fontOpacity = fontOpacity;
    return this;
  }

  /**
   * Get fontOpacity
   * @return fontOpacity
   */
  @javax.annotation.Nullable
  public Integer getFontOpacity() {
    return fontOpacity;
  }

  public void setFontOpacity(Integer fontOpacity) {
    this.fontOpacity = fontOpacity;
  }


  public BurninDestinationSettings fontResolution(Integer fontResolution) {
    this.fontResolution = fontResolution;
    return this;
  }

  /**
   * Get fontResolution
   * @return fontResolution
   */
  @javax.annotation.Nullable
  public Integer getFontResolution() {
    return fontResolution;
  }

  public void setFontResolution(Integer fontResolution) {
    this.fontResolution = fontResolution;
  }


  public BurninDestinationSettings fontScript(FontScript fontScript) {
    this.fontScript = fontScript;
    return this;
  }

  /**
   * Get fontScript
   * @return fontScript
   */
  @javax.annotation.Nullable
  public FontScript getFontScript() {
    return fontScript;
  }

  public void setFontScript(FontScript fontScript) {
    this.fontScript = fontScript;
  }


  public BurninDestinationSettings fontSize(Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Get fontSize
   * @return fontSize
   */
  @javax.annotation.Nullable
  public Integer getFontSize() {
    return fontSize;
  }

  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }


  public BurninDestinationSettings hexFontColor(String hexFontColor) {
    this.hexFontColor = hexFontColor;
    return this;
  }

  /**
   * Get hexFontColor
   * @return hexFontColor
   */
  @javax.annotation.Nullable
  public String getHexFontColor() {
    return hexFontColor;
  }

  public void setHexFontColor(String hexFontColor) {
    this.hexFontColor = hexFontColor;
  }


  public BurninDestinationSettings outlineColor(BurninSubtitleOutlineColor outlineColor) {
    this.outlineColor = outlineColor;
    return this;
  }

  /**
   * Get outlineColor
   * @return outlineColor
   */
  @javax.annotation.Nullable
  public BurninSubtitleOutlineColor getOutlineColor() {
    return outlineColor;
  }

  public void setOutlineColor(BurninSubtitleOutlineColor outlineColor) {
    this.outlineColor = outlineColor;
  }


  public BurninDestinationSettings outlineSize(Integer outlineSize) {
    this.outlineSize = outlineSize;
    return this;
  }

  /**
   * Get outlineSize
   * @return outlineSize
   */
  @javax.annotation.Nullable
  public Integer getOutlineSize() {
    return outlineSize;
  }

  public void setOutlineSize(Integer outlineSize) {
    this.outlineSize = outlineSize;
  }


  public BurninDestinationSettings shadowColor(BurninSubtitleShadowColor shadowColor) {
    this.shadowColor = shadowColor;
    return this;
  }

  /**
   * Get shadowColor
   * @return shadowColor
   */
  @javax.annotation.Nullable
  public BurninSubtitleShadowColor getShadowColor() {
    return shadowColor;
  }

  public void setShadowColor(BurninSubtitleShadowColor shadowColor) {
    this.shadowColor = shadowColor;
  }


  public BurninDestinationSettings shadowOpacity(Integer shadowOpacity) {
    this.shadowOpacity = shadowOpacity;
    return this;
  }

  /**
   * Get shadowOpacity
   * @return shadowOpacity
   */
  @javax.annotation.Nullable
  public Integer getShadowOpacity() {
    return shadowOpacity;
  }

  public void setShadowOpacity(Integer shadowOpacity) {
    this.shadowOpacity = shadowOpacity;
  }


  public BurninDestinationSettings shadowXOffset(Integer shadowXOffset) {
    this.shadowXOffset = shadowXOffset;
    return this;
  }

  /**
   * Get shadowXOffset
   * @return shadowXOffset
   */
  @javax.annotation.Nullable
  public Integer getShadowXOffset() {
    return shadowXOffset;
  }

  public void setShadowXOffset(Integer shadowXOffset) {
    this.shadowXOffset = shadowXOffset;
  }


  public BurninDestinationSettings shadowYOffset(Integer shadowYOffset) {
    this.shadowYOffset = shadowYOffset;
    return this;
  }

  /**
   * Get shadowYOffset
   * @return shadowYOffset
   */
  @javax.annotation.Nullable
  public Integer getShadowYOffset() {
    return shadowYOffset;
  }

  public void setShadowYOffset(Integer shadowYOffset) {
    this.shadowYOffset = shadowYOffset;
  }


  public BurninDestinationSettings stylePassthrough(BurnInSubtitleStylePassthrough stylePassthrough) {
    this.stylePassthrough = stylePassthrough;
    return this;
  }

  /**
   * Get stylePassthrough
   * @return stylePassthrough
   */
  @javax.annotation.Nullable
  public BurnInSubtitleStylePassthrough getStylePassthrough() {
    return stylePassthrough;
  }

  public void setStylePassthrough(BurnInSubtitleStylePassthrough stylePassthrough) {
    this.stylePassthrough = stylePassthrough;
  }


  public BurninDestinationSettings teletextSpacing(BurninSubtitleTeletextSpacing teletextSpacing) {
    this.teletextSpacing = teletextSpacing;
    return this;
  }

  /**
   * Get teletextSpacing
   * @return teletextSpacing
   */
  @javax.annotation.Nullable
  public BurninSubtitleTeletextSpacing getTeletextSpacing() {
    return teletextSpacing;
  }

  public void setTeletextSpacing(BurninSubtitleTeletextSpacing teletextSpacing) {
    this.teletextSpacing = teletextSpacing;
  }


  public BurninDestinationSettings xposition(Integer xposition) {
    this.xposition = xposition;
    return this;
  }

  /**
   * Get xposition
   * @return xposition
   */
  @javax.annotation.Nullable
  public Integer getXposition() {
    return xposition;
  }

  public void setXposition(Integer xposition) {
    this.xposition = xposition;
  }


  public BurninDestinationSettings yposition(Integer yposition) {
    this.yposition = yposition;
    return this;
  }

  /**
   * Get yposition
   * @return yposition
   */
  @javax.annotation.Nullable
  public Integer getYposition() {
    return yposition;
  }

  public void setYposition(Integer yposition) {
    this.yposition = yposition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BurninDestinationSettings burninDestinationSettings = (BurninDestinationSettings) o;
    return Objects.equals(this.alignment, burninDestinationSettings.alignment) &&
        Objects.equals(this.applyFontColor, burninDestinationSettings.applyFontColor) &&
        Objects.equals(this.backgroundColor, burninDestinationSettings.backgroundColor) &&
        Objects.equals(this.backgroundOpacity, burninDestinationSettings.backgroundOpacity) &&
        Objects.equals(this.fallbackFont, burninDestinationSettings.fallbackFont) &&
        Objects.equals(this.fontColor, burninDestinationSettings.fontColor) &&
        Objects.equals(this.fontOpacity, burninDestinationSettings.fontOpacity) &&
        Objects.equals(this.fontResolution, burninDestinationSettings.fontResolution) &&
        Objects.equals(this.fontScript, burninDestinationSettings.fontScript) &&
        Objects.equals(this.fontSize, burninDestinationSettings.fontSize) &&
        Objects.equals(this.hexFontColor, burninDestinationSettings.hexFontColor) &&
        Objects.equals(this.outlineColor, burninDestinationSettings.outlineColor) &&
        Objects.equals(this.outlineSize, burninDestinationSettings.outlineSize) &&
        Objects.equals(this.shadowColor, burninDestinationSettings.shadowColor) &&
        Objects.equals(this.shadowOpacity, burninDestinationSettings.shadowOpacity) &&
        Objects.equals(this.shadowXOffset, burninDestinationSettings.shadowXOffset) &&
        Objects.equals(this.shadowYOffset, burninDestinationSettings.shadowYOffset) &&
        Objects.equals(this.stylePassthrough, burninDestinationSettings.stylePassthrough) &&
        Objects.equals(this.teletextSpacing, burninDestinationSettings.teletextSpacing) &&
        Objects.equals(this.xposition, burninDestinationSettings.xposition) &&
        Objects.equals(this.yposition, burninDestinationSettings.yposition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignment, applyFontColor, backgroundColor, backgroundOpacity, fallbackFont, fontColor, fontOpacity, fontResolution, fontScript, fontSize, hexFontColor, outlineColor, outlineSize, shadowColor, shadowOpacity, shadowXOffset, shadowYOffset, stylePassthrough, teletextSpacing, xposition, yposition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BurninDestinationSettings {\n");
    sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
    sb.append("    applyFontColor: ").append(toIndentedString(applyFontColor)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    backgroundOpacity: ").append(toIndentedString(backgroundOpacity)).append("\n");
    sb.append("    fallbackFont: ").append(toIndentedString(fallbackFont)).append("\n");
    sb.append("    fontColor: ").append(toIndentedString(fontColor)).append("\n");
    sb.append("    fontOpacity: ").append(toIndentedString(fontOpacity)).append("\n");
    sb.append("    fontResolution: ").append(toIndentedString(fontResolution)).append("\n");
    sb.append("    fontScript: ").append(toIndentedString(fontScript)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    hexFontColor: ").append(toIndentedString(hexFontColor)).append("\n");
    sb.append("    outlineColor: ").append(toIndentedString(outlineColor)).append("\n");
    sb.append("    outlineSize: ").append(toIndentedString(outlineSize)).append("\n");
    sb.append("    shadowColor: ").append(toIndentedString(shadowColor)).append("\n");
    sb.append("    shadowOpacity: ").append(toIndentedString(shadowOpacity)).append("\n");
    sb.append("    shadowXOffset: ").append(toIndentedString(shadowXOffset)).append("\n");
    sb.append("    shadowYOffset: ").append(toIndentedString(shadowYOffset)).append("\n");
    sb.append("    stylePassthrough: ").append(toIndentedString(stylePassthrough)).append("\n");
    sb.append("    teletextSpacing: ").append(toIndentedString(teletextSpacing)).append("\n");
    sb.append("    xposition: ").append(toIndentedString(xposition)).append("\n");
    sb.append("    yposition: ").append(toIndentedString(yposition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Alignment");
    openapiFields.add("ApplyFontColor");
    openapiFields.add("BackgroundColor");
    openapiFields.add("BackgroundOpacity");
    openapiFields.add("FallbackFont");
    openapiFields.add("FontColor");
    openapiFields.add("FontOpacity");
    openapiFields.add("FontResolution");
    openapiFields.add("FontScript");
    openapiFields.add("FontSize");
    openapiFields.add("HexFontColor");
    openapiFields.add("OutlineColor");
    openapiFields.add("OutlineSize");
    openapiFields.add("ShadowColor");
    openapiFields.add("ShadowOpacity");
    openapiFields.add("ShadowXOffset");
    openapiFields.add("ShadowYOffset");
    openapiFields.add("StylePassthrough");
    openapiFields.add("TeletextSpacing");
    openapiFields.add("XPosition");
    openapiFields.add("YPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BurninDestinationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BurninDestinationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BurninDestinationSettings is not found in the empty JSON string", BurninDestinationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BurninDestinationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BurninDestinationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Alignment`
      if (jsonObj.get("Alignment") != null && !jsonObj.get("Alignment").isJsonNull()) {
        BurninSubtitleAlignment.validateJsonElement(jsonObj.get("Alignment"));
      }
      // validate the optional field `ApplyFontColor`
      if (jsonObj.get("ApplyFontColor") != null && !jsonObj.get("ApplyFontColor").isJsonNull()) {
        BurninSubtitleApplyFontColor.validateJsonElement(jsonObj.get("ApplyFontColor"));
      }
      // validate the optional field `BackgroundColor`
      if (jsonObj.get("BackgroundColor") != null && !jsonObj.get("BackgroundColor").isJsonNull()) {
        BurninSubtitleBackgroundColor.validateJsonElement(jsonObj.get("BackgroundColor"));
      }
      // validate the optional field `BackgroundOpacity`
      if (jsonObj.get("BackgroundOpacity") != null && !jsonObj.get("BackgroundOpacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BackgroundOpacity"));
      }
      // validate the optional field `FallbackFont`
      if (jsonObj.get("FallbackFont") != null && !jsonObj.get("FallbackFont").isJsonNull()) {
        BurninSubtitleFallbackFont.validateJsonElement(jsonObj.get("FallbackFont"));
      }
      // validate the optional field `FontColor`
      if (jsonObj.get("FontColor") != null && !jsonObj.get("FontColor").isJsonNull()) {
        BurninSubtitleFontColor.validateJsonElement(jsonObj.get("FontColor"));
      }
      // validate the optional field `FontOpacity`
      if (jsonObj.get("FontOpacity") != null && !jsonObj.get("FontOpacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FontOpacity"));
      }
      // validate the optional field `FontResolution`
      if (jsonObj.get("FontResolution") != null && !jsonObj.get("FontResolution").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FontResolution"));
      }
      // validate the optional field `FontScript`
      if (jsonObj.get("FontScript") != null && !jsonObj.get("FontScript").isJsonNull()) {
        FontScript.validateJsonElement(jsonObj.get("FontScript"));
      }
      // validate the optional field `FontSize`
      if (jsonObj.get("FontSize") != null && !jsonObj.get("FontSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FontSize"));
      }
      // validate the optional field `HexFontColor`
      if (jsonObj.get("HexFontColor") != null && !jsonObj.get("HexFontColor").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HexFontColor"));
      }
      // validate the optional field `OutlineColor`
      if (jsonObj.get("OutlineColor") != null && !jsonObj.get("OutlineColor").isJsonNull()) {
        BurninSubtitleOutlineColor.validateJsonElement(jsonObj.get("OutlineColor"));
      }
      // validate the optional field `OutlineSize`
      if (jsonObj.get("OutlineSize") != null && !jsonObj.get("OutlineSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("OutlineSize"));
      }
      // validate the optional field `ShadowColor`
      if (jsonObj.get("ShadowColor") != null && !jsonObj.get("ShadowColor").isJsonNull()) {
        BurninSubtitleShadowColor.validateJsonElement(jsonObj.get("ShadowColor"));
      }
      // validate the optional field `ShadowOpacity`
      if (jsonObj.get("ShadowOpacity") != null && !jsonObj.get("ShadowOpacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ShadowOpacity"));
      }
      // validate the optional field `ShadowXOffset`
      if (jsonObj.get("ShadowXOffset") != null && !jsonObj.get("ShadowXOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ShadowXOffset"));
      }
      // validate the optional field `ShadowYOffset`
      if (jsonObj.get("ShadowYOffset") != null && !jsonObj.get("ShadowYOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ShadowYOffset"));
      }
      // validate the optional field `StylePassthrough`
      if (jsonObj.get("StylePassthrough") != null && !jsonObj.get("StylePassthrough").isJsonNull()) {
        BurnInSubtitleStylePassthrough.validateJsonElement(jsonObj.get("StylePassthrough"));
      }
      // validate the optional field `TeletextSpacing`
      if (jsonObj.get("TeletextSpacing") != null && !jsonObj.get("TeletextSpacing").isJsonNull()) {
        BurninSubtitleTeletextSpacing.validateJsonElement(jsonObj.get("TeletextSpacing"));
      }
      // validate the optional field `XPosition`
      if (jsonObj.get("XPosition") != null && !jsonObj.get("XPosition").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("XPosition"));
      }
      // validate the optional field `YPosition`
      if (jsonObj.get("YPosition") != null && !jsonObj.get("YPosition").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("YPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BurninDestinationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BurninDestinationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BurninDestinationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BurninDestinationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<BurninDestinationSettings>() {
           @Override
           public void write(JsonWriter out, BurninDestinationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BurninDestinationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BurninDestinationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BurninDestinationSettings
   * @throws IOException if the JSON string is invalid with respect to BurninDestinationSettings
   */
  public static BurninDestinationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BurninDestinationSettings.class);
  }

  /**
   * Convert an instance of BurninDestinationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

