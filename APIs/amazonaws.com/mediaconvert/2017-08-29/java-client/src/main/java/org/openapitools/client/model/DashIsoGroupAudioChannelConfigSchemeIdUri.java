/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Use this setting only when your audio codec is a Dolby one (AC3, EAC3, or Atmos) and your downstream workflow requires that your DASH manifest use the Dolby channel configuration tag, rather than the MPEG one. For example, you might need to use this to make dynamic ad insertion work. Specify which audio channel configuration scheme ID URI MediaConvert writes in your DASH manifest. Keep the default value, MPEG channel configuration, to have MediaConvert write this: urn:mpeg:mpegB:cicp:ChannelConfiguration. Choose Dolby channel configuration to have MediaConvert write this instead: tag:dolby.com,2014:dash:audio_channel_configuration:2011.
 */
@JsonAdapter(DashIsoGroupAudioChannelConfigSchemeIdUri.Adapter.class)
public enum DashIsoGroupAudioChannelConfigSchemeIdUri {
  
  MPEG_CHANNEL_CONFIGURATION("MPEG_CHANNEL_CONFIGURATION"),
  
  DOLBY_CHANNEL_CONFIGURATION("DOLBY_CHANNEL_CONFIGURATION");

  private String value;

  DashIsoGroupAudioChannelConfigSchemeIdUri(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DashIsoGroupAudioChannelConfigSchemeIdUri fromValue(String value) {
    for (DashIsoGroupAudioChannelConfigSchemeIdUri b : DashIsoGroupAudioChannelConfigSchemeIdUri.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DashIsoGroupAudioChannelConfigSchemeIdUri> {
    @Override
    public void write(final JsonWriter jsonWriter, final DashIsoGroupAudioChannelConfigSchemeIdUri enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DashIsoGroupAudioChannelConfigSchemeIdUri read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DashIsoGroupAudioChannelConfigSchemeIdUri.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DashIsoGroupAudioChannelConfigSchemeIdUri.fromValue(value);
  }
}

