/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3ServerSideEncryptionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * S3DestinationSettingsEncryption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3DestinationSettingsEncryption {
  public static final String SERIALIZED_NAME_ENCRYPTION_TYPE = "EncryptionType";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_TYPE)
  private S3ServerSideEncryptionType encryptionType;

  public static final String SERIALIZED_NAME_KMS_ENCRYPTION_CONTEXT = "KmsEncryptionContext";
  @SerializedName(SERIALIZED_NAME_KMS_ENCRYPTION_CONTEXT)
  private String kmsEncryptionContext;

  public static final String SERIALIZED_NAME_KMS_KEY_ARN = "KmsKeyArn";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ARN)
  private String kmsKeyArn;

  public S3DestinationSettingsEncryption() {
  }

  public S3DestinationSettingsEncryption encryptionType(S3ServerSideEncryptionType encryptionType) {
    this.encryptionType = encryptionType;
    return this;
  }

  /**
   * Get encryptionType
   * @return encryptionType
   */
  @javax.annotation.Nullable
  public S3ServerSideEncryptionType getEncryptionType() {
    return encryptionType;
  }

  public void setEncryptionType(S3ServerSideEncryptionType encryptionType) {
    this.encryptionType = encryptionType;
  }


  public S3DestinationSettingsEncryption kmsEncryptionContext(String kmsEncryptionContext) {
    this.kmsEncryptionContext = kmsEncryptionContext;
    return this;
  }

  /**
   * Get kmsEncryptionContext
   * @return kmsEncryptionContext
   */
  @javax.annotation.Nullable
  public String getKmsEncryptionContext() {
    return kmsEncryptionContext;
  }

  public void setKmsEncryptionContext(String kmsEncryptionContext) {
    this.kmsEncryptionContext = kmsEncryptionContext;
  }


  public S3DestinationSettingsEncryption kmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
    return this;
  }

  /**
   * Get kmsKeyArn
   * @return kmsKeyArn
   */
  @javax.annotation.Nullable
  public String getKmsKeyArn() {
    return kmsKeyArn;
  }

  public void setKmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3DestinationSettingsEncryption s3DestinationSettingsEncryption = (S3DestinationSettingsEncryption) o;
    return Objects.equals(this.encryptionType, s3DestinationSettingsEncryption.encryptionType) &&
        Objects.equals(this.kmsEncryptionContext, s3DestinationSettingsEncryption.kmsEncryptionContext) &&
        Objects.equals(this.kmsKeyArn, s3DestinationSettingsEncryption.kmsKeyArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionType, kmsEncryptionContext, kmsKeyArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3DestinationSettingsEncryption {\n");
    sb.append("    encryptionType: ").append(toIndentedString(encryptionType)).append("\n");
    sb.append("    kmsEncryptionContext: ").append(toIndentedString(kmsEncryptionContext)).append("\n");
    sb.append("    kmsKeyArn: ").append(toIndentedString(kmsKeyArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EncryptionType");
    openapiFields.add("KmsEncryptionContext");
    openapiFields.add("KmsKeyArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3DestinationSettingsEncryption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3DestinationSettingsEncryption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3DestinationSettingsEncryption is not found in the empty JSON string", S3DestinationSettingsEncryption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3DestinationSettingsEncryption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3DestinationSettingsEncryption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EncryptionType`
      if (jsonObj.get("EncryptionType") != null && !jsonObj.get("EncryptionType").isJsonNull()) {
        S3ServerSideEncryptionType.validateJsonElement(jsonObj.get("EncryptionType"));
      }
      // validate the optional field `KmsEncryptionContext`
      if (jsonObj.get("KmsEncryptionContext") != null && !jsonObj.get("KmsEncryptionContext").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsEncryptionContext"));
      }
      // validate the optional field `KmsKeyArn`
      if (jsonObj.get("KmsKeyArn") != null && !jsonObj.get("KmsKeyArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3DestinationSettingsEncryption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3DestinationSettingsEncryption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3DestinationSettingsEncryption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3DestinationSettingsEncryption.class));

       return (TypeAdapter<T>) new TypeAdapter<S3DestinationSettingsEncryption>() {
           @Override
           public void write(JsonWriter out, S3DestinationSettingsEncryption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3DestinationSettingsEncryption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3DestinationSettingsEncryption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3DestinationSettingsEncryption
   * @throws IOException if the JSON string is invalid with respect to S3DestinationSettingsEncryption
   */
  public static S3DestinationSettingsEncryption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3DestinationSettingsEncryption.class);
  }

  /**
   * Convert an instance of S3DestinationSettingsEncryption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

