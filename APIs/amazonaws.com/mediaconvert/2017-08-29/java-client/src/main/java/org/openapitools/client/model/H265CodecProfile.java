/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so \&quot;Main/High\&quot; represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.
 */
@JsonAdapter(H265CodecProfile.Adapter.class)
public enum H265CodecProfile {
  
  MAIN_MAIN("MAIN_MAIN"),
  
  MAIN_HIGH("MAIN_HIGH"),
  
  MAIN10_MAIN("MAIN10_MAIN"),
  
  MAIN10_HIGH("MAIN10_HIGH"),
  
  MAIN_422_8_BIT_MAIN("MAIN_422_8BIT_MAIN"),
  
  MAIN_422_8_BIT_HIGH("MAIN_422_8BIT_HIGH"),
  
  MAIN_422_10_BIT_MAIN("MAIN_422_10BIT_MAIN"),
  
  MAIN_422_10_BIT_HIGH("MAIN_422_10BIT_HIGH");

  private String value;

  H265CodecProfile(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H265CodecProfile fromValue(String value) {
    for (H265CodecProfile b : H265CodecProfile.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H265CodecProfile> {
    @Override
    public void write(final JsonWriter jsonWriter, final H265CodecProfile enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H265CodecProfile read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H265CodecProfile.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H265CodecProfile.fromValue(value);
  }
}

