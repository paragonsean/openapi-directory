/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn&#39;t take into account where the viewer&#39;s attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
 */
@JsonAdapter(Av1SpatialAdaptiveQuantization.Adapter.class)
public enum Av1SpatialAdaptiveQuantization {
  
  DISABLED("DISABLED"),
  
  ENABLED("ENABLED");

  private String value;

  Av1SpatialAdaptiveQuantization(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Av1SpatialAdaptiveQuantization fromValue(String value) {
    for (Av1SpatialAdaptiveQuantization b : Av1SpatialAdaptiveQuantization.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Av1SpatialAdaptiveQuantization> {
    @Override
    public void write(final JsonWriter jsonWriter, final Av1SpatialAdaptiveQuantization enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Av1SpatialAdaptiveQuantization read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Av1SpatialAdaptiveQuantization.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Av1SpatialAdaptiveQuantization.fromValue(value);
  }
}

