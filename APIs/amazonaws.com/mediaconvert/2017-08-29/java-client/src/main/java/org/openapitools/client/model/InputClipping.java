/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * To transcode only portions of your input, include one input clip for each part of your input that you want in your output. All input clips that you specify will be included in every output of the job. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/assembling-multiple-inputs-and-input-clips.html.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputClipping {
  public static final String SERIALIZED_NAME_END_TIMECODE = "EndTimecode";
  @SerializedName(SERIALIZED_NAME_END_TIMECODE)
  private String endTimecode;

  public static final String SERIALIZED_NAME_START_TIMECODE = "StartTimecode";
  @SerializedName(SERIALIZED_NAME_START_TIMECODE)
  private String startTimecode;

  public InputClipping() {
  }

  public InputClipping endTimecode(String endTimecode) {
    this.endTimecode = endTimecode;
    return this;
  }

  /**
   * Get endTimecode
   * @return endTimecode
   */
  @javax.annotation.Nullable
  public String getEndTimecode() {
    return endTimecode;
  }

  public void setEndTimecode(String endTimecode) {
    this.endTimecode = endTimecode;
  }


  public InputClipping startTimecode(String startTimecode) {
    this.startTimecode = startTimecode;
    return this;
  }

  /**
   * Get startTimecode
   * @return startTimecode
   */
  @javax.annotation.Nullable
  public String getStartTimecode() {
    return startTimecode;
  }

  public void setStartTimecode(String startTimecode) {
    this.startTimecode = startTimecode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputClipping inputClipping = (InputClipping) o;
    return Objects.equals(this.endTimecode, inputClipping.endTimecode) &&
        Objects.equals(this.startTimecode, inputClipping.startTimecode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimecode, startTimecode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputClipping {\n");
    sb.append("    endTimecode: ").append(toIndentedString(endTimecode)).append("\n");
    sb.append("    startTimecode: ").append(toIndentedString(startTimecode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EndTimecode");
    openapiFields.add("StartTimecode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputClipping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputClipping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputClipping is not found in the empty JSON string", InputClipping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputClipping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputClipping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EndTimecode`
      if (jsonObj.get("EndTimecode") != null && !jsonObj.get("EndTimecode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndTimecode"));
      }
      // validate the optional field `StartTimecode`
      if (jsonObj.get("StartTimecode") != null && !jsonObj.get("StartTimecode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartTimecode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputClipping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputClipping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputClipping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputClipping.class));

       return (TypeAdapter<T>) new TypeAdapter<InputClipping>() {
           @Override
           public void write(JsonWriter out, InputClipping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputClipping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputClipping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputClipping
   * @throws IOException if the JSON string is invalid with respect to InputClipping
   */
  public static InputClipping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputClipping.class);
  }

  /**
   * Convert an instance of InputClipping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

