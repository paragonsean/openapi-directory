/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Container for this output. Some containers require a container settings object. If not specified, the default object will be created.
 */
@JsonAdapter(ContainerType.Adapter.class)
public enum ContainerType {
  
  F4_V("F4V"),
  
  ISMV("ISMV"),
  
  M2_TS("M2TS"),
  
  M3_U8("M3U8"),
  
  CMFC("CMFC"),
  
  MOV("MOV"),
  
  MP4("MP4"),
  
  MPD("MPD"),
  
  MXF("MXF"),
  
  WEBM("WEBM"),
  
  RAW("RAW");

  private String value;

  ContainerType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ContainerType fromValue(String value) {
    for (ContainerType b : ContainerType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ContainerType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ContainerType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ContainerType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ContainerType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ContainerType.fromValue(value);
  }
}

