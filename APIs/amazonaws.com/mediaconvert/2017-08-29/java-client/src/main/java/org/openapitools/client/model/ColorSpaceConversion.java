/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn&#39;t upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses tone mapping to approximate the outcome of manually regrading from HDR to SDR. When you specify an output color space, MediaConvert uses the following color space metadata, which includes color primaries, transfer characteristics, and matrix coefficients:   * HDR 10: BT.2020, PQ, BT.2020 non-constant   * HLG 2020: BT.2020, HLG, BT.2020 non-constant   * P3DCI (Theater): DCIP3, SMPTE 428M, BT.709   * P3D65 (SDR): Display P3, sRGB, BT.709   * P3D65 (HDR): Display P3, PQ, BT.709
 */
@JsonAdapter(ColorSpaceConversion.Adapter.class)
public enum ColorSpaceConversion {
  
  NONE("NONE"),
  
  FORCE_601("FORCE_601"),
  
  FORCE_709("FORCE_709"),
  
  FORCE_HDR10("FORCE_HDR10"),
  
  FORCE_HLG_2020("FORCE_HLG_2020"),
  
  FORCE_P3_DCI("FORCE_P3DCI"),
  
  FORCE_P3_D65_SDR("FORCE_P3D65_SDR"),
  
  FORCE_P3_D65_HDR("FORCE_P3D65_HDR");

  private String value;

  ColorSpaceConversion(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ColorSpaceConversion fromValue(String value) {
    for (ColorSpaceConversion b : ColorSpaceConversion.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ColorSpaceConversion> {
    @Override
    public void write(final JsonWriter jsonWriter, final ColorSpaceConversion enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ColorSpaceConversion read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ColorSpaceConversion.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ColorSpaceConversion.fromValue(value);
  }
}

