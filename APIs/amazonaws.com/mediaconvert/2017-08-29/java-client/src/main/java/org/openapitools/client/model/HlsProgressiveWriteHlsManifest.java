/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify whether MediaConvert generates HLS manifests while your job is running or when your job is complete. To generate HLS manifests while your job is running: Choose Enabled. Use if you want to play back your content as soon as it&#39;s available. MediaConvert writes the parent and child manifests after the first three media segments are written to your destination S3 bucket. It then writes new updated manifests after each additional segment is written. The parent manifest includes the latest BANDWIDTH and AVERAGE-BANDWIDTH attributes, and child manifests include the latest available media segment. When your job completes, the final child playlists include an EXT-X-ENDLIST tag. To generate HLS manifests only when your job completes: Choose Disabled.
 */
@JsonAdapter(HlsProgressiveWriteHlsManifest.Adapter.class)
public enum HlsProgressiveWriteHlsManifest {
  
  ENABLED("ENABLED"),
  
  DISABLED("DISABLED");

  private String value;

  HlsProgressiveWriteHlsManifest(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static HlsProgressiveWriteHlsManifest fromValue(String value) {
    for (HlsProgressiveWriteHlsManifest b : HlsProgressiveWriteHlsManifest.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<HlsProgressiveWriteHlsManifest> {
    @Override
    public void write(final JsonWriter jsonWriter, final HlsProgressiveWriteHlsManifest enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public HlsProgressiveWriteHlsManifest read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return HlsProgressiveWriteHlsManifest.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    HlsProgressiveWriteHlsManifest.fromValue(value);
  }
}

