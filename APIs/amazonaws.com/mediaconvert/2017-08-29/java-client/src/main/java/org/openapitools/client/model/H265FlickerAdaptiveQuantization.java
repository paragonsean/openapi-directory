/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set adaptiveQuantization to a value other than Off.
 */
@JsonAdapter(H265FlickerAdaptiveQuantization.Adapter.class)
public enum H265FlickerAdaptiveQuantization {
  
  DISABLED("DISABLED"),
  
  ENABLED("ENABLED");

  private String value;

  H265FlickerAdaptiveQuantization(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H265FlickerAdaptiveQuantization fromValue(String value) {
    for (H265FlickerAdaptiveQuantization b : H265FlickerAdaptiveQuantization.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H265FlickerAdaptiveQuantization> {
    @Override
    public void write(final JsonWriter jsonWriter, final H265FlickerAdaptiveQuantization enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H265FlickerAdaptiveQuantization read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H265FlickerAdaptiveQuantization.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H265FlickerAdaptiveQuantization.fromValue(value);
  }
}

