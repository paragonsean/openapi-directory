/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Eac3AtmosBitstreamMode;
import org.openapitools.client.model.Eac3AtmosCodingMode;
import org.openapitools.client.model.Eac3AtmosDialogueIntelligence;
import org.openapitools.client.model.Eac3AtmosDownmixControl;
import org.openapitools.client.model.Eac3AtmosDynamicRangeCompressionLine;
import org.openapitools.client.model.Eac3AtmosDynamicRangeCompressionRf;
import org.openapitools.client.model.Eac3AtmosDynamicRangeControl;
import org.openapitools.client.model.Eac3AtmosMeteringMode;
import org.openapitools.client.model.Eac3AtmosStereoDownmix;
import org.openapitools.client.model.Eac3AtmosSurroundExMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Required when you set Codec to the value EAC3_ATMOS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Eac3AtmosSettings {
  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Integer bitrate;

  public static final String SERIALIZED_NAME_BITSTREAM_MODE = "BitstreamMode";
  @SerializedName(SERIALIZED_NAME_BITSTREAM_MODE)
  private Eac3AtmosBitstreamMode bitstreamMode;

  public static final String SERIALIZED_NAME_CODING_MODE = "CodingMode";
  @SerializedName(SERIALIZED_NAME_CODING_MODE)
  private Eac3AtmosCodingMode codingMode;

  public static final String SERIALIZED_NAME_DIALOGUE_INTELLIGENCE = "DialogueIntelligence";
  @SerializedName(SERIALIZED_NAME_DIALOGUE_INTELLIGENCE)
  private Eac3AtmosDialogueIntelligence dialogueIntelligence;

  public static final String SERIALIZED_NAME_DOWNMIX_CONTROL = "DownmixControl";
  @SerializedName(SERIALIZED_NAME_DOWNMIX_CONTROL)
  private Eac3AtmosDownmixControl downmixControl;

  public static final String SERIALIZED_NAME_DYNAMIC_RANGE_COMPRESSION_LINE = "DynamicRangeCompressionLine";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_RANGE_COMPRESSION_LINE)
  private Eac3AtmosDynamicRangeCompressionLine dynamicRangeCompressionLine;

  public static final String SERIALIZED_NAME_DYNAMIC_RANGE_COMPRESSION_RF = "DynamicRangeCompressionRf";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_RANGE_COMPRESSION_RF)
  private Eac3AtmosDynamicRangeCompressionRf dynamicRangeCompressionRf;

  public static final String SERIALIZED_NAME_DYNAMIC_RANGE_CONTROL = "DynamicRangeControl";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_RANGE_CONTROL)
  private Eac3AtmosDynamicRangeControl dynamicRangeControl;

  public static final String SERIALIZED_NAME_LO_RO_CENTER_MIX_LEVEL = "LoRoCenterMixLevel";
  @SerializedName(SERIALIZED_NAME_LO_RO_CENTER_MIX_LEVEL)
  private Double loRoCenterMixLevel;

  public static final String SERIALIZED_NAME_LO_RO_SURROUND_MIX_LEVEL = "LoRoSurroundMixLevel";
  @SerializedName(SERIALIZED_NAME_LO_RO_SURROUND_MIX_LEVEL)
  private Double loRoSurroundMixLevel;

  public static final String SERIALIZED_NAME_LT_RT_CENTER_MIX_LEVEL = "LtRtCenterMixLevel";
  @SerializedName(SERIALIZED_NAME_LT_RT_CENTER_MIX_LEVEL)
  private Double ltRtCenterMixLevel;

  public static final String SERIALIZED_NAME_LT_RT_SURROUND_MIX_LEVEL = "LtRtSurroundMixLevel";
  @SerializedName(SERIALIZED_NAME_LT_RT_SURROUND_MIX_LEVEL)
  private Double ltRtSurroundMixLevel;

  public static final String SERIALIZED_NAME_METERING_MODE = "MeteringMode";
  @SerializedName(SERIALIZED_NAME_METERING_MODE)
  private Eac3AtmosMeteringMode meteringMode;

  public static final String SERIALIZED_NAME_SAMPLE_RATE = "SampleRate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE)
  private Integer sampleRate;

  public static final String SERIALIZED_NAME_SPEECH_THRESHOLD = "SpeechThreshold";
  @SerializedName(SERIALIZED_NAME_SPEECH_THRESHOLD)
  private Integer speechThreshold;

  public static final String SERIALIZED_NAME_STEREO_DOWNMIX = "StereoDownmix";
  @SerializedName(SERIALIZED_NAME_STEREO_DOWNMIX)
  private Eac3AtmosStereoDownmix stereoDownmix;

  public static final String SERIALIZED_NAME_SURROUND_EX_MODE = "SurroundExMode";
  @SerializedName(SERIALIZED_NAME_SURROUND_EX_MODE)
  private Eac3AtmosSurroundExMode surroundExMode;

  public Eac3AtmosSettings() {
  }

  public Eac3AtmosSettings bitrate(Integer bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Integer getBitrate() {
    return bitrate;
  }

  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public Eac3AtmosSettings bitstreamMode(Eac3AtmosBitstreamMode bitstreamMode) {
    this.bitstreamMode = bitstreamMode;
    return this;
  }

  /**
   * Get bitstreamMode
   * @return bitstreamMode
   */
  @javax.annotation.Nullable
  public Eac3AtmosBitstreamMode getBitstreamMode() {
    return bitstreamMode;
  }

  public void setBitstreamMode(Eac3AtmosBitstreamMode bitstreamMode) {
    this.bitstreamMode = bitstreamMode;
  }


  public Eac3AtmosSettings codingMode(Eac3AtmosCodingMode codingMode) {
    this.codingMode = codingMode;
    return this;
  }

  /**
   * Get codingMode
   * @return codingMode
   */
  @javax.annotation.Nullable
  public Eac3AtmosCodingMode getCodingMode() {
    return codingMode;
  }

  public void setCodingMode(Eac3AtmosCodingMode codingMode) {
    this.codingMode = codingMode;
  }


  public Eac3AtmosSettings dialogueIntelligence(Eac3AtmosDialogueIntelligence dialogueIntelligence) {
    this.dialogueIntelligence = dialogueIntelligence;
    return this;
  }

  /**
   * Get dialogueIntelligence
   * @return dialogueIntelligence
   */
  @javax.annotation.Nullable
  public Eac3AtmosDialogueIntelligence getDialogueIntelligence() {
    return dialogueIntelligence;
  }

  public void setDialogueIntelligence(Eac3AtmosDialogueIntelligence dialogueIntelligence) {
    this.dialogueIntelligence = dialogueIntelligence;
  }


  public Eac3AtmosSettings downmixControl(Eac3AtmosDownmixControl downmixControl) {
    this.downmixControl = downmixControl;
    return this;
  }

  /**
   * Get downmixControl
   * @return downmixControl
   */
  @javax.annotation.Nullable
  public Eac3AtmosDownmixControl getDownmixControl() {
    return downmixControl;
  }

  public void setDownmixControl(Eac3AtmosDownmixControl downmixControl) {
    this.downmixControl = downmixControl;
  }


  public Eac3AtmosSettings dynamicRangeCompressionLine(Eac3AtmosDynamicRangeCompressionLine dynamicRangeCompressionLine) {
    this.dynamicRangeCompressionLine = dynamicRangeCompressionLine;
    return this;
  }

  /**
   * Get dynamicRangeCompressionLine
   * @return dynamicRangeCompressionLine
   */
  @javax.annotation.Nullable
  public Eac3AtmosDynamicRangeCompressionLine getDynamicRangeCompressionLine() {
    return dynamicRangeCompressionLine;
  }

  public void setDynamicRangeCompressionLine(Eac3AtmosDynamicRangeCompressionLine dynamicRangeCompressionLine) {
    this.dynamicRangeCompressionLine = dynamicRangeCompressionLine;
  }


  public Eac3AtmosSettings dynamicRangeCompressionRf(Eac3AtmosDynamicRangeCompressionRf dynamicRangeCompressionRf) {
    this.dynamicRangeCompressionRf = dynamicRangeCompressionRf;
    return this;
  }

  /**
   * Get dynamicRangeCompressionRf
   * @return dynamicRangeCompressionRf
   */
  @javax.annotation.Nullable
  public Eac3AtmosDynamicRangeCompressionRf getDynamicRangeCompressionRf() {
    return dynamicRangeCompressionRf;
  }

  public void setDynamicRangeCompressionRf(Eac3AtmosDynamicRangeCompressionRf dynamicRangeCompressionRf) {
    this.dynamicRangeCompressionRf = dynamicRangeCompressionRf;
  }


  public Eac3AtmosSettings dynamicRangeControl(Eac3AtmosDynamicRangeControl dynamicRangeControl) {
    this.dynamicRangeControl = dynamicRangeControl;
    return this;
  }

  /**
   * Get dynamicRangeControl
   * @return dynamicRangeControl
   */
  @javax.annotation.Nullable
  public Eac3AtmosDynamicRangeControl getDynamicRangeControl() {
    return dynamicRangeControl;
  }

  public void setDynamicRangeControl(Eac3AtmosDynamicRangeControl dynamicRangeControl) {
    this.dynamicRangeControl = dynamicRangeControl;
  }


  public Eac3AtmosSettings loRoCenterMixLevel(Double loRoCenterMixLevel) {
    this.loRoCenterMixLevel = loRoCenterMixLevel;
    return this;
  }

  /**
   * Get loRoCenterMixLevel
   * @return loRoCenterMixLevel
   */
  @javax.annotation.Nullable
  public Double getLoRoCenterMixLevel() {
    return loRoCenterMixLevel;
  }

  public void setLoRoCenterMixLevel(Double loRoCenterMixLevel) {
    this.loRoCenterMixLevel = loRoCenterMixLevel;
  }


  public Eac3AtmosSettings loRoSurroundMixLevel(Double loRoSurroundMixLevel) {
    this.loRoSurroundMixLevel = loRoSurroundMixLevel;
    return this;
  }

  /**
   * Get loRoSurroundMixLevel
   * @return loRoSurroundMixLevel
   */
  @javax.annotation.Nullable
  public Double getLoRoSurroundMixLevel() {
    return loRoSurroundMixLevel;
  }

  public void setLoRoSurroundMixLevel(Double loRoSurroundMixLevel) {
    this.loRoSurroundMixLevel = loRoSurroundMixLevel;
  }


  public Eac3AtmosSettings ltRtCenterMixLevel(Double ltRtCenterMixLevel) {
    this.ltRtCenterMixLevel = ltRtCenterMixLevel;
    return this;
  }

  /**
   * Get ltRtCenterMixLevel
   * @return ltRtCenterMixLevel
   */
  @javax.annotation.Nullable
  public Double getLtRtCenterMixLevel() {
    return ltRtCenterMixLevel;
  }

  public void setLtRtCenterMixLevel(Double ltRtCenterMixLevel) {
    this.ltRtCenterMixLevel = ltRtCenterMixLevel;
  }


  public Eac3AtmosSettings ltRtSurroundMixLevel(Double ltRtSurroundMixLevel) {
    this.ltRtSurroundMixLevel = ltRtSurroundMixLevel;
    return this;
  }

  /**
   * Get ltRtSurroundMixLevel
   * @return ltRtSurroundMixLevel
   */
  @javax.annotation.Nullable
  public Double getLtRtSurroundMixLevel() {
    return ltRtSurroundMixLevel;
  }

  public void setLtRtSurroundMixLevel(Double ltRtSurroundMixLevel) {
    this.ltRtSurroundMixLevel = ltRtSurroundMixLevel;
  }


  public Eac3AtmosSettings meteringMode(Eac3AtmosMeteringMode meteringMode) {
    this.meteringMode = meteringMode;
    return this;
  }

  /**
   * Get meteringMode
   * @return meteringMode
   */
  @javax.annotation.Nullable
  public Eac3AtmosMeteringMode getMeteringMode() {
    return meteringMode;
  }

  public void setMeteringMode(Eac3AtmosMeteringMode meteringMode) {
    this.meteringMode = meteringMode;
  }


  public Eac3AtmosSettings sampleRate(Integer sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * Get sampleRate
   * @return sampleRate
   */
  @javax.annotation.Nullable
  public Integer getSampleRate() {
    return sampleRate;
  }

  public void setSampleRate(Integer sampleRate) {
    this.sampleRate = sampleRate;
  }


  public Eac3AtmosSettings speechThreshold(Integer speechThreshold) {
    this.speechThreshold = speechThreshold;
    return this;
  }

  /**
   * Get speechThreshold
   * @return speechThreshold
   */
  @javax.annotation.Nullable
  public Integer getSpeechThreshold() {
    return speechThreshold;
  }

  public void setSpeechThreshold(Integer speechThreshold) {
    this.speechThreshold = speechThreshold;
  }


  public Eac3AtmosSettings stereoDownmix(Eac3AtmosStereoDownmix stereoDownmix) {
    this.stereoDownmix = stereoDownmix;
    return this;
  }

  /**
   * Get stereoDownmix
   * @return stereoDownmix
   */
  @javax.annotation.Nullable
  public Eac3AtmosStereoDownmix getStereoDownmix() {
    return stereoDownmix;
  }

  public void setStereoDownmix(Eac3AtmosStereoDownmix stereoDownmix) {
    this.stereoDownmix = stereoDownmix;
  }


  public Eac3AtmosSettings surroundExMode(Eac3AtmosSurroundExMode surroundExMode) {
    this.surroundExMode = surroundExMode;
    return this;
  }

  /**
   * Get surroundExMode
   * @return surroundExMode
   */
  @javax.annotation.Nullable
  public Eac3AtmosSurroundExMode getSurroundExMode() {
    return surroundExMode;
  }

  public void setSurroundExMode(Eac3AtmosSurroundExMode surroundExMode) {
    this.surroundExMode = surroundExMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eac3AtmosSettings eac3AtmosSettings = (Eac3AtmosSettings) o;
    return Objects.equals(this.bitrate, eac3AtmosSettings.bitrate) &&
        Objects.equals(this.bitstreamMode, eac3AtmosSettings.bitstreamMode) &&
        Objects.equals(this.codingMode, eac3AtmosSettings.codingMode) &&
        Objects.equals(this.dialogueIntelligence, eac3AtmosSettings.dialogueIntelligence) &&
        Objects.equals(this.downmixControl, eac3AtmosSettings.downmixControl) &&
        Objects.equals(this.dynamicRangeCompressionLine, eac3AtmosSettings.dynamicRangeCompressionLine) &&
        Objects.equals(this.dynamicRangeCompressionRf, eac3AtmosSettings.dynamicRangeCompressionRf) &&
        Objects.equals(this.dynamicRangeControl, eac3AtmosSettings.dynamicRangeControl) &&
        Objects.equals(this.loRoCenterMixLevel, eac3AtmosSettings.loRoCenterMixLevel) &&
        Objects.equals(this.loRoSurroundMixLevel, eac3AtmosSettings.loRoSurroundMixLevel) &&
        Objects.equals(this.ltRtCenterMixLevel, eac3AtmosSettings.ltRtCenterMixLevel) &&
        Objects.equals(this.ltRtSurroundMixLevel, eac3AtmosSettings.ltRtSurroundMixLevel) &&
        Objects.equals(this.meteringMode, eac3AtmosSettings.meteringMode) &&
        Objects.equals(this.sampleRate, eac3AtmosSettings.sampleRate) &&
        Objects.equals(this.speechThreshold, eac3AtmosSettings.speechThreshold) &&
        Objects.equals(this.stereoDownmix, eac3AtmosSettings.stereoDownmix) &&
        Objects.equals(this.surroundExMode, eac3AtmosSettings.surroundExMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitrate, bitstreamMode, codingMode, dialogueIntelligence, downmixControl, dynamicRangeCompressionLine, dynamicRangeCompressionRf, dynamicRangeControl, loRoCenterMixLevel, loRoSurroundMixLevel, ltRtCenterMixLevel, ltRtSurroundMixLevel, meteringMode, sampleRate, speechThreshold, stereoDownmix, surroundExMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eac3AtmosSettings {\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    bitstreamMode: ").append(toIndentedString(bitstreamMode)).append("\n");
    sb.append("    codingMode: ").append(toIndentedString(codingMode)).append("\n");
    sb.append("    dialogueIntelligence: ").append(toIndentedString(dialogueIntelligence)).append("\n");
    sb.append("    downmixControl: ").append(toIndentedString(downmixControl)).append("\n");
    sb.append("    dynamicRangeCompressionLine: ").append(toIndentedString(dynamicRangeCompressionLine)).append("\n");
    sb.append("    dynamicRangeCompressionRf: ").append(toIndentedString(dynamicRangeCompressionRf)).append("\n");
    sb.append("    dynamicRangeControl: ").append(toIndentedString(dynamicRangeControl)).append("\n");
    sb.append("    loRoCenterMixLevel: ").append(toIndentedString(loRoCenterMixLevel)).append("\n");
    sb.append("    loRoSurroundMixLevel: ").append(toIndentedString(loRoSurroundMixLevel)).append("\n");
    sb.append("    ltRtCenterMixLevel: ").append(toIndentedString(ltRtCenterMixLevel)).append("\n");
    sb.append("    ltRtSurroundMixLevel: ").append(toIndentedString(ltRtSurroundMixLevel)).append("\n");
    sb.append("    meteringMode: ").append(toIndentedString(meteringMode)).append("\n");
    sb.append("    sampleRate: ").append(toIndentedString(sampleRate)).append("\n");
    sb.append("    speechThreshold: ").append(toIndentedString(speechThreshold)).append("\n");
    sb.append("    stereoDownmix: ").append(toIndentedString(stereoDownmix)).append("\n");
    sb.append("    surroundExMode: ").append(toIndentedString(surroundExMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bitrate");
    openapiFields.add("BitstreamMode");
    openapiFields.add("CodingMode");
    openapiFields.add("DialogueIntelligence");
    openapiFields.add("DownmixControl");
    openapiFields.add("DynamicRangeCompressionLine");
    openapiFields.add("DynamicRangeCompressionRf");
    openapiFields.add("DynamicRangeControl");
    openapiFields.add("LoRoCenterMixLevel");
    openapiFields.add("LoRoSurroundMixLevel");
    openapiFields.add("LtRtCenterMixLevel");
    openapiFields.add("LtRtSurroundMixLevel");
    openapiFields.add("MeteringMode");
    openapiFields.add("SampleRate");
    openapiFields.add("SpeechThreshold");
    openapiFields.add("StereoDownmix");
    openapiFields.add("SurroundExMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Eac3AtmosSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Eac3AtmosSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Eac3AtmosSettings is not found in the empty JSON string", Eac3AtmosSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Eac3AtmosSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Eac3AtmosSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Bitrate`
      if (jsonObj.get("Bitrate") != null && !jsonObj.get("Bitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Bitrate"));
      }
      // validate the optional field `BitstreamMode`
      if (jsonObj.get("BitstreamMode") != null && !jsonObj.get("BitstreamMode").isJsonNull()) {
        Eac3AtmosBitstreamMode.validateJsonElement(jsonObj.get("BitstreamMode"));
      }
      // validate the optional field `CodingMode`
      if (jsonObj.get("CodingMode") != null && !jsonObj.get("CodingMode").isJsonNull()) {
        Eac3AtmosCodingMode.validateJsonElement(jsonObj.get("CodingMode"));
      }
      // validate the optional field `DialogueIntelligence`
      if (jsonObj.get("DialogueIntelligence") != null && !jsonObj.get("DialogueIntelligence").isJsonNull()) {
        Eac3AtmosDialogueIntelligence.validateJsonElement(jsonObj.get("DialogueIntelligence"));
      }
      // validate the optional field `DownmixControl`
      if (jsonObj.get("DownmixControl") != null && !jsonObj.get("DownmixControl").isJsonNull()) {
        Eac3AtmosDownmixControl.validateJsonElement(jsonObj.get("DownmixControl"));
      }
      // validate the optional field `DynamicRangeCompressionLine`
      if (jsonObj.get("DynamicRangeCompressionLine") != null && !jsonObj.get("DynamicRangeCompressionLine").isJsonNull()) {
        Eac3AtmosDynamicRangeCompressionLine.validateJsonElement(jsonObj.get("DynamicRangeCompressionLine"));
      }
      // validate the optional field `DynamicRangeCompressionRf`
      if (jsonObj.get("DynamicRangeCompressionRf") != null && !jsonObj.get("DynamicRangeCompressionRf").isJsonNull()) {
        Eac3AtmosDynamicRangeCompressionRf.validateJsonElement(jsonObj.get("DynamicRangeCompressionRf"));
      }
      // validate the optional field `DynamicRangeControl`
      if (jsonObj.get("DynamicRangeControl") != null && !jsonObj.get("DynamicRangeControl").isJsonNull()) {
        Eac3AtmosDynamicRangeControl.validateJsonElement(jsonObj.get("DynamicRangeControl"));
      }
      // validate the optional field `LoRoCenterMixLevel`
      if (jsonObj.get("LoRoCenterMixLevel") != null && !jsonObj.get("LoRoCenterMixLevel").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LoRoCenterMixLevel"));
      }
      // validate the optional field `LoRoSurroundMixLevel`
      if (jsonObj.get("LoRoSurroundMixLevel") != null && !jsonObj.get("LoRoSurroundMixLevel").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LoRoSurroundMixLevel"));
      }
      // validate the optional field `LtRtCenterMixLevel`
      if (jsonObj.get("LtRtCenterMixLevel") != null && !jsonObj.get("LtRtCenterMixLevel").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LtRtCenterMixLevel"));
      }
      // validate the optional field `LtRtSurroundMixLevel`
      if (jsonObj.get("LtRtSurroundMixLevel") != null && !jsonObj.get("LtRtSurroundMixLevel").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LtRtSurroundMixLevel"));
      }
      // validate the optional field `MeteringMode`
      if (jsonObj.get("MeteringMode") != null && !jsonObj.get("MeteringMode").isJsonNull()) {
        Eac3AtmosMeteringMode.validateJsonElement(jsonObj.get("MeteringMode"));
      }
      // validate the optional field `SampleRate`
      if (jsonObj.get("SampleRate") != null && !jsonObj.get("SampleRate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SampleRate"));
      }
      // validate the optional field `SpeechThreshold`
      if (jsonObj.get("SpeechThreshold") != null && !jsonObj.get("SpeechThreshold").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SpeechThreshold"));
      }
      // validate the optional field `StereoDownmix`
      if (jsonObj.get("StereoDownmix") != null && !jsonObj.get("StereoDownmix").isJsonNull()) {
        Eac3AtmosStereoDownmix.validateJsonElement(jsonObj.get("StereoDownmix"));
      }
      // validate the optional field `SurroundExMode`
      if (jsonObj.get("SurroundExMode") != null && !jsonObj.get("SurroundExMode").isJsonNull()) {
        Eac3AtmosSurroundExMode.validateJsonElement(jsonObj.get("SurroundExMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Eac3AtmosSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Eac3AtmosSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Eac3AtmosSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Eac3AtmosSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<Eac3AtmosSettings>() {
           @Override
           public void write(JsonWriter out, Eac3AtmosSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Eac3AtmosSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Eac3AtmosSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Eac3AtmosSettings
   * @throws IOException if the JSON string is invalid with respect to Eac3AtmosSettings
   */
  public static Eac3AtmosSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Eac3AtmosSettings.class);
  }

  /**
   * Convert an instance of Eac3AtmosSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

