/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Av1AdaptiveQuantization;
import org.openapitools.client.model.Av1BitDepth;
import org.openapitools.client.model.Av1FramerateControl;
import org.openapitools.client.model.Av1FramerateConversionAlgorithm;
import org.openapitools.client.model.Av1RateControlMode;
import org.openapitools.client.model.Av1SettingsQvbrSettings;
import org.openapitools.client.model.Av1SpatialAdaptiveQuantization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoCodecSettingsAv1Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoCodecSettingsAv1Settings {
  public static final String SERIALIZED_NAME_ADAPTIVE_QUANTIZATION = "AdaptiveQuantization";
  @SerializedName(SERIALIZED_NAME_ADAPTIVE_QUANTIZATION)
  private Av1AdaptiveQuantization adaptiveQuantization;

  public static final String SERIALIZED_NAME_BIT_DEPTH = "BitDepth";
  @SerializedName(SERIALIZED_NAME_BIT_DEPTH)
  private Av1BitDepth bitDepth;

  public static final String SERIALIZED_NAME_FRAMERATE_CONTROL = "FramerateControl";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONTROL)
  private Av1FramerateControl framerateControl;

  public static final String SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM = "FramerateConversionAlgorithm";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONVERSION_ALGORITHM)
  private Av1FramerateConversionAlgorithm framerateConversionAlgorithm;

  public static final String SERIALIZED_NAME_FRAMERATE_DENOMINATOR = "FramerateDenominator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_DENOMINATOR)
  private Integer framerateDenominator;

  public static final String SERIALIZED_NAME_FRAMERATE_NUMERATOR = "FramerateNumerator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_NUMERATOR)
  private Integer framerateNumerator;

  public static final String SERIALIZED_NAME_GOP_SIZE = "GopSize";
  @SerializedName(SERIALIZED_NAME_GOP_SIZE)
  private Double gopSize;

  public static final String SERIALIZED_NAME_MAX_BITRATE = "MaxBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_BITRATE)
  private Integer maxBitrate;

  public static final String SERIALIZED_NAME_NUMBER_B_FRAMES_BETWEEN_REFERENCE_FRAMES = "NumberBFramesBetweenReferenceFrames";
  @SerializedName(SERIALIZED_NAME_NUMBER_B_FRAMES_BETWEEN_REFERENCE_FRAMES)
  private Integer numberBFramesBetweenReferenceFrames;

  public static final String SERIALIZED_NAME_QVBR_SETTINGS = "QvbrSettings";
  @SerializedName(SERIALIZED_NAME_QVBR_SETTINGS)
  private Av1SettingsQvbrSettings qvbrSettings;

  public static final String SERIALIZED_NAME_RATE_CONTROL_MODE = "RateControlMode";
  @SerializedName(SERIALIZED_NAME_RATE_CONTROL_MODE)
  private Av1RateControlMode rateControlMode;

  public static final String SERIALIZED_NAME_SLICES = "Slices";
  @SerializedName(SERIALIZED_NAME_SLICES)
  private Integer slices;

  public static final String SERIALIZED_NAME_SPATIAL_ADAPTIVE_QUANTIZATION = "SpatialAdaptiveQuantization";
  @SerializedName(SERIALIZED_NAME_SPATIAL_ADAPTIVE_QUANTIZATION)
  private Av1SpatialAdaptiveQuantization spatialAdaptiveQuantization;

  public VideoCodecSettingsAv1Settings() {
  }

  public VideoCodecSettingsAv1Settings adaptiveQuantization(Av1AdaptiveQuantization adaptiveQuantization) {
    this.adaptiveQuantization = adaptiveQuantization;
    return this;
  }

  /**
   * Get adaptiveQuantization
   * @return adaptiveQuantization
   */
  @javax.annotation.Nullable
  public Av1AdaptiveQuantization getAdaptiveQuantization() {
    return adaptiveQuantization;
  }

  public void setAdaptiveQuantization(Av1AdaptiveQuantization adaptiveQuantization) {
    this.adaptiveQuantization = adaptiveQuantization;
  }


  public VideoCodecSettingsAv1Settings bitDepth(Av1BitDepth bitDepth) {
    this.bitDepth = bitDepth;
    return this;
  }

  /**
   * Get bitDepth
   * @return bitDepth
   */
  @javax.annotation.Nullable
  public Av1BitDepth getBitDepth() {
    return bitDepth;
  }

  public void setBitDepth(Av1BitDepth bitDepth) {
    this.bitDepth = bitDepth;
  }


  public VideoCodecSettingsAv1Settings framerateControl(Av1FramerateControl framerateControl) {
    this.framerateControl = framerateControl;
    return this;
  }

  /**
   * Get framerateControl
   * @return framerateControl
   */
  @javax.annotation.Nullable
  public Av1FramerateControl getFramerateControl() {
    return framerateControl;
  }

  public void setFramerateControl(Av1FramerateControl framerateControl) {
    this.framerateControl = framerateControl;
  }


  public VideoCodecSettingsAv1Settings framerateConversionAlgorithm(Av1FramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
    return this;
  }

  /**
   * Get framerateConversionAlgorithm
   * @return framerateConversionAlgorithm
   */
  @javax.annotation.Nullable
  public Av1FramerateConversionAlgorithm getFramerateConversionAlgorithm() {
    return framerateConversionAlgorithm;
  }

  public void setFramerateConversionAlgorithm(Av1FramerateConversionAlgorithm framerateConversionAlgorithm) {
    this.framerateConversionAlgorithm = framerateConversionAlgorithm;
  }


  public VideoCodecSettingsAv1Settings framerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
    return this;
  }

  /**
   * Get framerateDenominator
   * @return framerateDenominator
   */
  @javax.annotation.Nullable
  public Integer getFramerateDenominator() {
    return framerateDenominator;
  }

  public void setFramerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
  }


  public VideoCodecSettingsAv1Settings framerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
    return this;
  }

  /**
   * Get framerateNumerator
   * @return framerateNumerator
   */
  @javax.annotation.Nullable
  public Integer getFramerateNumerator() {
    return framerateNumerator;
  }

  public void setFramerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
  }


  public VideoCodecSettingsAv1Settings gopSize(Double gopSize) {
    this.gopSize = gopSize;
    return this;
  }

  /**
   * Get gopSize
   * @return gopSize
   */
  @javax.annotation.Nullable
  public Double getGopSize() {
    return gopSize;
  }

  public void setGopSize(Double gopSize) {
    this.gopSize = gopSize;
  }


  public VideoCodecSettingsAv1Settings maxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
    return this;
  }

  /**
   * Get maxBitrate
   * @return maxBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxBitrate() {
    return maxBitrate;
  }

  public void setMaxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
  }


  public VideoCodecSettingsAv1Settings numberBFramesBetweenReferenceFrames(Integer numberBFramesBetweenReferenceFrames) {
    this.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames;
    return this;
  }

  /**
   * Get numberBFramesBetweenReferenceFrames
   * @return numberBFramesBetweenReferenceFrames
   */
  @javax.annotation.Nullable
  public Integer getNumberBFramesBetweenReferenceFrames() {
    return numberBFramesBetweenReferenceFrames;
  }

  public void setNumberBFramesBetweenReferenceFrames(Integer numberBFramesBetweenReferenceFrames) {
    this.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames;
  }


  public VideoCodecSettingsAv1Settings qvbrSettings(Av1SettingsQvbrSettings qvbrSettings) {
    this.qvbrSettings = qvbrSettings;
    return this;
  }

  /**
   * Get qvbrSettings
   * @return qvbrSettings
   */
  @javax.annotation.Nullable
  public Av1SettingsQvbrSettings getQvbrSettings() {
    return qvbrSettings;
  }

  public void setQvbrSettings(Av1SettingsQvbrSettings qvbrSettings) {
    this.qvbrSettings = qvbrSettings;
  }


  public VideoCodecSettingsAv1Settings rateControlMode(Av1RateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
    return this;
  }

  /**
   * Get rateControlMode
   * @return rateControlMode
   */
  @javax.annotation.Nullable
  public Av1RateControlMode getRateControlMode() {
    return rateControlMode;
  }

  public void setRateControlMode(Av1RateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
  }


  public VideoCodecSettingsAv1Settings slices(Integer slices) {
    this.slices = slices;
    return this;
  }

  /**
   * Get slices
   * @return slices
   */
  @javax.annotation.Nullable
  public Integer getSlices() {
    return slices;
  }

  public void setSlices(Integer slices) {
    this.slices = slices;
  }


  public VideoCodecSettingsAv1Settings spatialAdaptiveQuantization(Av1SpatialAdaptiveQuantization spatialAdaptiveQuantization) {
    this.spatialAdaptiveQuantization = spatialAdaptiveQuantization;
    return this;
  }

  /**
   * Get spatialAdaptiveQuantization
   * @return spatialAdaptiveQuantization
   */
  @javax.annotation.Nullable
  public Av1SpatialAdaptiveQuantization getSpatialAdaptiveQuantization() {
    return spatialAdaptiveQuantization;
  }

  public void setSpatialAdaptiveQuantization(Av1SpatialAdaptiveQuantization spatialAdaptiveQuantization) {
    this.spatialAdaptiveQuantization = spatialAdaptiveQuantization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoCodecSettingsAv1Settings videoCodecSettingsAv1Settings = (VideoCodecSettingsAv1Settings) o;
    return Objects.equals(this.adaptiveQuantization, videoCodecSettingsAv1Settings.adaptiveQuantization) &&
        Objects.equals(this.bitDepth, videoCodecSettingsAv1Settings.bitDepth) &&
        Objects.equals(this.framerateControl, videoCodecSettingsAv1Settings.framerateControl) &&
        Objects.equals(this.framerateConversionAlgorithm, videoCodecSettingsAv1Settings.framerateConversionAlgorithm) &&
        Objects.equals(this.framerateDenominator, videoCodecSettingsAv1Settings.framerateDenominator) &&
        Objects.equals(this.framerateNumerator, videoCodecSettingsAv1Settings.framerateNumerator) &&
        Objects.equals(this.gopSize, videoCodecSettingsAv1Settings.gopSize) &&
        Objects.equals(this.maxBitrate, videoCodecSettingsAv1Settings.maxBitrate) &&
        Objects.equals(this.numberBFramesBetweenReferenceFrames, videoCodecSettingsAv1Settings.numberBFramesBetweenReferenceFrames) &&
        Objects.equals(this.qvbrSettings, videoCodecSettingsAv1Settings.qvbrSettings) &&
        Objects.equals(this.rateControlMode, videoCodecSettingsAv1Settings.rateControlMode) &&
        Objects.equals(this.slices, videoCodecSettingsAv1Settings.slices) &&
        Objects.equals(this.spatialAdaptiveQuantization, videoCodecSettingsAv1Settings.spatialAdaptiveQuantization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adaptiveQuantization, bitDepth, framerateControl, framerateConversionAlgorithm, framerateDenominator, framerateNumerator, gopSize, maxBitrate, numberBFramesBetweenReferenceFrames, qvbrSettings, rateControlMode, slices, spatialAdaptiveQuantization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoCodecSettingsAv1Settings {\n");
    sb.append("    adaptiveQuantization: ").append(toIndentedString(adaptiveQuantization)).append("\n");
    sb.append("    bitDepth: ").append(toIndentedString(bitDepth)).append("\n");
    sb.append("    framerateControl: ").append(toIndentedString(framerateControl)).append("\n");
    sb.append("    framerateConversionAlgorithm: ").append(toIndentedString(framerateConversionAlgorithm)).append("\n");
    sb.append("    framerateDenominator: ").append(toIndentedString(framerateDenominator)).append("\n");
    sb.append("    framerateNumerator: ").append(toIndentedString(framerateNumerator)).append("\n");
    sb.append("    gopSize: ").append(toIndentedString(gopSize)).append("\n");
    sb.append("    maxBitrate: ").append(toIndentedString(maxBitrate)).append("\n");
    sb.append("    numberBFramesBetweenReferenceFrames: ").append(toIndentedString(numberBFramesBetweenReferenceFrames)).append("\n");
    sb.append("    qvbrSettings: ").append(toIndentedString(qvbrSettings)).append("\n");
    sb.append("    rateControlMode: ").append(toIndentedString(rateControlMode)).append("\n");
    sb.append("    slices: ").append(toIndentedString(slices)).append("\n");
    sb.append("    spatialAdaptiveQuantization: ").append(toIndentedString(spatialAdaptiveQuantization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdaptiveQuantization");
    openapiFields.add("BitDepth");
    openapiFields.add("FramerateControl");
    openapiFields.add("FramerateConversionAlgorithm");
    openapiFields.add("FramerateDenominator");
    openapiFields.add("FramerateNumerator");
    openapiFields.add("GopSize");
    openapiFields.add("MaxBitrate");
    openapiFields.add("NumberBFramesBetweenReferenceFrames");
    openapiFields.add("QvbrSettings");
    openapiFields.add("RateControlMode");
    openapiFields.add("Slices");
    openapiFields.add("SpatialAdaptiveQuantization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoCodecSettingsAv1Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoCodecSettingsAv1Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoCodecSettingsAv1Settings is not found in the empty JSON string", VideoCodecSettingsAv1Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoCodecSettingsAv1Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoCodecSettingsAv1Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdaptiveQuantization`
      if (jsonObj.get("AdaptiveQuantization") != null && !jsonObj.get("AdaptiveQuantization").isJsonNull()) {
        Av1AdaptiveQuantization.validateJsonElement(jsonObj.get("AdaptiveQuantization"));
      }
      // validate the optional field `BitDepth`
      if (jsonObj.get("BitDepth") != null && !jsonObj.get("BitDepth").isJsonNull()) {
        Av1BitDepth.validateJsonElement(jsonObj.get("BitDepth"));
      }
      // validate the optional field `FramerateControl`
      if (jsonObj.get("FramerateControl") != null && !jsonObj.get("FramerateControl").isJsonNull()) {
        Av1FramerateControl.validateJsonElement(jsonObj.get("FramerateControl"));
      }
      // validate the optional field `FramerateConversionAlgorithm`
      if (jsonObj.get("FramerateConversionAlgorithm") != null && !jsonObj.get("FramerateConversionAlgorithm").isJsonNull()) {
        Av1FramerateConversionAlgorithm.validateJsonElement(jsonObj.get("FramerateConversionAlgorithm"));
      }
      // validate the optional field `FramerateDenominator`
      if (jsonObj.get("FramerateDenominator") != null && !jsonObj.get("FramerateDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateDenominator"));
      }
      // validate the optional field `FramerateNumerator`
      if (jsonObj.get("FramerateNumerator") != null && !jsonObj.get("FramerateNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateNumerator"));
      }
      // validate the optional field `GopSize`
      if (jsonObj.get("GopSize") != null && !jsonObj.get("GopSize").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("GopSize"));
      }
      // validate the optional field `MaxBitrate`
      if (jsonObj.get("MaxBitrate") != null && !jsonObj.get("MaxBitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxBitrate"));
      }
      // validate the optional field `NumberBFramesBetweenReferenceFrames`
      if (jsonObj.get("NumberBFramesBetweenReferenceFrames") != null && !jsonObj.get("NumberBFramesBetweenReferenceFrames").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberBFramesBetweenReferenceFrames"));
      }
      // validate the optional field `QvbrSettings`
      if (jsonObj.get("QvbrSettings") != null && !jsonObj.get("QvbrSettings").isJsonNull()) {
        Av1SettingsQvbrSettings.validateJsonElement(jsonObj.get("QvbrSettings"));
      }
      // validate the optional field `RateControlMode`
      if (jsonObj.get("RateControlMode") != null && !jsonObj.get("RateControlMode").isJsonNull()) {
        Av1RateControlMode.validateJsonElement(jsonObj.get("RateControlMode"));
      }
      // validate the optional field `Slices`
      if (jsonObj.get("Slices") != null && !jsonObj.get("Slices").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Slices"));
      }
      // validate the optional field `SpatialAdaptiveQuantization`
      if (jsonObj.get("SpatialAdaptiveQuantization") != null && !jsonObj.get("SpatialAdaptiveQuantization").isJsonNull()) {
        Av1SpatialAdaptiveQuantization.validateJsonElement(jsonObj.get("SpatialAdaptiveQuantization"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoCodecSettingsAv1Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoCodecSettingsAv1Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoCodecSettingsAv1Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoCodecSettingsAv1Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoCodecSettingsAv1Settings>() {
           @Override
           public void write(JsonWriter out, VideoCodecSettingsAv1Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoCodecSettingsAv1Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoCodecSettingsAv1Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoCodecSettingsAv1Settings
   * @throws IOException if the JSON string is invalid with respect to VideoCodecSettingsAv1Settings
   */
  public static VideoCodecSettingsAv1Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoCodecSettingsAv1Settings.class);
  }

  /**
   * Convert an instance of VideoCodecSettingsAv1Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

