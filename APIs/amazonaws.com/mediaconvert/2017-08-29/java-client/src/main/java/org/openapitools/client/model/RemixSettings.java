/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RemixSettingsChannelMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Use Manual audio remixing to adjust audio levels for each audio channel in each output of your job. With audio remixing, you can output more or fewer audio channels than your input audio source provides.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemixSettings {
  public static final String SERIALIZED_NAME_CHANNEL_MAPPING = "ChannelMapping";
  @SerializedName(SERIALIZED_NAME_CHANNEL_MAPPING)
  private RemixSettingsChannelMapping channelMapping;

  public static final String SERIALIZED_NAME_CHANNELS_IN = "ChannelsIn";
  @SerializedName(SERIALIZED_NAME_CHANNELS_IN)
  private Integer channelsIn;

  public static final String SERIALIZED_NAME_CHANNELS_OUT = "ChannelsOut";
  @SerializedName(SERIALIZED_NAME_CHANNELS_OUT)
  private Integer channelsOut;

  public RemixSettings() {
  }

  public RemixSettings channelMapping(RemixSettingsChannelMapping channelMapping) {
    this.channelMapping = channelMapping;
    return this;
  }

  /**
   * Get channelMapping
   * @return channelMapping
   */
  @javax.annotation.Nullable
  public RemixSettingsChannelMapping getChannelMapping() {
    return channelMapping;
  }

  public void setChannelMapping(RemixSettingsChannelMapping channelMapping) {
    this.channelMapping = channelMapping;
  }


  public RemixSettings channelsIn(Integer channelsIn) {
    this.channelsIn = channelsIn;
    return this;
  }

  /**
   * Get channelsIn
   * @return channelsIn
   */
  @javax.annotation.Nullable
  public Integer getChannelsIn() {
    return channelsIn;
  }

  public void setChannelsIn(Integer channelsIn) {
    this.channelsIn = channelsIn;
  }


  public RemixSettings channelsOut(Integer channelsOut) {
    this.channelsOut = channelsOut;
    return this;
  }

  /**
   * Get channelsOut
   * @return channelsOut
   */
  @javax.annotation.Nullable
  public Integer getChannelsOut() {
    return channelsOut;
  }

  public void setChannelsOut(Integer channelsOut) {
    this.channelsOut = channelsOut;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemixSettings remixSettings = (RemixSettings) o;
    return Objects.equals(this.channelMapping, remixSettings.channelMapping) &&
        Objects.equals(this.channelsIn, remixSettings.channelsIn) &&
        Objects.equals(this.channelsOut, remixSettings.channelsOut);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelMapping, channelsIn, channelsOut);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemixSettings {\n");
    sb.append("    channelMapping: ").append(toIndentedString(channelMapping)).append("\n");
    sb.append("    channelsIn: ").append(toIndentedString(channelsIn)).append("\n");
    sb.append("    channelsOut: ").append(toIndentedString(channelsOut)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelMapping");
    openapiFields.add("ChannelsIn");
    openapiFields.add("ChannelsOut");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemixSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemixSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemixSettings is not found in the empty JSON string", RemixSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemixSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemixSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelMapping`
      if (jsonObj.get("ChannelMapping") != null && !jsonObj.get("ChannelMapping").isJsonNull()) {
        RemixSettingsChannelMapping.validateJsonElement(jsonObj.get("ChannelMapping"));
      }
      // validate the optional field `ChannelsIn`
      if (jsonObj.get("ChannelsIn") != null && !jsonObj.get("ChannelsIn").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ChannelsIn"));
      }
      // validate the optional field `ChannelsOut`
      if (jsonObj.get("ChannelsOut") != null && !jsonObj.get("ChannelsOut").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ChannelsOut"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemixSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemixSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemixSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemixSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<RemixSettings>() {
           @Override
           public void write(JsonWriter out, RemixSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemixSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemixSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemixSettings
   * @throws IOException if the JSON string is invalid with respect to RemixSettings
   */
  public static RemixSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemixSettings.class);
  }

  /**
   * Convert an instance of RemixSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

