/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CmafEncryptionSettingsSpekeKeyProvider;
import org.openapitools.client.model.CmafEncryptionSettingsStaticKeyProvider;
import org.openapitools.client.model.CmafEncryptionType;
import org.openapitools.client.model.CmafInitializationVectorInManifest;
import org.openapitools.client.model.CmafKeyProviderType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for CMAF encryption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CmafEncryptionSettings {
  public static final String SERIALIZED_NAME_CONSTANT_INITIALIZATION_VECTOR = "ConstantInitializationVector";
  @SerializedName(SERIALIZED_NAME_CONSTANT_INITIALIZATION_VECTOR)
  private String constantInitializationVector;

  public static final String SERIALIZED_NAME_ENCRYPTION_METHOD = "EncryptionMethod";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_METHOD)
  private CmafEncryptionType encryptionMethod;

  public static final String SERIALIZED_NAME_INITIALIZATION_VECTOR_IN_MANIFEST = "InitializationVectorInManifest";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_VECTOR_IN_MANIFEST)
  private CmafInitializationVectorInManifest initializationVectorInManifest;

  public static final String SERIALIZED_NAME_SPEKE_KEY_PROVIDER = "SpekeKeyProvider";
  @SerializedName(SERIALIZED_NAME_SPEKE_KEY_PROVIDER)
  private CmafEncryptionSettingsSpekeKeyProvider spekeKeyProvider;

  public static final String SERIALIZED_NAME_STATIC_KEY_PROVIDER = "StaticKeyProvider";
  @SerializedName(SERIALIZED_NAME_STATIC_KEY_PROVIDER)
  private CmafEncryptionSettingsStaticKeyProvider staticKeyProvider;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CmafKeyProviderType type;

  public CmafEncryptionSettings() {
  }

  public CmafEncryptionSettings constantInitializationVector(String constantInitializationVector) {
    this.constantInitializationVector = constantInitializationVector;
    return this;
  }

  /**
   * Get constantInitializationVector
   * @return constantInitializationVector
   */
  @javax.annotation.Nullable
  public String getConstantInitializationVector() {
    return constantInitializationVector;
  }

  public void setConstantInitializationVector(String constantInitializationVector) {
    this.constantInitializationVector = constantInitializationVector;
  }


  public CmafEncryptionSettings encryptionMethod(CmafEncryptionType encryptionMethod) {
    this.encryptionMethod = encryptionMethod;
    return this;
  }

  /**
   * Get encryptionMethod
   * @return encryptionMethod
   */
  @javax.annotation.Nullable
  public CmafEncryptionType getEncryptionMethod() {
    return encryptionMethod;
  }

  public void setEncryptionMethod(CmafEncryptionType encryptionMethod) {
    this.encryptionMethod = encryptionMethod;
  }


  public CmafEncryptionSettings initializationVectorInManifest(CmafInitializationVectorInManifest initializationVectorInManifest) {
    this.initializationVectorInManifest = initializationVectorInManifest;
    return this;
  }

  /**
   * Get initializationVectorInManifest
   * @return initializationVectorInManifest
   */
  @javax.annotation.Nullable
  public CmafInitializationVectorInManifest getInitializationVectorInManifest() {
    return initializationVectorInManifest;
  }

  public void setInitializationVectorInManifest(CmafInitializationVectorInManifest initializationVectorInManifest) {
    this.initializationVectorInManifest = initializationVectorInManifest;
  }


  public CmafEncryptionSettings spekeKeyProvider(CmafEncryptionSettingsSpekeKeyProvider spekeKeyProvider) {
    this.spekeKeyProvider = spekeKeyProvider;
    return this;
  }

  /**
   * Get spekeKeyProvider
   * @return spekeKeyProvider
   */
  @javax.annotation.Nullable
  public CmafEncryptionSettingsSpekeKeyProvider getSpekeKeyProvider() {
    return spekeKeyProvider;
  }

  public void setSpekeKeyProvider(CmafEncryptionSettingsSpekeKeyProvider spekeKeyProvider) {
    this.spekeKeyProvider = spekeKeyProvider;
  }


  public CmafEncryptionSettings staticKeyProvider(CmafEncryptionSettingsStaticKeyProvider staticKeyProvider) {
    this.staticKeyProvider = staticKeyProvider;
    return this;
  }

  /**
   * Get staticKeyProvider
   * @return staticKeyProvider
   */
  @javax.annotation.Nullable
  public CmafEncryptionSettingsStaticKeyProvider getStaticKeyProvider() {
    return staticKeyProvider;
  }

  public void setStaticKeyProvider(CmafEncryptionSettingsStaticKeyProvider staticKeyProvider) {
    this.staticKeyProvider = staticKeyProvider;
  }


  public CmafEncryptionSettings type(CmafKeyProviderType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CmafKeyProviderType getType() {
    return type;
  }

  public void setType(CmafKeyProviderType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CmafEncryptionSettings cmafEncryptionSettings = (CmafEncryptionSettings) o;
    return Objects.equals(this.constantInitializationVector, cmafEncryptionSettings.constantInitializationVector) &&
        Objects.equals(this.encryptionMethod, cmafEncryptionSettings.encryptionMethod) &&
        Objects.equals(this.initializationVectorInManifest, cmafEncryptionSettings.initializationVectorInManifest) &&
        Objects.equals(this.spekeKeyProvider, cmafEncryptionSettings.spekeKeyProvider) &&
        Objects.equals(this.staticKeyProvider, cmafEncryptionSettings.staticKeyProvider) &&
        Objects.equals(this.type, cmafEncryptionSettings.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constantInitializationVector, encryptionMethod, initializationVectorInManifest, spekeKeyProvider, staticKeyProvider, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CmafEncryptionSettings {\n");
    sb.append("    constantInitializationVector: ").append(toIndentedString(constantInitializationVector)).append("\n");
    sb.append("    encryptionMethod: ").append(toIndentedString(encryptionMethod)).append("\n");
    sb.append("    initializationVectorInManifest: ").append(toIndentedString(initializationVectorInManifest)).append("\n");
    sb.append("    spekeKeyProvider: ").append(toIndentedString(spekeKeyProvider)).append("\n");
    sb.append("    staticKeyProvider: ").append(toIndentedString(staticKeyProvider)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConstantInitializationVector");
    openapiFields.add("EncryptionMethod");
    openapiFields.add("InitializationVectorInManifest");
    openapiFields.add("SpekeKeyProvider");
    openapiFields.add("StaticKeyProvider");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CmafEncryptionSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CmafEncryptionSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CmafEncryptionSettings is not found in the empty JSON string", CmafEncryptionSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CmafEncryptionSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CmafEncryptionSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConstantInitializationVector`
      if (jsonObj.get("ConstantInitializationVector") != null && !jsonObj.get("ConstantInitializationVector").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConstantInitializationVector"));
      }
      // validate the optional field `EncryptionMethod`
      if (jsonObj.get("EncryptionMethod") != null && !jsonObj.get("EncryptionMethod").isJsonNull()) {
        CmafEncryptionType.validateJsonElement(jsonObj.get("EncryptionMethod"));
      }
      // validate the optional field `InitializationVectorInManifest`
      if (jsonObj.get("InitializationVectorInManifest") != null && !jsonObj.get("InitializationVectorInManifest").isJsonNull()) {
        CmafInitializationVectorInManifest.validateJsonElement(jsonObj.get("InitializationVectorInManifest"));
      }
      // validate the optional field `SpekeKeyProvider`
      if (jsonObj.get("SpekeKeyProvider") != null && !jsonObj.get("SpekeKeyProvider").isJsonNull()) {
        CmafEncryptionSettingsSpekeKeyProvider.validateJsonElement(jsonObj.get("SpekeKeyProvider"));
      }
      // validate the optional field `StaticKeyProvider`
      if (jsonObj.get("StaticKeyProvider") != null && !jsonObj.get("StaticKeyProvider").isJsonNull()) {
        CmafEncryptionSettingsStaticKeyProvider.validateJsonElement(jsonObj.get("StaticKeyProvider"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        CmafKeyProviderType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CmafEncryptionSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CmafEncryptionSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CmafEncryptionSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CmafEncryptionSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CmafEncryptionSettings>() {
           @Override
           public void write(JsonWriter out, CmafEncryptionSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CmafEncryptionSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CmafEncryptionSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CmafEncryptionSettings
   * @throws IOException if the JSON string is invalid with respect to CmafEncryptionSettings
   */
  public static CmafEncryptionSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CmafEncryptionSettings.class);
  }

  /**
   * Convert an instance of CmafEncryptionSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

