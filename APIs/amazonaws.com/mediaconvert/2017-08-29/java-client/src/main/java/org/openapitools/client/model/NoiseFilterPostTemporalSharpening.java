/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * When you set Noise reducer to Temporal, the bandwidth and sharpness of your output is reduced. You can optionally use Post temporal sharpening to apply sharpening to the edges of your output. Note that Post temporal sharpening will also make the bandwidth reduction from the Noise reducer smaller. The default behavior, Auto, allows the transcoder to determine whether to apply sharpening, depending on your input type and quality. When you set Post temporal sharpening to Enabled, specify how much sharpening is applied using Post temporal sharpening strength. Set Post temporal sharpening to Disabled to not apply sharpening.
 */
@JsonAdapter(NoiseFilterPostTemporalSharpening.Adapter.class)
public enum NoiseFilterPostTemporalSharpening {
  
  DISABLED("DISABLED"),
  
  ENABLED("ENABLED"),
  
  AUTO("AUTO");

  private String value;

  NoiseFilterPostTemporalSharpening(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static NoiseFilterPostTemporalSharpening fromValue(String value) {
    for (NoiseFilterPostTemporalSharpening b : NoiseFilterPostTemporalSharpening.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<NoiseFilterPostTemporalSharpening> {
    @Override
    public void write(final JsonWriter jsonWriter, final NoiseFilterPostTemporalSharpening enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public NoiseFilterPostTemporalSharpening read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return NoiseFilterPostTemporalSharpening.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    NoiseFilterPostTemporalSharpening.fromValue(value);
  }
}

