/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NoiseReducerFilter;
import org.openapitools.client.model.NoiseReducerFilterSettings;
import org.openapitools.client.model.NoiseReducerSpatialFilterSettings;
import org.openapitools.client.model.NoiseReducerTemporalFilterSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Enable the Noise reducer feature to remove noise from your video output if necessary. Enable or disable this feature for each output individually. This setting is disabled by default. When you enable Noise reducer, you must also select a value for Noise reducer filter. For AVC outputs, when you include Noise reducer, you cannot include the Bandwidth reduction filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NoiseReducer {
  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private NoiseReducerFilter filter;

  public static final String SERIALIZED_NAME_FILTER_SETTINGS = "FilterSettings";
  @SerializedName(SERIALIZED_NAME_FILTER_SETTINGS)
  private NoiseReducerFilterSettings filterSettings;

  public static final String SERIALIZED_NAME_SPATIAL_FILTER_SETTINGS = "SpatialFilterSettings";
  @SerializedName(SERIALIZED_NAME_SPATIAL_FILTER_SETTINGS)
  private NoiseReducerSpatialFilterSettings spatialFilterSettings;

  public static final String SERIALIZED_NAME_TEMPORAL_FILTER_SETTINGS = "TemporalFilterSettings";
  @SerializedName(SERIALIZED_NAME_TEMPORAL_FILTER_SETTINGS)
  private NoiseReducerTemporalFilterSettings temporalFilterSettings;

  public NoiseReducer() {
  }

  public NoiseReducer filter(NoiseReducerFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public NoiseReducerFilter getFilter() {
    return filter;
  }

  public void setFilter(NoiseReducerFilter filter) {
    this.filter = filter;
  }


  public NoiseReducer filterSettings(NoiseReducerFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
    return this;
  }

  /**
   * Get filterSettings
   * @return filterSettings
   */
  @javax.annotation.Nullable
  public NoiseReducerFilterSettings getFilterSettings() {
    return filterSettings;
  }

  public void setFilterSettings(NoiseReducerFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
  }


  public NoiseReducer spatialFilterSettings(NoiseReducerSpatialFilterSettings spatialFilterSettings) {
    this.spatialFilterSettings = spatialFilterSettings;
    return this;
  }

  /**
   * Get spatialFilterSettings
   * @return spatialFilterSettings
   */
  @javax.annotation.Nullable
  public NoiseReducerSpatialFilterSettings getSpatialFilterSettings() {
    return spatialFilterSettings;
  }

  public void setSpatialFilterSettings(NoiseReducerSpatialFilterSettings spatialFilterSettings) {
    this.spatialFilterSettings = spatialFilterSettings;
  }


  public NoiseReducer temporalFilterSettings(NoiseReducerTemporalFilterSettings temporalFilterSettings) {
    this.temporalFilterSettings = temporalFilterSettings;
    return this;
  }

  /**
   * Get temporalFilterSettings
   * @return temporalFilterSettings
   */
  @javax.annotation.Nullable
  public NoiseReducerTemporalFilterSettings getTemporalFilterSettings() {
    return temporalFilterSettings;
  }

  public void setTemporalFilterSettings(NoiseReducerTemporalFilterSettings temporalFilterSettings) {
    this.temporalFilterSettings = temporalFilterSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NoiseReducer noiseReducer = (NoiseReducer) o;
    return Objects.equals(this.filter, noiseReducer.filter) &&
        Objects.equals(this.filterSettings, noiseReducer.filterSettings) &&
        Objects.equals(this.spatialFilterSettings, noiseReducer.spatialFilterSettings) &&
        Objects.equals(this.temporalFilterSettings, noiseReducer.temporalFilterSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, filterSettings, spatialFilterSettings, temporalFilterSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NoiseReducer {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    filterSettings: ").append(toIndentedString(filterSettings)).append("\n");
    sb.append("    spatialFilterSettings: ").append(toIndentedString(spatialFilterSettings)).append("\n");
    sb.append("    temporalFilterSettings: ").append(toIndentedString(temporalFilterSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Filter");
    openapiFields.add("FilterSettings");
    openapiFields.add("SpatialFilterSettings");
    openapiFields.add("TemporalFilterSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NoiseReducer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NoiseReducer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NoiseReducer is not found in the empty JSON string", NoiseReducer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NoiseReducer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NoiseReducer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Filter`
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) {
        NoiseReducerFilter.validateJsonElement(jsonObj.get("Filter"));
      }
      // validate the optional field `FilterSettings`
      if (jsonObj.get("FilterSettings") != null && !jsonObj.get("FilterSettings").isJsonNull()) {
        NoiseReducerFilterSettings.validateJsonElement(jsonObj.get("FilterSettings"));
      }
      // validate the optional field `SpatialFilterSettings`
      if (jsonObj.get("SpatialFilterSettings") != null && !jsonObj.get("SpatialFilterSettings").isJsonNull()) {
        NoiseReducerSpatialFilterSettings.validateJsonElement(jsonObj.get("SpatialFilterSettings"));
      }
      // validate the optional field `TemporalFilterSettings`
      if (jsonObj.get("TemporalFilterSettings") != null && !jsonObj.get("TemporalFilterSettings").isJsonNull()) {
        NoiseReducerTemporalFilterSettings.validateJsonElement(jsonObj.get("TemporalFilterSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NoiseReducer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NoiseReducer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NoiseReducer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NoiseReducer.class));

       return (TypeAdapter<T>) new TypeAdapter<NoiseReducer>() {
           @Override
           public void write(JsonWriter out, NoiseReducer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NoiseReducer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NoiseReducer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NoiseReducer
   * @throws IOException if the JSON string is invalid with respect to NoiseReducer
   */
  public static NoiseReducer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NoiseReducer.class);
  }

  /**
   * Convert an instance of NoiseReducer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

