/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be \&quot;urn:scte:scte35:2013:bin\&quot;. To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata to Passthrough.
 */
@JsonAdapter(MpdManifestMetadataSignaling.Adapter.class)
public enum MpdManifestMetadataSignaling {
  
  ENABLED("ENABLED"),
  
  DISABLED("DISABLED");

  private String value;

  MpdManifestMetadataSignaling(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MpdManifestMetadataSignaling fromValue(String value) {
    for (MpdManifestMetadataSignaling b : MpdManifestMetadataSignaling.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MpdManifestMetadataSignaling> {
    @Override
    public void write(final JsonWriter jsonWriter, final MpdManifestMetadataSignaling enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MpdManifestMetadataSignaling read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MpdManifestMetadataSignaling.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    MpdManifestMetadataSignaling.fromValue(value);
  }
}

