/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * This setting can improve the compatibility of your output with video players on obsolete devices. It applies only to DASH H.264 outputs with DRM encryption. Choose Unencrypted SEI only to correct problems with playback on older devices. Otherwise, keep the default setting CENC v1. If you choose Unencrypted SEI, for that output, the service will exclude the access unit delimiter and will leave the SEI NAL units unencrypted.
 */
@JsonAdapter(DashIsoPlaybackDeviceCompatibility.Adapter.class)
public enum DashIsoPlaybackDeviceCompatibility {
  
  CENC_V1("CENC_V1"),
  
  UNENCRYPTED_SEI("UNENCRYPTED_SEI");

  private String value;

  DashIsoPlaybackDeviceCompatibility(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DashIsoPlaybackDeviceCompatibility fromValue(String value) {
    for (DashIsoPlaybackDeviceCompatibility b : DashIsoPlaybackDeviceCompatibility.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DashIsoPlaybackDeviceCompatibility> {
    @Override
    public void write(final JsonWriter jsonWriter, final DashIsoPlaybackDeviceCompatibility enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DashIsoPlaybackDeviceCompatibility read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DashIsoPlaybackDeviceCompatibility.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DashIsoPlaybackDeviceCompatibility.fromValue(value);
  }
}

