/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Optional. When you have AFD signaling set up in your output video stream, use this setting to choose whether to also include it in the MXF wrapper. Choose Don&#39;t copy to exclude AFD signaling from the MXF wrapper. Choose Copy from video stream to copy the AFD values from the video stream for this output to the MXF wrapper. Regardless of which option you choose, the AFD values remain in the video stream. Related settings: To set up your output to include or exclude AFD values, see AfdSignaling, under VideoDescription. On the console, find AFD signaling under the output&#39;s video encoding settings.
 */
@JsonAdapter(MxfAfdSignaling.Adapter.class)
public enum MxfAfdSignaling {
  
  NO_COPY("NO_COPY"),
  
  COPY_FROM_VIDEO("COPY_FROM_VIDEO");

  private String value;

  MxfAfdSignaling(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MxfAfdSignaling fromValue(String value) {
    for (MxfAfdSignaling b : MxfAfdSignaling.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MxfAfdSignaling> {
    @Override
    public void write(final JsonWriter jsonWriter, final MxfAfdSignaling enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MxfAfdSignaling read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MxfAfdSignaling.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    MxfAfdSignaling.fromValue(value);
  }
}

