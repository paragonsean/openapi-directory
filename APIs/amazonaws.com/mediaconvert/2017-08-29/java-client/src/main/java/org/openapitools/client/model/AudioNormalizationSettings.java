/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioNormalizationAlgorithm;
import org.openapitools.client.model.AudioNormalizationAlgorithmControl;
import org.openapitools.client.model.AudioNormalizationLoudnessLogging;
import org.openapitools.client.model.AudioNormalizationPeakCalculation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Advanced audio normalization settings. Ignore these settings unless you need to comply with a loudness standard.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioNormalizationSettings {
  public static final String SERIALIZED_NAME_ALGORITHM = "Algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private AudioNormalizationAlgorithm algorithm;

  public static final String SERIALIZED_NAME_ALGORITHM_CONTROL = "AlgorithmControl";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_CONTROL)
  private AudioNormalizationAlgorithmControl algorithmControl;

  public static final String SERIALIZED_NAME_CORRECTION_GATE_LEVEL = "CorrectionGateLevel";
  @SerializedName(SERIALIZED_NAME_CORRECTION_GATE_LEVEL)
  private Integer correctionGateLevel;

  public static final String SERIALIZED_NAME_LOUDNESS_LOGGING = "LoudnessLogging";
  @SerializedName(SERIALIZED_NAME_LOUDNESS_LOGGING)
  private AudioNormalizationLoudnessLogging loudnessLogging;

  public static final String SERIALIZED_NAME_PEAK_CALCULATION = "PeakCalculation";
  @SerializedName(SERIALIZED_NAME_PEAK_CALCULATION)
  private AudioNormalizationPeakCalculation peakCalculation;

  public static final String SERIALIZED_NAME_TARGET_LKFS = "TargetLkfs";
  @SerializedName(SERIALIZED_NAME_TARGET_LKFS)
  private Double targetLkfs;

  public static final String SERIALIZED_NAME_TRUE_PEAK_LIMITER_THRESHOLD = "TruePeakLimiterThreshold";
  @SerializedName(SERIALIZED_NAME_TRUE_PEAK_LIMITER_THRESHOLD)
  private Double truePeakLimiterThreshold;

  public AudioNormalizationSettings() {
  }

  public AudioNormalizationSettings algorithm(AudioNormalizationAlgorithm algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Get algorithm
   * @return algorithm
   */
  @javax.annotation.Nullable
  public AudioNormalizationAlgorithm getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(AudioNormalizationAlgorithm algorithm) {
    this.algorithm = algorithm;
  }


  public AudioNormalizationSettings algorithmControl(AudioNormalizationAlgorithmControl algorithmControl) {
    this.algorithmControl = algorithmControl;
    return this;
  }

  /**
   * Get algorithmControl
   * @return algorithmControl
   */
  @javax.annotation.Nullable
  public AudioNormalizationAlgorithmControl getAlgorithmControl() {
    return algorithmControl;
  }

  public void setAlgorithmControl(AudioNormalizationAlgorithmControl algorithmControl) {
    this.algorithmControl = algorithmControl;
  }


  public AudioNormalizationSettings correctionGateLevel(Integer correctionGateLevel) {
    this.correctionGateLevel = correctionGateLevel;
    return this;
  }

  /**
   * Get correctionGateLevel
   * @return correctionGateLevel
   */
  @javax.annotation.Nullable
  public Integer getCorrectionGateLevel() {
    return correctionGateLevel;
  }

  public void setCorrectionGateLevel(Integer correctionGateLevel) {
    this.correctionGateLevel = correctionGateLevel;
  }


  public AudioNormalizationSettings loudnessLogging(AudioNormalizationLoudnessLogging loudnessLogging) {
    this.loudnessLogging = loudnessLogging;
    return this;
  }

  /**
   * Get loudnessLogging
   * @return loudnessLogging
   */
  @javax.annotation.Nullable
  public AudioNormalizationLoudnessLogging getLoudnessLogging() {
    return loudnessLogging;
  }

  public void setLoudnessLogging(AudioNormalizationLoudnessLogging loudnessLogging) {
    this.loudnessLogging = loudnessLogging;
  }


  public AudioNormalizationSettings peakCalculation(AudioNormalizationPeakCalculation peakCalculation) {
    this.peakCalculation = peakCalculation;
    return this;
  }

  /**
   * Get peakCalculation
   * @return peakCalculation
   */
  @javax.annotation.Nullable
  public AudioNormalizationPeakCalculation getPeakCalculation() {
    return peakCalculation;
  }

  public void setPeakCalculation(AudioNormalizationPeakCalculation peakCalculation) {
    this.peakCalculation = peakCalculation;
  }


  public AudioNormalizationSettings targetLkfs(Double targetLkfs) {
    this.targetLkfs = targetLkfs;
    return this;
  }

  /**
   * Get targetLkfs
   * @return targetLkfs
   */
  @javax.annotation.Nullable
  public Double getTargetLkfs() {
    return targetLkfs;
  }

  public void setTargetLkfs(Double targetLkfs) {
    this.targetLkfs = targetLkfs;
  }


  public AudioNormalizationSettings truePeakLimiterThreshold(Double truePeakLimiterThreshold) {
    this.truePeakLimiterThreshold = truePeakLimiterThreshold;
    return this;
  }

  /**
   * Get truePeakLimiterThreshold
   * @return truePeakLimiterThreshold
   */
  @javax.annotation.Nullable
  public Double getTruePeakLimiterThreshold() {
    return truePeakLimiterThreshold;
  }

  public void setTruePeakLimiterThreshold(Double truePeakLimiterThreshold) {
    this.truePeakLimiterThreshold = truePeakLimiterThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioNormalizationSettings audioNormalizationSettings = (AudioNormalizationSettings) o;
    return Objects.equals(this.algorithm, audioNormalizationSettings.algorithm) &&
        Objects.equals(this.algorithmControl, audioNormalizationSettings.algorithmControl) &&
        Objects.equals(this.correctionGateLevel, audioNormalizationSettings.correctionGateLevel) &&
        Objects.equals(this.loudnessLogging, audioNormalizationSettings.loudnessLogging) &&
        Objects.equals(this.peakCalculation, audioNormalizationSettings.peakCalculation) &&
        Objects.equals(this.targetLkfs, audioNormalizationSettings.targetLkfs) &&
        Objects.equals(this.truePeakLimiterThreshold, audioNormalizationSettings.truePeakLimiterThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, algorithmControl, correctionGateLevel, loudnessLogging, peakCalculation, targetLkfs, truePeakLimiterThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioNormalizationSettings {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    algorithmControl: ").append(toIndentedString(algorithmControl)).append("\n");
    sb.append("    correctionGateLevel: ").append(toIndentedString(correctionGateLevel)).append("\n");
    sb.append("    loudnessLogging: ").append(toIndentedString(loudnessLogging)).append("\n");
    sb.append("    peakCalculation: ").append(toIndentedString(peakCalculation)).append("\n");
    sb.append("    targetLkfs: ").append(toIndentedString(targetLkfs)).append("\n");
    sb.append("    truePeakLimiterThreshold: ").append(toIndentedString(truePeakLimiterThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Algorithm");
    openapiFields.add("AlgorithmControl");
    openapiFields.add("CorrectionGateLevel");
    openapiFields.add("LoudnessLogging");
    openapiFields.add("PeakCalculation");
    openapiFields.add("TargetLkfs");
    openapiFields.add("TruePeakLimiterThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioNormalizationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioNormalizationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioNormalizationSettings is not found in the empty JSON string", AudioNormalizationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioNormalizationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioNormalizationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Algorithm`
      if (jsonObj.get("Algorithm") != null && !jsonObj.get("Algorithm").isJsonNull()) {
        AudioNormalizationAlgorithm.validateJsonElement(jsonObj.get("Algorithm"));
      }
      // validate the optional field `AlgorithmControl`
      if (jsonObj.get("AlgorithmControl") != null && !jsonObj.get("AlgorithmControl").isJsonNull()) {
        AudioNormalizationAlgorithmControl.validateJsonElement(jsonObj.get("AlgorithmControl"));
      }
      // validate the optional field `CorrectionGateLevel`
      if (jsonObj.get("CorrectionGateLevel") != null && !jsonObj.get("CorrectionGateLevel").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CorrectionGateLevel"));
      }
      // validate the optional field `LoudnessLogging`
      if (jsonObj.get("LoudnessLogging") != null && !jsonObj.get("LoudnessLogging").isJsonNull()) {
        AudioNormalizationLoudnessLogging.validateJsonElement(jsonObj.get("LoudnessLogging"));
      }
      // validate the optional field `PeakCalculation`
      if (jsonObj.get("PeakCalculation") != null && !jsonObj.get("PeakCalculation").isJsonNull()) {
        AudioNormalizationPeakCalculation.validateJsonElement(jsonObj.get("PeakCalculation"));
      }
      // validate the optional field `TargetLkfs`
      if (jsonObj.get("TargetLkfs") != null && !jsonObj.get("TargetLkfs").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("TargetLkfs"));
      }
      // validate the optional field `TruePeakLimiterThreshold`
      if (jsonObj.get("TruePeakLimiterThreshold") != null && !jsonObj.get("TruePeakLimiterThreshold").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("TruePeakLimiterThreshold"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioNormalizationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioNormalizationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioNormalizationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioNormalizationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioNormalizationSettings>() {
           @Override
           public void write(JsonWriter out, AudioNormalizationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioNormalizationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioNormalizationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioNormalizationSettings
   * @throws IOException if the JSON string is invalid with respect to AudioNormalizationSettings
   */
  public static AudioNormalizationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioNormalizationSettings.class);
  }

  /**
   * Convert an instance of AudioNormalizationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

