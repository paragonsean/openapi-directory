/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Keep the default value, Enabled, to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren&#39;t moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn&#39;t take into account where the viewer&#39;s attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn&#39;t have moving objects with sharp edges, such as sports athletes&#39; faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization.
 */
@JsonAdapter(H265TemporalAdaptiveQuantization.Adapter.class)
public enum H265TemporalAdaptiveQuantization {
  
  DISABLED("DISABLED"),
  
  ENABLED("ENABLED");

  private String value;

  H265TemporalAdaptiveQuantization(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H265TemporalAdaptiveQuantization fromValue(String value) {
    for (H265TemporalAdaptiveQuantization b : H265TemporalAdaptiveQuantization.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H265TemporalAdaptiveQuantization> {
    @Override
    public void write(final JsonWriter jsonWriter, final H265TemporalAdaptiveQuantization enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H265TemporalAdaptiveQuantization read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H265TemporalAdaptiveQuantization.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H265TemporalAdaptiveQuantization.fromValue(value);
  }
}

