/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
 */
@JsonAdapter(LanguageCode.Adapter.class)
public enum LanguageCode {
  
  ENG("ENG"),
  
  SPA("SPA"),
  
  FRA("FRA"),
  
  DEU("DEU"),
  
  GER("GER"),
  
  ZHO("ZHO"),
  
  ARA("ARA"),
  
  HIN("HIN"),
  
  JPN("JPN"),
  
  RUS("RUS"),
  
  POR("POR"),
  
  ITA("ITA"),
  
  URD("URD"),
  
  VIE("VIE"),
  
  KOR("KOR"),
  
  PAN("PAN"),
  
  ABK("ABK"),
  
  AAR("AAR"),
  
  AFR("AFR"),
  
  AKA("AKA"),
  
  SQI("SQI"),
  
  AMH("AMH"),
  
  ARG("ARG"),
  
  HYE("HYE"),
  
  ASM("ASM"),
  
  AVA("AVA"),
  
  AVE("AVE"),
  
  AYM("AYM"),
  
  AZE("AZE"),
  
  BAM("BAM"),
  
  BAK("BAK"),
  
  EUS("EUS"),
  
  BEL("BEL"),
  
  BEN("BEN"),
  
  BIH("BIH"),
  
  BIS("BIS"),
  
  BOS("BOS"),
  
  BRE("BRE"),
  
  BUL("BUL"),
  
  MYA("MYA"),
  
  CAT("CAT"),
  
  KHM("KHM"),
  
  CHA("CHA"),
  
  CHE("CHE"),
  
  NYA("NYA"),
  
  CHU("CHU"),
  
  CHV("CHV"),
  
  COR("COR"),
  
  COS("COS"),
  
  CRE("CRE"),
  
  HRV("HRV"),
  
  CES("CES"),
  
  DAN("DAN"),
  
  DIV("DIV"),
  
  NLD("NLD"),
  
  DZO("DZO"),
  
  ENM("ENM"),
  
  EPO("EPO"),
  
  EST("EST"),
  
  EWE("EWE"),
  
  FAO("FAO"),
  
  FIJ("FIJ"),
  
  FIN("FIN"),
  
  FRM("FRM"),
  
  FUL("FUL"),
  
  GLA("GLA"),
  
  GLG("GLG"),
  
  LUG("LUG"),
  
  KAT("KAT"),
  
  ELL("ELL"),
  
  GRN("GRN"),
  
  GUJ("GUJ"),
  
  HAT("HAT"),
  
  HAU("HAU"),
  
  HEB("HEB"),
  
  HER("HER"),
  
  HMO("HMO"),
  
  HUN("HUN"),
  
  ISL("ISL"),
  
  IDO("IDO"),
  
  IBO("IBO"),
  
  IND("IND"),
  
  INA("INA"),
  
  ILE("ILE"),
  
  IKU("IKU"),
  
  IPK("IPK"),
  
  GLE("GLE"),
  
  JAV("JAV"),
  
  KAL("KAL"),
  
  KAN("KAN"),
  
  KAU("KAU"),
  
  KAS("KAS"),
  
  KAZ("KAZ"),
  
  KIK("KIK"),
  
  KIN("KIN"),
  
  KIR("KIR"),
  
  KOM("KOM"),
  
  KON("KON"),
  
  KUA("KUA"),
  
  KUR("KUR"),
  
  LAO("LAO"),
  
  LAT("LAT"),
  
  LAV("LAV"),
  
  LIM("LIM"),
  
  LIN("LIN"),
  
  LIT("LIT"),
  
  LUB("LUB"),
  
  LTZ("LTZ"),
  
  MKD("MKD"),
  
  MLG("MLG"),
  
  MSA("MSA"),
  
  MAL("MAL"),
  
  MLT("MLT"),
  
  GLV("GLV"),
  
  MRI("MRI"),
  
  MAR("MAR"),
  
  MAH("MAH"),
  
  MON("MON"),
  
  NAU("NAU"),
  
  NAV("NAV"),
  
  NDE("NDE"),
  
  NBL("NBL"),
  
  NDO("NDO"),
  
  NEP("NEP"),
  
  SME("SME"),
  
  NOR("NOR"),
  
  NOB("NOB"),
  
  NNO("NNO"),
  
  OCI("OCI"),
  
  OJI("OJI"),
  
  ORI("ORI"),
  
  ORM("ORM"),
  
  OSS("OSS"),
  
  PLI("PLI"),
  
  FAS("FAS"),
  
  POL("POL"),
  
  PUS("PUS"),
  
  QUE("QUE"),
  
  QAA("QAA"),
  
  RON("RON"),
  
  ROH("ROH"),
  
  RUN("RUN"),
  
  SMO("SMO"),
  
  SAG("SAG"),
  
  SAN("SAN"),
  
  SRD("SRD"),
  
  SRB("SRB"),
  
  SNA("SNA"),
  
  III("III"),
  
  SND("SND"),
  
  SIN("SIN"),
  
  SLK("SLK"),
  
  SLV("SLV"),
  
  SOM("SOM"),
  
  SOT("SOT"),
  
  SUN("SUN"),
  
  SWA("SWA"),
  
  SSW("SSW"),
  
  SWE("SWE"),
  
  TGL("TGL"),
  
  TAH("TAH"),
  
  TGK("TGK"),
  
  TAM("TAM"),
  
  TAT("TAT"),
  
  TEL("TEL"),
  
  THA("THA"),
  
  BOD("BOD"),
  
  TIR("TIR"),
  
  TON("TON"),
  
  TSO("TSO"),
  
  TSN("TSN"),
  
  TUR("TUR"),
  
  TUK("TUK"),
  
  TWI("TWI"),
  
  UIG("UIG"),
  
  UKR("UKR"),
  
  UZB("UZB"),
  
  VEN("VEN"),
  
  VOL("VOL"),
  
  WLN("WLN"),
  
  CYM("CYM"),
  
  FRY("FRY"),
  
  WOL("WOL"),
  
  XHO("XHO"),
  
  YID("YID"),
  
  YOR("YOR"),
  
  ZHA("ZHA"),
  
  ZUL("ZUL"),
  
  ORJ("ORJ"),
  
  QPC("QPC"),
  
  TNG("TNG"),
  
  SRP("SRP");

  private String value;

  LanguageCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LanguageCode fromValue(String value) {
    for (LanguageCode b : LanguageCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LanguageCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final LanguageCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LanguageCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LanguageCode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    LanguageCode.fromValue(value);
  }
}

