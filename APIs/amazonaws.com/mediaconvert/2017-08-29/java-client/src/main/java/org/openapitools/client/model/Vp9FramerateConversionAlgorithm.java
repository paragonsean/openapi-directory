/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
 */
@JsonAdapter(Vp9FramerateConversionAlgorithm.Adapter.class)
public enum Vp9FramerateConversionAlgorithm {
  
  DUPLICATE_DROP("DUPLICATE_DROP"),
  
  INTERPOLATE("INTERPOLATE"),
  
  FRAMEFORMER("FRAMEFORMER");

  private String value;

  Vp9FramerateConversionAlgorithm(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Vp9FramerateConversionAlgorithm fromValue(String value) {
    for (Vp9FramerateConversionAlgorithm b : Vp9FramerateConversionAlgorithm.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Vp9FramerateConversionAlgorithm> {
    @Override
    public void write(final JsonWriter jsonWriter, final Vp9FramerateConversionAlgorithm enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Vp9FramerateConversionAlgorithm read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Vp9FramerateConversionAlgorithm.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Vp9FramerateConversionAlgorithm.fromValue(value);
  }
}

