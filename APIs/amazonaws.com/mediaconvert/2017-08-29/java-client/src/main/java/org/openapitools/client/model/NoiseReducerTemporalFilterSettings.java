/*
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NoiseFilterPostTemporalSharpening;
import org.openapitools.client.model.NoiseFilterPostTemporalSharpeningStrength;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NoiseReducerTemporalFilterSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:13.098140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NoiseReducerTemporalFilterSettings {
  public static final String SERIALIZED_NAME_AGGRESSIVE_MODE = "AggressiveMode";
  @SerializedName(SERIALIZED_NAME_AGGRESSIVE_MODE)
  private Integer aggressiveMode;

  public static final String SERIALIZED_NAME_POST_TEMPORAL_SHARPENING = "PostTemporalSharpening";
  @SerializedName(SERIALIZED_NAME_POST_TEMPORAL_SHARPENING)
  private NoiseFilterPostTemporalSharpening postTemporalSharpening;

  public static final String SERIALIZED_NAME_POST_TEMPORAL_SHARPENING_STRENGTH = "PostTemporalSharpeningStrength";
  @SerializedName(SERIALIZED_NAME_POST_TEMPORAL_SHARPENING_STRENGTH)
  private NoiseFilterPostTemporalSharpeningStrength postTemporalSharpeningStrength;

  public static final String SERIALIZED_NAME_SPEED = "Speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Integer speed;

  public static final String SERIALIZED_NAME_STRENGTH = "Strength";
  @SerializedName(SERIALIZED_NAME_STRENGTH)
  private Integer strength;

  public NoiseReducerTemporalFilterSettings() {
  }

  public NoiseReducerTemporalFilterSettings aggressiveMode(Integer aggressiveMode) {
    this.aggressiveMode = aggressiveMode;
    return this;
  }

  /**
   * Get aggressiveMode
   * @return aggressiveMode
   */
  @javax.annotation.Nullable
  public Integer getAggressiveMode() {
    return aggressiveMode;
  }

  public void setAggressiveMode(Integer aggressiveMode) {
    this.aggressiveMode = aggressiveMode;
  }


  public NoiseReducerTemporalFilterSettings postTemporalSharpening(NoiseFilterPostTemporalSharpening postTemporalSharpening) {
    this.postTemporalSharpening = postTemporalSharpening;
    return this;
  }

  /**
   * Get postTemporalSharpening
   * @return postTemporalSharpening
   */
  @javax.annotation.Nullable
  public NoiseFilterPostTemporalSharpening getPostTemporalSharpening() {
    return postTemporalSharpening;
  }

  public void setPostTemporalSharpening(NoiseFilterPostTemporalSharpening postTemporalSharpening) {
    this.postTemporalSharpening = postTemporalSharpening;
  }


  public NoiseReducerTemporalFilterSettings postTemporalSharpeningStrength(NoiseFilterPostTemporalSharpeningStrength postTemporalSharpeningStrength) {
    this.postTemporalSharpeningStrength = postTemporalSharpeningStrength;
    return this;
  }

  /**
   * Get postTemporalSharpeningStrength
   * @return postTemporalSharpeningStrength
   */
  @javax.annotation.Nullable
  public NoiseFilterPostTemporalSharpeningStrength getPostTemporalSharpeningStrength() {
    return postTemporalSharpeningStrength;
  }

  public void setPostTemporalSharpeningStrength(NoiseFilterPostTemporalSharpeningStrength postTemporalSharpeningStrength) {
    this.postTemporalSharpeningStrength = postTemporalSharpeningStrength;
  }


  public NoiseReducerTemporalFilterSettings speed(Integer speed) {
    this.speed = speed;
    return this;
  }

  /**
   * Get speed
   * @return speed
   */
  @javax.annotation.Nullable
  public Integer getSpeed() {
    return speed;
  }

  public void setSpeed(Integer speed) {
    this.speed = speed;
  }


  public NoiseReducerTemporalFilterSettings strength(Integer strength) {
    this.strength = strength;
    return this;
  }

  /**
   * Get strength
   * @return strength
   */
  @javax.annotation.Nullable
  public Integer getStrength() {
    return strength;
  }

  public void setStrength(Integer strength) {
    this.strength = strength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NoiseReducerTemporalFilterSettings noiseReducerTemporalFilterSettings = (NoiseReducerTemporalFilterSettings) o;
    return Objects.equals(this.aggressiveMode, noiseReducerTemporalFilterSettings.aggressiveMode) &&
        Objects.equals(this.postTemporalSharpening, noiseReducerTemporalFilterSettings.postTemporalSharpening) &&
        Objects.equals(this.postTemporalSharpeningStrength, noiseReducerTemporalFilterSettings.postTemporalSharpeningStrength) &&
        Objects.equals(this.speed, noiseReducerTemporalFilterSettings.speed) &&
        Objects.equals(this.strength, noiseReducerTemporalFilterSettings.strength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggressiveMode, postTemporalSharpening, postTemporalSharpeningStrength, speed, strength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NoiseReducerTemporalFilterSettings {\n");
    sb.append("    aggressiveMode: ").append(toIndentedString(aggressiveMode)).append("\n");
    sb.append("    postTemporalSharpening: ").append(toIndentedString(postTemporalSharpening)).append("\n");
    sb.append("    postTemporalSharpeningStrength: ").append(toIndentedString(postTemporalSharpeningStrength)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    strength: ").append(toIndentedString(strength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggressiveMode");
    openapiFields.add("PostTemporalSharpening");
    openapiFields.add("PostTemporalSharpeningStrength");
    openapiFields.add("Speed");
    openapiFields.add("Strength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NoiseReducerTemporalFilterSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NoiseReducerTemporalFilterSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NoiseReducerTemporalFilterSettings is not found in the empty JSON string", NoiseReducerTemporalFilterSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NoiseReducerTemporalFilterSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NoiseReducerTemporalFilterSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AggressiveMode`
      if (jsonObj.get("AggressiveMode") != null && !jsonObj.get("AggressiveMode").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AggressiveMode"));
      }
      // validate the optional field `PostTemporalSharpening`
      if (jsonObj.get("PostTemporalSharpening") != null && !jsonObj.get("PostTemporalSharpening").isJsonNull()) {
        NoiseFilterPostTemporalSharpening.validateJsonElement(jsonObj.get("PostTemporalSharpening"));
      }
      // validate the optional field `PostTemporalSharpeningStrength`
      if (jsonObj.get("PostTemporalSharpeningStrength") != null && !jsonObj.get("PostTemporalSharpeningStrength").isJsonNull()) {
        NoiseFilterPostTemporalSharpeningStrength.validateJsonElement(jsonObj.get("PostTemporalSharpeningStrength"));
      }
      // validate the optional field `Speed`
      if (jsonObj.get("Speed") != null && !jsonObj.get("Speed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Speed"));
      }
      // validate the optional field `Strength`
      if (jsonObj.get("Strength") != null && !jsonObj.get("Strength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Strength"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NoiseReducerTemporalFilterSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NoiseReducerTemporalFilterSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NoiseReducerTemporalFilterSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NoiseReducerTemporalFilterSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<NoiseReducerTemporalFilterSettings>() {
           @Override
           public void write(JsonWriter out, NoiseReducerTemporalFilterSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NoiseReducerTemporalFilterSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NoiseReducerTemporalFilterSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NoiseReducerTemporalFilterSettings
   * @throws IOException if the JSON string is invalid with respect to NoiseReducerTemporalFilterSettings
   */
  public static NoiseReducerTemporalFilterSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NoiseReducerTemporalFilterSettings.class);
  }

  /**
   * Convert an instance of NoiseReducerTemporalFilterSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

