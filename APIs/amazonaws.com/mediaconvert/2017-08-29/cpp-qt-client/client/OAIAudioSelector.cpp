/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioSelector::OAIAudioSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioSelector::OAIAudioSelector() {
    this->initializeModel();
}

OAIAudioSelector::~OAIAudioSelector() {}

void OAIAudioSelector::initializeModel() {

    m_audio_duration_correction_isSet = false;
    m_audio_duration_correction_isValid = false;

    m_custom_language_code_isSet = false;
    m_custom_language_code_isValid = false;

    m_default_selection_isSet = false;
    m_default_selection_isValid = false;

    m_external_audio_file_input_isSet = false;
    m_external_audio_file_input_isValid = false;

    m_hls_rendition_group_settings_isSet = false;
    m_hls_rendition_group_settings_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_pids_isSet = false;
    m_pids_isValid = false;

    m_program_selection_isSet = false;
    m_program_selection_isValid = false;

    m_remix_settings_isSet = false;
    m_remix_settings_isValid = false;

    m_selector_type_isSet = false;
    m_selector_type_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAIAudioSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioSelector::fromJsonObject(QJsonObject json) {

    m_audio_duration_correction_isValid = ::OpenAPI::fromJsonValue(m_audio_duration_correction, json[QString("AudioDurationCorrection")]);
    m_audio_duration_correction_isSet = !json[QString("AudioDurationCorrection")].isNull() && m_audio_duration_correction_isValid;

    m_custom_language_code_isValid = ::OpenAPI::fromJsonValue(m_custom_language_code, json[QString("CustomLanguageCode")]);
    m_custom_language_code_isSet = !json[QString("CustomLanguageCode")].isNull() && m_custom_language_code_isValid;

    m_default_selection_isValid = ::OpenAPI::fromJsonValue(m_default_selection, json[QString("DefaultSelection")]);
    m_default_selection_isSet = !json[QString("DefaultSelection")].isNull() && m_default_selection_isValid;

    m_external_audio_file_input_isValid = ::OpenAPI::fromJsonValue(m_external_audio_file_input, json[QString("ExternalAudioFileInput")]);
    m_external_audio_file_input_isSet = !json[QString("ExternalAudioFileInput")].isNull() && m_external_audio_file_input_isValid;

    m_hls_rendition_group_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_rendition_group_settings, json[QString("HlsRenditionGroupSettings")]);
    m_hls_rendition_group_settings_isSet = !json[QString("HlsRenditionGroupSettings")].isNull() && m_hls_rendition_group_settings_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("Offset")]);
    m_offset_isSet = !json[QString("Offset")].isNull() && m_offset_isValid;

    m_pids_isValid = ::OpenAPI::fromJsonValue(m_pids, json[QString("Pids")]);
    m_pids_isSet = !json[QString("Pids")].isNull() && m_pids_isValid;

    m_program_selection_isValid = ::OpenAPI::fromJsonValue(m_program_selection, json[QString("ProgramSelection")]);
    m_program_selection_isSet = !json[QString("ProgramSelection")].isNull() && m_program_selection_isValid;

    m_remix_settings_isValid = ::OpenAPI::fromJsonValue(m_remix_settings, json[QString("RemixSettings")]);
    m_remix_settings_isSet = !json[QString("RemixSettings")].isNull() && m_remix_settings_isValid;

    m_selector_type_isValid = ::OpenAPI::fromJsonValue(m_selector_type, json[QString("SelectorType")]);
    m_selector_type_isSet = !json[QString("SelectorType")].isNull() && m_selector_type_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("Tracks")]);
    m_tracks_isSet = !json[QString("Tracks")].isNull() && m_tracks_isValid;
}

QString OAIAudioSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_duration_correction.isSet()) {
        obj.insert(QString("AudioDurationCorrection"), ::OpenAPI::toJsonValue(m_audio_duration_correction));
    }
    if (m_custom_language_code_isSet) {
        obj.insert(QString("CustomLanguageCode"), ::OpenAPI::toJsonValue(m_custom_language_code));
    }
    if (m_default_selection.isSet()) {
        obj.insert(QString("DefaultSelection"), ::OpenAPI::toJsonValue(m_default_selection));
    }
    if (m_external_audio_file_input_isSet) {
        obj.insert(QString("ExternalAudioFileInput"), ::OpenAPI::toJsonValue(m_external_audio_file_input));
    }
    if (m_hls_rendition_group_settings.isSet()) {
        obj.insert(QString("HlsRenditionGroupSettings"), ::OpenAPI::toJsonValue(m_hls_rendition_group_settings));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_offset_isSet) {
        obj.insert(QString("Offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_pids.isSet()) {
        obj.insert(QString("Pids"), ::OpenAPI::toJsonValue(m_pids));
    }
    if (m_program_selection_isSet) {
        obj.insert(QString("ProgramSelection"), ::OpenAPI::toJsonValue(m_program_selection));
    }
    if (m_remix_settings.isSet()) {
        obj.insert(QString("RemixSettings"), ::OpenAPI::toJsonValue(m_remix_settings));
    }
    if (m_selector_type.isSet()) {
        obj.insert(QString("SelectorType"), ::OpenAPI::toJsonValue(m_selector_type));
    }
    if (m_tracks.isSet()) {
        obj.insert(QString("Tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

OAIAudioDurationCorrection OAIAudioSelector::getAudioDurationCorrection() const {
    return m_audio_duration_correction;
}
void OAIAudioSelector::setAudioDurationCorrection(const OAIAudioDurationCorrection &audio_duration_correction) {
    m_audio_duration_correction = audio_duration_correction;
    m_audio_duration_correction_isSet = true;
}

bool OAIAudioSelector::is_audio_duration_correction_Set() const{
    return m_audio_duration_correction_isSet;
}

bool OAIAudioSelector::is_audio_duration_correction_Valid() const{
    return m_audio_duration_correction_isValid;
}

QString OAIAudioSelector::getCustomLanguageCode() const {
    return m_custom_language_code;
}
void OAIAudioSelector::setCustomLanguageCode(const QString &custom_language_code) {
    m_custom_language_code = custom_language_code;
    m_custom_language_code_isSet = true;
}

bool OAIAudioSelector::is_custom_language_code_Set() const{
    return m_custom_language_code_isSet;
}

bool OAIAudioSelector::is_custom_language_code_Valid() const{
    return m_custom_language_code_isValid;
}

OAIAudioDefaultSelection OAIAudioSelector::getDefaultSelection() const {
    return m_default_selection;
}
void OAIAudioSelector::setDefaultSelection(const OAIAudioDefaultSelection &default_selection) {
    m_default_selection = default_selection;
    m_default_selection_isSet = true;
}

bool OAIAudioSelector::is_default_selection_Set() const{
    return m_default_selection_isSet;
}

bool OAIAudioSelector::is_default_selection_Valid() const{
    return m_default_selection_isValid;
}

QString OAIAudioSelector::getExternalAudioFileInput() const {
    return m_external_audio_file_input;
}
void OAIAudioSelector::setExternalAudioFileInput(const QString &external_audio_file_input) {
    m_external_audio_file_input = external_audio_file_input;
    m_external_audio_file_input_isSet = true;
}

bool OAIAudioSelector::is_external_audio_file_input_Set() const{
    return m_external_audio_file_input_isSet;
}

bool OAIAudioSelector::is_external_audio_file_input_Valid() const{
    return m_external_audio_file_input_isValid;
}

OAIAudioSelector_HlsRenditionGroupSettings OAIAudioSelector::getHlsRenditionGroupSettings() const {
    return m_hls_rendition_group_settings;
}
void OAIAudioSelector::setHlsRenditionGroupSettings(const OAIAudioSelector_HlsRenditionGroupSettings &hls_rendition_group_settings) {
    m_hls_rendition_group_settings = hls_rendition_group_settings;
    m_hls_rendition_group_settings_isSet = true;
}

bool OAIAudioSelector::is_hls_rendition_group_settings_Set() const{
    return m_hls_rendition_group_settings_isSet;
}

bool OAIAudioSelector::is_hls_rendition_group_settings_Valid() const{
    return m_hls_rendition_group_settings_isValid;
}

OAILanguageCode OAIAudioSelector::getLanguageCode() const {
    return m_language_code;
}
void OAIAudioSelector::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIAudioSelector::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIAudioSelector::is_language_code_Valid() const{
    return m_language_code_isValid;
}

qint32 OAIAudioSelector::getOffset() const {
    return m_offset;
}
void OAIAudioSelector::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIAudioSelector::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIAudioSelector::is_offset_Valid() const{
    return m_offset_isValid;
}

QList OAIAudioSelector::getPids() const {
    return m_pids;
}
void OAIAudioSelector::setPids(const QList &pids) {
    m_pids = pids;
    m_pids_isSet = true;
}

bool OAIAudioSelector::is_pids_Set() const{
    return m_pids_isSet;
}

bool OAIAudioSelector::is_pids_Valid() const{
    return m_pids_isValid;
}

qint32 OAIAudioSelector::getProgramSelection() const {
    return m_program_selection;
}
void OAIAudioSelector::setProgramSelection(const qint32 &program_selection) {
    m_program_selection = program_selection;
    m_program_selection_isSet = true;
}

bool OAIAudioSelector::is_program_selection_Set() const{
    return m_program_selection_isSet;
}

bool OAIAudioSelector::is_program_selection_Valid() const{
    return m_program_selection_isValid;
}

OAIAudioSelector_RemixSettings OAIAudioSelector::getRemixSettings() const {
    return m_remix_settings;
}
void OAIAudioSelector::setRemixSettings(const OAIAudioSelector_RemixSettings &remix_settings) {
    m_remix_settings = remix_settings;
    m_remix_settings_isSet = true;
}

bool OAIAudioSelector::is_remix_settings_Set() const{
    return m_remix_settings_isSet;
}

bool OAIAudioSelector::is_remix_settings_Valid() const{
    return m_remix_settings_isValid;
}

OAIAudioSelectorType OAIAudioSelector::getSelectorType() const {
    return m_selector_type;
}
void OAIAudioSelector::setSelectorType(const OAIAudioSelectorType &selector_type) {
    m_selector_type = selector_type;
    m_selector_type_isSet = true;
}

bool OAIAudioSelector::is_selector_type_Set() const{
    return m_selector_type_isSet;
}

bool OAIAudioSelector::is_selector_type_Valid() const{
    return m_selector_type_isValid;
}

QList OAIAudioSelector::getTracks() const {
    return m_tracks;
}
void OAIAudioSelector::setTracks(const QList &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIAudioSelector::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIAudioSelector::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAIAudioSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_duration_correction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_audio_file_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_rendition_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remix_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
