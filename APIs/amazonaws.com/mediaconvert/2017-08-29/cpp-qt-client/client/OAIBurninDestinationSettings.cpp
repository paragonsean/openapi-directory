/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBurninDestinationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBurninDestinationSettings::OAIBurninDestinationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBurninDestinationSettings::OAIBurninDestinationSettings() {
    this->initializeModel();
}

OAIBurninDestinationSettings::~OAIBurninDestinationSettings() {}

void OAIBurninDestinationSettings::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_apply_font_color_isSet = false;
    m_apply_font_color_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_background_opacity_isSet = false;
    m_background_opacity_isValid = false;

    m_fallback_font_isSet = false;
    m_fallback_font_isValid = false;

    m_font_color_isSet = false;
    m_font_color_isValid = false;

    m_font_opacity_isSet = false;
    m_font_opacity_isValid = false;

    m_font_resolution_isSet = false;
    m_font_resolution_isValid = false;

    m_font_script_isSet = false;
    m_font_script_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_hex_font_color_isSet = false;
    m_hex_font_color_isValid = false;

    m_outline_color_isSet = false;
    m_outline_color_isValid = false;

    m_outline_size_isSet = false;
    m_outline_size_isValid = false;

    m_shadow_color_isSet = false;
    m_shadow_color_isValid = false;

    m_shadow_opacity_isSet = false;
    m_shadow_opacity_isValid = false;

    m_shadow_x_offset_isSet = false;
    m_shadow_x_offset_isValid = false;

    m_shadow_y_offset_isSet = false;
    m_shadow_y_offset_isValid = false;

    m_style_passthrough_isSet = false;
    m_style_passthrough_isValid = false;

    m_teletext_spacing_isSet = false;
    m_teletext_spacing_isValid = false;

    m_x_position_isSet = false;
    m_x_position_isValid = false;

    m_y_position_isSet = false;
    m_y_position_isValid = false;
}

void OAIBurninDestinationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBurninDestinationSettings::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("Alignment")]);
    m_alignment_isSet = !json[QString("Alignment")].isNull() && m_alignment_isValid;

    m_apply_font_color_isValid = ::OpenAPI::fromJsonValue(m_apply_font_color, json[QString("ApplyFontColor")]);
    m_apply_font_color_isSet = !json[QString("ApplyFontColor")].isNull() && m_apply_font_color_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;

    m_background_opacity_isValid = ::OpenAPI::fromJsonValue(m_background_opacity, json[QString("BackgroundOpacity")]);
    m_background_opacity_isSet = !json[QString("BackgroundOpacity")].isNull() && m_background_opacity_isValid;

    m_fallback_font_isValid = ::OpenAPI::fromJsonValue(m_fallback_font, json[QString("FallbackFont")]);
    m_fallback_font_isSet = !json[QString("FallbackFont")].isNull() && m_fallback_font_isValid;

    m_font_color_isValid = ::OpenAPI::fromJsonValue(m_font_color, json[QString("FontColor")]);
    m_font_color_isSet = !json[QString("FontColor")].isNull() && m_font_color_isValid;

    m_font_opacity_isValid = ::OpenAPI::fromJsonValue(m_font_opacity, json[QString("FontOpacity")]);
    m_font_opacity_isSet = !json[QString("FontOpacity")].isNull() && m_font_opacity_isValid;

    m_font_resolution_isValid = ::OpenAPI::fromJsonValue(m_font_resolution, json[QString("FontResolution")]);
    m_font_resolution_isSet = !json[QString("FontResolution")].isNull() && m_font_resolution_isValid;

    m_font_script_isValid = ::OpenAPI::fromJsonValue(m_font_script, json[QString("FontScript")]);
    m_font_script_isSet = !json[QString("FontScript")].isNull() && m_font_script_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("FontSize")]);
    m_font_size_isSet = !json[QString("FontSize")].isNull() && m_font_size_isValid;

    m_hex_font_color_isValid = ::OpenAPI::fromJsonValue(m_hex_font_color, json[QString("HexFontColor")]);
    m_hex_font_color_isSet = !json[QString("HexFontColor")].isNull() && m_hex_font_color_isValid;

    m_outline_color_isValid = ::OpenAPI::fromJsonValue(m_outline_color, json[QString("OutlineColor")]);
    m_outline_color_isSet = !json[QString("OutlineColor")].isNull() && m_outline_color_isValid;

    m_outline_size_isValid = ::OpenAPI::fromJsonValue(m_outline_size, json[QString("OutlineSize")]);
    m_outline_size_isSet = !json[QString("OutlineSize")].isNull() && m_outline_size_isValid;

    m_shadow_color_isValid = ::OpenAPI::fromJsonValue(m_shadow_color, json[QString("ShadowColor")]);
    m_shadow_color_isSet = !json[QString("ShadowColor")].isNull() && m_shadow_color_isValid;

    m_shadow_opacity_isValid = ::OpenAPI::fromJsonValue(m_shadow_opacity, json[QString("ShadowOpacity")]);
    m_shadow_opacity_isSet = !json[QString("ShadowOpacity")].isNull() && m_shadow_opacity_isValid;

    m_shadow_x_offset_isValid = ::OpenAPI::fromJsonValue(m_shadow_x_offset, json[QString("ShadowXOffset")]);
    m_shadow_x_offset_isSet = !json[QString("ShadowXOffset")].isNull() && m_shadow_x_offset_isValid;

    m_shadow_y_offset_isValid = ::OpenAPI::fromJsonValue(m_shadow_y_offset, json[QString("ShadowYOffset")]);
    m_shadow_y_offset_isSet = !json[QString("ShadowYOffset")].isNull() && m_shadow_y_offset_isValid;

    m_style_passthrough_isValid = ::OpenAPI::fromJsonValue(m_style_passthrough, json[QString("StylePassthrough")]);
    m_style_passthrough_isSet = !json[QString("StylePassthrough")].isNull() && m_style_passthrough_isValid;

    m_teletext_spacing_isValid = ::OpenAPI::fromJsonValue(m_teletext_spacing, json[QString("TeletextSpacing")]);
    m_teletext_spacing_isSet = !json[QString("TeletextSpacing")].isNull() && m_teletext_spacing_isValid;

    m_x_position_isValid = ::OpenAPI::fromJsonValue(m_x_position, json[QString("XPosition")]);
    m_x_position_isSet = !json[QString("XPosition")].isNull() && m_x_position_isValid;

    m_y_position_isValid = ::OpenAPI::fromJsonValue(m_y_position, json[QString("YPosition")]);
    m_y_position_isSet = !json[QString("YPosition")].isNull() && m_y_position_isValid;
}

QString OAIBurninDestinationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBurninDestinationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment.isSet()) {
        obj.insert(QString("Alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_apply_font_color.isSet()) {
        obj.insert(QString("ApplyFontColor"), ::OpenAPI::toJsonValue(m_apply_font_color));
    }
    if (m_background_color.isSet()) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_background_opacity_isSet) {
        obj.insert(QString("BackgroundOpacity"), ::OpenAPI::toJsonValue(m_background_opacity));
    }
    if (m_fallback_font.isSet()) {
        obj.insert(QString("FallbackFont"), ::OpenAPI::toJsonValue(m_fallback_font));
    }
    if (m_font_color.isSet()) {
        obj.insert(QString("FontColor"), ::OpenAPI::toJsonValue(m_font_color));
    }
    if (m_font_opacity_isSet) {
        obj.insert(QString("FontOpacity"), ::OpenAPI::toJsonValue(m_font_opacity));
    }
    if (m_font_resolution_isSet) {
        obj.insert(QString("FontResolution"), ::OpenAPI::toJsonValue(m_font_resolution));
    }
    if (m_font_script.isSet()) {
        obj.insert(QString("FontScript"), ::OpenAPI::toJsonValue(m_font_script));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("FontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_hex_font_color_isSet) {
        obj.insert(QString("HexFontColor"), ::OpenAPI::toJsonValue(m_hex_font_color));
    }
    if (m_outline_color.isSet()) {
        obj.insert(QString("OutlineColor"), ::OpenAPI::toJsonValue(m_outline_color));
    }
    if (m_outline_size_isSet) {
        obj.insert(QString("OutlineSize"), ::OpenAPI::toJsonValue(m_outline_size));
    }
    if (m_shadow_color.isSet()) {
        obj.insert(QString("ShadowColor"), ::OpenAPI::toJsonValue(m_shadow_color));
    }
    if (m_shadow_opacity_isSet) {
        obj.insert(QString("ShadowOpacity"), ::OpenAPI::toJsonValue(m_shadow_opacity));
    }
    if (m_shadow_x_offset_isSet) {
        obj.insert(QString("ShadowXOffset"), ::OpenAPI::toJsonValue(m_shadow_x_offset));
    }
    if (m_shadow_y_offset_isSet) {
        obj.insert(QString("ShadowYOffset"), ::OpenAPI::toJsonValue(m_shadow_y_offset));
    }
    if (m_style_passthrough.isSet()) {
        obj.insert(QString("StylePassthrough"), ::OpenAPI::toJsonValue(m_style_passthrough));
    }
    if (m_teletext_spacing.isSet()) {
        obj.insert(QString("TeletextSpacing"), ::OpenAPI::toJsonValue(m_teletext_spacing));
    }
    if (m_x_position_isSet) {
        obj.insert(QString("XPosition"), ::OpenAPI::toJsonValue(m_x_position));
    }
    if (m_y_position_isSet) {
        obj.insert(QString("YPosition"), ::OpenAPI::toJsonValue(m_y_position));
    }
    return obj;
}

OAIBurninSubtitleAlignment OAIBurninDestinationSettings::getAlignment() const {
    return m_alignment;
}
void OAIBurninDestinationSettings::setAlignment(const OAIBurninSubtitleAlignment &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIBurninDestinationSettings::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIBurninDestinationSettings::is_alignment_Valid() const{
    return m_alignment_isValid;
}

OAIBurninSubtitleApplyFontColor OAIBurninDestinationSettings::getApplyFontColor() const {
    return m_apply_font_color;
}
void OAIBurninDestinationSettings::setApplyFontColor(const OAIBurninSubtitleApplyFontColor &apply_font_color) {
    m_apply_font_color = apply_font_color;
    m_apply_font_color_isSet = true;
}

bool OAIBurninDestinationSettings::is_apply_font_color_Set() const{
    return m_apply_font_color_isSet;
}

bool OAIBurninDestinationSettings::is_apply_font_color_Valid() const{
    return m_apply_font_color_isValid;
}

OAIBurninSubtitleBackgroundColor OAIBurninDestinationSettings::getBackgroundColor() const {
    return m_background_color;
}
void OAIBurninDestinationSettings::setBackgroundColor(const OAIBurninSubtitleBackgroundColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIBurninDestinationSettings::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIBurninDestinationSettings::is_background_color_Valid() const{
    return m_background_color_isValid;
}

qint32 OAIBurninDestinationSettings::getBackgroundOpacity() const {
    return m_background_opacity;
}
void OAIBurninDestinationSettings::setBackgroundOpacity(const qint32 &background_opacity) {
    m_background_opacity = background_opacity;
    m_background_opacity_isSet = true;
}

bool OAIBurninDestinationSettings::is_background_opacity_Set() const{
    return m_background_opacity_isSet;
}

bool OAIBurninDestinationSettings::is_background_opacity_Valid() const{
    return m_background_opacity_isValid;
}

OAIBurninSubtitleFallbackFont OAIBurninDestinationSettings::getFallbackFont() const {
    return m_fallback_font;
}
void OAIBurninDestinationSettings::setFallbackFont(const OAIBurninSubtitleFallbackFont &fallback_font) {
    m_fallback_font = fallback_font;
    m_fallback_font_isSet = true;
}

bool OAIBurninDestinationSettings::is_fallback_font_Set() const{
    return m_fallback_font_isSet;
}

bool OAIBurninDestinationSettings::is_fallback_font_Valid() const{
    return m_fallback_font_isValid;
}

OAIBurninSubtitleFontColor OAIBurninDestinationSettings::getFontColor() const {
    return m_font_color;
}
void OAIBurninDestinationSettings::setFontColor(const OAIBurninSubtitleFontColor &font_color) {
    m_font_color = font_color;
    m_font_color_isSet = true;
}

bool OAIBurninDestinationSettings::is_font_color_Set() const{
    return m_font_color_isSet;
}

bool OAIBurninDestinationSettings::is_font_color_Valid() const{
    return m_font_color_isValid;
}

qint32 OAIBurninDestinationSettings::getFontOpacity() const {
    return m_font_opacity;
}
void OAIBurninDestinationSettings::setFontOpacity(const qint32 &font_opacity) {
    m_font_opacity = font_opacity;
    m_font_opacity_isSet = true;
}

bool OAIBurninDestinationSettings::is_font_opacity_Set() const{
    return m_font_opacity_isSet;
}

bool OAIBurninDestinationSettings::is_font_opacity_Valid() const{
    return m_font_opacity_isValid;
}

qint32 OAIBurninDestinationSettings::getFontResolution() const {
    return m_font_resolution;
}
void OAIBurninDestinationSettings::setFontResolution(const qint32 &font_resolution) {
    m_font_resolution = font_resolution;
    m_font_resolution_isSet = true;
}

bool OAIBurninDestinationSettings::is_font_resolution_Set() const{
    return m_font_resolution_isSet;
}

bool OAIBurninDestinationSettings::is_font_resolution_Valid() const{
    return m_font_resolution_isValid;
}

OAIFontScript OAIBurninDestinationSettings::getFontScript() const {
    return m_font_script;
}
void OAIBurninDestinationSettings::setFontScript(const OAIFontScript &font_script) {
    m_font_script = font_script;
    m_font_script_isSet = true;
}

bool OAIBurninDestinationSettings::is_font_script_Set() const{
    return m_font_script_isSet;
}

bool OAIBurninDestinationSettings::is_font_script_Valid() const{
    return m_font_script_isValid;
}

qint32 OAIBurninDestinationSettings::getFontSize() const {
    return m_font_size;
}
void OAIBurninDestinationSettings::setFontSize(const qint32 &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIBurninDestinationSettings::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIBurninDestinationSettings::is_font_size_Valid() const{
    return m_font_size_isValid;
}

QString OAIBurninDestinationSettings::getHexFontColor() const {
    return m_hex_font_color;
}
void OAIBurninDestinationSettings::setHexFontColor(const QString &hex_font_color) {
    m_hex_font_color = hex_font_color;
    m_hex_font_color_isSet = true;
}

bool OAIBurninDestinationSettings::is_hex_font_color_Set() const{
    return m_hex_font_color_isSet;
}

bool OAIBurninDestinationSettings::is_hex_font_color_Valid() const{
    return m_hex_font_color_isValid;
}

OAIBurninSubtitleOutlineColor OAIBurninDestinationSettings::getOutlineColor() const {
    return m_outline_color;
}
void OAIBurninDestinationSettings::setOutlineColor(const OAIBurninSubtitleOutlineColor &outline_color) {
    m_outline_color = outline_color;
    m_outline_color_isSet = true;
}

bool OAIBurninDestinationSettings::is_outline_color_Set() const{
    return m_outline_color_isSet;
}

bool OAIBurninDestinationSettings::is_outline_color_Valid() const{
    return m_outline_color_isValid;
}

qint32 OAIBurninDestinationSettings::getOutlineSize() const {
    return m_outline_size;
}
void OAIBurninDestinationSettings::setOutlineSize(const qint32 &outline_size) {
    m_outline_size = outline_size;
    m_outline_size_isSet = true;
}

bool OAIBurninDestinationSettings::is_outline_size_Set() const{
    return m_outline_size_isSet;
}

bool OAIBurninDestinationSettings::is_outline_size_Valid() const{
    return m_outline_size_isValid;
}

OAIBurninSubtitleShadowColor OAIBurninDestinationSettings::getShadowColor() const {
    return m_shadow_color;
}
void OAIBurninDestinationSettings::setShadowColor(const OAIBurninSubtitleShadowColor &shadow_color) {
    m_shadow_color = shadow_color;
    m_shadow_color_isSet = true;
}

bool OAIBurninDestinationSettings::is_shadow_color_Set() const{
    return m_shadow_color_isSet;
}

bool OAIBurninDestinationSettings::is_shadow_color_Valid() const{
    return m_shadow_color_isValid;
}

qint32 OAIBurninDestinationSettings::getShadowOpacity() const {
    return m_shadow_opacity;
}
void OAIBurninDestinationSettings::setShadowOpacity(const qint32 &shadow_opacity) {
    m_shadow_opacity = shadow_opacity;
    m_shadow_opacity_isSet = true;
}

bool OAIBurninDestinationSettings::is_shadow_opacity_Set() const{
    return m_shadow_opacity_isSet;
}

bool OAIBurninDestinationSettings::is_shadow_opacity_Valid() const{
    return m_shadow_opacity_isValid;
}

qint32 OAIBurninDestinationSettings::getShadowXOffset() const {
    return m_shadow_x_offset;
}
void OAIBurninDestinationSettings::setShadowXOffset(const qint32 &shadow_x_offset) {
    m_shadow_x_offset = shadow_x_offset;
    m_shadow_x_offset_isSet = true;
}

bool OAIBurninDestinationSettings::is_shadow_x_offset_Set() const{
    return m_shadow_x_offset_isSet;
}

bool OAIBurninDestinationSettings::is_shadow_x_offset_Valid() const{
    return m_shadow_x_offset_isValid;
}

qint32 OAIBurninDestinationSettings::getShadowYOffset() const {
    return m_shadow_y_offset;
}
void OAIBurninDestinationSettings::setShadowYOffset(const qint32 &shadow_y_offset) {
    m_shadow_y_offset = shadow_y_offset;
    m_shadow_y_offset_isSet = true;
}

bool OAIBurninDestinationSettings::is_shadow_y_offset_Set() const{
    return m_shadow_y_offset_isSet;
}

bool OAIBurninDestinationSettings::is_shadow_y_offset_Valid() const{
    return m_shadow_y_offset_isValid;
}

OAIBurnInSubtitleStylePassthrough OAIBurninDestinationSettings::getStylePassthrough() const {
    return m_style_passthrough;
}
void OAIBurninDestinationSettings::setStylePassthrough(const OAIBurnInSubtitleStylePassthrough &style_passthrough) {
    m_style_passthrough = style_passthrough;
    m_style_passthrough_isSet = true;
}

bool OAIBurninDestinationSettings::is_style_passthrough_Set() const{
    return m_style_passthrough_isSet;
}

bool OAIBurninDestinationSettings::is_style_passthrough_Valid() const{
    return m_style_passthrough_isValid;
}

OAIBurninSubtitleTeletextSpacing OAIBurninDestinationSettings::getTeletextSpacing() const {
    return m_teletext_spacing;
}
void OAIBurninDestinationSettings::setTeletextSpacing(const OAIBurninSubtitleTeletextSpacing &teletext_spacing) {
    m_teletext_spacing = teletext_spacing;
    m_teletext_spacing_isSet = true;
}

bool OAIBurninDestinationSettings::is_teletext_spacing_Set() const{
    return m_teletext_spacing_isSet;
}

bool OAIBurninDestinationSettings::is_teletext_spacing_Valid() const{
    return m_teletext_spacing_isValid;
}

qint32 OAIBurninDestinationSettings::getXPosition() const {
    return m_x_position;
}
void OAIBurninDestinationSettings::setXPosition(const qint32 &x_position) {
    m_x_position = x_position;
    m_x_position_isSet = true;
}

bool OAIBurninDestinationSettings::is_x_position_Set() const{
    return m_x_position_isSet;
}

bool OAIBurninDestinationSettings::is_x_position_Valid() const{
    return m_x_position_isValid;
}

qint32 OAIBurninDestinationSettings::getYPosition() const {
    return m_y_position;
}
void OAIBurninDestinationSettings::setYPosition(const qint32 &y_position) {
    m_y_position = y_position;
    m_y_position_isSet = true;
}

bool OAIBurninDestinationSettings::is_y_position_Set() const{
    return m_y_position_isSet;
}

bool OAIBurninDestinationSettings::is_y_position_Valid() const{
    return m_y_position_isValid;
}

bool OAIBurninDestinationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_font_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_font.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_script.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_font_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_x_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_y_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_passthrough.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teletext_spacing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBurninDestinationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
