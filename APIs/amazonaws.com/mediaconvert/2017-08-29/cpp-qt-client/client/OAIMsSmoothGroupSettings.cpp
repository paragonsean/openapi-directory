/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMsSmoothGroupSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMsSmoothGroupSettings::OAIMsSmoothGroupSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMsSmoothGroupSettings::OAIMsSmoothGroupSettings() {
    this->initializeModel();
}

OAIMsSmoothGroupSettings::~OAIMsSmoothGroupSettings() {}

void OAIMsSmoothGroupSettings::initializeModel() {

    m_additional_manifests_isSet = false;
    m_additional_manifests_isValid = false;

    m_audio_deduplication_isSet = false;
    m_audio_deduplication_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_settings_isSet = false;
    m_destination_settings_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_fragment_length_isSet = false;
    m_fragment_length_isValid = false;

    m_fragment_length_control_isSet = false;
    m_fragment_length_control_isValid = false;

    m_manifest_encoding_isSet = false;
    m_manifest_encoding_isValid = false;
}

void OAIMsSmoothGroupSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMsSmoothGroupSettings::fromJsonObject(QJsonObject json) {

    m_additional_manifests_isValid = ::OpenAPI::fromJsonValue(m_additional_manifests, json[QString("AdditionalManifests")]);
    m_additional_manifests_isSet = !json[QString("AdditionalManifests")].isNull() && m_additional_manifests_isValid;

    m_audio_deduplication_isValid = ::OpenAPI::fromJsonValue(m_audio_deduplication, json[QString("AudioDeduplication")]);
    m_audio_deduplication_isSet = !json[QString("AudioDeduplication")].isNull() && m_audio_deduplication_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_destination_settings_isValid = ::OpenAPI::fromJsonValue(m_destination_settings, json[QString("DestinationSettings")]);
    m_destination_settings_isSet = !json[QString("DestinationSettings")].isNull() && m_destination_settings_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_fragment_length_isValid = ::OpenAPI::fromJsonValue(m_fragment_length, json[QString("FragmentLength")]);
    m_fragment_length_isSet = !json[QString("FragmentLength")].isNull() && m_fragment_length_isValid;

    m_fragment_length_control_isValid = ::OpenAPI::fromJsonValue(m_fragment_length_control, json[QString("FragmentLengthControl")]);
    m_fragment_length_control_isSet = !json[QString("FragmentLengthControl")].isNull() && m_fragment_length_control_isValid;

    m_manifest_encoding_isValid = ::OpenAPI::fromJsonValue(m_manifest_encoding, json[QString("ManifestEncoding")]);
    m_manifest_encoding_isSet = !json[QString("ManifestEncoding")].isNull() && m_manifest_encoding_isValid;
}

QString OAIMsSmoothGroupSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMsSmoothGroupSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_manifests.isSet()) {
        obj.insert(QString("AdditionalManifests"), ::OpenAPI::toJsonValue(m_additional_manifests));
    }
    if (m_audio_deduplication.isSet()) {
        obj.insert(QString("AudioDeduplication"), ::OpenAPI::toJsonValue(m_audio_deduplication));
    }
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_settings.isSet()) {
        obj.insert(QString("DestinationSettings"), ::OpenAPI::toJsonValue(m_destination_settings));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_fragment_length_isSet) {
        obj.insert(QString("FragmentLength"), ::OpenAPI::toJsonValue(m_fragment_length));
    }
    if (m_fragment_length_control.isSet()) {
        obj.insert(QString("FragmentLengthControl"), ::OpenAPI::toJsonValue(m_fragment_length_control));
    }
    if (m_manifest_encoding.isSet()) {
        obj.insert(QString("ManifestEncoding"), ::OpenAPI::toJsonValue(m_manifest_encoding));
    }
    return obj;
}

QList OAIMsSmoothGroupSettings::getAdditionalManifests() const {
    return m_additional_manifests;
}
void OAIMsSmoothGroupSettings::setAdditionalManifests(const QList &additional_manifests) {
    m_additional_manifests = additional_manifests;
    m_additional_manifests_isSet = true;
}

bool OAIMsSmoothGroupSettings::is_additional_manifests_Set() const{
    return m_additional_manifests_isSet;
}

bool OAIMsSmoothGroupSettings::is_additional_manifests_Valid() const{
    return m_additional_manifests_isValid;
}

OAIMsSmoothAudioDeduplication OAIMsSmoothGroupSettings::getAudioDeduplication() const {
    return m_audio_deduplication;
}
void OAIMsSmoothGroupSettings::setAudioDeduplication(const OAIMsSmoothAudioDeduplication &audio_deduplication) {
    m_audio_deduplication = audio_deduplication;
    m_audio_deduplication_isSet = true;
}

bool OAIMsSmoothGroupSettings::is_audio_deduplication_Set() const{
    return m_audio_deduplication_isSet;
}

bool OAIMsSmoothGroupSettings::is_audio_deduplication_Valid() const{
    return m_audio_deduplication_isValid;
}

QString OAIMsSmoothGroupSettings::getDestination() const {
    return m_destination;
}
void OAIMsSmoothGroupSettings::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIMsSmoothGroupSettings::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIMsSmoothGroupSettings::is_destination_Valid() const{
    return m_destination_isValid;
}

OAICmafGroupSettings_DestinationSettings OAIMsSmoothGroupSettings::getDestinationSettings() const {
    return m_destination_settings;
}
void OAIMsSmoothGroupSettings::setDestinationSettings(const OAICmafGroupSettings_DestinationSettings &destination_settings) {
    m_destination_settings = destination_settings;
    m_destination_settings_isSet = true;
}

bool OAIMsSmoothGroupSettings::is_destination_settings_Set() const{
    return m_destination_settings_isSet;
}

bool OAIMsSmoothGroupSettings::is_destination_settings_Valid() const{
    return m_destination_settings_isValid;
}

OAIMsSmoothGroupSettings_Encryption OAIMsSmoothGroupSettings::getEncryption() const {
    return m_encryption;
}
void OAIMsSmoothGroupSettings::setEncryption(const OAIMsSmoothGroupSettings_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIMsSmoothGroupSettings::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIMsSmoothGroupSettings::is_encryption_Valid() const{
    return m_encryption_isValid;
}

qint32 OAIMsSmoothGroupSettings::getFragmentLength() const {
    return m_fragment_length;
}
void OAIMsSmoothGroupSettings::setFragmentLength(const qint32 &fragment_length) {
    m_fragment_length = fragment_length;
    m_fragment_length_isSet = true;
}

bool OAIMsSmoothGroupSettings::is_fragment_length_Set() const{
    return m_fragment_length_isSet;
}

bool OAIMsSmoothGroupSettings::is_fragment_length_Valid() const{
    return m_fragment_length_isValid;
}

OAIMsSmoothFragmentLengthControl OAIMsSmoothGroupSettings::getFragmentLengthControl() const {
    return m_fragment_length_control;
}
void OAIMsSmoothGroupSettings::setFragmentLengthControl(const OAIMsSmoothFragmentLengthControl &fragment_length_control) {
    m_fragment_length_control = fragment_length_control;
    m_fragment_length_control_isSet = true;
}

bool OAIMsSmoothGroupSettings::is_fragment_length_control_Set() const{
    return m_fragment_length_control_isSet;
}

bool OAIMsSmoothGroupSettings::is_fragment_length_control_Valid() const{
    return m_fragment_length_control_isValid;
}

OAIMsSmoothManifestEncoding OAIMsSmoothGroupSettings::getManifestEncoding() const {
    return m_manifest_encoding;
}
void OAIMsSmoothGroupSettings::setManifestEncoding(const OAIMsSmoothManifestEncoding &manifest_encoding) {
    m_manifest_encoding = manifest_encoding;
    m_manifest_encoding_isSet = true;
}

bool OAIMsSmoothGroupSettings::is_manifest_encoding_Set() const{
    return m_manifest_encoding_isSet;
}

bool OAIMsSmoothGroupSettings::is_manifest_encoding_Valid() const{
    return m_manifest_encoding_isValid;
}

bool OAIMsSmoothGroupSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_manifests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_deduplication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_length_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_encoding.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMsSmoothGroupSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
