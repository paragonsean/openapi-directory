/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoDescription::OAIVideoDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoDescription::OAIVideoDescription() {
    this->initializeModel();
}

OAIVideoDescription::~OAIVideoDescription() {}

void OAIVideoDescription::initializeModel() {

    m_afd_signaling_isSet = false;
    m_afd_signaling_isValid = false;

    m_anti_alias_isSet = false;
    m_anti_alias_isValid = false;

    m_codec_settings_isSet = false;
    m_codec_settings_isValid = false;

    m_color_metadata_isSet = false;
    m_color_metadata_isValid = false;

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_drop_frame_timecode_isSet = false;
    m_drop_frame_timecode_isValid = false;

    m_fixed_afd_isSet = false;
    m_fixed_afd_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_respond_to_afd_isSet = false;
    m_respond_to_afd_isValid = false;

    m_scaling_behavior_isSet = false;
    m_scaling_behavior_isValid = false;

    m_sharpness_isSet = false;
    m_sharpness_isValid = false;

    m_timecode_insertion_isSet = false;
    m_timecode_insertion_isValid = false;

    m_video_preprocessors_isSet = false;
    m_video_preprocessors_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIVideoDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoDescription::fromJsonObject(QJsonObject json) {

    m_afd_signaling_isValid = ::OpenAPI::fromJsonValue(m_afd_signaling, json[QString("AfdSignaling")]);
    m_afd_signaling_isSet = !json[QString("AfdSignaling")].isNull() && m_afd_signaling_isValid;

    m_anti_alias_isValid = ::OpenAPI::fromJsonValue(m_anti_alias, json[QString("AntiAlias")]);
    m_anti_alias_isSet = !json[QString("AntiAlias")].isNull() && m_anti_alias_isValid;

    m_codec_settings_isValid = ::OpenAPI::fromJsonValue(m_codec_settings, json[QString("CodecSettings")]);
    m_codec_settings_isSet = !json[QString("CodecSettings")].isNull() && m_codec_settings_isValid;

    m_color_metadata_isValid = ::OpenAPI::fromJsonValue(m_color_metadata, json[QString("ColorMetadata")]);
    m_color_metadata_isSet = !json[QString("ColorMetadata")].isNull() && m_color_metadata_isValid;

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("Crop")]);
    m_crop_isSet = !json[QString("Crop")].isNull() && m_crop_isValid;

    m_drop_frame_timecode_isValid = ::OpenAPI::fromJsonValue(m_drop_frame_timecode, json[QString("DropFrameTimecode")]);
    m_drop_frame_timecode_isSet = !json[QString("DropFrameTimecode")].isNull() && m_drop_frame_timecode_isValid;

    m_fixed_afd_isValid = ::OpenAPI::fromJsonValue(m_fixed_afd, json[QString("FixedAfd")]);
    m_fixed_afd_isSet = !json[QString("FixedAfd")].isNull() && m_fixed_afd_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_respond_to_afd_isValid = ::OpenAPI::fromJsonValue(m_respond_to_afd, json[QString("RespondToAfd")]);
    m_respond_to_afd_isSet = !json[QString("RespondToAfd")].isNull() && m_respond_to_afd_isValid;

    m_scaling_behavior_isValid = ::OpenAPI::fromJsonValue(m_scaling_behavior, json[QString("ScalingBehavior")]);
    m_scaling_behavior_isSet = !json[QString("ScalingBehavior")].isNull() && m_scaling_behavior_isValid;

    m_sharpness_isValid = ::OpenAPI::fromJsonValue(m_sharpness, json[QString("Sharpness")]);
    m_sharpness_isSet = !json[QString("Sharpness")].isNull() && m_sharpness_isValid;

    m_timecode_insertion_isValid = ::OpenAPI::fromJsonValue(m_timecode_insertion, json[QString("TimecodeInsertion")]);
    m_timecode_insertion_isSet = !json[QString("TimecodeInsertion")].isNull() && m_timecode_insertion_isValid;

    m_video_preprocessors_isValid = ::OpenAPI::fromJsonValue(m_video_preprocessors, json[QString("VideoPreprocessors")]);
    m_video_preprocessors_isSet = !json[QString("VideoPreprocessors")].isNull() && m_video_preprocessors_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAIVideoDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_afd_signaling.isSet()) {
        obj.insert(QString("AfdSignaling"), ::OpenAPI::toJsonValue(m_afd_signaling));
    }
    if (m_anti_alias.isSet()) {
        obj.insert(QString("AntiAlias"), ::OpenAPI::toJsonValue(m_anti_alias));
    }
    if (m_codec_settings.isSet()) {
        obj.insert(QString("CodecSettings"), ::OpenAPI::toJsonValue(m_codec_settings));
    }
    if (m_color_metadata.isSet()) {
        obj.insert(QString("ColorMetadata"), ::OpenAPI::toJsonValue(m_color_metadata));
    }
    if (m_crop.isSet()) {
        obj.insert(QString("Crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_drop_frame_timecode.isSet()) {
        obj.insert(QString("DropFrameTimecode"), ::OpenAPI::toJsonValue(m_drop_frame_timecode));
    }
    if (m_fixed_afd_isSet) {
        obj.insert(QString("FixedAfd"), ::OpenAPI::toJsonValue(m_fixed_afd));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_respond_to_afd.isSet()) {
        obj.insert(QString("RespondToAfd"), ::OpenAPI::toJsonValue(m_respond_to_afd));
    }
    if (m_scaling_behavior.isSet()) {
        obj.insert(QString("ScalingBehavior"), ::OpenAPI::toJsonValue(m_scaling_behavior));
    }
    if (m_sharpness_isSet) {
        obj.insert(QString("Sharpness"), ::OpenAPI::toJsonValue(m_sharpness));
    }
    if (m_timecode_insertion.isSet()) {
        obj.insert(QString("TimecodeInsertion"), ::OpenAPI::toJsonValue(m_timecode_insertion));
    }
    if (m_video_preprocessors.isSet()) {
        obj.insert(QString("VideoPreprocessors"), ::OpenAPI::toJsonValue(m_video_preprocessors));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

OAIAfdSignaling OAIVideoDescription::getAfdSignaling() const {
    return m_afd_signaling;
}
void OAIVideoDescription::setAfdSignaling(const OAIAfdSignaling &afd_signaling) {
    m_afd_signaling = afd_signaling;
    m_afd_signaling_isSet = true;
}

bool OAIVideoDescription::is_afd_signaling_Set() const{
    return m_afd_signaling_isSet;
}

bool OAIVideoDescription::is_afd_signaling_Valid() const{
    return m_afd_signaling_isValid;
}

OAIAntiAlias OAIVideoDescription::getAntiAlias() const {
    return m_anti_alias;
}
void OAIVideoDescription::setAntiAlias(const OAIAntiAlias &anti_alias) {
    m_anti_alias = anti_alias;
    m_anti_alias_isSet = true;
}

bool OAIVideoDescription::is_anti_alias_Set() const{
    return m_anti_alias_isSet;
}

bool OAIVideoDescription::is_anti_alias_Valid() const{
    return m_anti_alias_isValid;
}

OAIVideoDescription_CodecSettings OAIVideoDescription::getCodecSettings() const {
    return m_codec_settings;
}
void OAIVideoDescription::setCodecSettings(const OAIVideoDescription_CodecSettings &codec_settings) {
    m_codec_settings = codec_settings;
    m_codec_settings_isSet = true;
}

bool OAIVideoDescription::is_codec_settings_Set() const{
    return m_codec_settings_isSet;
}

bool OAIVideoDescription::is_codec_settings_Valid() const{
    return m_codec_settings_isValid;
}

OAIColorMetadata OAIVideoDescription::getColorMetadata() const {
    return m_color_metadata;
}
void OAIVideoDescription::setColorMetadata(const OAIColorMetadata &color_metadata) {
    m_color_metadata = color_metadata;
    m_color_metadata_isSet = true;
}

bool OAIVideoDescription::is_color_metadata_Set() const{
    return m_color_metadata_isSet;
}

bool OAIVideoDescription::is_color_metadata_Valid() const{
    return m_color_metadata_isValid;
}

OAIVideoDescription_Crop OAIVideoDescription::getCrop() const {
    return m_crop;
}
void OAIVideoDescription::setCrop(const OAIVideoDescription_Crop &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIVideoDescription::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIVideoDescription::is_crop_Valid() const{
    return m_crop_isValid;
}

OAIDropFrameTimecode OAIVideoDescription::getDropFrameTimecode() const {
    return m_drop_frame_timecode;
}
void OAIVideoDescription::setDropFrameTimecode(const OAIDropFrameTimecode &drop_frame_timecode) {
    m_drop_frame_timecode = drop_frame_timecode;
    m_drop_frame_timecode_isSet = true;
}

bool OAIVideoDescription::is_drop_frame_timecode_Set() const{
    return m_drop_frame_timecode_isSet;
}

bool OAIVideoDescription::is_drop_frame_timecode_Valid() const{
    return m_drop_frame_timecode_isValid;
}

qint32 OAIVideoDescription::getFixedAfd() const {
    return m_fixed_afd;
}
void OAIVideoDescription::setFixedAfd(const qint32 &fixed_afd) {
    m_fixed_afd = fixed_afd;
    m_fixed_afd_isSet = true;
}

bool OAIVideoDescription::is_fixed_afd_Set() const{
    return m_fixed_afd_isSet;
}

bool OAIVideoDescription::is_fixed_afd_Valid() const{
    return m_fixed_afd_isValid;
}

qint32 OAIVideoDescription::getHeight() const {
    return m_height;
}
void OAIVideoDescription::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIVideoDescription::is_height_Set() const{
    return m_height_isSet;
}

bool OAIVideoDescription::is_height_Valid() const{
    return m_height_isValid;
}

OAIVideoDescription_Position OAIVideoDescription::getPosition() const {
    return m_position;
}
void OAIVideoDescription::setPosition(const OAIVideoDescription_Position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIVideoDescription::is_position_Set() const{
    return m_position_isSet;
}

bool OAIVideoDescription::is_position_Valid() const{
    return m_position_isValid;
}

OAIRespondToAfd OAIVideoDescription::getRespondToAfd() const {
    return m_respond_to_afd;
}
void OAIVideoDescription::setRespondToAfd(const OAIRespondToAfd &respond_to_afd) {
    m_respond_to_afd = respond_to_afd;
    m_respond_to_afd_isSet = true;
}

bool OAIVideoDescription::is_respond_to_afd_Set() const{
    return m_respond_to_afd_isSet;
}

bool OAIVideoDescription::is_respond_to_afd_Valid() const{
    return m_respond_to_afd_isValid;
}

OAIScalingBehavior OAIVideoDescription::getScalingBehavior() const {
    return m_scaling_behavior;
}
void OAIVideoDescription::setScalingBehavior(const OAIScalingBehavior &scaling_behavior) {
    m_scaling_behavior = scaling_behavior;
    m_scaling_behavior_isSet = true;
}

bool OAIVideoDescription::is_scaling_behavior_Set() const{
    return m_scaling_behavior_isSet;
}

bool OAIVideoDescription::is_scaling_behavior_Valid() const{
    return m_scaling_behavior_isValid;
}

qint32 OAIVideoDescription::getSharpness() const {
    return m_sharpness;
}
void OAIVideoDescription::setSharpness(const qint32 &sharpness) {
    m_sharpness = sharpness;
    m_sharpness_isSet = true;
}

bool OAIVideoDescription::is_sharpness_Set() const{
    return m_sharpness_isSet;
}

bool OAIVideoDescription::is_sharpness_Valid() const{
    return m_sharpness_isValid;
}

OAIVideoTimecodeInsertion OAIVideoDescription::getTimecodeInsertion() const {
    return m_timecode_insertion;
}
void OAIVideoDescription::setTimecodeInsertion(const OAIVideoTimecodeInsertion &timecode_insertion) {
    m_timecode_insertion = timecode_insertion;
    m_timecode_insertion_isSet = true;
}

bool OAIVideoDescription::is_timecode_insertion_Set() const{
    return m_timecode_insertion_isSet;
}

bool OAIVideoDescription::is_timecode_insertion_Valid() const{
    return m_timecode_insertion_isValid;
}

OAIVideoDescription_VideoPreprocessors OAIVideoDescription::getVideoPreprocessors() const {
    return m_video_preprocessors;
}
void OAIVideoDescription::setVideoPreprocessors(const OAIVideoDescription_VideoPreprocessors &video_preprocessors) {
    m_video_preprocessors = video_preprocessors;
    m_video_preprocessors_isSet = true;
}

bool OAIVideoDescription::is_video_preprocessors_Set() const{
    return m_video_preprocessors_isSet;
}

bool OAIVideoDescription::is_video_preprocessors_Valid() const{
    return m_video_preprocessors_isValid;
}

qint32 OAIVideoDescription::getWidth() const {
    return m_width;
}
void OAIVideoDescription::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIVideoDescription::is_width_Set() const{
    return m_width_isSet;
}

bool OAIVideoDescription::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIVideoDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_afd_signaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anti_alias.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_frame_timecode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_afd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_respond_to_afd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharpness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_insertion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_preprocessors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
