/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStaticKeyProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStaticKeyProvider::OAIStaticKeyProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStaticKeyProvider::OAIStaticKeyProvider() {
    this->initializeModel();
}

OAIStaticKeyProvider::~OAIStaticKeyProvider() {}

void OAIStaticKeyProvider::initializeModel() {

    m_key_format_isSet = false;
    m_key_format_isValid = false;

    m_key_format_versions_isSet = false;
    m_key_format_versions_isValid = false;

    m_static_key_value_isSet = false;
    m_static_key_value_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIStaticKeyProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStaticKeyProvider::fromJsonObject(QJsonObject json) {

    m_key_format_isValid = ::OpenAPI::fromJsonValue(m_key_format, json[QString("KeyFormat")]);
    m_key_format_isSet = !json[QString("KeyFormat")].isNull() && m_key_format_isValid;

    m_key_format_versions_isValid = ::OpenAPI::fromJsonValue(m_key_format_versions, json[QString("KeyFormatVersions")]);
    m_key_format_versions_isSet = !json[QString("KeyFormatVersions")].isNull() && m_key_format_versions_isValid;

    m_static_key_value_isValid = ::OpenAPI::fromJsonValue(m_static_key_value, json[QString("StaticKeyValue")]);
    m_static_key_value_isSet = !json[QString("StaticKeyValue")].isNull() && m_static_key_value_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAIStaticKeyProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStaticKeyProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_key_format_isSet) {
        obj.insert(QString("KeyFormat"), ::OpenAPI::toJsonValue(m_key_format));
    }
    if (m_key_format_versions_isSet) {
        obj.insert(QString("KeyFormatVersions"), ::OpenAPI::toJsonValue(m_key_format_versions));
    }
    if (m_static_key_value_isSet) {
        obj.insert(QString("StaticKeyValue"), ::OpenAPI::toJsonValue(m_static_key_value));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIStaticKeyProvider::getKeyFormat() const {
    return m_key_format;
}
void OAIStaticKeyProvider::setKeyFormat(const QString &key_format) {
    m_key_format = key_format;
    m_key_format_isSet = true;
}

bool OAIStaticKeyProvider::is_key_format_Set() const{
    return m_key_format_isSet;
}

bool OAIStaticKeyProvider::is_key_format_Valid() const{
    return m_key_format_isValid;
}

QString OAIStaticKeyProvider::getKeyFormatVersions() const {
    return m_key_format_versions;
}
void OAIStaticKeyProvider::setKeyFormatVersions(const QString &key_format_versions) {
    m_key_format_versions = key_format_versions;
    m_key_format_versions_isSet = true;
}

bool OAIStaticKeyProvider::is_key_format_versions_Set() const{
    return m_key_format_versions_isSet;
}

bool OAIStaticKeyProvider::is_key_format_versions_Valid() const{
    return m_key_format_versions_isValid;
}

QString OAIStaticKeyProvider::getStaticKeyValue() const {
    return m_static_key_value;
}
void OAIStaticKeyProvider::setStaticKeyValue(const QString &static_key_value) {
    m_static_key_value = static_key_value;
    m_static_key_value_isSet = true;
}

bool OAIStaticKeyProvider::is_static_key_value_Set() const{
    return m_static_key_value_isSet;
}

bool OAIStaticKeyProvider::is_static_key_value_Valid() const{
    return m_static_key_value_isValid;
}

QString OAIStaticKeyProvider::getUrl() const {
    return m_url;
}
void OAIStaticKeyProvider::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIStaticKeyProvider::is_url_Set() const{
    return m_url_isSet;
}

bool OAIStaticKeyProvider::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIStaticKeyProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_format_versions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStaticKeyProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
