/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioSelector_RemixSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioSelector_RemixSettings::OAIAudioSelector_RemixSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioSelector_RemixSettings::OAIAudioSelector_RemixSettings() {
    this->initializeModel();
}

OAIAudioSelector_RemixSettings::~OAIAudioSelector_RemixSettings() {}

void OAIAudioSelector_RemixSettings::initializeModel() {

    m_channel_mapping_isSet = false;
    m_channel_mapping_isValid = false;

    m_channels_in_isSet = false;
    m_channels_in_isValid = false;

    m_channels_out_isSet = false;
    m_channels_out_isValid = false;
}

void OAIAudioSelector_RemixSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioSelector_RemixSettings::fromJsonObject(QJsonObject json) {

    m_channel_mapping_isValid = ::OpenAPI::fromJsonValue(m_channel_mapping, json[QString("ChannelMapping")]);
    m_channel_mapping_isSet = !json[QString("ChannelMapping")].isNull() && m_channel_mapping_isValid;

    m_channels_in_isValid = ::OpenAPI::fromJsonValue(m_channels_in, json[QString("ChannelsIn")]);
    m_channels_in_isSet = !json[QString("ChannelsIn")].isNull() && m_channels_in_isValid;

    m_channels_out_isValid = ::OpenAPI::fromJsonValue(m_channels_out, json[QString("ChannelsOut")]);
    m_channels_out_isSet = !json[QString("ChannelsOut")].isNull() && m_channels_out_isValid;
}

QString OAIAudioSelector_RemixSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioSelector_RemixSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_mapping.isSet()) {
        obj.insert(QString("ChannelMapping"), ::OpenAPI::toJsonValue(m_channel_mapping));
    }
    if (m_channels_in_isSet) {
        obj.insert(QString("ChannelsIn"), ::OpenAPI::toJsonValue(m_channels_in));
    }
    if (m_channels_out_isSet) {
        obj.insert(QString("ChannelsOut"), ::OpenAPI::toJsonValue(m_channels_out));
    }
    return obj;
}

OAIRemixSettings_ChannelMapping OAIAudioSelector_RemixSettings::getChannelMapping() const {
    return m_channel_mapping;
}
void OAIAudioSelector_RemixSettings::setChannelMapping(const OAIRemixSettings_ChannelMapping &channel_mapping) {
    m_channel_mapping = channel_mapping;
    m_channel_mapping_isSet = true;
}

bool OAIAudioSelector_RemixSettings::is_channel_mapping_Set() const{
    return m_channel_mapping_isSet;
}

bool OAIAudioSelector_RemixSettings::is_channel_mapping_Valid() const{
    return m_channel_mapping_isValid;
}

qint32 OAIAudioSelector_RemixSettings::getChannelsIn() const {
    return m_channels_in;
}
void OAIAudioSelector_RemixSettings::setChannelsIn(const qint32 &channels_in) {
    m_channels_in = channels_in;
    m_channels_in_isSet = true;
}

bool OAIAudioSelector_RemixSettings::is_channels_in_Set() const{
    return m_channels_in_isSet;
}

bool OAIAudioSelector_RemixSettings::is_channels_in_Valid() const{
    return m_channels_in_isValid;
}

qint32 OAIAudioSelector_RemixSettings::getChannelsOut() const {
    return m_channels_out;
}
void OAIAudioSelector_RemixSettings::setChannelsOut(const qint32 &channels_out) {
    m_channels_out = channels_out;
    m_channels_out_isSet = true;
}

bool OAIAudioSelector_RemixSettings::is_channels_out_Set() const{
    return m_channels_out_isSet;
}

bool OAIAudioSelector_RemixSettings::is_channels_out_Valid() const{
    return m_channels_out_isValid;
}

bool OAIAudioSelector_RemixSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels_out_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioSelector_RemixSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
