/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXavcSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXavcSettings::OAIXavcSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXavcSettings::OAIXavcSettings() {
    this->initializeModel();
}

OAIXavcSettings::~OAIXavcSettings() {}

void OAIXavcSettings::initializeModel() {

    m_adaptive_quantization_isSet = false;
    m_adaptive_quantization_isValid = false;

    m_entropy_encoding_isSet = false;
    m_entropy_encoding_isValid = false;

    m_framerate_control_isSet = false;
    m_framerate_control_isValid = false;

    m_framerate_conversion_algorithm_isSet = false;
    m_framerate_conversion_algorithm_isValid = false;

    m_framerate_denominator_isSet = false;
    m_framerate_denominator_isValid = false;

    m_framerate_numerator_isSet = false;
    m_framerate_numerator_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_slow_pal_isSet = false;
    m_slow_pal_isValid = false;

    m_softness_isSet = false;
    m_softness_isValid = false;

    m_spatial_adaptive_quantization_isSet = false;
    m_spatial_adaptive_quantization_isValid = false;

    m_temporal_adaptive_quantization_isSet = false;
    m_temporal_adaptive_quantization_isValid = false;

    m_xavc4k_intra_cbg_profile_settings_isSet = false;
    m_xavc4k_intra_cbg_profile_settings_isValid = false;

    m_xavc4k_intra_vbr_profile_settings_isSet = false;
    m_xavc4k_intra_vbr_profile_settings_isValid = false;

    m_xavc4k_profile_settings_isSet = false;
    m_xavc4k_profile_settings_isValid = false;

    m_xavc_hd_intra_cbg_profile_settings_isSet = false;
    m_xavc_hd_intra_cbg_profile_settings_isValid = false;

    m_xavc_hd_profile_settings_isSet = false;
    m_xavc_hd_profile_settings_isValid = false;
}

void OAIXavcSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXavcSettings::fromJsonObject(QJsonObject json) {

    m_adaptive_quantization_isValid = ::OpenAPI::fromJsonValue(m_adaptive_quantization, json[QString("AdaptiveQuantization")]);
    m_adaptive_quantization_isSet = !json[QString("AdaptiveQuantization")].isNull() && m_adaptive_quantization_isValid;

    m_entropy_encoding_isValid = ::OpenAPI::fromJsonValue(m_entropy_encoding, json[QString("EntropyEncoding")]);
    m_entropy_encoding_isSet = !json[QString("EntropyEncoding")].isNull() && m_entropy_encoding_isValid;

    m_framerate_control_isValid = ::OpenAPI::fromJsonValue(m_framerate_control, json[QString("FramerateControl")]);
    m_framerate_control_isSet = !json[QString("FramerateControl")].isNull() && m_framerate_control_isValid;

    m_framerate_conversion_algorithm_isValid = ::OpenAPI::fromJsonValue(m_framerate_conversion_algorithm, json[QString("FramerateConversionAlgorithm")]);
    m_framerate_conversion_algorithm_isSet = !json[QString("FramerateConversionAlgorithm")].isNull() && m_framerate_conversion_algorithm_isValid;

    m_framerate_denominator_isValid = ::OpenAPI::fromJsonValue(m_framerate_denominator, json[QString("FramerateDenominator")]);
    m_framerate_denominator_isSet = !json[QString("FramerateDenominator")].isNull() && m_framerate_denominator_isValid;

    m_framerate_numerator_isValid = ::OpenAPI::fromJsonValue(m_framerate_numerator, json[QString("FramerateNumerator")]);
    m_framerate_numerator_isSet = !json[QString("FramerateNumerator")].isNull() && m_framerate_numerator_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("Profile")]);
    m_profile_isSet = !json[QString("Profile")].isNull() && m_profile_isValid;

    m_slow_pal_isValid = ::OpenAPI::fromJsonValue(m_slow_pal, json[QString("SlowPal")]);
    m_slow_pal_isSet = !json[QString("SlowPal")].isNull() && m_slow_pal_isValid;

    m_softness_isValid = ::OpenAPI::fromJsonValue(m_softness, json[QString("Softness")]);
    m_softness_isSet = !json[QString("Softness")].isNull() && m_softness_isValid;

    m_spatial_adaptive_quantization_isValid = ::OpenAPI::fromJsonValue(m_spatial_adaptive_quantization, json[QString("SpatialAdaptiveQuantization")]);
    m_spatial_adaptive_quantization_isSet = !json[QString("SpatialAdaptiveQuantization")].isNull() && m_spatial_adaptive_quantization_isValid;

    m_temporal_adaptive_quantization_isValid = ::OpenAPI::fromJsonValue(m_temporal_adaptive_quantization, json[QString("TemporalAdaptiveQuantization")]);
    m_temporal_adaptive_quantization_isSet = !json[QString("TemporalAdaptiveQuantization")].isNull() && m_temporal_adaptive_quantization_isValid;

    m_xavc4k_intra_cbg_profile_settings_isValid = ::OpenAPI::fromJsonValue(m_xavc4k_intra_cbg_profile_settings, json[QString("Xavc4kIntraCbgProfileSettings")]);
    m_xavc4k_intra_cbg_profile_settings_isSet = !json[QString("Xavc4kIntraCbgProfileSettings")].isNull() && m_xavc4k_intra_cbg_profile_settings_isValid;

    m_xavc4k_intra_vbr_profile_settings_isValid = ::OpenAPI::fromJsonValue(m_xavc4k_intra_vbr_profile_settings, json[QString("Xavc4kIntraVbrProfileSettings")]);
    m_xavc4k_intra_vbr_profile_settings_isSet = !json[QString("Xavc4kIntraVbrProfileSettings")].isNull() && m_xavc4k_intra_vbr_profile_settings_isValid;

    m_xavc4k_profile_settings_isValid = ::OpenAPI::fromJsonValue(m_xavc4k_profile_settings, json[QString("Xavc4kProfileSettings")]);
    m_xavc4k_profile_settings_isSet = !json[QString("Xavc4kProfileSettings")].isNull() && m_xavc4k_profile_settings_isValid;

    m_xavc_hd_intra_cbg_profile_settings_isValid = ::OpenAPI::fromJsonValue(m_xavc_hd_intra_cbg_profile_settings, json[QString("XavcHdIntraCbgProfileSettings")]);
    m_xavc_hd_intra_cbg_profile_settings_isSet = !json[QString("XavcHdIntraCbgProfileSettings")].isNull() && m_xavc_hd_intra_cbg_profile_settings_isValid;

    m_xavc_hd_profile_settings_isValid = ::OpenAPI::fromJsonValue(m_xavc_hd_profile_settings, json[QString("XavcHdProfileSettings")]);
    m_xavc_hd_profile_settings_isSet = !json[QString("XavcHdProfileSettings")].isNull() && m_xavc_hd_profile_settings_isValid;
}

QString OAIXavcSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXavcSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_adaptive_quantization.isSet()) {
        obj.insert(QString("AdaptiveQuantization"), ::OpenAPI::toJsonValue(m_adaptive_quantization));
    }
    if (m_entropy_encoding.isSet()) {
        obj.insert(QString("EntropyEncoding"), ::OpenAPI::toJsonValue(m_entropy_encoding));
    }
    if (m_framerate_control.isSet()) {
        obj.insert(QString("FramerateControl"), ::OpenAPI::toJsonValue(m_framerate_control));
    }
    if (m_framerate_conversion_algorithm.isSet()) {
        obj.insert(QString("FramerateConversionAlgorithm"), ::OpenAPI::toJsonValue(m_framerate_conversion_algorithm));
    }
    if (m_framerate_denominator_isSet) {
        obj.insert(QString("FramerateDenominator"), ::OpenAPI::toJsonValue(m_framerate_denominator));
    }
    if (m_framerate_numerator_isSet) {
        obj.insert(QString("FramerateNumerator"), ::OpenAPI::toJsonValue(m_framerate_numerator));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("Profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_slow_pal.isSet()) {
        obj.insert(QString("SlowPal"), ::OpenAPI::toJsonValue(m_slow_pal));
    }
    if (m_softness_isSet) {
        obj.insert(QString("Softness"), ::OpenAPI::toJsonValue(m_softness));
    }
    if (m_spatial_adaptive_quantization.isSet()) {
        obj.insert(QString("SpatialAdaptiveQuantization"), ::OpenAPI::toJsonValue(m_spatial_adaptive_quantization));
    }
    if (m_temporal_adaptive_quantization.isSet()) {
        obj.insert(QString("TemporalAdaptiveQuantization"), ::OpenAPI::toJsonValue(m_temporal_adaptive_quantization));
    }
    if (m_xavc4k_intra_cbg_profile_settings.isSet()) {
        obj.insert(QString("Xavc4kIntraCbgProfileSettings"), ::OpenAPI::toJsonValue(m_xavc4k_intra_cbg_profile_settings));
    }
    if (m_xavc4k_intra_vbr_profile_settings.isSet()) {
        obj.insert(QString("Xavc4kIntraVbrProfileSettings"), ::OpenAPI::toJsonValue(m_xavc4k_intra_vbr_profile_settings));
    }
    if (m_xavc4k_profile_settings.isSet()) {
        obj.insert(QString("Xavc4kProfileSettings"), ::OpenAPI::toJsonValue(m_xavc4k_profile_settings));
    }
    if (m_xavc_hd_intra_cbg_profile_settings.isSet()) {
        obj.insert(QString("XavcHdIntraCbgProfileSettings"), ::OpenAPI::toJsonValue(m_xavc_hd_intra_cbg_profile_settings));
    }
    if (m_xavc_hd_profile_settings.isSet()) {
        obj.insert(QString("XavcHdProfileSettings"), ::OpenAPI::toJsonValue(m_xavc_hd_profile_settings));
    }
    return obj;
}

OAIXavcAdaptiveQuantization OAIXavcSettings::getAdaptiveQuantization() const {
    return m_adaptive_quantization;
}
void OAIXavcSettings::setAdaptiveQuantization(const OAIXavcAdaptiveQuantization &adaptive_quantization) {
    m_adaptive_quantization = adaptive_quantization;
    m_adaptive_quantization_isSet = true;
}

bool OAIXavcSettings::is_adaptive_quantization_Set() const{
    return m_adaptive_quantization_isSet;
}

bool OAIXavcSettings::is_adaptive_quantization_Valid() const{
    return m_adaptive_quantization_isValid;
}

OAIXavcEntropyEncoding OAIXavcSettings::getEntropyEncoding() const {
    return m_entropy_encoding;
}
void OAIXavcSettings::setEntropyEncoding(const OAIXavcEntropyEncoding &entropy_encoding) {
    m_entropy_encoding = entropy_encoding;
    m_entropy_encoding_isSet = true;
}

bool OAIXavcSettings::is_entropy_encoding_Set() const{
    return m_entropy_encoding_isSet;
}

bool OAIXavcSettings::is_entropy_encoding_Valid() const{
    return m_entropy_encoding_isValid;
}

OAIXavcFramerateControl OAIXavcSettings::getFramerateControl() const {
    return m_framerate_control;
}
void OAIXavcSettings::setFramerateControl(const OAIXavcFramerateControl &framerate_control) {
    m_framerate_control = framerate_control;
    m_framerate_control_isSet = true;
}

bool OAIXavcSettings::is_framerate_control_Set() const{
    return m_framerate_control_isSet;
}

bool OAIXavcSettings::is_framerate_control_Valid() const{
    return m_framerate_control_isValid;
}

OAIXavcFramerateConversionAlgorithm OAIXavcSettings::getFramerateConversionAlgorithm() const {
    return m_framerate_conversion_algorithm;
}
void OAIXavcSettings::setFramerateConversionAlgorithm(const OAIXavcFramerateConversionAlgorithm &framerate_conversion_algorithm) {
    m_framerate_conversion_algorithm = framerate_conversion_algorithm;
    m_framerate_conversion_algorithm_isSet = true;
}

bool OAIXavcSettings::is_framerate_conversion_algorithm_Set() const{
    return m_framerate_conversion_algorithm_isSet;
}

bool OAIXavcSettings::is_framerate_conversion_algorithm_Valid() const{
    return m_framerate_conversion_algorithm_isValid;
}

qint32 OAIXavcSettings::getFramerateDenominator() const {
    return m_framerate_denominator;
}
void OAIXavcSettings::setFramerateDenominator(const qint32 &framerate_denominator) {
    m_framerate_denominator = framerate_denominator;
    m_framerate_denominator_isSet = true;
}

bool OAIXavcSettings::is_framerate_denominator_Set() const{
    return m_framerate_denominator_isSet;
}

bool OAIXavcSettings::is_framerate_denominator_Valid() const{
    return m_framerate_denominator_isValid;
}

qint32 OAIXavcSettings::getFramerateNumerator() const {
    return m_framerate_numerator;
}
void OAIXavcSettings::setFramerateNumerator(const qint32 &framerate_numerator) {
    m_framerate_numerator = framerate_numerator;
    m_framerate_numerator_isSet = true;
}

bool OAIXavcSettings::is_framerate_numerator_Set() const{
    return m_framerate_numerator_isSet;
}

bool OAIXavcSettings::is_framerate_numerator_Valid() const{
    return m_framerate_numerator_isValid;
}

OAIXavcProfile OAIXavcSettings::getProfile() const {
    return m_profile;
}
void OAIXavcSettings::setProfile(const OAIXavcProfile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIXavcSettings::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIXavcSettings::is_profile_Valid() const{
    return m_profile_isValid;
}

OAIXavcSlowPal OAIXavcSettings::getSlowPal() const {
    return m_slow_pal;
}
void OAIXavcSettings::setSlowPal(const OAIXavcSlowPal &slow_pal) {
    m_slow_pal = slow_pal;
    m_slow_pal_isSet = true;
}

bool OAIXavcSettings::is_slow_pal_Set() const{
    return m_slow_pal_isSet;
}

bool OAIXavcSettings::is_slow_pal_Valid() const{
    return m_slow_pal_isValid;
}

qint32 OAIXavcSettings::getSoftness() const {
    return m_softness;
}
void OAIXavcSettings::setSoftness(const qint32 &softness) {
    m_softness = softness;
    m_softness_isSet = true;
}

bool OAIXavcSettings::is_softness_Set() const{
    return m_softness_isSet;
}

bool OAIXavcSettings::is_softness_Valid() const{
    return m_softness_isValid;
}

OAIXavcSpatialAdaptiveQuantization OAIXavcSettings::getSpatialAdaptiveQuantization() const {
    return m_spatial_adaptive_quantization;
}
void OAIXavcSettings::setSpatialAdaptiveQuantization(const OAIXavcSpatialAdaptiveQuantization &spatial_adaptive_quantization) {
    m_spatial_adaptive_quantization = spatial_adaptive_quantization;
    m_spatial_adaptive_quantization_isSet = true;
}

bool OAIXavcSettings::is_spatial_adaptive_quantization_Set() const{
    return m_spatial_adaptive_quantization_isSet;
}

bool OAIXavcSettings::is_spatial_adaptive_quantization_Valid() const{
    return m_spatial_adaptive_quantization_isValid;
}

OAIXavcTemporalAdaptiveQuantization OAIXavcSettings::getTemporalAdaptiveQuantization() const {
    return m_temporal_adaptive_quantization;
}
void OAIXavcSettings::setTemporalAdaptiveQuantization(const OAIXavcTemporalAdaptiveQuantization &temporal_adaptive_quantization) {
    m_temporal_adaptive_quantization = temporal_adaptive_quantization;
    m_temporal_adaptive_quantization_isSet = true;
}

bool OAIXavcSettings::is_temporal_adaptive_quantization_Set() const{
    return m_temporal_adaptive_quantization_isSet;
}

bool OAIXavcSettings::is_temporal_adaptive_quantization_Valid() const{
    return m_temporal_adaptive_quantization_isValid;
}

OAIXavcSettings_Xavc4kIntraCbgProfileSettings OAIXavcSettings::getXavc4kIntraCbgProfileSettings() const {
    return m_xavc4k_intra_cbg_profile_settings;
}
void OAIXavcSettings::setXavc4kIntraCbgProfileSettings(const OAIXavcSettings_Xavc4kIntraCbgProfileSettings &xavc4k_intra_cbg_profile_settings) {
    m_xavc4k_intra_cbg_profile_settings = xavc4k_intra_cbg_profile_settings;
    m_xavc4k_intra_cbg_profile_settings_isSet = true;
}

bool OAIXavcSettings::is_xavc4k_intra_cbg_profile_settings_Set() const{
    return m_xavc4k_intra_cbg_profile_settings_isSet;
}

bool OAIXavcSettings::is_xavc4k_intra_cbg_profile_settings_Valid() const{
    return m_xavc4k_intra_cbg_profile_settings_isValid;
}

OAIXavcSettings_Xavc4kIntraVbrProfileSettings OAIXavcSettings::getXavc4kIntraVbrProfileSettings() const {
    return m_xavc4k_intra_vbr_profile_settings;
}
void OAIXavcSettings::setXavc4kIntraVbrProfileSettings(const OAIXavcSettings_Xavc4kIntraVbrProfileSettings &xavc4k_intra_vbr_profile_settings) {
    m_xavc4k_intra_vbr_profile_settings = xavc4k_intra_vbr_profile_settings;
    m_xavc4k_intra_vbr_profile_settings_isSet = true;
}

bool OAIXavcSettings::is_xavc4k_intra_vbr_profile_settings_Set() const{
    return m_xavc4k_intra_vbr_profile_settings_isSet;
}

bool OAIXavcSettings::is_xavc4k_intra_vbr_profile_settings_Valid() const{
    return m_xavc4k_intra_vbr_profile_settings_isValid;
}

OAIXavcSettings_Xavc4kProfileSettings OAIXavcSettings::getXavc4kProfileSettings() const {
    return m_xavc4k_profile_settings;
}
void OAIXavcSettings::setXavc4kProfileSettings(const OAIXavcSettings_Xavc4kProfileSettings &xavc4k_profile_settings) {
    m_xavc4k_profile_settings = xavc4k_profile_settings;
    m_xavc4k_profile_settings_isSet = true;
}

bool OAIXavcSettings::is_xavc4k_profile_settings_Set() const{
    return m_xavc4k_profile_settings_isSet;
}

bool OAIXavcSettings::is_xavc4k_profile_settings_Valid() const{
    return m_xavc4k_profile_settings_isValid;
}

OAIXavcSettings_XavcHdIntraCbgProfileSettings OAIXavcSettings::getXavcHdIntraCbgProfileSettings() const {
    return m_xavc_hd_intra_cbg_profile_settings;
}
void OAIXavcSettings::setXavcHdIntraCbgProfileSettings(const OAIXavcSettings_XavcHdIntraCbgProfileSettings &xavc_hd_intra_cbg_profile_settings) {
    m_xavc_hd_intra_cbg_profile_settings = xavc_hd_intra_cbg_profile_settings;
    m_xavc_hd_intra_cbg_profile_settings_isSet = true;
}

bool OAIXavcSettings::is_xavc_hd_intra_cbg_profile_settings_Set() const{
    return m_xavc_hd_intra_cbg_profile_settings_isSet;
}

bool OAIXavcSettings::is_xavc_hd_intra_cbg_profile_settings_Valid() const{
    return m_xavc_hd_intra_cbg_profile_settings_isValid;
}

OAIXavcSettings_XavcHdProfileSettings OAIXavcSettings::getXavcHdProfileSettings() const {
    return m_xavc_hd_profile_settings;
}
void OAIXavcSettings::setXavcHdProfileSettings(const OAIXavcSettings_XavcHdProfileSettings &xavc_hd_profile_settings) {
    m_xavc_hd_profile_settings = xavc_hd_profile_settings;
    m_xavc_hd_profile_settings_isSet = true;
}

bool OAIXavcSettings::is_xavc_hd_profile_settings_Set() const{
    return m_xavc_hd_profile_settings_isSet;
}

bool OAIXavcSettings::is_xavc_hd_profile_settings_Valid() const{
    return m_xavc_hd_profile_settings_isValid;
}

bool OAIXavcSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adaptive_quantization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entropy_encoding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_conversion_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_pal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_softness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spatial_adaptive_quantization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporal_adaptive_quantization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xavc4k_intra_cbg_profile_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xavc4k_intra_vbr_profile_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xavc4k_profile_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xavc_hd_intra_cbg_profile_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xavc_hd_profile_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXavcSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
