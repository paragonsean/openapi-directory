/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEac3AtmosSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEac3AtmosSettings::OAIEac3AtmosSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEac3AtmosSettings::OAIEac3AtmosSettings() {
    this->initializeModel();
}

OAIEac3AtmosSettings::~OAIEac3AtmosSettings() {}

void OAIEac3AtmosSettings::initializeModel() {

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_bitstream_mode_isSet = false;
    m_bitstream_mode_isValid = false;

    m_coding_mode_isSet = false;
    m_coding_mode_isValid = false;

    m_dialogue_intelligence_isSet = false;
    m_dialogue_intelligence_isValid = false;

    m_downmix_control_isSet = false;
    m_downmix_control_isValid = false;

    m_dynamic_range_compression_line_isSet = false;
    m_dynamic_range_compression_line_isValid = false;

    m_dynamic_range_compression_rf_isSet = false;
    m_dynamic_range_compression_rf_isValid = false;

    m_dynamic_range_control_isSet = false;
    m_dynamic_range_control_isValid = false;

    m_lo_ro_center_mix_level_isSet = false;
    m_lo_ro_center_mix_level_isValid = false;

    m_lo_ro_surround_mix_level_isSet = false;
    m_lo_ro_surround_mix_level_isValid = false;

    m_lt_rt_center_mix_level_isSet = false;
    m_lt_rt_center_mix_level_isValid = false;

    m_lt_rt_surround_mix_level_isSet = false;
    m_lt_rt_surround_mix_level_isValid = false;

    m_metering_mode_isSet = false;
    m_metering_mode_isValid = false;

    m_sample_rate_isSet = false;
    m_sample_rate_isValid = false;

    m_speech_threshold_isSet = false;
    m_speech_threshold_isValid = false;

    m_stereo_downmix_isSet = false;
    m_stereo_downmix_isValid = false;

    m_surround_ex_mode_isSet = false;
    m_surround_ex_mode_isValid = false;
}

void OAIEac3AtmosSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEac3AtmosSettings::fromJsonObject(QJsonObject json) {

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_bitstream_mode_isValid = ::OpenAPI::fromJsonValue(m_bitstream_mode, json[QString("BitstreamMode")]);
    m_bitstream_mode_isSet = !json[QString("BitstreamMode")].isNull() && m_bitstream_mode_isValid;

    m_coding_mode_isValid = ::OpenAPI::fromJsonValue(m_coding_mode, json[QString("CodingMode")]);
    m_coding_mode_isSet = !json[QString("CodingMode")].isNull() && m_coding_mode_isValid;

    m_dialogue_intelligence_isValid = ::OpenAPI::fromJsonValue(m_dialogue_intelligence, json[QString("DialogueIntelligence")]);
    m_dialogue_intelligence_isSet = !json[QString("DialogueIntelligence")].isNull() && m_dialogue_intelligence_isValid;

    m_downmix_control_isValid = ::OpenAPI::fromJsonValue(m_downmix_control, json[QString("DownmixControl")]);
    m_downmix_control_isSet = !json[QString("DownmixControl")].isNull() && m_downmix_control_isValid;

    m_dynamic_range_compression_line_isValid = ::OpenAPI::fromJsonValue(m_dynamic_range_compression_line, json[QString("DynamicRangeCompressionLine")]);
    m_dynamic_range_compression_line_isSet = !json[QString("DynamicRangeCompressionLine")].isNull() && m_dynamic_range_compression_line_isValid;

    m_dynamic_range_compression_rf_isValid = ::OpenAPI::fromJsonValue(m_dynamic_range_compression_rf, json[QString("DynamicRangeCompressionRf")]);
    m_dynamic_range_compression_rf_isSet = !json[QString("DynamicRangeCompressionRf")].isNull() && m_dynamic_range_compression_rf_isValid;

    m_dynamic_range_control_isValid = ::OpenAPI::fromJsonValue(m_dynamic_range_control, json[QString("DynamicRangeControl")]);
    m_dynamic_range_control_isSet = !json[QString("DynamicRangeControl")].isNull() && m_dynamic_range_control_isValid;

    m_lo_ro_center_mix_level_isValid = ::OpenAPI::fromJsonValue(m_lo_ro_center_mix_level, json[QString("LoRoCenterMixLevel")]);
    m_lo_ro_center_mix_level_isSet = !json[QString("LoRoCenterMixLevel")].isNull() && m_lo_ro_center_mix_level_isValid;

    m_lo_ro_surround_mix_level_isValid = ::OpenAPI::fromJsonValue(m_lo_ro_surround_mix_level, json[QString("LoRoSurroundMixLevel")]);
    m_lo_ro_surround_mix_level_isSet = !json[QString("LoRoSurroundMixLevel")].isNull() && m_lo_ro_surround_mix_level_isValid;

    m_lt_rt_center_mix_level_isValid = ::OpenAPI::fromJsonValue(m_lt_rt_center_mix_level, json[QString("LtRtCenterMixLevel")]);
    m_lt_rt_center_mix_level_isSet = !json[QString("LtRtCenterMixLevel")].isNull() && m_lt_rt_center_mix_level_isValid;

    m_lt_rt_surround_mix_level_isValid = ::OpenAPI::fromJsonValue(m_lt_rt_surround_mix_level, json[QString("LtRtSurroundMixLevel")]);
    m_lt_rt_surround_mix_level_isSet = !json[QString("LtRtSurroundMixLevel")].isNull() && m_lt_rt_surround_mix_level_isValid;

    m_metering_mode_isValid = ::OpenAPI::fromJsonValue(m_metering_mode, json[QString("MeteringMode")]);
    m_metering_mode_isSet = !json[QString("MeteringMode")].isNull() && m_metering_mode_isValid;

    m_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_sample_rate, json[QString("SampleRate")]);
    m_sample_rate_isSet = !json[QString("SampleRate")].isNull() && m_sample_rate_isValid;

    m_speech_threshold_isValid = ::OpenAPI::fromJsonValue(m_speech_threshold, json[QString("SpeechThreshold")]);
    m_speech_threshold_isSet = !json[QString("SpeechThreshold")].isNull() && m_speech_threshold_isValid;

    m_stereo_downmix_isValid = ::OpenAPI::fromJsonValue(m_stereo_downmix, json[QString("StereoDownmix")]);
    m_stereo_downmix_isSet = !json[QString("StereoDownmix")].isNull() && m_stereo_downmix_isValid;

    m_surround_ex_mode_isValid = ::OpenAPI::fromJsonValue(m_surround_ex_mode, json[QString("SurroundExMode")]);
    m_surround_ex_mode_isSet = !json[QString("SurroundExMode")].isNull() && m_surround_ex_mode_isValid;
}

QString OAIEac3AtmosSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEac3AtmosSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_bitstream_mode.isSet()) {
        obj.insert(QString("BitstreamMode"), ::OpenAPI::toJsonValue(m_bitstream_mode));
    }
    if (m_coding_mode.isSet()) {
        obj.insert(QString("CodingMode"), ::OpenAPI::toJsonValue(m_coding_mode));
    }
    if (m_dialogue_intelligence.isSet()) {
        obj.insert(QString("DialogueIntelligence"), ::OpenAPI::toJsonValue(m_dialogue_intelligence));
    }
    if (m_downmix_control.isSet()) {
        obj.insert(QString("DownmixControl"), ::OpenAPI::toJsonValue(m_downmix_control));
    }
    if (m_dynamic_range_compression_line.isSet()) {
        obj.insert(QString("DynamicRangeCompressionLine"), ::OpenAPI::toJsonValue(m_dynamic_range_compression_line));
    }
    if (m_dynamic_range_compression_rf.isSet()) {
        obj.insert(QString("DynamicRangeCompressionRf"), ::OpenAPI::toJsonValue(m_dynamic_range_compression_rf));
    }
    if (m_dynamic_range_control.isSet()) {
        obj.insert(QString("DynamicRangeControl"), ::OpenAPI::toJsonValue(m_dynamic_range_control));
    }
    if (m_lo_ro_center_mix_level_isSet) {
        obj.insert(QString("LoRoCenterMixLevel"), ::OpenAPI::toJsonValue(m_lo_ro_center_mix_level));
    }
    if (m_lo_ro_surround_mix_level_isSet) {
        obj.insert(QString("LoRoSurroundMixLevel"), ::OpenAPI::toJsonValue(m_lo_ro_surround_mix_level));
    }
    if (m_lt_rt_center_mix_level_isSet) {
        obj.insert(QString("LtRtCenterMixLevel"), ::OpenAPI::toJsonValue(m_lt_rt_center_mix_level));
    }
    if (m_lt_rt_surround_mix_level_isSet) {
        obj.insert(QString("LtRtSurroundMixLevel"), ::OpenAPI::toJsonValue(m_lt_rt_surround_mix_level));
    }
    if (m_metering_mode.isSet()) {
        obj.insert(QString("MeteringMode"), ::OpenAPI::toJsonValue(m_metering_mode));
    }
    if (m_sample_rate_isSet) {
        obj.insert(QString("SampleRate"), ::OpenAPI::toJsonValue(m_sample_rate));
    }
    if (m_speech_threshold_isSet) {
        obj.insert(QString("SpeechThreshold"), ::OpenAPI::toJsonValue(m_speech_threshold));
    }
    if (m_stereo_downmix.isSet()) {
        obj.insert(QString("StereoDownmix"), ::OpenAPI::toJsonValue(m_stereo_downmix));
    }
    if (m_surround_ex_mode.isSet()) {
        obj.insert(QString("SurroundExMode"), ::OpenAPI::toJsonValue(m_surround_ex_mode));
    }
    return obj;
}

qint32 OAIEac3AtmosSettings::getBitrate() const {
    return m_bitrate;
}
void OAIEac3AtmosSettings::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIEac3AtmosSettings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIEac3AtmosSettings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIEac3AtmosBitstreamMode OAIEac3AtmosSettings::getBitstreamMode() const {
    return m_bitstream_mode;
}
void OAIEac3AtmosSettings::setBitstreamMode(const OAIEac3AtmosBitstreamMode &bitstream_mode) {
    m_bitstream_mode = bitstream_mode;
    m_bitstream_mode_isSet = true;
}

bool OAIEac3AtmosSettings::is_bitstream_mode_Set() const{
    return m_bitstream_mode_isSet;
}

bool OAIEac3AtmosSettings::is_bitstream_mode_Valid() const{
    return m_bitstream_mode_isValid;
}

OAIEac3AtmosCodingMode OAIEac3AtmosSettings::getCodingMode() const {
    return m_coding_mode;
}
void OAIEac3AtmosSettings::setCodingMode(const OAIEac3AtmosCodingMode &coding_mode) {
    m_coding_mode = coding_mode;
    m_coding_mode_isSet = true;
}

bool OAIEac3AtmosSettings::is_coding_mode_Set() const{
    return m_coding_mode_isSet;
}

bool OAIEac3AtmosSettings::is_coding_mode_Valid() const{
    return m_coding_mode_isValid;
}

OAIEac3AtmosDialogueIntelligence OAIEac3AtmosSettings::getDialogueIntelligence() const {
    return m_dialogue_intelligence;
}
void OAIEac3AtmosSettings::setDialogueIntelligence(const OAIEac3AtmosDialogueIntelligence &dialogue_intelligence) {
    m_dialogue_intelligence = dialogue_intelligence;
    m_dialogue_intelligence_isSet = true;
}

bool OAIEac3AtmosSettings::is_dialogue_intelligence_Set() const{
    return m_dialogue_intelligence_isSet;
}

bool OAIEac3AtmosSettings::is_dialogue_intelligence_Valid() const{
    return m_dialogue_intelligence_isValid;
}

OAIEac3AtmosDownmixControl OAIEac3AtmosSettings::getDownmixControl() const {
    return m_downmix_control;
}
void OAIEac3AtmosSettings::setDownmixControl(const OAIEac3AtmosDownmixControl &downmix_control) {
    m_downmix_control = downmix_control;
    m_downmix_control_isSet = true;
}

bool OAIEac3AtmosSettings::is_downmix_control_Set() const{
    return m_downmix_control_isSet;
}

bool OAIEac3AtmosSettings::is_downmix_control_Valid() const{
    return m_downmix_control_isValid;
}

OAIEac3AtmosDynamicRangeCompressionLine OAIEac3AtmosSettings::getDynamicRangeCompressionLine() const {
    return m_dynamic_range_compression_line;
}
void OAIEac3AtmosSettings::setDynamicRangeCompressionLine(const OAIEac3AtmosDynamicRangeCompressionLine &dynamic_range_compression_line) {
    m_dynamic_range_compression_line = dynamic_range_compression_line;
    m_dynamic_range_compression_line_isSet = true;
}

bool OAIEac3AtmosSettings::is_dynamic_range_compression_line_Set() const{
    return m_dynamic_range_compression_line_isSet;
}

bool OAIEac3AtmosSettings::is_dynamic_range_compression_line_Valid() const{
    return m_dynamic_range_compression_line_isValid;
}

OAIEac3AtmosDynamicRangeCompressionRf OAIEac3AtmosSettings::getDynamicRangeCompressionRf() const {
    return m_dynamic_range_compression_rf;
}
void OAIEac3AtmosSettings::setDynamicRangeCompressionRf(const OAIEac3AtmosDynamicRangeCompressionRf &dynamic_range_compression_rf) {
    m_dynamic_range_compression_rf = dynamic_range_compression_rf;
    m_dynamic_range_compression_rf_isSet = true;
}

bool OAIEac3AtmosSettings::is_dynamic_range_compression_rf_Set() const{
    return m_dynamic_range_compression_rf_isSet;
}

bool OAIEac3AtmosSettings::is_dynamic_range_compression_rf_Valid() const{
    return m_dynamic_range_compression_rf_isValid;
}

OAIEac3AtmosDynamicRangeControl OAIEac3AtmosSettings::getDynamicRangeControl() const {
    return m_dynamic_range_control;
}
void OAIEac3AtmosSettings::setDynamicRangeControl(const OAIEac3AtmosDynamicRangeControl &dynamic_range_control) {
    m_dynamic_range_control = dynamic_range_control;
    m_dynamic_range_control_isSet = true;
}

bool OAIEac3AtmosSettings::is_dynamic_range_control_Set() const{
    return m_dynamic_range_control_isSet;
}

bool OAIEac3AtmosSettings::is_dynamic_range_control_Valid() const{
    return m_dynamic_range_control_isValid;
}

double OAIEac3AtmosSettings::getLoRoCenterMixLevel() const {
    return m_lo_ro_center_mix_level;
}
void OAIEac3AtmosSettings::setLoRoCenterMixLevel(const double &lo_ro_center_mix_level) {
    m_lo_ro_center_mix_level = lo_ro_center_mix_level;
    m_lo_ro_center_mix_level_isSet = true;
}

bool OAIEac3AtmosSettings::is_lo_ro_center_mix_level_Set() const{
    return m_lo_ro_center_mix_level_isSet;
}

bool OAIEac3AtmosSettings::is_lo_ro_center_mix_level_Valid() const{
    return m_lo_ro_center_mix_level_isValid;
}

double OAIEac3AtmosSettings::getLoRoSurroundMixLevel() const {
    return m_lo_ro_surround_mix_level;
}
void OAIEac3AtmosSettings::setLoRoSurroundMixLevel(const double &lo_ro_surround_mix_level) {
    m_lo_ro_surround_mix_level = lo_ro_surround_mix_level;
    m_lo_ro_surround_mix_level_isSet = true;
}

bool OAIEac3AtmosSettings::is_lo_ro_surround_mix_level_Set() const{
    return m_lo_ro_surround_mix_level_isSet;
}

bool OAIEac3AtmosSettings::is_lo_ro_surround_mix_level_Valid() const{
    return m_lo_ro_surround_mix_level_isValid;
}

double OAIEac3AtmosSettings::getLtRtCenterMixLevel() const {
    return m_lt_rt_center_mix_level;
}
void OAIEac3AtmosSettings::setLtRtCenterMixLevel(const double &lt_rt_center_mix_level) {
    m_lt_rt_center_mix_level = lt_rt_center_mix_level;
    m_lt_rt_center_mix_level_isSet = true;
}

bool OAIEac3AtmosSettings::is_lt_rt_center_mix_level_Set() const{
    return m_lt_rt_center_mix_level_isSet;
}

bool OAIEac3AtmosSettings::is_lt_rt_center_mix_level_Valid() const{
    return m_lt_rt_center_mix_level_isValid;
}

double OAIEac3AtmosSettings::getLtRtSurroundMixLevel() const {
    return m_lt_rt_surround_mix_level;
}
void OAIEac3AtmosSettings::setLtRtSurroundMixLevel(const double &lt_rt_surround_mix_level) {
    m_lt_rt_surround_mix_level = lt_rt_surround_mix_level;
    m_lt_rt_surround_mix_level_isSet = true;
}

bool OAIEac3AtmosSettings::is_lt_rt_surround_mix_level_Set() const{
    return m_lt_rt_surround_mix_level_isSet;
}

bool OAIEac3AtmosSettings::is_lt_rt_surround_mix_level_Valid() const{
    return m_lt_rt_surround_mix_level_isValid;
}

OAIEac3AtmosMeteringMode OAIEac3AtmosSettings::getMeteringMode() const {
    return m_metering_mode;
}
void OAIEac3AtmosSettings::setMeteringMode(const OAIEac3AtmosMeteringMode &metering_mode) {
    m_metering_mode = metering_mode;
    m_metering_mode_isSet = true;
}

bool OAIEac3AtmosSettings::is_metering_mode_Set() const{
    return m_metering_mode_isSet;
}

bool OAIEac3AtmosSettings::is_metering_mode_Valid() const{
    return m_metering_mode_isValid;
}

qint32 OAIEac3AtmosSettings::getSampleRate() const {
    return m_sample_rate;
}
void OAIEac3AtmosSettings::setSampleRate(const qint32 &sample_rate) {
    m_sample_rate = sample_rate;
    m_sample_rate_isSet = true;
}

bool OAIEac3AtmosSettings::is_sample_rate_Set() const{
    return m_sample_rate_isSet;
}

bool OAIEac3AtmosSettings::is_sample_rate_Valid() const{
    return m_sample_rate_isValid;
}

qint32 OAIEac3AtmosSettings::getSpeechThreshold() const {
    return m_speech_threshold;
}
void OAIEac3AtmosSettings::setSpeechThreshold(const qint32 &speech_threshold) {
    m_speech_threshold = speech_threshold;
    m_speech_threshold_isSet = true;
}

bool OAIEac3AtmosSettings::is_speech_threshold_Set() const{
    return m_speech_threshold_isSet;
}

bool OAIEac3AtmosSettings::is_speech_threshold_Valid() const{
    return m_speech_threshold_isValid;
}

OAIEac3AtmosStereoDownmix OAIEac3AtmosSettings::getStereoDownmix() const {
    return m_stereo_downmix;
}
void OAIEac3AtmosSettings::setStereoDownmix(const OAIEac3AtmosStereoDownmix &stereo_downmix) {
    m_stereo_downmix = stereo_downmix;
    m_stereo_downmix_isSet = true;
}

bool OAIEac3AtmosSettings::is_stereo_downmix_Set() const{
    return m_stereo_downmix_isSet;
}

bool OAIEac3AtmosSettings::is_stereo_downmix_Valid() const{
    return m_stereo_downmix_isValid;
}

OAIEac3AtmosSurroundExMode OAIEac3AtmosSettings::getSurroundExMode() const {
    return m_surround_ex_mode;
}
void OAIEac3AtmosSettings::setSurroundExMode(const OAIEac3AtmosSurroundExMode &surround_ex_mode) {
    m_surround_ex_mode = surround_ex_mode;
    m_surround_ex_mode_isSet = true;
}

bool OAIEac3AtmosSettings::is_surround_ex_mode_Set() const{
    return m_surround_ex_mode_isSet;
}

bool OAIEac3AtmosSettings::is_surround_ex_mode_Valid() const{
    return m_surround_ex_mode_isValid;
}

bool OAIEac3AtmosSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitstream_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coding_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialogue_intelligence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_downmix_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_range_compression_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_range_compression_rf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_range_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ro_center_mix_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ro_surround_mix_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lt_rt_center_mix_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lt_rt_surround_mix_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metering_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stereo_downmix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_surround_ex_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEac3AtmosSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
