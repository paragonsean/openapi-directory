/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputTemplate::OAIInputTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputTemplate::OAIInputTemplate() {
    this->initializeModel();
}

OAIInputTemplate::~OAIInputTemplate() {}

void OAIInputTemplate::initializeModel() {

    m_advanced_input_filter_isSet = false;
    m_advanced_input_filter_isValid = false;

    m_advanced_input_filter_settings_isSet = false;
    m_advanced_input_filter_settings_isValid = false;

    m_audio_selector_groups_isSet = false;
    m_audio_selector_groups_isValid = false;

    m_audio_selectors_isSet = false;
    m_audio_selectors_isValid = false;

    m_caption_selectors_isSet = false;
    m_caption_selectors_isValid = false;

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_deblock_filter_isSet = false;
    m_deblock_filter_isValid = false;

    m_denoise_filter_isSet = false;
    m_denoise_filter_isValid = false;

    m_dolby_vision_metadata_xml_isSet = false;
    m_dolby_vision_metadata_xml_isValid = false;

    m_filter_enable_isSet = false;
    m_filter_enable_isValid = false;

    m_filter_strength_isSet = false;
    m_filter_strength_isValid = false;

    m_image_inserter_isSet = false;
    m_image_inserter_isValid = false;

    m_input_clippings_isSet = false;
    m_input_clippings_isValid = false;

    m_input_scan_type_isSet = false;
    m_input_scan_type_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_program_number_isSet = false;
    m_program_number_isValid = false;

    m_psi_control_isSet = false;
    m_psi_control_isValid = false;

    m_timecode_source_isSet = false;
    m_timecode_source_isValid = false;

    m_timecode_start_isSet = false;
    m_timecode_start_isValid = false;

    m_video_selector_isSet = false;
    m_video_selector_isValid = false;
}

void OAIInputTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputTemplate::fromJsonObject(QJsonObject json) {

    m_advanced_input_filter_isValid = ::OpenAPI::fromJsonValue(m_advanced_input_filter, json[QString("AdvancedInputFilter")]);
    m_advanced_input_filter_isSet = !json[QString("AdvancedInputFilter")].isNull() && m_advanced_input_filter_isValid;

    m_advanced_input_filter_settings_isValid = ::OpenAPI::fromJsonValue(m_advanced_input_filter_settings, json[QString("AdvancedInputFilterSettings")]);
    m_advanced_input_filter_settings_isSet = !json[QString("AdvancedInputFilterSettings")].isNull() && m_advanced_input_filter_settings_isValid;

    m_audio_selector_groups_isValid = ::OpenAPI::fromJsonValue(m_audio_selector_groups, json[QString("AudioSelectorGroups")]);
    m_audio_selector_groups_isSet = !json[QString("AudioSelectorGroups")].isNull() && m_audio_selector_groups_isValid;

    m_audio_selectors_isValid = ::OpenAPI::fromJsonValue(m_audio_selectors, json[QString("AudioSelectors")]);
    m_audio_selectors_isSet = !json[QString("AudioSelectors")].isNull() && m_audio_selectors_isValid;

    m_caption_selectors_isValid = ::OpenAPI::fromJsonValue(m_caption_selectors, json[QString("CaptionSelectors")]);
    m_caption_selectors_isSet = !json[QString("CaptionSelectors")].isNull() && m_caption_selectors_isValid;

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("Crop")]);
    m_crop_isSet = !json[QString("Crop")].isNull() && m_crop_isValid;

    m_deblock_filter_isValid = ::OpenAPI::fromJsonValue(m_deblock_filter, json[QString("DeblockFilter")]);
    m_deblock_filter_isSet = !json[QString("DeblockFilter")].isNull() && m_deblock_filter_isValid;

    m_denoise_filter_isValid = ::OpenAPI::fromJsonValue(m_denoise_filter, json[QString("DenoiseFilter")]);
    m_denoise_filter_isSet = !json[QString("DenoiseFilter")].isNull() && m_denoise_filter_isValid;

    m_dolby_vision_metadata_xml_isValid = ::OpenAPI::fromJsonValue(m_dolby_vision_metadata_xml, json[QString("DolbyVisionMetadataXml")]);
    m_dolby_vision_metadata_xml_isSet = !json[QString("DolbyVisionMetadataXml")].isNull() && m_dolby_vision_metadata_xml_isValid;

    m_filter_enable_isValid = ::OpenAPI::fromJsonValue(m_filter_enable, json[QString("FilterEnable")]);
    m_filter_enable_isSet = !json[QString("FilterEnable")].isNull() && m_filter_enable_isValid;

    m_filter_strength_isValid = ::OpenAPI::fromJsonValue(m_filter_strength, json[QString("FilterStrength")]);
    m_filter_strength_isSet = !json[QString("FilterStrength")].isNull() && m_filter_strength_isValid;

    m_image_inserter_isValid = ::OpenAPI::fromJsonValue(m_image_inserter, json[QString("ImageInserter")]);
    m_image_inserter_isSet = !json[QString("ImageInserter")].isNull() && m_image_inserter_isValid;

    m_input_clippings_isValid = ::OpenAPI::fromJsonValue(m_input_clippings, json[QString("InputClippings")]);
    m_input_clippings_isSet = !json[QString("InputClippings")].isNull() && m_input_clippings_isValid;

    m_input_scan_type_isValid = ::OpenAPI::fromJsonValue(m_input_scan_type, json[QString("InputScanType")]);
    m_input_scan_type_isSet = !json[QString("InputScanType")].isNull() && m_input_scan_type_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_program_number_isValid = ::OpenAPI::fromJsonValue(m_program_number, json[QString("ProgramNumber")]);
    m_program_number_isSet = !json[QString("ProgramNumber")].isNull() && m_program_number_isValid;

    m_psi_control_isValid = ::OpenAPI::fromJsonValue(m_psi_control, json[QString("PsiControl")]);
    m_psi_control_isSet = !json[QString("PsiControl")].isNull() && m_psi_control_isValid;

    m_timecode_source_isValid = ::OpenAPI::fromJsonValue(m_timecode_source, json[QString("TimecodeSource")]);
    m_timecode_source_isSet = !json[QString("TimecodeSource")].isNull() && m_timecode_source_isValid;

    m_timecode_start_isValid = ::OpenAPI::fromJsonValue(m_timecode_start, json[QString("TimecodeStart")]);
    m_timecode_start_isSet = !json[QString("TimecodeStart")].isNull() && m_timecode_start_isValid;

    m_video_selector_isValid = ::OpenAPI::fromJsonValue(m_video_selector, json[QString("VideoSelector")]);
    m_video_selector_isSet = !json[QString("VideoSelector")].isNull() && m_video_selector_isValid;
}

QString OAIInputTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_input_filter.isSet()) {
        obj.insert(QString("AdvancedInputFilter"), ::OpenAPI::toJsonValue(m_advanced_input_filter));
    }
    if (m_advanced_input_filter_settings.isSet()) {
        obj.insert(QString("AdvancedInputFilterSettings"), ::OpenAPI::toJsonValue(m_advanced_input_filter_settings));
    }
    if (m_audio_selector_groups.isSet()) {
        obj.insert(QString("AudioSelectorGroups"), ::OpenAPI::toJsonValue(m_audio_selector_groups));
    }
    if (m_audio_selectors.isSet()) {
        obj.insert(QString("AudioSelectors"), ::OpenAPI::toJsonValue(m_audio_selectors));
    }
    if (m_caption_selectors.isSet()) {
        obj.insert(QString("CaptionSelectors"), ::OpenAPI::toJsonValue(m_caption_selectors));
    }
    if (m_crop.isSet()) {
        obj.insert(QString("Crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_deblock_filter.isSet()) {
        obj.insert(QString("DeblockFilter"), ::OpenAPI::toJsonValue(m_deblock_filter));
    }
    if (m_denoise_filter.isSet()) {
        obj.insert(QString("DenoiseFilter"), ::OpenAPI::toJsonValue(m_denoise_filter));
    }
    if (m_dolby_vision_metadata_xml_isSet) {
        obj.insert(QString("DolbyVisionMetadataXml"), ::OpenAPI::toJsonValue(m_dolby_vision_metadata_xml));
    }
    if (m_filter_enable.isSet()) {
        obj.insert(QString("FilterEnable"), ::OpenAPI::toJsonValue(m_filter_enable));
    }
    if (m_filter_strength_isSet) {
        obj.insert(QString("FilterStrength"), ::OpenAPI::toJsonValue(m_filter_strength));
    }
    if (m_image_inserter.isSet()) {
        obj.insert(QString("ImageInserter"), ::OpenAPI::toJsonValue(m_image_inserter));
    }
    if (m_input_clippings.isSet()) {
        obj.insert(QString("InputClippings"), ::OpenAPI::toJsonValue(m_input_clippings));
    }
    if (m_input_scan_type.isSet()) {
        obj.insert(QString("InputScanType"), ::OpenAPI::toJsonValue(m_input_scan_type));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_program_number_isSet) {
        obj.insert(QString("ProgramNumber"), ::OpenAPI::toJsonValue(m_program_number));
    }
    if (m_psi_control.isSet()) {
        obj.insert(QString("PsiControl"), ::OpenAPI::toJsonValue(m_psi_control));
    }
    if (m_timecode_source.isSet()) {
        obj.insert(QString("TimecodeSource"), ::OpenAPI::toJsonValue(m_timecode_source));
    }
    if (m_timecode_start_isSet) {
        obj.insert(QString("TimecodeStart"), ::OpenAPI::toJsonValue(m_timecode_start));
    }
    if (m_video_selector.isSet()) {
        obj.insert(QString("VideoSelector"), ::OpenAPI::toJsonValue(m_video_selector));
    }
    return obj;
}

OAIAdvancedInputFilter OAIInputTemplate::getAdvancedInputFilter() const {
    return m_advanced_input_filter;
}
void OAIInputTemplate::setAdvancedInputFilter(const OAIAdvancedInputFilter &advanced_input_filter) {
    m_advanced_input_filter = advanced_input_filter;
    m_advanced_input_filter_isSet = true;
}

bool OAIInputTemplate::is_advanced_input_filter_Set() const{
    return m_advanced_input_filter_isSet;
}

bool OAIInputTemplate::is_advanced_input_filter_Valid() const{
    return m_advanced_input_filter_isValid;
}

OAIInput_AdvancedInputFilterSettings OAIInputTemplate::getAdvancedInputFilterSettings() const {
    return m_advanced_input_filter_settings;
}
void OAIInputTemplate::setAdvancedInputFilterSettings(const OAIInput_AdvancedInputFilterSettings &advanced_input_filter_settings) {
    m_advanced_input_filter_settings = advanced_input_filter_settings;
    m_advanced_input_filter_settings_isSet = true;
}

bool OAIInputTemplate::is_advanced_input_filter_settings_Set() const{
    return m_advanced_input_filter_settings_isSet;
}

bool OAIInputTemplate::is_advanced_input_filter_settings_Valid() const{
    return m_advanced_input_filter_settings_isValid;
}

QMap OAIInputTemplate::getAudioSelectorGroups() const {
    return m_audio_selector_groups;
}
void OAIInputTemplate::setAudioSelectorGroups(const QMap &audio_selector_groups) {
    m_audio_selector_groups = audio_selector_groups;
    m_audio_selector_groups_isSet = true;
}

bool OAIInputTemplate::is_audio_selector_groups_Set() const{
    return m_audio_selector_groups_isSet;
}

bool OAIInputTemplate::is_audio_selector_groups_Valid() const{
    return m_audio_selector_groups_isValid;
}

QMap OAIInputTemplate::getAudioSelectors() const {
    return m_audio_selectors;
}
void OAIInputTemplate::setAudioSelectors(const QMap &audio_selectors) {
    m_audio_selectors = audio_selectors;
    m_audio_selectors_isSet = true;
}

bool OAIInputTemplate::is_audio_selectors_Set() const{
    return m_audio_selectors_isSet;
}

bool OAIInputTemplate::is_audio_selectors_Valid() const{
    return m_audio_selectors_isValid;
}

QMap OAIInputTemplate::getCaptionSelectors() const {
    return m_caption_selectors;
}
void OAIInputTemplate::setCaptionSelectors(const QMap &caption_selectors) {
    m_caption_selectors = caption_selectors;
    m_caption_selectors_isSet = true;
}

bool OAIInputTemplate::is_caption_selectors_Set() const{
    return m_caption_selectors_isSet;
}

bool OAIInputTemplate::is_caption_selectors_Valid() const{
    return m_caption_selectors_isValid;
}

OAIInput_Crop OAIInputTemplate::getCrop() const {
    return m_crop;
}
void OAIInputTemplate::setCrop(const OAIInput_Crop &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIInputTemplate::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIInputTemplate::is_crop_Valid() const{
    return m_crop_isValid;
}

OAIInputDeblockFilter OAIInputTemplate::getDeblockFilter() const {
    return m_deblock_filter;
}
void OAIInputTemplate::setDeblockFilter(const OAIInputDeblockFilter &deblock_filter) {
    m_deblock_filter = deblock_filter;
    m_deblock_filter_isSet = true;
}

bool OAIInputTemplate::is_deblock_filter_Set() const{
    return m_deblock_filter_isSet;
}

bool OAIInputTemplate::is_deblock_filter_Valid() const{
    return m_deblock_filter_isValid;
}

OAIInputDenoiseFilter OAIInputTemplate::getDenoiseFilter() const {
    return m_denoise_filter;
}
void OAIInputTemplate::setDenoiseFilter(const OAIInputDenoiseFilter &denoise_filter) {
    m_denoise_filter = denoise_filter;
    m_denoise_filter_isSet = true;
}

bool OAIInputTemplate::is_denoise_filter_Set() const{
    return m_denoise_filter_isSet;
}

bool OAIInputTemplate::is_denoise_filter_Valid() const{
    return m_denoise_filter_isValid;
}

QString OAIInputTemplate::getDolbyVisionMetadataXml() const {
    return m_dolby_vision_metadata_xml;
}
void OAIInputTemplate::setDolbyVisionMetadataXml(const QString &dolby_vision_metadata_xml) {
    m_dolby_vision_metadata_xml = dolby_vision_metadata_xml;
    m_dolby_vision_metadata_xml_isSet = true;
}

bool OAIInputTemplate::is_dolby_vision_metadata_xml_Set() const{
    return m_dolby_vision_metadata_xml_isSet;
}

bool OAIInputTemplate::is_dolby_vision_metadata_xml_Valid() const{
    return m_dolby_vision_metadata_xml_isValid;
}

OAIInputFilterEnable OAIInputTemplate::getFilterEnable() const {
    return m_filter_enable;
}
void OAIInputTemplate::setFilterEnable(const OAIInputFilterEnable &filter_enable) {
    m_filter_enable = filter_enable;
    m_filter_enable_isSet = true;
}

bool OAIInputTemplate::is_filter_enable_Set() const{
    return m_filter_enable_isSet;
}

bool OAIInputTemplate::is_filter_enable_Valid() const{
    return m_filter_enable_isValid;
}

qint32 OAIInputTemplate::getFilterStrength() const {
    return m_filter_strength;
}
void OAIInputTemplate::setFilterStrength(const qint32 &filter_strength) {
    m_filter_strength = filter_strength;
    m_filter_strength_isSet = true;
}

bool OAIInputTemplate::is_filter_strength_Set() const{
    return m_filter_strength_isSet;
}

bool OAIInputTemplate::is_filter_strength_Valid() const{
    return m_filter_strength_isValid;
}

OAIInput_ImageInserter OAIInputTemplate::getImageInserter() const {
    return m_image_inserter;
}
void OAIInputTemplate::setImageInserter(const OAIInput_ImageInserter &image_inserter) {
    m_image_inserter = image_inserter;
    m_image_inserter_isSet = true;
}

bool OAIInputTemplate::is_image_inserter_Set() const{
    return m_image_inserter_isSet;
}

bool OAIInputTemplate::is_image_inserter_Valid() const{
    return m_image_inserter_isValid;
}

QList OAIInputTemplate::getInputClippings() const {
    return m_input_clippings;
}
void OAIInputTemplate::setInputClippings(const QList &input_clippings) {
    m_input_clippings = input_clippings;
    m_input_clippings_isSet = true;
}

bool OAIInputTemplate::is_input_clippings_Set() const{
    return m_input_clippings_isSet;
}

bool OAIInputTemplate::is_input_clippings_Valid() const{
    return m_input_clippings_isValid;
}

OAIInputScanType OAIInputTemplate::getInputScanType() const {
    return m_input_scan_type;
}
void OAIInputTemplate::setInputScanType(const OAIInputScanType &input_scan_type) {
    m_input_scan_type = input_scan_type;
    m_input_scan_type_isSet = true;
}

bool OAIInputTemplate::is_input_scan_type_Set() const{
    return m_input_scan_type_isSet;
}

bool OAIInputTemplate::is_input_scan_type_Valid() const{
    return m_input_scan_type_isValid;
}

OAIInput_Position OAIInputTemplate::getPosition() const {
    return m_position;
}
void OAIInputTemplate::setPosition(const OAIInput_Position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIInputTemplate::is_position_Set() const{
    return m_position_isSet;
}

bool OAIInputTemplate::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIInputTemplate::getProgramNumber() const {
    return m_program_number;
}
void OAIInputTemplate::setProgramNumber(const qint32 &program_number) {
    m_program_number = program_number;
    m_program_number_isSet = true;
}

bool OAIInputTemplate::is_program_number_Set() const{
    return m_program_number_isSet;
}

bool OAIInputTemplate::is_program_number_Valid() const{
    return m_program_number_isValid;
}

OAIInputPsiControl OAIInputTemplate::getPsiControl() const {
    return m_psi_control;
}
void OAIInputTemplate::setPsiControl(const OAIInputPsiControl &psi_control) {
    m_psi_control = psi_control;
    m_psi_control_isSet = true;
}

bool OAIInputTemplate::is_psi_control_Set() const{
    return m_psi_control_isSet;
}

bool OAIInputTemplate::is_psi_control_Valid() const{
    return m_psi_control_isValid;
}

OAIInputTimecodeSource OAIInputTemplate::getTimecodeSource() const {
    return m_timecode_source;
}
void OAIInputTemplate::setTimecodeSource(const OAIInputTimecodeSource &timecode_source) {
    m_timecode_source = timecode_source;
    m_timecode_source_isSet = true;
}

bool OAIInputTemplate::is_timecode_source_Set() const{
    return m_timecode_source_isSet;
}

bool OAIInputTemplate::is_timecode_source_Valid() const{
    return m_timecode_source_isValid;
}

QString OAIInputTemplate::getTimecodeStart() const {
    return m_timecode_start;
}
void OAIInputTemplate::setTimecodeStart(const QString &timecode_start) {
    m_timecode_start = timecode_start;
    m_timecode_start_isSet = true;
}

bool OAIInputTemplate::is_timecode_start_Set() const{
    return m_timecode_start_isSet;
}

bool OAIInputTemplate::is_timecode_start_Valid() const{
    return m_timecode_start_isValid;
}

OAIInput_VideoSelector OAIInputTemplate::getVideoSelector() const {
    return m_video_selector;
}
void OAIInputTemplate::setVideoSelector(const OAIInput_VideoSelector &video_selector) {
    m_video_selector = video_selector;
    m_video_selector_isSet = true;
}

bool OAIInputTemplate::is_video_selector_Set() const{
    return m_video_selector_isSet;
}

bool OAIInputTemplate::is_video_selector_Valid() const{
    return m_video_selector_isValid;
}

bool OAIInputTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_input_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_input_filter_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_selector_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deblock_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_denoise_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dolby_vision_metadata_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_enable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_inserter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_clippings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_scan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psi_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
