/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoCodecSettings_Vp9Settings.h
 *
 * 
 */

#ifndef OAIVideoCodecSettings_Vp9Settings_H
#define OAIVideoCodecSettings_Vp9Settings_H

#include <QJsonObject>

#include "OAIVp9FramerateControl.h"
#include "OAIVp9FramerateConversionAlgorithm.h"
#include "OAIVp9ParControl.h"
#include "OAIVp9QualityTuningLevel.h"
#include "OAIVp9RateControlMode.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVideoCodecSettings_Vp9Settings : public OAIObject {
public:
    OAIVideoCodecSettings_Vp9Settings();
    OAIVideoCodecSettings_Vp9Settings(QString json);
    ~OAIVideoCodecSettings_Vp9Settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBitrate() const;
    void setBitrate(const qint32 &bitrate);
    bool is_bitrate_Set() const;
    bool is_bitrate_Valid() const;

    OAIVp9FramerateControl getFramerateControl() const;
    void setFramerateControl(const OAIVp9FramerateControl &framerate_control);
    bool is_framerate_control_Set() const;
    bool is_framerate_control_Valid() const;

    OAIVp9FramerateConversionAlgorithm getFramerateConversionAlgorithm() const;
    void setFramerateConversionAlgorithm(const OAIVp9FramerateConversionAlgorithm &framerate_conversion_algorithm);
    bool is_framerate_conversion_algorithm_Set() const;
    bool is_framerate_conversion_algorithm_Valid() const;

    qint32 getFramerateDenominator() const;
    void setFramerateDenominator(const qint32 &framerate_denominator);
    bool is_framerate_denominator_Set() const;
    bool is_framerate_denominator_Valid() const;

    qint32 getFramerateNumerator() const;
    void setFramerateNumerator(const qint32 &framerate_numerator);
    bool is_framerate_numerator_Set() const;
    bool is_framerate_numerator_Valid() const;

    double getGopSize() const;
    void setGopSize(const double &gop_size);
    bool is_gop_size_Set() const;
    bool is_gop_size_Valid() const;

    qint32 getHrdBufferSize() const;
    void setHrdBufferSize(const qint32 &hrd_buffer_size);
    bool is_hrd_buffer_size_Set() const;
    bool is_hrd_buffer_size_Valid() const;

    qint32 getMaxBitrate() const;
    void setMaxBitrate(const qint32 &max_bitrate);
    bool is_max_bitrate_Set() const;
    bool is_max_bitrate_Valid() const;

    OAIVp9ParControl getParControl() const;
    void setParControl(const OAIVp9ParControl &par_control);
    bool is_par_control_Set() const;
    bool is_par_control_Valid() const;

    qint32 getParDenominator() const;
    void setParDenominator(const qint32 &par_denominator);
    bool is_par_denominator_Set() const;
    bool is_par_denominator_Valid() const;

    qint32 getParNumerator() const;
    void setParNumerator(const qint32 &par_numerator);
    bool is_par_numerator_Set() const;
    bool is_par_numerator_Valid() const;

    OAIVp9QualityTuningLevel getQualityTuningLevel() const;
    void setQualityTuningLevel(const OAIVp9QualityTuningLevel &quality_tuning_level);
    bool is_quality_tuning_level_Set() const;
    bool is_quality_tuning_level_Valid() const;

    OAIVp9RateControlMode getRateControlMode() const;
    void setRateControlMode(const OAIVp9RateControlMode &rate_control_mode);
    bool is_rate_control_mode_Set() const;
    bool is_rate_control_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bitrate;
    bool m_bitrate_isSet;
    bool m_bitrate_isValid;

    OAIVp9FramerateControl m_framerate_control;
    bool m_framerate_control_isSet;
    bool m_framerate_control_isValid;

    OAIVp9FramerateConversionAlgorithm m_framerate_conversion_algorithm;
    bool m_framerate_conversion_algorithm_isSet;
    bool m_framerate_conversion_algorithm_isValid;

    qint32 m_framerate_denominator;
    bool m_framerate_denominator_isSet;
    bool m_framerate_denominator_isValid;

    qint32 m_framerate_numerator;
    bool m_framerate_numerator_isSet;
    bool m_framerate_numerator_isValid;

    double m_gop_size;
    bool m_gop_size_isSet;
    bool m_gop_size_isValid;

    qint32 m_hrd_buffer_size;
    bool m_hrd_buffer_size_isSet;
    bool m_hrd_buffer_size_isValid;

    qint32 m_max_bitrate;
    bool m_max_bitrate_isSet;
    bool m_max_bitrate_isValid;

    OAIVp9ParControl m_par_control;
    bool m_par_control_isSet;
    bool m_par_control_isValid;

    qint32 m_par_denominator;
    bool m_par_denominator_isSet;
    bool m_par_denominator_isValid;

    qint32 m_par_numerator;
    bool m_par_numerator_isSet;
    bool m_par_numerator_isValid;

    OAIVp9QualityTuningLevel m_quality_tuning_level;
    bool m_quality_tuning_level_isSet;
    bool m_quality_tuning_level_isValid;

    OAIVp9RateControlMode m_rate_control_mode;
    bool m_rate_control_mode_isSet;
    bool m_rate_control_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoCodecSettings_Vp9Settings)

#endif // OAIVideoCodecSettings_Vp9Settings_H
