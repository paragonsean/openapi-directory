/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIH264CodecLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIH264CodecLevel::OAIH264CodecLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIH264CodecLevel::OAIH264CodecLevel() {
    this->initializeModel();
}

OAIH264CodecLevel::~OAIH264CodecLevel() {}

void OAIH264CodecLevel::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIH264CodecLevel::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIH264CodecLevel::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AUTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_1_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_1_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_1_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_1_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_1_3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_1_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_2_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_2_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_2_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_2_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_3_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_3_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_3_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_3_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_4_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_4_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_4_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_4_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_5", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_5_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_5_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEVEL_5_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264CodecLevel::LEVEL_5_2;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIH264CodecLevel::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIH264CodecLevel::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIH264CodecLevel::AUTO:
            val = "AUTO";
            break;
        case eOAIH264CodecLevel::LEVEL_1:
            val = "LEVEL_1";
            break;
        case eOAIH264CodecLevel::LEVEL_1_1:
            val = "LEVEL_1_1";
            break;
        case eOAIH264CodecLevel::LEVEL_1_2:
            val = "LEVEL_1_2";
            break;
        case eOAIH264CodecLevel::LEVEL_1_3:
            val = "LEVEL_1_3";
            break;
        case eOAIH264CodecLevel::LEVEL_2:
            val = "LEVEL_2";
            break;
        case eOAIH264CodecLevel::LEVEL_2_1:
            val = "LEVEL_2_1";
            break;
        case eOAIH264CodecLevel::LEVEL_2_2:
            val = "LEVEL_2_2";
            break;
        case eOAIH264CodecLevel::LEVEL_3:
            val = "LEVEL_3";
            break;
        case eOAIH264CodecLevel::LEVEL_3_1:
            val = "LEVEL_3_1";
            break;
        case eOAIH264CodecLevel::LEVEL_3_2:
            val = "LEVEL_3_2";
            break;
        case eOAIH264CodecLevel::LEVEL_4:
            val = "LEVEL_4";
            break;
        case eOAIH264CodecLevel::LEVEL_4_1:
            val = "LEVEL_4_1";
            break;
        case eOAIH264CodecLevel::LEVEL_4_2:
            val = "LEVEL_4_2";
            break;
        case eOAIH264CodecLevel::LEVEL_5:
            val = "LEVEL_5";
            break;
        case eOAIH264CodecLevel::LEVEL_5_1:
            val = "LEVEL_5_1";
            break;
        case eOAIH264CodecLevel::LEVEL_5_2:
            val = "LEVEL_5_2";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIH264CodecLevel::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIH264CodecLevel::eOAIH264CodecLevel OAIH264CodecLevel::getValue() const {
    return m_value;
}

void OAIH264CodecLevel::setValue(const OAIH264CodecLevel::eOAIH264CodecLevel& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIH264CodecLevel::isSet() const {
    
    return m_value_isSet;
}

bool OAIH264CodecLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
