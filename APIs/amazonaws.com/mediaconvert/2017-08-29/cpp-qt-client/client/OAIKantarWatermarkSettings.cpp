/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKantarWatermarkSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKantarWatermarkSettings::OAIKantarWatermarkSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKantarWatermarkSettings::OAIKantarWatermarkSettings() {
    this->initializeModel();
}

OAIKantarWatermarkSettings::~OAIKantarWatermarkSettings() {}

void OAIKantarWatermarkSettings::initializeModel() {

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_content_reference_isSet = false;
    m_content_reference_isValid = false;

    m_credentials_secret_name_isSet = false;
    m_credentials_secret_name_isValid = false;

    m_file_offset_isSet = false;
    m_file_offset_isValid = false;

    m_kantar_license_id_isSet = false;
    m_kantar_license_id_isValid = false;

    m_kantar_server_url_isSet = false;
    m_kantar_server_url_isValid = false;

    m_log_destination_isSet = false;
    m_log_destination_isValid = false;

    m_metadata3_isSet = false;
    m_metadata3_isValid = false;

    m_metadata4_isSet = false;
    m_metadata4_isValid = false;

    m_metadata5_isSet = false;
    m_metadata5_isValid = false;

    m_metadata6_isSet = false;
    m_metadata6_isValid = false;

    m_metadata7_isSet = false;
    m_metadata7_isValid = false;

    m_metadata8_isSet = false;
    m_metadata8_isValid = false;
}

void OAIKantarWatermarkSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKantarWatermarkSettings::fromJsonObject(QJsonObject json) {

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_content_reference_isValid = ::OpenAPI::fromJsonValue(m_content_reference, json[QString("ContentReference")]);
    m_content_reference_isSet = !json[QString("ContentReference")].isNull() && m_content_reference_isValid;

    m_credentials_secret_name_isValid = ::OpenAPI::fromJsonValue(m_credentials_secret_name, json[QString("CredentialsSecretName")]);
    m_credentials_secret_name_isSet = !json[QString("CredentialsSecretName")].isNull() && m_credentials_secret_name_isValid;

    m_file_offset_isValid = ::OpenAPI::fromJsonValue(m_file_offset, json[QString("FileOffset")]);
    m_file_offset_isSet = !json[QString("FileOffset")].isNull() && m_file_offset_isValid;

    m_kantar_license_id_isValid = ::OpenAPI::fromJsonValue(m_kantar_license_id, json[QString("KantarLicenseId")]);
    m_kantar_license_id_isSet = !json[QString("KantarLicenseId")].isNull() && m_kantar_license_id_isValid;

    m_kantar_server_url_isValid = ::OpenAPI::fromJsonValue(m_kantar_server_url, json[QString("KantarServerUrl")]);
    m_kantar_server_url_isSet = !json[QString("KantarServerUrl")].isNull() && m_kantar_server_url_isValid;

    m_log_destination_isValid = ::OpenAPI::fromJsonValue(m_log_destination, json[QString("LogDestination")]);
    m_log_destination_isSet = !json[QString("LogDestination")].isNull() && m_log_destination_isValid;

    m_metadata3_isValid = ::OpenAPI::fromJsonValue(m_metadata3, json[QString("Metadata3")]);
    m_metadata3_isSet = !json[QString("Metadata3")].isNull() && m_metadata3_isValid;

    m_metadata4_isValid = ::OpenAPI::fromJsonValue(m_metadata4, json[QString("Metadata4")]);
    m_metadata4_isSet = !json[QString("Metadata4")].isNull() && m_metadata4_isValid;

    m_metadata5_isValid = ::OpenAPI::fromJsonValue(m_metadata5, json[QString("Metadata5")]);
    m_metadata5_isSet = !json[QString("Metadata5")].isNull() && m_metadata5_isValid;

    m_metadata6_isValid = ::OpenAPI::fromJsonValue(m_metadata6, json[QString("Metadata6")]);
    m_metadata6_isSet = !json[QString("Metadata6")].isNull() && m_metadata6_isValid;

    m_metadata7_isValid = ::OpenAPI::fromJsonValue(m_metadata7, json[QString("Metadata7")]);
    m_metadata7_isSet = !json[QString("Metadata7")].isNull() && m_metadata7_isValid;

    m_metadata8_isValid = ::OpenAPI::fromJsonValue(m_metadata8, json[QString("Metadata8")]);
    m_metadata8_isSet = !json[QString("Metadata8")].isNull() && m_metadata8_isValid;
}

QString OAIKantarWatermarkSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKantarWatermarkSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_content_reference_isSet) {
        obj.insert(QString("ContentReference"), ::OpenAPI::toJsonValue(m_content_reference));
    }
    if (m_credentials_secret_name_isSet) {
        obj.insert(QString("CredentialsSecretName"), ::OpenAPI::toJsonValue(m_credentials_secret_name));
    }
    if (m_file_offset_isSet) {
        obj.insert(QString("FileOffset"), ::OpenAPI::toJsonValue(m_file_offset));
    }
    if (m_kantar_license_id_isSet) {
        obj.insert(QString("KantarLicenseId"), ::OpenAPI::toJsonValue(m_kantar_license_id));
    }
    if (m_kantar_server_url_isSet) {
        obj.insert(QString("KantarServerUrl"), ::OpenAPI::toJsonValue(m_kantar_server_url));
    }
    if (m_log_destination_isSet) {
        obj.insert(QString("LogDestination"), ::OpenAPI::toJsonValue(m_log_destination));
    }
    if (m_metadata3_isSet) {
        obj.insert(QString("Metadata3"), ::OpenAPI::toJsonValue(m_metadata3));
    }
    if (m_metadata4_isSet) {
        obj.insert(QString("Metadata4"), ::OpenAPI::toJsonValue(m_metadata4));
    }
    if (m_metadata5_isSet) {
        obj.insert(QString("Metadata5"), ::OpenAPI::toJsonValue(m_metadata5));
    }
    if (m_metadata6_isSet) {
        obj.insert(QString("Metadata6"), ::OpenAPI::toJsonValue(m_metadata6));
    }
    if (m_metadata7_isSet) {
        obj.insert(QString("Metadata7"), ::OpenAPI::toJsonValue(m_metadata7));
    }
    if (m_metadata8_isSet) {
        obj.insert(QString("Metadata8"), ::OpenAPI::toJsonValue(m_metadata8));
    }
    return obj;
}

QString OAIKantarWatermarkSettings::getChannelName() const {
    return m_channel_name;
}
void OAIKantarWatermarkSettings::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIKantarWatermarkSettings::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIKantarWatermarkSettings::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAIKantarWatermarkSettings::getContentReference() const {
    return m_content_reference;
}
void OAIKantarWatermarkSettings::setContentReference(const QString &content_reference) {
    m_content_reference = content_reference;
    m_content_reference_isSet = true;
}

bool OAIKantarWatermarkSettings::is_content_reference_Set() const{
    return m_content_reference_isSet;
}

bool OAIKantarWatermarkSettings::is_content_reference_Valid() const{
    return m_content_reference_isValid;
}

QString OAIKantarWatermarkSettings::getCredentialsSecretName() const {
    return m_credentials_secret_name;
}
void OAIKantarWatermarkSettings::setCredentialsSecretName(const QString &credentials_secret_name) {
    m_credentials_secret_name = credentials_secret_name;
    m_credentials_secret_name_isSet = true;
}

bool OAIKantarWatermarkSettings::is_credentials_secret_name_Set() const{
    return m_credentials_secret_name_isSet;
}

bool OAIKantarWatermarkSettings::is_credentials_secret_name_Valid() const{
    return m_credentials_secret_name_isValid;
}

double OAIKantarWatermarkSettings::getFileOffset() const {
    return m_file_offset;
}
void OAIKantarWatermarkSettings::setFileOffset(const double &file_offset) {
    m_file_offset = file_offset;
    m_file_offset_isSet = true;
}

bool OAIKantarWatermarkSettings::is_file_offset_Set() const{
    return m_file_offset_isSet;
}

bool OAIKantarWatermarkSettings::is_file_offset_Valid() const{
    return m_file_offset_isValid;
}

qint32 OAIKantarWatermarkSettings::getKantarLicenseId() const {
    return m_kantar_license_id;
}
void OAIKantarWatermarkSettings::setKantarLicenseId(const qint32 &kantar_license_id) {
    m_kantar_license_id = kantar_license_id;
    m_kantar_license_id_isSet = true;
}

bool OAIKantarWatermarkSettings::is_kantar_license_id_Set() const{
    return m_kantar_license_id_isSet;
}

bool OAIKantarWatermarkSettings::is_kantar_license_id_Valid() const{
    return m_kantar_license_id_isValid;
}

QString OAIKantarWatermarkSettings::getKantarServerUrl() const {
    return m_kantar_server_url;
}
void OAIKantarWatermarkSettings::setKantarServerUrl(const QString &kantar_server_url) {
    m_kantar_server_url = kantar_server_url;
    m_kantar_server_url_isSet = true;
}

bool OAIKantarWatermarkSettings::is_kantar_server_url_Set() const{
    return m_kantar_server_url_isSet;
}

bool OAIKantarWatermarkSettings::is_kantar_server_url_Valid() const{
    return m_kantar_server_url_isValid;
}

QString OAIKantarWatermarkSettings::getLogDestination() const {
    return m_log_destination;
}
void OAIKantarWatermarkSettings::setLogDestination(const QString &log_destination) {
    m_log_destination = log_destination;
    m_log_destination_isSet = true;
}

bool OAIKantarWatermarkSettings::is_log_destination_Set() const{
    return m_log_destination_isSet;
}

bool OAIKantarWatermarkSettings::is_log_destination_Valid() const{
    return m_log_destination_isValid;
}

QString OAIKantarWatermarkSettings::getMetadata3() const {
    return m_metadata3;
}
void OAIKantarWatermarkSettings::setMetadata3(const QString &metadata3) {
    m_metadata3 = metadata3;
    m_metadata3_isSet = true;
}

bool OAIKantarWatermarkSettings::is_metadata3_Set() const{
    return m_metadata3_isSet;
}

bool OAIKantarWatermarkSettings::is_metadata3_Valid() const{
    return m_metadata3_isValid;
}

QString OAIKantarWatermarkSettings::getMetadata4() const {
    return m_metadata4;
}
void OAIKantarWatermarkSettings::setMetadata4(const QString &metadata4) {
    m_metadata4 = metadata4;
    m_metadata4_isSet = true;
}

bool OAIKantarWatermarkSettings::is_metadata4_Set() const{
    return m_metadata4_isSet;
}

bool OAIKantarWatermarkSettings::is_metadata4_Valid() const{
    return m_metadata4_isValid;
}

QString OAIKantarWatermarkSettings::getMetadata5() const {
    return m_metadata5;
}
void OAIKantarWatermarkSettings::setMetadata5(const QString &metadata5) {
    m_metadata5 = metadata5;
    m_metadata5_isSet = true;
}

bool OAIKantarWatermarkSettings::is_metadata5_Set() const{
    return m_metadata5_isSet;
}

bool OAIKantarWatermarkSettings::is_metadata5_Valid() const{
    return m_metadata5_isValid;
}

QString OAIKantarWatermarkSettings::getMetadata6() const {
    return m_metadata6;
}
void OAIKantarWatermarkSettings::setMetadata6(const QString &metadata6) {
    m_metadata6 = metadata6;
    m_metadata6_isSet = true;
}

bool OAIKantarWatermarkSettings::is_metadata6_Set() const{
    return m_metadata6_isSet;
}

bool OAIKantarWatermarkSettings::is_metadata6_Valid() const{
    return m_metadata6_isValid;
}

QString OAIKantarWatermarkSettings::getMetadata7() const {
    return m_metadata7;
}
void OAIKantarWatermarkSettings::setMetadata7(const QString &metadata7) {
    m_metadata7 = metadata7;
    m_metadata7_isSet = true;
}

bool OAIKantarWatermarkSettings::is_metadata7_Set() const{
    return m_metadata7_isSet;
}

bool OAIKantarWatermarkSettings::is_metadata7_Valid() const{
    return m_metadata7_isValid;
}

QString OAIKantarWatermarkSettings::getMetadata8() const {
    return m_metadata8;
}
void OAIKantarWatermarkSettings::setMetadata8(const QString &metadata8) {
    m_metadata8 = metadata8;
    m_metadata8_isSet = true;
}

bool OAIKantarWatermarkSettings::is_metadata8_Set() const{
    return m_metadata8_isSet;
}

bool OAIKantarWatermarkSettings::is_metadata8_Valid() const{
    return m_metadata8_isValid;
}

bool OAIKantarWatermarkSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kantar_license_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kantar_server_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata8_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKantarWatermarkSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
