/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerSettings_Mp4Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerSettings_Mp4Settings::OAIContainerSettings_Mp4Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerSettings_Mp4Settings::OAIContainerSettings_Mp4Settings() {
    this->initializeModel();
}

OAIContainerSettings_Mp4Settings::~OAIContainerSettings_Mp4Settings() {}

void OAIContainerSettings_Mp4Settings::initializeModel() {

    m_audio_duration_isSet = false;
    m_audio_duration_isValid = false;

    m_cslg_atom_isSet = false;
    m_cslg_atom_isValid = false;

    m_ctts_version_isSet = false;
    m_ctts_version_isValid = false;

    m_free_space_box_isSet = false;
    m_free_space_box_isValid = false;

    m_moov_placement_isSet = false;
    m_moov_placement_isValid = false;

    m_mp4_major_brand_isSet = false;
    m_mp4_major_brand_isValid = false;
}

void OAIContainerSettings_Mp4Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerSettings_Mp4Settings::fromJsonObject(QJsonObject json) {

    m_audio_duration_isValid = ::OpenAPI::fromJsonValue(m_audio_duration, json[QString("AudioDuration")]);
    m_audio_duration_isSet = !json[QString("AudioDuration")].isNull() && m_audio_duration_isValid;

    m_cslg_atom_isValid = ::OpenAPI::fromJsonValue(m_cslg_atom, json[QString("CslgAtom")]);
    m_cslg_atom_isSet = !json[QString("CslgAtom")].isNull() && m_cslg_atom_isValid;

    m_ctts_version_isValid = ::OpenAPI::fromJsonValue(m_ctts_version, json[QString("CttsVersion")]);
    m_ctts_version_isSet = !json[QString("CttsVersion")].isNull() && m_ctts_version_isValid;

    m_free_space_box_isValid = ::OpenAPI::fromJsonValue(m_free_space_box, json[QString("FreeSpaceBox")]);
    m_free_space_box_isSet = !json[QString("FreeSpaceBox")].isNull() && m_free_space_box_isValid;

    m_moov_placement_isValid = ::OpenAPI::fromJsonValue(m_moov_placement, json[QString("MoovPlacement")]);
    m_moov_placement_isSet = !json[QString("MoovPlacement")].isNull() && m_moov_placement_isValid;

    m_mp4_major_brand_isValid = ::OpenAPI::fromJsonValue(m_mp4_major_brand, json[QString("Mp4MajorBrand")]);
    m_mp4_major_brand_isSet = !json[QString("Mp4MajorBrand")].isNull() && m_mp4_major_brand_isValid;
}

QString OAIContainerSettings_Mp4Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerSettings_Mp4Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_duration.isSet()) {
        obj.insert(QString("AudioDuration"), ::OpenAPI::toJsonValue(m_audio_duration));
    }
    if (m_cslg_atom.isSet()) {
        obj.insert(QString("CslgAtom"), ::OpenAPI::toJsonValue(m_cslg_atom));
    }
    if (m_ctts_version_isSet) {
        obj.insert(QString("CttsVersion"), ::OpenAPI::toJsonValue(m_ctts_version));
    }
    if (m_free_space_box.isSet()) {
        obj.insert(QString("FreeSpaceBox"), ::OpenAPI::toJsonValue(m_free_space_box));
    }
    if (m_moov_placement.isSet()) {
        obj.insert(QString("MoovPlacement"), ::OpenAPI::toJsonValue(m_moov_placement));
    }
    if (m_mp4_major_brand_isSet) {
        obj.insert(QString("Mp4MajorBrand"), ::OpenAPI::toJsonValue(m_mp4_major_brand));
    }
    return obj;
}

OAICmfcAudioDuration OAIContainerSettings_Mp4Settings::getAudioDuration() const {
    return m_audio_duration;
}
void OAIContainerSettings_Mp4Settings::setAudioDuration(const OAICmfcAudioDuration &audio_duration) {
    m_audio_duration = audio_duration;
    m_audio_duration_isSet = true;
}

bool OAIContainerSettings_Mp4Settings::is_audio_duration_Set() const{
    return m_audio_duration_isSet;
}

bool OAIContainerSettings_Mp4Settings::is_audio_duration_Valid() const{
    return m_audio_duration_isValid;
}

OAIMp4CslgAtom OAIContainerSettings_Mp4Settings::getCslgAtom() const {
    return m_cslg_atom;
}
void OAIContainerSettings_Mp4Settings::setCslgAtom(const OAIMp4CslgAtom &cslg_atom) {
    m_cslg_atom = cslg_atom;
    m_cslg_atom_isSet = true;
}

bool OAIContainerSettings_Mp4Settings::is_cslg_atom_Set() const{
    return m_cslg_atom_isSet;
}

bool OAIContainerSettings_Mp4Settings::is_cslg_atom_Valid() const{
    return m_cslg_atom_isValid;
}

qint32 OAIContainerSettings_Mp4Settings::getCttsVersion() const {
    return m_ctts_version;
}
void OAIContainerSettings_Mp4Settings::setCttsVersion(const qint32 &ctts_version) {
    m_ctts_version = ctts_version;
    m_ctts_version_isSet = true;
}

bool OAIContainerSettings_Mp4Settings::is_ctts_version_Set() const{
    return m_ctts_version_isSet;
}

bool OAIContainerSettings_Mp4Settings::is_ctts_version_Valid() const{
    return m_ctts_version_isValid;
}

OAIMp4FreeSpaceBox OAIContainerSettings_Mp4Settings::getFreeSpaceBox() const {
    return m_free_space_box;
}
void OAIContainerSettings_Mp4Settings::setFreeSpaceBox(const OAIMp4FreeSpaceBox &free_space_box) {
    m_free_space_box = free_space_box;
    m_free_space_box_isSet = true;
}

bool OAIContainerSettings_Mp4Settings::is_free_space_box_Set() const{
    return m_free_space_box_isSet;
}

bool OAIContainerSettings_Mp4Settings::is_free_space_box_Valid() const{
    return m_free_space_box_isValid;
}

OAIMp4MoovPlacement OAIContainerSettings_Mp4Settings::getMoovPlacement() const {
    return m_moov_placement;
}
void OAIContainerSettings_Mp4Settings::setMoovPlacement(const OAIMp4MoovPlacement &moov_placement) {
    m_moov_placement = moov_placement;
    m_moov_placement_isSet = true;
}

bool OAIContainerSettings_Mp4Settings::is_moov_placement_Set() const{
    return m_moov_placement_isSet;
}

bool OAIContainerSettings_Mp4Settings::is_moov_placement_Valid() const{
    return m_moov_placement_isValid;
}

QString OAIContainerSettings_Mp4Settings::getMp4MajorBrand() const {
    return m_mp4_major_brand;
}
void OAIContainerSettings_Mp4Settings::setMp4MajorBrand(const QString &mp4_major_brand) {
    m_mp4_major_brand = mp4_major_brand;
    m_mp4_major_brand_isSet = true;
}

bool OAIContainerSettings_Mp4Settings::is_mp4_major_brand_Set() const{
    return m_mp4_major_brand_isSet;
}

bool OAIContainerSettings_Mp4Settings::is_mp4_major_brand_Valid() const{
    return m_mp4_major_brand_isValid;
}

bool OAIContainerSettings_Mp4Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cslg_atom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ctts_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_space_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_moov_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_major_brand_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerSettings_Mp4Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
