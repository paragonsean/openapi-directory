/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoDescription_Position.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoDescription_Position::OAIVideoDescription_Position(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoDescription_Position::OAIVideoDescription_Position() {
    this->initializeModel();
}

OAIVideoDescription_Position::~OAIVideoDescription_Position() {}

void OAIVideoDescription_Position::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIVideoDescription_Position::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoDescription_Position::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("X")]);
    m_x_isSet = !json[QString("X")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("Y")]);
    m_y_isSet = !json[QString("Y")].isNull() && m_y_isValid;
}

QString OAIVideoDescription_Position::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoDescription_Position::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_x_isSet) {
        obj.insert(QString("X"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("Y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

qint32 OAIVideoDescription_Position::getHeight() const {
    return m_height;
}
void OAIVideoDescription_Position::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIVideoDescription_Position::is_height_Set() const{
    return m_height_isSet;
}

bool OAIVideoDescription_Position::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIVideoDescription_Position::getWidth() const {
    return m_width;
}
void OAIVideoDescription_Position::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIVideoDescription_Position::is_width_Set() const{
    return m_width_isSet;
}

bool OAIVideoDescription_Position::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAIVideoDescription_Position::getX() const {
    return m_x;
}
void OAIVideoDescription_Position::setX(const qint32 &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIVideoDescription_Position::is_x_Set() const{
    return m_x_isSet;
}

bool OAIVideoDescription_Position::is_x_Valid() const{
    return m_x_isValid;
}

qint32 OAIVideoDescription_Position::getY() const {
    return m_y;
}
void OAIVideoDescription_Position::setY(const qint32 &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIVideoDescription_Position::is_y_Set() const{
    return m_y_isSet;
}

bool OAIVideoDescription_Position::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIVideoDescription_Position::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoDescription_Position::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
