/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJob_request::OAICreateJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJob_request::OAICreateJob_request() {
    this->initializeModel();
}

OAICreateJob_request::~OAICreateJob_request() {}

void OAICreateJob_request::initializeModel() {

    m_acceleration_settings_isSet = false;
    m_acceleration_settings_isValid = false;

    m_billing_tags_source_isSet = false;
    m_billing_tags_source_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_hop_destinations_isSet = false;
    m_hop_destinations_isValid = false;

    m_job_template_isSet = false;
    m_job_template_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_simulate_reserved_queue_isSet = false;
    m_simulate_reserved_queue_isValid = false;

    m_status_update_interval_isSet = false;
    m_status_update_interval_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_user_metadata_isSet = false;
    m_user_metadata_isValid = false;
}

void OAICreateJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJob_request::fromJsonObject(QJsonObject json) {

    m_acceleration_settings_isValid = ::OpenAPI::fromJsonValue(m_acceleration_settings, json[QString("accelerationSettings")]);
    m_acceleration_settings_isSet = !json[QString("accelerationSettings")].isNull() && m_acceleration_settings_isValid;

    m_billing_tags_source_isValid = ::OpenAPI::fromJsonValue(m_billing_tags_source, json[QString("billingTagsSource")]);
    m_billing_tags_source_isSet = !json[QString("billingTagsSource")].isNull() && m_billing_tags_source_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_hop_destinations_isValid = ::OpenAPI::fromJsonValue(m_hop_destinations, json[QString("hopDestinations")]);
    m_hop_destinations_isSet = !json[QString("hopDestinations")].isNull() && m_hop_destinations_isValid;

    m_job_template_isValid = ::OpenAPI::fromJsonValue(m_job_template, json[QString("jobTemplate")]);
    m_job_template_isSet = !json[QString("jobTemplate")].isNull() && m_job_template_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_simulate_reserved_queue_isValid = ::OpenAPI::fromJsonValue(m_simulate_reserved_queue, json[QString("simulateReservedQueue")]);
    m_simulate_reserved_queue_isSet = !json[QString("simulateReservedQueue")].isNull() && m_simulate_reserved_queue_isValid;

    m_status_update_interval_isValid = ::OpenAPI::fromJsonValue(m_status_update_interval, json[QString("statusUpdateInterval")]);
    m_status_update_interval_isSet = !json[QString("statusUpdateInterval")].isNull() && m_status_update_interval_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_user_metadata_isValid = ::OpenAPI::fromJsonValue(m_user_metadata, json[QString("userMetadata")]);
    m_user_metadata_isSet = !json[QString("userMetadata")].isNull() && m_user_metadata_isValid;
}

QString OAICreateJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_acceleration_settings.isSet()) {
        obj.insert(QString("accelerationSettings"), ::OpenAPI::toJsonValue(m_acceleration_settings));
    }
    if (m_billing_tags_source_isSet) {
        obj.insert(QString("billingTagsSource"), ::OpenAPI::toJsonValue(m_billing_tags_source));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_hop_destinations.size() > 0) {
        obj.insert(QString("hopDestinations"), ::OpenAPI::toJsonValue(m_hop_destinations));
    }
    if (m_job_template_isSet) {
        obj.insert(QString("jobTemplate"), ::OpenAPI::toJsonValue(m_job_template));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_queue_isSet) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_simulate_reserved_queue_isSet) {
        obj.insert(QString("simulateReservedQueue"), ::OpenAPI::toJsonValue(m_simulate_reserved_queue));
    }
    if (m_status_update_interval_isSet) {
        obj.insert(QString("statusUpdateInterval"), ::OpenAPI::toJsonValue(m_status_update_interval));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_user_metadata.size() > 0) {
        obj.insert(QString("userMetadata"), ::OpenAPI::toJsonValue(m_user_metadata));
    }
    return obj;
}

OAICreateJob_request_accelerationSettings OAICreateJob_request::getAccelerationSettings() const {
    return m_acceleration_settings;
}
void OAICreateJob_request::setAccelerationSettings(const OAICreateJob_request_accelerationSettings &acceleration_settings) {
    m_acceleration_settings = acceleration_settings;
    m_acceleration_settings_isSet = true;
}

bool OAICreateJob_request::is_acceleration_settings_Set() const{
    return m_acceleration_settings_isSet;
}

bool OAICreateJob_request::is_acceleration_settings_Valid() const{
    return m_acceleration_settings_isValid;
}

QString OAICreateJob_request::getBillingTagsSource() const {
    return m_billing_tags_source;
}
void OAICreateJob_request::setBillingTagsSource(const QString &billing_tags_source) {
    m_billing_tags_source = billing_tags_source;
    m_billing_tags_source_isSet = true;
}

bool OAICreateJob_request::is_billing_tags_source_Set() const{
    return m_billing_tags_source_isSet;
}

bool OAICreateJob_request::is_billing_tags_source_Valid() const{
    return m_billing_tags_source_isValid;
}

QString OAICreateJob_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateJob_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateJob_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateJob_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList<OAIHopDestination> OAICreateJob_request::getHopDestinations() const {
    return m_hop_destinations;
}
void OAICreateJob_request::setHopDestinations(const QList<OAIHopDestination> &hop_destinations) {
    m_hop_destinations = hop_destinations;
    m_hop_destinations_isSet = true;
}

bool OAICreateJob_request::is_hop_destinations_Set() const{
    return m_hop_destinations_isSet;
}

bool OAICreateJob_request::is_hop_destinations_Valid() const{
    return m_hop_destinations_isValid;
}

QString OAICreateJob_request::getJobTemplate() const {
    return m_job_template;
}
void OAICreateJob_request::setJobTemplate(const QString &job_template) {
    m_job_template = job_template;
    m_job_template_isSet = true;
}

bool OAICreateJob_request::is_job_template_Set() const{
    return m_job_template_isSet;
}

bool OAICreateJob_request::is_job_template_Valid() const{
    return m_job_template_isValid;
}

qint32 OAICreateJob_request::getPriority() const {
    return m_priority;
}
void OAICreateJob_request::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICreateJob_request::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICreateJob_request::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAICreateJob_request::getQueue() const {
    return m_queue;
}
void OAICreateJob_request::setQueue(const QString &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAICreateJob_request::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAICreateJob_request::is_queue_Valid() const{
    return m_queue_isValid;
}

QString OAICreateJob_request::getRole() const {
    return m_role;
}
void OAICreateJob_request::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICreateJob_request::is_role_Set() const{
    return m_role_isSet;
}

bool OAICreateJob_request::is_role_Valid() const{
    return m_role_isValid;
}

OAICreateJob_request_settings OAICreateJob_request::getSettings() const {
    return m_settings;
}
void OAICreateJob_request::setSettings(const OAICreateJob_request_settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAICreateJob_request::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAICreateJob_request::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAICreateJob_request::getSimulateReservedQueue() const {
    return m_simulate_reserved_queue;
}
void OAICreateJob_request::setSimulateReservedQueue(const QString &simulate_reserved_queue) {
    m_simulate_reserved_queue = simulate_reserved_queue;
    m_simulate_reserved_queue_isSet = true;
}

bool OAICreateJob_request::is_simulate_reserved_queue_Set() const{
    return m_simulate_reserved_queue_isSet;
}

bool OAICreateJob_request::is_simulate_reserved_queue_Valid() const{
    return m_simulate_reserved_queue_isValid;
}

QString OAICreateJob_request::getStatusUpdateInterval() const {
    return m_status_update_interval;
}
void OAICreateJob_request::setStatusUpdateInterval(const QString &status_update_interval) {
    m_status_update_interval = status_update_interval;
    m_status_update_interval_isSet = true;
}

bool OAICreateJob_request::is_status_update_interval_Set() const{
    return m_status_update_interval_isSet;
}

bool OAICreateJob_request::is_status_update_interval_Valid() const{
    return m_status_update_interval_isValid;
}

QMap<QString, QString> OAICreateJob_request::getTags() const {
    return m_tags;
}
void OAICreateJob_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateJob_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateJob_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QMap<QString, QString> OAICreateJob_request::getUserMetadata() const {
    return m_user_metadata;
}
void OAICreateJob_request::setUserMetadata(const QMap<QString, QString> &user_metadata) {
    m_user_metadata = user_metadata;
    m_user_metadata_isSet = true;
}

bool OAICreateJob_request::is_user_metadata_Set() const{
    return m_user_metadata_isSet;
}

bool OAICreateJob_request::is_user_metadata_Valid() const{
    return m_user_metadata_isValid;
}

bool OAICreateJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acceleration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_tags_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hop_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulate_reserved_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_update_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_isValid && m_settings_isValid && true;
}

} // namespace OpenAPI
