/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJob_request_settings_NielsenNonLinearWatermark.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJob_request_settings_NielsenNonLinearWatermark::OAICreateJob_request_settings_NielsenNonLinearWatermark(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJob_request_settings_NielsenNonLinearWatermark::OAICreateJob_request_settings_NielsenNonLinearWatermark() {
    this->initializeModel();
}

OAICreateJob_request_settings_NielsenNonLinearWatermark::~OAICreateJob_request_settings_NielsenNonLinearWatermark() {}

void OAICreateJob_request_settings_NielsenNonLinearWatermark::initializeModel() {

    m_active_watermark_process_isSet = false;
    m_active_watermark_process_isValid = false;

    m_adi_filename_isSet = false;
    m_adi_filename_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_asset_name_isSet = false;
    m_asset_name_isValid = false;

    m_cbet_source_id_isSet = false;
    m_cbet_source_id_isValid = false;

    m_episode_id_isSet = false;
    m_episode_id_isValid = false;

    m_metadata_destination_isSet = false;
    m_metadata_destination_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_watermark_status_isSet = false;
    m_source_watermark_status_isValid = false;

    m_tic_server_url_isSet = false;
    m_tic_server_url_isValid = false;

    m_unique_tic_per_audio_track_isSet = false;
    m_unique_tic_per_audio_track_isValid = false;
}

void OAICreateJob_request_settings_NielsenNonLinearWatermark::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJob_request_settings_NielsenNonLinearWatermark::fromJsonObject(QJsonObject json) {

    m_active_watermark_process_isValid = ::OpenAPI::fromJsonValue(m_active_watermark_process, json[QString("ActiveWatermarkProcess")]);
    m_active_watermark_process_isSet = !json[QString("ActiveWatermarkProcess")].isNull() && m_active_watermark_process_isValid;

    m_adi_filename_isValid = ::OpenAPI::fromJsonValue(m_adi_filename, json[QString("AdiFilename")]);
    m_adi_filename_isSet = !json[QString("AdiFilename")].isNull() && m_adi_filename_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("AssetId")]);
    m_asset_id_isSet = !json[QString("AssetId")].isNull() && m_asset_id_isValid;

    m_asset_name_isValid = ::OpenAPI::fromJsonValue(m_asset_name, json[QString("AssetName")]);
    m_asset_name_isSet = !json[QString("AssetName")].isNull() && m_asset_name_isValid;

    m_cbet_source_id_isValid = ::OpenAPI::fromJsonValue(m_cbet_source_id, json[QString("CbetSourceId")]);
    m_cbet_source_id_isSet = !json[QString("CbetSourceId")].isNull() && m_cbet_source_id_isValid;

    m_episode_id_isValid = ::OpenAPI::fromJsonValue(m_episode_id, json[QString("EpisodeId")]);
    m_episode_id_isSet = !json[QString("EpisodeId")].isNull() && m_episode_id_isValid;

    m_metadata_destination_isValid = ::OpenAPI::fromJsonValue(m_metadata_destination, json[QString("MetadataDestination")]);
    m_metadata_destination_isSet = !json[QString("MetadataDestination")].isNull() && m_metadata_destination_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceId")]);
    m_source_id_isSet = !json[QString("SourceId")].isNull() && m_source_id_isValid;

    m_source_watermark_status_isValid = ::OpenAPI::fromJsonValue(m_source_watermark_status, json[QString("SourceWatermarkStatus")]);
    m_source_watermark_status_isSet = !json[QString("SourceWatermarkStatus")].isNull() && m_source_watermark_status_isValid;

    m_tic_server_url_isValid = ::OpenAPI::fromJsonValue(m_tic_server_url, json[QString("TicServerUrl")]);
    m_tic_server_url_isSet = !json[QString("TicServerUrl")].isNull() && m_tic_server_url_isValid;

    m_unique_tic_per_audio_track_isValid = ::OpenAPI::fromJsonValue(m_unique_tic_per_audio_track, json[QString("UniqueTicPerAudioTrack")]);
    m_unique_tic_per_audio_track_isSet = !json[QString("UniqueTicPerAudioTrack")].isNull() && m_unique_tic_per_audio_track_isValid;
}

QString OAICreateJob_request_settings_NielsenNonLinearWatermark::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJob_request_settings_NielsenNonLinearWatermark::asJsonObject() const {
    QJsonObject obj;
    if (m_active_watermark_process.isSet()) {
        obj.insert(QString("ActiveWatermarkProcess"), ::OpenAPI::toJsonValue(m_active_watermark_process));
    }
    if (m_adi_filename_isSet) {
        obj.insert(QString("AdiFilename"), ::OpenAPI::toJsonValue(m_adi_filename));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("AssetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_asset_name_isSet) {
        obj.insert(QString("AssetName"), ::OpenAPI::toJsonValue(m_asset_name));
    }
    if (m_cbet_source_id_isSet) {
        obj.insert(QString("CbetSourceId"), ::OpenAPI::toJsonValue(m_cbet_source_id));
    }
    if (m_episode_id_isSet) {
        obj.insert(QString("EpisodeId"), ::OpenAPI::toJsonValue(m_episode_id));
    }
    if (m_metadata_destination_isSet) {
        obj.insert(QString("MetadataDestination"), ::OpenAPI::toJsonValue(m_metadata_destination));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_watermark_status.isSet()) {
        obj.insert(QString("SourceWatermarkStatus"), ::OpenAPI::toJsonValue(m_source_watermark_status));
    }
    if (m_tic_server_url_isSet) {
        obj.insert(QString("TicServerUrl"), ::OpenAPI::toJsonValue(m_tic_server_url));
    }
    if (m_unique_tic_per_audio_track.isSet()) {
        obj.insert(QString("UniqueTicPerAudioTrack"), ::OpenAPI::toJsonValue(m_unique_tic_per_audio_track));
    }
    return obj;
}

OAINielsenActiveWatermarkProcessType OAICreateJob_request_settings_NielsenNonLinearWatermark::getActiveWatermarkProcess() const {
    return m_active_watermark_process;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setActiveWatermarkProcess(const OAINielsenActiveWatermarkProcessType &active_watermark_process) {
    m_active_watermark_process = active_watermark_process;
    m_active_watermark_process_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_active_watermark_process_Set() const{
    return m_active_watermark_process_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_active_watermark_process_Valid() const{
    return m_active_watermark_process_isValid;
}

QString OAICreateJob_request_settings_NielsenNonLinearWatermark::getAdiFilename() const {
    return m_adi_filename;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setAdiFilename(const QString &adi_filename) {
    m_adi_filename = adi_filename;
    m_adi_filename_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_adi_filename_Set() const{
    return m_adi_filename_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_adi_filename_Valid() const{
    return m_adi_filename_isValid;
}

QString OAICreateJob_request_settings_NielsenNonLinearWatermark::getAssetId() const {
    return m_asset_id;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAICreateJob_request_settings_NielsenNonLinearWatermark::getAssetName() const {
    return m_asset_name;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setAssetName(const QString &asset_name) {
    m_asset_name = asset_name;
    m_asset_name_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_asset_name_Set() const{
    return m_asset_name_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_asset_name_Valid() const{
    return m_asset_name_isValid;
}

QString OAICreateJob_request_settings_NielsenNonLinearWatermark::getCbetSourceId() const {
    return m_cbet_source_id;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setCbetSourceId(const QString &cbet_source_id) {
    m_cbet_source_id = cbet_source_id;
    m_cbet_source_id_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_cbet_source_id_Set() const{
    return m_cbet_source_id_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_cbet_source_id_Valid() const{
    return m_cbet_source_id_isValid;
}

QString OAICreateJob_request_settings_NielsenNonLinearWatermark::getEpisodeId() const {
    return m_episode_id;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setEpisodeId(const QString &episode_id) {
    m_episode_id = episode_id;
    m_episode_id_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_episode_id_Set() const{
    return m_episode_id_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_episode_id_Valid() const{
    return m_episode_id_isValid;
}

QString OAICreateJob_request_settings_NielsenNonLinearWatermark::getMetadataDestination() const {
    return m_metadata_destination;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setMetadataDestination(const QString &metadata_destination) {
    m_metadata_destination = metadata_destination;
    m_metadata_destination_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_metadata_destination_Set() const{
    return m_metadata_destination_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_metadata_destination_Valid() const{
    return m_metadata_destination_isValid;
}

qint32 OAICreateJob_request_settings_NielsenNonLinearWatermark::getSourceId() const {
    return m_source_id;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setSourceId(const qint32 &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_source_id_Valid() const{
    return m_source_id_isValid;
}

OAINielsenSourceWatermarkStatusType OAICreateJob_request_settings_NielsenNonLinearWatermark::getSourceWatermarkStatus() const {
    return m_source_watermark_status;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setSourceWatermarkStatus(const OAINielsenSourceWatermarkStatusType &source_watermark_status) {
    m_source_watermark_status = source_watermark_status;
    m_source_watermark_status_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_source_watermark_status_Set() const{
    return m_source_watermark_status_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_source_watermark_status_Valid() const{
    return m_source_watermark_status_isValid;
}

QString OAICreateJob_request_settings_NielsenNonLinearWatermark::getTicServerUrl() const {
    return m_tic_server_url;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setTicServerUrl(const QString &tic_server_url) {
    m_tic_server_url = tic_server_url;
    m_tic_server_url_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_tic_server_url_Set() const{
    return m_tic_server_url_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_tic_server_url_Valid() const{
    return m_tic_server_url_isValid;
}

OAINielsenUniqueTicPerAudioTrackType OAICreateJob_request_settings_NielsenNonLinearWatermark::getUniqueTicPerAudioTrack() const {
    return m_unique_tic_per_audio_track;
}
void OAICreateJob_request_settings_NielsenNonLinearWatermark::setUniqueTicPerAudioTrack(const OAINielsenUniqueTicPerAudioTrackType &unique_tic_per_audio_track) {
    m_unique_tic_per_audio_track = unique_tic_per_audio_track;
    m_unique_tic_per_audio_track_isSet = true;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_unique_tic_per_audio_track_Set() const{
    return m_unique_tic_per_audio_track_isSet;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::is_unique_tic_per_audio_track_Valid() const{
    return m_unique_tic_per_audio_track_isValid;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_watermark_process.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_adi_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cbet_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_watermark_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tic_server_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_tic_per_audio_track.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJob_request_settings_NielsenNonLinearWatermark::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
