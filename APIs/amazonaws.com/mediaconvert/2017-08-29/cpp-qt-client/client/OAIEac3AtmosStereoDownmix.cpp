/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEac3AtmosStereoDownmix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEac3AtmosStereoDownmix::OAIEac3AtmosStereoDownmix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEac3AtmosStereoDownmix::OAIEac3AtmosStereoDownmix() {
    this->initializeModel();
}

OAIEac3AtmosStereoDownmix::~OAIEac3AtmosStereoDownmix() {}

void OAIEac3AtmosStereoDownmix::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEac3AtmosStereoDownmix::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEac3AtmosStereoDownmix::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NOT_INDICATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosStereoDownmix::NOT_INDICATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STEREO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosStereoDownmix::STEREO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SURROUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosStereoDownmix::SURROUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DPL2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosStereoDownmix::DPL2;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEac3AtmosStereoDownmix::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEac3AtmosStereoDownmix::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEac3AtmosStereoDownmix::NOT_INDICATED:
            val = "NOT_INDICATED";
            break;
        case eOAIEac3AtmosStereoDownmix::STEREO:
            val = "STEREO";
            break;
        case eOAIEac3AtmosStereoDownmix::SURROUND:
            val = "SURROUND";
            break;
        case eOAIEac3AtmosStereoDownmix::DPL2:
            val = "DPL2";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEac3AtmosStereoDownmix::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEac3AtmosStereoDownmix::eOAIEac3AtmosStereoDownmix OAIEac3AtmosStereoDownmix::getValue() const {
    return m_value;
}

void OAIEac3AtmosStereoDownmix::setValue(const OAIEac3AtmosStereoDownmix::eOAIEac3AtmosStereoDownmix& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEac3AtmosStereoDownmix::isSet() const {
    
    return m_value_isSet;
}

bool OAIEac3AtmosStereoDownmix::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
