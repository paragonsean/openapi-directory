/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueTransition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueTransition::OAIQueueTransition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueTransition::OAIQueueTransition() {
    this->initializeModel();
}

OAIQueueTransition::~OAIQueueTransition() {}

void OAIQueueTransition::initializeModel() {

    m_destination_queue_isSet = false;
    m_destination_queue_isValid = false;

    m_source_queue_isSet = false;
    m_source_queue_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIQueueTransition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueTransition::fromJsonObject(QJsonObject json) {

    m_destination_queue_isValid = ::OpenAPI::fromJsonValue(m_destination_queue, json[QString("DestinationQueue")]);
    m_destination_queue_isSet = !json[QString("DestinationQueue")].isNull() && m_destination_queue_isValid;

    m_source_queue_isValid = ::OpenAPI::fromJsonValue(m_source_queue, json[QString("SourceQueue")]);
    m_source_queue_isSet = !json[QString("SourceQueue")].isNull() && m_source_queue_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIQueueTransition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueTransition::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_queue_isSet) {
        obj.insert(QString("DestinationQueue"), ::OpenAPI::toJsonValue(m_destination_queue));
    }
    if (m_source_queue_isSet) {
        obj.insert(QString("SourceQueue"), ::OpenAPI::toJsonValue(m_source_queue));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIQueueTransition::getDestinationQueue() const {
    return m_destination_queue;
}
void OAIQueueTransition::setDestinationQueue(const QString &destination_queue) {
    m_destination_queue = destination_queue;
    m_destination_queue_isSet = true;
}

bool OAIQueueTransition::is_destination_queue_Set() const{
    return m_destination_queue_isSet;
}

bool OAIQueueTransition::is_destination_queue_Valid() const{
    return m_destination_queue_isValid;
}

QString OAIQueueTransition::getSourceQueue() const {
    return m_source_queue;
}
void OAIQueueTransition::setSourceQueue(const QString &source_queue) {
    m_source_queue = source_queue;
    m_source_queue_isSet = true;
}

bool OAIQueueTransition::is_source_queue_Set() const{
    return m_source_queue_isSet;
}

bool OAIQueueTransition::is_source_queue_Valid() const{
    return m_source_queue_isValid;
}

QDateTime OAIQueueTransition::getTimestamp() const {
    return m_timestamp;
}
void OAIQueueTransition::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIQueueTransition::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIQueueTransition::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIQueueTransition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueTransition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
