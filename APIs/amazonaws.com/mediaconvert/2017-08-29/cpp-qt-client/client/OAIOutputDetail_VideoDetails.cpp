/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputDetail_VideoDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputDetail_VideoDetails::OAIOutputDetail_VideoDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputDetail_VideoDetails::OAIOutputDetail_VideoDetails() {
    this->initializeModel();
}

OAIOutputDetail_VideoDetails::~OAIOutputDetail_VideoDetails() {}

void OAIOutputDetail_VideoDetails::initializeModel() {

    m_height_in_px_isSet = false;
    m_height_in_px_isValid = false;

    m_width_in_px_isSet = false;
    m_width_in_px_isValid = false;
}

void OAIOutputDetail_VideoDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputDetail_VideoDetails::fromJsonObject(QJsonObject json) {

    m_height_in_px_isValid = ::OpenAPI::fromJsonValue(m_height_in_px, json[QString("HeightInPx")]);
    m_height_in_px_isSet = !json[QString("HeightInPx")].isNull() && m_height_in_px_isValid;

    m_width_in_px_isValid = ::OpenAPI::fromJsonValue(m_width_in_px, json[QString("WidthInPx")]);
    m_width_in_px_isSet = !json[QString("WidthInPx")].isNull() && m_width_in_px_isValid;
}

QString OAIOutputDetail_VideoDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputDetail_VideoDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_height_in_px_isSet) {
        obj.insert(QString("HeightInPx"), ::OpenAPI::toJsonValue(m_height_in_px));
    }
    if (m_width_in_px_isSet) {
        obj.insert(QString("WidthInPx"), ::OpenAPI::toJsonValue(m_width_in_px));
    }
    return obj;
}

qint32 OAIOutputDetail_VideoDetails::getHeightInPx() const {
    return m_height_in_px;
}
void OAIOutputDetail_VideoDetails::setHeightInPx(const qint32 &height_in_px) {
    m_height_in_px = height_in_px;
    m_height_in_px_isSet = true;
}

bool OAIOutputDetail_VideoDetails::is_height_in_px_Set() const{
    return m_height_in_px_isSet;
}

bool OAIOutputDetail_VideoDetails::is_height_in_px_Valid() const{
    return m_height_in_px_isValid;
}

qint32 OAIOutputDetail_VideoDetails::getWidthInPx() const {
    return m_width_in_px;
}
void OAIOutputDetail_VideoDetails::setWidthInPx(const qint32 &width_in_px) {
    m_width_in_px = width_in_px;
    m_width_in_px_isSet = true;
}

bool OAIOutputDetail_VideoDetails::is_width_in_px_Set() const{
    return m_width_in_px_isSet;
}

bool OAIOutputDetail_VideoDetails::is_width_in_px_Valid() const{
    return m_width_in_px_isValid;
}

bool OAIOutputDetail_VideoDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_in_px_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_in_px_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputDetail_VideoDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
