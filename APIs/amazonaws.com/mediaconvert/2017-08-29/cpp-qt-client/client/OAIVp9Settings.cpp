/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVp9Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVp9Settings::OAIVp9Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVp9Settings::OAIVp9Settings() {
    this->initializeModel();
}

OAIVp9Settings::~OAIVp9Settings() {}

void OAIVp9Settings::initializeModel() {

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_framerate_control_isSet = false;
    m_framerate_control_isValid = false;

    m_framerate_conversion_algorithm_isSet = false;
    m_framerate_conversion_algorithm_isValid = false;

    m_framerate_denominator_isSet = false;
    m_framerate_denominator_isValid = false;

    m_framerate_numerator_isSet = false;
    m_framerate_numerator_isValid = false;

    m_gop_size_isSet = false;
    m_gop_size_isValid = false;

    m_hrd_buffer_size_isSet = false;
    m_hrd_buffer_size_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;

    m_par_control_isSet = false;
    m_par_control_isValid = false;

    m_par_denominator_isSet = false;
    m_par_denominator_isValid = false;

    m_par_numerator_isSet = false;
    m_par_numerator_isValid = false;

    m_quality_tuning_level_isSet = false;
    m_quality_tuning_level_isValid = false;

    m_rate_control_mode_isSet = false;
    m_rate_control_mode_isValid = false;
}

void OAIVp9Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVp9Settings::fromJsonObject(QJsonObject json) {

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_framerate_control_isValid = ::OpenAPI::fromJsonValue(m_framerate_control, json[QString("FramerateControl")]);
    m_framerate_control_isSet = !json[QString("FramerateControl")].isNull() && m_framerate_control_isValid;

    m_framerate_conversion_algorithm_isValid = ::OpenAPI::fromJsonValue(m_framerate_conversion_algorithm, json[QString("FramerateConversionAlgorithm")]);
    m_framerate_conversion_algorithm_isSet = !json[QString("FramerateConversionAlgorithm")].isNull() && m_framerate_conversion_algorithm_isValid;

    m_framerate_denominator_isValid = ::OpenAPI::fromJsonValue(m_framerate_denominator, json[QString("FramerateDenominator")]);
    m_framerate_denominator_isSet = !json[QString("FramerateDenominator")].isNull() && m_framerate_denominator_isValid;

    m_framerate_numerator_isValid = ::OpenAPI::fromJsonValue(m_framerate_numerator, json[QString("FramerateNumerator")]);
    m_framerate_numerator_isSet = !json[QString("FramerateNumerator")].isNull() && m_framerate_numerator_isValid;

    m_gop_size_isValid = ::OpenAPI::fromJsonValue(m_gop_size, json[QString("GopSize")]);
    m_gop_size_isSet = !json[QString("GopSize")].isNull() && m_gop_size_isValid;

    m_hrd_buffer_size_isValid = ::OpenAPI::fromJsonValue(m_hrd_buffer_size, json[QString("HrdBufferSize")]);
    m_hrd_buffer_size_isSet = !json[QString("HrdBufferSize")].isNull() && m_hrd_buffer_size_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("MaxBitrate")]);
    m_max_bitrate_isSet = !json[QString("MaxBitrate")].isNull() && m_max_bitrate_isValid;

    m_par_control_isValid = ::OpenAPI::fromJsonValue(m_par_control, json[QString("ParControl")]);
    m_par_control_isSet = !json[QString("ParControl")].isNull() && m_par_control_isValid;

    m_par_denominator_isValid = ::OpenAPI::fromJsonValue(m_par_denominator, json[QString("ParDenominator")]);
    m_par_denominator_isSet = !json[QString("ParDenominator")].isNull() && m_par_denominator_isValid;

    m_par_numerator_isValid = ::OpenAPI::fromJsonValue(m_par_numerator, json[QString("ParNumerator")]);
    m_par_numerator_isSet = !json[QString("ParNumerator")].isNull() && m_par_numerator_isValid;

    m_quality_tuning_level_isValid = ::OpenAPI::fromJsonValue(m_quality_tuning_level, json[QString("QualityTuningLevel")]);
    m_quality_tuning_level_isSet = !json[QString("QualityTuningLevel")].isNull() && m_quality_tuning_level_isValid;

    m_rate_control_mode_isValid = ::OpenAPI::fromJsonValue(m_rate_control_mode, json[QString("RateControlMode")]);
    m_rate_control_mode_isSet = !json[QString("RateControlMode")].isNull() && m_rate_control_mode_isValid;
}

QString OAIVp9Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVp9Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_framerate_control.isSet()) {
        obj.insert(QString("FramerateControl"), ::OpenAPI::toJsonValue(m_framerate_control));
    }
    if (m_framerate_conversion_algorithm.isSet()) {
        obj.insert(QString("FramerateConversionAlgorithm"), ::OpenAPI::toJsonValue(m_framerate_conversion_algorithm));
    }
    if (m_framerate_denominator_isSet) {
        obj.insert(QString("FramerateDenominator"), ::OpenAPI::toJsonValue(m_framerate_denominator));
    }
    if (m_framerate_numerator_isSet) {
        obj.insert(QString("FramerateNumerator"), ::OpenAPI::toJsonValue(m_framerate_numerator));
    }
    if (m_gop_size_isSet) {
        obj.insert(QString("GopSize"), ::OpenAPI::toJsonValue(m_gop_size));
    }
    if (m_hrd_buffer_size_isSet) {
        obj.insert(QString("HrdBufferSize"), ::OpenAPI::toJsonValue(m_hrd_buffer_size));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("MaxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    if (m_par_control.isSet()) {
        obj.insert(QString("ParControl"), ::OpenAPI::toJsonValue(m_par_control));
    }
    if (m_par_denominator_isSet) {
        obj.insert(QString("ParDenominator"), ::OpenAPI::toJsonValue(m_par_denominator));
    }
    if (m_par_numerator_isSet) {
        obj.insert(QString("ParNumerator"), ::OpenAPI::toJsonValue(m_par_numerator));
    }
    if (m_quality_tuning_level.isSet()) {
        obj.insert(QString("QualityTuningLevel"), ::OpenAPI::toJsonValue(m_quality_tuning_level));
    }
    if (m_rate_control_mode.isSet()) {
        obj.insert(QString("RateControlMode"), ::OpenAPI::toJsonValue(m_rate_control_mode));
    }
    return obj;
}

qint32 OAIVp9Settings::getBitrate() const {
    return m_bitrate;
}
void OAIVp9Settings::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIVp9Settings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIVp9Settings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIVp9FramerateControl OAIVp9Settings::getFramerateControl() const {
    return m_framerate_control;
}
void OAIVp9Settings::setFramerateControl(const OAIVp9FramerateControl &framerate_control) {
    m_framerate_control = framerate_control;
    m_framerate_control_isSet = true;
}

bool OAIVp9Settings::is_framerate_control_Set() const{
    return m_framerate_control_isSet;
}

bool OAIVp9Settings::is_framerate_control_Valid() const{
    return m_framerate_control_isValid;
}

OAIVp9FramerateConversionAlgorithm OAIVp9Settings::getFramerateConversionAlgorithm() const {
    return m_framerate_conversion_algorithm;
}
void OAIVp9Settings::setFramerateConversionAlgorithm(const OAIVp9FramerateConversionAlgorithm &framerate_conversion_algorithm) {
    m_framerate_conversion_algorithm = framerate_conversion_algorithm;
    m_framerate_conversion_algorithm_isSet = true;
}

bool OAIVp9Settings::is_framerate_conversion_algorithm_Set() const{
    return m_framerate_conversion_algorithm_isSet;
}

bool OAIVp9Settings::is_framerate_conversion_algorithm_Valid() const{
    return m_framerate_conversion_algorithm_isValid;
}

qint32 OAIVp9Settings::getFramerateDenominator() const {
    return m_framerate_denominator;
}
void OAIVp9Settings::setFramerateDenominator(const qint32 &framerate_denominator) {
    m_framerate_denominator = framerate_denominator;
    m_framerate_denominator_isSet = true;
}

bool OAIVp9Settings::is_framerate_denominator_Set() const{
    return m_framerate_denominator_isSet;
}

bool OAIVp9Settings::is_framerate_denominator_Valid() const{
    return m_framerate_denominator_isValid;
}

qint32 OAIVp9Settings::getFramerateNumerator() const {
    return m_framerate_numerator;
}
void OAIVp9Settings::setFramerateNumerator(const qint32 &framerate_numerator) {
    m_framerate_numerator = framerate_numerator;
    m_framerate_numerator_isSet = true;
}

bool OAIVp9Settings::is_framerate_numerator_Set() const{
    return m_framerate_numerator_isSet;
}

bool OAIVp9Settings::is_framerate_numerator_Valid() const{
    return m_framerate_numerator_isValid;
}

double OAIVp9Settings::getGopSize() const {
    return m_gop_size;
}
void OAIVp9Settings::setGopSize(const double &gop_size) {
    m_gop_size = gop_size;
    m_gop_size_isSet = true;
}

bool OAIVp9Settings::is_gop_size_Set() const{
    return m_gop_size_isSet;
}

bool OAIVp9Settings::is_gop_size_Valid() const{
    return m_gop_size_isValid;
}

qint32 OAIVp9Settings::getHrdBufferSize() const {
    return m_hrd_buffer_size;
}
void OAIVp9Settings::setHrdBufferSize(const qint32 &hrd_buffer_size) {
    m_hrd_buffer_size = hrd_buffer_size;
    m_hrd_buffer_size_isSet = true;
}

bool OAIVp9Settings::is_hrd_buffer_size_Set() const{
    return m_hrd_buffer_size_isSet;
}

bool OAIVp9Settings::is_hrd_buffer_size_Valid() const{
    return m_hrd_buffer_size_isValid;
}

qint32 OAIVp9Settings::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAIVp9Settings::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAIVp9Settings::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAIVp9Settings::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

OAIVp9ParControl OAIVp9Settings::getParControl() const {
    return m_par_control;
}
void OAIVp9Settings::setParControl(const OAIVp9ParControl &par_control) {
    m_par_control = par_control;
    m_par_control_isSet = true;
}

bool OAIVp9Settings::is_par_control_Set() const{
    return m_par_control_isSet;
}

bool OAIVp9Settings::is_par_control_Valid() const{
    return m_par_control_isValid;
}

qint32 OAIVp9Settings::getParDenominator() const {
    return m_par_denominator;
}
void OAIVp9Settings::setParDenominator(const qint32 &par_denominator) {
    m_par_denominator = par_denominator;
    m_par_denominator_isSet = true;
}

bool OAIVp9Settings::is_par_denominator_Set() const{
    return m_par_denominator_isSet;
}

bool OAIVp9Settings::is_par_denominator_Valid() const{
    return m_par_denominator_isValid;
}

qint32 OAIVp9Settings::getParNumerator() const {
    return m_par_numerator;
}
void OAIVp9Settings::setParNumerator(const qint32 &par_numerator) {
    m_par_numerator = par_numerator;
    m_par_numerator_isSet = true;
}

bool OAIVp9Settings::is_par_numerator_Set() const{
    return m_par_numerator_isSet;
}

bool OAIVp9Settings::is_par_numerator_Valid() const{
    return m_par_numerator_isValid;
}

OAIVp9QualityTuningLevel OAIVp9Settings::getQualityTuningLevel() const {
    return m_quality_tuning_level;
}
void OAIVp9Settings::setQualityTuningLevel(const OAIVp9QualityTuningLevel &quality_tuning_level) {
    m_quality_tuning_level = quality_tuning_level;
    m_quality_tuning_level_isSet = true;
}

bool OAIVp9Settings::is_quality_tuning_level_Set() const{
    return m_quality_tuning_level_isSet;
}

bool OAIVp9Settings::is_quality_tuning_level_Valid() const{
    return m_quality_tuning_level_isValid;
}

OAIVp9RateControlMode OAIVp9Settings::getRateControlMode() const {
    return m_rate_control_mode;
}
void OAIVp9Settings::setRateControlMode(const OAIVp9RateControlMode &rate_control_mode) {
    m_rate_control_mode = rate_control_mode;
    m_rate_control_mode_isSet = true;
}

bool OAIVp9Settings::is_rate_control_mode_Set() const{
    return m_rate_control_mode_isSet;
}

bool OAIVp9Settings::is_rate_control_mode_Valid() const{
    return m_rate_control_mode_isValid;
}

bool OAIVp9Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_conversion_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gop_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hrd_buffer_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_tuning_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_control_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVp9Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
