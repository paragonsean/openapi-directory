/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIH265Settings_QvbrSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIH265Settings_QvbrSettings::OAIH265Settings_QvbrSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIH265Settings_QvbrSettings::OAIH265Settings_QvbrSettings() {
    this->initializeModel();
}

OAIH265Settings_QvbrSettings::~OAIH265Settings_QvbrSettings() {}

void OAIH265Settings_QvbrSettings::initializeModel() {

    m_max_average_bitrate_isSet = false;
    m_max_average_bitrate_isValid = false;

    m_qvbr_quality_level_isSet = false;
    m_qvbr_quality_level_isValid = false;

    m_qvbr_quality_level_fine_tune_isSet = false;
    m_qvbr_quality_level_fine_tune_isValid = false;
}

void OAIH265Settings_QvbrSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIH265Settings_QvbrSettings::fromJsonObject(QJsonObject json) {

    m_max_average_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_average_bitrate, json[QString("MaxAverageBitrate")]);
    m_max_average_bitrate_isSet = !json[QString("MaxAverageBitrate")].isNull() && m_max_average_bitrate_isValid;

    m_qvbr_quality_level_isValid = ::OpenAPI::fromJsonValue(m_qvbr_quality_level, json[QString("QvbrQualityLevel")]);
    m_qvbr_quality_level_isSet = !json[QString("QvbrQualityLevel")].isNull() && m_qvbr_quality_level_isValid;

    m_qvbr_quality_level_fine_tune_isValid = ::OpenAPI::fromJsonValue(m_qvbr_quality_level_fine_tune, json[QString("QvbrQualityLevelFineTune")]);
    m_qvbr_quality_level_fine_tune_isSet = !json[QString("QvbrQualityLevelFineTune")].isNull() && m_qvbr_quality_level_fine_tune_isValid;
}

QString OAIH265Settings_QvbrSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIH265Settings_QvbrSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_max_average_bitrate_isSet) {
        obj.insert(QString("MaxAverageBitrate"), ::OpenAPI::toJsonValue(m_max_average_bitrate));
    }
    if (m_qvbr_quality_level_isSet) {
        obj.insert(QString("QvbrQualityLevel"), ::OpenAPI::toJsonValue(m_qvbr_quality_level));
    }
    if (m_qvbr_quality_level_fine_tune_isSet) {
        obj.insert(QString("QvbrQualityLevelFineTune"), ::OpenAPI::toJsonValue(m_qvbr_quality_level_fine_tune));
    }
    return obj;
}

qint32 OAIH265Settings_QvbrSettings::getMaxAverageBitrate() const {
    return m_max_average_bitrate;
}
void OAIH265Settings_QvbrSettings::setMaxAverageBitrate(const qint32 &max_average_bitrate) {
    m_max_average_bitrate = max_average_bitrate;
    m_max_average_bitrate_isSet = true;
}

bool OAIH265Settings_QvbrSettings::is_max_average_bitrate_Set() const{
    return m_max_average_bitrate_isSet;
}

bool OAIH265Settings_QvbrSettings::is_max_average_bitrate_Valid() const{
    return m_max_average_bitrate_isValid;
}

qint32 OAIH265Settings_QvbrSettings::getQvbrQualityLevel() const {
    return m_qvbr_quality_level;
}
void OAIH265Settings_QvbrSettings::setQvbrQualityLevel(const qint32 &qvbr_quality_level) {
    m_qvbr_quality_level = qvbr_quality_level;
    m_qvbr_quality_level_isSet = true;
}

bool OAIH265Settings_QvbrSettings::is_qvbr_quality_level_Set() const{
    return m_qvbr_quality_level_isSet;
}

bool OAIH265Settings_QvbrSettings::is_qvbr_quality_level_Valid() const{
    return m_qvbr_quality_level_isValid;
}

double OAIH265Settings_QvbrSettings::getQvbrQualityLevelFineTune() const {
    return m_qvbr_quality_level_fine_tune;
}
void OAIH265Settings_QvbrSettings::setQvbrQualityLevelFineTune(const double &qvbr_quality_level_fine_tune) {
    m_qvbr_quality_level_fine_tune = qvbr_quality_level_fine_tune;
    m_qvbr_quality_level_fine_tune_isSet = true;
}

bool OAIH265Settings_QvbrSettings::is_qvbr_quality_level_fine_tune_Set() const{
    return m_qvbr_quality_level_fine_tune_isSet;
}

bool OAIH265Settings_QvbrSettings::is_qvbr_quality_level_fine_tune_Valid() const{
    return m_qvbr_quality_level_fine_tune_isValid;
}

bool OAIH265Settings_QvbrSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_average_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qvbr_quality_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qvbr_quality_level_fine_tune_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIH265Settings_QvbrSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
