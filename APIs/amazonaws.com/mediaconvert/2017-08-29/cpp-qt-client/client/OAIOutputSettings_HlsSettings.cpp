/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputSettings_HlsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputSettings_HlsSettings::OAIOutputSettings_HlsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputSettings_HlsSettings::OAIOutputSettings_HlsSettings() {
    this->initializeModel();
}

OAIOutputSettings_HlsSettings::~OAIOutputSettings_HlsSettings() {}

void OAIOutputSettings_HlsSettings::initializeModel() {

    m_audio_group_id_isSet = false;
    m_audio_group_id_isValid = false;

    m_audio_only_container_isSet = false;
    m_audio_only_container_isValid = false;

    m_audio_rendition_sets_isSet = false;
    m_audio_rendition_sets_isValid = false;

    m_audio_track_type_isSet = false;
    m_audio_track_type_isValid = false;

    m_descriptive_video_service_flag_isSet = false;
    m_descriptive_video_service_flag_isValid = false;

    m_i_frame_only_manifest_isSet = false;
    m_i_frame_only_manifest_isValid = false;

    m_segment_modifier_isSet = false;
    m_segment_modifier_isValid = false;
}

void OAIOutputSettings_HlsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputSettings_HlsSettings::fromJsonObject(QJsonObject json) {

    m_audio_group_id_isValid = ::OpenAPI::fromJsonValue(m_audio_group_id, json[QString("AudioGroupId")]);
    m_audio_group_id_isSet = !json[QString("AudioGroupId")].isNull() && m_audio_group_id_isValid;

    m_audio_only_container_isValid = ::OpenAPI::fromJsonValue(m_audio_only_container, json[QString("AudioOnlyContainer")]);
    m_audio_only_container_isSet = !json[QString("AudioOnlyContainer")].isNull() && m_audio_only_container_isValid;

    m_audio_rendition_sets_isValid = ::OpenAPI::fromJsonValue(m_audio_rendition_sets, json[QString("AudioRenditionSets")]);
    m_audio_rendition_sets_isSet = !json[QString("AudioRenditionSets")].isNull() && m_audio_rendition_sets_isValid;

    m_audio_track_type_isValid = ::OpenAPI::fromJsonValue(m_audio_track_type, json[QString("AudioTrackType")]);
    m_audio_track_type_isSet = !json[QString("AudioTrackType")].isNull() && m_audio_track_type_isValid;

    m_descriptive_video_service_flag_isValid = ::OpenAPI::fromJsonValue(m_descriptive_video_service_flag, json[QString("DescriptiveVideoServiceFlag")]);
    m_descriptive_video_service_flag_isSet = !json[QString("DescriptiveVideoServiceFlag")].isNull() && m_descriptive_video_service_flag_isValid;

    m_i_frame_only_manifest_isValid = ::OpenAPI::fromJsonValue(m_i_frame_only_manifest, json[QString("IFrameOnlyManifest")]);
    m_i_frame_only_manifest_isSet = !json[QString("IFrameOnlyManifest")].isNull() && m_i_frame_only_manifest_isValid;

    m_segment_modifier_isValid = ::OpenAPI::fromJsonValue(m_segment_modifier, json[QString("SegmentModifier")]);
    m_segment_modifier_isSet = !json[QString("SegmentModifier")].isNull() && m_segment_modifier_isValid;
}

QString OAIOutputSettings_HlsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputSettings_HlsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_group_id_isSet) {
        obj.insert(QString("AudioGroupId"), ::OpenAPI::toJsonValue(m_audio_group_id));
    }
    if (m_audio_only_container.isSet()) {
        obj.insert(QString("AudioOnlyContainer"), ::OpenAPI::toJsonValue(m_audio_only_container));
    }
    if (m_audio_rendition_sets_isSet) {
        obj.insert(QString("AudioRenditionSets"), ::OpenAPI::toJsonValue(m_audio_rendition_sets));
    }
    if (m_audio_track_type.isSet()) {
        obj.insert(QString("AudioTrackType"), ::OpenAPI::toJsonValue(m_audio_track_type));
    }
    if (m_descriptive_video_service_flag.isSet()) {
        obj.insert(QString("DescriptiveVideoServiceFlag"), ::OpenAPI::toJsonValue(m_descriptive_video_service_flag));
    }
    if (m_i_frame_only_manifest.isSet()) {
        obj.insert(QString("IFrameOnlyManifest"), ::OpenAPI::toJsonValue(m_i_frame_only_manifest));
    }
    if (m_segment_modifier_isSet) {
        obj.insert(QString("SegmentModifier"), ::OpenAPI::toJsonValue(m_segment_modifier));
    }
    return obj;
}

QString OAIOutputSettings_HlsSettings::getAudioGroupId() const {
    return m_audio_group_id;
}
void OAIOutputSettings_HlsSettings::setAudioGroupId(const QString &audio_group_id) {
    m_audio_group_id = audio_group_id;
    m_audio_group_id_isSet = true;
}

bool OAIOutputSettings_HlsSettings::is_audio_group_id_Set() const{
    return m_audio_group_id_isSet;
}

bool OAIOutputSettings_HlsSettings::is_audio_group_id_Valid() const{
    return m_audio_group_id_isValid;
}

OAIHlsAudioOnlyContainer OAIOutputSettings_HlsSettings::getAudioOnlyContainer() const {
    return m_audio_only_container;
}
void OAIOutputSettings_HlsSettings::setAudioOnlyContainer(const OAIHlsAudioOnlyContainer &audio_only_container) {
    m_audio_only_container = audio_only_container;
    m_audio_only_container_isSet = true;
}

bool OAIOutputSettings_HlsSettings::is_audio_only_container_Set() const{
    return m_audio_only_container_isSet;
}

bool OAIOutputSettings_HlsSettings::is_audio_only_container_Valid() const{
    return m_audio_only_container_isValid;
}

QString OAIOutputSettings_HlsSettings::getAudioRenditionSets() const {
    return m_audio_rendition_sets;
}
void OAIOutputSettings_HlsSettings::setAudioRenditionSets(const QString &audio_rendition_sets) {
    m_audio_rendition_sets = audio_rendition_sets;
    m_audio_rendition_sets_isSet = true;
}

bool OAIOutputSettings_HlsSettings::is_audio_rendition_sets_Set() const{
    return m_audio_rendition_sets_isSet;
}

bool OAIOutputSettings_HlsSettings::is_audio_rendition_sets_Valid() const{
    return m_audio_rendition_sets_isValid;
}

OAIHlsAudioTrackType OAIOutputSettings_HlsSettings::getAudioTrackType() const {
    return m_audio_track_type;
}
void OAIOutputSettings_HlsSettings::setAudioTrackType(const OAIHlsAudioTrackType &audio_track_type) {
    m_audio_track_type = audio_track_type;
    m_audio_track_type_isSet = true;
}

bool OAIOutputSettings_HlsSettings::is_audio_track_type_Set() const{
    return m_audio_track_type_isSet;
}

bool OAIOutputSettings_HlsSettings::is_audio_track_type_Valid() const{
    return m_audio_track_type_isValid;
}

OAIHlsDescriptiveVideoServiceFlag OAIOutputSettings_HlsSettings::getDescriptiveVideoServiceFlag() const {
    return m_descriptive_video_service_flag;
}
void OAIOutputSettings_HlsSettings::setDescriptiveVideoServiceFlag(const OAIHlsDescriptiveVideoServiceFlag &descriptive_video_service_flag) {
    m_descriptive_video_service_flag = descriptive_video_service_flag;
    m_descriptive_video_service_flag_isSet = true;
}

bool OAIOutputSettings_HlsSettings::is_descriptive_video_service_flag_Set() const{
    return m_descriptive_video_service_flag_isSet;
}

bool OAIOutputSettings_HlsSettings::is_descriptive_video_service_flag_Valid() const{
    return m_descriptive_video_service_flag_isValid;
}

OAIHlsIFrameOnlyManifest OAIOutputSettings_HlsSettings::getIFrameOnlyManifest() const {
    return m_i_frame_only_manifest;
}
void OAIOutputSettings_HlsSettings::setIFrameOnlyManifest(const OAIHlsIFrameOnlyManifest &i_frame_only_manifest) {
    m_i_frame_only_manifest = i_frame_only_manifest;
    m_i_frame_only_manifest_isSet = true;
}

bool OAIOutputSettings_HlsSettings::is_i_frame_only_manifest_Set() const{
    return m_i_frame_only_manifest_isSet;
}

bool OAIOutputSettings_HlsSettings::is_i_frame_only_manifest_Valid() const{
    return m_i_frame_only_manifest_isValid;
}

QString OAIOutputSettings_HlsSettings::getSegmentModifier() const {
    return m_segment_modifier;
}
void OAIOutputSettings_HlsSettings::setSegmentModifier(const QString &segment_modifier) {
    m_segment_modifier = segment_modifier;
    m_segment_modifier_isSet = true;
}

bool OAIOutputSettings_HlsSettings::is_segment_modifier_Set() const{
    return m_segment_modifier_isSet;
}

bool OAIOutputSettings_HlsSettings::is_segment_modifier_Valid() const{
    return m_segment_modifier_isValid;
}

bool OAIOutputSettings_HlsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_only_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_rendition_sets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_track_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptive_video_service_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_frame_only_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_modifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputSettings_HlsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
