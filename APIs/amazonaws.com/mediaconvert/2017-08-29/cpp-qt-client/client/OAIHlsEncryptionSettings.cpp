/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsEncryptionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsEncryptionSettings::OAIHlsEncryptionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsEncryptionSettings::OAIHlsEncryptionSettings() {
    this->initializeModel();
}

OAIHlsEncryptionSettings::~OAIHlsEncryptionSettings() {}

void OAIHlsEncryptionSettings::initializeModel() {

    m_constant_initialization_vector_isSet = false;
    m_constant_initialization_vector_isValid = false;

    m_encryption_method_isSet = false;
    m_encryption_method_isValid = false;

    m_initialization_vector_in_manifest_isSet = false;
    m_initialization_vector_in_manifest_isValid = false;

    m_offline_encrypted_isSet = false;
    m_offline_encrypted_isValid = false;

    m_speke_key_provider_isSet = false;
    m_speke_key_provider_isValid = false;

    m_static_key_provider_isSet = false;
    m_static_key_provider_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIHlsEncryptionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsEncryptionSettings::fromJsonObject(QJsonObject json) {

    m_constant_initialization_vector_isValid = ::OpenAPI::fromJsonValue(m_constant_initialization_vector, json[QString("ConstantInitializationVector")]);
    m_constant_initialization_vector_isSet = !json[QString("ConstantInitializationVector")].isNull() && m_constant_initialization_vector_isValid;

    m_encryption_method_isValid = ::OpenAPI::fromJsonValue(m_encryption_method, json[QString("EncryptionMethod")]);
    m_encryption_method_isSet = !json[QString("EncryptionMethod")].isNull() && m_encryption_method_isValid;

    m_initialization_vector_in_manifest_isValid = ::OpenAPI::fromJsonValue(m_initialization_vector_in_manifest, json[QString("InitializationVectorInManifest")]);
    m_initialization_vector_in_manifest_isSet = !json[QString("InitializationVectorInManifest")].isNull() && m_initialization_vector_in_manifest_isValid;

    m_offline_encrypted_isValid = ::OpenAPI::fromJsonValue(m_offline_encrypted, json[QString("OfflineEncrypted")]);
    m_offline_encrypted_isSet = !json[QString("OfflineEncrypted")].isNull() && m_offline_encrypted_isValid;

    m_speke_key_provider_isValid = ::OpenAPI::fromJsonValue(m_speke_key_provider, json[QString("SpekeKeyProvider")]);
    m_speke_key_provider_isSet = !json[QString("SpekeKeyProvider")].isNull() && m_speke_key_provider_isValid;

    m_static_key_provider_isValid = ::OpenAPI::fromJsonValue(m_static_key_provider, json[QString("StaticKeyProvider")]);
    m_static_key_provider_isSet = !json[QString("StaticKeyProvider")].isNull() && m_static_key_provider_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIHlsEncryptionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsEncryptionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_constant_initialization_vector_isSet) {
        obj.insert(QString("ConstantInitializationVector"), ::OpenAPI::toJsonValue(m_constant_initialization_vector));
    }
    if (m_encryption_method.isSet()) {
        obj.insert(QString("EncryptionMethod"), ::OpenAPI::toJsonValue(m_encryption_method));
    }
    if (m_initialization_vector_in_manifest.isSet()) {
        obj.insert(QString("InitializationVectorInManifest"), ::OpenAPI::toJsonValue(m_initialization_vector_in_manifest));
    }
    if (m_offline_encrypted.isSet()) {
        obj.insert(QString("OfflineEncrypted"), ::OpenAPI::toJsonValue(m_offline_encrypted));
    }
    if (m_speke_key_provider.isSet()) {
        obj.insert(QString("SpekeKeyProvider"), ::OpenAPI::toJsonValue(m_speke_key_provider));
    }
    if (m_static_key_provider.isSet()) {
        obj.insert(QString("StaticKeyProvider"), ::OpenAPI::toJsonValue(m_static_key_provider));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIHlsEncryptionSettings::getConstantInitializationVector() const {
    return m_constant_initialization_vector;
}
void OAIHlsEncryptionSettings::setConstantInitializationVector(const QString &constant_initialization_vector) {
    m_constant_initialization_vector = constant_initialization_vector;
    m_constant_initialization_vector_isSet = true;
}

bool OAIHlsEncryptionSettings::is_constant_initialization_vector_Set() const{
    return m_constant_initialization_vector_isSet;
}

bool OAIHlsEncryptionSettings::is_constant_initialization_vector_Valid() const{
    return m_constant_initialization_vector_isValid;
}

OAIHlsEncryptionType OAIHlsEncryptionSettings::getEncryptionMethod() const {
    return m_encryption_method;
}
void OAIHlsEncryptionSettings::setEncryptionMethod(const OAIHlsEncryptionType &encryption_method) {
    m_encryption_method = encryption_method;
    m_encryption_method_isSet = true;
}

bool OAIHlsEncryptionSettings::is_encryption_method_Set() const{
    return m_encryption_method_isSet;
}

bool OAIHlsEncryptionSettings::is_encryption_method_Valid() const{
    return m_encryption_method_isValid;
}

OAIHlsInitializationVectorInManifest OAIHlsEncryptionSettings::getInitializationVectorInManifest() const {
    return m_initialization_vector_in_manifest;
}
void OAIHlsEncryptionSettings::setInitializationVectorInManifest(const OAIHlsInitializationVectorInManifest &initialization_vector_in_manifest) {
    m_initialization_vector_in_manifest = initialization_vector_in_manifest;
    m_initialization_vector_in_manifest_isSet = true;
}

bool OAIHlsEncryptionSettings::is_initialization_vector_in_manifest_Set() const{
    return m_initialization_vector_in_manifest_isSet;
}

bool OAIHlsEncryptionSettings::is_initialization_vector_in_manifest_Valid() const{
    return m_initialization_vector_in_manifest_isValid;
}

OAIHlsOfflineEncrypted OAIHlsEncryptionSettings::getOfflineEncrypted() const {
    return m_offline_encrypted;
}
void OAIHlsEncryptionSettings::setOfflineEncrypted(const OAIHlsOfflineEncrypted &offline_encrypted) {
    m_offline_encrypted = offline_encrypted;
    m_offline_encrypted_isSet = true;
}

bool OAIHlsEncryptionSettings::is_offline_encrypted_Set() const{
    return m_offline_encrypted_isSet;
}

bool OAIHlsEncryptionSettings::is_offline_encrypted_Valid() const{
    return m_offline_encrypted_isValid;
}

OAIDashIsoEncryptionSettings_SpekeKeyProvider OAIHlsEncryptionSettings::getSpekeKeyProvider() const {
    return m_speke_key_provider;
}
void OAIHlsEncryptionSettings::setSpekeKeyProvider(const OAIDashIsoEncryptionSettings_SpekeKeyProvider &speke_key_provider) {
    m_speke_key_provider = speke_key_provider;
    m_speke_key_provider_isSet = true;
}

bool OAIHlsEncryptionSettings::is_speke_key_provider_Set() const{
    return m_speke_key_provider_isSet;
}

bool OAIHlsEncryptionSettings::is_speke_key_provider_Valid() const{
    return m_speke_key_provider_isValid;
}

OAICmafEncryptionSettings_StaticKeyProvider OAIHlsEncryptionSettings::getStaticKeyProvider() const {
    return m_static_key_provider;
}
void OAIHlsEncryptionSettings::setStaticKeyProvider(const OAICmafEncryptionSettings_StaticKeyProvider &static_key_provider) {
    m_static_key_provider = static_key_provider;
    m_static_key_provider_isSet = true;
}

bool OAIHlsEncryptionSettings::is_static_key_provider_Set() const{
    return m_static_key_provider_isSet;
}

bool OAIHlsEncryptionSettings::is_static_key_provider_Valid() const{
    return m_static_key_provider_isValid;
}

OAIHlsKeyProviderType OAIHlsEncryptionSettings::getType() const {
    return m_type;
}
void OAIHlsEncryptionSettings::setType(const OAIHlsKeyProviderType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHlsEncryptionSettings::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHlsEncryptionSettings::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIHlsEncryptionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constant_initialization_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_vector_in_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_encrypted.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speke_key_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_key_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsEncryptionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
