/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePreset_request_settings_ContainerSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePreset_request_settings_ContainerSettings::OAICreatePreset_request_settings_ContainerSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePreset_request_settings_ContainerSettings::OAICreatePreset_request_settings_ContainerSettings() {
    this->initializeModel();
}

OAICreatePreset_request_settings_ContainerSettings::~OAICreatePreset_request_settings_ContainerSettings() {}

void OAICreatePreset_request_settings_ContainerSettings::initializeModel() {

    m_cmfc_settings_isSet = false;
    m_cmfc_settings_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_f4v_settings_isSet = false;
    m_f4v_settings_isValid = false;

    m_m2ts_settings_isSet = false;
    m_m2ts_settings_isValid = false;

    m_m3u8_settings_isSet = false;
    m_m3u8_settings_isValid = false;

    m_mov_settings_isSet = false;
    m_mov_settings_isValid = false;

    m_mp4_settings_isSet = false;
    m_mp4_settings_isValid = false;

    m_mpd_settings_isSet = false;
    m_mpd_settings_isValid = false;

    m_mxf_settings_isSet = false;
    m_mxf_settings_isValid = false;
}

void OAICreatePreset_request_settings_ContainerSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePreset_request_settings_ContainerSettings::fromJsonObject(QJsonObject json) {

    m_cmfc_settings_isValid = ::OpenAPI::fromJsonValue(m_cmfc_settings, json[QString("CmfcSettings")]);
    m_cmfc_settings_isSet = !json[QString("CmfcSettings")].isNull() && m_cmfc_settings_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("Container")]);
    m_container_isSet = !json[QString("Container")].isNull() && m_container_isValid;

    m_f4v_settings_isValid = ::OpenAPI::fromJsonValue(m_f4v_settings, json[QString("F4vSettings")]);
    m_f4v_settings_isSet = !json[QString("F4vSettings")].isNull() && m_f4v_settings_isValid;

    m_m2ts_settings_isValid = ::OpenAPI::fromJsonValue(m_m2ts_settings, json[QString("M2tsSettings")]);
    m_m2ts_settings_isSet = !json[QString("M2tsSettings")].isNull() && m_m2ts_settings_isValid;

    m_m3u8_settings_isValid = ::OpenAPI::fromJsonValue(m_m3u8_settings, json[QString("M3u8Settings")]);
    m_m3u8_settings_isSet = !json[QString("M3u8Settings")].isNull() && m_m3u8_settings_isValid;

    m_mov_settings_isValid = ::OpenAPI::fromJsonValue(m_mov_settings, json[QString("MovSettings")]);
    m_mov_settings_isSet = !json[QString("MovSettings")].isNull() && m_mov_settings_isValid;

    m_mp4_settings_isValid = ::OpenAPI::fromJsonValue(m_mp4_settings, json[QString("Mp4Settings")]);
    m_mp4_settings_isSet = !json[QString("Mp4Settings")].isNull() && m_mp4_settings_isValid;

    m_mpd_settings_isValid = ::OpenAPI::fromJsonValue(m_mpd_settings, json[QString("MpdSettings")]);
    m_mpd_settings_isSet = !json[QString("MpdSettings")].isNull() && m_mpd_settings_isValid;

    m_mxf_settings_isValid = ::OpenAPI::fromJsonValue(m_mxf_settings, json[QString("MxfSettings")]);
    m_mxf_settings_isSet = !json[QString("MxfSettings")].isNull() && m_mxf_settings_isValid;
}

QString OAICreatePreset_request_settings_ContainerSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePreset_request_settings_ContainerSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_cmfc_settings.isSet()) {
        obj.insert(QString("CmfcSettings"), ::OpenAPI::toJsonValue(m_cmfc_settings));
    }
    if (m_container.isSet()) {
        obj.insert(QString("Container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_f4v_settings.isSet()) {
        obj.insert(QString("F4vSettings"), ::OpenAPI::toJsonValue(m_f4v_settings));
    }
    if (m_m2ts_settings.isSet()) {
        obj.insert(QString("M2tsSettings"), ::OpenAPI::toJsonValue(m_m2ts_settings));
    }
    if (m_m3u8_settings.isSet()) {
        obj.insert(QString("M3u8Settings"), ::OpenAPI::toJsonValue(m_m3u8_settings));
    }
    if (m_mov_settings.isSet()) {
        obj.insert(QString("MovSettings"), ::OpenAPI::toJsonValue(m_mov_settings));
    }
    if (m_mp4_settings.isSet()) {
        obj.insert(QString("Mp4Settings"), ::OpenAPI::toJsonValue(m_mp4_settings));
    }
    if (m_mpd_settings.isSet()) {
        obj.insert(QString("MpdSettings"), ::OpenAPI::toJsonValue(m_mpd_settings));
    }
    if (m_mxf_settings.isSet()) {
        obj.insert(QString("MxfSettings"), ::OpenAPI::toJsonValue(m_mxf_settings));
    }
    return obj;
}

OAIContainerSettings_CmfcSettings OAICreatePreset_request_settings_ContainerSettings::getCmfcSettings() const {
    return m_cmfc_settings;
}
void OAICreatePreset_request_settings_ContainerSettings::setCmfcSettings(const OAIContainerSettings_CmfcSettings &cmfc_settings) {
    m_cmfc_settings = cmfc_settings;
    m_cmfc_settings_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_cmfc_settings_Set() const{
    return m_cmfc_settings_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_cmfc_settings_Valid() const{
    return m_cmfc_settings_isValid;
}

OAIContainerType OAICreatePreset_request_settings_ContainerSettings::getContainer() const {
    return m_container;
}
void OAICreatePreset_request_settings_ContainerSettings::setContainer(const OAIContainerType &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_container_Set() const{
    return m_container_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_container_Valid() const{
    return m_container_isValid;
}

OAIContainerSettings_F4vSettings OAICreatePreset_request_settings_ContainerSettings::getF4vSettings() const {
    return m_f4v_settings;
}
void OAICreatePreset_request_settings_ContainerSettings::setF4vSettings(const OAIContainerSettings_F4vSettings &f4v_settings) {
    m_f4v_settings = f4v_settings;
    m_f4v_settings_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_f4v_settings_Set() const{
    return m_f4v_settings_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_f4v_settings_Valid() const{
    return m_f4v_settings_isValid;
}

OAIContainerSettings_M2tsSettings OAICreatePreset_request_settings_ContainerSettings::getM2tsSettings() const {
    return m_m2ts_settings;
}
void OAICreatePreset_request_settings_ContainerSettings::setM2tsSettings(const OAIContainerSettings_M2tsSettings &m2ts_settings) {
    m_m2ts_settings = m2ts_settings;
    m_m2ts_settings_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_m2ts_settings_Set() const{
    return m_m2ts_settings_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_m2ts_settings_Valid() const{
    return m_m2ts_settings_isValid;
}

OAIContainerSettings_M3u8Settings OAICreatePreset_request_settings_ContainerSettings::getM3u8Settings() const {
    return m_m3u8_settings;
}
void OAICreatePreset_request_settings_ContainerSettings::setM3u8Settings(const OAIContainerSettings_M3u8Settings &m3u8_settings) {
    m_m3u8_settings = m3u8_settings;
    m_m3u8_settings_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_m3u8_settings_Set() const{
    return m_m3u8_settings_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_m3u8_settings_Valid() const{
    return m_m3u8_settings_isValid;
}

OAIContainerSettings_MovSettings OAICreatePreset_request_settings_ContainerSettings::getMovSettings() const {
    return m_mov_settings;
}
void OAICreatePreset_request_settings_ContainerSettings::setMovSettings(const OAIContainerSettings_MovSettings &mov_settings) {
    m_mov_settings = mov_settings;
    m_mov_settings_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_mov_settings_Set() const{
    return m_mov_settings_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_mov_settings_Valid() const{
    return m_mov_settings_isValid;
}

OAIContainerSettings_Mp4Settings OAICreatePreset_request_settings_ContainerSettings::getMp4Settings() const {
    return m_mp4_settings;
}
void OAICreatePreset_request_settings_ContainerSettings::setMp4Settings(const OAIContainerSettings_Mp4Settings &mp4_settings) {
    m_mp4_settings = mp4_settings;
    m_mp4_settings_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_mp4_settings_Set() const{
    return m_mp4_settings_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_mp4_settings_Valid() const{
    return m_mp4_settings_isValid;
}

OAIContainerSettings_MpdSettings OAICreatePreset_request_settings_ContainerSettings::getMpdSettings() const {
    return m_mpd_settings;
}
void OAICreatePreset_request_settings_ContainerSettings::setMpdSettings(const OAIContainerSettings_MpdSettings &mpd_settings) {
    m_mpd_settings = mpd_settings;
    m_mpd_settings_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_mpd_settings_Set() const{
    return m_mpd_settings_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_mpd_settings_Valid() const{
    return m_mpd_settings_isValid;
}

OAIContainerSettings_MxfSettings OAICreatePreset_request_settings_ContainerSettings::getMxfSettings() const {
    return m_mxf_settings;
}
void OAICreatePreset_request_settings_ContainerSettings::setMxfSettings(const OAIContainerSettings_MxfSettings &mxf_settings) {
    m_mxf_settings = mxf_settings;
    m_mxf_settings_isSet = true;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_mxf_settings_Set() const{
    return m_mxf_settings_isSet;
}

bool OAICreatePreset_request_settings_ContainerSettings::is_mxf_settings_Valid() const{
    return m_mxf_settings_isValid;
}

bool OAICreatePreset_request_settings_ContainerSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cmfc_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_f4v_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_m2ts_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_m3u8_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mov_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpd_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mxf_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePreset_request_settings_ContainerSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
