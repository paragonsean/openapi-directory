/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3DestinationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3DestinationSettings::OAIS3DestinationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3DestinationSettings::OAIS3DestinationSettings() {
    this->initializeModel();
}

OAIS3DestinationSettings::~OAIS3DestinationSettings() {}

void OAIS3DestinationSettings::initializeModel() {

    m_access_control_isSet = false;
    m_access_control_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;
}

void OAIS3DestinationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3DestinationSettings::fromJsonObject(QJsonObject json) {

    m_access_control_isValid = ::OpenAPI::fromJsonValue(m_access_control, json[QString("AccessControl")]);
    m_access_control_isSet = !json[QString("AccessControl")].isNull() && m_access_control_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;
}

QString OAIS3DestinationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3DestinationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_access_control.isSet()) {
        obj.insert(QString("AccessControl"), ::OpenAPI::toJsonValue(m_access_control));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    return obj;
}

OAIS3DestinationSettings_AccessControl OAIS3DestinationSettings::getAccessControl() const {
    return m_access_control;
}
void OAIS3DestinationSettings::setAccessControl(const OAIS3DestinationSettings_AccessControl &access_control) {
    m_access_control = access_control;
    m_access_control_isSet = true;
}

bool OAIS3DestinationSettings::is_access_control_Set() const{
    return m_access_control_isSet;
}

bool OAIS3DestinationSettings::is_access_control_Valid() const{
    return m_access_control_isValid;
}

OAIS3DestinationSettings_Encryption OAIS3DestinationSettings::getEncryption() const {
    return m_encryption;
}
void OAIS3DestinationSettings::setEncryption(const OAIS3DestinationSettings_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIS3DestinationSettings::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIS3DestinationSettings::is_encryption_Valid() const{
    return m_encryption_isValid;
}

bool OAIS3DestinationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3DestinationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
