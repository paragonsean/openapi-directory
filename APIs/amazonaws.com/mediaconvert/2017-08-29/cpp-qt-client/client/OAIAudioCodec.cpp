/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioCodec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioCodec::OAIAudioCodec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioCodec::OAIAudioCodec() {
    this->initializeModel();
}

OAIAudioCodec::~OAIAudioCodec() {}

void OAIAudioCodec::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAudioCodec::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAudioCodec::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AAC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::AAC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MP2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::MP2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MP3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::MP3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::WAV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AIFF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::AIFF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AC3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::AC3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EAC3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::EAC3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EAC3_ATMOS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::EAC3_ATMOS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VORBIS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::VORBIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::OPUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PASSTHROUGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioCodec::PASSTHROUGH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAudioCodec::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAudioCodec::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAudioCodec::AAC:
            val = "AAC";
            break;
        case eOAIAudioCodec::MP2:
            val = "MP2";
            break;
        case eOAIAudioCodec::MP3:
            val = "MP3";
            break;
        case eOAIAudioCodec::WAV:
            val = "WAV";
            break;
        case eOAIAudioCodec::AIFF:
            val = "AIFF";
            break;
        case eOAIAudioCodec::AC3:
            val = "AC3";
            break;
        case eOAIAudioCodec::EAC3:
            val = "EAC3";
            break;
        case eOAIAudioCodec::EAC3_ATMOS:
            val = "EAC3_ATMOS";
            break;
        case eOAIAudioCodec::VORBIS:
            val = "VORBIS";
            break;
        case eOAIAudioCodec::OPUS:
            val = "OPUS";
            break;
        case eOAIAudioCodec::PASSTHROUGH:
            val = "PASSTHROUGH";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAudioCodec::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAudioCodec::eOAIAudioCodec OAIAudioCodec::getValue() const {
    return m_value;
}

void OAIAudioCodec::setValue(const OAIAudioCodec::eOAIAudioCodec& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAudioCodec::isSet() const {
    
    return m_value_isSet;
}

bool OAIAudioCodec::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
