/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedSourceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedSourceSettings::OAIEmbeddedSourceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedSourceSettings::OAIEmbeddedSourceSettings() {
    this->initializeModel();
}

OAIEmbeddedSourceSettings::~OAIEmbeddedSourceSettings() {}

void OAIEmbeddedSourceSettings::initializeModel() {

    m_convert608_to708_isSet = false;
    m_convert608_to708_isValid = false;

    m_source608_channel_number_isSet = false;
    m_source608_channel_number_isValid = false;

    m_source608_track_number_isSet = false;
    m_source608_track_number_isValid = false;

    m_terminate_captions_isSet = false;
    m_terminate_captions_isValid = false;
}

void OAIEmbeddedSourceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedSourceSettings::fromJsonObject(QJsonObject json) {

    m_convert608_to708_isValid = ::OpenAPI::fromJsonValue(m_convert608_to708, json[QString("Convert608To708")]);
    m_convert608_to708_isSet = !json[QString("Convert608To708")].isNull() && m_convert608_to708_isValid;

    m_source608_channel_number_isValid = ::OpenAPI::fromJsonValue(m_source608_channel_number, json[QString("Source608ChannelNumber")]);
    m_source608_channel_number_isSet = !json[QString("Source608ChannelNumber")].isNull() && m_source608_channel_number_isValid;

    m_source608_track_number_isValid = ::OpenAPI::fromJsonValue(m_source608_track_number, json[QString("Source608TrackNumber")]);
    m_source608_track_number_isSet = !json[QString("Source608TrackNumber")].isNull() && m_source608_track_number_isValid;

    m_terminate_captions_isValid = ::OpenAPI::fromJsonValue(m_terminate_captions, json[QString("TerminateCaptions")]);
    m_terminate_captions_isSet = !json[QString("TerminateCaptions")].isNull() && m_terminate_captions_isValid;
}

QString OAIEmbeddedSourceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedSourceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_convert608_to708.isSet()) {
        obj.insert(QString("Convert608To708"), ::OpenAPI::toJsonValue(m_convert608_to708));
    }
    if (m_source608_channel_number_isSet) {
        obj.insert(QString("Source608ChannelNumber"), ::OpenAPI::toJsonValue(m_source608_channel_number));
    }
    if (m_source608_track_number_isSet) {
        obj.insert(QString("Source608TrackNumber"), ::OpenAPI::toJsonValue(m_source608_track_number));
    }
    if (m_terminate_captions.isSet()) {
        obj.insert(QString("TerminateCaptions"), ::OpenAPI::toJsonValue(m_terminate_captions));
    }
    return obj;
}

OAIEmbeddedConvert608To708 OAIEmbeddedSourceSettings::getConvert608To708() const {
    return m_convert608_to708;
}
void OAIEmbeddedSourceSettings::setConvert608To708(const OAIEmbeddedConvert608To708 &convert608_to708) {
    m_convert608_to708 = convert608_to708;
    m_convert608_to708_isSet = true;
}

bool OAIEmbeddedSourceSettings::is_convert608_to708_Set() const{
    return m_convert608_to708_isSet;
}

bool OAIEmbeddedSourceSettings::is_convert608_to708_Valid() const{
    return m_convert608_to708_isValid;
}

qint32 OAIEmbeddedSourceSettings::getSource608ChannelNumber() const {
    return m_source608_channel_number;
}
void OAIEmbeddedSourceSettings::setSource608ChannelNumber(const qint32 &source608_channel_number) {
    m_source608_channel_number = source608_channel_number;
    m_source608_channel_number_isSet = true;
}

bool OAIEmbeddedSourceSettings::is_source608_channel_number_Set() const{
    return m_source608_channel_number_isSet;
}

bool OAIEmbeddedSourceSettings::is_source608_channel_number_Valid() const{
    return m_source608_channel_number_isValid;
}

qint32 OAIEmbeddedSourceSettings::getSource608TrackNumber() const {
    return m_source608_track_number;
}
void OAIEmbeddedSourceSettings::setSource608TrackNumber(const qint32 &source608_track_number) {
    m_source608_track_number = source608_track_number;
    m_source608_track_number_isSet = true;
}

bool OAIEmbeddedSourceSettings::is_source608_track_number_Set() const{
    return m_source608_track_number_isSet;
}

bool OAIEmbeddedSourceSettings::is_source608_track_number_Valid() const{
    return m_source608_track_number_isValid;
}

OAIEmbeddedTerminateCaptions OAIEmbeddedSourceSettings::getTerminateCaptions() const {
    return m_terminate_captions;
}
void OAIEmbeddedSourceSettings::setTerminateCaptions(const OAIEmbeddedTerminateCaptions &terminate_captions) {
    m_terminate_captions = terminate_captions;
    m_terminate_captions_isSet = true;
}

bool OAIEmbeddedSourceSettings::is_terminate_captions_Set() const{
    return m_terminate_captions_isSet;
}

bool OAIEmbeddedSourceSettings::is_terminate_captions_Valid() const{
    return m_terminate_captions_isValid;
}

bool OAIEmbeddedSourceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_convert608_to708.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source608_channel_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source608_track_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminate_captions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedSourceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
