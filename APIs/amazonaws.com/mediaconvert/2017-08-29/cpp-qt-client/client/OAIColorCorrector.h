/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIColorCorrector.h
 *
 * Settings for color correction.
 */

#ifndef OAIColorCorrector_H
#define OAIColorCorrector_H

#include <QJsonObject>

#include "OAIColorCorrector_ClipLimits.h"
#include "OAIColorCorrector_Hdr10Metadata.h"
#include "OAIColorSpaceConversion.h"
#include "OAIHDRToSDRToneMapper.h"
#include "OAISampleRangeConversion.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIColorCorrector_ClipLimits;
class OAIColorCorrector_Hdr10Metadata;

class OAIColorCorrector : public OAIObject {
public:
    OAIColorCorrector();
    OAIColorCorrector(QString json);
    ~OAIColorCorrector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBrightness() const;
    void setBrightness(const qint32 &brightness);
    bool is_brightness_Set() const;
    bool is_brightness_Valid() const;

    OAIColorCorrector_ClipLimits getClipLimits() const;
    void setClipLimits(const OAIColorCorrector_ClipLimits &clip_limits);
    bool is_clip_limits_Set() const;
    bool is_clip_limits_Valid() const;

    OAIColorSpaceConversion getColorSpaceConversion() const;
    void setColorSpaceConversion(const OAIColorSpaceConversion &color_space_conversion);
    bool is_color_space_conversion_Set() const;
    bool is_color_space_conversion_Valid() const;

    qint32 getContrast() const;
    void setContrast(const qint32 &contrast);
    bool is_contrast_Set() const;
    bool is_contrast_Valid() const;

    OAIColorCorrector_Hdr10Metadata getHdr10Metadata() const;
    void setHdr10Metadata(const OAIColorCorrector_Hdr10Metadata &hdr10_metadata);
    bool is_hdr10_metadata_Set() const;
    bool is_hdr10_metadata_Valid() const;

    OAIHDRToSDRToneMapper getHdrToSdrToneMapper() const;
    void setHdrToSdrToneMapper(const OAIHDRToSDRToneMapper &hdr_to_sdr_tone_mapper);
    bool is_hdr_to_sdr_tone_mapper_Set() const;
    bool is_hdr_to_sdr_tone_mapper_Valid() const;

    qint32 getHue() const;
    void setHue(const qint32 &hue);
    bool is_hue_Set() const;
    bool is_hue_Valid() const;

    OAISampleRangeConversion getSampleRangeConversion() const;
    void setSampleRangeConversion(const OAISampleRangeConversion &sample_range_conversion);
    bool is_sample_range_conversion_Set() const;
    bool is_sample_range_conversion_Valid() const;

    qint32 getSaturation() const;
    void setSaturation(const qint32 &saturation);
    bool is_saturation_Set() const;
    bool is_saturation_Valid() const;

    qint32 getSdrReferenceWhiteLevel() const;
    void setSdrReferenceWhiteLevel(const qint32 &sdr_reference_white_level);
    bool is_sdr_reference_white_level_Set() const;
    bool is_sdr_reference_white_level_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_brightness;
    bool m_brightness_isSet;
    bool m_brightness_isValid;

    OAIColorCorrector_ClipLimits m_clip_limits;
    bool m_clip_limits_isSet;
    bool m_clip_limits_isValid;

    OAIColorSpaceConversion m_color_space_conversion;
    bool m_color_space_conversion_isSet;
    bool m_color_space_conversion_isValid;

    qint32 m_contrast;
    bool m_contrast_isSet;
    bool m_contrast_isValid;

    OAIColorCorrector_Hdr10Metadata m_hdr10_metadata;
    bool m_hdr10_metadata_isSet;
    bool m_hdr10_metadata_isValid;

    OAIHDRToSDRToneMapper m_hdr_to_sdr_tone_mapper;
    bool m_hdr_to_sdr_tone_mapper_isSet;
    bool m_hdr_to_sdr_tone_mapper_isValid;

    qint32 m_hue;
    bool m_hue_isSet;
    bool m_hue_isValid;

    OAISampleRangeConversion m_sample_range_conversion;
    bool m_sample_range_conversion_isSet;
    bool m_sample_range_conversion_isValid;

    qint32 m_saturation;
    bool m_saturation_isSet;
    bool m_saturation_isValid;

    qint32 m_sdr_reference_white_level;
    bool m_sdr_reference_white_level_isSet;
    bool m_sdr_reference_white_level_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIColorCorrector)

#endif // OAIColorCorrector_H
