/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPolicyResponse_Policy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPolicyResponse_Policy::OAIGetPolicyResponse_Policy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPolicyResponse_Policy::OAIGetPolicyResponse_Policy() {
    this->initializeModel();
}

OAIGetPolicyResponse_Policy::~OAIGetPolicyResponse_Policy() {}

void OAIGetPolicyResponse_Policy::initializeModel() {

    m_http_inputs_isSet = false;
    m_http_inputs_isValid = false;

    m_https_inputs_isSet = false;
    m_https_inputs_isValid = false;

    m_s3_inputs_isSet = false;
    m_s3_inputs_isValid = false;
}

void OAIGetPolicyResponse_Policy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPolicyResponse_Policy::fromJsonObject(QJsonObject json) {

    m_http_inputs_isValid = ::OpenAPI::fromJsonValue(m_http_inputs, json[QString("HttpInputs")]);
    m_http_inputs_isSet = !json[QString("HttpInputs")].isNull() && m_http_inputs_isValid;

    m_https_inputs_isValid = ::OpenAPI::fromJsonValue(m_https_inputs, json[QString("HttpsInputs")]);
    m_https_inputs_isSet = !json[QString("HttpsInputs")].isNull() && m_https_inputs_isValid;

    m_s3_inputs_isValid = ::OpenAPI::fromJsonValue(m_s3_inputs, json[QString("S3Inputs")]);
    m_s3_inputs_isSet = !json[QString("S3Inputs")].isNull() && m_s3_inputs_isValid;
}

QString OAIGetPolicyResponse_Policy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPolicyResponse_Policy::asJsonObject() const {
    QJsonObject obj;
    if (m_http_inputs.isSet()) {
        obj.insert(QString("HttpInputs"), ::OpenAPI::toJsonValue(m_http_inputs));
    }
    if (m_https_inputs.isSet()) {
        obj.insert(QString("HttpsInputs"), ::OpenAPI::toJsonValue(m_https_inputs));
    }
    if (m_s3_inputs.isSet()) {
        obj.insert(QString("S3Inputs"), ::OpenAPI::toJsonValue(m_s3_inputs));
    }
    return obj;
}

OAIInputPolicy OAIGetPolicyResponse_Policy::getHttpInputs() const {
    return m_http_inputs;
}
void OAIGetPolicyResponse_Policy::setHttpInputs(const OAIInputPolicy &http_inputs) {
    m_http_inputs = http_inputs;
    m_http_inputs_isSet = true;
}

bool OAIGetPolicyResponse_Policy::is_http_inputs_Set() const{
    return m_http_inputs_isSet;
}

bool OAIGetPolicyResponse_Policy::is_http_inputs_Valid() const{
    return m_http_inputs_isValid;
}

OAIInputPolicy OAIGetPolicyResponse_Policy::getHttpsInputs() const {
    return m_https_inputs;
}
void OAIGetPolicyResponse_Policy::setHttpsInputs(const OAIInputPolicy &https_inputs) {
    m_https_inputs = https_inputs;
    m_https_inputs_isSet = true;
}

bool OAIGetPolicyResponse_Policy::is_https_inputs_Set() const{
    return m_https_inputs_isSet;
}

bool OAIGetPolicyResponse_Policy::is_https_inputs_Valid() const{
    return m_https_inputs_isValid;
}

OAIInputPolicy OAIGetPolicyResponse_Policy::getS3Inputs() const {
    return m_s3_inputs;
}
void OAIGetPolicyResponse_Policy::setS3Inputs(const OAIInputPolicy &s3_inputs) {
    m_s3_inputs = s3_inputs;
    m_s3_inputs_isSet = true;
}

bool OAIGetPolicyResponse_Policy::is_s3_inputs_Set() const{
    return m_s3_inputs_isSet;
}

bool OAIGetPolicyResponse_Policy::is_s3_inputs_Valid() const{
    return m_s3_inputs_isValid;
}

bool OAIGetPolicyResponse_Policy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPolicyResponse_Policy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
