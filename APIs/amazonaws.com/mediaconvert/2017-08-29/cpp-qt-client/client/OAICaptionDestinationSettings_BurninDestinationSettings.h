/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICaptionDestinationSettings_BurninDestinationSettings.h
 *
 * 
 */

#ifndef OAICaptionDestinationSettings_BurninDestinationSettings_H
#define OAICaptionDestinationSettings_BurninDestinationSettings_H

#include <QJsonObject>

#include "OAIBurnInSubtitleStylePassthrough.h"
#include "OAIBurninSubtitleAlignment.h"
#include "OAIBurninSubtitleApplyFontColor.h"
#include "OAIBurninSubtitleBackgroundColor.h"
#include "OAIBurninSubtitleFallbackFont.h"
#include "OAIBurninSubtitleFontColor.h"
#include "OAIBurninSubtitleOutlineColor.h"
#include "OAIBurninSubtitleShadowColor.h"
#include "OAIBurninSubtitleTeletextSpacing.h"
#include "OAIFontScript.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICaptionDestinationSettings_BurninDestinationSettings : public OAIObject {
public:
    OAICaptionDestinationSettings_BurninDestinationSettings();
    OAICaptionDestinationSettings_BurninDestinationSettings(QString json);
    ~OAICaptionDestinationSettings_BurninDestinationSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBurninSubtitleAlignment getAlignment() const;
    void setAlignment(const OAIBurninSubtitleAlignment &alignment);
    bool is_alignment_Set() const;
    bool is_alignment_Valid() const;

    OAIBurninSubtitleApplyFontColor getApplyFontColor() const;
    void setApplyFontColor(const OAIBurninSubtitleApplyFontColor &apply_font_color);
    bool is_apply_font_color_Set() const;
    bool is_apply_font_color_Valid() const;

    OAIBurninSubtitleBackgroundColor getBackgroundColor() const;
    void setBackgroundColor(const OAIBurninSubtitleBackgroundColor &background_color);
    bool is_background_color_Set() const;
    bool is_background_color_Valid() const;

    qint32 getBackgroundOpacity() const;
    void setBackgroundOpacity(const qint32 &background_opacity);
    bool is_background_opacity_Set() const;
    bool is_background_opacity_Valid() const;

    OAIBurninSubtitleFallbackFont getFallbackFont() const;
    void setFallbackFont(const OAIBurninSubtitleFallbackFont &fallback_font);
    bool is_fallback_font_Set() const;
    bool is_fallback_font_Valid() const;

    OAIBurninSubtitleFontColor getFontColor() const;
    void setFontColor(const OAIBurninSubtitleFontColor &font_color);
    bool is_font_color_Set() const;
    bool is_font_color_Valid() const;

    qint32 getFontOpacity() const;
    void setFontOpacity(const qint32 &font_opacity);
    bool is_font_opacity_Set() const;
    bool is_font_opacity_Valid() const;

    qint32 getFontResolution() const;
    void setFontResolution(const qint32 &font_resolution);
    bool is_font_resolution_Set() const;
    bool is_font_resolution_Valid() const;

    OAIFontScript getFontScript() const;
    void setFontScript(const OAIFontScript &font_script);
    bool is_font_script_Set() const;
    bool is_font_script_Valid() const;

    qint32 getFontSize() const;
    void setFontSize(const qint32 &font_size);
    bool is_font_size_Set() const;
    bool is_font_size_Valid() const;

    QString getHexFontColor() const;
    void setHexFontColor(const QString &hex_font_color);
    bool is_hex_font_color_Set() const;
    bool is_hex_font_color_Valid() const;

    OAIBurninSubtitleOutlineColor getOutlineColor() const;
    void setOutlineColor(const OAIBurninSubtitleOutlineColor &outline_color);
    bool is_outline_color_Set() const;
    bool is_outline_color_Valid() const;

    qint32 getOutlineSize() const;
    void setOutlineSize(const qint32 &outline_size);
    bool is_outline_size_Set() const;
    bool is_outline_size_Valid() const;

    OAIBurninSubtitleShadowColor getShadowColor() const;
    void setShadowColor(const OAIBurninSubtitleShadowColor &shadow_color);
    bool is_shadow_color_Set() const;
    bool is_shadow_color_Valid() const;

    qint32 getShadowOpacity() const;
    void setShadowOpacity(const qint32 &shadow_opacity);
    bool is_shadow_opacity_Set() const;
    bool is_shadow_opacity_Valid() const;

    qint32 getShadowXOffset() const;
    void setShadowXOffset(const qint32 &shadow_x_offset);
    bool is_shadow_x_offset_Set() const;
    bool is_shadow_x_offset_Valid() const;

    qint32 getShadowYOffset() const;
    void setShadowYOffset(const qint32 &shadow_y_offset);
    bool is_shadow_y_offset_Set() const;
    bool is_shadow_y_offset_Valid() const;

    OAIBurnInSubtitleStylePassthrough getStylePassthrough() const;
    void setStylePassthrough(const OAIBurnInSubtitleStylePassthrough &style_passthrough);
    bool is_style_passthrough_Set() const;
    bool is_style_passthrough_Valid() const;

    OAIBurninSubtitleTeletextSpacing getTeletextSpacing() const;
    void setTeletextSpacing(const OAIBurninSubtitleTeletextSpacing &teletext_spacing);
    bool is_teletext_spacing_Set() const;
    bool is_teletext_spacing_Valid() const;

    qint32 getXPosition() const;
    void setXPosition(const qint32 &x_position);
    bool is_x_position_Set() const;
    bool is_x_position_Valid() const;

    qint32 getYPosition() const;
    void setYPosition(const qint32 &y_position);
    bool is_y_position_Set() const;
    bool is_y_position_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBurninSubtitleAlignment m_alignment;
    bool m_alignment_isSet;
    bool m_alignment_isValid;

    OAIBurninSubtitleApplyFontColor m_apply_font_color;
    bool m_apply_font_color_isSet;
    bool m_apply_font_color_isValid;

    OAIBurninSubtitleBackgroundColor m_background_color;
    bool m_background_color_isSet;
    bool m_background_color_isValid;

    qint32 m_background_opacity;
    bool m_background_opacity_isSet;
    bool m_background_opacity_isValid;

    OAIBurninSubtitleFallbackFont m_fallback_font;
    bool m_fallback_font_isSet;
    bool m_fallback_font_isValid;

    OAIBurninSubtitleFontColor m_font_color;
    bool m_font_color_isSet;
    bool m_font_color_isValid;

    qint32 m_font_opacity;
    bool m_font_opacity_isSet;
    bool m_font_opacity_isValid;

    qint32 m_font_resolution;
    bool m_font_resolution_isSet;
    bool m_font_resolution_isValid;

    OAIFontScript m_font_script;
    bool m_font_script_isSet;
    bool m_font_script_isValid;

    qint32 m_font_size;
    bool m_font_size_isSet;
    bool m_font_size_isValid;

    QString m_hex_font_color;
    bool m_hex_font_color_isSet;
    bool m_hex_font_color_isValid;

    OAIBurninSubtitleOutlineColor m_outline_color;
    bool m_outline_color_isSet;
    bool m_outline_color_isValid;

    qint32 m_outline_size;
    bool m_outline_size_isSet;
    bool m_outline_size_isValid;

    OAIBurninSubtitleShadowColor m_shadow_color;
    bool m_shadow_color_isSet;
    bool m_shadow_color_isValid;

    qint32 m_shadow_opacity;
    bool m_shadow_opacity_isSet;
    bool m_shadow_opacity_isValid;

    qint32 m_shadow_x_offset;
    bool m_shadow_x_offset_isSet;
    bool m_shadow_x_offset_isValid;

    qint32 m_shadow_y_offset;
    bool m_shadow_y_offset_isSet;
    bool m_shadow_y_offset_isValid;

    OAIBurnInSubtitleStylePassthrough m_style_passthrough;
    bool m_style_passthrough_isSet;
    bool m_style_passthrough_isValid;

    OAIBurninSubtitleTeletextSpacing m_teletext_spacing;
    bool m_teletext_spacing_isSet;
    bool m_teletext_spacing_isValid;

    qint32 m_x_position;
    bool m_x_position_isSet;
    bool m_x_position_isValid;

    qint32 m_y_position;
    bool m_y_position_isSet;
    bool m_y_position_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICaptionDestinationSettings_BurninDestinationSettings)

#endif // OAICaptionDestinationSettings_BurninDestinationSettings_H
