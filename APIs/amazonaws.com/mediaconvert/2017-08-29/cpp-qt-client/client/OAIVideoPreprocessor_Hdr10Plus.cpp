/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoPreprocessor_Hdr10Plus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoPreprocessor_Hdr10Plus::OAIVideoPreprocessor_Hdr10Plus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoPreprocessor_Hdr10Plus::OAIVideoPreprocessor_Hdr10Plus() {
    this->initializeModel();
}

OAIVideoPreprocessor_Hdr10Plus::~OAIVideoPreprocessor_Hdr10Plus() {}

void OAIVideoPreprocessor_Hdr10Plus::initializeModel() {

    m_mastering_monitor_nits_isSet = false;
    m_mastering_monitor_nits_isValid = false;

    m_target_monitor_nits_isSet = false;
    m_target_monitor_nits_isValid = false;
}

void OAIVideoPreprocessor_Hdr10Plus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoPreprocessor_Hdr10Plus::fromJsonObject(QJsonObject json) {

    m_mastering_monitor_nits_isValid = ::OpenAPI::fromJsonValue(m_mastering_monitor_nits, json[QString("MasteringMonitorNits")]);
    m_mastering_monitor_nits_isSet = !json[QString("MasteringMonitorNits")].isNull() && m_mastering_monitor_nits_isValid;

    m_target_monitor_nits_isValid = ::OpenAPI::fromJsonValue(m_target_monitor_nits, json[QString("TargetMonitorNits")]);
    m_target_monitor_nits_isSet = !json[QString("TargetMonitorNits")].isNull() && m_target_monitor_nits_isValid;
}

QString OAIVideoPreprocessor_Hdr10Plus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoPreprocessor_Hdr10Plus::asJsonObject() const {
    QJsonObject obj;
    if (m_mastering_monitor_nits_isSet) {
        obj.insert(QString("MasteringMonitorNits"), ::OpenAPI::toJsonValue(m_mastering_monitor_nits));
    }
    if (m_target_monitor_nits_isSet) {
        obj.insert(QString("TargetMonitorNits"), ::OpenAPI::toJsonValue(m_target_monitor_nits));
    }
    return obj;
}

qint32 OAIVideoPreprocessor_Hdr10Plus::getMasteringMonitorNits() const {
    return m_mastering_monitor_nits;
}
void OAIVideoPreprocessor_Hdr10Plus::setMasteringMonitorNits(const qint32 &mastering_monitor_nits) {
    m_mastering_monitor_nits = mastering_monitor_nits;
    m_mastering_monitor_nits_isSet = true;
}

bool OAIVideoPreprocessor_Hdr10Plus::is_mastering_monitor_nits_Set() const{
    return m_mastering_monitor_nits_isSet;
}

bool OAIVideoPreprocessor_Hdr10Plus::is_mastering_monitor_nits_Valid() const{
    return m_mastering_monitor_nits_isValid;
}

qint32 OAIVideoPreprocessor_Hdr10Plus::getTargetMonitorNits() const {
    return m_target_monitor_nits;
}
void OAIVideoPreprocessor_Hdr10Plus::setTargetMonitorNits(const qint32 &target_monitor_nits) {
    m_target_monitor_nits = target_monitor_nits;
    m_target_monitor_nits_isSet = true;
}

bool OAIVideoPreprocessor_Hdr10Plus::is_target_monitor_nits_Set() const{
    return m_target_monitor_nits_isSet;
}

bool OAIVideoPreprocessor_Hdr10Plus::is_target_monitor_nits_Valid() const{
    return m_target_monitor_nits_isValid;
}

bool OAIVideoPreprocessor_Hdr10Plus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mastering_monitor_nits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_monitor_nits_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoPreprocessor_Hdr10Plus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
