/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioChannelTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioChannelTag::OAIAudioChannelTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioChannelTag::OAIAudioChannelTag() {
    this->initializeModel();
}

OAIAudioChannelTag::~OAIAudioChannelTag() {}

void OAIAudioChannelTag::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAudioChannelTag::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAudioChannelTag::fromJson(QString jsonString) {
    
    if ( jsonString.compare("L", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::L;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("R", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::R;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("C", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::C;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LFE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::LFE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::LS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::RS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::LC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::RC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::CS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LSD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::LSD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RSD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::RSD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TCS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::TCS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VHL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::VHL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VHC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::VHC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VHR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioChannelTag::VHR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAudioChannelTag::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAudioChannelTag::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAudioChannelTag::L:
            val = "L";
            break;
        case eOAIAudioChannelTag::R:
            val = "R";
            break;
        case eOAIAudioChannelTag::C:
            val = "C";
            break;
        case eOAIAudioChannelTag::LFE:
            val = "LFE";
            break;
        case eOAIAudioChannelTag::LS:
            val = "LS";
            break;
        case eOAIAudioChannelTag::RS:
            val = "RS";
            break;
        case eOAIAudioChannelTag::LC:
            val = "LC";
            break;
        case eOAIAudioChannelTag::RC:
            val = "RC";
            break;
        case eOAIAudioChannelTag::CS:
            val = "CS";
            break;
        case eOAIAudioChannelTag::LSD:
            val = "LSD";
            break;
        case eOAIAudioChannelTag::RSD:
            val = "RSD";
            break;
        case eOAIAudioChannelTag::TCS:
            val = "TCS";
            break;
        case eOAIAudioChannelTag::VHL:
            val = "VHL";
            break;
        case eOAIAudioChannelTag::VHC:
            val = "VHC";
            break;
        case eOAIAudioChannelTag::VHR:
            val = "VHR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAudioChannelTag::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAudioChannelTag::eOAIAudioChannelTag OAIAudioChannelTag::getValue() const {
    return m_value;
}

void OAIAudioChannelTag::setValue(const OAIAudioChannelTag::eOAIAudioChannelTag& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAudioChannelTag::isSet() const {
    
    return m_value_isSet;
}

bool OAIAudioChannelTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
