/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioSelector.h
 *
 * Use Audio selectors to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
 */

#ifndef OAIAudioSelector_H
#define OAIAudioSelector_H

#include <QJsonObject>

#include "OAIAudioDefaultSelection.h"
#include "OAIAudioDurationCorrection.h"
#include "OAIAudioSelectorType.h"
#include "OAIAudioSelector_HlsRenditionGroupSettings.h"
#include "OAIAudioSelector_RemixSettings.h"
#include "OAILanguageCode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudioSelector_HlsRenditionGroupSettings;
class OAIAudioSelector_RemixSettings;

class OAIAudioSelector : public OAIObject {
public:
    OAIAudioSelector();
    OAIAudioSelector(QString json);
    ~OAIAudioSelector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudioDurationCorrection getAudioDurationCorrection() const;
    void setAudioDurationCorrection(const OAIAudioDurationCorrection &audio_duration_correction);
    bool is_audio_duration_correction_Set() const;
    bool is_audio_duration_correction_Valid() const;

    QString getCustomLanguageCode() const;
    void setCustomLanguageCode(const QString &custom_language_code);
    bool is_custom_language_code_Set() const;
    bool is_custom_language_code_Valid() const;

    OAIAudioDefaultSelection getDefaultSelection() const;
    void setDefaultSelection(const OAIAudioDefaultSelection &default_selection);
    bool is_default_selection_Set() const;
    bool is_default_selection_Valid() const;

    QString getExternalAudioFileInput() const;
    void setExternalAudioFileInput(const QString &external_audio_file_input);
    bool is_external_audio_file_input_Set() const;
    bool is_external_audio_file_input_Valid() const;

    OAIAudioSelector_HlsRenditionGroupSettings getHlsRenditionGroupSettings() const;
    void setHlsRenditionGroupSettings(const OAIAudioSelector_HlsRenditionGroupSettings &hls_rendition_group_settings);
    bool is_hls_rendition_group_settings_Set() const;
    bool is_hls_rendition_group_settings_Valid() const;

    OAILanguageCode getLanguageCode() const;
    void setLanguageCode(const OAILanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList getPids() const;
    void setPids(const QList &pids);
    bool is_pids_Set() const;
    bool is_pids_Valid() const;

    qint32 getProgramSelection() const;
    void setProgramSelection(const qint32 &program_selection);
    bool is_program_selection_Set() const;
    bool is_program_selection_Valid() const;

    OAIAudioSelector_RemixSettings getRemixSettings() const;
    void setRemixSettings(const OAIAudioSelector_RemixSettings &remix_settings);
    bool is_remix_settings_Set() const;
    bool is_remix_settings_Valid() const;

    OAIAudioSelectorType getSelectorType() const;
    void setSelectorType(const OAIAudioSelectorType &selector_type);
    bool is_selector_type_Set() const;
    bool is_selector_type_Valid() const;

    QList getTracks() const;
    void setTracks(const QList &tracks);
    bool is_tracks_Set() const;
    bool is_tracks_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudioDurationCorrection m_audio_duration_correction;
    bool m_audio_duration_correction_isSet;
    bool m_audio_duration_correction_isValid;

    QString m_custom_language_code;
    bool m_custom_language_code_isSet;
    bool m_custom_language_code_isValid;

    OAIAudioDefaultSelection m_default_selection;
    bool m_default_selection_isSet;
    bool m_default_selection_isValid;

    QString m_external_audio_file_input;
    bool m_external_audio_file_input_isSet;
    bool m_external_audio_file_input_isValid;

    OAIAudioSelector_HlsRenditionGroupSettings m_hls_rendition_group_settings;
    bool m_hls_rendition_group_settings_isSet;
    bool m_hls_rendition_group_settings_isValid;

    OAILanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList m_pids;
    bool m_pids_isSet;
    bool m_pids_isValid;

    qint32 m_program_selection;
    bool m_program_selection_isSet;
    bool m_program_selection_isValid;

    OAIAudioSelector_RemixSettings m_remix_settings;
    bool m_remix_settings_isSet;
    bool m_remix_settings_isValid;

    OAIAudioSelectorType m_selector_type;
    bool m_selector_type_isSet;
    bool m_selector_type_isValid;

    QList m_tracks;
    bool m_tracks_isSet;
    bool m_tracks_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioSelector)

#endif // OAIAudioSelector_H
