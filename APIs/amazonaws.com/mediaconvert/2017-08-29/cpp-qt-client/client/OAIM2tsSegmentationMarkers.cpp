/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIM2tsSegmentationMarkers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIM2tsSegmentationMarkers::OAIM2tsSegmentationMarkers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIM2tsSegmentationMarkers::OAIM2tsSegmentationMarkers() {
    this->initializeModel();
}

OAIM2tsSegmentationMarkers::~OAIM2tsSegmentationMarkers() {}

void OAIM2tsSegmentationMarkers::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIM2tsSegmentationMarkers::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIM2tsSegmentationMarkers::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIM2tsSegmentationMarkers::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RAI_SEGSTART", Qt::CaseInsensitive) == 0) {
        m_value = eOAIM2tsSegmentationMarkers::RAI_SEGSTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RAI_ADAPT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIM2tsSegmentationMarkers::RAI_ADAPT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PSI_SEGSTART", Qt::CaseInsensitive) == 0) {
        m_value = eOAIM2tsSegmentationMarkers::PSI_SEGSTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EBP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIM2tsSegmentationMarkers::EBP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EBP_LEGACY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIM2tsSegmentationMarkers::EBP_LEGACY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIM2tsSegmentationMarkers::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIM2tsSegmentationMarkers::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIM2tsSegmentationMarkers::NONE:
            val = "NONE";
            break;
        case eOAIM2tsSegmentationMarkers::RAI_SEGSTART:
            val = "RAI_SEGSTART";
            break;
        case eOAIM2tsSegmentationMarkers::RAI_ADAPT:
            val = "RAI_ADAPT";
            break;
        case eOAIM2tsSegmentationMarkers::PSI_SEGSTART:
            val = "PSI_SEGSTART";
            break;
        case eOAIM2tsSegmentationMarkers::EBP:
            val = "EBP";
            break;
        case eOAIM2tsSegmentationMarkers::EBP_LEGACY:
            val = "EBP_LEGACY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIM2tsSegmentationMarkers::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIM2tsSegmentationMarkers::eOAIM2tsSegmentationMarkers OAIM2tsSegmentationMarkers::getValue() const {
    return m_value;
}

void OAIM2tsSegmentationMarkers::setValue(const OAIM2tsSegmentationMarkers::eOAIM2tsSegmentationMarkers& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIM2tsSegmentationMarkers::isSet() const {
    
    return m_value_isSet;
}

bool OAIM2tsSegmentationMarkers::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
