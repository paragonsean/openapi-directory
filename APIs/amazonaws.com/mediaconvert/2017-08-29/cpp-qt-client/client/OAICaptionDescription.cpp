/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptionDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptionDescription::OAICaptionDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptionDescription::OAICaptionDescription() {
    this->initializeModel();
}

OAICaptionDescription::~OAICaptionDescription() {}

void OAICaptionDescription::initializeModel() {

    m_caption_selector_name_isSet = false;
    m_caption_selector_name_isValid = false;

    m_custom_language_code_isSet = false;
    m_custom_language_code_isValid = false;

    m_destination_settings_isSet = false;
    m_destination_settings_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_language_description_isSet = false;
    m_language_description_isValid = false;
}

void OAICaptionDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaptionDescription::fromJsonObject(QJsonObject json) {

    m_caption_selector_name_isValid = ::OpenAPI::fromJsonValue(m_caption_selector_name, json[QString("CaptionSelectorName")]);
    m_caption_selector_name_isSet = !json[QString("CaptionSelectorName")].isNull() && m_caption_selector_name_isValid;

    m_custom_language_code_isValid = ::OpenAPI::fromJsonValue(m_custom_language_code, json[QString("CustomLanguageCode")]);
    m_custom_language_code_isSet = !json[QString("CustomLanguageCode")].isNull() && m_custom_language_code_isValid;

    m_destination_settings_isValid = ::OpenAPI::fromJsonValue(m_destination_settings, json[QString("DestinationSettings")]);
    m_destination_settings_isSet = !json[QString("DestinationSettings")].isNull() && m_destination_settings_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_language_description_isValid = ::OpenAPI::fromJsonValue(m_language_description, json[QString("LanguageDescription")]);
    m_language_description_isSet = !json[QString("LanguageDescription")].isNull() && m_language_description_isValid;
}

QString OAICaptionDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaptionDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_selector_name_isSet) {
        obj.insert(QString("CaptionSelectorName"), ::OpenAPI::toJsonValue(m_caption_selector_name));
    }
    if (m_custom_language_code_isSet) {
        obj.insert(QString("CustomLanguageCode"), ::OpenAPI::toJsonValue(m_custom_language_code));
    }
    if (m_destination_settings.isSet()) {
        obj.insert(QString("DestinationSettings"), ::OpenAPI::toJsonValue(m_destination_settings));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_language_description_isSet) {
        obj.insert(QString("LanguageDescription"), ::OpenAPI::toJsonValue(m_language_description));
    }
    return obj;
}

QString OAICaptionDescription::getCaptionSelectorName() const {
    return m_caption_selector_name;
}
void OAICaptionDescription::setCaptionSelectorName(const QString &caption_selector_name) {
    m_caption_selector_name = caption_selector_name;
    m_caption_selector_name_isSet = true;
}

bool OAICaptionDescription::is_caption_selector_name_Set() const{
    return m_caption_selector_name_isSet;
}

bool OAICaptionDescription::is_caption_selector_name_Valid() const{
    return m_caption_selector_name_isValid;
}

QString OAICaptionDescription::getCustomLanguageCode() const {
    return m_custom_language_code;
}
void OAICaptionDescription::setCustomLanguageCode(const QString &custom_language_code) {
    m_custom_language_code = custom_language_code;
    m_custom_language_code_isSet = true;
}

bool OAICaptionDescription::is_custom_language_code_Set() const{
    return m_custom_language_code_isSet;
}

bool OAICaptionDescription::is_custom_language_code_Valid() const{
    return m_custom_language_code_isValid;
}

OAICaptionDescription_DestinationSettings OAICaptionDescription::getDestinationSettings() const {
    return m_destination_settings;
}
void OAICaptionDescription::setDestinationSettings(const OAICaptionDescription_DestinationSettings &destination_settings) {
    m_destination_settings = destination_settings;
    m_destination_settings_isSet = true;
}

bool OAICaptionDescription::is_destination_settings_Set() const{
    return m_destination_settings_isSet;
}

bool OAICaptionDescription::is_destination_settings_Valid() const{
    return m_destination_settings_isValid;
}

OAILanguageCode OAICaptionDescription::getLanguageCode() const {
    return m_language_code;
}
void OAICaptionDescription::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAICaptionDescription::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAICaptionDescription::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAICaptionDescription::getLanguageDescription() const {
    return m_language_description;
}
void OAICaptionDescription::setLanguageDescription(const QString &language_description) {
    m_language_description = language_description;
    m_language_description_isSet = true;
}

bool OAICaptionDescription::is_language_description_Set() const{
    return m_language_description_isSet;
}

bool OAICaptionDescription::is_language_description_Valid() const{
    return m_language_description_isValid;
}

bool OAICaptionDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_selector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaptionDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
