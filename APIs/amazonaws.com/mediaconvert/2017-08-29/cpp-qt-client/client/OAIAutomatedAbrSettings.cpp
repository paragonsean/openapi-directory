/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomatedAbrSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomatedAbrSettings::OAIAutomatedAbrSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomatedAbrSettings::OAIAutomatedAbrSettings() {
    this->initializeModel();
}

OAIAutomatedAbrSettings::~OAIAutomatedAbrSettings() {}

void OAIAutomatedAbrSettings::initializeModel() {

    m_max_abr_bitrate_isSet = false;
    m_max_abr_bitrate_isValid = false;

    m_max_renditions_isSet = false;
    m_max_renditions_isValid = false;

    m_min_abr_bitrate_isSet = false;
    m_min_abr_bitrate_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIAutomatedAbrSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomatedAbrSettings::fromJsonObject(QJsonObject json) {

    m_max_abr_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_abr_bitrate, json[QString("MaxAbrBitrate")]);
    m_max_abr_bitrate_isSet = !json[QString("MaxAbrBitrate")].isNull() && m_max_abr_bitrate_isValid;

    m_max_renditions_isValid = ::OpenAPI::fromJsonValue(m_max_renditions, json[QString("MaxRenditions")]);
    m_max_renditions_isSet = !json[QString("MaxRenditions")].isNull() && m_max_renditions_isValid;

    m_min_abr_bitrate_isValid = ::OpenAPI::fromJsonValue(m_min_abr_bitrate, json[QString("MinAbrBitrate")]);
    m_min_abr_bitrate_isSet = !json[QString("MinAbrBitrate")].isNull() && m_min_abr_bitrate_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("Rules")]);
    m_rules_isSet = !json[QString("Rules")].isNull() && m_rules_isValid;
}

QString OAIAutomatedAbrSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomatedAbrSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_max_abr_bitrate_isSet) {
        obj.insert(QString("MaxAbrBitrate"), ::OpenAPI::toJsonValue(m_max_abr_bitrate));
    }
    if (m_max_renditions_isSet) {
        obj.insert(QString("MaxRenditions"), ::OpenAPI::toJsonValue(m_max_renditions));
    }
    if (m_min_abr_bitrate_isSet) {
        obj.insert(QString("MinAbrBitrate"), ::OpenAPI::toJsonValue(m_min_abr_bitrate));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("Rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

qint32 OAIAutomatedAbrSettings::getMaxAbrBitrate() const {
    return m_max_abr_bitrate;
}
void OAIAutomatedAbrSettings::setMaxAbrBitrate(const qint32 &max_abr_bitrate) {
    m_max_abr_bitrate = max_abr_bitrate;
    m_max_abr_bitrate_isSet = true;
}

bool OAIAutomatedAbrSettings::is_max_abr_bitrate_Set() const{
    return m_max_abr_bitrate_isSet;
}

bool OAIAutomatedAbrSettings::is_max_abr_bitrate_Valid() const{
    return m_max_abr_bitrate_isValid;
}

qint32 OAIAutomatedAbrSettings::getMaxRenditions() const {
    return m_max_renditions;
}
void OAIAutomatedAbrSettings::setMaxRenditions(const qint32 &max_renditions) {
    m_max_renditions = max_renditions;
    m_max_renditions_isSet = true;
}

bool OAIAutomatedAbrSettings::is_max_renditions_Set() const{
    return m_max_renditions_isSet;
}

bool OAIAutomatedAbrSettings::is_max_renditions_Valid() const{
    return m_max_renditions_isValid;
}

qint32 OAIAutomatedAbrSettings::getMinAbrBitrate() const {
    return m_min_abr_bitrate;
}
void OAIAutomatedAbrSettings::setMinAbrBitrate(const qint32 &min_abr_bitrate) {
    m_min_abr_bitrate = min_abr_bitrate;
    m_min_abr_bitrate_isSet = true;
}

bool OAIAutomatedAbrSettings::is_min_abr_bitrate_Set() const{
    return m_min_abr_bitrate_isSet;
}

bool OAIAutomatedAbrSettings::is_min_abr_bitrate_Valid() const{
    return m_min_abr_bitrate_isValid;
}

QList OAIAutomatedAbrSettings::getRules() const {
    return m_rules;
}
void OAIAutomatedAbrSettings::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIAutomatedAbrSettings::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIAutomatedAbrSettings::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIAutomatedAbrSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_abr_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_renditions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_abr_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomatedAbrSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
