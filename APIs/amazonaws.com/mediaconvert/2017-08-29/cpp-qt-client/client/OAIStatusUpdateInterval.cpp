/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusUpdateInterval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusUpdateInterval::OAIStatusUpdateInterval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusUpdateInterval::OAIStatusUpdateInterval() {
    this->initializeModel();
}

OAIStatusUpdateInterval::~OAIStatusUpdateInterval() {}

void OAIStatusUpdateInterval::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIStatusUpdateInterval::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIStatusUpdateInterval::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SECONDS_10", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_10;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_12", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_12;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_15", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_15;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_20", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_20;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_30", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_30;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_60", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_60;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_120", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_120;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_180", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_180;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_240", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_240;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_300", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_300;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_360", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_360;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_420", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_420;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_480", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_480;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_540", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_540;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDS_600", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusUpdateInterval::_600;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIStatusUpdateInterval::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIStatusUpdateInterval::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIStatusUpdateInterval::_10:
            val = "SECONDS_10";
            break;
        case eOAIStatusUpdateInterval::_12:
            val = "SECONDS_12";
            break;
        case eOAIStatusUpdateInterval::_15:
            val = "SECONDS_15";
            break;
        case eOAIStatusUpdateInterval::_20:
            val = "SECONDS_20";
            break;
        case eOAIStatusUpdateInterval::_30:
            val = "SECONDS_30";
            break;
        case eOAIStatusUpdateInterval::_60:
            val = "SECONDS_60";
            break;
        case eOAIStatusUpdateInterval::_120:
            val = "SECONDS_120";
            break;
        case eOAIStatusUpdateInterval::_180:
            val = "SECONDS_180";
            break;
        case eOAIStatusUpdateInterval::_240:
            val = "SECONDS_240";
            break;
        case eOAIStatusUpdateInterval::_300:
            val = "SECONDS_300";
            break;
        case eOAIStatusUpdateInterval::_360:
            val = "SECONDS_360";
            break;
        case eOAIStatusUpdateInterval::_420:
            val = "SECONDS_420";
            break;
        case eOAIStatusUpdateInterval::_480:
            val = "SECONDS_480";
            break;
        case eOAIStatusUpdateInterval::_540:
            val = "SECONDS_540";
            break;
        case eOAIStatusUpdateInterval::_600:
            val = "SECONDS_600";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIStatusUpdateInterval::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIStatusUpdateInterval::eOAIStatusUpdateInterval OAIStatusUpdateInterval::getValue() const {
    return m_value;
}

void OAIStatusUpdateInterval::setValue(const OAIStatusUpdateInterval::eOAIStatusUpdateInterval& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIStatusUpdateInterval::isSet() const {
    
    return m_value_isSet;
}

bool OAIStatusUpdateInterval::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
