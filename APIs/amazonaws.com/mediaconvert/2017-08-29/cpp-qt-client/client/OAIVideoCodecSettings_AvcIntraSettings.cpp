/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoCodecSettings_AvcIntraSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoCodecSettings_AvcIntraSettings::OAIVideoCodecSettings_AvcIntraSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoCodecSettings_AvcIntraSettings::OAIVideoCodecSettings_AvcIntraSettings() {
    this->initializeModel();
}

OAIVideoCodecSettings_AvcIntraSettings::~OAIVideoCodecSettings_AvcIntraSettings() {}

void OAIVideoCodecSettings_AvcIntraSettings::initializeModel() {

    m_avc_intra_class_isSet = false;
    m_avc_intra_class_isValid = false;

    m_avc_intra_uhd_settings_isSet = false;
    m_avc_intra_uhd_settings_isValid = false;

    m_framerate_control_isSet = false;
    m_framerate_control_isValid = false;

    m_framerate_conversion_algorithm_isSet = false;
    m_framerate_conversion_algorithm_isValid = false;

    m_framerate_denominator_isSet = false;
    m_framerate_denominator_isValid = false;

    m_framerate_numerator_isSet = false;
    m_framerate_numerator_isValid = false;

    m_interlace_mode_isSet = false;
    m_interlace_mode_isValid = false;

    m_scan_type_conversion_mode_isSet = false;
    m_scan_type_conversion_mode_isValid = false;

    m_slow_pal_isSet = false;
    m_slow_pal_isValid = false;

    m_telecine_isSet = false;
    m_telecine_isValid = false;
}

void OAIVideoCodecSettings_AvcIntraSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoCodecSettings_AvcIntraSettings::fromJsonObject(QJsonObject json) {

    m_avc_intra_class_isValid = ::OpenAPI::fromJsonValue(m_avc_intra_class, json[QString("AvcIntraClass")]);
    m_avc_intra_class_isSet = !json[QString("AvcIntraClass")].isNull() && m_avc_intra_class_isValid;

    m_avc_intra_uhd_settings_isValid = ::OpenAPI::fromJsonValue(m_avc_intra_uhd_settings, json[QString("AvcIntraUhdSettings")]);
    m_avc_intra_uhd_settings_isSet = !json[QString("AvcIntraUhdSettings")].isNull() && m_avc_intra_uhd_settings_isValid;

    m_framerate_control_isValid = ::OpenAPI::fromJsonValue(m_framerate_control, json[QString("FramerateControl")]);
    m_framerate_control_isSet = !json[QString("FramerateControl")].isNull() && m_framerate_control_isValid;

    m_framerate_conversion_algorithm_isValid = ::OpenAPI::fromJsonValue(m_framerate_conversion_algorithm, json[QString("FramerateConversionAlgorithm")]);
    m_framerate_conversion_algorithm_isSet = !json[QString("FramerateConversionAlgorithm")].isNull() && m_framerate_conversion_algorithm_isValid;

    m_framerate_denominator_isValid = ::OpenAPI::fromJsonValue(m_framerate_denominator, json[QString("FramerateDenominator")]);
    m_framerate_denominator_isSet = !json[QString("FramerateDenominator")].isNull() && m_framerate_denominator_isValid;

    m_framerate_numerator_isValid = ::OpenAPI::fromJsonValue(m_framerate_numerator, json[QString("FramerateNumerator")]);
    m_framerate_numerator_isSet = !json[QString("FramerateNumerator")].isNull() && m_framerate_numerator_isValid;

    m_interlace_mode_isValid = ::OpenAPI::fromJsonValue(m_interlace_mode, json[QString("InterlaceMode")]);
    m_interlace_mode_isSet = !json[QString("InterlaceMode")].isNull() && m_interlace_mode_isValid;

    m_scan_type_conversion_mode_isValid = ::OpenAPI::fromJsonValue(m_scan_type_conversion_mode, json[QString("ScanTypeConversionMode")]);
    m_scan_type_conversion_mode_isSet = !json[QString("ScanTypeConversionMode")].isNull() && m_scan_type_conversion_mode_isValid;

    m_slow_pal_isValid = ::OpenAPI::fromJsonValue(m_slow_pal, json[QString("SlowPal")]);
    m_slow_pal_isSet = !json[QString("SlowPal")].isNull() && m_slow_pal_isValid;

    m_telecine_isValid = ::OpenAPI::fromJsonValue(m_telecine, json[QString("Telecine")]);
    m_telecine_isSet = !json[QString("Telecine")].isNull() && m_telecine_isValid;
}

QString OAIVideoCodecSettings_AvcIntraSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoCodecSettings_AvcIntraSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_avc_intra_class.isSet()) {
        obj.insert(QString("AvcIntraClass"), ::OpenAPI::toJsonValue(m_avc_intra_class));
    }
    if (m_avc_intra_uhd_settings.isSet()) {
        obj.insert(QString("AvcIntraUhdSettings"), ::OpenAPI::toJsonValue(m_avc_intra_uhd_settings));
    }
    if (m_framerate_control.isSet()) {
        obj.insert(QString("FramerateControl"), ::OpenAPI::toJsonValue(m_framerate_control));
    }
    if (m_framerate_conversion_algorithm.isSet()) {
        obj.insert(QString("FramerateConversionAlgorithm"), ::OpenAPI::toJsonValue(m_framerate_conversion_algorithm));
    }
    if (m_framerate_denominator_isSet) {
        obj.insert(QString("FramerateDenominator"), ::OpenAPI::toJsonValue(m_framerate_denominator));
    }
    if (m_framerate_numerator_isSet) {
        obj.insert(QString("FramerateNumerator"), ::OpenAPI::toJsonValue(m_framerate_numerator));
    }
    if (m_interlace_mode.isSet()) {
        obj.insert(QString("InterlaceMode"), ::OpenAPI::toJsonValue(m_interlace_mode));
    }
    if (m_scan_type_conversion_mode.isSet()) {
        obj.insert(QString("ScanTypeConversionMode"), ::OpenAPI::toJsonValue(m_scan_type_conversion_mode));
    }
    if (m_slow_pal.isSet()) {
        obj.insert(QString("SlowPal"), ::OpenAPI::toJsonValue(m_slow_pal));
    }
    if (m_telecine.isSet()) {
        obj.insert(QString("Telecine"), ::OpenAPI::toJsonValue(m_telecine));
    }
    return obj;
}

OAIAvcIntraClass OAIVideoCodecSettings_AvcIntraSettings::getAvcIntraClass() const {
    return m_avc_intra_class;
}
void OAIVideoCodecSettings_AvcIntraSettings::setAvcIntraClass(const OAIAvcIntraClass &avc_intra_class) {
    m_avc_intra_class = avc_intra_class;
    m_avc_intra_class_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_avc_intra_class_Set() const{
    return m_avc_intra_class_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_avc_intra_class_Valid() const{
    return m_avc_intra_class_isValid;
}

OAIAvcIntraSettings_AvcIntraUhdSettings OAIVideoCodecSettings_AvcIntraSettings::getAvcIntraUhdSettings() const {
    return m_avc_intra_uhd_settings;
}
void OAIVideoCodecSettings_AvcIntraSettings::setAvcIntraUhdSettings(const OAIAvcIntraSettings_AvcIntraUhdSettings &avc_intra_uhd_settings) {
    m_avc_intra_uhd_settings = avc_intra_uhd_settings;
    m_avc_intra_uhd_settings_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_avc_intra_uhd_settings_Set() const{
    return m_avc_intra_uhd_settings_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_avc_intra_uhd_settings_Valid() const{
    return m_avc_intra_uhd_settings_isValid;
}

OAIAvcIntraFramerateControl OAIVideoCodecSettings_AvcIntraSettings::getFramerateControl() const {
    return m_framerate_control;
}
void OAIVideoCodecSettings_AvcIntraSettings::setFramerateControl(const OAIAvcIntraFramerateControl &framerate_control) {
    m_framerate_control = framerate_control;
    m_framerate_control_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_framerate_control_Set() const{
    return m_framerate_control_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_framerate_control_Valid() const{
    return m_framerate_control_isValid;
}

OAIAvcIntraFramerateConversionAlgorithm OAIVideoCodecSettings_AvcIntraSettings::getFramerateConversionAlgorithm() const {
    return m_framerate_conversion_algorithm;
}
void OAIVideoCodecSettings_AvcIntraSettings::setFramerateConversionAlgorithm(const OAIAvcIntraFramerateConversionAlgorithm &framerate_conversion_algorithm) {
    m_framerate_conversion_algorithm = framerate_conversion_algorithm;
    m_framerate_conversion_algorithm_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_framerate_conversion_algorithm_Set() const{
    return m_framerate_conversion_algorithm_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_framerate_conversion_algorithm_Valid() const{
    return m_framerate_conversion_algorithm_isValid;
}

qint32 OAIVideoCodecSettings_AvcIntraSettings::getFramerateDenominator() const {
    return m_framerate_denominator;
}
void OAIVideoCodecSettings_AvcIntraSettings::setFramerateDenominator(const qint32 &framerate_denominator) {
    m_framerate_denominator = framerate_denominator;
    m_framerate_denominator_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_framerate_denominator_Set() const{
    return m_framerate_denominator_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_framerate_denominator_Valid() const{
    return m_framerate_denominator_isValid;
}

qint32 OAIVideoCodecSettings_AvcIntraSettings::getFramerateNumerator() const {
    return m_framerate_numerator;
}
void OAIVideoCodecSettings_AvcIntraSettings::setFramerateNumerator(const qint32 &framerate_numerator) {
    m_framerate_numerator = framerate_numerator;
    m_framerate_numerator_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_framerate_numerator_Set() const{
    return m_framerate_numerator_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_framerate_numerator_Valid() const{
    return m_framerate_numerator_isValid;
}

OAIAvcIntraInterlaceMode OAIVideoCodecSettings_AvcIntraSettings::getInterlaceMode() const {
    return m_interlace_mode;
}
void OAIVideoCodecSettings_AvcIntraSettings::setInterlaceMode(const OAIAvcIntraInterlaceMode &interlace_mode) {
    m_interlace_mode = interlace_mode;
    m_interlace_mode_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_interlace_mode_Set() const{
    return m_interlace_mode_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_interlace_mode_Valid() const{
    return m_interlace_mode_isValid;
}

OAIAvcIntraScanTypeConversionMode OAIVideoCodecSettings_AvcIntraSettings::getScanTypeConversionMode() const {
    return m_scan_type_conversion_mode;
}
void OAIVideoCodecSettings_AvcIntraSettings::setScanTypeConversionMode(const OAIAvcIntraScanTypeConversionMode &scan_type_conversion_mode) {
    m_scan_type_conversion_mode = scan_type_conversion_mode;
    m_scan_type_conversion_mode_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_scan_type_conversion_mode_Set() const{
    return m_scan_type_conversion_mode_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_scan_type_conversion_mode_Valid() const{
    return m_scan_type_conversion_mode_isValid;
}

OAIAvcIntraSlowPal OAIVideoCodecSettings_AvcIntraSettings::getSlowPal() const {
    return m_slow_pal;
}
void OAIVideoCodecSettings_AvcIntraSettings::setSlowPal(const OAIAvcIntraSlowPal &slow_pal) {
    m_slow_pal = slow_pal;
    m_slow_pal_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_slow_pal_Set() const{
    return m_slow_pal_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_slow_pal_Valid() const{
    return m_slow_pal_isValid;
}

OAIAvcIntraTelecine OAIVideoCodecSettings_AvcIntraSettings::getTelecine() const {
    return m_telecine;
}
void OAIVideoCodecSettings_AvcIntraSettings::setTelecine(const OAIAvcIntraTelecine &telecine) {
    m_telecine = telecine;
    m_telecine_isSet = true;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_telecine_Set() const{
    return m_telecine_isSet;
}

bool OAIVideoCodecSettings_AvcIntraSettings::is_telecine_Valid() const{
    return m_telecine_isValid;
}

bool OAIVideoCodecSettings_AvcIntraSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avc_intra_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avc_intra_uhd_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_conversion_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interlace_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type_conversion_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_pal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telecine.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoCodecSettings_AvcIntraSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
