/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioCodecSettings_Eac3Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioCodecSettings_Eac3Settings::OAIAudioCodecSettings_Eac3Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioCodecSettings_Eac3Settings::OAIAudioCodecSettings_Eac3Settings() {
    this->initializeModel();
}

OAIAudioCodecSettings_Eac3Settings::~OAIAudioCodecSettings_Eac3Settings() {}

void OAIAudioCodecSettings_Eac3Settings::initializeModel() {

    m_attenuation_control_isSet = false;
    m_attenuation_control_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_bitstream_mode_isSet = false;
    m_bitstream_mode_isValid = false;

    m_coding_mode_isSet = false;
    m_coding_mode_isValid = false;

    m_dc_filter_isSet = false;
    m_dc_filter_isValid = false;

    m_dialnorm_isSet = false;
    m_dialnorm_isValid = false;

    m_dynamic_range_compression_line_isSet = false;
    m_dynamic_range_compression_line_isValid = false;

    m_dynamic_range_compression_rf_isSet = false;
    m_dynamic_range_compression_rf_isValid = false;

    m_lfe_control_isSet = false;
    m_lfe_control_isValid = false;

    m_lfe_filter_isSet = false;
    m_lfe_filter_isValid = false;

    m_lo_ro_center_mix_level_isSet = false;
    m_lo_ro_center_mix_level_isValid = false;

    m_lo_ro_surround_mix_level_isSet = false;
    m_lo_ro_surround_mix_level_isValid = false;

    m_lt_rt_center_mix_level_isSet = false;
    m_lt_rt_center_mix_level_isValid = false;

    m_lt_rt_surround_mix_level_isSet = false;
    m_lt_rt_surround_mix_level_isValid = false;

    m_metadata_control_isSet = false;
    m_metadata_control_isValid = false;

    m_passthrough_control_isSet = false;
    m_passthrough_control_isValid = false;

    m_phase_control_isSet = false;
    m_phase_control_isValid = false;

    m_sample_rate_isSet = false;
    m_sample_rate_isValid = false;

    m_stereo_downmix_isSet = false;
    m_stereo_downmix_isValid = false;

    m_surround_ex_mode_isSet = false;
    m_surround_ex_mode_isValid = false;

    m_surround_mode_isSet = false;
    m_surround_mode_isValid = false;
}

void OAIAudioCodecSettings_Eac3Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioCodecSettings_Eac3Settings::fromJsonObject(QJsonObject json) {

    m_attenuation_control_isValid = ::OpenAPI::fromJsonValue(m_attenuation_control, json[QString("AttenuationControl")]);
    m_attenuation_control_isSet = !json[QString("AttenuationControl")].isNull() && m_attenuation_control_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_bitstream_mode_isValid = ::OpenAPI::fromJsonValue(m_bitstream_mode, json[QString("BitstreamMode")]);
    m_bitstream_mode_isSet = !json[QString("BitstreamMode")].isNull() && m_bitstream_mode_isValid;

    m_coding_mode_isValid = ::OpenAPI::fromJsonValue(m_coding_mode, json[QString("CodingMode")]);
    m_coding_mode_isSet = !json[QString("CodingMode")].isNull() && m_coding_mode_isValid;

    m_dc_filter_isValid = ::OpenAPI::fromJsonValue(m_dc_filter, json[QString("DcFilter")]);
    m_dc_filter_isSet = !json[QString("DcFilter")].isNull() && m_dc_filter_isValid;

    m_dialnorm_isValid = ::OpenAPI::fromJsonValue(m_dialnorm, json[QString("Dialnorm")]);
    m_dialnorm_isSet = !json[QString("Dialnorm")].isNull() && m_dialnorm_isValid;

    m_dynamic_range_compression_line_isValid = ::OpenAPI::fromJsonValue(m_dynamic_range_compression_line, json[QString("DynamicRangeCompressionLine")]);
    m_dynamic_range_compression_line_isSet = !json[QString("DynamicRangeCompressionLine")].isNull() && m_dynamic_range_compression_line_isValid;

    m_dynamic_range_compression_rf_isValid = ::OpenAPI::fromJsonValue(m_dynamic_range_compression_rf, json[QString("DynamicRangeCompressionRf")]);
    m_dynamic_range_compression_rf_isSet = !json[QString("DynamicRangeCompressionRf")].isNull() && m_dynamic_range_compression_rf_isValid;

    m_lfe_control_isValid = ::OpenAPI::fromJsonValue(m_lfe_control, json[QString("LfeControl")]);
    m_lfe_control_isSet = !json[QString("LfeControl")].isNull() && m_lfe_control_isValid;

    m_lfe_filter_isValid = ::OpenAPI::fromJsonValue(m_lfe_filter, json[QString("LfeFilter")]);
    m_lfe_filter_isSet = !json[QString("LfeFilter")].isNull() && m_lfe_filter_isValid;

    m_lo_ro_center_mix_level_isValid = ::OpenAPI::fromJsonValue(m_lo_ro_center_mix_level, json[QString("LoRoCenterMixLevel")]);
    m_lo_ro_center_mix_level_isSet = !json[QString("LoRoCenterMixLevel")].isNull() && m_lo_ro_center_mix_level_isValid;

    m_lo_ro_surround_mix_level_isValid = ::OpenAPI::fromJsonValue(m_lo_ro_surround_mix_level, json[QString("LoRoSurroundMixLevel")]);
    m_lo_ro_surround_mix_level_isSet = !json[QString("LoRoSurroundMixLevel")].isNull() && m_lo_ro_surround_mix_level_isValid;

    m_lt_rt_center_mix_level_isValid = ::OpenAPI::fromJsonValue(m_lt_rt_center_mix_level, json[QString("LtRtCenterMixLevel")]);
    m_lt_rt_center_mix_level_isSet = !json[QString("LtRtCenterMixLevel")].isNull() && m_lt_rt_center_mix_level_isValid;

    m_lt_rt_surround_mix_level_isValid = ::OpenAPI::fromJsonValue(m_lt_rt_surround_mix_level, json[QString("LtRtSurroundMixLevel")]);
    m_lt_rt_surround_mix_level_isSet = !json[QString("LtRtSurroundMixLevel")].isNull() && m_lt_rt_surround_mix_level_isValid;

    m_metadata_control_isValid = ::OpenAPI::fromJsonValue(m_metadata_control, json[QString("MetadataControl")]);
    m_metadata_control_isSet = !json[QString("MetadataControl")].isNull() && m_metadata_control_isValid;

    m_passthrough_control_isValid = ::OpenAPI::fromJsonValue(m_passthrough_control, json[QString("PassthroughControl")]);
    m_passthrough_control_isSet = !json[QString("PassthroughControl")].isNull() && m_passthrough_control_isValid;

    m_phase_control_isValid = ::OpenAPI::fromJsonValue(m_phase_control, json[QString("PhaseControl")]);
    m_phase_control_isSet = !json[QString("PhaseControl")].isNull() && m_phase_control_isValid;

    m_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_sample_rate, json[QString("SampleRate")]);
    m_sample_rate_isSet = !json[QString("SampleRate")].isNull() && m_sample_rate_isValid;

    m_stereo_downmix_isValid = ::OpenAPI::fromJsonValue(m_stereo_downmix, json[QString("StereoDownmix")]);
    m_stereo_downmix_isSet = !json[QString("StereoDownmix")].isNull() && m_stereo_downmix_isValid;

    m_surround_ex_mode_isValid = ::OpenAPI::fromJsonValue(m_surround_ex_mode, json[QString("SurroundExMode")]);
    m_surround_ex_mode_isSet = !json[QString("SurroundExMode")].isNull() && m_surround_ex_mode_isValid;

    m_surround_mode_isValid = ::OpenAPI::fromJsonValue(m_surround_mode, json[QString("SurroundMode")]);
    m_surround_mode_isSet = !json[QString("SurroundMode")].isNull() && m_surround_mode_isValid;
}

QString OAIAudioCodecSettings_Eac3Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioCodecSettings_Eac3Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_attenuation_control.isSet()) {
        obj.insert(QString("AttenuationControl"), ::OpenAPI::toJsonValue(m_attenuation_control));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_bitstream_mode.isSet()) {
        obj.insert(QString("BitstreamMode"), ::OpenAPI::toJsonValue(m_bitstream_mode));
    }
    if (m_coding_mode.isSet()) {
        obj.insert(QString("CodingMode"), ::OpenAPI::toJsonValue(m_coding_mode));
    }
    if (m_dc_filter.isSet()) {
        obj.insert(QString("DcFilter"), ::OpenAPI::toJsonValue(m_dc_filter));
    }
    if (m_dialnorm_isSet) {
        obj.insert(QString("Dialnorm"), ::OpenAPI::toJsonValue(m_dialnorm));
    }
    if (m_dynamic_range_compression_line.isSet()) {
        obj.insert(QString("DynamicRangeCompressionLine"), ::OpenAPI::toJsonValue(m_dynamic_range_compression_line));
    }
    if (m_dynamic_range_compression_rf.isSet()) {
        obj.insert(QString("DynamicRangeCompressionRf"), ::OpenAPI::toJsonValue(m_dynamic_range_compression_rf));
    }
    if (m_lfe_control.isSet()) {
        obj.insert(QString("LfeControl"), ::OpenAPI::toJsonValue(m_lfe_control));
    }
    if (m_lfe_filter.isSet()) {
        obj.insert(QString("LfeFilter"), ::OpenAPI::toJsonValue(m_lfe_filter));
    }
    if (m_lo_ro_center_mix_level_isSet) {
        obj.insert(QString("LoRoCenterMixLevel"), ::OpenAPI::toJsonValue(m_lo_ro_center_mix_level));
    }
    if (m_lo_ro_surround_mix_level_isSet) {
        obj.insert(QString("LoRoSurroundMixLevel"), ::OpenAPI::toJsonValue(m_lo_ro_surround_mix_level));
    }
    if (m_lt_rt_center_mix_level_isSet) {
        obj.insert(QString("LtRtCenterMixLevel"), ::OpenAPI::toJsonValue(m_lt_rt_center_mix_level));
    }
    if (m_lt_rt_surround_mix_level_isSet) {
        obj.insert(QString("LtRtSurroundMixLevel"), ::OpenAPI::toJsonValue(m_lt_rt_surround_mix_level));
    }
    if (m_metadata_control.isSet()) {
        obj.insert(QString("MetadataControl"), ::OpenAPI::toJsonValue(m_metadata_control));
    }
    if (m_passthrough_control.isSet()) {
        obj.insert(QString("PassthroughControl"), ::OpenAPI::toJsonValue(m_passthrough_control));
    }
    if (m_phase_control.isSet()) {
        obj.insert(QString("PhaseControl"), ::OpenAPI::toJsonValue(m_phase_control));
    }
    if (m_sample_rate_isSet) {
        obj.insert(QString("SampleRate"), ::OpenAPI::toJsonValue(m_sample_rate));
    }
    if (m_stereo_downmix.isSet()) {
        obj.insert(QString("StereoDownmix"), ::OpenAPI::toJsonValue(m_stereo_downmix));
    }
    if (m_surround_ex_mode.isSet()) {
        obj.insert(QString("SurroundExMode"), ::OpenAPI::toJsonValue(m_surround_ex_mode));
    }
    if (m_surround_mode.isSet()) {
        obj.insert(QString("SurroundMode"), ::OpenAPI::toJsonValue(m_surround_mode));
    }
    return obj;
}

OAIEac3AttenuationControl OAIAudioCodecSettings_Eac3Settings::getAttenuationControl() const {
    return m_attenuation_control;
}
void OAIAudioCodecSettings_Eac3Settings::setAttenuationControl(const OAIEac3AttenuationControl &attenuation_control) {
    m_attenuation_control = attenuation_control;
    m_attenuation_control_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_attenuation_control_Set() const{
    return m_attenuation_control_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_attenuation_control_Valid() const{
    return m_attenuation_control_isValid;
}

qint32 OAIAudioCodecSettings_Eac3Settings::getBitrate() const {
    return m_bitrate;
}
void OAIAudioCodecSettings_Eac3Settings::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIEac3BitstreamMode OAIAudioCodecSettings_Eac3Settings::getBitstreamMode() const {
    return m_bitstream_mode;
}
void OAIAudioCodecSettings_Eac3Settings::setBitstreamMode(const OAIEac3BitstreamMode &bitstream_mode) {
    m_bitstream_mode = bitstream_mode;
    m_bitstream_mode_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_bitstream_mode_Set() const{
    return m_bitstream_mode_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_bitstream_mode_Valid() const{
    return m_bitstream_mode_isValid;
}

OAIEac3CodingMode OAIAudioCodecSettings_Eac3Settings::getCodingMode() const {
    return m_coding_mode;
}
void OAIAudioCodecSettings_Eac3Settings::setCodingMode(const OAIEac3CodingMode &coding_mode) {
    m_coding_mode = coding_mode;
    m_coding_mode_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_coding_mode_Set() const{
    return m_coding_mode_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_coding_mode_Valid() const{
    return m_coding_mode_isValid;
}

OAIEac3DcFilter OAIAudioCodecSettings_Eac3Settings::getDcFilter() const {
    return m_dc_filter;
}
void OAIAudioCodecSettings_Eac3Settings::setDcFilter(const OAIEac3DcFilter &dc_filter) {
    m_dc_filter = dc_filter;
    m_dc_filter_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_dc_filter_Set() const{
    return m_dc_filter_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_dc_filter_Valid() const{
    return m_dc_filter_isValid;
}

qint32 OAIAudioCodecSettings_Eac3Settings::getDialnorm() const {
    return m_dialnorm;
}
void OAIAudioCodecSettings_Eac3Settings::setDialnorm(const qint32 &dialnorm) {
    m_dialnorm = dialnorm;
    m_dialnorm_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_dialnorm_Set() const{
    return m_dialnorm_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_dialnorm_Valid() const{
    return m_dialnorm_isValid;
}

OAIEac3DynamicRangeCompressionLine OAIAudioCodecSettings_Eac3Settings::getDynamicRangeCompressionLine() const {
    return m_dynamic_range_compression_line;
}
void OAIAudioCodecSettings_Eac3Settings::setDynamicRangeCompressionLine(const OAIEac3DynamicRangeCompressionLine &dynamic_range_compression_line) {
    m_dynamic_range_compression_line = dynamic_range_compression_line;
    m_dynamic_range_compression_line_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_dynamic_range_compression_line_Set() const{
    return m_dynamic_range_compression_line_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_dynamic_range_compression_line_Valid() const{
    return m_dynamic_range_compression_line_isValid;
}

OAIEac3DynamicRangeCompressionRf OAIAudioCodecSettings_Eac3Settings::getDynamicRangeCompressionRf() const {
    return m_dynamic_range_compression_rf;
}
void OAIAudioCodecSettings_Eac3Settings::setDynamicRangeCompressionRf(const OAIEac3DynamicRangeCompressionRf &dynamic_range_compression_rf) {
    m_dynamic_range_compression_rf = dynamic_range_compression_rf;
    m_dynamic_range_compression_rf_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_dynamic_range_compression_rf_Set() const{
    return m_dynamic_range_compression_rf_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_dynamic_range_compression_rf_Valid() const{
    return m_dynamic_range_compression_rf_isValid;
}

OAIEac3LfeControl OAIAudioCodecSettings_Eac3Settings::getLfeControl() const {
    return m_lfe_control;
}
void OAIAudioCodecSettings_Eac3Settings::setLfeControl(const OAIEac3LfeControl &lfe_control) {
    m_lfe_control = lfe_control;
    m_lfe_control_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lfe_control_Set() const{
    return m_lfe_control_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lfe_control_Valid() const{
    return m_lfe_control_isValid;
}

OAIEac3LfeFilter OAIAudioCodecSettings_Eac3Settings::getLfeFilter() const {
    return m_lfe_filter;
}
void OAIAudioCodecSettings_Eac3Settings::setLfeFilter(const OAIEac3LfeFilter &lfe_filter) {
    m_lfe_filter = lfe_filter;
    m_lfe_filter_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lfe_filter_Set() const{
    return m_lfe_filter_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lfe_filter_Valid() const{
    return m_lfe_filter_isValid;
}

double OAIAudioCodecSettings_Eac3Settings::getLoRoCenterMixLevel() const {
    return m_lo_ro_center_mix_level;
}
void OAIAudioCodecSettings_Eac3Settings::setLoRoCenterMixLevel(const double &lo_ro_center_mix_level) {
    m_lo_ro_center_mix_level = lo_ro_center_mix_level;
    m_lo_ro_center_mix_level_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lo_ro_center_mix_level_Set() const{
    return m_lo_ro_center_mix_level_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lo_ro_center_mix_level_Valid() const{
    return m_lo_ro_center_mix_level_isValid;
}

double OAIAudioCodecSettings_Eac3Settings::getLoRoSurroundMixLevel() const {
    return m_lo_ro_surround_mix_level;
}
void OAIAudioCodecSettings_Eac3Settings::setLoRoSurroundMixLevel(const double &lo_ro_surround_mix_level) {
    m_lo_ro_surround_mix_level = lo_ro_surround_mix_level;
    m_lo_ro_surround_mix_level_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lo_ro_surround_mix_level_Set() const{
    return m_lo_ro_surround_mix_level_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lo_ro_surround_mix_level_Valid() const{
    return m_lo_ro_surround_mix_level_isValid;
}

double OAIAudioCodecSettings_Eac3Settings::getLtRtCenterMixLevel() const {
    return m_lt_rt_center_mix_level;
}
void OAIAudioCodecSettings_Eac3Settings::setLtRtCenterMixLevel(const double &lt_rt_center_mix_level) {
    m_lt_rt_center_mix_level = lt_rt_center_mix_level;
    m_lt_rt_center_mix_level_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lt_rt_center_mix_level_Set() const{
    return m_lt_rt_center_mix_level_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lt_rt_center_mix_level_Valid() const{
    return m_lt_rt_center_mix_level_isValid;
}

double OAIAudioCodecSettings_Eac3Settings::getLtRtSurroundMixLevel() const {
    return m_lt_rt_surround_mix_level;
}
void OAIAudioCodecSettings_Eac3Settings::setLtRtSurroundMixLevel(const double &lt_rt_surround_mix_level) {
    m_lt_rt_surround_mix_level = lt_rt_surround_mix_level;
    m_lt_rt_surround_mix_level_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lt_rt_surround_mix_level_Set() const{
    return m_lt_rt_surround_mix_level_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_lt_rt_surround_mix_level_Valid() const{
    return m_lt_rt_surround_mix_level_isValid;
}

OAIEac3MetadataControl OAIAudioCodecSettings_Eac3Settings::getMetadataControl() const {
    return m_metadata_control;
}
void OAIAudioCodecSettings_Eac3Settings::setMetadataControl(const OAIEac3MetadataControl &metadata_control) {
    m_metadata_control = metadata_control;
    m_metadata_control_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_metadata_control_Set() const{
    return m_metadata_control_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_metadata_control_Valid() const{
    return m_metadata_control_isValid;
}

OAIEac3PassthroughControl OAIAudioCodecSettings_Eac3Settings::getPassthroughControl() const {
    return m_passthrough_control;
}
void OAIAudioCodecSettings_Eac3Settings::setPassthroughControl(const OAIEac3PassthroughControl &passthrough_control) {
    m_passthrough_control = passthrough_control;
    m_passthrough_control_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_passthrough_control_Set() const{
    return m_passthrough_control_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_passthrough_control_Valid() const{
    return m_passthrough_control_isValid;
}

OAIEac3PhaseControl OAIAudioCodecSettings_Eac3Settings::getPhaseControl() const {
    return m_phase_control;
}
void OAIAudioCodecSettings_Eac3Settings::setPhaseControl(const OAIEac3PhaseControl &phase_control) {
    m_phase_control = phase_control;
    m_phase_control_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_phase_control_Set() const{
    return m_phase_control_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_phase_control_Valid() const{
    return m_phase_control_isValid;
}

qint32 OAIAudioCodecSettings_Eac3Settings::getSampleRate() const {
    return m_sample_rate;
}
void OAIAudioCodecSettings_Eac3Settings::setSampleRate(const qint32 &sample_rate) {
    m_sample_rate = sample_rate;
    m_sample_rate_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_sample_rate_Set() const{
    return m_sample_rate_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_sample_rate_Valid() const{
    return m_sample_rate_isValid;
}

OAIEac3StereoDownmix OAIAudioCodecSettings_Eac3Settings::getStereoDownmix() const {
    return m_stereo_downmix;
}
void OAIAudioCodecSettings_Eac3Settings::setStereoDownmix(const OAIEac3StereoDownmix &stereo_downmix) {
    m_stereo_downmix = stereo_downmix;
    m_stereo_downmix_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_stereo_downmix_Set() const{
    return m_stereo_downmix_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_stereo_downmix_Valid() const{
    return m_stereo_downmix_isValid;
}

OAIEac3SurroundExMode OAIAudioCodecSettings_Eac3Settings::getSurroundExMode() const {
    return m_surround_ex_mode;
}
void OAIAudioCodecSettings_Eac3Settings::setSurroundExMode(const OAIEac3SurroundExMode &surround_ex_mode) {
    m_surround_ex_mode = surround_ex_mode;
    m_surround_ex_mode_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_surround_ex_mode_Set() const{
    return m_surround_ex_mode_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_surround_ex_mode_Valid() const{
    return m_surround_ex_mode_isValid;
}

OAIEac3SurroundMode OAIAudioCodecSettings_Eac3Settings::getSurroundMode() const {
    return m_surround_mode;
}
void OAIAudioCodecSettings_Eac3Settings::setSurroundMode(const OAIEac3SurroundMode &surround_mode) {
    m_surround_mode = surround_mode;
    m_surround_mode_isSet = true;
}

bool OAIAudioCodecSettings_Eac3Settings::is_surround_mode_Set() const{
    return m_surround_mode_isSet;
}

bool OAIAudioCodecSettings_Eac3Settings::is_surround_mode_Valid() const{
    return m_surround_mode_isValid;
}

bool OAIAudioCodecSettings_Eac3Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attenuation_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitstream_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coding_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dc_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialnorm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_range_compression_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_range_compression_rf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lfe_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lfe_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ro_center_mix_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ro_surround_mix_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lt_rt_center_mix_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lt_rt_surround_mix_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stereo_downmix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_surround_ex_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_surround_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioCodecSettings_Eac3Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
