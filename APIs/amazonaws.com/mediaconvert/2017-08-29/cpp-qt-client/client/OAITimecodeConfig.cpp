/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimecodeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimecodeConfig::OAITimecodeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimecodeConfig::OAITimecodeConfig() {
    this->initializeModel();
}

OAITimecodeConfig::~OAITimecodeConfig() {}

void OAITimecodeConfig::initializeModel() {

    m_anchor_isSet = false;
    m_anchor_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_timestamp_offset_isSet = false;
    m_timestamp_offset_isValid = false;
}

void OAITimecodeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimecodeConfig::fromJsonObject(QJsonObject json) {

    m_anchor_isValid = ::OpenAPI::fromJsonValue(m_anchor, json[QString("Anchor")]);
    m_anchor_isSet = !json[QString("Anchor")].isNull() && m_anchor_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("Start")]);
    m_start_isSet = !json[QString("Start")].isNull() && m_start_isValid;

    m_timestamp_offset_isValid = ::OpenAPI::fromJsonValue(m_timestamp_offset, json[QString("TimestampOffset")]);
    m_timestamp_offset_isSet = !json[QString("TimestampOffset")].isNull() && m_timestamp_offset_isValid;
}

QString OAITimecodeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimecodeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_anchor_isSet) {
        obj.insert(QString("Anchor"), ::OpenAPI::toJsonValue(m_anchor));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_start_isSet) {
        obj.insert(QString("Start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_timestamp_offset_isSet) {
        obj.insert(QString("TimestampOffset"), ::OpenAPI::toJsonValue(m_timestamp_offset));
    }
    return obj;
}

QString OAITimecodeConfig::getAnchor() const {
    return m_anchor;
}
void OAITimecodeConfig::setAnchor(const QString &anchor) {
    m_anchor = anchor;
    m_anchor_isSet = true;
}

bool OAITimecodeConfig::is_anchor_Set() const{
    return m_anchor_isSet;
}

bool OAITimecodeConfig::is_anchor_Valid() const{
    return m_anchor_isValid;
}

OAITimecodeSource OAITimecodeConfig::getSource() const {
    return m_source;
}
void OAITimecodeConfig::setSource(const OAITimecodeSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITimecodeConfig::is_source_Set() const{
    return m_source_isSet;
}

bool OAITimecodeConfig::is_source_Valid() const{
    return m_source_isValid;
}

QString OAITimecodeConfig::getStart() const {
    return m_start;
}
void OAITimecodeConfig::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAITimecodeConfig::is_start_Set() const{
    return m_start_isSet;
}

bool OAITimecodeConfig::is_start_Valid() const{
    return m_start_isValid;
}

QString OAITimecodeConfig::getTimestampOffset() const {
    return m_timestamp_offset;
}
void OAITimecodeConfig::setTimestampOffset(const QString &timestamp_offset) {
    m_timestamp_offset = timestamp_offset;
    m_timestamp_offset_isSet = true;
}

bool OAITimecodeConfig::is_timestamp_offset_Set() const{
    return m_timestamp_offset_isSet;
}

bool OAITimecodeConfig::is_timestamp_offset_Valid() const{
    return m_timestamp_offset_isValid;
}

bool OAITimecodeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimecodeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
