/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioDescription_AudioChannelTaggingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioDescription_AudioChannelTaggingSettings::OAIAudioDescription_AudioChannelTaggingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioDescription_AudioChannelTaggingSettings::OAIAudioDescription_AudioChannelTaggingSettings() {
    this->initializeModel();
}

OAIAudioDescription_AudioChannelTaggingSettings::~OAIAudioDescription_AudioChannelTaggingSettings() {}

void OAIAudioDescription_AudioChannelTaggingSettings::initializeModel() {

    m_channel_tag_isSet = false;
    m_channel_tag_isValid = false;
}

void OAIAudioDescription_AudioChannelTaggingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioDescription_AudioChannelTaggingSettings::fromJsonObject(QJsonObject json) {

    m_channel_tag_isValid = ::OpenAPI::fromJsonValue(m_channel_tag, json[QString("ChannelTag")]);
    m_channel_tag_isSet = !json[QString("ChannelTag")].isNull() && m_channel_tag_isValid;
}

QString OAIAudioDescription_AudioChannelTaggingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioDescription_AudioChannelTaggingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_tag.isSet()) {
        obj.insert(QString("ChannelTag"), ::OpenAPI::toJsonValue(m_channel_tag));
    }
    return obj;
}

OAIAudioChannelTag OAIAudioDescription_AudioChannelTaggingSettings::getChannelTag() const {
    return m_channel_tag;
}
void OAIAudioDescription_AudioChannelTaggingSettings::setChannelTag(const OAIAudioChannelTag &channel_tag) {
    m_channel_tag = channel_tag;
    m_channel_tag_isSet = true;
}

bool OAIAudioDescription_AudioChannelTaggingSettings::is_channel_tag_Set() const{
    return m_channel_tag_isSet;
}

bool OAIAudioDescription_AudioChannelTaggingSettings::is_channel_tag_Valid() const{
    return m_channel_tag_isValid;
}

bool OAIAudioDescription_AudioChannelTaggingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioDescription_AudioChannelTaggingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
