/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMxfSettings_XavcProfileSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMxfSettings_XavcProfileSettings::OAIMxfSettings_XavcProfileSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMxfSettings_XavcProfileSettings::OAIMxfSettings_XavcProfileSettings() {
    this->initializeModel();
}

OAIMxfSettings_XavcProfileSettings::~OAIMxfSettings_XavcProfileSettings() {}

void OAIMxfSettings_XavcProfileSettings::initializeModel() {

    m_duration_mode_isSet = false;
    m_duration_mode_isValid = false;

    m_max_anc_data_size_isSet = false;
    m_max_anc_data_size_isValid = false;
}

void OAIMxfSettings_XavcProfileSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMxfSettings_XavcProfileSettings::fromJsonObject(QJsonObject json) {

    m_duration_mode_isValid = ::OpenAPI::fromJsonValue(m_duration_mode, json[QString("DurationMode")]);
    m_duration_mode_isSet = !json[QString("DurationMode")].isNull() && m_duration_mode_isValid;

    m_max_anc_data_size_isValid = ::OpenAPI::fromJsonValue(m_max_anc_data_size, json[QString("MaxAncDataSize")]);
    m_max_anc_data_size_isSet = !json[QString("MaxAncDataSize")].isNull() && m_max_anc_data_size_isValid;
}

QString OAIMxfSettings_XavcProfileSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMxfSettings_XavcProfileSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_mode.isSet()) {
        obj.insert(QString("DurationMode"), ::OpenAPI::toJsonValue(m_duration_mode));
    }
    if (m_max_anc_data_size_isSet) {
        obj.insert(QString("MaxAncDataSize"), ::OpenAPI::toJsonValue(m_max_anc_data_size));
    }
    return obj;
}

OAIMxfXavcDurationMode OAIMxfSettings_XavcProfileSettings::getDurationMode() const {
    return m_duration_mode;
}
void OAIMxfSettings_XavcProfileSettings::setDurationMode(const OAIMxfXavcDurationMode &duration_mode) {
    m_duration_mode = duration_mode;
    m_duration_mode_isSet = true;
}

bool OAIMxfSettings_XavcProfileSettings::is_duration_mode_Set() const{
    return m_duration_mode_isSet;
}

bool OAIMxfSettings_XavcProfileSettings::is_duration_mode_Valid() const{
    return m_duration_mode_isValid;
}

qint32 OAIMxfSettings_XavcProfileSettings::getMaxAncDataSize() const {
    return m_max_anc_data_size;
}
void OAIMxfSettings_XavcProfileSettings::setMaxAncDataSize(const qint32 &max_anc_data_size) {
    m_max_anc_data_size = max_anc_data_size;
    m_max_anc_data_size_isSet = true;
}

bool OAIMxfSettings_XavcProfileSettings::is_max_anc_data_size_Set() const{
    return m_max_anc_data_size_isSet;
}

bool OAIMxfSettings_XavcProfileSettings::is_max_anc_data_size_Valid() const{
    return m_max_anc_data_size_isValid;
}

bool OAIMxfSettings_XavcProfileSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_anc_data_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMxfSettings_XavcProfileSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
