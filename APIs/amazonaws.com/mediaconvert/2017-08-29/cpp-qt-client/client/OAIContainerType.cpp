/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerType::OAIContainerType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerType::OAIContainerType() {
    this->initializeModel();
}

OAIContainerType::~OAIContainerType() {}

void OAIContainerType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIContainerType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIContainerType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("F4V", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::F4V;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ISMV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::ISMV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M2TS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::M2TS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M3U8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::M3U8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CMFC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::CMFC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MOV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::MOV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MP4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::MP4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MPD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::MPD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MXF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::MXF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEBM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::WEBM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RAW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerType::RAW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIContainerType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIContainerType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIContainerType::F4V:
            val = "F4V";
            break;
        case eOAIContainerType::ISMV:
            val = "ISMV";
            break;
        case eOAIContainerType::M2TS:
            val = "M2TS";
            break;
        case eOAIContainerType::M3U8:
            val = "M3U8";
            break;
        case eOAIContainerType::CMFC:
            val = "CMFC";
            break;
        case eOAIContainerType::MOV:
            val = "MOV";
            break;
        case eOAIContainerType::MP4:
            val = "MP4";
            break;
        case eOAIContainerType::MPD:
            val = "MPD";
            break;
        case eOAIContainerType::MXF:
            val = "MXF";
            break;
        case eOAIContainerType::WEBM:
            val = "WEBM";
            break;
        case eOAIContainerType::RAW:
            val = "RAW";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIContainerType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIContainerType::eOAIContainerType OAIContainerType::getValue() const {
    return m_value;
}

void OAIContainerType::setValue(const OAIContainerType::eOAIContainerType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIContainerType::isSet() const {
    
    return m_value_isSet;
}

bool OAIContainerType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
