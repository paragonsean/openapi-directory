/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMovSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMovSettings::OAIMovSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMovSettings::OAIMovSettings() {
    this->initializeModel();
}

OAIMovSettings::~OAIMovSettings() {}

void OAIMovSettings::initializeModel() {

    m_clap_atom_isSet = false;
    m_clap_atom_isValid = false;

    m_cslg_atom_isSet = false;
    m_cslg_atom_isValid = false;

    m_mpeg2_four_cc_control_isSet = false;
    m_mpeg2_four_cc_control_isValid = false;

    m_padding_control_isSet = false;
    m_padding_control_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;
}

void OAIMovSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMovSettings::fromJsonObject(QJsonObject json) {

    m_clap_atom_isValid = ::OpenAPI::fromJsonValue(m_clap_atom, json[QString("ClapAtom")]);
    m_clap_atom_isSet = !json[QString("ClapAtom")].isNull() && m_clap_atom_isValid;

    m_cslg_atom_isValid = ::OpenAPI::fromJsonValue(m_cslg_atom, json[QString("CslgAtom")]);
    m_cslg_atom_isSet = !json[QString("CslgAtom")].isNull() && m_cslg_atom_isValid;

    m_mpeg2_four_cc_control_isValid = ::OpenAPI::fromJsonValue(m_mpeg2_four_cc_control, json[QString("Mpeg2FourCCControl")]);
    m_mpeg2_four_cc_control_isSet = !json[QString("Mpeg2FourCCControl")].isNull() && m_mpeg2_four_cc_control_isValid;

    m_padding_control_isValid = ::OpenAPI::fromJsonValue(m_padding_control, json[QString("PaddingControl")]);
    m_padding_control_isSet = !json[QString("PaddingControl")].isNull() && m_padding_control_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;
}

QString OAIMovSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMovSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_clap_atom.isSet()) {
        obj.insert(QString("ClapAtom"), ::OpenAPI::toJsonValue(m_clap_atom));
    }
    if (m_cslg_atom.isSet()) {
        obj.insert(QString("CslgAtom"), ::OpenAPI::toJsonValue(m_cslg_atom));
    }
    if (m_mpeg2_four_cc_control.isSet()) {
        obj.insert(QString("Mpeg2FourCCControl"), ::OpenAPI::toJsonValue(m_mpeg2_four_cc_control));
    }
    if (m_padding_control.isSet()) {
        obj.insert(QString("PaddingControl"), ::OpenAPI::toJsonValue(m_padding_control));
    }
    if (m_reference.isSet()) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    return obj;
}

OAIMovClapAtom OAIMovSettings::getClapAtom() const {
    return m_clap_atom;
}
void OAIMovSettings::setClapAtom(const OAIMovClapAtom &clap_atom) {
    m_clap_atom = clap_atom;
    m_clap_atom_isSet = true;
}

bool OAIMovSettings::is_clap_atom_Set() const{
    return m_clap_atom_isSet;
}

bool OAIMovSettings::is_clap_atom_Valid() const{
    return m_clap_atom_isValid;
}

OAIMovCslgAtom OAIMovSettings::getCslgAtom() const {
    return m_cslg_atom;
}
void OAIMovSettings::setCslgAtom(const OAIMovCslgAtom &cslg_atom) {
    m_cslg_atom = cslg_atom;
    m_cslg_atom_isSet = true;
}

bool OAIMovSettings::is_cslg_atom_Set() const{
    return m_cslg_atom_isSet;
}

bool OAIMovSettings::is_cslg_atom_Valid() const{
    return m_cslg_atom_isValid;
}

OAIMovMpeg2FourCCControl OAIMovSettings::getMpeg2FourCcControl() const {
    return m_mpeg2_four_cc_control;
}
void OAIMovSettings::setMpeg2FourCcControl(const OAIMovMpeg2FourCCControl &mpeg2_four_cc_control) {
    m_mpeg2_four_cc_control = mpeg2_four_cc_control;
    m_mpeg2_four_cc_control_isSet = true;
}

bool OAIMovSettings::is_mpeg2_four_cc_control_Set() const{
    return m_mpeg2_four_cc_control_isSet;
}

bool OAIMovSettings::is_mpeg2_four_cc_control_Valid() const{
    return m_mpeg2_four_cc_control_isValid;
}

OAIMovPaddingControl OAIMovSettings::getPaddingControl() const {
    return m_padding_control;
}
void OAIMovSettings::setPaddingControl(const OAIMovPaddingControl &padding_control) {
    m_padding_control = padding_control;
    m_padding_control_isSet = true;
}

bool OAIMovSettings::is_padding_control_Set() const{
    return m_padding_control_isSet;
}

bool OAIMovSettings::is_padding_control_Valid() const{
    return m_padding_control_isValid;
}

OAIMovReference OAIMovSettings::getReference() const {
    return m_reference;
}
void OAIMovSettings::setReference(const OAIMovReference &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIMovSettings::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIMovSettings::is_reference_Valid() const{
    return m_reference_isValid;
}

bool OAIMovSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clap_atom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cslg_atom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpeg2_four_cc_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMovSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
