/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProresSettings.h
 *
 * Required when you set Codec to the value PRORES.
 */

#ifndef OAIProresSettings_H
#define OAIProresSettings_H

#include <QJsonObject>

#include "OAIProresChromaSampling.h"
#include "OAIProresCodecProfile.h"
#include "OAIProresFramerateControl.h"
#include "OAIProresFramerateConversionAlgorithm.h"
#include "OAIProresInterlaceMode.h"
#include "OAIProresParControl.h"
#include "OAIProresScanTypeConversionMode.h"
#include "OAIProresSlowPal.h"
#include "OAIProresTelecine.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProresSettings : public OAIObject {
public:
    OAIProresSettings();
    OAIProresSettings(QString json);
    ~OAIProresSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIProresChromaSampling getChromaSampling() const;
    void setChromaSampling(const OAIProresChromaSampling &chroma_sampling);
    bool is_chroma_sampling_Set() const;
    bool is_chroma_sampling_Valid() const;

    OAIProresCodecProfile getCodecProfile() const;
    void setCodecProfile(const OAIProresCodecProfile &codec_profile);
    bool is_codec_profile_Set() const;
    bool is_codec_profile_Valid() const;

    OAIProresFramerateControl getFramerateControl() const;
    void setFramerateControl(const OAIProresFramerateControl &framerate_control);
    bool is_framerate_control_Set() const;
    bool is_framerate_control_Valid() const;

    OAIProresFramerateConversionAlgorithm getFramerateConversionAlgorithm() const;
    void setFramerateConversionAlgorithm(const OAIProresFramerateConversionAlgorithm &framerate_conversion_algorithm);
    bool is_framerate_conversion_algorithm_Set() const;
    bool is_framerate_conversion_algorithm_Valid() const;

    qint32 getFramerateDenominator() const;
    void setFramerateDenominator(const qint32 &framerate_denominator);
    bool is_framerate_denominator_Set() const;
    bool is_framerate_denominator_Valid() const;

    qint32 getFramerateNumerator() const;
    void setFramerateNumerator(const qint32 &framerate_numerator);
    bool is_framerate_numerator_Set() const;
    bool is_framerate_numerator_Valid() const;

    OAIProresInterlaceMode getInterlaceMode() const;
    void setInterlaceMode(const OAIProresInterlaceMode &interlace_mode);
    bool is_interlace_mode_Set() const;
    bool is_interlace_mode_Valid() const;

    OAIProresParControl getParControl() const;
    void setParControl(const OAIProresParControl &par_control);
    bool is_par_control_Set() const;
    bool is_par_control_Valid() const;

    qint32 getParDenominator() const;
    void setParDenominator(const qint32 &par_denominator);
    bool is_par_denominator_Set() const;
    bool is_par_denominator_Valid() const;

    qint32 getParNumerator() const;
    void setParNumerator(const qint32 &par_numerator);
    bool is_par_numerator_Set() const;
    bool is_par_numerator_Valid() const;

    OAIProresScanTypeConversionMode getScanTypeConversionMode() const;
    void setScanTypeConversionMode(const OAIProresScanTypeConversionMode &scan_type_conversion_mode);
    bool is_scan_type_conversion_mode_Set() const;
    bool is_scan_type_conversion_mode_Valid() const;

    OAIProresSlowPal getSlowPal() const;
    void setSlowPal(const OAIProresSlowPal &slow_pal);
    bool is_slow_pal_Set() const;
    bool is_slow_pal_Valid() const;

    OAIProresTelecine getTelecine() const;
    void setTelecine(const OAIProresTelecine &telecine);
    bool is_telecine_Set() const;
    bool is_telecine_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIProresChromaSampling m_chroma_sampling;
    bool m_chroma_sampling_isSet;
    bool m_chroma_sampling_isValid;

    OAIProresCodecProfile m_codec_profile;
    bool m_codec_profile_isSet;
    bool m_codec_profile_isValid;

    OAIProresFramerateControl m_framerate_control;
    bool m_framerate_control_isSet;
    bool m_framerate_control_isValid;

    OAIProresFramerateConversionAlgorithm m_framerate_conversion_algorithm;
    bool m_framerate_conversion_algorithm_isSet;
    bool m_framerate_conversion_algorithm_isValid;

    qint32 m_framerate_denominator;
    bool m_framerate_denominator_isSet;
    bool m_framerate_denominator_isValid;

    qint32 m_framerate_numerator;
    bool m_framerate_numerator_isSet;
    bool m_framerate_numerator_isValid;

    OAIProresInterlaceMode m_interlace_mode;
    bool m_interlace_mode_isSet;
    bool m_interlace_mode_isValid;

    OAIProresParControl m_par_control;
    bool m_par_control_isSet;
    bool m_par_control_isValid;

    qint32 m_par_denominator;
    bool m_par_denominator_isSet;
    bool m_par_denominator_isValid;

    qint32 m_par_numerator;
    bool m_par_numerator_isSet;
    bool m_par_numerator_isValid;

    OAIProresScanTypeConversionMode m_scan_type_conversion_mode;
    bool m_scan_type_conversion_mode_isSet;
    bool m_scan_type_conversion_mode_isValid;

    OAIProresSlowPal m_slow_pal;
    bool m_slow_pal_isSet;
    bool m_slow_pal_isValid;

    OAIProresTelecine m_telecine;
    bool m_telecine_isSet;
    bool m_telecine_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProresSettings)

#endif // OAIProresSettings_H
