/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFrameCaptureSettings.h
 *
 * Required when you set Codec to the value FRAME_CAPTURE.
 */

#ifndef OAIFrameCaptureSettings_H
#define OAIFrameCaptureSettings_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFrameCaptureSettings : public OAIObject {
public:
    OAIFrameCaptureSettings();
    OAIFrameCaptureSettings(QString json);
    ~OAIFrameCaptureSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFramerateDenominator() const;
    void setFramerateDenominator(const qint32 &framerate_denominator);
    bool is_framerate_denominator_Set() const;
    bool is_framerate_denominator_Valid() const;

    qint32 getFramerateNumerator() const;
    void setFramerateNumerator(const qint32 &framerate_numerator);
    bool is_framerate_numerator_Set() const;
    bool is_framerate_numerator_Valid() const;

    qint32 getMaxCaptures() const;
    void setMaxCaptures(const qint32 &max_captures);
    bool is_max_captures_Set() const;
    bool is_max_captures_Valid() const;

    qint32 getQuality() const;
    void setQuality(const qint32 &quality);
    bool is_quality_Set() const;
    bool is_quality_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_framerate_denominator;
    bool m_framerate_denominator_isSet;
    bool m_framerate_denominator_isValid;

    qint32 m_framerate_numerator;
    bool m_framerate_numerator_isSet;
    bool m_framerate_numerator_isValid;

    qint32 m_max_captures;
    bool m_max_captures_isSet;
    bool m_max_captures_isValid;

    qint32 m_quality;
    bool m_quality_isSet;
    bool m_quality_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFrameCaptureSettings)

#endif // OAIFrameCaptureSettings_H
