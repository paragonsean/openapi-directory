/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioNormalizationSettings.h
 *
 * Advanced audio normalization settings. Ignore these settings unless you need to comply with a loudness standard.
 */

#ifndef OAIAudioNormalizationSettings_H
#define OAIAudioNormalizationSettings_H

#include <QJsonObject>

#include "OAIAudioNormalizationAlgorithm.h"
#include "OAIAudioNormalizationAlgorithmControl.h"
#include "OAIAudioNormalizationLoudnessLogging.h"
#include "OAIAudioNormalizationPeakCalculation.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAudioNormalizationSettings : public OAIObject {
public:
    OAIAudioNormalizationSettings();
    OAIAudioNormalizationSettings(QString json);
    ~OAIAudioNormalizationSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudioNormalizationAlgorithm getAlgorithm() const;
    void setAlgorithm(const OAIAudioNormalizationAlgorithm &algorithm);
    bool is_algorithm_Set() const;
    bool is_algorithm_Valid() const;

    OAIAudioNormalizationAlgorithmControl getAlgorithmControl() const;
    void setAlgorithmControl(const OAIAudioNormalizationAlgorithmControl &algorithm_control);
    bool is_algorithm_control_Set() const;
    bool is_algorithm_control_Valid() const;

    qint32 getCorrectionGateLevel() const;
    void setCorrectionGateLevel(const qint32 &correction_gate_level);
    bool is_correction_gate_level_Set() const;
    bool is_correction_gate_level_Valid() const;

    OAIAudioNormalizationLoudnessLogging getLoudnessLogging() const;
    void setLoudnessLogging(const OAIAudioNormalizationLoudnessLogging &loudness_logging);
    bool is_loudness_logging_Set() const;
    bool is_loudness_logging_Valid() const;

    OAIAudioNormalizationPeakCalculation getPeakCalculation() const;
    void setPeakCalculation(const OAIAudioNormalizationPeakCalculation &peak_calculation);
    bool is_peak_calculation_Set() const;
    bool is_peak_calculation_Valid() const;

    double getTargetLkfs() const;
    void setTargetLkfs(const double &target_lkfs);
    bool is_target_lkfs_Set() const;
    bool is_target_lkfs_Valid() const;

    double getTruePeakLimiterThreshold() const;
    void setTruePeakLimiterThreshold(const double &true_peak_limiter_threshold);
    bool is_true_peak_limiter_threshold_Set() const;
    bool is_true_peak_limiter_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudioNormalizationAlgorithm m_algorithm;
    bool m_algorithm_isSet;
    bool m_algorithm_isValid;

    OAIAudioNormalizationAlgorithmControl m_algorithm_control;
    bool m_algorithm_control_isSet;
    bool m_algorithm_control_isValid;

    qint32 m_correction_gate_level;
    bool m_correction_gate_level_isSet;
    bool m_correction_gate_level_isValid;

    OAIAudioNormalizationLoudnessLogging m_loudness_logging;
    bool m_loudness_logging_isSet;
    bool m_loudness_logging_isValid;

    OAIAudioNormalizationPeakCalculation m_peak_calculation;
    bool m_peak_calculation_isSet;
    bool m_peak_calculation_isValid;

    double m_target_lkfs;
    bool m_target_lkfs_isSet;
    bool m_target_lkfs_isValid;

    double m_true_peak_limiter_threshold;
    bool m_true_peak_limiter_threshold_isSet;
    bool m_true_peak_limiter_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioNormalizationSettings)

#endif // OAIAudioNormalizationSettings_H
