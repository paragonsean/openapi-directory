/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputGroupSettings_HlsGroupSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputGroupSettings_HlsGroupSettings::OAIOutputGroupSettings_HlsGroupSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputGroupSettings_HlsGroupSettings::OAIOutputGroupSettings_HlsGroupSettings() {
    this->initializeModel();
}

OAIOutputGroupSettings_HlsGroupSettings::~OAIOutputGroupSettings_HlsGroupSettings() {}

void OAIOutputGroupSettings_HlsGroupSettings::initializeModel() {

    m_ad_markers_isSet = false;
    m_ad_markers_isValid = false;

    m_additional_manifests_isSet = false;
    m_additional_manifests_isValid = false;

    m_audio_only_header_isSet = false;
    m_audio_only_header_isValid = false;

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_caption_language_mappings_isSet = false;
    m_caption_language_mappings_isValid = false;

    m_caption_language_setting_isSet = false;
    m_caption_language_setting_isValid = false;

    m_caption_segment_length_control_isSet = false;
    m_caption_segment_length_control_isValid = false;

    m_client_cache_isSet = false;
    m_client_cache_isValid = false;

    m_codec_specification_isSet = false;
    m_codec_specification_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_settings_isSet = false;
    m_destination_settings_isValid = false;

    m_directory_structure_isSet = false;
    m_directory_structure_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_image_based_trick_play_isSet = false;
    m_image_based_trick_play_isValid = false;

    m_image_based_trick_play_settings_isSet = false;
    m_image_based_trick_play_settings_isValid = false;

    m_manifest_compression_isSet = false;
    m_manifest_compression_isValid = false;

    m_manifest_duration_format_isSet = false;
    m_manifest_duration_format_isValid = false;

    m_min_final_segment_length_isSet = false;
    m_min_final_segment_length_isValid = false;

    m_min_segment_length_isSet = false;
    m_min_segment_length_isValid = false;

    m_output_selection_isSet = false;
    m_output_selection_isValid = false;

    m_program_date_time_isSet = false;
    m_program_date_time_isValid = false;

    m_program_date_time_period_isSet = false;
    m_program_date_time_period_isValid = false;

    m_progressive_write_hls_manifest_isSet = false;
    m_progressive_write_hls_manifest_isValid = false;

    m_segment_control_isSet = false;
    m_segment_control_isValid = false;

    m_segment_length_isSet = false;
    m_segment_length_isValid = false;

    m_segment_length_control_isSet = false;
    m_segment_length_control_isValid = false;

    m_segments_per_subdirectory_isSet = false;
    m_segments_per_subdirectory_isValid = false;

    m_stream_inf_resolution_isSet = false;
    m_stream_inf_resolution_isValid = false;

    m_target_duration_compatibility_mode_isSet = false;
    m_target_duration_compatibility_mode_isValid = false;

    m_timed_metadata_id3_frame_isSet = false;
    m_timed_metadata_id3_frame_isValid = false;

    m_timed_metadata_id3_period_isSet = false;
    m_timed_metadata_id3_period_isValid = false;

    m_timestamp_delta_milliseconds_isSet = false;
    m_timestamp_delta_milliseconds_isValid = false;
}

void OAIOutputGroupSettings_HlsGroupSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputGroupSettings_HlsGroupSettings::fromJsonObject(QJsonObject json) {

    m_ad_markers_isValid = ::OpenAPI::fromJsonValue(m_ad_markers, json[QString("AdMarkers")]);
    m_ad_markers_isSet = !json[QString("AdMarkers")].isNull() && m_ad_markers_isValid;

    m_additional_manifests_isValid = ::OpenAPI::fromJsonValue(m_additional_manifests, json[QString("AdditionalManifests")]);
    m_additional_manifests_isSet = !json[QString("AdditionalManifests")].isNull() && m_additional_manifests_isValid;

    m_audio_only_header_isValid = ::OpenAPI::fromJsonValue(m_audio_only_header, json[QString("AudioOnlyHeader")]);
    m_audio_only_header_isSet = !json[QString("AudioOnlyHeader")].isNull() && m_audio_only_header_isValid;

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("BaseUrl")]);
    m_base_url_isSet = !json[QString("BaseUrl")].isNull() && m_base_url_isValid;

    m_caption_language_mappings_isValid = ::OpenAPI::fromJsonValue(m_caption_language_mappings, json[QString("CaptionLanguageMappings")]);
    m_caption_language_mappings_isSet = !json[QString("CaptionLanguageMappings")].isNull() && m_caption_language_mappings_isValid;

    m_caption_language_setting_isValid = ::OpenAPI::fromJsonValue(m_caption_language_setting, json[QString("CaptionLanguageSetting")]);
    m_caption_language_setting_isSet = !json[QString("CaptionLanguageSetting")].isNull() && m_caption_language_setting_isValid;

    m_caption_segment_length_control_isValid = ::OpenAPI::fromJsonValue(m_caption_segment_length_control, json[QString("CaptionSegmentLengthControl")]);
    m_caption_segment_length_control_isSet = !json[QString("CaptionSegmentLengthControl")].isNull() && m_caption_segment_length_control_isValid;

    m_client_cache_isValid = ::OpenAPI::fromJsonValue(m_client_cache, json[QString("ClientCache")]);
    m_client_cache_isSet = !json[QString("ClientCache")].isNull() && m_client_cache_isValid;

    m_codec_specification_isValid = ::OpenAPI::fromJsonValue(m_codec_specification, json[QString("CodecSpecification")]);
    m_codec_specification_isSet = !json[QString("CodecSpecification")].isNull() && m_codec_specification_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_destination_settings_isValid = ::OpenAPI::fromJsonValue(m_destination_settings, json[QString("DestinationSettings")]);
    m_destination_settings_isSet = !json[QString("DestinationSettings")].isNull() && m_destination_settings_isValid;

    m_directory_structure_isValid = ::OpenAPI::fromJsonValue(m_directory_structure, json[QString("DirectoryStructure")]);
    m_directory_structure_isSet = !json[QString("DirectoryStructure")].isNull() && m_directory_structure_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_image_based_trick_play_isValid = ::OpenAPI::fromJsonValue(m_image_based_trick_play, json[QString("ImageBasedTrickPlay")]);
    m_image_based_trick_play_isSet = !json[QString("ImageBasedTrickPlay")].isNull() && m_image_based_trick_play_isValid;

    m_image_based_trick_play_settings_isValid = ::OpenAPI::fromJsonValue(m_image_based_trick_play_settings, json[QString("ImageBasedTrickPlaySettings")]);
    m_image_based_trick_play_settings_isSet = !json[QString("ImageBasedTrickPlaySettings")].isNull() && m_image_based_trick_play_settings_isValid;

    m_manifest_compression_isValid = ::OpenAPI::fromJsonValue(m_manifest_compression, json[QString("ManifestCompression")]);
    m_manifest_compression_isSet = !json[QString("ManifestCompression")].isNull() && m_manifest_compression_isValid;

    m_manifest_duration_format_isValid = ::OpenAPI::fromJsonValue(m_manifest_duration_format, json[QString("ManifestDurationFormat")]);
    m_manifest_duration_format_isSet = !json[QString("ManifestDurationFormat")].isNull() && m_manifest_duration_format_isValid;

    m_min_final_segment_length_isValid = ::OpenAPI::fromJsonValue(m_min_final_segment_length, json[QString("MinFinalSegmentLength")]);
    m_min_final_segment_length_isSet = !json[QString("MinFinalSegmentLength")].isNull() && m_min_final_segment_length_isValid;

    m_min_segment_length_isValid = ::OpenAPI::fromJsonValue(m_min_segment_length, json[QString("MinSegmentLength")]);
    m_min_segment_length_isSet = !json[QString("MinSegmentLength")].isNull() && m_min_segment_length_isValid;

    m_output_selection_isValid = ::OpenAPI::fromJsonValue(m_output_selection, json[QString("OutputSelection")]);
    m_output_selection_isSet = !json[QString("OutputSelection")].isNull() && m_output_selection_isValid;

    m_program_date_time_isValid = ::OpenAPI::fromJsonValue(m_program_date_time, json[QString("ProgramDateTime")]);
    m_program_date_time_isSet = !json[QString("ProgramDateTime")].isNull() && m_program_date_time_isValid;

    m_program_date_time_period_isValid = ::OpenAPI::fromJsonValue(m_program_date_time_period, json[QString("ProgramDateTimePeriod")]);
    m_program_date_time_period_isSet = !json[QString("ProgramDateTimePeriod")].isNull() && m_program_date_time_period_isValid;

    m_progressive_write_hls_manifest_isValid = ::OpenAPI::fromJsonValue(m_progressive_write_hls_manifest, json[QString("ProgressiveWriteHlsManifest")]);
    m_progressive_write_hls_manifest_isSet = !json[QString("ProgressiveWriteHlsManifest")].isNull() && m_progressive_write_hls_manifest_isValid;

    m_segment_control_isValid = ::OpenAPI::fromJsonValue(m_segment_control, json[QString("SegmentControl")]);
    m_segment_control_isSet = !json[QString("SegmentControl")].isNull() && m_segment_control_isValid;

    m_segment_length_isValid = ::OpenAPI::fromJsonValue(m_segment_length, json[QString("SegmentLength")]);
    m_segment_length_isSet = !json[QString("SegmentLength")].isNull() && m_segment_length_isValid;

    m_segment_length_control_isValid = ::OpenAPI::fromJsonValue(m_segment_length_control, json[QString("SegmentLengthControl")]);
    m_segment_length_control_isSet = !json[QString("SegmentLengthControl")].isNull() && m_segment_length_control_isValid;

    m_segments_per_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_segments_per_subdirectory, json[QString("SegmentsPerSubdirectory")]);
    m_segments_per_subdirectory_isSet = !json[QString("SegmentsPerSubdirectory")].isNull() && m_segments_per_subdirectory_isValid;

    m_stream_inf_resolution_isValid = ::OpenAPI::fromJsonValue(m_stream_inf_resolution, json[QString("StreamInfResolution")]);
    m_stream_inf_resolution_isSet = !json[QString("StreamInfResolution")].isNull() && m_stream_inf_resolution_isValid;

    m_target_duration_compatibility_mode_isValid = ::OpenAPI::fromJsonValue(m_target_duration_compatibility_mode, json[QString("TargetDurationCompatibilityMode")]);
    m_target_duration_compatibility_mode_isSet = !json[QString("TargetDurationCompatibilityMode")].isNull() && m_target_duration_compatibility_mode_isValid;

    m_timed_metadata_id3_frame_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_id3_frame, json[QString("TimedMetadataId3Frame")]);
    m_timed_metadata_id3_frame_isSet = !json[QString("TimedMetadataId3Frame")].isNull() && m_timed_metadata_id3_frame_isValid;

    m_timed_metadata_id3_period_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_id3_period, json[QString("TimedMetadataId3Period")]);
    m_timed_metadata_id3_period_isSet = !json[QString("TimedMetadataId3Period")].isNull() && m_timed_metadata_id3_period_isValid;

    m_timestamp_delta_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_timestamp_delta_milliseconds, json[QString("TimestampDeltaMilliseconds")]);
    m_timestamp_delta_milliseconds_isSet = !json[QString("TimestampDeltaMilliseconds")].isNull() && m_timestamp_delta_milliseconds_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputGroupSettings_HlsGroupSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_markers.isSet()) {
        obj.insert(QString("AdMarkers"), ::OpenAPI::toJsonValue(m_ad_markers));
    }
    if (m_additional_manifests.isSet()) {
        obj.insert(QString("AdditionalManifests"), ::OpenAPI::toJsonValue(m_additional_manifests));
    }
    if (m_audio_only_header.isSet()) {
        obj.insert(QString("AudioOnlyHeader"), ::OpenAPI::toJsonValue(m_audio_only_header));
    }
    if (m_base_url_isSet) {
        obj.insert(QString("BaseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_caption_language_mappings.isSet()) {
        obj.insert(QString("CaptionLanguageMappings"), ::OpenAPI::toJsonValue(m_caption_language_mappings));
    }
    if (m_caption_language_setting.isSet()) {
        obj.insert(QString("CaptionLanguageSetting"), ::OpenAPI::toJsonValue(m_caption_language_setting));
    }
    if (m_caption_segment_length_control.isSet()) {
        obj.insert(QString("CaptionSegmentLengthControl"), ::OpenAPI::toJsonValue(m_caption_segment_length_control));
    }
    if (m_client_cache.isSet()) {
        obj.insert(QString("ClientCache"), ::OpenAPI::toJsonValue(m_client_cache));
    }
    if (m_codec_specification.isSet()) {
        obj.insert(QString("CodecSpecification"), ::OpenAPI::toJsonValue(m_codec_specification));
    }
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_settings.isSet()) {
        obj.insert(QString("DestinationSettings"), ::OpenAPI::toJsonValue(m_destination_settings));
    }
    if (m_directory_structure.isSet()) {
        obj.insert(QString("DirectoryStructure"), ::OpenAPI::toJsonValue(m_directory_structure));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_image_based_trick_play.isSet()) {
        obj.insert(QString("ImageBasedTrickPlay"), ::OpenAPI::toJsonValue(m_image_based_trick_play));
    }
    if (m_image_based_trick_play_settings.isSet()) {
        obj.insert(QString("ImageBasedTrickPlaySettings"), ::OpenAPI::toJsonValue(m_image_based_trick_play_settings));
    }
    if (m_manifest_compression.isSet()) {
        obj.insert(QString("ManifestCompression"), ::OpenAPI::toJsonValue(m_manifest_compression));
    }
    if (m_manifest_duration_format.isSet()) {
        obj.insert(QString("ManifestDurationFormat"), ::OpenAPI::toJsonValue(m_manifest_duration_format));
    }
    if (m_min_final_segment_length_isSet) {
        obj.insert(QString("MinFinalSegmentLength"), ::OpenAPI::toJsonValue(m_min_final_segment_length));
    }
    if (m_min_segment_length_isSet) {
        obj.insert(QString("MinSegmentLength"), ::OpenAPI::toJsonValue(m_min_segment_length));
    }
    if (m_output_selection.isSet()) {
        obj.insert(QString("OutputSelection"), ::OpenAPI::toJsonValue(m_output_selection));
    }
    if (m_program_date_time.isSet()) {
        obj.insert(QString("ProgramDateTime"), ::OpenAPI::toJsonValue(m_program_date_time));
    }
    if (m_program_date_time_period_isSet) {
        obj.insert(QString("ProgramDateTimePeriod"), ::OpenAPI::toJsonValue(m_program_date_time_period));
    }
    if (m_progressive_write_hls_manifest.isSet()) {
        obj.insert(QString("ProgressiveWriteHlsManifest"), ::OpenAPI::toJsonValue(m_progressive_write_hls_manifest));
    }
    if (m_segment_control.isSet()) {
        obj.insert(QString("SegmentControl"), ::OpenAPI::toJsonValue(m_segment_control));
    }
    if (m_segment_length_isSet) {
        obj.insert(QString("SegmentLength"), ::OpenAPI::toJsonValue(m_segment_length));
    }
    if (m_segment_length_control.isSet()) {
        obj.insert(QString("SegmentLengthControl"), ::OpenAPI::toJsonValue(m_segment_length_control));
    }
    if (m_segments_per_subdirectory_isSet) {
        obj.insert(QString("SegmentsPerSubdirectory"), ::OpenAPI::toJsonValue(m_segments_per_subdirectory));
    }
    if (m_stream_inf_resolution.isSet()) {
        obj.insert(QString("StreamInfResolution"), ::OpenAPI::toJsonValue(m_stream_inf_resolution));
    }
    if (m_target_duration_compatibility_mode.isSet()) {
        obj.insert(QString("TargetDurationCompatibilityMode"), ::OpenAPI::toJsonValue(m_target_duration_compatibility_mode));
    }
    if (m_timed_metadata_id3_frame.isSet()) {
        obj.insert(QString("TimedMetadataId3Frame"), ::OpenAPI::toJsonValue(m_timed_metadata_id3_frame));
    }
    if (m_timed_metadata_id3_period_isSet) {
        obj.insert(QString("TimedMetadataId3Period"), ::OpenAPI::toJsonValue(m_timed_metadata_id3_period));
    }
    if (m_timestamp_delta_milliseconds_isSet) {
        obj.insert(QString("TimestampDeltaMilliseconds"), ::OpenAPI::toJsonValue(m_timestamp_delta_milliseconds));
    }
    return obj;
}

QList OAIOutputGroupSettings_HlsGroupSettings::getAdMarkers() const {
    return m_ad_markers;
}
void OAIOutputGroupSettings_HlsGroupSettings::setAdMarkers(const QList &ad_markers) {
    m_ad_markers = ad_markers;
    m_ad_markers_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_ad_markers_Set() const{
    return m_ad_markers_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_ad_markers_Valid() const{
    return m_ad_markers_isValid;
}

QList OAIOutputGroupSettings_HlsGroupSettings::getAdditionalManifests() const {
    return m_additional_manifests;
}
void OAIOutputGroupSettings_HlsGroupSettings::setAdditionalManifests(const QList &additional_manifests) {
    m_additional_manifests = additional_manifests;
    m_additional_manifests_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_additional_manifests_Set() const{
    return m_additional_manifests_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_additional_manifests_Valid() const{
    return m_additional_manifests_isValid;
}

OAIHlsAudioOnlyHeader OAIOutputGroupSettings_HlsGroupSettings::getAudioOnlyHeader() const {
    return m_audio_only_header;
}
void OAIOutputGroupSettings_HlsGroupSettings::setAudioOnlyHeader(const OAIHlsAudioOnlyHeader &audio_only_header) {
    m_audio_only_header = audio_only_header;
    m_audio_only_header_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_audio_only_header_Set() const{
    return m_audio_only_header_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_audio_only_header_Valid() const{
    return m_audio_only_header_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getBaseUrl() const {
    return m_base_url;
}
void OAIOutputGroupSettings_HlsGroupSettings::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QList OAIOutputGroupSettings_HlsGroupSettings::getCaptionLanguageMappings() const {
    return m_caption_language_mappings;
}
void OAIOutputGroupSettings_HlsGroupSettings::setCaptionLanguageMappings(const QList &caption_language_mappings) {
    m_caption_language_mappings = caption_language_mappings;
    m_caption_language_mappings_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_language_mappings_Set() const{
    return m_caption_language_mappings_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_language_mappings_Valid() const{
    return m_caption_language_mappings_isValid;
}

OAIHlsCaptionLanguageSetting OAIOutputGroupSettings_HlsGroupSettings::getCaptionLanguageSetting() const {
    return m_caption_language_setting;
}
void OAIOutputGroupSettings_HlsGroupSettings::setCaptionLanguageSetting(const OAIHlsCaptionLanguageSetting &caption_language_setting) {
    m_caption_language_setting = caption_language_setting;
    m_caption_language_setting_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_language_setting_Set() const{
    return m_caption_language_setting_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_language_setting_Valid() const{
    return m_caption_language_setting_isValid;
}

OAIHlsCaptionSegmentLengthControl OAIOutputGroupSettings_HlsGroupSettings::getCaptionSegmentLengthControl() const {
    return m_caption_segment_length_control;
}
void OAIOutputGroupSettings_HlsGroupSettings::setCaptionSegmentLengthControl(const OAIHlsCaptionSegmentLengthControl &caption_segment_length_control) {
    m_caption_segment_length_control = caption_segment_length_control;
    m_caption_segment_length_control_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_segment_length_control_Set() const{
    return m_caption_segment_length_control_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_segment_length_control_Valid() const{
    return m_caption_segment_length_control_isValid;
}

OAIHlsClientCache OAIOutputGroupSettings_HlsGroupSettings::getClientCache() const {
    return m_client_cache;
}
void OAIOutputGroupSettings_HlsGroupSettings::setClientCache(const OAIHlsClientCache &client_cache) {
    m_client_cache = client_cache;
    m_client_cache_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_client_cache_Set() const{
    return m_client_cache_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_client_cache_Valid() const{
    return m_client_cache_isValid;
}

OAIHlsCodecSpecification OAIOutputGroupSettings_HlsGroupSettings::getCodecSpecification() const {
    return m_codec_specification;
}
void OAIOutputGroupSettings_HlsGroupSettings::setCodecSpecification(const OAIHlsCodecSpecification &codec_specification) {
    m_codec_specification = codec_specification;
    m_codec_specification_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_codec_specification_Set() const{
    return m_codec_specification_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_codec_specification_Valid() const{
    return m_codec_specification_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getDestination() const {
    return m_destination;
}
void OAIOutputGroupSettings_HlsGroupSettings::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_destination_Valid() const{
    return m_destination_isValid;
}

OAICmafGroupSettings_DestinationSettings OAIOutputGroupSettings_HlsGroupSettings::getDestinationSettings() const {
    return m_destination_settings;
}
void OAIOutputGroupSettings_HlsGroupSettings::setDestinationSettings(const OAICmafGroupSettings_DestinationSettings &destination_settings) {
    m_destination_settings = destination_settings;
    m_destination_settings_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_destination_settings_Set() const{
    return m_destination_settings_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_destination_settings_Valid() const{
    return m_destination_settings_isValid;
}

OAIHlsDirectoryStructure OAIOutputGroupSettings_HlsGroupSettings::getDirectoryStructure() const {
    return m_directory_structure;
}
void OAIOutputGroupSettings_HlsGroupSettings::setDirectoryStructure(const OAIHlsDirectoryStructure &directory_structure) {
    m_directory_structure = directory_structure;
    m_directory_structure_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_directory_structure_Set() const{
    return m_directory_structure_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_directory_structure_Valid() const{
    return m_directory_structure_isValid;
}

OAIHlsGroupSettings_Encryption OAIOutputGroupSettings_HlsGroupSettings::getEncryption() const {
    return m_encryption;
}
void OAIOutputGroupSettings_HlsGroupSettings::setEncryption(const OAIHlsGroupSettings_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_encryption_Valid() const{
    return m_encryption_isValid;
}

OAIHlsImageBasedTrickPlay OAIOutputGroupSettings_HlsGroupSettings::getImageBasedTrickPlay() const {
    return m_image_based_trick_play;
}
void OAIOutputGroupSettings_HlsGroupSettings::setImageBasedTrickPlay(const OAIHlsImageBasedTrickPlay &image_based_trick_play) {
    m_image_based_trick_play = image_based_trick_play;
    m_image_based_trick_play_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_image_based_trick_play_Set() const{
    return m_image_based_trick_play_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_image_based_trick_play_Valid() const{
    return m_image_based_trick_play_isValid;
}

OAIHlsGroupSettings_ImageBasedTrickPlaySettings OAIOutputGroupSettings_HlsGroupSettings::getImageBasedTrickPlaySettings() const {
    return m_image_based_trick_play_settings;
}
void OAIOutputGroupSettings_HlsGroupSettings::setImageBasedTrickPlaySettings(const OAIHlsGroupSettings_ImageBasedTrickPlaySettings &image_based_trick_play_settings) {
    m_image_based_trick_play_settings = image_based_trick_play_settings;
    m_image_based_trick_play_settings_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_image_based_trick_play_settings_Set() const{
    return m_image_based_trick_play_settings_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_image_based_trick_play_settings_Valid() const{
    return m_image_based_trick_play_settings_isValid;
}

OAIHlsManifestCompression OAIOutputGroupSettings_HlsGroupSettings::getManifestCompression() const {
    return m_manifest_compression;
}
void OAIOutputGroupSettings_HlsGroupSettings::setManifestCompression(const OAIHlsManifestCompression &manifest_compression) {
    m_manifest_compression = manifest_compression;
    m_manifest_compression_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_manifest_compression_Set() const{
    return m_manifest_compression_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_manifest_compression_Valid() const{
    return m_manifest_compression_isValid;
}

OAIHlsManifestDurationFormat OAIOutputGroupSettings_HlsGroupSettings::getManifestDurationFormat() const {
    return m_manifest_duration_format;
}
void OAIOutputGroupSettings_HlsGroupSettings::setManifestDurationFormat(const OAIHlsManifestDurationFormat &manifest_duration_format) {
    m_manifest_duration_format = manifest_duration_format;
    m_manifest_duration_format_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_manifest_duration_format_Set() const{
    return m_manifest_duration_format_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_manifest_duration_format_Valid() const{
    return m_manifest_duration_format_isValid;
}

double OAIOutputGroupSettings_HlsGroupSettings::getMinFinalSegmentLength() const {
    return m_min_final_segment_length;
}
void OAIOutputGroupSettings_HlsGroupSettings::setMinFinalSegmentLength(const double &min_final_segment_length) {
    m_min_final_segment_length = min_final_segment_length;
    m_min_final_segment_length_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_min_final_segment_length_Set() const{
    return m_min_final_segment_length_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_min_final_segment_length_Valid() const{
    return m_min_final_segment_length_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getMinSegmentLength() const {
    return m_min_segment_length;
}
void OAIOutputGroupSettings_HlsGroupSettings::setMinSegmentLength(const qint32 &min_segment_length) {
    m_min_segment_length = min_segment_length;
    m_min_segment_length_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_min_segment_length_Set() const{
    return m_min_segment_length_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_min_segment_length_Valid() const{
    return m_min_segment_length_isValid;
}

OAIHlsOutputSelection OAIOutputGroupSettings_HlsGroupSettings::getOutputSelection() const {
    return m_output_selection;
}
void OAIOutputGroupSettings_HlsGroupSettings::setOutputSelection(const OAIHlsOutputSelection &output_selection) {
    m_output_selection = output_selection;
    m_output_selection_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_output_selection_Set() const{
    return m_output_selection_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_output_selection_Valid() const{
    return m_output_selection_isValid;
}

OAIHlsProgramDateTime OAIOutputGroupSettings_HlsGroupSettings::getProgramDateTime() const {
    return m_program_date_time;
}
void OAIOutputGroupSettings_HlsGroupSettings::setProgramDateTime(const OAIHlsProgramDateTime &program_date_time) {
    m_program_date_time = program_date_time;
    m_program_date_time_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_Set() const{
    return m_program_date_time_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_Valid() const{
    return m_program_date_time_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getProgramDateTimePeriod() const {
    return m_program_date_time_period;
}
void OAIOutputGroupSettings_HlsGroupSettings::setProgramDateTimePeriod(const qint32 &program_date_time_period) {
    m_program_date_time_period = program_date_time_period;
    m_program_date_time_period_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_period_Set() const{
    return m_program_date_time_period_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_period_Valid() const{
    return m_program_date_time_period_isValid;
}

OAIHlsProgressiveWriteHlsManifest OAIOutputGroupSettings_HlsGroupSettings::getProgressiveWriteHlsManifest() const {
    return m_progressive_write_hls_manifest;
}
void OAIOutputGroupSettings_HlsGroupSettings::setProgressiveWriteHlsManifest(const OAIHlsProgressiveWriteHlsManifest &progressive_write_hls_manifest) {
    m_progressive_write_hls_manifest = progressive_write_hls_manifest;
    m_progressive_write_hls_manifest_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_progressive_write_hls_manifest_Set() const{
    return m_progressive_write_hls_manifest_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_progressive_write_hls_manifest_Valid() const{
    return m_progressive_write_hls_manifest_isValid;
}

OAIHlsSegmentControl OAIOutputGroupSettings_HlsGroupSettings::getSegmentControl() const {
    return m_segment_control;
}
void OAIOutputGroupSettings_HlsGroupSettings::setSegmentControl(const OAIHlsSegmentControl &segment_control) {
    m_segment_control = segment_control;
    m_segment_control_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segment_control_Set() const{
    return m_segment_control_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segment_control_Valid() const{
    return m_segment_control_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getSegmentLength() const {
    return m_segment_length;
}
void OAIOutputGroupSettings_HlsGroupSettings::setSegmentLength(const qint32 &segment_length) {
    m_segment_length = segment_length;
    m_segment_length_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segment_length_Set() const{
    return m_segment_length_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segment_length_Valid() const{
    return m_segment_length_isValid;
}

OAIHlsSegmentLengthControl OAIOutputGroupSettings_HlsGroupSettings::getSegmentLengthControl() const {
    return m_segment_length_control;
}
void OAIOutputGroupSettings_HlsGroupSettings::setSegmentLengthControl(const OAIHlsSegmentLengthControl &segment_length_control) {
    m_segment_length_control = segment_length_control;
    m_segment_length_control_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segment_length_control_Set() const{
    return m_segment_length_control_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segment_length_control_Valid() const{
    return m_segment_length_control_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getSegmentsPerSubdirectory() const {
    return m_segments_per_subdirectory;
}
void OAIOutputGroupSettings_HlsGroupSettings::setSegmentsPerSubdirectory(const qint32 &segments_per_subdirectory) {
    m_segments_per_subdirectory = segments_per_subdirectory;
    m_segments_per_subdirectory_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segments_per_subdirectory_Set() const{
    return m_segments_per_subdirectory_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segments_per_subdirectory_Valid() const{
    return m_segments_per_subdirectory_isValid;
}

OAIHlsStreamInfResolution OAIOutputGroupSettings_HlsGroupSettings::getStreamInfResolution() const {
    return m_stream_inf_resolution;
}
void OAIOutputGroupSettings_HlsGroupSettings::setStreamInfResolution(const OAIHlsStreamInfResolution &stream_inf_resolution) {
    m_stream_inf_resolution = stream_inf_resolution;
    m_stream_inf_resolution_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_stream_inf_resolution_Set() const{
    return m_stream_inf_resolution_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_stream_inf_resolution_Valid() const{
    return m_stream_inf_resolution_isValid;
}

OAIHlsTargetDurationCompatibilityMode OAIOutputGroupSettings_HlsGroupSettings::getTargetDurationCompatibilityMode() const {
    return m_target_duration_compatibility_mode;
}
void OAIOutputGroupSettings_HlsGroupSettings::setTargetDurationCompatibilityMode(const OAIHlsTargetDurationCompatibilityMode &target_duration_compatibility_mode) {
    m_target_duration_compatibility_mode = target_duration_compatibility_mode;
    m_target_duration_compatibility_mode_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_target_duration_compatibility_mode_Set() const{
    return m_target_duration_compatibility_mode_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_target_duration_compatibility_mode_Valid() const{
    return m_target_duration_compatibility_mode_isValid;
}

OAIHlsTimedMetadataId3Frame OAIOutputGroupSettings_HlsGroupSettings::getTimedMetadataId3Frame() const {
    return m_timed_metadata_id3_frame;
}
void OAIOutputGroupSettings_HlsGroupSettings::setTimedMetadataId3Frame(const OAIHlsTimedMetadataId3Frame &timed_metadata_id3_frame) {
    m_timed_metadata_id3_frame = timed_metadata_id3_frame;
    m_timed_metadata_id3_frame_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timed_metadata_id3_frame_Set() const{
    return m_timed_metadata_id3_frame_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timed_metadata_id3_frame_Valid() const{
    return m_timed_metadata_id3_frame_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getTimedMetadataId3Period() const {
    return m_timed_metadata_id3_period;
}
void OAIOutputGroupSettings_HlsGroupSettings::setTimedMetadataId3Period(const qint32 &timed_metadata_id3_period) {
    m_timed_metadata_id3_period = timed_metadata_id3_period;
    m_timed_metadata_id3_period_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timed_metadata_id3_period_Set() const{
    return m_timed_metadata_id3_period_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timed_metadata_id3_period_Valid() const{
    return m_timed_metadata_id3_period_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getTimestampDeltaMilliseconds() const {
    return m_timestamp_delta_milliseconds;
}
void OAIOutputGroupSettings_HlsGroupSettings::setTimestampDeltaMilliseconds(const qint32 &timestamp_delta_milliseconds) {
    m_timestamp_delta_milliseconds = timestamp_delta_milliseconds;
    m_timestamp_delta_milliseconds_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timestamp_delta_milliseconds_Set() const{
    return m_timestamp_delta_milliseconds_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timestamp_delta_milliseconds_Valid() const{
    return m_timestamp_delta_milliseconds_isValid;
}

bool OAIOutputGroupSettings_HlsGroupSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_markers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_manifests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_only_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_language_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_language_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_segment_length_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_cache.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_structure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_based_trick_play.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_based_trick_play_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_duration_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_final_segment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_segment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_date_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_date_time_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progressive_write_hls_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_length_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_per_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_inf_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_duration_compatibility_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_id3_frame.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_id3_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_delta_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputGroupSettings_HlsGroupSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
