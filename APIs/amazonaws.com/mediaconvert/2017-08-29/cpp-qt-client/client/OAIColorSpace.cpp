/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColorSpace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorSpace::OAIColorSpace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorSpace::OAIColorSpace() {
    this->initializeModel();
}

OAIColorSpace::~OAIColorSpace() {}

void OAIColorSpace::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIColorSpace::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIColorSpace::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FOLLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorSpace::FOLLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REC_601", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorSpace::REC_601;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REC_709", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorSpace::REC_709;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HDR10", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorSpace::HDR10;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HLG_2020", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorSpace::HLG_2020;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("P3DCI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorSpace::P3DCI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("P3D65_SDR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorSpace::P3D65_SDR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("P3D65_HDR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorSpace::P3D65_HDR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIColorSpace::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIColorSpace::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIColorSpace::FOLLOW:
            val = "FOLLOW";
            break;
        case eOAIColorSpace::REC_601:
            val = "REC_601";
            break;
        case eOAIColorSpace::REC_709:
            val = "REC_709";
            break;
        case eOAIColorSpace::HDR10:
            val = "HDR10";
            break;
        case eOAIColorSpace::HLG_2020:
            val = "HLG_2020";
            break;
        case eOAIColorSpace::P3DCI:
            val = "P3DCI";
            break;
        case eOAIColorSpace::P3D65_SDR:
            val = "P3D65_SDR";
            break;
        case eOAIColorSpace::P3D65_HDR:
            val = "P3D65_HDR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIColorSpace::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIColorSpace::eOAIColorSpace OAIColorSpace::getValue() const {
    return m_value;
}

void OAIColorSpace::setValue(const OAIColorSpace::eOAIColorSpace& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIColorSpace::isSet() const {
    
    return m_value_isSet;
}

bool OAIColorSpace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
