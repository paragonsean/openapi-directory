/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMotionImageInserter_Offset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMotionImageInserter_Offset::OAIMotionImageInserter_Offset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMotionImageInserter_Offset::OAIMotionImageInserter_Offset() {
    this->initializeModel();
}

OAIMotionImageInserter_Offset::~OAIMotionImageInserter_Offset() {}

void OAIMotionImageInserter_Offset::initializeModel() {

    m_image_x_isSet = false;
    m_image_x_isValid = false;

    m_image_y_isSet = false;
    m_image_y_isValid = false;
}

void OAIMotionImageInserter_Offset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMotionImageInserter_Offset::fromJsonObject(QJsonObject json) {

    m_image_x_isValid = ::OpenAPI::fromJsonValue(m_image_x, json[QString("ImageX")]);
    m_image_x_isSet = !json[QString("ImageX")].isNull() && m_image_x_isValid;

    m_image_y_isValid = ::OpenAPI::fromJsonValue(m_image_y, json[QString("ImageY")]);
    m_image_y_isSet = !json[QString("ImageY")].isNull() && m_image_y_isValid;
}

QString OAIMotionImageInserter_Offset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMotionImageInserter_Offset::asJsonObject() const {
    QJsonObject obj;
    if (m_image_x_isSet) {
        obj.insert(QString("ImageX"), ::OpenAPI::toJsonValue(m_image_x));
    }
    if (m_image_y_isSet) {
        obj.insert(QString("ImageY"), ::OpenAPI::toJsonValue(m_image_y));
    }
    return obj;
}

qint32 OAIMotionImageInserter_Offset::getImageX() const {
    return m_image_x;
}
void OAIMotionImageInserter_Offset::setImageX(const qint32 &image_x) {
    m_image_x = image_x;
    m_image_x_isSet = true;
}

bool OAIMotionImageInserter_Offset::is_image_x_Set() const{
    return m_image_x_isSet;
}

bool OAIMotionImageInserter_Offset::is_image_x_Valid() const{
    return m_image_x_isValid;
}

qint32 OAIMotionImageInserter_Offset::getImageY() const {
    return m_image_y;
}
void OAIMotionImageInserter_Offset::setImageY(const qint32 &image_y) {
    m_image_y = image_y;
    m_image_y_isSet = true;
}

bool OAIMotionImageInserter_Offset::is_image_y_Set() const{
    return m_image_y_isSet;
}

bool OAIMotionImageInserter_Offset::is_image_y_Valid() const{
    return m_image_y_isValid;
}

bool OAIMotionImageInserter_Offset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMotionImageInserter_Offset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
