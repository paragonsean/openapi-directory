/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageInserter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageInserter::OAIImageInserter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageInserter::OAIImageInserter() {
    this->initializeModel();
}

OAIImageInserter::~OAIImageInserter() {}

void OAIImageInserter::initializeModel() {

    m_insertable_images_isSet = false;
    m_insertable_images_isValid = false;

    m_sdr_reference_white_level_isSet = false;
    m_sdr_reference_white_level_isValid = false;
}

void OAIImageInserter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageInserter::fromJsonObject(QJsonObject json) {

    m_insertable_images_isValid = ::OpenAPI::fromJsonValue(m_insertable_images, json[QString("InsertableImages")]);
    m_insertable_images_isSet = !json[QString("InsertableImages")].isNull() && m_insertable_images_isValid;

    m_sdr_reference_white_level_isValid = ::OpenAPI::fromJsonValue(m_sdr_reference_white_level, json[QString("SdrReferenceWhiteLevel")]);
    m_sdr_reference_white_level_isSet = !json[QString("SdrReferenceWhiteLevel")].isNull() && m_sdr_reference_white_level_isValid;
}

QString OAIImageInserter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageInserter::asJsonObject() const {
    QJsonObject obj;
    if (m_insertable_images.isSet()) {
        obj.insert(QString("InsertableImages"), ::OpenAPI::toJsonValue(m_insertable_images));
    }
    if (m_sdr_reference_white_level_isSet) {
        obj.insert(QString("SdrReferenceWhiteLevel"), ::OpenAPI::toJsonValue(m_sdr_reference_white_level));
    }
    return obj;
}

QList OAIImageInserter::getInsertableImages() const {
    return m_insertable_images;
}
void OAIImageInserter::setInsertableImages(const QList &insertable_images) {
    m_insertable_images = insertable_images;
    m_insertable_images_isSet = true;
}

bool OAIImageInserter::is_insertable_images_Set() const{
    return m_insertable_images_isSet;
}

bool OAIImageInserter::is_insertable_images_Valid() const{
    return m_insertable_images_isValid;
}

qint32 OAIImageInserter::getSdrReferenceWhiteLevel() const {
    return m_sdr_reference_white_level;
}
void OAIImageInserter::setSdrReferenceWhiteLevel(const qint32 &sdr_reference_white_level) {
    m_sdr_reference_white_level = sdr_reference_white_level;
    m_sdr_reference_white_level_isSet = true;
}

bool OAIImageInserter::is_sdr_reference_white_level_Set() const{
    return m_sdr_reference_white_level_isSet;
}

bool OAIImageInserter::is_sdr_reference_white_level_Valid() const{
    return m_sdr_reference_white_level_isValid;
}

bool OAIImageInserter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insertable_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdr_reference_white_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageInserter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
