/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueue_ReservationPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueue_ReservationPlan::OAIQueue_ReservationPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueue_ReservationPlan::OAIQueue_ReservationPlan() {
    this->initializeModel();
}

OAIQueue_ReservationPlan::~OAIQueue_ReservationPlan() {}

void OAIQueue_ReservationPlan::initializeModel() {

    m_commitment_isSet = false;
    m_commitment_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_purchased_at_isSet = false;
    m_purchased_at_isValid = false;

    m_renewal_type_isSet = false;
    m_renewal_type_isValid = false;

    m_reserved_slots_isSet = false;
    m_reserved_slots_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIQueue_ReservationPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueue_ReservationPlan::fromJsonObject(QJsonObject json) {

    m_commitment_isValid = ::OpenAPI::fromJsonValue(m_commitment, json[QString("Commitment")]);
    m_commitment_isSet = !json[QString("Commitment")].isNull() && m_commitment_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("ExpiresAt")]);
    m_expires_at_isSet = !json[QString("ExpiresAt")].isNull() && m_expires_at_isValid;

    m_purchased_at_isValid = ::OpenAPI::fromJsonValue(m_purchased_at, json[QString("PurchasedAt")]);
    m_purchased_at_isSet = !json[QString("PurchasedAt")].isNull() && m_purchased_at_isValid;

    m_renewal_type_isValid = ::OpenAPI::fromJsonValue(m_renewal_type, json[QString("RenewalType")]);
    m_renewal_type_isSet = !json[QString("RenewalType")].isNull() && m_renewal_type_isValid;

    m_reserved_slots_isValid = ::OpenAPI::fromJsonValue(m_reserved_slots, json[QString("ReservedSlots")]);
    m_reserved_slots_isSet = !json[QString("ReservedSlots")].isNull() && m_reserved_slots_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIQueue_ReservationPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueue_ReservationPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment.isSet()) {
        obj.insert(QString("Commitment"), ::OpenAPI::toJsonValue(m_commitment));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("ExpiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_purchased_at_isSet) {
        obj.insert(QString("PurchasedAt"), ::OpenAPI::toJsonValue(m_purchased_at));
    }
    if (m_renewal_type.isSet()) {
        obj.insert(QString("RenewalType"), ::OpenAPI::toJsonValue(m_renewal_type));
    }
    if (m_reserved_slots_isSet) {
        obj.insert(QString("ReservedSlots"), ::OpenAPI::toJsonValue(m_reserved_slots));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICommitment OAIQueue_ReservationPlan::getCommitment() const {
    return m_commitment;
}
void OAIQueue_ReservationPlan::setCommitment(const OAICommitment &commitment) {
    m_commitment = commitment;
    m_commitment_isSet = true;
}

bool OAIQueue_ReservationPlan::is_commitment_Set() const{
    return m_commitment_isSet;
}

bool OAIQueue_ReservationPlan::is_commitment_Valid() const{
    return m_commitment_isValid;
}

QDateTime OAIQueue_ReservationPlan::getExpiresAt() const {
    return m_expires_at;
}
void OAIQueue_ReservationPlan::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIQueue_ReservationPlan::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIQueue_ReservationPlan::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QDateTime OAIQueue_ReservationPlan::getPurchasedAt() const {
    return m_purchased_at;
}
void OAIQueue_ReservationPlan::setPurchasedAt(const QDateTime &purchased_at) {
    m_purchased_at = purchased_at;
    m_purchased_at_isSet = true;
}

bool OAIQueue_ReservationPlan::is_purchased_at_Set() const{
    return m_purchased_at_isSet;
}

bool OAIQueue_ReservationPlan::is_purchased_at_Valid() const{
    return m_purchased_at_isValid;
}

OAIRenewalType OAIQueue_ReservationPlan::getRenewalType() const {
    return m_renewal_type;
}
void OAIQueue_ReservationPlan::setRenewalType(const OAIRenewalType &renewal_type) {
    m_renewal_type = renewal_type;
    m_renewal_type_isSet = true;
}

bool OAIQueue_ReservationPlan::is_renewal_type_Set() const{
    return m_renewal_type_isSet;
}

bool OAIQueue_ReservationPlan::is_renewal_type_Valid() const{
    return m_renewal_type_isValid;
}

qint32 OAIQueue_ReservationPlan::getReservedSlots() const {
    return m_reserved_slots;
}
void OAIQueue_ReservationPlan::setReservedSlots(const qint32 &reserved_slots) {
    m_reserved_slots = reserved_slots;
    m_reserved_slots_isSet = true;
}

bool OAIQueue_ReservationPlan::is_reserved_slots_Set() const{
    return m_reserved_slots_isSet;
}

bool OAIQueue_ReservationPlan::is_reserved_slots_Valid() const{
    return m_reserved_slots_isValid;
}

OAIReservationPlanStatus OAIQueue_ReservationPlan::getStatus() const {
    return m_status;
}
void OAIQueue_ReservationPlan::setStatus(const OAIReservationPlanStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQueue_ReservationPlan::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQueue_ReservationPlan::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIQueue_ReservationPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchased_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueue_ReservationPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
