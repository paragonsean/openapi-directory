/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHlsImageBasedTrickPlaySettings.h
 *
 * Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
 */

#ifndef OAIHlsImageBasedTrickPlaySettings_H
#define OAIHlsImageBasedTrickPlaySettings_H

#include <QJsonObject>

#include "OAIHlsIntervalCadence.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHlsImageBasedTrickPlaySettings : public OAIObject {
public:
    OAIHlsImageBasedTrickPlaySettings();
    OAIHlsImageBasedTrickPlaySettings(QString json);
    ~OAIHlsImageBasedTrickPlaySettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHlsIntervalCadence getIntervalCadence() const;
    void setIntervalCadence(const OAIHlsIntervalCadence &interval_cadence);
    bool is_interval_cadence_Set() const;
    bool is_interval_cadence_Valid() const;

    qint32 getThumbnailHeight() const;
    void setThumbnailHeight(const qint32 &thumbnail_height);
    bool is_thumbnail_height_Set() const;
    bool is_thumbnail_height_Valid() const;

    double getThumbnailInterval() const;
    void setThumbnailInterval(const double &thumbnail_interval);
    bool is_thumbnail_interval_Set() const;
    bool is_thumbnail_interval_Valid() const;

    qint32 getThumbnailWidth() const;
    void setThumbnailWidth(const qint32 &thumbnail_width);
    bool is_thumbnail_width_Set() const;
    bool is_thumbnail_width_Valid() const;

    qint32 getTileHeight() const;
    void setTileHeight(const qint32 &tile_height);
    bool is_tile_height_Set() const;
    bool is_tile_height_Valid() const;

    qint32 getTileWidth() const;
    void setTileWidth(const qint32 &tile_width);
    bool is_tile_width_Set() const;
    bool is_tile_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHlsIntervalCadence m_interval_cadence;
    bool m_interval_cadence_isSet;
    bool m_interval_cadence_isValid;

    qint32 m_thumbnail_height;
    bool m_thumbnail_height_isSet;
    bool m_thumbnail_height_isValid;

    double m_thumbnail_interval;
    bool m_thumbnail_interval_isSet;
    bool m_thumbnail_interval_isValid;

    qint32 m_thumbnail_width;
    bool m_thumbnail_width_isSet;
    bool m_thumbnail_width_isValid;

    qint32 m_tile_height;
    bool m_tile_height_isSet;
    bool m_tile_height_isValid;

    qint32 m_tile_width;
    bool m_tile_width_isSet;
    bool m_tile_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHlsImageBasedTrickPlaySettings)

#endif // OAIHlsImageBasedTrickPlaySettings_H
