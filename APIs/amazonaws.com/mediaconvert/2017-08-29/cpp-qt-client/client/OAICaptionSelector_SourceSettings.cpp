/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptionSelector_SourceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptionSelector_SourceSettings::OAICaptionSelector_SourceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptionSelector_SourceSettings::OAICaptionSelector_SourceSettings() {
    this->initializeModel();
}

OAICaptionSelector_SourceSettings::~OAICaptionSelector_SourceSettings() {}

void OAICaptionSelector_SourceSettings::initializeModel() {

    m_ancillary_source_settings_isSet = false;
    m_ancillary_source_settings_isValid = false;

    m_dvb_sub_source_settings_isSet = false;
    m_dvb_sub_source_settings_isValid = false;

    m_embedded_source_settings_isSet = false;
    m_embedded_source_settings_isValid = false;

    m_file_source_settings_isSet = false;
    m_file_source_settings_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_teletext_source_settings_isSet = false;
    m_teletext_source_settings_isValid = false;

    m_track_source_settings_isSet = false;
    m_track_source_settings_isValid = false;

    m_webvtt_hls_source_settings_isSet = false;
    m_webvtt_hls_source_settings_isValid = false;
}

void OAICaptionSelector_SourceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaptionSelector_SourceSettings::fromJsonObject(QJsonObject json) {

    m_ancillary_source_settings_isValid = ::OpenAPI::fromJsonValue(m_ancillary_source_settings, json[QString("AncillarySourceSettings")]);
    m_ancillary_source_settings_isSet = !json[QString("AncillarySourceSettings")].isNull() && m_ancillary_source_settings_isValid;

    m_dvb_sub_source_settings_isValid = ::OpenAPI::fromJsonValue(m_dvb_sub_source_settings, json[QString("DvbSubSourceSettings")]);
    m_dvb_sub_source_settings_isSet = !json[QString("DvbSubSourceSettings")].isNull() && m_dvb_sub_source_settings_isValid;

    m_embedded_source_settings_isValid = ::OpenAPI::fromJsonValue(m_embedded_source_settings, json[QString("EmbeddedSourceSettings")]);
    m_embedded_source_settings_isSet = !json[QString("EmbeddedSourceSettings")].isNull() && m_embedded_source_settings_isValid;

    m_file_source_settings_isValid = ::OpenAPI::fromJsonValue(m_file_source_settings, json[QString("FileSourceSettings")]);
    m_file_source_settings_isSet = !json[QString("FileSourceSettings")].isNull() && m_file_source_settings_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_teletext_source_settings_isValid = ::OpenAPI::fromJsonValue(m_teletext_source_settings, json[QString("TeletextSourceSettings")]);
    m_teletext_source_settings_isSet = !json[QString("TeletextSourceSettings")].isNull() && m_teletext_source_settings_isValid;

    m_track_source_settings_isValid = ::OpenAPI::fromJsonValue(m_track_source_settings, json[QString("TrackSourceSettings")]);
    m_track_source_settings_isSet = !json[QString("TrackSourceSettings")].isNull() && m_track_source_settings_isValid;

    m_webvtt_hls_source_settings_isValid = ::OpenAPI::fromJsonValue(m_webvtt_hls_source_settings, json[QString("WebvttHlsSourceSettings")]);
    m_webvtt_hls_source_settings_isSet = !json[QString("WebvttHlsSourceSettings")].isNull() && m_webvtt_hls_source_settings_isValid;
}

QString OAICaptionSelector_SourceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaptionSelector_SourceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ancillary_source_settings.isSet()) {
        obj.insert(QString("AncillarySourceSettings"), ::OpenAPI::toJsonValue(m_ancillary_source_settings));
    }
    if (m_dvb_sub_source_settings.isSet()) {
        obj.insert(QString("DvbSubSourceSettings"), ::OpenAPI::toJsonValue(m_dvb_sub_source_settings));
    }
    if (m_embedded_source_settings.isSet()) {
        obj.insert(QString("EmbeddedSourceSettings"), ::OpenAPI::toJsonValue(m_embedded_source_settings));
    }
    if (m_file_source_settings.isSet()) {
        obj.insert(QString("FileSourceSettings"), ::OpenAPI::toJsonValue(m_file_source_settings));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_teletext_source_settings.isSet()) {
        obj.insert(QString("TeletextSourceSettings"), ::OpenAPI::toJsonValue(m_teletext_source_settings));
    }
    if (m_track_source_settings.isSet()) {
        obj.insert(QString("TrackSourceSettings"), ::OpenAPI::toJsonValue(m_track_source_settings));
    }
    if (m_webvtt_hls_source_settings.isSet()) {
        obj.insert(QString("WebvttHlsSourceSettings"), ::OpenAPI::toJsonValue(m_webvtt_hls_source_settings));
    }
    return obj;
}

OAICaptionSourceSettings_AncillarySourceSettings OAICaptionSelector_SourceSettings::getAncillarySourceSettings() const {
    return m_ancillary_source_settings;
}
void OAICaptionSelector_SourceSettings::setAncillarySourceSettings(const OAICaptionSourceSettings_AncillarySourceSettings &ancillary_source_settings) {
    m_ancillary_source_settings = ancillary_source_settings;
    m_ancillary_source_settings_isSet = true;
}

bool OAICaptionSelector_SourceSettings::is_ancillary_source_settings_Set() const{
    return m_ancillary_source_settings_isSet;
}

bool OAICaptionSelector_SourceSettings::is_ancillary_source_settings_Valid() const{
    return m_ancillary_source_settings_isValid;
}

OAICaptionSourceSettings_DvbSubSourceSettings OAICaptionSelector_SourceSettings::getDvbSubSourceSettings() const {
    return m_dvb_sub_source_settings;
}
void OAICaptionSelector_SourceSettings::setDvbSubSourceSettings(const OAICaptionSourceSettings_DvbSubSourceSettings &dvb_sub_source_settings) {
    m_dvb_sub_source_settings = dvb_sub_source_settings;
    m_dvb_sub_source_settings_isSet = true;
}

bool OAICaptionSelector_SourceSettings::is_dvb_sub_source_settings_Set() const{
    return m_dvb_sub_source_settings_isSet;
}

bool OAICaptionSelector_SourceSettings::is_dvb_sub_source_settings_Valid() const{
    return m_dvb_sub_source_settings_isValid;
}

OAICaptionSourceSettings_EmbeddedSourceSettings OAICaptionSelector_SourceSettings::getEmbeddedSourceSettings() const {
    return m_embedded_source_settings;
}
void OAICaptionSelector_SourceSettings::setEmbeddedSourceSettings(const OAICaptionSourceSettings_EmbeddedSourceSettings &embedded_source_settings) {
    m_embedded_source_settings = embedded_source_settings;
    m_embedded_source_settings_isSet = true;
}

bool OAICaptionSelector_SourceSettings::is_embedded_source_settings_Set() const{
    return m_embedded_source_settings_isSet;
}

bool OAICaptionSelector_SourceSettings::is_embedded_source_settings_Valid() const{
    return m_embedded_source_settings_isValid;
}

OAICaptionSourceSettings_FileSourceSettings OAICaptionSelector_SourceSettings::getFileSourceSettings() const {
    return m_file_source_settings;
}
void OAICaptionSelector_SourceSettings::setFileSourceSettings(const OAICaptionSourceSettings_FileSourceSettings &file_source_settings) {
    m_file_source_settings = file_source_settings;
    m_file_source_settings_isSet = true;
}

bool OAICaptionSelector_SourceSettings::is_file_source_settings_Set() const{
    return m_file_source_settings_isSet;
}

bool OAICaptionSelector_SourceSettings::is_file_source_settings_Valid() const{
    return m_file_source_settings_isValid;
}

OAICaptionSourceType OAICaptionSelector_SourceSettings::getSourceType() const {
    return m_source_type;
}
void OAICaptionSelector_SourceSettings::setSourceType(const OAICaptionSourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAICaptionSelector_SourceSettings::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAICaptionSelector_SourceSettings::is_source_type_Valid() const{
    return m_source_type_isValid;
}

OAICaptionSourceSettings_TeletextSourceSettings OAICaptionSelector_SourceSettings::getTeletextSourceSettings() const {
    return m_teletext_source_settings;
}
void OAICaptionSelector_SourceSettings::setTeletextSourceSettings(const OAICaptionSourceSettings_TeletextSourceSettings &teletext_source_settings) {
    m_teletext_source_settings = teletext_source_settings;
    m_teletext_source_settings_isSet = true;
}

bool OAICaptionSelector_SourceSettings::is_teletext_source_settings_Set() const{
    return m_teletext_source_settings_isSet;
}

bool OAICaptionSelector_SourceSettings::is_teletext_source_settings_Valid() const{
    return m_teletext_source_settings_isValid;
}

OAICaptionSourceSettings_TrackSourceSettings OAICaptionSelector_SourceSettings::getTrackSourceSettings() const {
    return m_track_source_settings;
}
void OAICaptionSelector_SourceSettings::setTrackSourceSettings(const OAICaptionSourceSettings_TrackSourceSettings &track_source_settings) {
    m_track_source_settings = track_source_settings;
    m_track_source_settings_isSet = true;
}

bool OAICaptionSelector_SourceSettings::is_track_source_settings_Set() const{
    return m_track_source_settings_isSet;
}

bool OAICaptionSelector_SourceSettings::is_track_source_settings_Valid() const{
    return m_track_source_settings_isValid;
}

OAICaptionSourceSettings_WebvttHlsSourceSettings OAICaptionSelector_SourceSettings::getWebvttHlsSourceSettings() const {
    return m_webvtt_hls_source_settings;
}
void OAICaptionSelector_SourceSettings::setWebvttHlsSourceSettings(const OAICaptionSourceSettings_WebvttHlsSourceSettings &webvtt_hls_source_settings) {
    m_webvtt_hls_source_settings = webvtt_hls_source_settings;
    m_webvtt_hls_source_settings_isSet = true;
}

bool OAICaptionSelector_SourceSettings::is_webvtt_hls_source_settings_Set() const{
    return m_webvtt_hls_source_settings_isSet;
}

bool OAICaptionSelector_SourceSettings::is_webvtt_hls_source_settings_Valid() const{
    return m_webvtt_hls_source_settings_isValid;
}

bool OAICaptionSelector_SourceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancillary_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_sub_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedded_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teletext_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_webvtt_hls_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaptionSelector_SourceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
