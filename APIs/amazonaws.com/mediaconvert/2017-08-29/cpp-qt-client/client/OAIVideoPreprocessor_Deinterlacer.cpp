/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoPreprocessor_Deinterlacer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoPreprocessor_Deinterlacer::OAIVideoPreprocessor_Deinterlacer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoPreprocessor_Deinterlacer::OAIVideoPreprocessor_Deinterlacer() {
    this->initializeModel();
}

OAIVideoPreprocessor_Deinterlacer::~OAIVideoPreprocessor_Deinterlacer() {}

void OAIVideoPreprocessor_Deinterlacer::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_control_isSet = false;
    m_control_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAIVideoPreprocessor_Deinterlacer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoPreprocessor_Deinterlacer::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("Algorithm")]);
    m_algorithm_isSet = !json[QString("Algorithm")].isNull() && m_algorithm_isValid;

    m_control_isValid = ::OpenAPI::fromJsonValue(m_control, json[QString("Control")]);
    m_control_isSet = !json[QString("Control")].isNull() && m_control_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;
}

QString OAIVideoPreprocessor_Deinterlacer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoPreprocessor_Deinterlacer::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm.isSet()) {
        obj.insert(QString("Algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_control.isSet()) {
        obj.insert(QString("Control"), ::OpenAPI::toJsonValue(m_control));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

OAIDeinterlaceAlgorithm OAIVideoPreprocessor_Deinterlacer::getAlgorithm() const {
    return m_algorithm;
}
void OAIVideoPreprocessor_Deinterlacer::setAlgorithm(const OAIDeinterlaceAlgorithm &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIVideoPreprocessor_Deinterlacer::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIVideoPreprocessor_Deinterlacer::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

OAIDeinterlacerControl OAIVideoPreprocessor_Deinterlacer::getControl() const {
    return m_control;
}
void OAIVideoPreprocessor_Deinterlacer::setControl(const OAIDeinterlacerControl &control) {
    m_control = control;
    m_control_isSet = true;
}

bool OAIVideoPreprocessor_Deinterlacer::is_control_Set() const{
    return m_control_isSet;
}

bool OAIVideoPreprocessor_Deinterlacer::is_control_Valid() const{
    return m_control_isValid;
}

OAIDeinterlacerMode OAIVideoPreprocessor_Deinterlacer::getMode() const {
    return m_mode;
}
void OAIVideoPreprocessor_Deinterlacer::setMode(const OAIDeinterlacerMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIVideoPreprocessor_Deinterlacer::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIVideoPreprocessor_Deinterlacer::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIVideoPreprocessor_Deinterlacer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoPreprocessor_Deinterlacer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
