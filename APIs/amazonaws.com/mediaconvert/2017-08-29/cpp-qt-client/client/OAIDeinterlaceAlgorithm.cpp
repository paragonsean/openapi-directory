/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeinterlaceAlgorithm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeinterlaceAlgorithm::OAIDeinterlaceAlgorithm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeinterlaceAlgorithm::OAIDeinterlaceAlgorithm() {
    this->initializeModel();
}

OAIDeinterlaceAlgorithm::~OAIDeinterlaceAlgorithm() {}

void OAIDeinterlaceAlgorithm::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDeinterlaceAlgorithm::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDeinterlaceAlgorithm::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INTERPOLATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeinterlaceAlgorithm::INTERPOLATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERPOLATE_TICKER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeinterlaceAlgorithm::INTERPOLATE_TICKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BLEND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeinterlaceAlgorithm::BLEND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BLEND_TICKER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeinterlaceAlgorithm::BLEND_TICKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LINEAR_INTERPOLATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeinterlaceAlgorithm::LINEAR_INTERPOLATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDeinterlaceAlgorithm::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDeinterlaceAlgorithm::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDeinterlaceAlgorithm::INTERPOLATE:
            val = "INTERPOLATE";
            break;
        case eOAIDeinterlaceAlgorithm::INTERPOLATE_TICKER:
            val = "INTERPOLATE_TICKER";
            break;
        case eOAIDeinterlaceAlgorithm::BLEND:
            val = "BLEND";
            break;
        case eOAIDeinterlaceAlgorithm::BLEND_TICKER:
            val = "BLEND_TICKER";
            break;
        case eOAIDeinterlaceAlgorithm::LINEAR_INTERPOLATION:
            val = "LINEAR_INTERPOLATION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDeinterlaceAlgorithm::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDeinterlaceAlgorithm::eOAIDeinterlaceAlgorithm OAIDeinterlaceAlgorithm::getValue() const {
    return m_value;
}

void OAIDeinterlaceAlgorithm::setValue(const OAIDeinterlaceAlgorithm::eOAIDeinterlaceAlgorithm& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDeinterlaceAlgorithm::isSet() const {
    
    return m_value_isSet;
}

bool OAIDeinterlaceAlgorithm::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
