/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINielsenConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINielsenConfiguration::OAINielsenConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINielsenConfiguration::OAINielsenConfiguration() {
    this->initializeModel();
}

OAINielsenConfiguration::~OAINielsenConfiguration() {}

void OAINielsenConfiguration::initializeModel() {

    m_breakout_code_isSet = false;
    m_breakout_code_isValid = false;

    m_distributor_id_isSet = false;
    m_distributor_id_isValid = false;
}

void OAINielsenConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINielsenConfiguration::fromJsonObject(QJsonObject json) {

    m_breakout_code_isValid = ::OpenAPI::fromJsonValue(m_breakout_code, json[QString("BreakoutCode")]);
    m_breakout_code_isSet = !json[QString("BreakoutCode")].isNull() && m_breakout_code_isValid;

    m_distributor_id_isValid = ::OpenAPI::fromJsonValue(m_distributor_id, json[QString("DistributorId")]);
    m_distributor_id_isSet = !json[QString("DistributorId")].isNull() && m_distributor_id_isValid;
}

QString OAINielsenConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINielsenConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_breakout_code_isSet) {
        obj.insert(QString("BreakoutCode"), ::OpenAPI::toJsonValue(m_breakout_code));
    }
    if (m_distributor_id_isSet) {
        obj.insert(QString("DistributorId"), ::OpenAPI::toJsonValue(m_distributor_id));
    }
    return obj;
}

qint32 OAINielsenConfiguration::getBreakoutCode() const {
    return m_breakout_code;
}
void OAINielsenConfiguration::setBreakoutCode(const qint32 &breakout_code) {
    m_breakout_code = breakout_code;
    m_breakout_code_isSet = true;
}

bool OAINielsenConfiguration::is_breakout_code_Set() const{
    return m_breakout_code_isSet;
}

bool OAINielsenConfiguration::is_breakout_code_Valid() const{
    return m_breakout_code_isValid;
}

QString OAINielsenConfiguration::getDistributorId() const {
    return m_distributor_id;
}
void OAINielsenConfiguration::setDistributorId(const QString &distributor_id) {
    m_distributor_id = distributor_id;
    m_distributor_id_isSet = true;
}

bool OAINielsenConfiguration::is_distributor_id_Set() const{
    return m_distributor_id_isSet;
}

bool OAINielsenConfiguration::is_distributor_id_Valid() const{
    return m_distributor_id_isValid;
}

bool OAINielsenConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breakout_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINielsenConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
