/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAacSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAacSettings::OAIAacSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAacSettings::OAIAacSettings() {
    this->initializeModel();
}

OAIAacSettings::~OAIAacSettings() {}

void OAIAacSettings::initializeModel() {

    m_audio_description_broadcaster_mix_isSet = false;
    m_audio_description_broadcaster_mix_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_codec_profile_isSet = false;
    m_codec_profile_isValid = false;

    m_coding_mode_isSet = false;
    m_coding_mode_isValid = false;

    m_rate_control_mode_isSet = false;
    m_rate_control_mode_isValid = false;

    m_raw_format_isSet = false;
    m_raw_format_isValid = false;

    m_sample_rate_isSet = false;
    m_sample_rate_isValid = false;

    m_specification_isSet = false;
    m_specification_isValid = false;

    m_vbr_quality_isSet = false;
    m_vbr_quality_isValid = false;
}

void OAIAacSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAacSettings::fromJsonObject(QJsonObject json) {

    m_audio_description_broadcaster_mix_isValid = ::OpenAPI::fromJsonValue(m_audio_description_broadcaster_mix, json[QString("AudioDescriptionBroadcasterMix")]);
    m_audio_description_broadcaster_mix_isSet = !json[QString("AudioDescriptionBroadcasterMix")].isNull() && m_audio_description_broadcaster_mix_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_codec_profile_isValid = ::OpenAPI::fromJsonValue(m_codec_profile, json[QString("CodecProfile")]);
    m_codec_profile_isSet = !json[QString("CodecProfile")].isNull() && m_codec_profile_isValid;

    m_coding_mode_isValid = ::OpenAPI::fromJsonValue(m_coding_mode, json[QString("CodingMode")]);
    m_coding_mode_isSet = !json[QString("CodingMode")].isNull() && m_coding_mode_isValid;

    m_rate_control_mode_isValid = ::OpenAPI::fromJsonValue(m_rate_control_mode, json[QString("RateControlMode")]);
    m_rate_control_mode_isSet = !json[QString("RateControlMode")].isNull() && m_rate_control_mode_isValid;

    m_raw_format_isValid = ::OpenAPI::fromJsonValue(m_raw_format, json[QString("RawFormat")]);
    m_raw_format_isSet = !json[QString("RawFormat")].isNull() && m_raw_format_isValid;

    m_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_sample_rate, json[QString("SampleRate")]);
    m_sample_rate_isSet = !json[QString("SampleRate")].isNull() && m_sample_rate_isValid;

    m_specification_isValid = ::OpenAPI::fromJsonValue(m_specification, json[QString("Specification")]);
    m_specification_isSet = !json[QString("Specification")].isNull() && m_specification_isValid;

    m_vbr_quality_isValid = ::OpenAPI::fromJsonValue(m_vbr_quality, json[QString("VbrQuality")]);
    m_vbr_quality_isSet = !json[QString("VbrQuality")].isNull() && m_vbr_quality_isValid;
}

QString OAIAacSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAacSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_description_broadcaster_mix.isSet()) {
        obj.insert(QString("AudioDescriptionBroadcasterMix"), ::OpenAPI::toJsonValue(m_audio_description_broadcaster_mix));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_codec_profile.isSet()) {
        obj.insert(QString("CodecProfile"), ::OpenAPI::toJsonValue(m_codec_profile));
    }
    if (m_coding_mode.isSet()) {
        obj.insert(QString("CodingMode"), ::OpenAPI::toJsonValue(m_coding_mode));
    }
    if (m_rate_control_mode.isSet()) {
        obj.insert(QString("RateControlMode"), ::OpenAPI::toJsonValue(m_rate_control_mode));
    }
    if (m_raw_format.isSet()) {
        obj.insert(QString("RawFormat"), ::OpenAPI::toJsonValue(m_raw_format));
    }
    if (m_sample_rate_isSet) {
        obj.insert(QString("SampleRate"), ::OpenAPI::toJsonValue(m_sample_rate));
    }
    if (m_specification.isSet()) {
        obj.insert(QString("Specification"), ::OpenAPI::toJsonValue(m_specification));
    }
    if (m_vbr_quality.isSet()) {
        obj.insert(QString("VbrQuality"), ::OpenAPI::toJsonValue(m_vbr_quality));
    }
    return obj;
}

OAIAacAudioDescriptionBroadcasterMix OAIAacSettings::getAudioDescriptionBroadcasterMix() const {
    return m_audio_description_broadcaster_mix;
}
void OAIAacSettings::setAudioDescriptionBroadcasterMix(const OAIAacAudioDescriptionBroadcasterMix &audio_description_broadcaster_mix) {
    m_audio_description_broadcaster_mix = audio_description_broadcaster_mix;
    m_audio_description_broadcaster_mix_isSet = true;
}

bool OAIAacSettings::is_audio_description_broadcaster_mix_Set() const{
    return m_audio_description_broadcaster_mix_isSet;
}

bool OAIAacSettings::is_audio_description_broadcaster_mix_Valid() const{
    return m_audio_description_broadcaster_mix_isValid;
}

qint32 OAIAacSettings::getBitrate() const {
    return m_bitrate;
}
void OAIAacSettings::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIAacSettings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIAacSettings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIAacCodecProfile OAIAacSettings::getCodecProfile() const {
    return m_codec_profile;
}
void OAIAacSettings::setCodecProfile(const OAIAacCodecProfile &codec_profile) {
    m_codec_profile = codec_profile;
    m_codec_profile_isSet = true;
}

bool OAIAacSettings::is_codec_profile_Set() const{
    return m_codec_profile_isSet;
}

bool OAIAacSettings::is_codec_profile_Valid() const{
    return m_codec_profile_isValid;
}

OAIAacCodingMode OAIAacSettings::getCodingMode() const {
    return m_coding_mode;
}
void OAIAacSettings::setCodingMode(const OAIAacCodingMode &coding_mode) {
    m_coding_mode = coding_mode;
    m_coding_mode_isSet = true;
}

bool OAIAacSettings::is_coding_mode_Set() const{
    return m_coding_mode_isSet;
}

bool OAIAacSettings::is_coding_mode_Valid() const{
    return m_coding_mode_isValid;
}

OAIAacRateControlMode OAIAacSettings::getRateControlMode() const {
    return m_rate_control_mode;
}
void OAIAacSettings::setRateControlMode(const OAIAacRateControlMode &rate_control_mode) {
    m_rate_control_mode = rate_control_mode;
    m_rate_control_mode_isSet = true;
}

bool OAIAacSettings::is_rate_control_mode_Set() const{
    return m_rate_control_mode_isSet;
}

bool OAIAacSettings::is_rate_control_mode_Valid() const{
    return m_rate_control_mode_isValid;
}

OAIAacRawFormat OAIAacSettings::getRawFormat() const {
    return m_raw_format;
}
void OAIAacSettings::setRawFormat(const OAIAacRawFormat &raw_format) {
    m_raw_format = raw_format;
    m_raw_format_isSet = true;
}

bool OAIAacSettings::is_raw_format_Set() const{
    return m_raw_format_isSet;
}

bool OAIAacSettings::is_raw_format_Valid() const{
    return m_raw_format_isValid;
}

qint32 OAIAacSettings::getSampleRate() const {
    return m_sample_rate;
}
void OAIAacSettings::setSampleRate(const qint32 &sample_rate) {
    m_sample_rate = sample_rate;
    m_sample_rate_isSet = true;
}

bool OAIAacSettings::is_sample_rate_Set() const{
    return m_sample_rate_isSet;
}

bool OAIAacSettings::is_sample_rate_Valid() const{
    return m_sample_rate_isValid;
}

OAIAacSpecification OAIAacSettings::getSpecification() const {
    return m_specification;
}
void OAIAacSettings::setSpecification(const OAIAacSpecification &specification) {
    m_specification = specification;
    m_specification_isSet = true;
}

bool OAIAacSettings::is_specification_Set() const{
    return m_specification_isSet;
}

bool OAIAacSettings::is_specification_Valid() const{
    return m_specification_isValid;
}

OAIAacVbrQuality OAIAacSettings::getVbrQuality() const {
    return m_vbr_quality;
}
void OAIAacSettings::setVbrQuality(const OAIAacVbrQuality &vbr_quality) {
    m_vbr_quality = vbr_quality;
    m_vbr_quality_isSet = true;
}

bool OAIAacSettings::is_vbr_quality_Set() const{
    return m_vbr_quality_isSet;
}

bool OAIAacSettings::is_vbr_quality_Valid() const{
    return m_vbr_quality_isValid;
}

bool OAIAacSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_description_broadcaster_mix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coding_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_control_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vbr_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAacSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
