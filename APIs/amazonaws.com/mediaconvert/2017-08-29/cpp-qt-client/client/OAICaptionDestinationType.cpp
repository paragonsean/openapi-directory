/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptionDestinationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptionDestinationType::OAICaptionDestinationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptionDestinationType::OAICaptionDestinationType() {
    this->initializeModel();
}

OAICaptionDestinationType::~OAICaptionDestinationType() {}

void OAICaptionDestinationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICaptionDestinationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICaptionDestinationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BURN_IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::BURN_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DVB_SUB", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::DVB_SUB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMBEDDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::EMBEDDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMBEDDED_PLUS_SCTE20", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::EMBEDDED_PLUS_SCTE20;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMSC", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::IMSC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCTE20_PLUS_EMBEDDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::SCTE20_PLUS_EMBEDDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCC", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::SCC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SRT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::SRT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SMI", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::SMI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TELETEXT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::TELETEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TTML", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::TTML;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEBVTT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICaptionDestinationType::WEBVTT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICaptionDestinationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICaptionDestinationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICaptionDestinationType::BURN_IN:
            val = "BURN_IN";
            break;
        case eOAICaptionDestinationType::DVB_SUB:
            val = "DVB_SUB";
            break;
        case eOAICaptionDestinationType::EMBEDDED:
            val = "EMBEDDED";
            break;
        case eOAICaptionDestinationType::EMBEDDED_PLUS_SCTE20:
            val = "EMBEDDED_PLUS_SCTE20";
            break;
        case eOAICaptionDestinationType::IMSC:
            val = "IMSC";
            break;
        case eOAICaptionDestinationType::SCTE20_PLUS_EMBEDDED:
            val = "SCTE20_PLUS_EMBEDDED";
            break;
        case eOAICaptionDestinationType::SCC:
            val = "SCC";
            break;
        case eOAICaptionDestinationType::SRT:
            val = "SRT";
            break;
        case eOAICaptionDestinationType::SMI:
            val = "SMI";
            break;
        case eOAICaptionDestinationType::TELETEXT:
            val = "TELETEXT";
            break;
        case eOAICaptionDestinationType::TTML:
            val = "TTML";
            break;
        case eOAICaptionDestinationType::WEBVTT:
            val = "WEBVTT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICaptionDestinationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICaptionDestinationType::eOAICaptionDestinationType OAICaptionDestinationType::getValue() const {
    return m_value;
}

void OAICaptionDestinationType::setValue(const OAICaptionDestinationType::eOAICaptionDestinationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICaptionDestinationType::isSet() const {
    
    return m_value_isSet;
}

bool OAICaptionDestinationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
