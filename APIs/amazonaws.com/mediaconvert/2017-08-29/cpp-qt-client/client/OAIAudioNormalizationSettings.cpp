/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioNormalizationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioNormalizationSettings::OAIAudioNormalizationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioNormalizationSettings::OAIAudioNormalizationSettings() {
    this->initializeModel();
}

OAIAudioNormalizationSettings::~OAIAudioNormalizationSettings() {}

void OAIAudioNormalizationSettings::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_algorithm_control_isSet = false;
    m_algorithm_control_isValid = false;

    m_correction_gate_level_isSet = false;
    m_correction_gate_level_isValid = false;

    m_loudness_logging_isSet = false;
    m_loudness_logging_isValid = false;

    m_peak_calculation_isSet = false;
    m_peak_calculation_isValid = false;

    m_target_lkfs_isSet = false;
    m_target_lkfs_isValid = false;

    m_true_peak_limiter_threshold_isSet = false;
    m_true_peak_limiter_threshold_isValid = false;
}

void OAIAudioNormalizationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioNormalizationSettings::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("Algorithm")]);
    m_algorithm_isSet = !json[QString("Algorithm")].isNull() && m_algorithm_isValid;

    m_algorithm_control_isValid = ::OpenAPI::fromJsonValue(m_algorithm_control, json[QString("AlgorithmControl")]);
    m_algorithm_control_isSet = !json[QString("AlgorithmControl")].isNull() && m_algorithm_control_isValid;

    m_correction_gate_level_isValid = ::OpenAPI::fromJsonValue(m_correction_gate_level, json[QString("CorrectionGateLevel")]);
    m_correction_gate_level_isSet = !json[QString("CorrectionGateLevel")].isNull() && m_correction_gate_level_isValid;

    m_loudness_logging_isValid = ::OpenAPI::fromJsonValue(m_loudness_logging, json[QString("LoudnessLogging")]);
    m_loudness_logging_isSet = !json[QString("LoudnessLogging")].isNull() && m_loudness_logging_isValid;

    m_peak_calculation_isValid = ::OpenAPI::fromJsonValue(m_peak_calculation, json[QString("PeakCalculation")]);
    m_peak_calculation_isSet = !json[QString("PeakCalculation")].isNull() && m_peak_calculation_isValid;

    m_target_lkfs_isValid = ::OpenAPI::fromJsonValue(m_target_lkfs, json[QString("TargetLkfs")]);
    m_target_lkfs_isSet = !json[QString("TargetLkfs")].isNull() && m_target_lkfs_isValid;

    m_true_peak_limiter_threshold_isValid = ::OpenAPI::fromJsonValue(m_true_peak_limiter_threshold, json[QString("TruePeakLimiterThreshold")]);
    m_true_peak_limiter_threshold_isSet = !json[QString("TruePeakLimiterThreshold")].isNull() && m_true_peak_limiter_threshold_isValid;
}

QString OAIAudioNormalizationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioNormalizationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm.isSet()) {
        obj.insert(QString("Algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_algorithm_control.isSet()) {
        obj.insert(QString("AlgorithmControl"), ::OpenAPI::toJsonValue(m_algorithm_control));
    }
    if (m_correction_gate_level_isSet) {
        obj.insert(QString("CorrectionGateLevel"), ::OpenAPI::toJsonValue(m_correction_gate_level));
    }
    if (m_loudness_logging.isSet()) {
        obj.insert(QString("LoudnessLogging"), ::OpenAPI::toJsonValue(m_loudness_logging));
    }
    if (m_peak_calculation.isSet()) {
        obj.insert(QString("PeakCalculation"), ::OpenAPI::toJsonValue(m_peak_calculation));
    }
    if (m_target_lkfs_isSet) {
        obj.insert(QString("TargetLkfs"), ::OpenAPI::toJsonValue(m_target_lkfs));
    }
    if (m_true_peak_limiter_threshold_isSet) {
        obj.insert(QString("TruePeakLimiterThreshold"), ::OpenAPI::toJsonValue(m_true_peak_limiter_threshold));
    }
    return obj;
}

OAIAudioNormalizationAlgorithm OAIAudioNormalizationSettings::getAlgorithm() const {
    return m_algorithm;
}
void OAIAudioNormalizationSettings::setAlgorithm(const OAIAudioNormalizationAlgorithm &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIAudioNormalizationSettings::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIAudioNormalizationSettings::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

OAIAudioNormalizationAlgorithmControl OAIAudioNormalizationSettings::getAlgorithmControl() const {
    return m_algorithm_control;
}
void OAIAudioNormalizationSettings::setAlgorithmControl(const OAIAudioNormalizationAlgorithmControl &algorithm_control) {
    m_algorithm_control = algorithm_control;
    m_algorithm_control_isSet = true;
}

bool OAIAudioNormalizationSettings::is_algorithm_control_Set() const{
    return m_algorithm_control_isSet;
}

bool OAIAudioNormalizationSettings::is_algorithm_control_Valid() const{
    return m_algorithm_control_isValid;
}

qint32 OAIAudioNormalizationSettings::getCorrectionGateLevel() const {
    return m_correction_gate_level;
}
void OAIAudioNormalizationSettings::setCorrectionGateLevel(const qint32 &correction_gate_level) {
    m_correction_gate_level = correction_gate_level;
    m_correction_gate_level_isSet = true;
}

bool OAIAudioNormalizationSettings::is_correction_gate_level_Set() const{
    return m_correction_gate_level_isSet;
}

bool OAIAudioNormalizationSettings::is_correction_gate_level_Valid() const{
    return m_correction_gate_level_isValid;
}

OAIAudioNormalizationLoudnessLogging OAIAudioNormalizationSettings::getLoudnessLogging() const {
    return m_loudness_logging;
}
void OAIAudioNormalizationSettings::setLoudnessLogging(const OAIAudioNormalizationLoudnessLogging &loudness_logging) {
    m_loudness_logging = loudness_logging;
    m_loudness_logging_isSet = true;
}

bool OAIAudioNormalizationSettings::is_loudness_logging_Set() const{
    return m_loudness_logging_isSet;
}

bool OAIAudioNormalizationSettings::is_loudness_logging_Valid() const{
    return m_loudness_logging_isValid;
}

OAIAudioNormalizationPeakCalculation OAIAudioNormalizationSettings::getPeakCalculation() const {
    return m_peak_calculation;
}
void OAIAudioNormalizationSettings::setPeakCalculation(const OAIAudioNormalizationPeakCalculation &peak_calculation) {
    m_peak_calculation = peak_calculation;
    m_peak_calculation_isSet = true;
}

bool OAIAudioNormalizationSettings::is_peak_calculation_Set() const{
    return m_peak_calculation_isSet;
}

bool OAIAudioNormalizationSettings::is_peak_calculation_Valid() const{
    return m_peak_calculation_isValid;
}

double OAIAudioNormalizationSettings::getTargetLkfs() const {
    return m_target_lkfs;
}
void OAIAudioNormalizationSettings::setTargetLkfs(const double &target_lkfs) {
    m_target_lkfs = target_lkfs;
    m_target_lkfs_isSet = true;
}

bool OAIAudioNormalizationSettings::is_target_lkfs_Set() const{
    return m_target_lkfs_isSet;
}

bool OAIAudioNormalizationSettings::is_target_lkfs_Valid() const{
    return m_target_lkfs_isValid;
}

double OAIAudioNormalizationSettings::getTruePeakLimiterThreshold() const {
    return m_true_peak_limiter_threshold;
}
void OAIAudioNormalizationSettings::setTruePeakLimiterThreshold(const double &true_peak_limiter_threshold) {
    m_true_peak_limiter_threshold = true_peak_limiter_threshold;
    m_true_peak_limiter_threshold_isSet = true;
}

bool OAIAudioNormalizationSettings::is_true_peak_limiter_threshold_Set() const{
    return m_true_peak_limiter_threshold_isSet;
}

bool OAIAudioNormalizationSettings::is_true_peak_limiter_threshold_Valid() const{
    return m_true_peak_limiter_threshold_isValid;
}

bool OAIAudioNormalizationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_correction_gate_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loudness_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_calculation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_lkfs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_peak_limiter_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioNormalizationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
