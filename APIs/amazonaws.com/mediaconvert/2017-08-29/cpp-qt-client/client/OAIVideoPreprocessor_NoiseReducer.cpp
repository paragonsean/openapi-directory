/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoPreprocessor_NoiseReducer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoPreprocessor_NoiseReducer::OAIVideoPreprocessor_NoiseReducer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoPreprocessor_NoiseReducer::OAIVideoPreprocessor_NoiseReducer() {
    this->initializeModel();
}

OAIVideoPreprocessor_NoiseReducer::~OAIVideoPreprocessor_NoiseReducer() {}

void OAIVideoPreprocessor_NoiseReducer::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_filter_settings_isSet = false;
    m_filter_settings_isValid = false;

    m_spatial_filter_settings_isSet = false;
    m_spatial_filter_settings_isValid = false;

    m_temporal_filter_settings_isSet = false;
    m_temporal_filter_settings_isValid = false;
}

void OAIVideoPreprocessor_NoiseReducer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoPreprocessor_NoiseReducer::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_filter_settings_isValid = ::OpenAPI::fromJsonValue(m_filter_settings, json[QString("FilterSettings")]);
    m_filter_settings_isSet = !json[QString("FilterSettings")].isNull() && m_filter_settings_isValid;

    m_spatial_filter_settings_isValid = ::OpenAPI::fromJsonValue(m_spatial_filter_settings, json[QString("SpatialFilterSettings")]);
    m_spatial_filter_settings_isSet = !json[QString("SpatialFilterSettings")].isNull() && m_spatial_filter_settings_isValid;

    m_temporal_filter_settings_isValid = ::OpenAPI::fromJsonValue(m_temporal_filter_settings, json[QString("TemporalFilterSettings")]);
    m_temporal_filter_settings_isSet = !json[QString("TemporalFilterSettings")].isNull() && m_temporal_filter_settings_isValid;
}

QString OAIVideoPreprocessor_NoiseReducer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoPreprocessor_NoiseReducer::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_filter_settings.isSet()) {
        obj.insert(QString("FilterSettings"), ::OpenAPI::toJsonValue(m_filter_settings));
    }
    if (m_spatial_filter_settings.isSet()) {
        obj.insert(QString("SpatialFilterSettings"), ::OpenAPI::toJsonValue(m_spatial_filter_settings));
    }
    if (m_temporal_filter_settings.isSet()) {
        obj.insert(QString("TemporalFilterSettings"), ::OpenAPI::toJsonValue(m_temporal_filter_settings));
    }
    return obj;
}

OAINoiseReducerFilter OAIVideoPreprocessor_NoiseReducer::getFilter() const {
    return m_filter;
}
void OAIVideoPreprocessor_NoiseReducer::setFilter(const OAINoiseReducerFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIVideoPreprocessor_NoiseReducer::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIVideoPreprocessor_NoiseReducer::is_filter_Valid() const{
    return m_filter_isValid;
}

OAINoiseReducer_FilterSettings OAIVideoPreprocessor_NoiseReducer::getFilterSettings() const {
    return m_filter_settings;
}
void OAIVideoPreprocessor_NoiseReducer::setFilterSettings(const OAINoiseReducer_FilterSettings &filter_settings) {
    m_filter_settings = filter_settings;
    m_filter_settings_isSet = true;
}

bool OAIVideoPreprocessor_NoiseReducer::is_filter_settings_Set() const{
    return m_filter_settings_isSet;
}

bool OAIVideoPreprocessor_NoiseReducer::is_filter_settings_Valid() const{
    return m_filter_settings_isValid;
}

OAINoiseReducer_SpatialFilterSettings OAIVideoPreprocessor_NoiseReducer::getSpatialFilterSettings() const {
    return m_spatial_filter_settings;
}
void OAIVideoPreprocessor_NoiseReducer::setSpatialFilterSettings(const OAINoiseReducer_SpatialFilterSettings &spatial_filter_settings) {
    m_spatial_filter_settings = spatial_filter_settings;
    m_spatial_filter_settings_isSet = true;
}

bool OAIVideoPreprocessor_NoiseReducer::is_spatial_filter_settings_Set() const{
    return m_spatial_filter_settings_isSet;
}

bool OAIVideoPreprocessor_NoiseReducer::is_spatial_filter_settings_Valid() const{
    return m_spatial_filter_settings_isValid;
}

OAINoiseReducer_TemporalFilterSettings OAIVideoPreprocessor_NoiseReducer::getTemporalFilterSettings() const {
    return m_temporal_filter_settings;
}
void OAIVideoPreprocessor_NoiseReducer::setTemporalFilterSettings(const OAINoiseReducer_TemporalFilterSettings &temporal_filter_settings) {
    m_temporal_filter_settings = temporal_filter_settings;
    m_temporal_filter_settings_isSet = true;
}

bool OAIVideoPreprocessor_NoiseReducer::is_temporal_filter_settings_Set() const{
    return m_temporal_filter_settings_isSet;
}

bool OAIVideoPreprocessor_NoiseReducer::is_temporal_filter_settings_Valid() const{
    return m_temporal_filter_settings_isValid;
}

bool OAIVideoPreprocessor_NoiseReducer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spatial_filter_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporal_filter_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoPreprocessor_NoiseReducer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
