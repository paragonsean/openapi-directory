/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateJob_request_settings_NielsenNonLinearWatermark.h
 *
 * 
 */

#ifndef OAICreateJob_request_settings_NielsenNonLinearWatermark_H
#define OAICreateJob_request_settings_NielsenNonLinearWatermark_H

#include <QJsonObject>

#include "OAINielsenActiveWatermarkProcessType.h"
#include "OAINielsenSourceWatermarkStatusType.h"
#include "OAINielsenUniqueTicPerAudioTrackType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateJob_request_settings_NielsenNonLinearWatermark : public OAIObject {
public:
    OAICreateJob_request_settings_NielsenNonLinearWatermark();
    OAICreateJob_request_settings_NielsenNonLinearWatermark(QString json);
    ~OAICreateJob_request_settings_NielsenNonLinearWatermark() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINielsenActiveWatermarkProcessType getActiveWatermarkProcess() const;
    void setActiveWatermarkProcess(const OAINielsenActiveWatermarkProcessType &active_watermark_process);
    bool is_active_watermark_process_Set() const;
    bool is_active_watermark_process_Valid() const;

    QString getAdiFilename() const;
    void setAdiFilename(const QString &adi_filename);
    bool is_adi_filename_Set() const;
    bool is_adi_filename_Valid() const;

    QString getAssetId() const;
    void setAssetId(const QString &asset_id);
    bool is_asset_id_Set() const;
    bool is_asset_id_Valid() const;

    QString getAssetName() const;
    void setAssetName(const QString &asset_name);
    bool is_asset_name_Set() const;
    bool is_asset_name_Valid() const;

    QString getCbetSourceId() const;
    void setCbetSourceId(const QString &cbet_source_id);
    bool is_cbet_source_id_Set() const;
    bool is_cbet_source_id_Valid() const;

    QString getEpisodeId() const;
    void setEpisodeId(const QString &episode_id);
    bool is_episode_id_Set() const;
    bool is_episode_id_Valid() const;

    QString getMetadataDestination() const;
    void setMetadataDestination(const QString &metadata_destination);
    bool is_metadata_destination_Set() const;
    bool is_metadata_destination_Valid() const;

    qint32 getSourceId() const;
    void setSourceId(const qint32 &source_id);
    bool is_source_id_Set() const;
    bool is_source_id_Valid() const;

    OAINielsenSourceWatermarkStatusType getSourceWatermarkStatus() const;
    void setSourceWatermarkStatus(const OAINielsenSourceWatermarkStatusType &source_watermark_status);
    bool is_source_watermark_status_Set() const;
    bool is_source_watermark_status_Valid() const;

    QString getTicServerUrl() const;
    void setTicServerUrl(const QString &tic_server_url);
    bool is_tic_server_url_Set() const;
    bool is_tic_server_url_Valid() const;

    OAINielsenUniqueTicPerAudioTrackType getUniqueTicPerAudioTrack() const;
    void setUniqueTicPerAudioTrack(const OAINielsenUniqueTicPerAudioTrackType &unique_tic_per_audio_track);
    bool is_unique_tic_per_audio_track_Set() const;
    bool is_unique_tic_per_audio_track_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINielsenActiveWatermarkProcessType m_active_watermark_process;
    bool m_active_watermark_process_isSet;
    bool m_active_watermark_process_isValid;

    QString m_adi_filename;
    bool m_adi_filename_isSet;
    bool m_adi_filename_isValid;

    QString m_asset_id;
    bool m_asset_id_isSet;
    bool m_asset_id_isValid;

    QString m_asset_name;
    bool m_asset_name_isSet;
    bool m_asset_name_isValid;

    QString m_cbet_source_id;
    bool m_cbet_source_id_isSet;
    bool m_cbet_source_id_isValid;

    QString m_episode_id;
    bool m_episode_id_isSet;
    bool m_episode_id_isValid;

    QString m_metadata_destination;
    bool m_metadata_destination_isSet;
    bool m_metadata_destination_isValid;

    qint32 m_source_id;
    bool m_source_id_isSet;
    bool m_source_id_isValid;

    OAINielsenSourceWatermarkStatusType m_source_watermark_status;
    bool m_source_watermark_status_isSet;
    bool m_source_watermark_status_isValid;

    QString m_tic_server_url;
    bool m_tic_server_url_isSet;
    bool m_tic_server_url_isValid;

    OAINielsenUniqueTicPerAudioTrackType m_unique_tic_per_audio_track;
    bool m_unique_tic_per_audio_track_isSet;
    bool m_unique_tic_per_audio_track_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateJob_request_settings_NielsenNonLinearWatermark)

#endif // OAICreateJob_request_settings_NielsenNonLinearWatermark_H
