/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueue::OAIQueue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueue::OAIQueue() {
    this->initializeModel();
}

OAIQueue::~OAIQueue() {}

void OAIQueue::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pricing_plan_isSet = false;
    m_pricing_plan_isValid = false;

    m_progressing_jobs_count_isSet = false;
    m_progressing_jobs_count_isValid = false;

    m_reservation_plan_isSet = false;
    m_reservation_plan_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submitted_jobs_count_isSet = false;
    m_submitted_jobs_count_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIQueue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueue::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_pricing_plan_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan, json[QString("PricingPlan")]);
    m_pricing_plan_isSet = !json[QString("PricingPlan")].isNull() && m_pricing_plan_isValid;

    m_progressing_jobs_count_isValid = ::OpenAPI::fromJsonValue(m_progressing_jobs_count, json[QString("ProgressingJobsCount")]);
    m_progressing_jobs_count_isSet = !json[QString("ProgressingJobsCount")].isNull() && m_progressing_jobs_count_isValid;

    m_reservation_plan_isValid = ::OpenAPI::fromJsonValue(m_reservation_plan, json[QString("ReservationPlan")]);
    m_reservation_plan_isSet = !json[QString("ReservationPlan")].isNull() && m_reservation_plan_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_submitted_jobs_count_isValid = ::OpenAPI::fromJsonValue(m_submitted_jobs_count, json[QString("SubmittedJobsCount")]);
    m_submitted_jobs_count_isSet = !json[QString("SubmittedJobsCount")].isNull() && m_submitted_jobs_count_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIQueue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueue::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pricing_plan.isSet()) {
        obj.insert(QString("PricingPlan"), ::OpenAPI::toJsonValue(m_pricing_plan));
    }
    if (m_progressing_jobs_count_isSet) {
        obj.insert(QString("ProgressingJobsCount"), ::OpenAPI::toJsonValue(m_progressing_jobs_count));
    }
    if (m_reservation_plan.isSet()) {
        obj.insert(QString("ReservationPlan"), ::OpenAPI::toJsonValue(m_reservation_plan));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submitted_jobs_count_isSet) {
        obj.insert(QString("SubmittedJobsCount"), ::OpenAPI::toJsonValue(m_submitted_jobs_count));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIQueue::getArn() const {
    return m_arn;
}
void OAIQueue::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIQueue::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIQueue::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIQueue::getCreatedAt() const {
    return m_created_at;
}
void OAIQueue::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIQueue::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIQueue::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIQueue::getDescription() const {
    return m_description;
}
void OAIQueue::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIQueue::is_description_Set() const{
    return m_description_isSet;
}

bool OAIQueue::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIQueue::getLastUpdated() const {
    return m_last_updated;
}
void OAIQueue::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIQueue::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIQueue::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIQueue::getName() const {
    return m_name;
}
void OAIQueue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQueue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQueue::is_name_Valid() const{
    return m_name_isValid;
}

OAIPricingPlan OAIQueue::getPricingPlan() const {
    return m_pricing_plan;
}
void OAIQueue::setPricingPlan(const OAIPricingPlan &pricing_plan) {
    m_pricing_plan = pricing_plan;
    m_pricing_plan_isSet = true;
}

bool OAIQueue::is_pricing_plan_Set() const{
    return m_pricing_plan_isSet;
}

bool OAIQueue::is_pricing_plan_Valid() const{
    return m_pricing_plan_isValid;
}

qint32 OAIQueue::getProgressingJobsCount() const {
    return m_progressing_jobs_count;
}
void OAIQueue::setProgressingJobsCount(const qint32 &progressing_jobs_count) {
    m_progressing_jobs_count = progressing_jobs_count;
    m_progressing_jobs_count_isSet = true;
}

bool OAIQueue::is_progressing_jobs_count_Set() const{
    return m_progressing_jobs_count_isSet;
}

bool OAIQueue::is_progressing_jobs_count_Valid() const{
    return m_progressing_jobs_count_isValid;
}

OAIQueue_ReservationPlan OAIQueue::getReservationPlan() const {
    return m_reservation_plan;
}
void OAIQueue::setReservationPlan(const OAIQueue_ReservationPlan &reservation_plan) {
    m_reservation_plan = reservation_plan;
    m_reservation_plan_isSet = true;
}

bool OAIQueue::is_reservation_plan_Set() const{
    return m_reservation_plan_isSet;
}

bool OAIQueue::is_reservation_plan_Valid() const{
    return m_reservation_plan_isValid;
}

OAIQueueStatus OAIQueue::getStatus() const {
    return m_status;
}
void OAIQueue::setStatus(const OAIQueueStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQueue::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQueue::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIQueue::getSubmittedJobsCount() const {
    return m_submitted_jobs_count;
}
void OAIQueue::setSubmittedJobsCount(const qint32 &submitted_jobs_count) {
    m_submitted_jobs_count = submitted_jobs_count;
    m_submitted_jobs_count_isSet = true;
}

bool OAIQueue::is_submitted_jobs_count_Set() const{
    return m_submitted_jobs_count_isSet;
}

bool OAIQueue::is_submitted_jobs_count_Valid() const{
    return m_submitted_jobs_count_isValid;
}

OAIType OAIQueue::getType() const {
    return m_type;
}
void OAIQueue::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIQueue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIQueue::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIQueue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progressing_jobs_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_jobs_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
