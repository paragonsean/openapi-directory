/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartnerWatermarking_NexguardFileMarkerSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartnerWatermarking_NexguardFileMarkerSettings::OAIPartnerWatermarking_NexguardFileMarkerSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartnerWatermarking_NexguardFileMarkerSettings::OAIPartnerWatermarking_NexguardFileMarkerSettings() {
    this->initializeModel();
}

OAIPartnerWatermarking_NexguardFileMarkerSettings::~OAIPartnerWatermarking_NexguardFileMarkerSettings() {}

void OAIPartnerWatermarking_NexguardFileMarkerSettings::initializeModel() {

    m_license_isSet = false;
    m_license_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_preset_isSet = false;
    m_preset_isValid = false;

    m_strength_isSet = false;
    m_strength_isValid = false;
}

void OAIPartnerWatermarking_NexguardFileMarkerSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartnerWatermarking_NexguardFileMarkerSettings::fromJsonObject(QJsonObject json) {

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("License")]);
    m_license_isSet = !json[QString("License")].isNull() && m_license_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("Payload")]);
    m_payload_isSet = !json[QString("Payload")].isNull() && m_payload_isValid;

    m_preset_isValid = ::OpenAPI::fromJsonValue(m_preset, json[QString("Preset")]);
    m_preset_isSet = !json[QString("Preset")].isNull() && m_preset_isValid;

    m_strength_isValid = ::OpenAPI::fromJsonValue(m_strength, json[QString("Strength")]);
    m_strength_isSet = !json[QString("Strength")].isNull() && m_strength_isValid;
}

QString OAIPartnerWatermarking_NexguardFileMarkerSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartnerWatermarking_NexguardFileMarkerSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_license_isSet) {
        obj.insert(QString("License"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_payload_isSet) {
        obj.insert(QString("Payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_preset_isSet) {
        obj.insert(QString("Preset"), ::OpenAPI::toJsonValue(m_preset));
    }
    if (m_strength.isSet()) {
        obj.insert(QString("Strength"), ::OpenAPI::toJsonValue(m_strength));
    }
    return obj;
}

QString OAIPartnerWatermarking_NexguardFileMarkerSettings::getLicense() const {
    return m_license;
}
void OAIPartnerWatermarking_NexguardFileMarkerSettings::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::is_license_Set() const{
    return m_license_isSet;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::is_license_Valid() const{
    return m_license_isValid;
}

qint32 OAIPartnerWatermarking_NexguardFileMarkerSettings::getPayload() const {
    return m_payload;
}
void OAIPartnerWatermarking_NexguardFileMarkerSettings::setPayload(const qint32 &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIPartnerWatermarking_NexguardFileMarkerSettings::getPreset() const {
    return m_preset;
}
void OAIPartnerWatermarking_NexguardFileMarkerSettings::setPreset(const QString &preset) {
    m_preset = preset;
    m_preset_isSet = true;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::is_preset_Set() const{
    return m_preset_isSet;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::is_preset_Valid() const{
    return m_preset_isValid;
}

OAIWatermarkingStrength OAIPartnerWatermarking_NexguardFileMarkerSettings::getStrength() const {
    return m_strength;
}
void OAIPartnerWatermarking_NexguardFileMarkerSettings::setStrength(const OAIWatermarkingStrength &strength) {
    m_strength = strength;
    m_strength_isSet = true;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::is_strength_Set() const{
    return m_strength_isSet;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::is_strength_Valid() const{
    return m_strength_isValid;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strength.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartnerWatermarking_NexguardFileMarkerSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
