/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBurninSubtitleFallbackFont.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBurninSubtitleFallbackFont::OAIBurninSubtitleFallbackFont(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBurninSubtitleFallbackFont::OAIBurninSubtitleFallbackFont() {
    this->initializeModel();
}

OAIBurninSubtitleFallbackFont::~OAIBurninSubtitleFallbackFont() {}

void OAIBurninSubtitleFallbackFont::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBurninSubtitleFallbackFont::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBurninSubtitleFallbackFont::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BEST_MATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurninSubtitleFallbackFont::BEST_MATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MONOSPACED_SANSSERIF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurninSubtitleFallbackFont::MONOSPACED_SANSSERIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MONOSPACED_SERIF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurninSubtitleFallbackFont::MONOSPACED_SERIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROPORTIONAL_SANSSERIF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurninSubtitleFallbackFont::PROPORTIONAL_SANSSERIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROPORTIONAL_SERIF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurninSubtitleFallbackFont::PROPORTIONAL_SERIF;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBurninSubtitleFallbackFont::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBurninSubtitleFallbackFont::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBurninSubtitleFallbackFont::BEST_MATCH:
            val = "BEST_MATCH";
            break;
        case eOAIBurninSubtitleFallbackFont::MONOSPACED_SANSSERIF:
            val = "MONOSPACED_SANSSERIF";
            break;
        case eOAIBurninSubtitleFallbackFont::MONOSPACED_SERIF:
            val = "MONOSPACED_SERIF";
            break;
        case eOAIBurninSubtitleFallbackFont::PROPORTIONAL_SANSSERIF:
            val = "PROPORTIONAL_SANSSERIF";
            break;
        case eOAIBurninSubtitleFallbackFont::PROPORTIONAL_SERIF:
            val = "PROPORTIONAL_SERIF";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBurninSubtitleFallbackFont::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBurninSubtitleFallbackFont::eOAIBurninSubtitleFallbackFont OAIBurninSubtitleFallbackFont::getValue() const {
    return m_value;
}

void OAIBurninSubtitleFallbackFont::setValue(const OAIBurninSubtitleFallbackFont::eOAIBurninSubtitleFallbackFont& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBurninSubtitleFallbackFont::isSet() const {
    
    return m_value_isSet;
}

bool OAIBurninSubtitleFallbackFont::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
