/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimecodeBurnin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimecodeBurnin::OAITimecodeBurnin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimecodeBurnin::OAITimecodeBurnin() {
    this->initializeModel();
}

OAITimecodeBurnin::~OAITimecodeBurnin() {}

void OAITimecodeBurnin::initializeModel() {

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAITimecodeBurnin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimecodeBurnin::fromJsonObject(QJsonObject json) {

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("FontSize")]);
    m_font_size_isSet = !json[QString("FontSize")].isNull() && m_font_size_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;
}

QString OAITimecodeBurnin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimecodeBurnin::asJsonObject() const {
    QJsonObject obj;
    if (m_font_size_isSet) {
        obj.insert(QString("FontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

qint32 OAITimecodeBurnin::getFontSize() const {
    return m_font_size;
}
void OAITimecodeBurnin::setFontSize(const qint32 &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAITimecodeBurnin::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAITimecodeBurnin::is_font_size_Valid() const{
    return m_font_size_isValid;
}

OAITimecodeBurninPosition OAITimecodeBurnin::getPosition() const {
    return m_position;
}
void OAITimecodeBurnin::setPosition(const OAITimecodeBurninPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAITimecodeBurnin::is_position_Set() const{
    return m_position_isSet;
}

bool OAITimecodeBurnin::is_position_Valid() const{
    return m_position_isValid;
}

QString OAITimecodeBurnin::getPrefix() const {
    return m_prefix;
}
void OAITimecodeBurnin::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAITimecodeBurnin::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAITimecodeBurnin::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAITimecodeBurnin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimecodeBurnin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
