/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEac3AtmosDynamicRangeCompressionRf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEac3AtmosDynamicRangeCompressionRf::OAIEac3AtmosDynamicRangeCompressionRf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEac3AtmosDynamicRangeCompressionRf::OAIEac3AtmosDynamicRangeCompressionRf() {
    this->initializeModel();
}

OAIEac3AtmosDynamicRangeCompressionRf::~OAIEac3AtmosDynamicRangeCompressionRf() {}

void OAIEac3AtmosDynamicRangeCompressionRf::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEac3AtmosDynamicRangeCompressionRf::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEac3AtmosDynamicRangeCompressionRf::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosDynamicRangeCompressionRf::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FILM_STANDARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosDynamicRangeCompressionRf::FILM_STANDARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FILM_LIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosDynamicRangeCompressionRf::FILM_LIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MUSIC_STANDARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosDynamicRangeCompressionRf::MUSIC_STANDARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MUSIC_LIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosDynamicRangeCompressionRf::MUSIC_LIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPEECH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosDynamicRangeCompressionRf::SPEECH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEac3AtmosDynamicRangeCompressionRf::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEac3AtmosDynamicRangeCompressionRf::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEac3AtmosDynamicRangeCompressionRf::NONE:
            val = "NONE";
            break;
        case eOAIEac3AtmosDynamicRangeCompressionRf::FILM_STANDARD:
            val = "FILM_STANDARD";
            break;
        case eOAIEac3AtmosDynamicRangeCompressionRf::FILM_LIGHT:
            val = "FILM_LIGHT";
            break;
        case eOAIEac3AtmosDynamicRangeCompressionRf::MUSIC_STANDARD:
            val = "MUSIC_STANDARD";
            break;
        case eOAIEac3AtmosDynamicRangeCompressionRf::MUSIC_LIGHT:
            val = "MUSIC_LIGHT";
            break;
        case eOAIEac3AtmosDynamicRangeCompressionRf::SPEECH:
            val = "SPEECH";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEac3AtmosDynamicRangeCompressionRf::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEac3AtmosDynamicRangeCompressionRf::eOAIEac3AtmosDynamicRangeCompressionRf OAIEac3AtmosDynamicRangeCompressionRf::getValue() const {
    return m_value;
}

void OAIEac3AtmosDynamicRangeCompressionRf::setValue(const OAIEac3AtmosDynamicRangeCompressionRf::eOAIEac3AtmosDynamicRangeCompressionRf& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEac3AtmosDynamicRangeCompressionRf::isSet() const {
    
    return m_value_isSet;
}

bool OAIEac3AtmosDynamicRangeCompressionRf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
