/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHlsImageBasedTrickPlay.h
 *
 * Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
 */

#ifndef OAIHlsImageBasedTrickPlay_H
#define OAIHlsImageBasedTrickPlay_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHlsImageBasedTrickPlay : public OAIEnum {
public:
    OAIHlsImageBasedTrickPlay();
    OAIHlsImageBasedTrickPlay(QString json);
    ~OAIHlsImageBasedTrickPlay() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIHlsImageBasedTrickPlay {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        NONE, 
        THUMBNAIL, 
        THUMBNAIL_AND_FULLFRAME, 
        ADVANCED
    };
    OAIHlsImageBasedTrickPlay::eOAIHlsImageBasedTrickPlay getValue() const;
    void setValue(const OAIHlsImageBasedTrickPlay::eOAIHlsImageBasedTrickPlay& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIHlsImageBasedTrickPlay m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHlsImageBasedTrickPlay)

#endif // OAIHlsImageBasedTrickPlay_H
