/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileSourceSettings_Framerate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileSourceSettings_Framerate::OAIFileSourceSettings_Framerate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileSourceSettings_Framerate::OAIFileSourceSettings_Framerate() {
    this->initializeModel();
}

OAIFileSourceSettings_Framerate::~OAIFileSourceSettings_Framerate() {}

void OAIFileSourceSettings_Framerate::initializeModel() {

    m_framerate_denominator_isSet = false;
    m_framerate_denominator_isValid = false;

    m_framerate_numerator_isSet = false;
    m_framerate_numerator_isValid = false;
}

void OAIFileSourceSettings_Framerate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileSourceSettings_Framerate::fromJsonObject(QJsonObject json) {

    m_framerate_denominator_isValid = ::OpenAPI::fromJsonValue(m_framerate_denominator, json[QString("FramerateDenominator")]);
    m_framerate_denominator_isSet = !json[QString("FramerateDenominator")].isNull() && m_framerate_denominator_isValid;

    m_framerate_numerator_isValid = ::OpenAPI::fromJsonValue(m_framerate_numerator, json[QString("FramerateNumerator")]);
    m_framerate_numerator_isSet = !json[QString("FramerateNumerator")].isNull() && m_framerate_numerator_isValid;
}

QString OAIFileSourceSettings_Framerate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileSourceSettings_Framerate::asJsonObject() const {
    QJsonObject obj;
    if (m_framerate_denominator_isSet) {
        obj.insert(QString("FramerateDenominator"), ::OpenAPI::toJsonValue(m_framerate_denominator));
    }
    if (m_framerate_numerator_isSet) {
        obj.insert(QString("FramerateNumerator"), ::OpenAPI::toJsonValue(m_framerate_numerator));
    }
    return obj;
}

qint32 OAIFileSourceSettings_Framerate::getFramerateDenominator() const {
    return m_framerate_denominator;
}
void OAIFileSourceSettings_Framerate::setFramerateDenominator(const qint32 &framerate_denominator) {
    m_framerate_denominator = framerate_denominator;
    m_framerate_denominator_isSet = true;
}

bool OAIFileSourceSettings_Framerate::is_framerate_denominator_Set() const{
    return m_framerate_denominator_isSet;
}

bool OAIFileSourceSettings_Framerate::is_framerate_denominator_Valid() const{
    return m_framerate_denominator_isValid;
}

qint32 OAIFileSourceSettings_Framerate::getFramerateNumerator() const {
    return m_framerate_numerator;
}
void OAIFileSourceSettings_Framerate::setFramerateNumerator(const qint32 &framerate_numerator) {
    m_framerate_numerator = framerate_numerator;
    m_framerate_numerator_isSet = true;
}

bool OAIFileSourceSettings_Framerate::is_framerate_numerator_Set() const{
    return m_framerate_numerator_isSet;
}

bool OAIFileSourceSettings_Framerate::is_framerate_numerator_Valid() const{
    return m_framerate_numerator_isValid;
}

bool OAIFileSourceSettings_Framerate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_framerate_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileSourceSettings_Framerate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
