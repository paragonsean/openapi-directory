/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainerSettings_M3u8Settings.h
 *
 * 
 */

#ifndef OAIContainerSettings_M3u8Settings_H
#define OAIContainerSettings_M3u8Settings_H

#include <QJsonObject>

#include "OAIM3u8AudioDuration.h"
#include "OAIM3u8DataPtsControl.h"
#include "OAIM3u8NielsenId3.h"
#include "OAIM3u8PcrControl.h"
#include "OAIM3u8Scte35Source.h"
#include "OAITimedMetadata.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContainerSettings_M3u8Settings : public OAIObject {
public:
    OAIContainerSettings_M3u8Settings();
    OAIContainerSettings_M3u8Settings(QString json);
    ~OAIContainerSettings_M3u8Settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIM3u8AudioDuration getAudioDuration() const;
    void setAudioDuration(const OAIM3u8AudioDuration &audio_duration);
    bool is_audio_duration_Set() const;
    bool is_audio_duration_Valid() const;

    qint32 getAudioFramesPerPes() const;
    void setAudioFramesPerPes(const qint32 &audio_frames_per_pes);
    bool is_audio_frames_per_pes_Set() const;
    bool is_audio_frames_per_pes_Valid() const;

    QList getAudioPids() const;
    void setAudioPids(const QList &audio_pids);
    bool is_audio_pids_Set() const;
    bool is_audio_pids_Valid() const;

    OAIM3u8DataPtsControl getDataPtsControl() const;
    void setDataPtsControl(const OAIM3u8DataPtsControl &data_pts_control);
    bool is_data_pts_control_Set() const;
    bool is_data_pts_control_Valid() const;

    qint32 getMaxPcrInterval() const;
    void setMaxPcrInterval(const qint32 &max_pcr_interval);
    bool is_max_pcr_interval_Set() const;
    bool is_max_pcr_interval_Valid() const;

    OAIM3u8NielsenId3 getNielsenId3() const;
    void setNielsenId3(const OAIM3u8NielsenId3 &nielsen_id3);
    bool is_nielsen_id3_Set() const;
    bool is_nielsen_id3_Valid() const;

    qint32 getPatInterval() const;
    void setPatInterval(const qint32 &pat_interval);
    bool is_pat_interval_Set() const;
    bool is_pat_interval_Valid() const;

    OAIM3u8PcrControl getPcrControl() const;
    void setPcrControl(const OAIM3u8PcrControl &pcr_control);
    bool is_pcr_control_Set() const;
    bool is_pcr_control_Valid() const;

    qint32 getPcrPid() const;
    void setPcrPid(const qint32 &pcr_pid);
    bool is_pcr_pid_Set() const;
    bool is_pcr_pid_Valid() const;

    qint32 getPmtInterval() const;
    void setPmtInterval(const qint32 &pmt_interval);
    bool is_pmt_interval_Set() const;
    bool is_pmt_interval_Valid() const;

    qint32 getPmtPid() const;
    void setPmtPid(const qint32 &pmt_pid);
    bool is_pmt_pid_Set() const;
    bool is_pmt_pid_Valid() const;

    qint32 getPrivateMetadataPid() const;
    void setPrivateMetadataPid(const qint32 &private_metadata_pid);
    bool is_private_metadata_pid_Set() const;
    bool is_private_metadata_pid_Valid() const;

    qint32 getProgramNumber() const;
    void setProgramNumber(const qint32 &program_number);
    bool is_program_number_Set() const;
    bool is_program_number_Valid() const;

    qint32 getScte35Pid() const;
    void setScte35Pid(const qint32 &scte35_pid);
    bool is_scte35_pid_Set() const;
    bool is_scte35_pid_Valid() const;

    OAIM3u8Scte35Source getScte35Source() const;
    void setScte35Source(const OAIM3u8Scte35Source &scte35_source);
    bool is_scte35_source_Set() const;
    bool is_scte35_source_Valid() const;

    OAITimedMetadata getTimedMetadata() const;
    void setTimedMetadata(const OAITimedMetadata &timed_metadata);
    bool is_timed_metadata_Set() const;
    bool is_timed_metadata_Valid() const;

    qint32 getTimedMetadataPid() const;
    void setTimedMetadataPid(const qint32 &timed_metadata_pid);
    bool is_timed_metadata_pid_Set() const;
    bool is_timed_metadata_pid_Valid() const;

    qint32 getTransportStreamId() const;
    void setTransportStreamId(const qint32 &transport_stream_id);
    bool is_transport_stream_id_Set() const;
    bool is_transport_stream_id_Valid() const;

    qint32 getVideoPid() const;
    void setVideoPid(const qint32 &video_pid);
    bool is_video_pid_Set() const;
    bool is_video_pid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIM3u8AudioDuration m_audio_duration;
    bool m_audio_duration_isSet;
    bool m_audio_duration_isValid;

    qint32 m_audio_frames_per_pes;
    bool m_audio_frames_per_pes_isSet;
    bool m_audio_frames_per_pes_isValid;

    QList m_audio_pids;
    bool m_audio_pids_isSet;
    bool m_audio_pids_isValid;

    OAIM3u8DataPtsControl m_data_pts_control;
    bool m_data_pts_control_isSet;
    bool m_data_pts_control_isValid;

    qint32 m_max_pcr_interval;
    bool m_max_pcr_interval_isSet;
    bool m_max_pcr_interval_isValid;

    OAIM3u8NielsenId3 m_nielsen_id3;
    bool m_nielsen_id3_isSet;
    bool m_nielsen_id3_isValid;

    qint32 m_pat_interval;
    bool m_pat_interval_isSet;
    bool m_pat_interval_isValid;

    OAIM3u8PcrControl m_pcr_control;
    bool m_pcr_control_isSet;
    bool m_pcr_control_isValid;

    qint32 m_pcr_pid;
    bool m_pcr_pid_isSet;
    bool m_pcr_pid_isValid;

    qint32 m_pmt_interval;
    bool m_pmt_interval_isSet;
    bool m_pmt_interval_isValid;

    qint32 m_pmt_pid;
    bool m_pmt_pid_isSet;
    bool m_pmt_pid_isValid;

    qint32 m_private_metadata_pid;
    bool m_private_metadata_pid_isSet;
    bool m_private_metadata_pid_isValid;

    qint32 m_program_number;
    bool m_program_number_isSet;
    bool m_program_number_isValid;

    qint32 m_scte35_pid;
    bool m_scte35_pid_isSet;
    bool m_scte35_pid_isValid;

    OAIM3u8Scte35Source m_scte35_source;
    bool m_scte35_source_isSet;
    bool m_scte35_source_isValid;

    OAITimedMetadata m_timed_metadata;
    bool m_timed_metadata_isSet;
    bool m_timed_metadata_isValid;

    qint32 m_timed_metadata_pid;
    bool m_timed_metadata_pid_isSet;
    bool m_timed_metadata_pid_isValid;

    qint32 m_transport_stream_id;
    bool m_transport_stream_id_isSet;
    bool m_transport_stream_id_isValid;

    qint32 m_video_pid;
    bool m_video_pid_isSet;
    bool m_video_pid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainerSettings_M3u8Settings)

#endif // OAIContainerSettings_M3u8Settings_H
