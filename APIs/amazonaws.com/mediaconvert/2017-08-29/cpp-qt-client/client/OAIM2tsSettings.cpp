/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIM2tsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIM2tsSettings::OAIM2tsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIM2tsSettings::OAIM2tsSettings() {
    this->initializeModel();
}

OAIM2tsSettings::~OAIM2tsSettings() {}

void OAIM2tsSettings::initializeModel() {

    m_audio_buffer_model_isSet = false;
    m_audio_buffer_model_isValid = false;

    m_audio_duration_isSet = false;
    m_audio_duration_isValid = false;

    m_audio_frames_per_pes_isSet = false;
    m_audio_frames_per_pes_isValid = false;

    m_audio_pids_isSet = false;
    m_audio_pids_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_buffer_model_isSet = false;
    m_buffer_model_isValid = false;

    m_data_pts_control_isSet = false;
    m_data_pts_control_isValid = false;

    m_dvb_nit_settings_isSet = false;
    m_dvb_nit_settings_isValid = false;

    m_dvb_sdt_settings_isSet = false;
    m_dvb_sdt_settings_isValid = false;

    m_dvb_sub_pids_isSet = false;
    m_dvb_sub_pids_isValid = false;

    m_dvb_tdt_settings_isSet = false;
    m_dvb_tdt_settings_isValid = false;

    m_dvb_teletext_pid_isSet = false;
    m_dvb_teletext_pid_isValid = false;

    m_ebp_audio_interval_isSet = false;
    m_ebp_audio_interval_isValid = false;

    m_ebp_placement_isSet = false;
    m_ebp_placement_isValid = false;

    m_es_rate_in_pes_isSet = false;
    m_es_rate_in_pes_isValid = false;

    m_force_ts_video_ebp_order_isSet = false;
    m_force_ts_video_ebp_order_isValid = false;

    m_fragment_time_isSet = false;
    m_fragment_time_isValid = false;

    m_klv_metadata_isSet = false;
    m_klv_metadata_isValid = false;

    m_max_pcr_interval_isSet = false;
    m_max_pcr_interval_isValid = false;

    m_min_ebp_interval_isSet = false;
    m_min_ebp_interval_isValid = false;

    m_nielsen_id3_isSet = false;
    m_nielsen_id3_isValid = false;

    m_null_packet_bitrate_isSet = false;
    m_null_packet_bitrate_isValid = false;

    m_pat_interval_isSet = false;
    m_pat_interval_isValid = false;

    m_pcr_control_isSet = false;
    m_pcr_control_isValid = false;

    m_pcr_pid_isSet = false;
    m_pcr_pid_isValid = false;

    m_pmt_interval_isSet = false;
    m_pmt_interval_isValid = false;

    m_pmt_pid_isSet = false;
    m_pmt_pid_isValid = false;

    m_private_metadata_pid_isSet = false;
    m_private_metadata_pid_isValid = false;

    m_program_number_isSet = false;
    m_program_number_isValid = false;

    m_rate_mode_isSet = false;
    m_rate_mode_isValid = false;

    m_scte35_esam_isSet = false;
    m_scte35_esam_isValid = false;

    m_scte35_pid_isSet = false;
    m_scte35_pid_isValid = false;

    m_scte35_source_isSet = false;
    m_scte35_source_isValid = false;

    m_segmentation_markers_isSet = false;
    m_segmentation_markers_isValid = false;

    m_segmentation_style_isSet = false;
    m_segmentation_style_isValid = false;

    m_segmentation_time_isSet = false;
    m_segmentation_time_isValid = false;

    m_timed_metadata_pid_isSet = false;
    m_timed_metadata_pid_isValid = false;

    m_transport_stream_id_isSet = false;
    m_transport_stream_id_isValid = false;

    m_video_pid_isSet = false;
    m_video_pid_isValid = false;
}

void OAIM2tsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIM2tsSettings::fromJsonObject(QJsonObject json) {

    m_audio_buffer_model_isValid = ::OpenAPI::fromJsonValue(m_audio_buffer_model, json[QString("AudioBufferModel")]);
    m_audio_buffer_model_isSet = !json[QString("AudioBufferModel")].isNull() && m_audio_buffer_model_isValid;

    m_audio_duration_isValid = ::OpenAPI::fromJsonValue(m_audio_duration, json[QString("AudioDuration")]);
    m_audio_duration_isSet = !json[QString("AudioDuration")].isNull() && m_audio_duration_isValid;

    m_audio_frames_per_pes_isValid = ::OpenAPI::fromJsonValue(m_audio_frames_per_pes, json[QString("AudioFramesPerPes")]);
    m_audio_frames_per_pes_isSet = !json[QString("AudioFramesPerPes")].isNull() && m_audio_frames_per_pes_isValid;

    m_audio_pids_isValid = ::OpenAPI::fromJsonValue(m_audio_pids, json[QString("AudioPids")]);
    m_audio_pids_isSet = !json[QString("AudioPids")].isNull() && m_audio_pids_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_buffer_model_isValid = ::OpenAPI::fromJsonValue(m_buffer_model, json[QString("BufferModel")]);
    m_buffer_model_isSet = !json[QString("BufferModel")].isNull() && m_buffer_model_isValid;

    m_data_pts_control_isValid = ::OpenAPI::fromJsonValue(m_data_pts_control, json[QString("DataPTSControl")]);
    m_data_pts_control_isSet = !json[QString("DataPTSControl")].isNull() && m_data_pts_control_isValid;

    m_dvb_nit_settings_isValid = ::OpenAPI::fromJsonValue(m_dvb_nit_settings, json[QString("DvbNitSettings")]);
    m_dvb_nit_settings_isSet = !json[QString("DvbNitSettings")].isNull() && m_dvb_nit_settings_isValid;

    m_dvb_sdt_settings_isValid = ::OpenAPI::fromJsonValue(m_dvb_sdt_settings, json[QString("DvbSdtSettings")]);
    m_dvb_sdt_settings_isSet = !json[QString("DvbSdtSettings")].isNull() && m_dvb_sdt_settings_isValid;

    m_dvb_sub_pids_isValid = ::OpenAPI::fromJsonValue(m_dvb_sub_pids, json[QString("DvbSubPids")]);
    m_dvb_sub_pids_isSet = !json[QString("DvbSubPids")].isNull() && m_dvb_sub_pids_isValid;

    m_dvb_tdt_settings_isValid = ::OpenAPI::fromJsonValue(m_dvb_tdt_settings, json[QString("DvbTdtSettings")]);
    m_dvb_tdt_settings_isSet = !json[QString("DvbTdtSettings")].isNull() && m_dvb_tdt_settings_isValid;

    m_dvb_teletext_pid_isValid = ::OpenAPI::fromJsonValue(m_dvb_teletext_pid, json[QString("DvbTeletextPid")]);
    m_dvb_teletext_pid_isSet = !json[QString("DvbTeletextPid")].isNull() && m_dvb_teletext_pid_isValid;

    m_ebp_audio_interval_isValid = ::OpenAPI::fromJsonValue(m_ebp_audio_interval, json[QString("EbpAudioInterval")]);
    m_ebp_audio_interval_isSet = !json[QString("EbpAudioInterval")].isNull() && m_ebp_audio_interval_isValid;

    m_ebp_placement_isValid = ::OpenAPI::fromJsonValue(m_ebp_placement, json[QString("EbpPlacement")]);
    m_ebp_placement_isSet = !json[QString("EbpPlacement")].isNull() && m_ebp_placement_isValid;

    m_es_rate_in_pes_isValid = ::OpenAPI::fromJsonValue(m_es_rate_in_pes, json[QString("EsRateInPes")]);
    m_es_rate_in_pes_isSet = !json[QString("EsRateInPes")].isNull() && m_es_rate_in_pes_isValid;

    m_force_ts_video_ebp_order_isValid = ::OpenAPI::fromJsonValue(m_force_ts_video_ebp_order, json[QString("ForceTsVideoEbpOrder")]);
    m_force_ts_video_ebp_order_isSet = !json[QString("ForceTsVideoEbpOrder")].isNull() && m_force_ts_video_ebp_order_isValid;

    m_fragment_time_isValid = ::OpenAPI::fromJsonValue(m_fragment_time, json[QString("FragmentTime")]);
    m_fragment_time_isSet = !json[QString("FragmentTime")].isNull() && m_fragment_time_isValid;

    m_klv_metadata_isValid = ::OpenAPI::fromJsonValue(m_klv_metadata, json[QString("KlvMetadata")]);
    m_klv_metadata_isSet = !json[QString("KlvMetadata")].isNull() && m_klv_metadata_isValid;

    m_max_pcr_interval_isValid = ::OpenAPI::fromJsonValue(m_max_pcr_interval, json[QString("MaxPcrInterval")]);
    m_max_pcr_interval_isSet = !json[QString("MaxPcrInterval")].isNull() && m_max_pcr_interval_isValid;

    m_min_ebp_interval_isValid = ::OpenAPI::fromJsonValue(m_min_ebp_interval, json[QString("MinEbpInterval")]);
    m_min_ebp_interval_isSet = !json[QString("MinEbpInterval")].isNull() && m_min_ebp_interval_isValid;

    m_nielsen_id3_isValid = ::OpenAPI::fromJsonValue(m_nielsen_id3, json[QString("NielsenId3")]);
    m_nielsen_id3_isSet = !json[QString("NielsenId3")].isNull() && m_nielsen_id3_isValid;

    m_null_packet_bitrate_isValid = ::OpenAPI::fromJsonValue(m_null_packet_bitrate, json[QString("NullPacketBitrate")]);
    m_null_packet_bitrate_isSet = !json[QString("NullPacketBitrate")].isNull() && m_null_packet_bitrate_isValid;

    m_pat_interval_isValid = ::OpenAPI::fromJsonValue(m_pat_interval, json[QString("PatInterval")]);
    m_pat_interval_isSet = !json[QString("PatInterval")].isNull() && m_pat_interval_isValid;

    m_pcr_control_isValid = ::OpenAPI::fromJsonValue(m_pcr_control, json[QString("PcrControl")]);
    m_pcr_control_isSet = !json[QString("PcrControl")].isNull() && m_pcr_control_isValid;

    m_pcr_pid_isValid = ::OpenAPI::fromJsonValue(m_pcr_pid, json[QString("PcrPid")]);
    m_pcr_pid_isSet = !json[QString("PcrPid")].isNull() && m_pcr_pid_isValid;

    m_pmt_interval_isValid = ::OpenAPI::fromJsonValue(m_pmt_interval, json[QString("PmtInterval")]);
    m_pmt_interval_isSet = !json[QString("PmtInterval")].isNull() && m_pmt_interval_isValid;

    m_pmt_pid_isValid = ::OpenAPI::fromJsonValue(m_pmt_pid, json[QString("PmtPid")]);
    m_pmt_pid_isSet = !json[QString("PmtPid")].isNull() && m_pmt_pid_isValid;

    m_private_metadata_pid_isValid = ::OpenAPI::fromJsonValue(m_private_metadata_pid, json[QString("PrivateMetadataPid")]);
    m_private_metadata_pid_isSet = !json[QString("PrivateMetadataPid")].isNull() && m_private_metadata_pid_isValid;

    m_program_number_isValid = ::OpenAPI::fromJsonValue(m_program_number, json[QString("ProgramNumber")]);
    m_program_number_isSet = !json[QString("ProgramNumber")].isNull() && m_program_number_isValid;

    m_rate_mode_isValid = ::OpenAPI::fromJsonValue(m_rate_mode, json[QString("RateMode")]);
    m_rate_mode_isSet = !json[QString("RateMode")].isNull() && m_rate_mode_isValid;

    m_scte35_esam_isValid = ::OpenAPI::fromJsonValue(m_scte35_esam, json[QString("Scte35Esam")]);
    m_scte35_esam_isSet = !json[QString("Scte35Esam")].isNull() && m_scte35_esam_isValid;

    m_scte35_pid_isValid = ::OpenAPI::fromJsonValue(m_scte35_pid, json[QString("Scte35Pid")]);
    m_scte35_pid_isSet = !json[QString("Scte35Pid")].isNull() && m_scte35_pid_isValid;

    m_scte35_source_isValid = ::OpenAPI::fromJsonValue(m_scte35_source, json[QString("Scte35Source")]);
    m_scte35_source_isSet = !json[QString("Scte35Source")].isNull() && m_scte35_source_isValid;

    m_segmentation_markers_isValid = ::OpenAPI::fromJsonValue(m_segmentation_markers, json[QString("SegmentationMarkers")]);
    m_segmentation_markers_isSet = !json[QString("SegmentationMarkers")].isNull() && m_segmentation_markers_isValid;

    m_segmentation_style_isValid = ::OpenAPI::fromJsonValue(m_segmentation_style, json[QString("SegmentationStyle")]);
    m_segmentation_style_isSet = !json[QString("SegmentationStyle")].isNull() && m_segmentation_style_isValid;

    m_segmentation_time_isValid = ::OpenAPI::fromJsonValue(m_segmentation_time, json[QString("SegmentationTime")]);
    m_segmentation_time_isSet = !json[QString("SegmentationTime")].isNull() && m_segmentation_time_isValid;

    m_timed_metadata_pid_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_pid, json[QString("TimedMetadataPid")]);
    m_timed_metadata_pid_isSet = !json[QString("TimedMetadataPid")].isNull() && m_timed_metadata_pid_isValid;

    m_transport_stream_id_isValid = ::OpenAPI::fromJsonValue(m_transport_stream_id, json[QString("TransportStreamId")]);
    m_transport_stream_id_isSet = !json[QString("TransportStreamId")].isNull() && m_transport_stream_id_isValid;

    m_video_pid_isValid = ::OpenAPI::fromJsonValue(m_video_pid, json[QString("VideoPid")]);
    m_video_pid_isSet = !json[QString("VideoPid")].isNull() && m_video_pid_isValid;
}

QString OAIM2tsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIM2tsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_buffer_model.isSet()) {
        obj.insert(QString("AudioBufferModel"), ::OpenAPI::toJsonValue(m_audio_buffer_model));
    }
    if (m_audio_duration.isSet()) {
        obj.insert(QString("AudioDuration"), ::OpenAPI::toJsonValue(m_audio_duration));
    }
    if (m_audio_frames_per_pes_isSet) {
        obj.insert(QString("AudioFramesPerPes"), ::OpenAPI::toJsonValue(m_audio_frames_per_pes));
    }
    if (m_audio_pids.isSet()) {
        obj.insert(QString("AudioPids"), ::OpenAPI::toJsonValue(m_audio_pids));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_buffer_model.isSet()) {
        obj.insert(QString("BufferModel"), ::OpenAPI::toJsonValue(m_buffer_model));
    }
    if (m_data_pts_control.isSet()) {
        obj.insert(QString("DataPTSControl"), ::OpenAPI::toJsonValue(m_data_pts_control));
    }
    if (m_dvb_nit_settings.isSet()) {
        obj.insert(QString("DvbNitSettings"), ::OpenAPI::toJsonValue(m_dvb_nit_settings));
    }
    if (m_dvb_sdt_settings.isSet()) {
        obj.insert(QString("DvbSdtSettings"), ::OpenAPI::toJsonValue(m_dvb_sdt_settings));
    }
    if (m_dvb_sub_pids.isSet()) {
        obj.insert(QString("DvbSubPids"), ::OpenAPI::toJsonValue(m_dvb_sub_pids));
    }
    if (m_dvb_tdt_settings.isSet()) {
        obj.insert(QString("DvbTdtSettings"), ::OpenAPI::toJsonValue(m_dvb_tdt_settings));
    }
    if (m_dvb_teletext_pid_isSet) {
        obj.insert(QString("DvbTeletextPid"), ::OpenAPI::toJsonValue(m_dvb_teletext_pid));
    }
    if (m_ebp_audio_interval.isSet()) {
        obj.insert(QString("EbpAudioInterval"), ::OpenAPI::toJsonValue(m_ebp_audio_interval));
    }
    if (m_ebp_placement.isSet()) {
        obj.insert(QString("EbpPlacement"), ::OpenAPI::toJsonValue(m_ebp_placement));
    }
    if (m_es_rate_in_pes.isSet()) {
        obj.insert(QString("EsRateInPes"), ::OpenAPI::toJsonValue(m_es_rate_in_pes));
    }
    if (m_force_ts_video_ebp_order.isSet()) {
        obj.insert(QString("ForceTsVideoEbpOrder"), ::OpenAPI::toJsonValue(m_force_ts_video_ebp_order));
    }
    if (m_fragment_time_isSet) {
        obj.insert(QString("FragmentTime"), ::OpenAPI::toJsonValue(m_fragment_time));
    }
    if (m_klv_metadata.isSet()) {
        obj.insert(QString("KlvMetadata"), ::OpenAPI::toJsonValue(m_klv_metadata));
    }
    if (m_max_pcr_interval_isSet) {
        obj.insert(QString("MaxPcrInterval"), ::OpenAPI::toJsonValue(m_max_pcr_interval));
    }
    if (m_min_ebp_interval_isSet) {
        obj.insert(QString("MinEbpInterval"), ::OpenAPI::toJsonValue(m_min_ebp_interval));
    }
    if (m_nielsen_id3.isSet()) {
        obj.insert(QString("NielsenId3"), ::OpenAPI::toJsonValue(m_nielsen_id3));
    }
    if (m_null_packet_bitrate_isSet) {
        obj.insert(QString("NullPacketBitrate"), ::OpenAPI::toJsonValue(m_null_packet_bitrate));
    }
    if (m_pat_interval_isSet) {
        obj.insert(QString("PatInterval"), ::OpenAPI::toJsonValue(m_pat_interval));
    }
    if (m_pcr_control.isSet()) {
        obj.insert(QString("PcrControl"), ::OpenAPI::toJsonValue(m_pcr_control));
    }
    if (m_pcr_pid_isSet) {
        obj.insert(QString("PcrPid"), ::OpenAPI::toJsonValue(m_pcr_pid));
    }
    if (m_pmt_interval_isSet) {
        obj.insert(QString("PmtInterval"), ::OpenAPI::toJsonValue(m_pmt_interval));
    }
    if (m_pmt_pid_isSet) {
        obj.insert(QString("PmtPid"), ::OpenAPI::toJsonValue(m_pmt_pid));
    }
    if (m_private_metadata_pid_isSet) {
        obj.insert(QString("PrivateMetadataPid"), ::OpenAPI::toJsonValue(m_private_metadata_pid));
    }
    if (m_program_number_isSet) {
        obj.insert(QString("ProgramNumber"), ::OpenAPI::toJsonValue(m_program_number));
    }
    if (m_rate_mode.isSet()) {
        obj.insert(QString("RateMode"), ::OpenAPI::toJsonValue(m_rate_mode));
    }
    if (m_scte35_esam.isSet()) {
        obj.insert(QString("Scte35Esam"), ::OpenAPI::toJsonValue(m_scte35_esam));
    }
    if (m_scte35_pid_isSet) {
        obj.insert(QString("Scte35Pid"), ::OpenAPI::toJsonValue(m_scte35_pid));
    }
    if (m_scte35_source.isSet()) {
        obj.insert(QString("Scte35Source"), ::OpenAPI::toJsonValue(m_scte35_source));
    }
    if (m_segmentation_markers.isSet()) {
        obj.insert(QString("SegmentationMarkers"), ::OpenAPI::toJsonValue(m_segmentation_markers));
    }
    if (m_segmentation_style.isSet()) {
        obj.insert(QString("SegmentationStyle"), ::OpenAPI::toJsonValue(m_segmentation_style));
    }
    if (m_segmentation_time_isSet) {
        obj.insert(QString("SegmentationTime"), ::OpenAPI::toJsonValue(m_segmentation_time));
    }
    if (m_timed_metadata_pid_isSet) {
        obj.insert(QString("TimedMetadataPid"), ::OpenAPI::toJsonValue(m_timed_metadata_pid));
    }
    if (m_transport_stream_id_isSet) {
        obj.insert(QString("TransportStreamId"), ::OpenAPI::toJsonValue(m_transport_stream_id));
    }
    if (m_video_pid_isSet) {
        obj.insert(QString("VideoPid"), ::OpenAPI::toJsonValue(m_video_pid));
    }
    return obj;
}

OAIM2tsAudioBufferModel OAIM2tsSettings::getAudioBufferModel() const {
    return m_audio_buffer_model;
}
void OAIM2tsSettings::setAudioBufferModel(const OAIM2tsAudioBufferModel &audio_buffer_model) {
    m_audio_buffer_model = audio_buffer_model;
    m_audio_buffer_model_isSet = true;
}

bool OAIM2tsSettings::is_audio_buffer_model_Set() const{
    return m_audio_buffer_model_isSet;
}

bool OAIM2tsSettings::is_audio_buffer_model_Valid() const{
    return m_audio_buffer_model_isValid;
}

OAIM2tsAudioDuration OAIM2tsSettings::getAudioDuration() const {
    return m_audio_duration;
}
void OAIM2tsSettings::setAudioDuration(const OAIM2tsAudioDuration &audio_duration) {
    m_audio_duration = audio_duration;
    m_audio_duration_isSet = true;
}

bool OAIM2tsSettings::is_audio_duration_Set() const{
    return m_audio_duration_isSet;
}

bool OAIM2tsSettings::is_audio_duration_Valid() const{
    return m_audio_duration_isValid;
}

qint32 OAIM2tsSettings::getAudioFramesPerPes() const {
    return m_audio_frames_per_pes;
}
void OAIM2tsSettings::setAudioFramesPerPes(const qint32 &audio_frames_per_pes) {
    m_audio_frames_per_pes = audio_frames_per_pes;
    m_audio_frames_per_pes_isSet = true;
}

bool OAIM2tsSettings::is_audio_frames_per_pes_Set() const{
    return m_audio_frames_per_pes_isSet;
}

bool OAIM2tsSettings::is_audio_frames_per_pes_Valid() const{
    return m_audio_frames_per_pes_isValid;
}

QList OAIM2tsSettings::getAudioPids() const {
    return m_audio_pids;
}
void OAIM2tsSettings::setAudioPids(const QList &audio_pids) {
    m_audio_pids = audio_pids;
    m_audio_pids_isSet = true;
}

bool OAIM2tsSettings::is_audio_pids_Set() const{
    return m_audio_pids_isSet;
}

bool OAIM2tsSettings::is_audio_pids_Valid() const{
    return m_audio_pids_isValid;
}

qint32 OAIM2tsSettings::getBitrate() const {
    return m_bitrate;
}
void OAIM2tsSettings::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIM2tsSettings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIM2tsSettings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIM2tsBufferModel OAIM2tsSettings::getBufferModel() const {
    return m_buffer_model;
}
void OAIM2tsSettings::setBufferModel(const OAIM2tsBufferModel &buffer_model) {
    m_buffer_model = buffer_model;
    m_buffer_model_isSet = true;
}

bool OAIM2tsSettings::is_buffer_model_Set() const{
    return m_buffer_model_isSet;
}

bool OAIM2tsSettings::is_buffer_model_Valid() const{
    return m_buffer_model_isValid;
}

OAIM2tsDataPtsControl OAIM2tsSettings::getDataPtsControl() const {
    return m_data_pts_control;
}
void OAIM2tsSettings::setDataPtsControl(const OAIM2tsDataPtsControl &data_pts_control) {
    m_data_pts_control = data_pts_control;
    m_data_pts_control_isSet = true;
}

bool OAIM2tsSettings::is_data_pts_control_Set() const{
    return m_data_pts_control_isSet;
}

bool OAIM2tsSettings::is_data_pts_control_Valid() const{
    return m_data_pts_control_isValid;
}

OAIM2tsSettings_DvbNitSettings OAIM2tsSettings::getDvbNitSettings() const {
    return m_dvb_nit_settings;
}
void OAIM2tsSettings::setDvbNitSettings(const OAIM2tsSettings_DvbNitSettings &dvb_nit_settings) {
    m_dvb_nit_settings = dvb_nit_settings;
    m_dvb_nit_settings_isSet = true;
}

bool OAIM2tsSettings::is_dvb_nit_settings_Set() const{
    return m_dvb_nit_settings_isSet;
}

bool OAIM2tsSettings::is_dvb_nit_settings_Valid() const{
    return m_dvb_nit_settings_isValid;
}

OAIM2tsSettings_DvbSdtSettings OAIM2tsSettings::getDvbSdtSettings() const {
    return m_dvb_sdt_settings;
}
void OAIM2tsSettings::setDvbSdtSettings(const OAIM2tsSettings_DvbSdtSettings &dvb_sdt_settings) {
    m_dvb_sdt_settings = dvb_sdt_settings;
    m_dvb_sdt_settings_isSet = true;
}

bool OAIM2tsSettings::is_dvb_sdt_settings_Set() const{
    return m_dvb_sdt_settings_isSet;
}

bool OAIM2tsSettings::is_dvb_sdt_settings_Valid() const{
    return m_dvb_sdt_settings_isValid;
}

QList OAIM2tsSettings::getDvbSubPids() const {
    return m_dvb_sub_pids;
}
void OAIM2tsSettings::setDvbSubPids(const QList &dvb_sub_pids) {
    m_dvb_sub_pids = dvb_sub_pids;
    m_dvb_sub_pids_isSet = true;
}

bool OAIM2tsSettings::is_dvb_sub_pids_Set() const{
    return m_dvb_sub_pids_isSet;
}

bool OAIM2tsSettings::is_dvb_sub_pids_Valid() const{
    return m_dvb_sub_pids_isValid;
}

OAIM2tsSettings_DvbTdtSettings OAIM2tsSettings::getDvbTdtSettings() const {
    return m_dvb_tdt_settings;
}
void OAIM2tsSettings::setDvbTdtSettings(const OAIM2tsSettings_DvbTdtSettings &dvb_tdt_settings) {
    m_dvb_tdt_settings = dvb_tdt_settings;
    m_dvb_tdt_settings_isSet = true;
}

bool OAIM2tsSettings::is_dvb_tdt_settings_Set() const{
    return m_dvb_tdt_settings_isSet;
}

bool OAIM2tsSettings::is_dvb_tdt_settings_Valid() const{
    return m_dvb_tdt_settings_isValid;
}

qint32 OAIM2tsSettings::getDvbTeletextPid() const {
    return m_dvb_teletext_pid;
}
void OAIM2tsSettings::setDvbTeletextPid(const qint32 &dvb_teletext_pid) {
    m_dvb_teletext_pid = dvb_teletext_pid;
    m_dvb_teletext_pid_isSet = true;
}

bool OAIM2tsSettings::is_dvb_teletext_pid_Set() const{
    return m_dvb_teletext_pid_isSet;
}

bool OAIM2tsSettings::is_dvb_teletext_pid_Valid() const{
    return m_dvb_teletext_pid_isValid;
}

OAIM2tsEbpAudioInterval OAIM2tsSettings::getEbpAudioInterval() const {
    return m_ebp_audio_interval;
}
void OAIM2tsSettings::setEbpAudioInterval(const OAIM2tsEbpAudioInterval &ebp_audio_interval) {
    m_ebp_audio_interval = ebp_audio_interval;
    m_ebp_audio_interval_isSet = true;
}

bool OAIM2tsSettings::is_ebp_audio_interval_Set() const{
    return m_ebp_audio_interval_isSet;
}

bool OAIM2tsSettings::is_ebp_audio_interval_Valid() const{
    return m_ebp_audio_interval_isValid;
}

OAIM2tsEbpPlacement OAIM2tsSettings::getEbpPlacement() const {
    return m_ebp_placement;
}
void OAIM2tsSettings::setEbpPlacement(const OAIM2tsEbpPlacement &ebp_placement) {
    m_ebp_placement = ebp_placement;
    m_ebp_placement_isSet = true;
}

bool OAIM2tsSettings::is_ebp_placement_Set() const{
    return m_ebp_placement_isSet;
}

bool OAIM2tsSettings::is_ebp_placement_Valid() const{
    return m_ebp_placement_isValid;
}

OAIM2tsEsRateInPes OAIM2tsSettings::getEsRateInPes() const {
    return m_es_rate_in_pes;
}
void OAIM2tsSettings::setEsRateInPes(const OAIM2tsEsRateInPes &es_rate_in_pes) {
    m_es_rate_in_pes = es_rate_in_pes;
    m_es_rate_in_pes_isSet = true;
}

bool OAIM2tsSettings::is_es_rate_in_pes_Set() const{
    return m_es_rate_in_pes_isSet;
}

bool OAIM2tsSettings::is_es_rate_in_pes_Valid() const{
    return m_es_rate_in_pes_isValid;
}

OAIM2tsForceTsVideoEbpOrder OAIM2tsSettings::getForceTsVideoEbpOrder() const {
    return m_force_ts_video_ebp_order;
}
void OAIM2tsSettings::setForceTsVideoEbpOrder(const OAIM2tsForceTsVideoEbpOrder &force_ts_video_ebp_order) {
    m_force_ts_video_ebp_order = force_ts_video_ebp_order;
    m_force_ts_video_ebp_order_isSet = true;
}

bool OAIM2tsSettings::is_force_ts_video_ebp_order_Set() const{
    return m_force_ts_video_ebp_order_isSet;
}

bool OAIM2tsSettings::is_force_ts_video_ebp_order_Valid() const{
    return m_force_ts_video_ebp_order_isValid;
}

double OAIM2tsSettings::getFragmentTime() const {
    return m_fragment_time;
}
void OAIM2tsSettings::setFragmentTime(const double &fragment_time) {
    m_fragment_time = fragment_time;
    m_fragment_time_isSet = true;
}

bool OAIM2tsSettings::is_fragment_time_Set() const{
    return m_fragment_time_isSet;
}

bool OAIM2tsSettings::is_fragment_time_Valid() const{
    return m_fragment_time_isValid;
}

OAIM2tsKlvMetadata OAIM2tsSettings::getKlvMetadata() const {
    return m_klv_metadata;
}
void OAIM2tsSettings::setKlvMetadata(const OAIM2tsKlvMetadata &klv_metadata) {
    m_klv_metadata = klv_metadata;
    m_klv_metadata_isSet = true;
}

bool OAIM2tsSettings::is_klv_metadata_Set() const{
    return m_klv_metadata_isSet;
}

bool OAIM2tsSettings::is_klv_metadata_Valid() const{
    return m_klv_metadata_isValid;
}

qint32 OAIM2tsSettings::getMaxPcrInterval() const {
    return m_max_pcr_interval;
}
void OAIM2tsSettings::setMaxPcrInterval(const qint32 &max_pcr_interval) {
    m_max_pcr_interval = max_pcr_interval;
    m_max_pcr_interval_isSet = true;
}

bool OAIM2tsSettings::is_max_pcr_interval_Set() const{
    return m_max_pcr_interval_isSet;
}

bool OAIM2tsSettings::is_max_pcr_interval_Valid() const{
    return m_max_pcr_interval_isValid;
}

qint32 OAIM2tsSettings::getMinEbpInterval() const {
    return m_min_ebp_interval;
}
void OAIM2tsSettings::setMinEbpInterval(const qint32 &min_ebp_interval) {
    m_min_ebp_interval = min_ebp_interval;
    m_min_ebp_interval_isSet = true;
}

bool OAIM2tsSettings::is_min_ebp_interval_Set() const{
    return m_min_ebp_interval_isSet;
}

bool OAIM2tsSettings::is_min_ebp_interval_Valid() const{
    return m_min_ebp_interval_isValid;
}

OAIM2tsNielsenId3 OAIM2tsSettings::getNielsenId3() const {
    return m_nielsen_id3;
}
void OAIM2tsSettings::setNielsenId3(const OAIM2tsNielsenId3 &nielsen_id3) {
    m_nielsen_id3 = nielsen_id3;
    m_nielsen_id3_isSet = true;
}

bool OAIM2tsSettings::is_nielsen_id3_Set() const{
    return m_nielsen_id3_isSet;
}

bool OAIM2tsSettings::is_nielsen_id3_Valid() const{
    return m_nielsen_id3_isValid;
}

double OAIM2tsSettings::getNullPacketBitrate() const {
    return m_null_packet_bitrate;
}
void OAIM2tsSettings::setNullPacketBitrate(const double &null_packet_bitrate) {
    m_null_packet_bitrate = null_packet_bitrate;
    m_null_packet_bitrate_isSet = true;
}

bool OAIM2tsSettings::is_null_packet_bitrate_Set() const{
    return m_null_packet_bitrate_isSet;
}

bool OAIM2tsSettings::is_null_packet_bitrate_Valid() const{
    return m_null_packet_bitrate_isValid;
}

qint32 OAIM2tsSettings::getPatInterval() const {
    return m_pat_interval;
}
void OAIM2tsSettings::setPatInterval(const qint32 &pat_interval) {
    m_pat_interval = pat_interval;
    m_pat_interval_isSet = true;
}

bool OAIM2tsSettings::is_pat_interval_Set() const{
    return m_pat_interval_isSet;
}

bool OAIM2tsSettings::is_pat_interval_Valid() const{
    return m_pat_interval_isValid;
}

OAIM2tsPcrControl OAIM2tsSettings::getPcrControl() const {
    return m_pcr_control;
}
void OAIM2tsSettings::setPcrControl(const OAIM2tsPcrControl &pcr_control) {
    m_pcr_control = pcr_control;
    m_pcr_control_isSet = true;
}

bool OAIM2tsSettings::is_pcr_control_Set() const{
    return m_pcr_control_isSet;
}

bool OAIM2tsSettings::is_pcr_control_Valid() const{
    return m_pcr_control_isValid;
}

qint32 OAIM2tsSettings::getPcrPid() const {
    return m_pcr_pid;
}
void OAIM2tsSettings::setPcrPid(const qint32 &pcr_pid) {
    m_pcr_pid = pcr_pid;
    m_pcr_pid_isSet = true;
}

bool OAIM2tsSettings::is_pcr_pid_Set() const{
    return m_pcr_pid_isSet;
}

bool OAIM2tsSettings::is_pcr_pid_Valid() const{
    return m_pcr_pid_isValid;
}

qint32 OAIM2tsSettings::getPmtInterval() const {
    return m_pmt_interval;
}
void OAIM2tsSettings::setPmtInterval(const qint32 &pmt_interval) {
    m_pmt_interval = pmt_interval;
    m_pmt_interval_isSet = true;
}

bool OAIM2tsSettings::is_pmt_interval_Set() const{
    return m_pmt_interval_isSet;
}

bool OAIM2tsSettings::is_pmt_interval_Valid() const{
    return m_pmt_interval_isValid;
}

qint32 OAIM2tsSettings::getPmtPid() const {
    return m_pmt_pid;
}
void OAIM2tsSettings::setPmtPid(const qint32 &pmt_pid) {
    m_pmt_pid = pmt_pid;
    m_pmt_pid_isSet = true;
}

bool OAIM2tsSettings::is_pmt_pid_Set() const{
    return m_pmt_pid_isSet;
}

bool OAIM2tsSettings::is_pmt_pid_Valid() const{
    return m_pmt_pid_isValid;
}

qint32 OAIM2tsSettings::getPrivateMetadataPid() const {
    return m_private_metadata_pid;
}
void OAIM2tsSettings::setPrivateMetadataPid(const qint32 &private_metadata_pid) {
    m_private_metadata_pid = private_metadata_pid;
    m_private_metadata_pid_isSet = true;
}

bool OAIM2tsSettings::is_private_metadata_pid_Set() const{
    return m_private_metadata_pid_isSet;
}

bool OAIM2tsSettings::is_private_metadata_pid_Valid() const{
    return m_private_metadata_pid_isValid;
}

qint32 OAIM2tsSettings::getProgramNumber() const {
    return m_program_number;
}
void OAIM2tsSettings::setProgramNumber(const qint32 &program_number) {
    m_program_number = program_number;
    m_program_number_isSet = true;
}

bool OAIM2tsSettings::is_program_number_Set() const{
    return m_program_number_isSet;
}

bool OAIM2tsSettings::is_program_number_Valid() const{
    return m_program_number_isValid;
}

OAIM2tsRateMode OAIM2tsSettings::getRateMode() const {
    return m_rate_mode;
}
void OAIM2tsSettings::setRateMode(const OAIM2tsRateMode &rate_mode) {
    m_rate_mode = rate_mode;
    m_rate_mode_isSet = true;
}

bool OAIM2tsSettings::is_rate_mode_Set() const{
    return m_rate_mode_isSet;
}

bool OAIM2tsSettings::is_rate_mode_Valid() const{
    return m_rate_mode_isValid;
}

OAIM2tsSettings_Scte35Esam OAIM2tsSettings::getScte35Esam() const {
    return m_scte35_esam;
}
void OAIM2tsSettings::setScte35Esam(const OAIM2tsSettings_Scte35Esam &scte35_esam) {
    m_scte35_esam = scte35_esam;
    m_scte35_esam_isSet = true;
}

bool OAIM2tsSettings::is_scte35_esam_Set() const{
    return m_scte35_esam_isSet;
}

bool OAIM2tsSettings::is_scte35_esam_Valid() const{
    return m_scte35_esam_isValid;
}

qint32 OAIM2tsSettings::getScte35Pid() const {
    return m_scte35_pid;
}
void OAIM2tsSettings::setScte35Pid(const qint32 &scte35_pid) {
    m_scte35_pid = scte35_pid;
    m_scte35_pid_isSet = true;
}

bool OAIM2tsSettings::is_scte35_pid_Set() const{
    return m_scte35_pid_isSet;
}

bool OAIM2tsSettings::is_scte35_pid_Valid() const{
    return m_scte35_pid_isValid;
}

OAIM2tsScte35Source OAIM2tsSettings::getScte35Source() const {
    return m_scte35_source;
}
void OAIM2tsSettings::setScte35Source(const OAIM2tsScte35Source &scte35_source) {
    m_scte35_source = scte35_source;
    m_scte35_source_isSet = true;
}

bool OAIM2tsSettings::is_scte35_source_Set() const{
    return m_scte35_source_isSet;
}

bool OAIM2tsSettings::is_scte35_source_Valid() const{
    return m_scte35_source_isValid;
}

OAIM2tsSegmentationMarkers OAIM2tsSettings::getSegmentationMarkers() const {
    return m_segmentation_markers;
}
void OAIM2tsSettings::setSegmentationMarkers(const OAIM2tsSegmentationMarkers &segmentation_markers) {
    m_segmentation_markers = segmentation_markers;
    m_segmentation_markers_isSet = true;
}

bool OAIM2tsSettings::is_segmentation_markers_Set() const{
    return m_segmentation_markers_isSet;
}

bool OAIM2tsSettings::is_segmentation_markers_Valid() const{
    return m_segmentation_markers_isValid;
}

OAIM2tsSegmentationStyle OAIM2tsSettings::getSegmentationStyle() const {
    return m_segmentation_style;
}
void OAIM2tsSettings::setSegmentationStyle(const OAIM2tsSegmentationStyle &segmentation_style) {
    m_segmentation_style = segmentation_style;
    m_segmentation_style_isSet = true;
}

bool OAIM2tsSettings::is_segmentation_style_Set() const{
    return m_segmentation_style_isSet;
}

bool OAIM2tsSettings::is_segmentation_style_Valid() const{
    return m_segmentation_style_isValid;
}

double OAIM2tsSettings::getSegmentationTime() const {
    return m_segmentation_time;
}
void OAIM2tsSettings::setSegmentationTime(const double &segmentation_time) {
    m_segmentation_time = segmentation_time;
    m_segmentation_time_isSet = true;
}

bool OAIM2tsSettings::is_segmentation_time_Set() const{
    return m_segmentation_time_isSet;
}

bool OAIM2tsSettings::is_segmentation_time_Valid() const{
    return m_segmentation_time_isValid;
}

qint32 OAIM2tsSettings::getTimedMetadataPid() const {
    return m_timed_metadata_pid;
}
void OAIM2tsSettings::setTimedMetadataPid(const qint32 &timed_metadata_pid) {
    m_timed_metadata_pid = timed_metadata_pid;
    m_timed_metadata_pid_isSet = true;
}

bool OAIM2tsSettings::is_timed_metadata_pid_Set() const{
    return m_timed_metadata_pid_isSet;
}

bool OAIM2tsSettings::is_timed_metadata_pid_Valid() const{
    return m_timed_metadata_pid_isValid;
}

qint32 OAIM2tsSettings::getTransportStreamId() const {
    return m_transport_stream_id;
}
void OAIM2tsSettings::setTransportStreamId(const qint32 &transport_stream_id) {
    m_transport_stream_id = transport_stream_id;
    m_transport_stream_id_isSet = true;
}

bool OAIM2tsSettings::is_transport_stream_id_Set() const{
    return m_transport_stream_id_isSet;
}

bool OAIM2tsSettings::is_transport_stream_id_Valid() const{
    return m_transport_stream_id_isValid;
}

qint32 OAIM2tsSettings::getVideoPid() const {
    return m_video_pid;
}
void OAIM2tsSettings::setVideoPid(const qint32 &video_pid) {
    m_video_pid = video_pid;
    m_video_pid_isSet = true;
}

bool OAIM2tsSettings::is_video_pid_Set() const{
    return m_video_pid_isSet;
}

bool OAIM2tsSettings::is_video_pid_Valid() const{
    return m_video_pid_isValid;
}

bool OAIM2tsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_buffer_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_frames_per_pes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_pids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffer_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pts_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_nit_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_sdt_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_sub_pids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_tdt_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_teletext_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebp_audio_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebp_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_es_rate_in_pes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_ts_video_ebp_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_klv_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pcr_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_ebp_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_id3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_packet_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pat_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcr_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcr_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pmt_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pmt_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_metadata_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_esam.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_markers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_pid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIM2tsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
