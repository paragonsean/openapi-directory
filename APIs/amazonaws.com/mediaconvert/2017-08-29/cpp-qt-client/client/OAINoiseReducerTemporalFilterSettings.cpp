/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINoiseReducerTemporalFilterSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINoiseReducerTemporalFilterSettings::OAINoiseReducerTemporalFilterSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINoiseReducerTemporalFilterSettings::OAINoiseReducerTemporalFilterSettings() {
    this->initializeModel();
}

OAINoiseReducerTemporalFilterSettings::~OAINoiseReducerTemporalFilterSettings() {}

void OAINoiseReducerTemporalFilterSettings::initializeModel() {

    m_aggressive_mode_isSet = false;
    m_aggressive_mode_isValid = false;

    m_post_temporal_sharpening_isSet = false;
    m_post_temporal_sharpening_isValid = false;

    m_post_temporal_sharpening_strength_isSet = false;
    m_post_temporal_sharpening_strength_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_strength_isSet = false;
    m_strength_isValid = false;
}

void OAINoiseReducerTemporalFilterSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINoiseReducerTemporalFilterSettings::fromJsonObject(QJsonObject json) {

    m_aggressive_mode_isValid = ::OpenAPI::fromJsonValue(m_aggressive_mode, json[QString("AggressiveMode")]);
    m_aggressive_mode_isSet = !json[QString("AggressiveMode")].isNull() && m_aggressive_mode_isValid;

    m_post_temporal_sharpening_isValid = ::OpenAPI::fromJsonValue(m_post_temporal_sharpening, json[QString("PostTemporalSharpening")]);
    m_post_temporal_sharpening_isSet = !json[QString("PostTemporalSharpening")].isNull() && m_post_temporal_sharpening_isValid;

    m_post_temporal_sharpening_strength_isValid = ::OpenAPI::fromJsonValue(m_post_temporal_sharpening_strength, json[QString("PostTemporalSharpeningStrength")]);
    m_post_temporal_sharpening_strength_isSet = !json[QString("PostTemporalSharpeningStrength")].isNull() && m_post_temporal_sharpening_strength_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("Speed")]);
    m_speed_isSet = !json[QString("Speed")].isNull() && m_speed_isValid;

    m_strength_isValid = ::OpenAPI::fromJsonValue(m_strength, json[QString("Strength")]);
    m_strength_isSet = !json[QString("Strength")].isNull() && m_strength_isValid;
}

QString OAINoiseReducerTemporalFilterSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINoiseReducerTemporalFilterSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_aggressive_mode_isSet) {
        obj.insert(QString("AggressiveMode"), ::OpenAPI::toJsonValue(m_aggressive_mode));
    }
    if (m_post_temporal_sharpening.isSet()) {
        obj.insert(QString("PostTemporalSharpening"), ::OpenAPI::toJsonValue(m_post_temporal_sharpening));
    }
    if (m_post_temporal_sharpening_strength.isSet()) {
        obj.insert(QString("PostTemporalSharpeningStrength"), ::OpenAPI::toJsonValue(m_post_temporal_sharpening_strength));
    }
    if (m_speed_isSet) {
        obj.insert(QString("Speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    if (m_strength_isSet) {
        obj.insert(QString("Strength"), ::OpenAPI::toJsonValue(m_strength));
    }
    return obj;
}

qint32 OAINoiseReducerTemporalFilterSettings::getAggressiveMode() const {
    return m_aggressive_mode;
}
void OAINoiseReducerTemporalFilterSettings::setAggressiveMode(const qint32 &aggressive_mode) {
    m_aggressive_mode = aggressive_mode;
    m_aggressive_mode_isSet = true;
}

bool OAINoiseReducerTemporalFilterSettings::is_aggressive_mode_Set() const{
    return m_aggressive_mode_isSet;
}

bool OAINoiseReducerTemporalFilterSettings::is_aggressive_mode_Valid() const{
    return m_aggressive_mode_isValid;
}

OAINoiseFilterPostTemporalSharpening OAINoiseReducerTemporalFilterSettings::getPostTemporalSharpening() const {
    return m_post_temporal_sharpening;
}
void OAINoiseReducerTemporalFilterSettings::setPostTemporalSharpening(const OAINoiseFilterPostTemporalSharpening &post_temporal_sharpening) {
    m_post_temporal_sharpening = post_temporal_sharpening;
    m_post_temporal_sharpening_isSet = true;
}

bool OAINoiseReducerTemporalFilterSettings::is_post_temporal_sharpening_Set() const{
    return m_post_temporal_sharpening_isSet;
}

bool OAINoiseReducerTemporalFilterSettings::is_post_temporal_sharpening_Valid() const{
    return m_post_temporal_sharpening_isValid;
}

OAINoiseFilterPostTemporalSharpeningStrength OAINoiseReducerTemporalFilterSettings::getPostTemporalSharpeningStrength() const {
    return m_post_temporal_sharpening_strength;
}
void OAINoiseReducerTemporalFilterSettings::setPostTemporalSharpeningStrength(const OAINoiseFilterPostTemporalSharpeningStrength &post_temporal_sharpening_strength) {
    m_post_temporal_sharpening_strength = post_temporal_sharpening_strength;
    m_post_temporal_sharpening_strength_isSet = true;
}

bool OAINoiseReducerTemporalFilterSettings::is_post_temporal_sharpening_strength_Set() const{
    return m_post_temporal_sharpening_strength_isSet;
}

bool OAINoiseReducerTemporalFilterSettings::is_post_temporal_sharpening_strength_Valid() const{
    return m_post_temporal_sharpening_strength_isValid;
}

qint32 OAINoiseReducerTemporalFilterSettings::getSpeed() const {
    return m_speed;
}
void OAINoiseReducerTemporalFilterSettings::setSpeed(const qint32 &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAINoiseReducerTemporalFilterSettings::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAINoiseReducerTemporalFilterSettings::is_speed_Valid() const{
    return m_speed_isValid;
}

qint32 OAINoiseReducerTemporalFilterSettings::getStrength() const {
    return m_strength;
}
void OAINoiseReducerTemporalFilterSettings::setStrength(const qint32 &strength) {
    m_strength = strength;
    m_strength_isSet = true;
}

bool OAINoiseReducerTemporalFilterSettings::is_strength_Set() const{
    return m_strength_isSet;
}

bool OAINoiseReducerTemporalFilterSettings::is_strength_Valid() const{
    return m_strength_isValid;
}

bool OAINoiseReducerTemporalFilterSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggressive_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_temporal_sharpening.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_temporal_sharpening_strength.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strength_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINoiseReducerTemporalFilterSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
