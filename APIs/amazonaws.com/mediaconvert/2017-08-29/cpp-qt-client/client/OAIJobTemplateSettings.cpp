/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobTemplateSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobTemplateSettings::OAIJobTemplateSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobTemplateSettings::OAIJobTemplateSettings() {
    this->initializeModel();
}

OAIJobTemplateSettings::~OAIJobTemplateSettings() {}

void OAIJobTemplateSettings::initializeModel() {

    m_ad_avail_offset_isSet = false;
    m_ad_avail_offset_isValid = false;

    m_avail_blanking_isSet = false;
    m_avail_blanking_isValid = false;

    m_esam_isSet = false;
    m_esam_isValid = false;

    m_extended_data_services_isSet = false;
    m_extended_data_services_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_kantar_watermark_isSet = false;
    m_kantar_watermark_isValid = false;

    m_motion_image_inserter_isSet = false;
    m_motion_image_inserter_isValid = false;

    m_nielsen_configuration_isSet = false;
    m_nielsen_configuration_isValid = false;

    m_nielsen_non_linear_watermark_isSet = false;
    m_nielsen_non_linear_watermark_isValid = false;

    m_output_groups_isSet = false;
    m_output_groups_isValid = false;

    m_timecode_config_isSet = false;
    m_timecode_config_isValid = false;

    m_timed_metadata_insertion_isSet = false;
    m_timed_metadata_insertion_isValid = false;
}

void OAIJobTemplateSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobTemplateSettings::fromJsonObject(QJsonObject json) {

    m_ad_avail_offset_isValid = ::OpenAPI::fromJsonValue(m_ad_avail_offset, json[QString("AdAvailOffset")]);
    m_ad_avail_offset_isSet = !json[QString("AdAvailOffset")].isNull() && m_ad_avail_offset_isValid;

    m_avail_blanking_isValid = ::OpenAPI::fromJsonValue(m_avail_blanking, json[QString("AvailBlanking")]);
    m_avail_blanking_isSet = !json[QString("AvailBlanking")].isNull() && m_avail_blanking_isValid;

    m_esam_isValid = ::OpenAPI::fromJsonValue(m_esam, json[QString("Esam")]);
    m_esam_isSet = !json[QString("Esam")].isNull() && m_esam_isValid;

    m_extended_data_services_isValid = ::OpenAPI::fromJsonValue(m_extended_data_services, json[QString("ExtendedDataServices")]);
    m_extended_data_services_isSet = !json[QString("ExtendedDataServices")].isNull() && m_extended_data_services_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_kantar_watermark_isValid = ::OpenAPI::fromJsonValue(m_kantar_watermark, json[QString("KantarWatermark")]);
    m_kantar_watermark_isSet = !json[QString("KantarWatermark")].isNull() && m_kantar_watermark_isValid;

    m_motion_image_inserter_isValid = ::OpenAPI::fromJsonValue(m_motion_image_inserter, json[QString("MotionImageInserter")]);
    m_motion_image_inserter_isSet = !json[QString("MotionImageInserter")].isNull() && m_motion_image_inserter_isValid;

    m_nielsen_configuration_isValid = ::OpenAPI::fromJsonValue(m_nielsen_configuration, json[QString("NielsenConfiguration")]);
    m_nielsen_configuration_isSet = !json[QString("NielsenConfiguration")].isNull() && m_nielsen_configuration_isValid;

    m_nielsen_non_linear_watermark_isValid = ::OpenAPI::fromJsonValue(m_nielsen_non_linear_watermark, json[QString("NielsenNonLinearWatermark")]);
    m_nielsen_non_linear_watermark_isSet = !json[QString("NielsenNonLinearWatermark")].isNull() && m_nielsen_non_linear_watermark_isValid;

    m_output_groups_isValid = ::OpenAPI::fromJsonValue(m_output_groups, json[QString("OutputGroups")]);
    m_output_groups_isSet = !json[QString("OutputGroups")].isNull() && m_output_groups_isValid;

    m_timecode_config_isValid = ::OpenAPI::fromJsonValue(m_timecode_config, json[QString("TimecodeConfig")]);
    m_timecode_config_isSet = !json[QString("TimecodeConfig")].isNull() && m_timecode_config_isValid;

    m_timed_metadata_insertion_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_insertion, json[QString("TimedMetadataInsertion")]);
    m_timed_metadata_insertion_isSet = !json[QString("TimedMetadataInsertion")].isNull() && m_timed_metadata_insertion_isValid;
}

QString OAIJobTemplateSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobTemplateSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_avail_offset_isSet) {
        obj.insert(QString("AdAvailOffset"), ::OpenAPI::toJsonValue(m_ad_avail_offset));
    }
    if (m_avail_blanking.isSet()) {
        obj.insert(QString("AvailBlanking"), ::OpenAPI::toJsonValue(m_avail_blanking));
    }
    if (m_esam.isSet()) {
        obj.insert(QString("Esam"), ::OpenAPI::toJsonValue(m_esam));
    }
    if (m_extended_data_services.isSet()) {
        obj.insert(QString("ExtendedDataServices"), ::OpenAPI::toJsonValue(m_extended_data_services));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_kantar_watermark.isSet()) {
        obj.insert(QString("KantarWatermark"), ::OpenAPI::toJsonValue(m_kantar_watermark));
    }
    if (m_motion_image_inserter.isSet()) {
        obj.insert(QString("MotionImageInserter"), ::OpenAPI::toJsonValue(m_motion_image_inserter));
    }
    if (m_nielsen_configuration.isSet()) {
        obj.insert(QString("NielsenConfiguration"), ::OpenAPI::toJsonValue(m_nielsen_configuration));
    }
    if (m_nielsen_non_linear_watermark.isSet()) {
        obj.insert(QString("NielsenNonLinearWatermark"), ::OpenAPI::toJsonValue(m_nielsen_non_linear_watermark));
    }
    if (m_output_groups.isSet()) {
        obj.insert(QString("OutputGroups"), ::OpenAPI::toJsonValue(m_output_groups));
    }
    if (m_timecode_config.isSet()) {
        obj.insert(QString("TimecodeConfig"), ::OpenAPI::toJsonValue(m_timecode_config));
    }
    if (m_timed_metadata_insertion.isSet()) {
        obj.insert(QString("TimedMetadataInsertion"), ::OpenAPI::toJsonValue(m_timed_metadata_insertion));
    }
    return obj;
}

qint32 OAIJobTemplateSettings::getAdAvailOffset() const {
    return m_ad_avail_offset;
}
void OAIJobTemplateSettings::setAdAvailOffset(const qint32 &ad_avail_offset) {
    m_ad_avail_offset = ad_avail_offset;
    m_ad_avail_offset_isSet = true;
}

bool OAIJobTemplateSettings::is_ad_avail_offset_Set() const{
    return m_ad_avail_offset_isSet;
}

bool OAIJobTemplateSettings::is_ad_avail_offset_Valid() const{
    return m_ad_avail_offset_isValid;
}

OAICreateJob_request_settings_AvailBlanking OAIJobTemplateSettings::getAvailBlanking() const {
    return m_avail_blanking;
}
void OAIJobTemplateSettings::setAvailBlanking(const OAICreateJob_request_settings_AvailBlanking &avail_blanking) {
    m_avail_blanking = avail_blanking;
    m_avail_blanking_isSet = true;
}

bool OAIJobTemplateSettings::is_avail_blanking_Set() const{
    return m_avail_blanking_isSet;
}

bool OAIJobTemplateSettings::is_avail_blanking_Valid() const{
    return m_avail_blanking_isValid;
}

OAICreateJob_request_settings_Esam OAIJobTemplateSettings::getEsam() const {
    return m_esam;
}
void OAIJobTemplateSettings::setEsam(const OAICreateJob_request_settings_Esam &esam) {
    m_esam = esam;
    m_esam_isSet = true;
}

bool OAIJobTemplateSettings::is_esam_Set() const{
    return m_esam_isSet;
}

bool OAIJobTemplateSettings::is_esam_Valid() const{
    return m_esam_isValid;
}

OAICreateJob_request_settings_ExtendedDataServices OAIJobTemplateSettings::getExtendedDataServices() const {
    return m_extended_data_services;
}
void OAIJobTemplateSettings::setExtendedDataServices(const OAICreateJob_request_settings_ExtendedDataServices &extended_data_services) {
    m_extended_data_services = extended_data_services;
    m_extended_data_services_isSet = true;
}

bool OAIJobTemplateSettings::is_extended_data_services_Set() const{
    return m_extended_data_services_isSet;
}

bool OAIJobTemplateSettings::is_extended_data_services_Valid() const{
    return m_extended_data_services_isValid;
}

QList OAIJobTemplateSettings::getInputs() const {
    return m_inputs;
}
void OAIJobTemplateSettings::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIJobTemplateSettings::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIJobTemplateSettings::is_inputs_Valid() const{
    return m_inputs_isValid;
}

OAICreateJob_request_settings_KantarWatermark OAIJobTemplateSettings::getKantarWatermark() const {
    return m_kantar_watermark;
}
void OAIJobTemplateSettings::setKantarWatermark(const OAICreateJob_request_settings_KantarWatermark &kantar_watermark) {
    m_kantar_watermark = kantar_watermark;
    m_kantar_watermark_isSet = true;
}

bool OAIJobTemplateSettings::is_kantar_watermark_Set() const{
    return m_kantar_watermark_isSet;
}

bool OAIJobTemplateSettings::is_kantar_watermark_Valid() const{
    return m_kantar_watermark_isValid;
}

OAICreateJob_request_settings_MotionImageInserter OAIJobTemplateSettings::getMotionImageInserter() const {
    return m_motion_image_inserter;
}
void OAIJobTemplateSettings::setMotionImageInserter(const OAICreateJob_request_settings_MotionImageInserter &motion_image_inserter) {
    m_motion_image_inserter = motion_image_inserter;
    m_motion_image_inserter_isSet = true;
}

bool OAIJobTemplateSettings::is_motion_image_inserter_Set() const{
    return m_motion_image_inserter_isSet;
}

bool OAIJobTemplateSettings::is_motion_image_inserter_Valid() const{
    return m_motion_image_inserter_isValid;
}

OAICreateJob_request_settings_NielsenConfiguration OAIJobTemplateSettings::getNielsenConfiguration() const {
    return m_nielsen_configuration;
}
void OAIJobTemplateSettings::setNielsenConfiguration(const OAICreateJob_request_settings_NielsenConfiguration &nielsen_configuration) {
    m_nielsen_configuration = nielsen_configuration;
    m_nielsen_configuration_isSet = true;
}

bool OAIJobTemplateSettings::is_nielsen_configuration_Set() const{
    return m_nielsen_configuration_isSet;
}

bool OAIJobTemplateSettings::is_nielsen_configuration_Valid() const{
    return m_nielsen_configuration_isValid;
}

OAICreateJob_request_settings_NielsenNonLinearWatermark OAIJobTemplateSettings::getNielsenNonLinearWatermark() const {
    return m_nielsen_non_linear_watermark;
}
void OAIJobTemplateSettings::setNielsenNonLinearWatermark(const OAICreateJob_request_settings_NielsenNonLinearWatermark &nielsen_non_linear_watermark) {
    m_nielsen_non_linear_watermark = nielsen_non_linear_watermark;
    m_nielsen_non_linear_watermark_isSet = true;
}

bool OAIJobTemplateSettings::is_nielsen_non_linear_watermark_Set() const{
    return m_nielsen_non_linear_watermark_isSet;
}

bool OAIJobTemplateSettings::is_nielsen_non_linear_watermark_Valid() const{
    return m_nielsen_non_linear_watermark_isValid;
}

QList OAIJobTemplateSettings::getOutputGroups() const {
    return m_output_groups;
}
void OAIJobTemplateSettings::setOutputGroups(const QList &output_groups) {
    m_output_groups = output_groups;
    m_output_groups_isSet = true;
}

bool OAIJobTemplateSettings::is_output_groups_Set() const{
    return m_output_groups_isSet;
}

bool OAIJobTemplateSettings::is_output_groups_Valid() const{
    return m_output_groups_isValid;
}

OAICreateJob_request_settings_TimecodeConfig OAIJobTemplateSettings::getTimecodeConfig() const {
    return m_timecode_config;
}
void OAIJobTemplateSettings::setTimecodeConfig(const OAICreateJob_request_settings_TimecodeConfig &timecode_config) {
    m_timecode_config = timecode_config;
    m_timecode_config_isSet = true;
}

bool OAIJobTemplateSettings::is_timecode_config_Set() const{
    return m_timecode_config_isSet;
}

bool OAIJobTemplateSettings::is_timecode_config_Valid() const{
    return m_timecode_config_isValid;
}

OAICreateJob_request_settings_TimedMetadataInsertion OAIJobTemplateSettings::getTimedMetadataInsertion() const {
    return m_timed_metadata_insertion;
}
void OAIJobTemplateSettings::setTimedMetadataInsertion(const OAICreateJob_request_settings_TimedMetadataInsertion &timed_metadata_insertion) {
    m_timed_metadata_insertion = timed_metadata_insertion;
    m_timed_metadata_insertion_isSet = true;
}

bool OAIJobTemplateSettings::is_timed_metadata_insertion_Set() const{
    return m_timed_metadata_insertion_isSet;
}

bool OAIJobTemplateSettings::is_timed_metadata_insertion_Valid() const{
    return m_timed_metadata_insertion_isValid;
}

bool OAIJobTemplateSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_avail_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_blanking.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_esam.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_data_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kantar_watermark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_image_inserter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_non_linear_watermark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_insertion.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobTemplateSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
