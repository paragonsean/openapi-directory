/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHlsSettings.h
 *
 * Settings for HLS output groups
 */

#ifndef OAIHlsSettings_H
#define OAIHlsSettings_H

#include <QJsonObject>

#include "OAIHlsAudioOnlyContainer.h"
#include "OAIHlsAudioTrackType.h"
#include "OAIHlsDescriptiveVideoServiceFlag.h"
#include "OAIHlsIFrameOnlyManifest.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHlsSettings : public OAIObject {
public:
    OAIHlsSettings();
    OAIHlsSettings(QString json);
    ~OAIHlsSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAudioGroupId() const;
    void setAudioGroupId(const QString &audio_group_id);
    bool is_audio_group_id_Set() const;
    bool is_audio_group_id_Valid() const;

    OAIHlsAudioOnlyContainer getAudioOnlyContainer() const;
    void setAudioOnlyContainer(const OAIHlsAudioOnlyContainer &audio_only_container);
    bool is_audio_only_container_Set() const;
    bool is_audio_only_container_Valid() const;

    QString getAudioRenditionSets() const;
    void setAudioRenditionSets(const QString &audio_rendition_sets);
    bool is_audio_rendition_sets_Set() const;
    bool is_audio_rendition_sets_Valid() const;

    OAIHlsAudioTrackType getAudioTrackType() const;
    void setAudioTrackType(const OAIHlsAudioTrackType &audio_track_type);
    bool is_audio_track_type_Set() const;
    bool is_audio_track_type_Valid() const;

    OAIHlsDescriptiveVideoServiceFlag getDescriptiveVideoServiceFlag() const;
    void setDescriptiveVideoServiceFlag(const OAIHlsDescriptiveVideoServiceFlag &descriptive_video_service_flag);
    bool is_descriptive_video_service_flag_Set() const;
    bool is_descriptive_video_service_flag_Valid() const;

    OAIHlsIFrameOnlyManifest getIFrameOnlyManifest() const;
    void setIFrameOnlyManifest(const OAIHlsIFrameOnlyManifest &i_frame_only_manifest);
    bool is_i_frame_only_manifest_Set() const;
    bool is_i_frame_only_manifest_Valid() const;

    QString getSegmentModifier() const;
    void setSegmentModifier(const QString &segment_modifier);
    bool is_segment_modifier_Set() const;
    bool is_segment_modifier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audio_group_id;
    bool m_audio_group_id_isSet;
    bool m_audio_group_id_isValid;

    OAIHlsAudioOnlyContainer m_audio_only_container;
    bool m_audio_only_container_isSet;
    bool m_audio_only_container_isValid;

    QString m_audio_rendition_sets;
    bool m_audio_rendition_sets_isSet;
    bool m_audio_rendition_sets_isValid;

    OAIHlsAudioTrackType m_audio_track_type;
    bool m_audio_track_type_isSet;
    bool m_audio_track_type_isValid;

    OAIHlsDescriptiveVideoServiceFlag m_descriptive_video_service_flag;
    bool m_descriptive_video_service_flag_isSet;
    bool m_descriptive_video_service_flag_isValid;

    OAIHlsIFrameOnlyManifest m_i_frame_only_manifest;
    bool m_i_frame_only_manifest_isSet;
    bool m_i_frame_only_manifest_isValid;

    QString m_segment_modifier;
    bool m_segment_modifier_isSet;
    bool m_segment_modifier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHlsSettings)

#endif // OAIHlsSettings_H
