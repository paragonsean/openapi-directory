/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoCodec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoCodec::OAIVideoCodec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoCodec::OAIVideoCodec() {
    this->initializeModel();
}

OAIVideoCodec::~OAIVideoCodec() {}

void OAIVideoCodec::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVideoCodec::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVideoCodec::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AV1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::AV1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVC_INTRA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::AVC_INTRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FRAME_CAPTURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::FRAME_CAPTURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H_264", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::H_264;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H_265", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::H_265;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MPEG2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::MPEG2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PASSTHROUGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::PASSTHROUGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRORES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::PRORES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VC3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::VC3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VP8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::VP8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VP9", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::VP9;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XAVC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideoCodec::XAVC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVideoCodec::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVideoCodec::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVideoCodec::AV1:
            val = "AV1";
            break;
        case eOAIVideoCodec::AVC_INTRA:
            val = "AVC_INTRA";
            break;
        case eOAIVideoCodec::FRAME_CAPTURE:
            val = "FRAME_CAPTURE";
            break;
        case eOAIVideoCodec::H_264:
            val = "H_264";
            break;
        case eOAIVideoCodec::H_265:
            val = "H_265";
            break;
        case eOAIVideoCodec::MPEG2:
            val = "MPEG2";
            break;
        case eOAIVideoCodec::PASSTHROUGH:
            val = "PASSTHROUGH";
            break;
        case eOAIVideoCodec::PRORES:
            val = "PRORES";
            break;
        case eOAIVideoCodec::VC3:
            val = "VC3";
            break;
        case eOAIVideoCodec::VP8:
            val = "VP8";
            break;
        case eOAIVideoCodec::VP9:
            val = "VP9";
            break;
        case eOAIVideoCodec::XAVC:
            val = "XAVC";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVideoCodec::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVideoCodec::eOAIVideoCodec OAIVideoCodec::getValue() const {
    return m_value;
}

void OAIVideoCodec::setValue(const OAIVideoCodec::eOAIVideoCodec& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVideoCodec::isSet() const {
    
    return m_value_isSet;
}

bool OAIVideoCodec::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
