/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXavcHdProfileSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXavcHdProfileSettings::OAIXavcHdProfileSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXavcHdProfileSettings::OAIXavcHdProfileSettings() {
    this->initializeModel();
}

OAIXavcHdProfileSettings::~OAIXavcHdProfileSettings() {}

void OAIXavcHdProfileSettings::initializeModel() {

    m_bitrate_class_isSet = false;
    m_bitrate_class_isValid = false;

    m_flicker_adaptive_quantization_isSet = false;
    m_flicker_adaptive_quantization_isValid = false;

    m_gop_b_reference_isSet = false;
    m_gop_b_reference_isValid = false;

    m_gop_closed_cadence_isSet = false;
    m_gop_closed_cadence_isValid = false;

    m_hrd_buffer_size_isSet = false;
    m_hrd_buffer_size_isValid = false;

    m_interlace_mode_isSet = false;
    m_interlace_mode_isValid = false;

    m_quality_tuning_level_isSet = false;
    m_quality_tuning_level_isValid = false;

    m_slices_isSet = false;
    m_slices_isValid = false;

    m_telecine_isSet = false;
    m_telecine_isValid = false;
}

void OAIXavcHdProfileSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXavcHdProfileSettings::fromJsonObject(QJsonObject json) {

    m_bitrate_class_isValid = ::OpenAPI::fromJsonValue(m_bitrate_class, json[QString("BitrateClass")]);
    m_bitrate_class_isSet = !json[QString("BitrateClass")].isNull() && m_bitrate_class_isValid;

    m_flicker_adaptive_quantization_isValid = ::OpenAPI::fromJsonValue(m_flicker_adaptive_quantization, json[QString("FlickerAdaptiveQuantization")]);
    m_flicker_adaptive_quantization_isSet = !json[QString("FlickerAdaptiveQuantization")].isNull() && m_flicker_adaptive_quantization_isValid;

    m_gop_b_reference_isValid = ::OpenAPI::fromJsonValue(m_gop_b_reference, json[QString("GopBReference")]);
    m_gop_b_reference_isSet = !json[QString("GopBReference")].isNull() && m_gop_b_reference_isValid;

    m_gop_closed_cadence_isValid = ::OpenAPI::fromJsonValue(m_gop_closed_cadence, json[QString("GopClosedCadence")]);
    m_gop_closed_cadence_isSet = !json[QString("GopClosedCadence")].isNull() && m_gop_closed_cadence_isValid;

    m_hrd_buffer_size_isValid = ::OpenAPI::fromJsonValue(m_hrd_buffer_size, json[QString("HrdBufferSize")]);
    m_hrd_buffer_size_isSet = !json[QString("HrdBufferSize")].isNull() && m_hrd_buffer_size_isValid;

    m_interlace_mode_isValid = ::OpenAPI::fromJsonValue(m_interlace_mode, json[QString("InterlaceMode")]);
    m_interlace_mode_isSet = !json[QString("InterlaceMode")].isNull() && m_interlace_mode_isValid;

    m_quality_tuning_level_isValid = ::OpenAPI::fromJsonValue(m_quality_tuning_level, json[QString("QualityTuningLevel")]);
    m_quality_tuning_level_isSet = !json[QString("QualityTuningLevel")].isNull() && m_quality_tuning_level_isValid;

    m_slices_isValid = ::OpenAPI::fromJsonValue(m_slices, json[QString("Slices")]);
    m_slices_isSet = !json[QString("Slices")].isNull() && m_slices_isValid;

    m_telecine_isValid = ::OpenAPI::fromJsonValue(m_telecine, json[QString("Telecine")]);
    m_telecine_isSet = !json[QString("Telecine")].isNull() && m_telecine_isValid;
}

QString OAIXavcHdProfileSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXavcHdProfileSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_class.isSet()) {
        obj.insert(QString("BitrateClass"), ::OpenAPI::toJsonValue(m_bitrate_class));
    }
    if (m_flicker_adaptive_quantization.isSet()) {
        obj.insert(QString("FlickerAdaptiveQuantization"), ::OpenAPI::toJsonValue(m_flicker_adaptive_quantization));
    }
    if (m_gop_b_reference.isSet()) {
        obj.insert(QString("GopBReference"), ::OpenAPI::toJsonValue(m_gop_b_reference));
    }
    if (m_gop_closed_cadence_isSet) {
        obj.insert(QString("GopClosedCadence"), ::OpenAPI::toJsonValue(m_gop_closed_cadence));
    }
    if (m_hrd_buffer_size_isSet) {
        obj.insert(QString("HrdBufferSize"), ::OpenAPI::toJsonValue(m_hrd_buffer_size));
    }
    if (m_interlace_mode.isSet()) {
        obj.insert(QString("InterlaceMode"), ::OpenAPI::toJsonValue(m_interlace_mode));
    }
    if (m_quality_tuning_level.isSet()) {
        obj.insert(QString("QualityTuningLevel"), ::OpenAPI::toJsonValue(m_quality_tuning_level));
    }
    if (m_slices_isSet) {
        obj.insert(QString("Slices"), ::OpenAPI::toJsonValue(m_slices));
    }
    if (m_telecine.isSet()) {
        obj.insert(QString("Telecine"), ::OpenAPI::toJsonValue(m_telecine));
    }
    return obj;
}

OAIXavcHdProfileBitrateClass OAIXavcHdProfileSettings::getBitrateClass() const {
    return m_bitrate_class;
}
void OAIXavcHdProfileSettings::setBitrateClass(const OAIXavcHdProfileBitrateClass &bitrate_class) {
    m_bitrate_class = bitrate_class;
    m_bitrate_class_isSet = true;
}

bool OAIXavcHdProfileSettings::is_bitrate_class_Set() const{
    return m_bitrate_class_isSet;
}

bool OAIXavcHdProfileSettings::is_bitrate_class_Valid() const{
    return m_bitrate_class_isValid;
}

OAIXavcFlickerAdaptiveQuantization OAIXavcHdProfileSettings::getFlickerAdaptiveQuantization() const {
    return m_flicker_adaptive_quantization;
}
void OAIXavcHdProfileSettings::setFlickerAdaptiveQuantization(const OAIXavcFlickerAdaptiveQuantization &flicker_adaptive_quantization) {
    m_flicker_adaptive_quantization = flicker_adaptive_quantization;
    m_flicker_adaptive_quantization_isSet = true;
}

bool OAIXavcHdProfileSettings::is_flicker_adaptive_quantization_Set() const{
    return m_flicker_adaptive_quantization_isSet;
}

bool OAIXavcHdProfileSettings::is_flicker_adaptive_quantization_Valid() const{
    return m_flicker_adaptive_quantization_isValid;
}

OAIXavcGopBReference OAIXavcHdProfileSettings::getGopBReference() const {
    return m_gop_b_reference;
}
void OAIXavcHdProfileSettings::setGopBReference(const OAIXavcGopBReference &gop_b_reference) {
    m_gop_b_reference = gop_b_reference;
    m_gop_b_reference_isSet = true;
}

bool OAIXavcHdProfileSettings::is_gop_b_reference_Set() const{
    return m_gop_b_reference_isSet;
}

bool OAIXavcHdProfileSettings::is_gop_b_reference_Valid() const{
    return m_gop_b_reference_isValid;
}

qint32 OAIXavcHdProfileSettings::getGopClosedCadence() const {
    return m_gop_closed_cadence;
}
void OAIXavcHdProfileSettings::setGopClosedCadence(const qint32 &gop_closed_cadence) {
    m_gop_closed_cadence = gop_closed_cadence;
    m_gop_closed_cadence_isSet = true;
}

bool OAIXavcHdProfileSettings::is_gop_closed_cadence_Set() const{
    return m_gop_closed_cadence_isSet;
}

bool OAIXavcHdProfileSettings::is_gop_closed_cadence_Valid() const{
    return m_gop_closed_cadence_isValid;
}

qint32 OAIXavcHdProfileSettings::getHrdBufferSize() const {
    return m_hrd_buffer_size;
}
void OAIXavcHdProfileSettings::setHrdBufferSize(const qint32 &hrd_buffer_size) {
    m_hrd_buffer_size = hrd_buffer_size;
    m_hrd_buffer_size_isSet = true;
}

bool OAIXavcHdProfileSettings::is_hrd_buffer_size_Set() const{
    return m_hrd_buffer_size_isSet;
}

bool OAIXavcHdProfileSettings::is_hrd_buffer_size_Valid() const{
    return m_hrd_buffer_size_isValid;
}

OAIXavcInterlaceMode OAIXavcHdProfileSettings::getInterlaceMode() const {
    return m_interlace_mode;
}
void OAIXavcHdProfileSettings::setInterlaceMode(const OAIXavcInterlaceMode &interlace_mode) {
    m_interlace_mode = interlace_mode;
    m_interlace_mode_isSet = true;
}

bool OAIXavcHdProfileSettings::is_interlace_mode_Set() const{
    return m_interlace_mode_isSet;
}

bool OAIXavcHdProfileSettings::is_interlace_mode_Valid() const{
    return m_interlace_mode_isValid;
}

OAIXavcHdProfileQualityTuningLevel OAIXavcHdProfileSettings::getQualityTuningLevel() const {
    return m_quality_tuning_level;
}
void OAIXavcHdProfileSettings::setQualityTuningLevel(const OAIXavcHdProfileQualityTuningLevel &quality_tuning_level) {
    m_quality_tuning_level = quality_tuning_level;
    m_quality_tuning_level_isSet = true;
}

bool OAIXavcHdProfileSettings::is_quality_tuning_level_Set() const{
    return m_quality_tuning_level_isSet;
}

bool OAIXavcHdProfileSettings::is_quality_tuning_level_Valid() const{
    return m_quality_tuning_level_isValid;
}

qint32 OAIXavcHdProfileSettings::getSlices() const {
    return m_slices;
}
void OAIXavcHdProfileSettings::setSlices(const qint32 &slices) {
    m_slices = slices;
    m_slices_isSet = true;
}

bool OAIXavcHdProfileSettings::is_slices_Set() const{
    return m_slices_isSet;
}

bool OAIXavcHdProfileSettings::is_slices_Valid() const{
    return m_slices_isValid;
}

OAIXavcHdProfileTelecine OAIXavcHdProfileSettings::getTelecine() const {
    return m_telecine;
}
void OAIXavcHdProfileSettings::setTelecine(const OAIXavcHdProfileTelecine &telecine) {
    m_telecine = telecine;
    m_telecine_isSet = true;
}

bool OAIXavcHdProfileSettings::is_telecine_Set() const{
    return m_telecine_isSet;
}

bool OAIXavcHdProfileSettings::is_telecine_Valid() const{
    return m_telecine_isValid;
}

bool OAIXavcHdProfileSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flicker_adaptive_quantization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gop_b_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gop_closed_cadence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hrd_buffer_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interlace_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_tuning_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telecine.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXavcHdProfileSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
