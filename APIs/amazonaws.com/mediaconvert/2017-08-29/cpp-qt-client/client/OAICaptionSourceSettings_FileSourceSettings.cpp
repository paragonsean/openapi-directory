/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptionSourceSettings_FileSourceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptionSourceSettings_FileSourceSettings::OAICaptionSourceSettings_FileSourceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptionSourceSettings_FileSourceSettings::OAICaptionSourceSettings_FileSourceSettings() {
    this->initializeModel();
}

OAICaptionSourceSettings_FileSourceSettings::~OAICaptionSourceSettings_FileSourceSettings() {}

void OAICaptionSourceSettings_FileSourceSettings::initializeModel() {

    m_convert608_to708_isSet = false;
    m_convert608_to708_isValid = false;

    m_convert_paint_to_pop_isSet = false;
    m_convert_paint_to_pop_isValid = false;

    m_framerate_isSet = false;
    m_framerate_isValid = false;

    m_source_file_isSet = false;
    m_source_file_isValid = false;

    m_time_delta_isSet = false;
    m_time_delta_isValid = false;

    m_time_delta_units_isSet = false;
    m_time_delta_units_isValid = false;
}

void OAICaptionSourceSettings_FileSourceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaptionSourceSettings_FileSourceSettings::fromJsonObject(QJsonObject json) {

    m_convert608_to708_isValid = ::OpenAPI::fromJsonValue(m_convert608_to708, json[QString("Convert608To708")]);
    m_convert608_to708_isSet = !json[QString("Convert608To708")].isNull() && m_convert608_to708_isValid;

    m_convert_paint_to_pop_isValid = ::OpenAPI::fromJsonValue(m_convert_paint_to_pop, json[QString("ConvertPaintToPop")]);
    m_convert_paint_to_pop_isSet = !json[QString("ConvertPaintToPop")].isNull() && m_convert_paint_to_pop_isValid;

    m_framerate_isValid = ::OpenAPI::fromJsonValue(m_framerate, json[QString("Framerate")]);
    m_framerate_isSet = !json[QString("Framerate")].isNull() && m_framerate_isValid;

    m_source_file_isValid = ::OpenAPI::fromJsonValue(m_source_file, json[QString("SourceFile")]);
    m_source_file_isSet = !json[QString("SourceFile")].isNull() && m_source_file_isValid;

    m_time_delta_isValid = ::OpenAPI::fromJsonValue(m_time_delta, json[QString("TimeDelta")]);
    m_time_delta_isSet = !json[QString("TimeDelta")].isNull() && m_time_delta_isValid;

    m_time_delta_units_isValid = ::OpenAPI::fromJsonValue(m_time_delta_units, json[QString("TimeDeltaUnits")]);
    m_time_delta_units_isSet = !json[QString("TimeDeltaUnits")].isNull() && m_time_delta_units_isValid;
}

QString OAICaptionSourceSettings_FileSourceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaptionSourceSettings_FileSourceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_convert608_to708.isSet()) {
        obj.insert(QString("Convert608To708"), ::OpenAPI::toJsonValue(m_convert608_to708));
    }
    if (m_convert_paint_to_pop.isSet()) {
        obj.insert(QString("ConvertPaintToPop"), ::OpenAPI::toJsonValue(m_convert_paint_to_pop));
    }
    if (m_framerate.isSet()) {
        obj.insert(QString("Framerate"), ::OpenAPI::toJsonValue(m_framerate));
    }
    if (m_source_file_isSet) {
        obj.insert(QString("SourceFile"), ::OpenAPI::toJsonValue(m_source_file));
    }
    if (m_time_delta_isSet) {
        obj.insert(QString("TimeDelta"), ::OpenAPI::toJsonValue(m_time_delta));
    }
    if (m_time_delta_units.isSet()) {
        obj.insert(QString("TimeDeltaUnits"), ::OpenAPI::toJsonValue(m_time_delta_units));
    }
    return obj;
}

OAIFileSourceConvert608To708 OAICaptionSourceSettings_FileSourceSettings::getConvert608To708() const {
    return m_convert608_to708;
}
void OAICaptionSourceSettings_FileSourceSettings::setConvert608To708(const OAIFileSourceConvert608To708 &convert608_to708) {
    m_convert608_to708 = convert608_to708;
    m_convert608_to708_isSet = true;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_convert608_to708_Set() const{
    return m_convert608_to708_isSet;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_convert608_to708_Valid() const{
    return m_convert608_to708_isValid;
}

OAICaptionSourceConvertPaintOnToPopOn OAICaptionSourceSettings_FileSourceSettings::getConvertPaintToPop() const {
    return m_convert_paint_to_pop;
}
void OAICaptionSourceSettings_FileSourceSettings::setConvertPaintToPop(const OAICaptionSourceConvertPaintOnToPopOn &convert_paint_to_pop) {
    m_convert_paint_to_pop = convert_paint_to_pop;
    m_convert_paint_to_pop_isSet = true;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_convert_paint_to_pop_Set() const{
    return m_convert_paint_to_pop_isSet;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_convert_paint_to_pop_Valid() const{
    return m_convert_paint_to_pop_isValid;
}

OAIFileSourceSettings_Framerate OAICaptionSourceSettings_FileSourceSettings::getFramerate() const {
    return m_framerate;
}
void OAICaptionSourceSettings_FileSourceSettings::setFramerate(const OAIFileSourceSettings_Framerate &framerate) {
    m_framerate = framerate;
    m_framerate_isSet = true;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_framerate_Set() const{
    return m_framerate_isSet;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_framerate_Valid() const{
    return m_framerate_isValid;
}

QString OAICaptionSourceSettings_FileSourceSettings::getSourceFile() const {
    return m_source_file;
}
void OAICaptionSourceSettings_FileSourceSettings::setSourceFile(const QString &source_file) {
    m_source_file = source_file;
    m_source_file_isSet = true;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_source_file_Set() const{
    return m_source_file_isSet;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_source_file_Valid() const{
    return m_source_file_isValid;
}

qint32 OAICaptionSourceSettings_FileSourceSettings::getTimeDelta() const {
    return m_time_delta;
}
void OAICaptionSourceSettings_FileSourceSettings::setTimeDelta(const qint32 &time_delta) {
    m_time_delta = time_delta;
    m_time_delta_isSet = true;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_time_delta_Set() const{
    return m_time_delta_isSet;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_time_delta_Valid() const{
    return m_time_delta_isValid;
}

OAIFileSourceTimeDeltaUnits OAICaptionSourceSettings_FileSourceSettings::getTimeDeltaUnits() const {
    return m_time_delta_units;
}
void OAICaptionSourceSettings_FileSourceSettings::setTimeDeltaUnits(const OAIFileSourceTimeDeltaUnits &time_delta_units) {
    m_time_delta_units = time_delta_units;
    m_time_delta_units_isSet = true;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_time_delta_units_Set() const{
    return m_time_delta_units_isSet;
}

bool OAICaptionSourceSettings_FileSourceSettings::is_time_delta_units_Valid() const{
    return m_time_delta_units_isValid;
}

bool OAICaptionSourceSettings_FileSourceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_convert608_to708.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_paint_to_pop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_delta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_delta_units.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaptionSourceSettings_FileSourceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
