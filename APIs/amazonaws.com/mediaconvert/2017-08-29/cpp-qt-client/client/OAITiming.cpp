/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITiming.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITiming::OAITiming(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITiming::OAITiming() {
    this->initializeModel();
}

OAITiming::~OAITiming() {}

void OAITiming::initializeModel() {

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_submit_time_isSet = false;
    m_submit_time_isValid = false;
}

void OAITiming::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITiming::fromJsonObject(QJsonObject json) {

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("FinishTime")]);
    m_finish_time_isSet = !json[QString("FinishTime")].isNull() && m_finish_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_submit_time_isValid = ::OpenAPI::fromJsonValue(m_submit_time, json[QString("SubmitTime")]);
    m_submit_time_isSet = !json[QString("SubmitTime")].isNull() && m_submit_time_isValid;
}

QString OAITiming::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITiming::asJsonObject() const {
    QJsonObject obj;
    if (m_finish_time_isSet) {
        obj.insert(QString("FinishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_submit_time_isSet) {
        obj.insert(QString("SubmitTime"), ::OpenAPI::toJsonValue(m_submit_time));
    }
    return obj;
}

QDateTime OAITiming::getFinishTime() const {
    return m_finish_time;
}
void OAITiming::setFinishTime(const QDateTime &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAITiming::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAITiming::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

QDateTime OAITiming::getStartTime() const {
    return m_start_time;
}
void OAITiming::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITiming::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITiming::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAITiming::getSubmitTime() const {
    return m_submit_time;
}
void OAITiming::setSubmitTime(const QDateTime &submit_time) {
    m_submit_time = submit_time;
    m_submit_time_isSet = true;
}

bool OAITiming::is_submit_time_Set() const{
    return m_submit_time_isSet;
}

bool OAITiming::is_submit_time_Valid() const{
    return m_submit_time_isValid;
}

bool OAITiming::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITiming::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
