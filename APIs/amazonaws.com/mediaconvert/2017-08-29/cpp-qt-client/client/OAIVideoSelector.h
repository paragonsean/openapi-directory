/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoSelector.h
 *
 * Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
 */

#ifndef OAIVideoSelector_H
#define OAIVideoSelector_H

#include <QJsonObject>

#include "OAIAlphaBehavior.h"
#include "OAIColorSpace.h"
#include "OAIColorSpaceUsage.h"
#include "OAIEmbeddedTimecodeOverride.h"
#include "OAIInputRotate.h"
#include "OAIInputSampleRange.h"
#include "OAIPadVideo.h"
#include "OAIVideoSelector_Hdr10Metadata.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVideoSelector_Hdr10Metadata;

class OAIVideoSelector : public OAIObject {
public:
    OAIVideoSelector();
    OAIVideoSelector(QString json);
    ~OAIVideoSelector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAlphaBehavior getAlphaBehavior() const;
    void setAlphaBehavior(const OAIAlphaBehavior &alpha_behavior);
    bool is_alpha_behavior_Set() const;
    bool is_alpha_behavior_Valid() const;

    OAIColorSpace getColorSpace() const;
    void setColorSpace(const OAIColorSpace &color_space);
    bool is_color_space_Set() const;
    bool is_color_space_Valid() const;

    OAIColorSpaceUsage getColorSpaceUsage() const;
    void setColorSpaceUsage(const OAIColorSpaceUsage &color_space_usage);
    bool is_color_space_usage_Set() const;
    bool is_color_space_usage_Valid() const;

    OAIEmbeddedTimecodeOverride getEmbeddedTimecodeOverride() const;
    void setEmbeddedTimecodeOverride(const OAIEmbeddedTimecodeOverride &embedded_timecode_override);
    bool is_embedded_timecode_override_Set() const;
    bool is_embedded_timecode_override_Valid() const;

    OAIVideoSelector_Hdr10Metadata getHdr10Metadata() const;
    void setHdr10Metadata(const OAIVideoSelector_Hdr10Metadata &hdr10_metadata);
    bool is_hdr10_metadata_Set() const;
    bool is_hdr10_metadata_Valid() const;

    OAIPadVideo getPadVideo() const;
    void setPadVideo(const OAIPadVideo &pad_video);
    bool is_pad_video_Set() const;
    bool is_pad_video_Valid() const;

    qint32 getPid() const;
    void setPid(const qint32 &pid);
    bool is_pid_Set() const;
    bool is_pid_Valid() const;

    qint32 getProgramNumber() const;
    void setProgramNumber(const qint32 &program_number);
    bool is_program_number_Set() const;
    bool is_program_number_Valid() const;

    OAIInputRotate getRotate() const;
    void setRotate(const OAIInputRotate &rotate);
    bool is_rotate_Set() const;
    bool is_rotate_Valid() const;

    OAIInputSampleRange getSampleRange() const;
    void setSampleRange(const OAIInputSampleRange &sample_range);
    bool is_sample_range_Set() const;
    bool is_sample_range_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAlphaBehavior m_alpha_behavior;
    bool m_alpha_behavior_isSet;
    bool m_alpha_behavior_isValid;

    OAIColorSpace m_color_space;
    bool m_color_space_isSet;
    bool m_color_space_isValid;

    OAIColorSpaceUsage m_color_space_usage;
    bool m_color_space_usage_isSet;
    bool m_color_space_usage_isValid;

    OAIEmbeddedTimecodeOverride m_embedded_timecode_override;
    bool m_embedded_timecode_override_isSet;
    bool m_embedded_timecode_override_isValid;

    OAIVideoSelector_Hdr10Metadata m_hdr10_metadata;
    bool m_hdr10_metadata_isSet;
    bool m_hdr10_metadata_isValid;

    OAIPadVideo m_pad_video;
    bool m_pad_video_isSet;
    bool m_pad_video_isValid;

    qint32 m_pid;
    bool m_pid_isSet;
    bool m_pid_isValid;

    qint32 m_program_number;
    bool m_program_number_isSet;
    bool m_program_number_isValid;

    OAIInputRotate m_rotate;
    bool m_rotate_isSet;
    bool m_rotate_isValid;

    OAIInputSampleRange m_sample_range;
    bool m_sample_range_isSet;
    bool m_sample_range_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoSelector)

#endif // OAIVideoSelector_H
