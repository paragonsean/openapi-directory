/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIH264TemporalAdaptiveQuantization.h
 *
 * Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264TemporalAdaptiveQuantization is Enabled. Keep this default value to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren&#39;t moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn&#39;t take into account where the viewer&#39;s attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn&#39;t have moving objects with sharp edges, such as sports athletes&#39; faces, you might choose to set H264TemporalAdaptiveQuantization to Disabled. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization. To manually enable or disable H264TemporalAdaptiveQuantization, you must set Adaptive quantization to a value other than AUTO.
 */

#ifndef OAIH264TemporalAdaptiveQuantization_H
#define OAIH264TemporalAdaptiveQuantization_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIH264TemporalAdaptiveQuantization : public OAIEnum {
public:
    OAIH264TemporalAdaptiveQuantization();
    OAIH264TemporalAdaptiveQuantization(QString json);
    ~OAIH264TemporalAdaptiveQuantization() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIH264TemporalAdaptiveQuantization {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        DISABLED, 
        ENABLED
    };
    OAIH264TemporalAdaptiveQuantization::eOAIH264TemporalAdaptiveQuantization getValue() const;
    void setValue(const OAIH264TemporalAdaptiveQuantization::eOAIH264TemporalAdaptiveQuantization& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIH264TemporalAdaptiveQuantization m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIH264TemporalAdaptiveQuantization)

#endif // OAIH264TemporalAdaptiveQuantization_H
