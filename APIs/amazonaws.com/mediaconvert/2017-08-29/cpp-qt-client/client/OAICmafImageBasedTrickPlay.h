/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICmafImageBasedTrickPlay.h
 *
 * Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. When you enable Write HLS manifest, MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. When you enable Write DASH manifest, MediaConvert adds an entry in the .mpd manifest for each set of images that you generate. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
 */

#ifndef OAICmafImageBasedTrickPlay_H
#define OAICmafImageBasedTrickPlay_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICmafImageBasedTrickPlay : public OAIEnum {
public:
    OAICmafImageBasedTrickPlay();
    OAICmafImageBasedTrickPlay(QString json);
    ~OAICmafImageBasedTrickPlay() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAICmafImageBasedTrickPlay {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        NONE, 
        THUMBNAIL, 
        THUMBNAIL_AND_FULLFRAME, 
        ADVANCED
    };
    OAICmafImageBasedTrickPlay::eOAICmafImageBasedTrickPlay getValue() const;
    void setValue(const OAICmafImageBasedTrickPlay::eOAICmafImageBasedTrickPlay& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAICmafImageBasedTrickPlay m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICmafImageBasedTrickPlay)

#endif // OAICmafImageBasedTrickPlay_H
