/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput::OAIInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput::OAIInput() {
    this->initializeModel();
}

OAIInput::~OAIInput() {}

void OAIInput::initializeModel() {

    m_advanced_input_filter_isSet = false;
    m_advanced_input_filter_isValid = false;

    m_advanced_input_filter_settings_isSet = false;
    m_advanced_input_filter_settings_isValid = false;

    m_audio_selector_groups_isSet = false;
    m_audio_selector_groups_isValid = false;

    m_audio_selectors_isSet = false;
    m_audio_selectors_isValid = false;

    m_caption_selectors_isSet = false;
    m_caption_selectors_isValid = false;

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_deblock_filter_isSet = false;
    m_deblock_filter_isValid = false;

    m_decryption_settings_isSet = false;
    m_decryption_settings_isValid = false;

    m_denoise_filter_isSet = false;
    m_denoise_filter_isValid = false;

    m_dolby_vision_metadata_xml_isSet = false;
    m_dolby_vision_metadata_xml_isValid = false;

    m_file_input_isSet = false;
    m_file_input_isValid = false;

    m_filter_enable_isSet = false;
    m_filter_enable_isValid = false;

    m_filter_strength_isSet = false;
    m_filter_strength_isValid = false;

    m_image_inserter_isSet = false;
    m_image_inserter_isValid = false;

    m_input_clippings_isSet = false;
    m_input_clippings_isValid = false;

    m_input_scan_type_isSet = false;
    m_input_scan_type_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_program_number_isSet = false;
    m_program_number_isValid = false;

    m_psi_control_isSet = false;
    m_psi_control_isValid = false;

    m_supplemental_imps_isSet = false;
    m_supplemental_imps_isValid = false;

    m_timecode_source_isSet = false;
    m_timecode_source_isValid = false;

    m_timecode_start_isSet = false;
    m_timecode_start_isValid = false;

    m_video_generator_isSet = false;
    m_video_generator_isValid = false;

    m_video_selector_isSet = false;
    m_video_selector_isValid = false;
}

void OAIInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput::fromJsonObject(QJsonObject json) {

    m_advanced_input_filter_isValid = ::OpenAPI::fromJsonValue(m_advanced_input_filter, json[QString("AdvancedInputFilter")]);
    m_advanced_input_filter_isSet = !json[QString("AdvancedInputFilter")].isNull() && m_advanced_input_filter_isValid;

    m_advanced_input_filter_settings_isValid = ::OpenAPI::fromJsonValue(m_advanced_input_filter_settings, json[QString("AdvancedInputFilterSettings")]);
    m_advanced_input_filter_settings_isSet = !json[QString("AdvancedInputFilterSettings")].isNull() && m_advanced_input_filter_settings_isValid;

    m_audio_selector_groups_isValid = ::OpenAPI::fromJsonValue(m_audio_selector_groups, json[QString("AudioSelectorGroups")]);
    m_audio_selector_groups_isSet = !json[QString("AudioSelectorGroups")].isNull() && m_audio_selector_groups_isValid;

    m_audio_selectors_isValid = ::OpenAPI::fromJsonValue(m_audio_selectors, json[QString("AudioSelectors")]);
    m_audio_selectors_isSet = !json[QString("AudioSelectors")].isNull() && m_audio_selectors_isValid;

    m_caption_selectors_isValid = ::OpenAPI::fromJsonValue(m_caption_selectors, json[QString("CaptionSelectors")]);
    m_caption_selectors_isSet = !json[QString("CaptionSelectors")].isNull() && m_caption_selectors_isValid;

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("Crop")]);
    m_crop_isSet = !json[QString("Crop")].isNull() && m_crop_isValid;

    m_deblock_filter_isValid = ::OpenAPI::fromJsonValue(m_deblock_filter, json[QString("DeblockFilter")]);
    m_deblock_filter_isSet = !json[QString("DeblockFilter")].isNull() && m_deblock_filter_isValid;

    m_decryption_settings_isValid = ::OpenAPI::fromJsonValue(m_decryption_settings, json[QString("DecryptionSettings")]);
    m_decryption_settings_isSet = !json[QString("DecryptionSettings")].isNull() && m_decryption_settings_isValid;

    m_denoise_filter_isValid = ::OpenAPI::fromJsonValue(m_denoise_filter, json[QString("DenoiseFilter")]);
    m_denoise_filter_isSet = !json[QString("DenoiseFilter")].isNull() && m_denoise_filter_isValid;

    m_dolby_vision_metadata_xml_isValid = ::OpenAPI::fromJsonValue(m_dolby_vision_metadata_xml, json[QString("DolbyVisionMetadataXml")]);
    m_dolby_vision_metadata_xml_isSet = !json[QString("DolbyVisionMetadataXml")].isNull() && m_dolby_vision_metadata_xml_isValid;

    m_file_input_isValid = ::OpenAPI::fromJsonValue(m_file_input, json[QString("FileInput")]);
    m_file_input_isSet = !json[QString("FileInput")].isNull() && m_file_input_isValid;

    m_filter_enable_isValid = ::OpenAPI::fromJsonValue(m_filter_enable, json[QString("FilterEnable")]);
    m_filter_enable_isSet = !json[QString("FilterEnable")].isNull() && m_filter_enable_isValid;

    m_filter_strength_isValid = ::OpenAPI::fromJsonValue(m_filter_strength, json[QString("FilterStrength")]);
    m_filter_strength_isSet = !json[QString("FilterStrength")].isNull() && m_filter_strength_isValid;

    m_image_inserter_isValid = ::OpenAPI::fromJsonValue(m_image_inserter, json[QString("ImageInserter")]);
    m_image_inserter_isSet = !json[QString("ImageInserter")].isNull() && m_image_inserter_isValid;

    m_input_clippings_isValid = ::OpenAPI::fromJsonValue(m_input_clippings, json[QString("InputClippings")]);
    m_input_clippings_isSet = !json[QString("InputClippings")].isNull() && m_input_clippings_isValid;

    m_input_scan_type_isValid = ::OpenAPI::fromJsonValue(m_input_scan_type, json[QString("InputScanType")]);
    m_input_scan_type_isSet = !json[QString("InputScanType")].isNull() && m_input_scan_type_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_program_number_isValid = ::OpenAPI::fromJsonValue(m_program_number, json[QString("ProgramNumber")]);
    m_program_number_isSet = !json[QString("ProgramNumber")].isNull() && m_program_number_isValid;

    m_psi_control_isValid = ::OpenAPI::fromJsonValue(m_psi_control, json[QString("PsiControl")]);
    m_psi_control_isSet = !json[QString("PsiControl")].isNull() && m_psi_control_isValid;

    m_supplemental_imps_isValid = ::OpenAPI::fromJsonValue(m_supplemental_imps, json[QString("SupplementalImps")]);
    m_supplemental_imps_isSet = !json[QString("SupplementalImps")].isNull() && m_supplemental_imps_isValid;

    m_timecode_source_isValid = ::OpenAPI::fromJsonValue(m_timecode_source, json[QString("TimecodeSource")]);
    m_timecode_source_isSet = !json[QString("TimecodeSource")].isNull() && m_timecode_source_isValid;

    m_timecode_start_isValid = ::OpenAPI::fromJsonValue(m_timecode_start, json[QString("TimecodeStart")]);
    m_timecode_start_isSet = !json[QString("TimecodeStart")].isNull() && m_timecode_start_isValid;

    m_video_generator_isValid = ::OpenAPI::fromJsonValue(m_video_generator, json[QString("VideoGenerator")]);
    m_video_generator_isSet = !json[QString("VideoGenerator")].isNull() && m_video_generator_isValid;

    m_video_selector_isValid = ::OpenAPI::fromJsonValue(m_video_selector, json[QString("VideoSelector")]);
    m_video_selector_isSet = !json[QString("VideoSelector")].isNull() && m_video_selector_isValid;
}

QString OAIInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_input_filter.isSet()) {
        obj.insert(QString("AdvancedInputFilter"), ::OpenAPI::toJsonValue(m_advanced_input_filter));
    }
    if (m_advanced_input_filter_settings.isSet()) {
        obj.insert(QString("AdvancedInputFilterSettings"), ::OpenAPI::toJsonValue(m_advanced_input_filter_settings));
    }
    if (m_audio_selector_groups.isSet()) {
        obj.insert(QString("AudioSelectorGroups"), ::OpenAPI::toJsonValue(m_audio_selector_groups));
    }
    if (m_audio_selectors.isSet()) {
        obj.insert(QString("AudioSelectors"), ::OpenAPI::toJsonValue(m_audio_selectors));
    }
    if (m_caption_selectors.isSet()) {
        obj.insert(QString("CaptionSelectors"), ::OpenAPI::toJsonValue(m_caption_selectors));
    }
    if (m_crop.isSet()) {
        obj.insert(QString("Crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_deblock_filter.isSet()) {
        obj.insert(QString("DeblockFilter"), ::OpenAPI::toJsonValue(m_deblock_filter));
    }
    if (m_decryption_settings.isSet()) {
        obj.insert(QString("DecryptionSettings"), ::OpenAPI::toJsonValue(m_decryption_settings));
    }
    if (m_denoise_filter.isSet()) {
        obj.insert(QString("DenoiseFilter"), ::OpenAPI::toJsonValue(m_denoise_filter));
    }
    if (m_dolby_vision_metadata_xml_isSet) {
        obj.insert(QString("DolbyVisionMetadataXml"), ::OpenAPI::toJsonValue(m_dolby_vision_metadata_xml));
    }
    if (m_file_input_isSet) {
        obj.insert(QString("FileInput"), ::OpenAPI::toJsonValue(m_file_input));
    }
    if (m_filter_enable.isSet()) {
        obj.insert(QString("FilterEnable"), ::OpenAPI::toJsonValue(m_filter_enable));
    }
    if (m_filter_strength_isSet) {
        obj.insert(QString("FilterStrength"), ::OpenAPI::toJsonValue(m_filter_strength));
    }
    if (m_image_inserter.isSet()) {
        obj.insert(QString("ImageInserter"), ::OpenAPI::toJsonValue(m_image_inserter));
    }
    if (m_input_clippings.isSet()) {
        obj.insert(QString("InputClippings"), ::OpenAPI::toJsonValue(m_input_clippings));
    }
    if (m_input_scan_type.isSet()) {
        obj.insert(QString("InputScanType"), ::OpenAPI::toJsonValue(m_input_scan_type));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_program_number_isSet) {
        obj.insert(QString("ProgramNumber"), ::OpenAPI::toJsonValue(m_program_number));
    }
    if (m_psi_control.isSet()) {
        obj.insert(QString("PsiControl"), ::OpenAPI::toJsonValue(m_psi_control));
    }
    if (m_supplemental_imps.isSet()) {
        obj.insert(QString("SupplementalImps"), ::OpenAPI::toJsonValue(m_supplemental_imps));
    }
    if (m_timecode_source.isSet()) {
        obj.insert(QString("TimecodeSource"), ::OpenAPI::toJsonValue(m_timecode_source));
    }
    if (m_timecode_start_isSet) {
        obj.insert(QString("TimecodeStart"), ::OpenAPI::toJsonValue(m_timecode_start));
    }
    if (m_video_generator.isSet()) {
        obj.insert(QString("VideoGenerator"), ::OpenAPI::toJsonValue(m_video_generator));
    }
    if (m_video_selector.isSet()) {
        obj.insert(QString("VideoSelector"), ::OpenAPI::toJsonValue(m_video_selector));
    }
    return obj;
}

OAIAdvancedInputFilter OAIInput::getAdvancedInputFilter() const {
    return m_advanced_input_filter;
}
void OAIInput::setAdvancedInputFilter(const OAIAdvancedInputFilter &advanced_input_filter) {
    m_advanced_input_filter = advanced_input_filter;
    m_advanced_input_filter_isSet = true;
}

bool OAIInput::is_advanced_input_filter_Set() const{
    return m_advanced_input_filter_isSet;
}

bool OAIInput::is_advanced_input_filter_Valid() const{
    return m_advanced_input_filter_isValid;
}

OAIInput_AdvancedInputFilterSettings OAIInput::getAdvancedInputFilterSettings() const {
    return m_advanced_input_filter_settings;
}
void OAIInput::setAdvancedInputFilterSettings(const OAIInput_AdvancedInputFilterSettings &advanced_input_filter_settings) {
    m_advanced_input_filter_settings = advanced_input_filter_settings;
    m_advanced_input_filter_settings_isSet = true;
}

bool OAIInput::is_advanced_input_filter_settings_Set() const{
    return m_advanced_input_filter_settings_isSet;
}

bool OAIInput::is_advanced_input_filter_settings_Valid() const{
    return m_advanced_input_filter_settings_isValid;
}

QMap OAIInput::getAudioSelectorGroups() const {
    return m_audio_selector_groups;
}
void OAIInput::setAudioSelectorGroups(const QMap &audio_selector_groups) {
    m_audio_selector_groups = audio_selector_groups;
    m_audio_selector_groups_isSet = true;
}

bool OAIInput::is_audio_selector_groups_Set() const{
    return m_audio_selector_groups_isSet;
}

bool OAIInput::is_audio_selector_groups_Valid() const{
    return m_audio_selector_groups_isValid;
}

QMap OAIInput::getAudioSelectors() const {
    return m_audio_selectors;
}
void OAIInput::setAudioSelectors(const QMap &audio_selectors) {
    m_audio_selectors = audio_selectors;
    m_audio_selectors_isSet = true;
}

bool OAIInput::is_audio_selectors_Set() const{
    return m_audio_selectors_isSet;
}

bool OAIInput::is_audio_selectors_Valid() const{
    return m_audio_selectors_isValid;
}

QMap OAIInput::getCaptionSelectors() const {
    return m_caption_selectors;
}
void OAIInput::setCaptionSelectors(const QMap &caption_selectors) {
    m_caption_selectors = caption_selectors;
    m_caption_selectors_isSet = true;
}

bool OAIInput::is_caption_selectors_Set() const{
    return m_caption_selectors_isSet;
}

bool OAIInput::is_caption_selectors_Valid() const{
    return m_caption_selectors_isValid;
}

OAIInput_Crop OAIInput::getCrop() const {
    return m_crop;
}
void OAIInput::setCrop(const OAIInput_Crop &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIInput::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIInput::is_crop_Valid() const{
    return m_crop_isValid;
}

OAIInputDeblockFilter OAIInput::getDeblockFilter() const {
    return m_deblock_filter;
}
void OAIInput::setDeblockFilter(const OAIInputDeblockFilter &deblock_filter) {
    m_deblock_filter = deblock_filter;
    m_deblock_filter_isSet = true;
}

bool OAIInput::is_deblock_filter_Set() const{
    return m_deblock_filter_isSet;
}

bool OAIInput::is_deblock_filter_Valid() const{
    return m_deblock_filter_isValid;
}

OAIInput_DecryptionSettings OAIInput::getDecryptionSettings() const {
    return m_decryption_settings;
}
void OAIInput::setDecryptionSettings(const OAIInput_DecryptionSettings &decryption_settings) {
    m_decryption_settings = decryption_settings;
    m_decryption_settings_isSet = true;
}

bool OAIInput::is_decryption_settings_Set() const{
    return m_decryption_settings_isSet;
}

bool OAIInput::is_decryption_settings_Valid() const{
    return m_decryption_settings_isValid;
}

OAIInputDenoiseFilter OAIInput::getDenoiseFilter() const {
    return m_denoise_filter;
}
void OAIInput::setDenoiseFilter(const OAIInputDenoiseFilter &denoise_filter) {
    m_denoise_filter = denoise_filter;
    m_denoise_filter_isSet = true;
}

bool OAIInput::is_denoise_filter_Set() const{
    return m_denoise_filter_isSet;
}

bool OAIInput::is_denoise_filter_Valid() const{
    return m_denoise_filter_isValid;
}

QString OAIInput::getDolbyVisionMetadataXml() const {
    return m_dolby_vision_metadata_xml;
}
void OAIInput::setDolbyVisionMetadataXml(const QString &dolby_vision_metadata_xml) {
    m_dolby_vision_metadata_xml = dolby_vision_metadata_xml;
    m_dolby_vision_metadata_xml_isSet = true;
}

bool OAIInput::is_dolby_vision_metadata_xml_Set() const{
    return m_dolby_vision_metadata_xml_isSet;
}

bool OAIInput::is_dolby_vision_metadata_xml_Valid() const{
    return m_dolby_vision_metadata_xml_isValid;
}

QString OAIInput::getFileInput() const {
    return m_file_input;
}
void OAIInput::setFileInput(const QString &file_input) {
    m_file_input = file_input;
    m_file_input_isSet = true;
}

bool OAIInput::is_file_input_Set() const{
    return m_file_input_isSet;
}

bool OAIInput::is_file_input_Valid() const{
    return m_file_input_isValid;
}

OAIInputFilterEnable OAIInput::getFilterEnable() const {
    return m_filter_enable;
}
void OAIInput::setFilterEnable(const OAIInputFilterEnable &filter_enable) {
    m_filter_enable = filter_enable;
    m_filter_enable_isSet = true;
}

bool OAIInput::is_filter_enable_Set() const{
    return m_filter_enable_isSet;
}

bool OAIInput::is_filter_enable_Valid() const{
    return m_filter_enable_isValid;
}

qint32 OAIInput::getFilterStrength() const {
    return m_filter_strength;
}
void OAIInput::setFilterStrength(const qint32 &filter_strength) {
    m_filter_strength = filter_strength;
    m_filter_strength_isSet = true;
}

bool OAIInput::is_filter_strength_Set() const{
    return m_filter_strength_isSet;
}

bool OAIInput::is_filter_strength_Valid() const{
    return m_filter_strength_isValid;
}

OAIInput_ImageInserter OAIInput::getImageInserter() const {
    return m_image_inserter;
}
void OAIInput::setImageInserter(const OAIInput_ImageInserter &image_inserter) {
    m_image_inserter = image_inserter;
    m_image_inserter_isSet = true;
}

bool OAIInput::is_image_inserter_Set() const{
    return m_image_inserter_isSet;
}

bool OAIInput::is_image_inserter_Valid() const{
    return m_image_inserter_isValid;
}

QList OAIInput::getInputClippings() const {
    return m_input_clippings;
}
void OAIInput::setInputClippings(const QList &input_clippings) {
    m_input_clippings = input_clippings;
    m_input_clippings_isSet = true;
}

bool OAIInput::is_input_clippings_Set() const{
    return m_input_clippings_isSet;
}

bool OAIInput::is_input_clippings_Valid() const{
    return m_input_clippings_isValid;
}

OAIInputScanType OAIInput::getInputScanType() const {
    return m_input_scan_type;
}
void OAIInput::setInputScanType(const OAIInputScanType &input_scan_type) {
    m_input_scan_type = input_scan_type;
    m_input_scan_type_isSet = true;
}

bool OAIInput::is_input_scan_type_Set() const{
    return m_input_scan_type_isSet;
}

bool OAIInput::is_input_scan_type_Valid() const{
    return m_input_scan_type_isValid;
}

OAIInput_Position OAIInput::getPosition() const {
    return m_position;
}
void OAIInput::setPosition(const OAIInput_Position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIInput::is_position_Set() const{
    return m_position_isSet;
}

bool OAIInput::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIInput::getProgramNumber() const {
    return m_program_number;
}
void OAIInput::setProgramNumber(const qint32 &program_number) {
    m_program_number = program_number;
    m_program_number_isSet = true;
}

bool OAIInput::is_program_number_Set() const{
    return m_program_number_isSet;
}

bool OAIInput::is_program_number_Valid() const{
    return m_program_number_isValid;
}

OAIInputPsiControl OAIInput::getPsiControl() const {
    return m_psi_control;
}
void OAIInput::setPsiControl(const OAIInputPsiControl &psi_control) {
    m_psi_control = psi_control;
    m_psi_control_isSet = true;
}

bool OAIInput::is_psi_control_Set() const{
    return m_psi_control_isSet;
}

bool OAIInput::is_psi_control_Valid() const{
    return m_psi_control_isValid;
}

QList OAIInput::getSupplementalImps() const {
    return m_supplemental_imps;
}
void OAIInput::setSupplementalImps(const QList &supplemental_imps) {
    m_supplemental_imps = supplemental_imps;
    m_supplemental_imps_isSet = true;
}

bool OAIInput::is_supplemental_imps_Set() const{
    return m_supplemental_imps_isSet;
}

bool OAIInput::is_supplemental_imps_Valid() const{
    return m_supplemental_imps_isValid;
}

OAIInputTimecodeSource OAIInput::getTimecodeSource() const {
    return m_timecode_source;
}
void OAIInput::setTimecodeSource(const OAIInputTimecodeSource &timecode_source) {
    m_timecode_source = timecode_source;
    m_timecode_source_isSet = true;
}

bool OAIInput::is_timecode_source_Set() const{
    return m_timecode_source_isSet;
}

bool OAIInput::is_timecode_source_Valid() const{
    return m_timecode_source_isValid;
}

QString OAIInput::getTimecodeStart() const {
    return m_timecode_start;
}
void OAIInput::setTimecodeStart(const QString &timecode_start) {
    m_timecode_start = timecode_start;
    m_timecode_start_isSet = true;
}

bool OAIInput::is_timecode_start_Set() const{
    return m_timecode_start_isSet;
}

bool OAIInput::is_timecode_start_Valid() const{
    return m_timecode_start_isValid;
}

OAIInput_VideoGenerator OAIInput::getVideoGenerator() const {
    return m_video_generator;
}
void OAIInput::setVideoGenerator(const OAIInput_VideoGenerator &video_generator) {
    m_video_generator = video_generator;
    m_video_generator_isSet = true;
}

bool OAIInput::is_video_generator_Set() const{
    return m_video_generator_isSet;
}

bool OAIInput::is_video_generator_Valid() const{
    return m_video_generator_isValid;
}

OAIInput_VideoSelector OAIInput::getVideoSelector() const {
    return m_video_selector;
}
void OAIInput::setVideoSelector(const OAIInput_VideoSelector &video_selector) {
    m_video_selector = video_selector;
    m_video_selector_isSet = true;
}

bool OAIInput::is_video_selector_Set() const{
    return m_video_selector_isSet;
}

bool OAIInput::is_video_selector_Valid() const{
    return m_video_selector_isValid;
}

bool OAIInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_input_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_input_filter_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_selector_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deblock_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decryption_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_denoise_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dolby_vision_metadata_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_enable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_inserter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_clippings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_scan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psi_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplemental_imps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_generator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
