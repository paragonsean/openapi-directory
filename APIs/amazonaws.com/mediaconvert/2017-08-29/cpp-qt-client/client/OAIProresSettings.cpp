/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProresSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProresSettings::OAIProresSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProresSettings::OAIProresSettings() {
    this->initializeModel();
}

OAIProresSettings::~OAIProresSettings() {}

void OAIProresSettings::initializeModel() {

    m_chroma_sampling_isSet = false;
    m_chroma_sampling_isValid = false;

    m_codec_profile_isSet = false;
    m_codec_profile_isValid = false;

    m_framerate_control_isSet = false;
    m_framerate_control_isValid = false;

    m_framerate_conversion_algorithm_isSet = false;
    m_framerate_conversion_algorithm_isValid = false;

    m_framerate_denominator_isSet = false;
    m_framerate_denominator_isValid = false;

    m_framerate_numerator_isSet = false;
    m_framerate_numerator_isValid = false;

    m_interlace_mode_isSet = false;
    m_interlace_mode_isValid = false;

    m_par_control_isSet = false;
    m_par_control_isValid = false;

    m_par_denominator_isSet = false;
    m_par_denominator_isValid = false;

    m_par_numerator_isSet = false;
    m_par_numerator_isValid = false;

    m_scan_type_conversion_mode_isSet = false;
    m_scan_type_conversion_mode_isValid = false;

    m_slow_pal_isSet = false;
    m_slow_pal_isValid = false;

    m_telecine_isSet = false;
    m_telecine_isValid = false;
}

void OAIProresSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProresSettings::fromJsonObject(QJsonObject json) {

    m_chroma_sampling_isValid = ::OpenAPI::fromJsonValue(m_chroma_sampling, json[QString("ChromaSampling")]);
    m_chroma_sampling_isSet = !json[QString("ChromaSampling")].isNull() && m_chroma_sampling_isValid;

    m_codec_profile_isValid = ::OpenAPI::fromJsonValue(m_codec_profile, json[QString("CodecProfile")]);
    m_codec_profile_isSet = !json[QString("CodecProfile")].isNull() && m_codec_profile_isValid;

    m_framerate_control_isValid = ::OpenAPI::fromJsonValue(m_framerate_control, json[QString("FramerateControl")]);
    m_framerate_control_isSet = !json[QString("FramerateControl")].isNull() && m_framerate_control_isValid;

    m_framerate_conversion_algorithm_isValid = ::OpenAPI::fromJsonValue(m_framerate_conversion_algorithm, json[QString("FramerateConversionAlgorithm")]);
    m_framerate_conversion_algorithm_isSet = !json[QString("FramerateConversionAlgorithm")].isNull() && m_framerate_conversion_algorithm_isValid;

    m_framerate_denominator_isValid = ::OpenAPI::fromJsonValue(m_framerate_denominator, json[QString("FramerateDenominator")]);
    m_framerate_denominator_isSet = !json[QString("FramerateDenominator")].isNull() && m_framerate_denominator_isValid;

    m_framerate_numerator_isValid = ::OpenAPI::fromJsonValue(m_framerate_numerator, json[QString("FramerateNumerator")]);
    m_framerate_numerator_isSet = !json[QString("FramerateNumerator")].isNull() && m_framerate_numerator_isValid;

    m_interlace_mode_isValid = ::OpenAPI::fromJsonValue(m_interlace_mode, json[QString("InterlaceMode")]);
    m_interlace_mode_isSet = !json[QString("InterlaceMode")].isNull() && m_interlace_mode_isValid;

    m_par_control_isValid = ::OpenAPI::fromJsonValue(m_par_control, json[QString("ParControl")]);
    m_par_control_isSet = !json[QString("ParControl")].isNull() && m_par_control_isValid;

    m_par_denominator_isValid = ::OpenAPI::fromJsonValue(m_par_denominator, json[QString("ParDenominator")]);
    m_par_denominator_isSet = !json[QString("ParDenominator")].isNull() && m_par_denominator_isValid;

    m_par_numerator_isValid = ::OpenAPI::fromJsonValue(m_par_numerator, json[QString("ParNumerator")]);
    m_par_numerator_isSet = !json[QString("ParNumerator")].isNull() && m_par_numerator_isValid;

    m_scan_type_conversion_mode_isValid = ::OpenAPI::fromJsonValue(m_scan_type_conversion_mode, json[QString("ScanTypeConversionMode")]);
    m_scan_type_conversion_mode_isSet = !json[QString("ScanTypeConversionMode")].isNull() && m_scan_type_conversion_mode_isValid;

    m_slow_pal_isValid = ::OpenAPI::fromJsonValue(m_slow_pal, json[QString("SlowPal")]);
    m_slow_pal_isSet = !json[QString("SlowPal")].isNull() && m_slow_pal_isValid;

    m_telecine_isValid = ::OpenAPI::fromJsonValue(m_telecine, json[QString("Telecine")]);
    m_telecine_isSet = !json[QString("Telecine")].isNull() && m_telecine_isValid;
}

QString OAIProresSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProresSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_chroma_sampling.isSet()) {
        obj.insert(QString("ChromaSampling"), ::OpenAPI::toJsonValue(m_chroma_sampling));
    }
    if (m_codec_profile.isSet()) {
        obj.insert(QString("CodecProfile"), ::OpenAPI::toJsonValue(m_codec_profile));
    }
    if (m_framerate_control.isSet()) {
        obj.insert(QString("FramerateControl"), ::OpenAPI::toJsonValue(m_framerate_control));
    }
    if (m_framerate_conversion_algorithm.isSet()) {
        obj.insert(QString("FramerateConversionAlgorithm"), ::OpenAPI::toJsonValue(m_framerate_conversion_algorithm));
    }
    if (m_framerate_denominator_isSet) {
        obj.insert(QString("FramerateDenominator"), ::OpenAPI::toJsonValue(m_framerate_denominator));
    }
    if (m_framerate_numerator_isSet) {
        obj.insert(QString("FramerateNumerator"), ::OpenAPI::toJsonValue(m_framerate_numerator));
    }
    if (m_interlace_mode.isSet()) {
        obj.insert(QString("InterlaceMode"), ::OpenAPI::toJsonValue(m_interlace_mode));
    }
    if (m_par_control.isSet()) {
        obj.insert(QString("ParControl"), ::OpenAPI::toJsonValue(m_par_control));
    }
    if (m_par_denominator_isSet) {
        obj.insert(QString("ParDenominator"), ::OpenAPI::toJsonValue(m_par_denominator));
    }
    if (m_par_numerator_isSet) {
        obj.insert(QString("ParNumerator"), ::OpenAPI::toJsonValue(m_par_numerator));
    }
    if (m_scan_type_conversion_mode.isSet()) {
        obj.insert(QString("ScanTypeConversionMode"), ::OpenAPI::toJsonValue(m_scan_type_conversion_mode));
    }
    if (m_slow_pal.isSet()) {
        obj.insert(QString("SlowPal"), ::OpenAPI::toJsonValue(m_slow_pal));
    }
    if (m_telecine.isSet()) {
        obj.insert(QString("Telecine"), ::OpenAPI::toJsonValue(m_telecine));
    }
    return obj;
}

OAIProresChromaSampling OAIProresSettings::getChromaSampling() const {
    return m_chroma_sampling;
}
void OAIProresSettings::setChromaSampling(const OAIProresChromaSampling &chroma_sampling) {
    m_chroma_sampling = chroma_sampling;
    m_chroma_sampling_isSet = true;
}

bool OAIProresSettings::is_chroma_sampling_Set() const{
    return m_chroma_sampling_isSet;
}

bool OAIProresSettings::is_chroma_sampling_Valid() const{
    return m_chroma_sampling_isValid;
}

OAIProresCodecProfile OAIProresSettings::getCodecProfile() const {
    return m_codec_profile;
}
void OAIProresSettings::setCodecProfile(const OAIProresCodecProfile &codec_profile) {
    m_codec_profile = codec_profile;
    m_codec_profile_isSet = true;
}

bool OAIProresSettings::is_codec_profile_Set() const{
    return m_codec_profile_isSet;
}

bool OAIProresSettings::is_codec_profile_Valid() const{
    return m_codec_profile_isValid;
}

OAIProresFramerateControl OAIProresSettings::getFramerateControl() const {
    return m_framerate_control;
}
void OAIProresSettings::setFramerateControl(const OAIProresFramerateControl &framerate_control) {
    m_framerate_control = framerate_control;
    m_framerate_control_isSet = true;
}

bool OAIProresSettings::is_framerate_control_Set() const{
    return m_framerate_control_isSet;
}

bool OAIProresSettings::is_framerate_control_Valid() const{
    return m_framerate_control_isValid;
}

OAIProresFramerateConversionAlgorithm OAIProresSettings::getFramerateConversionAlgorithm() const {
    return m_framerate_conversion_algorithm;
}
void OAIProresSettings::setFramerateConversionAlgorithm(const OAIProresFramerateConversionAlgorithm &framerate_conversion_algorithm) {
    m_framerate_conversion_algorithm = framerate_conversion_algorithm;
    m_framerate_conversion_algorithm_isSet = true;
}

bool OAIProresSettings::is_framerate_conversion_algorithm_Set() const{
    return m_framerate_conversion_algorithm_isSet;
}

bool OAIProresSettings::is_framerate_conversion_algorithm_Valid() const{
    return m_framerate_conversion_algorithm_isValid;
}

qint32 OAIProresSettings::getFramerateDenominator() const {
    return m_framerate_denominator;
}
void OAIProresSettings::setFramerateDenominator(const qint32 &framerate_denominator) {
    m_framerate_denominator = framerate_denominator;
    m_framerate_denominator_isSet = true;
}

bool OAIProresSettings::is_framerate_denominator_Set() const{
    return m_framerate_denominator_isSet;
}

bool OAIProresSettings::is_framerate_denominator_Valid() const{
    return m_framerate_denominator_isValid;
}

qint32 OAIProresSettings::getFramerateNumerator() const {
    return m_framerate_numerator;
}
void OAIProresSettings::setFramerateNumerator(const qint32 &framerate_numerator) {
    m_framerate_numerator = framerate_numerator;
    m_framerate_numerator_isSet = true;
}

bool OAIProresSettings::is_framerate_numerator_Set() const{
    return m_framerate_numerator_isSet;
}

bool OAIProresSettings::is_framerate_numerator_Valid() const{
    return m_framerate_numerator_isValid;
}

OAIProresInterlaceMode OAIProresSettings::getInterlaceMode() const {
    return m_interlace_mode;
}
void OAIProresSettings::setInterlaceMode(const OAIProresInterlaceMode &interlace_mode) {
    m_interlace_mode = interlace_mode;
    m_interlace_mode_isSet = true;
}

bool OAIProresSettings::is_interlace_mode_Set() const{
    return m_interlace_mode_isSet;
}

bool OAIProresSettings::is_interlace_mode_Valid() const{
    return m_interlace_mode_isValid;
}

OAIProresParControl OAIProresSettings::getParControl() const {
    return m_par_control;
}
void OAIProresSettings::setParControl(const OAIProresParControl &par_control) {
    m_par_control = par_control;
    m_par_control_isSet = true;
}

bool OAIProresSettings::is_par_control_Set() const{
    return m_par_control_isSet;
}

bool OAIProresSettings::is_par_control_Valid() const{
    return m_par_control_isValid;
}

qint32 OAIProresSettings::getParDenominator() const {
    return m_par_denominator;
}
void OAIProresSettings::setParDenominator(const qint32 &par_denominator) {
    m_par_denominator = par_denominator;
    m_par_denominator_isSet = true;
}

bool OAIProresSettings::is_par_denominator_Set() const{
    return m_par_denominator_isSet;
}

bool OAIProresSettings::is_par_denominator_Valid() const{
    return m_par_denominator_isValid;
}

qint32 OAIProresSettings::getParNumerator() const {
    return m_par_numerator;
}
void OAIProresSettings::setParNumerator(const qint32 &par_numerator) {
    m_par_numerator = par_numerator;
    m_par_numerator_isSet = true;
}

bool OAIProresSettings::is_par_numerator_Set() const{
    return m_par_numerator_isSet;
}

bool OAIProresSettings::is_par_numerator_Valid() const{
    return m_par_numerator_isValid;
}

OAIProresScanTypeConversionMode OAIProresSettings::getScanTypeConversionMode() const {
    return m_scan_type_conversion_mode;
}
void OAIProresSettings::setScanTypeConversionMode(const OAIProresScanTypeConversionMode &scan_type_conversion_mode) {
    m_scan_type_conversion_mode = scan_type_conversion_mode;
    m_scan_type_conversion_mode_isSet = true;
}

bool OAIProresSettings::is_scan_type_conversion_mode_Set() const{
    return m_scan_type_conversion_mode_isSet;
}

bool OAIProresSettings::is_scan_type_conversion_mode_Valid() const{
    return m_scan_type_conversion_mode_isValid;
}

OAIProresSlowPal OAIProresSettings::getSlowPal() const {
    return m_slow_pal;
}
void OAIProresSettings::setSlowPal(const OAIProresSlowPal &slow_pal) {
    m_slow_pal = slow_pal;
    m_slow_pal_isSet = true;
}

bool OAIProresSettings::is_slow_pal_Set() const{
    return m_slow_pal_isSet;
}

bool OAIProresSettings::is_slow_pal_Valid() const{
    return m_slow_pal_isValid;
}

OAIProresTelecine OAIProresSettings::getTelecine() const {
    return m_telecine;
}
void OAIProresSettings::setTelecine(const OAIProresTelecine &telecine) {
    m_telecine = telecine;
    m_telecine_isSet = true;
}

bool OAIProresSettings::is_telecine_Set() const{
    return m_telecine_isSet;
}

bool OAIProresSettings::is_telecine_Valid() const{
    return m_telecine_isValid;
}

bool OAIProresSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chroma_sampling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_conversion_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interlace_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type_conversion_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_pal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telecine.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProresSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
