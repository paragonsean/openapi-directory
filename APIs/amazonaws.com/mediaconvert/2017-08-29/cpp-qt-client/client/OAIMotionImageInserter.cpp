/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMotionImageInserter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMotionImageInserter::OAIMotionImageInserter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMotionImageInserter::OAIMotionImageInserter() {
    this->initializeModel();
}

OAIMotionImageInserter::~OAIMotionImageInserter() {}

void OAIMotionImageInserter::initializeModel() {

    m_framerate_isSet = false;
    m_framerate_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_insertion_mode_isSet = false;
    m_insertion_mode_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_playback_isSet = false;
    m_playback_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIMotionImageInserter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMotionImageInserter::fromJsonObject(QJsonObject json) {

    m_framerate_isValid = ::OpenAPI::fromJsonValue(m_framerate, json[QString("Framerate")]);
    m_framerate_isSet = !json[QString("Framerate")].isNull() && m_framerate_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("Input")]);
    m_input_isSet = !json[QString("Input")].isNull() && m_input_isValid;

    m_insertion_mode_isValid = ::OpenAPI::fromJsonValue(m_insertion_mode, json[QString("InsertionMode")]);
    m_insertion_mode_isSet = !json[QString("InsertionMode")].isNull() && m_insertion_mode_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("Offset")]);
    m_offset_isSet = !json[QString("Offset")].isNull() && m_offset_isValid;

    m_playback_isValid = ::OpenAPI::fromJsonValue(m_playback, json[QString("Playback")]);
    m_playback_isSet = !json[QString("Playback")].isNull() && m_playback_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;
}

QString OAIMotionImageInserter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMotionImageInserter::asJsonObject() const {
    QJsonObject obj;
    if (m_framerate.isSet()) {
        obj.insert(QString("Framerate"), ::OpenAPI::toJsonValue(m_framerate));
    }
    if (m_input_isSet) {
        obj.insert(QString("Input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_insertion_mode.isSet()) {
        obj.insert(QString("InsertionMode"), ::OpenAPI::toJsonValue(m_insertion_mode));
    }
    if (m_offset.isSet()) {
        obj.insert(QString("Offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_playback.isSet()) {
        obj.insert(QString("Playback"), ::OpenAPI::toJsonValue(m_playback));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

OAIMotionImageInserter_Framerate OAIMotionImageInserter::getFramerate() const {
    return m_framerate;
}
void OAIMotionImageInserter::setFramerate(const OAIMotionImageInserter_Framerate &framerate) {
    m_framerate = framerate;
    m_framerate_isSet = true;
}

bool OAIMotionImageInserter::is_framerate_Set() const{
    return m_framerate_isSet;
}

bool OAIMotionImageInserter::is_framerate_Valid() const{
    return m_framerate_isValid;
}

QString OAIMotionImageInserter::getInput() const {
    return m_input;
}
void OAIMotionImageInserter::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIMotionImageInserter::is_input_Set() const{
    return m_input_isSet;
}

bool OAIMotionImageInserter::is_input_Valid() const{
    return m_input_isValid;
}

OAIMotionImageInsertionMode OAIMotionImageInserter::getInsertionMode() const {
    return m_insertion_mode;
}
void OAIMotionImageInserter::setInsertionMode(const OAIMotionImageInsertionMode &insertion_mode) {
    m_insertion_mode = insertion_mode;
    m_insertion_mode_isSet = true;
}

bool OAIMotionImageInserter::is_insertion_mode_Set() const{
    return m_insertion_mode_isSet;
}

bool OAIMotionImageInserter::is_insertion_mode_Valid() const{
    return m_insertion_mode_isValid;
}

OAIMotionImageInserter_Offset OAIMotionImageInserter::getOffset() const {
    return m_offset;
}
void OAIMotionImageInserter::setOffset(const OAIMotionImageInserter_Offset &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIMotionImageInserter::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIMotionImageInserter::is_offset_Valid() const{
    return m_offset_isValid;
}

OAIMotionImagePlayback OAIMotionImageInserter::getPlayback() const {
    return m_playback;
}
void OAIMotionImageInserter::setPlayback(const OAIMotionImagePlayback &playback) {
    m_playback = playback;
    m_playback_isSet = true;
}

bool OAIMotionImageInserter::is_playback_Set() const{
    return m_playback_isSet;
}

bool OAIMotionImageInserter::is_playback_Valid() const{
    return m_playback_isValid;
}

QString OAIMotionImageInserter::getStartTime() const {
    return m_start_time;
}
void OAIMotionImageInserter::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMotionImageInserter::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMotionImageInserter::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIMotionImageInserter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_framerate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMotionImageInserter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
