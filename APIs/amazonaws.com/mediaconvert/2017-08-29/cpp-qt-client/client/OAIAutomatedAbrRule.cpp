/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomatedAbrRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomatedAbrRule::OAIAutomatedAbrRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomatedAbrRule::OAIAutomatedAbrRule() {
    this->initializeModel();
}

OAIAutomatedAbrRule::~OAIAutomatedAbrRule() {}

void OAIAutomatedAbrRule::initializeModel() {

    m_allowed_renditions_isSet = false;
    m_allowed_renditions_isValid = false;

    m_force_include_renditions_isSet = false;
    m_force_include_renditions_isValid = false;

    m_min_bottom_rendition_size_isSet = false;
    m_min_bottom_rendition_size_isValid = false;

    m_min_top_rendition_size_isSet = false;
    m_min_top_rendition_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAutomatedAbrRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomatedAbrRule::fromJsonObject(QJsonObject json) {

    m_allowed_renditions_isValid = ::OpenAPI::fromJsonValue(m_allowed_renditions, json[QString("AllowedRenditions")]);
    m_allowed_renditions_isSet = !json[QString("AllowedRenditions")].isNull() && m_allowed_renditions_isValid;

    m_force_include_renditions_isValid = ::OpenAPI::fromJsonValue(m_force_include_renditions, json[QString("ForceIncludeRenditions")]);
    m_force_include_renditions_isSet = !json[QString("ForceIncludeRenditions")].isNull() && m_force_include_renditions_isValid;

    m_min_bottom_rendition_size_isValid = ::OpenAPI::fromJsonValue(m_min_bottom_rendition_size, json[QString("MinBottomRenditionSize")]);
    m_min_bottom_rendition_size_isSet = !json[QString("MinBottomRenditionSize")].isNull() && m_min_bottom_rendition_size_isValid;

    m_min_top_rendition_size_isValid = ::OpenAPI::fromJsonValue(m_min_top_rendition_size, json[QString("MinTopRenditionSize")]);
    m_min_top_rendition_size_isSet = !json[QString("MinTopRenditionSize")].isNull() && m_min_top_rendition_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIAutomatedAbrRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomatedAbrRule::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_renditions.isSet()) {
        obj.insert(QString("AllowedRenditions"), ::OpenAPI::toJsonValue(m_allowed_renditions));
    }
    if (m_force_include_renditions.isSet()) {
        obj.insert(QString("ForceIncludeRenditions"), ::OpenAPI::toJsonValue(m_force_include_renditions));
    }
    if (m_min_bottom_rendition_size.isSet()) {
        obj.insert(QString("MinBottomRenditionSize"), ::OpenAPI::toJsonValue(m_min_bottom_rendition_size));
    }
    if (m_min_top_rendition_size.isSet()) {
        obj.insert(QString("MinTopRenditionSize"), ::OpenAPI::toJsonValue(m_min_top_rendition_size));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList OAIAutomatedAbrRule::getAllowedRenditions() const {
    return m_allowed_renditions;
}
void OAIAutomatedAbrRule::setAllowedRenditions(const QList &allowed_renditions) {
    m_allowed_renditions = allowed_renditions;
    m_allowed_renditions_isSet = true;
}

bool OAIAutomatedAbrRule::is_allowed_renditions_Set() const{
    return m_allowed_renditions_isSet;
}

bool OAIAutomatedAbrRule::is_allowed_renditions_Valid() const{
    return m_allowed_renditions_isValid;
}

QList OAIAutomatedAbrRule::getForceIncludeRenditions() const {
    return m_force_include_renditions;
}
void OAIAutomatedAbrRule::setForceIncludeRenditions(const QList &force_include_renditions) {
    m_force_include_renditions = force_include_renditions;
    m_force_include_renditions_isSet = true;
}

bool OAIAutomatedAbrRule::is_force_include_renditions_Set() const{
    return m_force_include_renditions_isSet;
}

bool OAIAutomatedAbrRule::is_force_include_renditions_Valid() const{
    return m_force_include_renditions_isValid;
}

OAIAutomatedAbrRule_MinBottomRenditionSize OAIAutomatedAbrRule::getMinBottomRenditionSize() const {
    return m_min_bottom_rendition_size;
}
void OAIAutomatedAbrRule::setMinBottomRenditionSize(const OAIAutomatedAbrRule_MinBottomRenditionSize &min_bottom_rendition_size) {
    m_min_bottom_rendition_size = min_bottom_rendition_size;
    m_min_bottom_rendition_size_isSet = true;
}

bool OAIAutomatedAbrRule::is_min_bottom_rendition_size_Set() const{
    return m_min_bottom_rendition_size_isSet;
}

bool OAIAutomatedAbrRule::is_min_bottom_rendition_size_Valid() const{
    return m_min_bottom_rendition_size_isValid;
}

OAIAutomatedAbrRule_MinTopRenditionSize OAIAutomatedAbrRule::getMinTopRenditionSize() const {
    return m_min_top_rendition_size;
}
void OAIAutomatedAbrRule::setMinTopRenditionSize(const OAIAutomatedAbrRule_MinTopRenditionSize &min_top_rendition_size) {
    m_min_top_rendition_size = min_top_rendition_size;
    m_min_top_rendition_size_isSet = true;
}

bool OAIAutomatedAbrRule::is_min_top_rendition_size_Set() const{
    return m_min_top_rendition_size_isSet;
}

bool OAIAutomatedAbrRule::is_min_top_rendition_size_Valid() const{
    return m_min_top_rendition_size_isValid;
}

OAIRuleType OAIAutomatedAbrRule::getType() const {
    return m_type;
}
void OAIAutomatedAbrRule::setType(const OAIRuleType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAutomatedAbrRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAutomatedAbrRule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAutomatedAbrRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_renditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_include_renditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_bottom_rendition_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_top_rendition_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomatedAbrRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
