/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJobResponse_Job.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJobResponse_Job::OAICreateJobResponse_Job(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJobResponse_Job::OAICreateJobResponse_Job() {
    this->initializeModel();
}

OAICreateJobResponse_Job::~OAICreateJobResponse_Job() {}

void OAICreateJobResponse_Job::initializeModel() {

    m_acceleration_settings_isSet = false;
    m_acceleration_settings_isValid = false;

    m_acceleration_status_isSet = false;
    m_acceleration_status_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_billing_tags_source_isSet = false;
    m_billing_tags_source_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_phase_isSet = false;
    m_current_phase_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_hop_destinations_isSet = false;
    m_hop_destinations_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_percent_complete_isSet = false;
    m_job_percent_complete_isValid = false;

    m_job_template_isSet = false;
    m_job_template_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_output_group_details_isSet = false;
    m_output_group_details_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_queue_transitions_isSet = false;
    m_queue_transitions_isValid = false;

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_simulate_reserved_queue_isSet = false;
    m_simulate_reserved_queue_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_update_interval_isSet = false;
    m_status_update_interval_isValid = false;

    m_timing_isSet = false;
    m_timing_isValid = false;

    m_user_metadata_isSet = false;
    m_user_metadata_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAICreateJobResponse_Job::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJobResponse_Job::fromJsonObject(QJsonObject json) {

    m_acceleration_settings_isValid = ::OpenAPI::fromJsonValue(m_acceleration_settings, json[QString("AccelerationSettings")]);
    m_acceleration_settings_isSet = !json[QString("AccelerationSettings")].isNull() && m_acceleration_settings_isValid;

    m_acceleration_status_isValid = ::OpenAPI::fromJsonValue(m_acceleration_status, json[QString("AccelerationStatus")]);
    m_acceleration_status_isSet = !json[QString("AccelerationStatus")].isNull() && m_acceleration_status_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_billing_tags_source_isValid = ::OpenAPI::fromJsonValue(m_billing_tags_source, json[QString("BillingTagsSource")]);
    m_billing_tags_source_isSet = !json[QString("BillingTagsSource")].isNull() && m_billing_tags_source_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_current_phase_isValid = ::OpenAPI::fromJsonValue(m_current_phase, json[QString("CurrentPhase")]);
    m_current_phase_isSet = !json[QString("CurrentPhase")].isNull() && m_current_phase_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_hop_destinations_isValid = ::OpenAPI::fromJsonValue(m_hop_destinations, json[QString("HopDestinations")]);
    m_hop_destinations_isSet = !json[QString("HopDestinations")].isNull() && m_hop_destinations_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_job_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_job_percent_complete, json[QString("JobPercentComplete")]);
    m_job_percent_complete_isSet = !json[QString("JobPercentComplete")].isNull() && m_job_percent_complete_isValid;

    m_job_template_isValid = ::OpenAPI::fromJsonValue(m_job_template, json[QString("JobTemplate")]);
    m_job_template_isSet = !json[QString("JobTemplate")].isNull() && m_job_template_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("Messages")]);
    m_messages_isSet = !json[QString("Messages")].isNull() && m_messages_isValid;

    m_output_group_details_isValid = ::OpenAPI::fromJsonValue(m_output_group_details, json[QString("OutputGroupDetails")]);
    m_output_group_details_isSet = !json[QString("OutputGroupDetails")].isNull() && m_output_group_details_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("Queue")]);
    m_queue_isSet = !json[QString("Queue")].isNull() && m_queue_isValid;

    m_queue_transitions_isValid = ::OpenAPI::fromJsonValue(m_queue_transitions, json[QString("QueueTransitions")]);
    m_queue_transitions_isSet = !json[QString("QueueTransitions")].isNull() && m_queue_transitions_isValid;

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("RetryCount")]);
    m_retry_count_isSet = !json[QString("RetryCount")].isNull() && m_retry_count_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;

    m_simulate_reserved_queue_isValid = ::OpenAPI::fromJsonValue(m_simulate_reserved_queue, json[QString("SimulateReservedQueue")]);
    m_simulate_reserved_queue_isSet = !json[QString("SimulateReservedQueue")].isNull() && m_simulate_reserved_queue_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_update_interval_isValid = ::OpenAPI::fromJsonValue(m_status_update_interval, json[QString("StatusUpdateInterval")]);
    m_status_update_interval_isSet = !json[QString("StatusUpdateInterval")].isNull() && m_status_update_interval_isValid;

    m_timing_isValid = ::OpenAPI::fromJsonValue(m_timing, json[QString("Timing")]);
    m_timing_isSet = !json[QString("Timing")].isNull() && m_timing_isValid;

    m_user_metadata_isValid = ::OpenAPI::fromJsonValue(m_user_metadata, json[QString("UserMetadata")]);
    m_user_metadata_isSet = !json[QString("UserMetadata")].isNull() && m_user_metadata_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAICreateJobResponse_Job::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJobResponse_Job::asJsonObject() const {
    QJsonObject obj;
    if (m_acceleration_settings.isSet()) {
        obj.insert(QString("AccelerationSettings"), ::OpenAPI::toJsonValue(m_acceleration_settings));
    }
    if (m_acceleration_status.isSet()) {
        obj.insert(QString("AccelerationStatus"), ::OpenAPI::toJsonValue(m_acceleration_status));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_billing_tags_source.isSet()) {
        obj.insert(QString("BillingTagsSource"), ::OpenAPI::toJsonValue(m_billing_tags_source));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_phase.isSet()) {
        obj.insert(QString("CurrentPhase"), ::OpenAPI::toJsonValue(m_current_phase));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_hop_destinations.isSet()) {
        obj.insert(QString("HopDestinations"), ::OpenAPI::toJsonValue(m_hop_destinations));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_percent_complete_isSet) {
        obj.insert(QString("JobPercentComplete"), ::OpenAPI::toJsonValue(m_job_percent_complete));
    }
    if (m_job_template_isSet) {
        obj.insert(QString("JobTemplate"), ::OpenAPI::toJsonValue(m_job_template));
    }
    if (m_messages.isSet()) {
        obj.insert(QString("Messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_output_group_details.isSet()) {
        obj.insert(QString("OutputGroupDetails"), ::OpenAPI::toJsonValue(m_output_group_details));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_queue_isSet) {
        obj.insert(QString("Queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_queue_transitions.isSet()) {
        obj.insert(QString("QueueTransitions"), ::OpenAPI::toJsonValue(m_queue_transitions));
    }
    if (m_retry_count_isSet) {
        obj.insert(QString("RetryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_simulate_reserved_queue.isSet()) {
        obj.insert(QString("SimulateReservedQueue"), ::OpenAPI::toJsonValue(m_simulate_reserved_queue));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_update_interval.isSet()) {
        obj.insert(QString("StatusUpdateInterval"), ::OpenAPI::toJsonValue(m_status_update_interval));
    }
    if (m_timing.isSet()) {
        obj.insert(QString("Timing"), ::OpenAPI::toJsonValue(m_timing));
    }
    if (m_user_metadata.isSet()) {
        obj.insert(QString("UserMetadata"), ::OpenAPI::toJsonValue(m_user_metadata));
    }
    if (m_warnings.isSet()) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

OAIJob_AccelerationSettings OAICreateJobResponse_Job::getAccelerationSettings() const {
    return m_acceleration_settings;
}
void OAICreateJobResponse_Job::setAccelerationSettings(const OAIJob_AccelerationSettings &acceleration_settings) {
    m_acceleration_settings = acceleration_settings;
    m_acceleration_settings_isSet = true;
}

bool OAICreateJobResponse_Job::is_acceleration_settings_Set() const{
    return m_acceleration_settings_isSet;
}

bool OAICreateJobResponse_Job::is_acceleration_settings_Valid() const{
    return m_acceleration_settings_isValid;
}

OAIAccelerationStatus OAICreateJobResponse_Job::getAccelerationStatus() const {
    return m_acceleration_status;
}
void OAICreateJobResponse_Job::setAccelerationStatus(const OAIAccelerationStatus &acceleration_status) {
    m_acceleration_status = acceleration_status;
    m_acceleration_status_isSet = true;
}

bool OAICreateJobResponse_Job::is_acceleration_status_Set() const{
    return m_acceleration_status_isSet;
}

bool OAICreateJobResponse_Job::is_acceleration_status_Valid() const{
    return m_acceleration_status_isValid;
}

QString OAICreateJobResponse_Job::getArn() const {
    return m_arn;
}
void OAICreateJobResponse_Job::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateJobResponse_Job::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateJobResponse_Job::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIBillingTagsSource OAICreateJobResponse_Job::getBillingTagsSource() const {
    return m_billing_tags_source;
}
void OAICreateJobResponse_Job::setBillingTagsSource(const OAIBillingTagsSource &billing_tags_source) {
    m_billing_tags_source = billing_tags_source;
    m_billing_tags_source_isSet = true;
}

bool OAICreateJobResponse_Job::is_billing_tags_source_Set() const{
    return m_billing_tags_source_isSet;
}

bool OAICreateJobResponse_Job::is_billing_tags_source_Valid() const{
    return m_billing_tags_source_isValid;
}

QString OAICreateJobResponse_Job::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateJobResponse_Job::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateJobResponse_Job::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateJobResponse_Job::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QDateTime OAICreateJobResponse_Job::getCreatedAt() const {
    return m_created_at;
}
void OAICreateJobResponse_Job::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateJobResponse_Job::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateJobResponse_Job::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIJobPhase OAICreateJobResponse_Job::getCurrentPhase() const {
    return m_current_phase;
}
void OAICreateJobResponse_Job::setCurrentPhase(const OAIJobPhase &current_phase) {
    m_current_phase = current_phase;
    m_current_phase_isSet = true;
}

bool OAICreateJobResponse_Job::is_current_phase_Set() const{
    return m_current_phase_isSet;
}

bool OAICreateJobResponse_Job::is_current_phase_Valid() const{
    return m_current_phase_isValid;
}

qint32 OAICreateJobResponse_Job::getErrorCode() const {
    return m_error_code;
}
void OAICreateJobResponse_Job::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAICreateJobResponse_Job::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAICreateJobResponse_Job::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAICreateJobResponse_Job::getErrorMessage() const {
    return m_error_message;
}
void OAICreateJobResponse_Job::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAICreateJobResponse_Job::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAICreateJobResponse_Job::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList OAICreateJobResponse_Job::getHopDestinations() const {
    return m_hop_destinations;
}
void OAICreateJobResponse_Job::setHopDestinations(const QList &hop_destinations) {
    m_hop_destinations = hop_destinations;
    m_hop_destinations_isSet = true;
}

bool OAICreateJobResponse_Job::is_hop_destinations_Set() const{
    return m_hop_destinations_isSet;
}

bool OAICreateJobResponse_Job::is_hop_destinations_Valid() const{
    return m_hop_destinations_isValid;
}

QString OAICreateJobResponse_Job::getId() const {
    return m_id;
}
void OAICreateJobResponse_Job::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateJobResponse_Job::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateJobResponse_Job::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICreateJobResponse_Job::getJobPercentComplete() const {
    return m_job_percent_complete;
}
void OAICreateJobResponse_Job::setJobPercentComplete(const qint32 &job_percent_complete) {
    m_job_percent_complete = job_percent_complete;
    m_job_percent_complete_isSet = true;
}

bool OAICreateJobResponse_Job::is_job_percent_complete_Set() const{
    return m_job_percent_complete_isSet;
}

bool OAICreateJobResponse_Job::is_job_percent_complete_Valid() const{
    return m_job_percent_complete_isValid;
}

QString OAICreateJobResponse_Job::getJobTemplate() const {
    return m_job_template;
}
void OAICreateJobResponse_Job::setJobTemplate(const QString &job_template) {
    m_job_template = job_template;
    m_job_template_isSet = true;
}

bool OAICreateJobResponse_Job::is_job_template_Set() const{
    return m_job_template_isSet;
}

bool OAICreateJobResponse_Job::is_job_template_Valid() const{
    return m_job_template_isValid;
}

OAIJob_Messages OAICreateJobResponse_Job::getMessages() const {
    return m_messages;
}
void OAICreateJobResponse_Job::setMessages(const OAIJob_Messages &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAICreateJobResponse_Job::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAICreateJobResponse_Job::is_messages_Valid() const{
    return m_messages_isValid;
}

QList OAICreateJobResponse_Job::getOutputGroupDetails() const {
    return m_output_group_details;
}
void OAICreateJobResponse_Job::setOutputGroupDetails(const QList &output_group_details) {
    m_output_group_details = output_group_details;
    m_output_group_details_isSet = true;
}

bool OAICreateJobResponse_Job::is_output_group_details_Set() const{
    return m_output_group_details_isSet;
}

bool OAICreateJobResponse_Job::is_output_group_details_Valid() const{
    return m_output_group_details_isValid;
}

qint32 OAICreateJobResponse_Job::getPriority() const {
    return m_priority;
}
void OAICreateJobResponse_Job::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICreateJobResponse_Job::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICreateJobResponse_Job::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAICreateJobResponse_Job::getQueue() const {
    return m_queue;
}
void OAICreateJobResponse_Job::setQueue(const QString &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAICreateJobResponse_Job::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAICreateJobResponse_Job::is_queue_Valid() const{
    return m_queue_isValid;
}

QList OAICreateJobResponse_Job::getQueueTransitions() const {
    return m_queue_transitions;
}
void OAICreateJobResponse_Job::setQueueTransitions(const QList &queue_transitions) {
    m_queue_transitions = queue_transitions;
    m_queue_transitions_isSet = true;
}

bool OAICreateJobResponse_Job::is_queue_transitions_Set() const{
    return m_queue_transitions_isSet;
}

bool OAICreateJobResponse_Job::is_queue_transitions_Valid() const{
    return m_queue_transitions_isValid;
}

qint32 OAICreateJobResponse_Job::getRetryCount() const {
    return m_retry_count;
}
void OAICreateJobResponse_Job::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAICreateJobResponse_Job::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAICreateJobResponse_Job::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

QString OAICreateJobResponse_Job::getRole() const {
    return m_role;
}
void OAICreateJobResponse_Job::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICreateJobResponse_Job::is_role_Set() const{
    return m_role_isSet;
}

bool OAICreateJobResponse_Job::is_role_Valid() const{
    return m_role_isValid;
}

OAICreateJobRequest_Settings OAICreateJobResponse_Job::getSettings() const {
    return m_settings;
}
void OAICreateJobResponse_Job::setSettings(const OAICreateJobRequest_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAICreateJobResponse_Job::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAICreateJobResponse_Job::is_settings_Valid() const{
    return m_settings_isValid;
}

OAISimulateReservedQueue OAICreateJobResponse_Job::getSimulateReservedQueue() const {
    return m_simulate_reserved_queue;
}
void OAICreateJobResponse_Job::setSimulateReservedQueue(const OAISimulateReservedQueue &simulate_reserved_queue) {
    m_simulate_reserved_queue = simulate_reserved_queue;
    m_simulate_reserved_queue_isSet = true;
}

bool OAICreateJobResponse_Job::is_simulate_reserved_queue_Set() const{
    return m_simulate_reserved_queue_isSet;
}

bool OAICreateJobResponse_Job::is_simulate_reserved_queue_Valid() const{
    return m_simulate_reserved_queue_isValid;
}

OAIJobStatus OAICreateJobResponse_Job::getStatus() const {
    return m_status;
}
void OAICreateJobResponse_Job::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateJobResponse_Job::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateJobResponse_Job::is_status_Valid() const{
    return m_status_isValid;
}

OAIStatusUpdateInterval OAICreateJobResponse_Job::getStatusUpdateInterval() const {
    return m_status_update_interval;
}
void OAICreateJobResponse_Job::setStatusUpdateInterval(const OAIStatusUpdateInterval &status_update_interval) {
    m_status_update_interval = status_update_interval;
    m_status_update_interval_isSet = true;
}

bool OAICreateJobResponse_Job::is_status_update_interval_Set() const{
    return m_status_update_interval_isSet;
}

bool OAICreateJobResponse_Job::is_status_update_interval_Valid() const{
    return m_status_update_interval_isValid;
}

OAIJob_Timing OAICreateJobResponse_Job::getTiming() const {
    return m_timing;
}
void OAICreateJobResponse_Job::setTiming(const OAIJob_Timing &timing) {
    m_timing = timing;
    m_timing_isSet = true;
}

bool OAICreateJobResponse_Job::is_timing_Set() const{
    return m_timing_isSet;
}

bool OAICreateJobResponse_Job::is_timing_Valid() const{
    return m_timing_isValid;
}

QMap OAICreateJobResponse_Job::getUserMetadata() const {
    return m_user_metadata;
}
void OAICreateJobResponse_Job::setUserMetadata(const QMap &user_metadata) {
    m_user_metadata = user_metadata;
    m_user_metadata_isSet = true;
}

bool OAICreateJobResponse_Job::is_user_metadata_Set() const{
    return m_user_metadata_isSet;
}

bool OAICreateJobResponse_Job::is_user_metadata_Valid() const{
    return m_user_metadata_isValid;
}

QList OAICreateJobResponse_Job::getWarnings() const {
    return m_warnings;
}
void OAICreateJobResponse_Job::setWarnings(const QList &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAICreateJobResponse_Job::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAICreateJobResponse_Job::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAICreateJobResponse_Job::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acceleration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_acceleration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_tags_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hop_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_group_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_transitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulate_reserved_queue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_update_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJobResponse_Job::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_isValid && m_settings_isValid && true;
}

} // namespace OpenAPI
