/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerSettings_MpdSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerSettings_MpdSettings::OAIContainerSettings_MpdSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerSettings_MpdSettings::OAIContainerSettings_MpdSettings() {
    this->initializeModel();
}

OAIContainerSettings_MpdSettings::~OAIContainerSettings_MpdSettings() {}

void OAIContainerSettings_MpdSettings::initializeModel() {

    m_accessibility_caption_hints_isSet = false;
    m_accessibility_caption_hints_isValid = false;

    m_audio_duration_isSet = false;
    m_audio_duration_isValid = false;

    m_caption_container_type_isSet = false;
    m_caption_container_type_isValid = false;

    m_klv_metadata_isSet = false;
    m_klv_metadata_isValid = false;

    m_manifest_metadata_signaling_isSet = false;
    m_manifest_metadata_signaling_isValid = false;

    m_scte35_esam_isSet = false;
    m_scte35_esam_isValid = false;

    m_scte35_source_isSet = false;
    m_scte35_source_isValid = false;

    m_timed_metadata_isSet = false;
    m_timed_metadata_isValid = false;

    m_timed_metadata_box_version_isSet = false;
    m_timed_metadata_box_version_isValid = false;

    m_timed_metadata_scheme_id_uri_isSet = false;
    m_timed_metadata_scheme_id_uri_isValid = false;

    m_timed_metadata_value_isSet = false;
    m_timed_metadata_value_isValid = false;
}

void OAIContainerSettings_MpdSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerSettings_MpdSettings::fromJsonObject(QJsonObject json) {

    m_accessibility_caption_hints_isValid = ::OpenAPI::fromJsonValue(m_accessibility_caption_hints, json[QString("AccessibilityCaptionHints")]);
    m_accessibility_caption_hints_isSet = !json[QString("AccessibilityCaptionHints")].isNull() && m_accessibility_caption_hints_isValid;

    m_audio_duration_isValid = ::OpenAPI::fromJsonValue(m_audio_duration, json[QString("AudioDuration")]);
    m_audio_duration_isSet = !json[QString("AudioDuration")].isNull() && m_audio_duration_isValid;

    m_caption_container_type_isValid = ::OpenAPI::fromJsonValue(m_caption_container_type, json[QString("CaptionContainerType")]);
    m_caption_container_type_isSet = !json[QString("CaptionContainerType")].isNull() && m_caption_container_type_isValid;

    m_klv_metadata_isValid = ::OpenAPI::fromJsonValue(m_klv_metadata, json[QString("KlvMetadata")]);
    m_klv_metadata_isSet = !json[QString("KlvMetadata")].isNull() && m_klv_metadata_isValid;

    m_manifest_metadata_signaling_isValid = ::OpenAPI::fromJsonValue(m_manifest_metadata_signaling, json[QString("ManifestMetadataSignaling")]);
    m_manifest_metadata_signaling_isSet = !json[QString("ManifestMetadataSignaling")].isNull() && m_manifest_metadata_signaling_isValid;

    m_scte35_esam_isValid = ::OpenAPI::fromJsonValue(m_scte35_esam, json[QString("Scte35Esam")]);
    m_scte35_esam_isSet = !json[QString("Scte35Esam")].isNull() && m_scte35_esam_isValid;

    m_scte35_source_isValid = ::OpenAPI::fromJsonValue(m_scte35_source, json[QString("Scte35Source")]);
    m_scte35_source_isSet = !json[QString("Scte35Source")].isNull() && m_scte35_source_isValid;

    m_timed_metadata_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata, json[QString("TimedMetadata")]);
    m_timed_metadata_isSet = !json[QString("TimedMetadata")].isNull() && m_timed_metadata_isValid;

    m_timed_metadata_box_version_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_box_version, json[QString("TimedMetadataBoxVersion")]);
    m_timed_metadata_box_version_isSet = !json[QString("TimedMetadataBoxVersion")].isNull() && m_timed_metadata_box_version_isValid;

    m_timed_metadata_scheme_id_uri_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_scheme_id_uri, json[QString("TimedMetadataSchemeIdUri")]);
    m_timed_metadata_scheme_id_uri_isSet = !json[QString("TimedMetadataSchemeIdUri")].isNull() && m_timed_metadata_scheme_id_uri_isValid;

    m_timed_metadata_value_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_value, json[QString("TimedMetadataValue")]);
    m_timed_metadata_value_isSet = !json[QString("TimedMetadataValue")].isNull() && m_timed_metadata_value_isValid;
}

QString OAIContainerSettings_MpdSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerSettings_MpdSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility_caption_hints.isSet()) {
        obj.insert(QString("AccessibilityCaptionHints"), ::OpenAPI::toJsonValue(m_accessibility_caption_hints));
    }
    if (m_audio_duration.isSet()) {
        obj.insert(QString("AudioDuration"), ::OpenAPI::toJsonValue(m_audio_duration));
    }
    if (m_caption_container_type.isSet()) {
        obj.insert(QString("CaptionContainerType"), ::OpenAPI::toJsonValue(m_caption_container_type));
    }
    if (m_klv_metadata.isSet()) {
        obj.insert(QString("KlvMetadata"), ::OpenAPI::toJsonValue(m_klv_metadata));
    }
    if (m_manifest_metadata_signaling.isSet()) {
        obj.insert(QString("ManifestMetadataSignaling"), ::OpenAPI::toJsonValue(m_manifest_metadata_signaling));
    }
    if (m_scte35_esam.isSet()) {
        obj.insert(QString("Scte35Esam"), ::OpenAPI::toJsonValue(m_scte35_esam));
    }
    if (m_scte35_source.isSet()) {
        obj.insert(QString("Scte35Source"), ::OpenAPI::toJsonValue(m_scte35_source));
    }
    if (m_timed_metadata.isSet()) {
        obj.insert(QString("TimedMetadata"), ::OpenAPI::toJsonValue(m_timed_metadata));
    }
    if (m_timed_metadata_box_version.isSet()) {
        obj.insert(QString("TimedMetadataBoxVersion"), ::OpenAPI::toJsonValue(m_timed_metadata_box_version));
    }
    if (m_timed_metadata_scheme_id_uri_isSet) {
        obj.insert(QString("TimedMetadataSchemeIdUri"), ::OpenAPI::toJsonValue(m_timed_metadata_scheme_id_uri));
    }
    if (m_timed_metadata_value_isSet) {
        obj.insert(QString("TimedMetadataValue"), ::OpenAPI::toJsonValue(m_timed_metadata_value));
    }
    return obj;
}

OAIMpdAccessibilityCaptionHints OAIContainerSettings_MpdSettings::getAccessibilityCaptionHints() const {
    return m_accessibility_caption_hints;
}
void OAIContainerSettings_MpdSettings::setAccessibilityCaptionHints(const OAIMpdAccessibilityCaptionHints &accessibility_caption_hints) {
    m_accessibility_caption_hints = accessibility_caption_hints;
    m_accessibility_caption_hints_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_accessibility_caption_hints_Set() const{
    return m_accessibility_caption_hints_isSet;
}

bool OAIContainerSettings_MpdSettings::is_accessibility_caption_hints_Valid() const{
    return m_accessibility_caption_hints_isValid;
}

OAIMpdAudioDuration OAIContainerSettings_MpdSettings::getAudioDuration() const {
    return m_audio_duration;
}
void OAIContainerSettings_MpdSettings::setAudioDuration(const OAIMpdAudioDuration &audio_duration) {
    m_audio_duration = audio_duration;
    m_audio_duration_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_audio_duration_Set() const{
    return m_audio_duration_isSet;
}

bool OAIContainerSettings_MpdSettings::is_audio_duration_Valid() const{
    return m_audio_duration_isValid;
}

OAIMpdCaptionContainerType OAIContainerSettings_MpdSettings::getCaptionContainerType() const {
    return m_caption_container_type;
}
void OAIContainerSettings_MpdSettings::setCaptionContainerType(const OAIMpdCaptionContainerType &caption_container_type) {
    m_caption_container_type = caption_container_type;
    m_caption_container_type_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_caption_container_type_Set() const{
    return m_caption_container_type_isSet;
}

bool OAIContainerSettings_MpdSettings::is_caption_container_type_Valid() const{
    return m_caption_container_type_isValid;
}

OAIMpdKlvMetadata OAIContainerSettings_MpdSettings::getKlvMetadata() const {
    return m_klv_metadata;
}
void OAIContainerSettings_MpdSettings::setKlvMetadata(const OAIMpdKlvMetadata &klv_metadata) {
    m_klv_metadata = klv_metadata;
    m_klv_metadata_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_klv_metadata_Set() const{
    return m_klv_metadata_isSet;
}

bool OAIContainerSettings_MpdSettings::is_klv_metadata_Valid() const{
    return m_klv_metadata_isValid;
}

OAIMpdManifestMetadataSignaling OAIContainerSettings_MpdSettings::getManifestMetadataSignaling() const {
    return m_manifest_metadata_signaling;
}
void OAIContainerSettings_MpdSettings::setManifestMetadataSignaling(const OAIMpdManifestMetadataSignaling &manifest_metadata_signaling) {
    m_manifest_metadata_signaling = manifest_metadata_signaling;
    m_manifest_metadata_signaling_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_manifest_metadata_signaling_Set() const{
    return m_manifest_metadata_signaling_isSet;
}

bool OAIContainerSettings_MpdSettings::is_manifest_metadata_signaling_Valid() const{
    return m_manifest_metadata_signaling_isValid;
}

OAIMpdScte35Esam OAIContainerSettings_MpdSettings::getScte35Esam() const {
    return m_scte35_esam;
}
void OAIContainerSettings_MpdSettings::setScte35Esam(const OAIMpdScte35Esam &scte35_esam) {
    m_scte35_esam = scte35_esam;
    m_scte35_esam_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_scte35_esam_Set() const{
    return m_scte35_esam_isSet;
}

bool OAIContainerSettings_MpdSettings::is_scte35_esam_Valid() const{
    return m_scte35_esam_isValid;
}

OAIMpdScte35Source OAIContainerSettings_MpdSettings::getScte35Source() const {
    return m_scte35_source;
}
void OAIContainerSettings_MpdSettings::setScte35Source(const OAIMpdScte35Source &scte35_source) {
    m_scte35_source = scte35_source;
    m_scte35_source_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_scte35_source_Set() const{
    return m_scte35_source_isSet;
}

bool OAIContainerSettings_MpdSettings::is_scte35_source_Valid() const{
    return m_scte35_source_isValid;
}

OAIMpdTimedMetadata OAIContainerSettings_MpdSettings::getTimedMetadata() const {
    return m_timed_metadata;
}
void OAIContainerSettings_MpdSettings::setTimedMetadata(const OAIMpdTimedMetadata &timed_metadata) {
    m_timed_metadata = timed_metadata;
    m_timed_metadata_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_timed_metadata_Set() const{
    return m_timed_metadata_isSet;
}

bool OAIContainerSettings_MpdSettings::is_timed_metadata_Valid() const{
    return m_timed_metadata_isValid;
}

OAIMpdTimedMetadataBoxVersion OAIContainerSettings_MpdSettings::getTimedMetadataBoxVersion() const {
    return m_timed_metadata_box_version;
}
void OAIContainerSettings_MpdSettings::setTimedMetadataBoxVersion(const OAIMpdTimedMetadataBoxVersion &timed_metadata_box_version) {
    m_timed_metadata_box_version = timed_metadata_box_version;
    m_timed_metadata_box_version_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_timed_metadata_box_version_Set() const{
    return m_timed_metadata_box_version_isSet;
}

bool OAIContainerSettings_MpdSettings::is_timed_metadata_box_version_Valid() const{
    return m_timed_metadata_box_version_isValid;
}

QString OAIContainerSettings_MpdSettings::getTimedMetadataSchemeIdUri() const {
    return m_timed_metadata_scheme_id_uri;
}
void OAIContainerSettings_MpdSettings::setTimedMetadataSchemeIdUri(const QString &timed_metadata_scheme_id_uri) {
    m_timed_metadata_scheme_id_uri = timed_metadata_scheme_id_uri;
    m_timed_metadata_scheme_id_uri_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_timed_metadata_scheme_id_uri_Set() const{
    return m_timed_metadata_scheme_id_uri_isSet;
}

bool OAIContainerSettings_MpdSettings::is_timed_metadata_scheme_id_uri_Valid() const{
    return m_timed_metadata_scheme_id_uri_isValid;
}

QString OAIContainerSettings_MpdSettings::getTimedMetadataValue() const {
    return m_timed_metadata_value;
}
void OAIContainerSettings_MpdSettings::setTimedMetadataValue(const QString &timed_metadata_value) {
    m_timed_metadata_value = timed_metadata_value;
    m_timed_metadata_value_isSet = true;
}

bool OAIContainerSettings_MpdSettings::is_timed_metadata_value_Set() const{
    return m_timed_metadata_value_isSet;
}

bool OAIContainerSettings_MpdSettings::is_timed_metadata_value_Valid() const{
    return m_timed_metadata_value_isValid;
}

bool OAIContainerSettings_MpdSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility_caption_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_container_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_klv_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_metadata_signaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_esam.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_box_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_scheme_id_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerSettings_MpdSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
