/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMpeg2FramerateConversionAlgorithm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMpeg2FramerateConversionAlgorithm::OAIMpeg2FramerateConversionAlgorithm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMpeg2FramerateConversionAlgorithm::OAIMpeg2FramerateConversionAlgorithm() {
    this->initializeModel();
}

OAIMpeg2FramerateConversionAlgorithm::~OAIMpeg2FramerateConversionAlgorithm() {}

void OAIMpeg2FramerateConversionAlgorithm::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMpeg2FramerateConversionAlgorithm::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMpeg2FramerateConversionAlgorithm::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DUPLICATE_DROP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMpeg2FramerateConversionAlgorithm::DUPLICATE_DROP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERPOLATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMpeg2FramerateConversionAlgorithm::INTERPOLATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FRAMEFORMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMpeg2FramerateConversionAlgorithm::FRAMEFORMER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMpeg2FramerateConversionAlgorithm::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMpeg2FramerateConversionAlgorithm::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMpeg2FramerateConversionAlgorithm::DUPLICATE_DROP:
            val = "DUPLICATE_DROP";
            break;
        case eOAIMpeg2FramerateConversionAlgorithm::INTERPOLATE:
            val = "INTERPOLATE";
            break;
        case eOAIMpeg2FramerateConversionAlgorithm::FRAMEFORMER:
            val = "FRAMEFORMER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMpeg2FramerateConversionAlgorithm::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMpeg2FramerateConversionAlgorithm::eOAIMpeg2FramerateConversionAlgorithm OAIMpeg2FramerateConversionAlgorithm::getValue() const {
    return m_value;
}

void OAIMpeg2FramerateConversionAlgorithm::setValue(const OAIMpeg2FramerateConversionAlgorithm::eOAIMpeg2FramerateConversionAlgorithm& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMpeg2FramerateConversionAlgorithm::isSet() const {
    
    return m_value_isSet;
}

bool OAIMpeg2FramerateConversionAlgorithm::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
