/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoCodecSettings_Vc3Settings.h
 *
 * 
 */

#ifndef OAIVideoCodecSettings_Vc3Settings_H
#define OAIVideoCodecSettings_Vc3Settings_H

#include <QJsonObject>

#include "OAIVc3Class.h"
#include "OAIVc3FramerateControl.h"
#include "OAIVc3FramerateConversionAlgorithm.h"
#include "OAIVc3InterlaceMode.h"
#include "OAIVc3ScanTypeConversionMode.h"
#include "OAIVc3SlowPal.h"
#include "OAIVc3Telecine.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVideoCodecSettings_Vc3Settings : public OAIObject {
public:
    OAIVideoCodecSettings_Vc3Settings();
    OAIVideoCodecSettings_Vc3Settings(QString json);
    ~OAIVideoCodecSettings_Vc3Settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIVc3FramerateControl getFramerateControl() const;
    void setFramerateControl(const OAIVc3FramerateControl &framerate_control);
    bool is_framerate_control_Set() const;
    bool is_framerate_control_Valid() const;

    OAIVc3FramerateConversionAlgorithm getFramerateConversionAlgorithm() const;
    void setFramerateConversionAlgorithm(const OAIVc3FramerateConversionAlgorithm &framerate_conversion_algorithm);
    bool is_framerate_conversion_algorithm_Set() const;
    bool is_framerate_conversion_algorithm_Valid() const;

    qint32 getFramerateDenominator() const;
    void setFramerateDenominator(const qint32 &framerate_denominator);
    bool is_framerate_denominator_Set() const;
    bool is_framerate_denominator_Valid() const;

    qint32 getFramerateNumerator() const;
    void setFramerateNumerator(const qint32 &framerate_numerator);
    bool is_framerate_numerator_Set() const;
    bool is_framerate_numerator_Valid() const;

    OAIVc3InterlaceMode getInterlaceMode() const;
    void setInterlaceMode(const OAIVc3InterlaceMode &interlace_mode);
    bool is_interlace_mode_Set() const;
    bool is_interlace_mode_Valid() const;

    OAIVc3ScanTypeConversionMode getScanTypeConversionMode() const;
    void setScanTypeConversionMode(const OAIVc3ScanTypeConversionMode &scan_type_conversion_mode);
    bool is_scan_type_conversion_mode_Set() const;
    bool is_scan_type_conversion_mode_Valid() const;

    OAIVc3SlowPal getSlowPal() const;
    void setSlowPal(const OAIVc3SlowPal &slow_pal);
    bool is_slow_pal_Set() const;
    bool is_slow_pal_Valid() const;

    OAIVc3Telecine getTelecine() const;
    void setTelecine(const OAIVc3Telecine &telecine);
    bool is_telecine_Set() const;
    bool is_telecine_Valid() const;

    OAIVc3Class getVc3Class() const;
    void setVc3Class(const OAIVc3Class &vc3_class);
    bool is_vc3_class_Set() const;
    bool is_vc3_class_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIVc3FramerateControl m_framerate_control;
    bool m_framerate_control_isSet;
    bool m_framerate_control_isValid;

    OAIVc3FramerateConversionAlgorithm m_framerate_conversion_algorithm;
    bool m_framerate_conversion_algorithm_isSet;
    bool m_framerate_conversion_algorithm_isValid;

    qint32 m_framerate_denominator;
    bool m_framerate_denominator_isSet;
    bool m_framerate_denominator_isValid;

    qint32 m_framerate_numerator;
    bool m_framerate_numerator_isSet;
    bool m_framerate_numerator_isValid;

    OAIVc3InterlaceMode m_interlace_mode;
    bool m_interlace_mode_isSet;
    bool m_interlace_mode_isValid;

    OAIVc3ScanTypeConversionMode m_scan_type_conversion_mode;
    bool m_scan_type_conversion_mode_isSet;
    bool m_scan_type_conversion_mode_isValid;

    OAIVc3SlowPal m_slow_pal;
    bool m_slow_pal_isSet;
    bool m_slow_pal_isValid;

    OAIVc3Telecine m_telecine;
    bool m_telecine_isSet;
    bool m_telecine_isValid;

    OAIVc3Class m_vc3_class;
    bool m_vc3_class_isSet;
    bool m_vc3_class_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoCodecSettings_Vc3Settings)

#endif // OAIVideoCodecSettings_Vc3Settings_H
