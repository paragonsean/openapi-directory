/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEac3AtmosCodingMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEac3AtmosCodingMode::OAIEac3AtmosCodingMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEac3AtmosCodingMode::OAIEac3AtmosCodingMode() {
    this->initializeModel();
}

OAIEac3AtmosCodingMode::~OAIEac3AtmosCodingMode() {}

void OAIEac3AtmosCodingMode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEac3AtmosCodingMode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEac3AtmosCodingMode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CODING_MODE_AUTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosCodingMode::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CODING_MODE_5_1_4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosCodingMode::_5_1_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CODING_MODE_7_1_4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosCodingMode::_7_1_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CODING_MODE_9_1_6", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEac3AtmosCodingMode::_9_1_6;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEac3AtmosCodingMode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEac3AtmosCodingMode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEac3AtmosCodingMode::AUTO:
            val = "CODING_MODE_AUTO";
            break;
        case eOAIEac3AtmosCodingMode::_5_1_4:
            val = "CODING_MODE_5_1_4";
            break;
        case eOAIEac3AtmosCodingMode::_7_1_4:
            val = "CODING_MODE_7_1_4";
            break;
        case eOAIEac3AtmosCodingMode::_9_1_6:
            val = "CODING_MODE_9_1_6";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEac3AtmosCodingMode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEac3AtmosCodingMode::eOAIEac3AtmosCodingMode OAIEac3AtmosCodingMode::getValue() const {
    return m_value;
}

void OAIEac3AtmosCodingMode::setValue(const OAIEac3AtmosCodingMode::eOAIEac3AtmosCodingMode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEac3AtmosCodingMode::isSet() const {
    
    return m_value_isSet;
}

bool OAIEac3AtmosCodingMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
